{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDg3ODk4", "number": 758, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoyNzowN1rOEU_6-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0ODoyM1rOEVN4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDU0MjY3OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoyNzowN1rOG7gVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMjoxM1rOG7119A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0ODk3MA==", "bodyText": "This sentence looks incomplete. Was there more you wanted to say here?", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465048970", "createdAt": "2020-08-04T13:27:07Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * As constellation only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTMzMg==", "bodyText": "Ahh the opposite, I didn't delete enough!", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401332", "createdAt": "2020-08-05T00:22:13Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * As constellation only", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0ODk3MA=="}, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDU1MTAwOnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoyOToxNlrOG7ga6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMjoyMlrOG712Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MDM0Ng==", "bodyText": "A minor comment but this paragraph tag is redundant", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465050346", "createdAt": "2020-08-04T13:29:16Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTM2Nw==", "bodyText": "Removed", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401367", "createdAt": "2020-08-05T00:22:22Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MDM0Ng=="}, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDU1NTI3OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozMDoxN1rOG7gdpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMjozN1rOG712Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTA0Ng==", "bodyText": "You could add a <p> tag here.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465051046", "createdAt": "2020-08-04T13:30:17Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation os an N dimensional box that\n+ * represents the boundary of a graph.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTQ0Mw==", "bodyText": "Done :)", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401443", "createdAt": "2020-08-05T00:22:37Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation os an N dimensional box that\n+ * represents the boundary of a graph.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTA0Ng=="}, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDU3ODM4OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozNjoxNlrOG7gsGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMzo1NlrOG713vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDc0NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465054744", "createdAt": "2020-08-04T13:36:16Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTc4OA==", "bodyText": "Cant take credit for this, that link was from the original plugin, but its a really useful link right!", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401788", "createdAt": "2020-08-05T00:23:56Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDc0NA=="}, "originalCommit": {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgwNjM3OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNDozMlrOG72C5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowNDowMVrOG74dLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDY0NA==", "bodyText": "I'd add an access modifier here", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465404644", "createdAt": "2020-08-05T00:34:32Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation of an N dimensional box that\n+ * represents the boundary of a graph.\n+ * <p>\n+ * N must be 2 or greater.\n+ * \n+ * @author Nova\n+ */\n+public class AbstractBoundingBox {\n+    final float minX;\n+    final float minY;\n+    final float maxX;\n+    final float maxY;\n+    final float midX;\n+    final float midY;\n+\n+    /**\n+     * Generate a 2D bounding box for the graph.\n+     * <p>\n+     * This method creates a bounding box for the verticies of a given graph.\n+     * It does this by finding the extremes of both the X and Y axis.\n+     * These values are then made available as attributes of the class instance.\n+     * \n+     * @param wg  the graph\n+     * @return  instance of class BoundingBox2D based on input graph\n+     */\n+    AbstractBoundingBox(final GraphReadMethods wg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDE0MA==", "bodyText": "Made protected.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444140", "createdAt": "2020-08-05T03:04:01Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation of an N dimensional box that\n+ * represents the boundary of a graph.\n+ * <p>\n+ * N must be 2 or greater.\n+ * \n+ * @author Nova\n+ */\n+public class AbstractBoundingBox {\n+    final float minX;\n+    final float minY;\n+    final float maxX;\n+    final float maxY;\n+    final float midX;\n+    final float midY;\n+\n+    /**\n+     * Generate a 2D bounding box for the graph.\n+     * <p>\n+     * This method creates a bounding box for the verticies of a given graph.\n+     * It does this by finding the extremes of both the X and Y axis.\n+     * These values are then made available as attributes of the class instance.\n+     * \n+     * @param wg  the graph\n+     * @return  instance of class BoundingBox2D based on input graph\n+     */\n+    AbstractBoundingBox(final GraphReadMethods wg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDY0NA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgwODk2OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNTo0MlrOG72EPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowMzo1NFrOG74dHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDk5MA==", "bodyText": "Add access modifier here", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465404990", "createdAt": "2020-08-05T00:35:42Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDEyNA==", "bodyText": "Made protected", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444124", "createdAt": "2020-08-05T03:03:54Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDk5MA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgwOTA4OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNTo0OVrOG72EWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowMTo1OFrOG73fHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTAxOQ==", "bodyText": "Add access modifier here", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405019", "createdAt": "2020-08-05T00:35:49Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyODI1NA==", "bodyText": "Made protected", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465428254", "createdAt": "2020-08-05T02:01:58Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTAxOQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgwOTkzOnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNjoxNlrOG72Ezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowMzo0M1rOG74c8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTEzNQ==", "bodyText": "index can be made final", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405135", "createdAt": "2020-08-05T00:36:16Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDA4MA==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444080", "createdAt": "2020-08-05T03:03:43Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTEzNQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxMTE1OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNjo1MVrOG72Fcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowMzozNlrOG74cyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTI5OA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405298", "createdAt": "2020-08-05T00:36:51Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDA0Mw==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444043", "createdAt": "2020-08-05T03:03:36Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTI5OA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxMjA0OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozNzozM1rOG72F_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMzo0MlrOG731CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTQzNw==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405437", "createdAt": "2020-08-05T00:37:33Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));\n+                if (index != -1) {\n+                    nodes[index].insert(objects.remove(i));\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Insert all verticies in the graph into the tree.\n+     */\n+    protected final void insertAll() {\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            insert(wg.getVertex(position));\n+        }\n+    }\n+    \n+    /*\n+     * Return all objects that could collide with the given object.\n+     */\n+    protected final List<Integer> getPossibleColliders(final List<Integer> colliders, final int vxId) {\n+        // Recursively find all child colliders...\n+        final int index = getIndex(vxId);\n+        if (index != -1 && nodes != null) {\n+            nodes[index].getPossibleColliders(colliders, vxId);\n+        }\n+\n+        // ...and colliders at this level.\n+        colliders.addAll(objects);\n+\n+        return colliders;\n+    }\n+    \n+    /**\n+     * Check the entire graph for collisions. \n+     *\n+     * @return  boolean indicating whether the graph contains colliding verticies\n+     */\n+    public final boolean hasCollision(){\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            if(nodeCollides(wg.getVertex(position))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Returns boolean indicating whether or not the vertex collides with any\n+     * other verticies. Two verticies in exactly the same spot are not counted\n+     * as overlapping.\n+     *\n+     * @param subject The vertex to check for collisions.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     * @return the number of collisions.\n+     */\n+    protected final boolean nodeCollides(final int subject) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+\n+        // We need to deal with pathological cases such as everything at the same x,y point,\n+        // or everything co-linear.\n+        // We add a perturbation so points go different ways at different stages.\n+        for (final int possible : possibles) {\n+            if (subject != possible) {\n+                final double delta = getDelta(subject, possible);\n+                final double collisionDistance = getCollisionDistance(subject,possible);\n+                if (delta < collisionDistance) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Check the subject for \"twin\" verticies\n+     * \n+     * A twin verticie is defined as a verticie that falls within twinThreshold\n+     *  x (subject radius + twin radius + padding) of the subject.\n+     * The average radius is the average of the subject verticies radius and the\n+     * potential twins radius.\n+     * @param subject  The id of the vertex you wish to check for twins.\n+     * @param twinThreshold A scaling factor for the collision distance within \n+     * which the two noes are considered to be \"twins\". That is the distance\n+     * between them is so insignificant that we consider them in the same spot.\n+     * \n+     * @return  A set of vertex ideas for verticies  that are twins with the subject\n+     */\n+    public List<Integer> getTwins(final int subject, final double twinThreshold) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+        List<Integer> twins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzg2NQ==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433865", "createdAt": "2020-08-05T02:23:42Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));\n+                if (index != -1) {\n+                    nodes[index].insert(objects.remove(i));\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Insert all verticies in the graph into the tree.\n+     */\n+    protected final void insertAll() {\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            insert(wg.getVertex(position));\n+        }\n+    }\n+    \n+    /*\n+     * Return all objects that could collide with the given object.\n+     */\n+    protected final List<Integer> getPossibleColliders(final List<Integer> colliders, final int vxId) {\n+        // Recursively find all child colliders...\n+        final int index = getIndex(vxId);\n+        if (index != -1 && nodes != null) {\n+            nodes[index].getPossibleColliders(colliders, vxId);\n+        }\n+\n+        // ...and colliders at this level.\n+        colliders.addAll(objects);\n+\n+        return colliders;\n+    }\n+    \n+    /**\n+     * Check the entire graph for collisions. \n+     *\n+     * @return  boolean indicating whether the graph contains colliding verticies\n+     */\n+    public final boolean hasCollision(){\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            if(nodeCollides(wg.getVertex(position))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Returns boolean indicating whether or not the vertex collides with any\n+     * other verticies. Two verticies in exactly the same spot are not counted\n+     * as overlapping.\n+     *\n+     * @param subject The vertex to check for collisions.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     * @return the number of collisions.\n+     */\n+    protected final boolean nodeCollides(final int subject) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+\n+        // We need to deal with pathological cases such as everything at the same x,y point,\n+        // or everything co-linear.\n+        // We add a perturbation so points go different ways at different stages.\n+        for (final int possible : possibles) {\n+            if (subject != possible) {\n+                final double delta = getDelta(subject, possible);\n+                final double collisionDistance = getCollisionDistance(subject,possible);\n+                if (delta < collisionDistance) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Check the subject for \"twin\" verticies\n+     * \n+     * A twin verticie is defined as a verticie that falls within twinThreshold\n+     *  x (subject radius + twin radius + padding) of the subject.\n+     * The average radius is the average of the subject verticies radius and the\n+     * potential twins radius.\n+     * @param subject  The id of the vertex you wish to check for twins.\n+     * @param twinThreshold A scaling factor for the collision distance within \n+     * which the two noes are considered to be \"twins\". That is the distance\n+     * between them is so insignificant that we consider them in the same spot.\n+     * \n+     * @return  A set of vertex ideas for verticies  that are twins with the subject\n+     */\n+    public List<Integer> getTwins(final int subject, final double twinThreshold) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+        List<Integer> twins = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTQzNw=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxNTM3OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozOTozOFrOG72H3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowMzowNlrOG74cYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTkxOQ==", "bodyText": "Add access modifiers to this as well as constructors and functions in this file", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405919", "createdAt": "2020-08-05T00:39:38Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox2D extends AbstractBoundingBox{ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MzkzOQ==", "bodyText": "If the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465443939", "createdAt": "2020-08-05T03:03:06Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox2D extends AbstractBoundingBox{ ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTkxOQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxNjA4OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox3D.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDozOTo1N1rOG72ISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowMjo1N1rOG74cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjAyNA==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406024", "createdAt": "2020-08-05T00:39:57Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox3D.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * This class is designed to provide a 3D bounding box for a graph.\n+ * <p>\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox3D extends AbstractBoundingBox{ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MzkxNQ==", "bodyText": "If the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465443915", "createdAt": "2020-08-05T03:02:57Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox3D.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * This class is designed to provide a 3D bounding box for a graph.\n+ * <p>\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox3D extends AbstractBoundingBox{ ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjAyNA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxNzI5OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoxFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0MDozN1rOG72I-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjo1NDo0M1rOG74Upw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ==", "bodyText": "Add access modifiers", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406201", "createdAt": "2020-08-05T00:40:37Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoxFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * \n+ * @author Nova\n+ */\n+class BoxFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MTg1Nw==", "bodyText": "Deliberately left the class at Default/Package private access level.\nSame argument as for the AbstractBoundingBox :\nIf the class were public it would need to reside somewhere different as a general graph utility class..Currently there is no other use case and given it is a simple concept I believe a class fulfilling this role would already have been created if such a use case was likely to exist. Therefore it should remain package private.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465441857", "createdAt": "2020-08-05T02:54:19Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoxFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * \n+ * @author Nova\n+ */\n+class BoxFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MTk1OQ==", "bodyText": "I have made the create method protected.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465441959", "createdAt": "2020-08-05T02:54:43Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoxFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * \n+ * @author Nova\n+ */\n+class BoxFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxOTU0OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0MTo1OVrOG72KRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjo1MDowNlrOG74QMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjUzNQ==", "bodyText": "Add access modifier here", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406535", "createdAt": "2020-08-05T00:41:59Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MDgxOQ==", "bodyText": "Made public as it is a parameter for the plugin which must be public so that it can be registered and called from other packages.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465440819", "createdAt": "2020-08-05T02:50:06Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjUzNQ=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgxOTgzOnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0MjowNlrOG72KbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMzo0OVrOG731Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjU3Mw==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406573", "createdAt": "2020-08-05T00:42:06Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {\n+    TWO, THREE;\n+    \n+    public static List<String> getOptions() {\n+        ArrayList<String> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkxNA==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433914", "createdAt": "2020-08-05T02:23:49Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {\n+    TWO, THREE;\n+    \n+    public static List<String> getOptions() {\n+        ArrayList<String> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjU3Mw=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgyMDk0OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0Mjo0MlrOG72K_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjo0MTozMFrOG74HEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjcxOA==", "bodyText": "Add access modifiers here and in constructors", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406718", "createdAt": "2020-08-05T00:42:42Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class OctTree extends AbstractTree{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODQ4MQ==", "bodyText": "Added to constructor but class is deliberately package private.\nIf the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465438481", "createdAt": "2020-08-05T02:41:30Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class OctTree extends AbstractTree{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjcxOA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgyMjI5OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0Mzo0MVrOG72L4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjo0MDoxNVrOG74Fvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjk0NA==", "bodyText": "Add access modifier here and constructor", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406944", "createdAt": "2020-08-05T00:43:41Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODE0Mg==", "bodyText": "Added to constructor but class is deliberately package private.\nIf the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465438142", "createdAt": "2020-08-05T02:40:15Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjk0NA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgyMjY4OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0Mzo1OFrOG72MIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMzo1OFrOG731YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzAwOA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465407008", "createdAt": "2020-08-05T00:43:58Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{\n+    protected static final int TOP_R = 0;\n+    protected static final int TOP_L = 1;\n+    protected static final int BOT_L = 2;\n+    protected static final int BOT_R = 3;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    QuadTree(final GraphReadMethods graph) {\n+        super(graph, Dimensions.TWO);\n+        this.box = new BoundingBox2D(graph);\n+        insertAll();\n+    }\n+\n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    protected QuadTree(QuadTree parent, final BoundingBox2D box) {\n+        super(parent, box);\n+    }\n+\n+    /*\n+     * Splits the node into four subnodes.\n+     * <p>\n+     * Divide the node into four equal parts and initialise the four subnodes with the new bounds.\n+     */\n+    @Override\n+    protected void split() {\n+        BoundingBox2D box2D = (BoundingBox2D) this.box;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk1Mg==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433952", "createdAt": "2020-08-05T02:23:58Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{\n+    protected static final int TOP_R = 0;\n+    protected static final int TOP_L = 1;\n+    protected static final int BOT_L = 2;\n+    protected static final int BOT_R = 3;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    QuadTree(final GraphReadMethods graph) {\n+        super(graph, Dimensions.TWO);\n+        this.box = new BoundingBox2D(graph);\n+        insertAll();\n+    }\n+\n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    protected QuadTree(QuadTree parent, final BoundingBox2D box) {\n+        super(parent, box);\n+    }\n+\n+    /*\n+     * Splits the node into four subnodes.\n+     * <p>\n+     * Divide the node into four equal parts and initialise the four subnodes with the new bounds.\n+     */\n+    @Override\n+    protected void split() {\n+        BoundingBox2D box2D = (BoundingBox2D) this.box;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzAwOA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgyNDg4OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/TreeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0NDo1OFrOG72NXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjozMzoyN1rOG73-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzMyNg==", "bodyText": "access modifiers", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465407326", "createdAt": "2020-08-05T00:44:58Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/TreeFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+class TreeFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjM3MQ==", "bodyText": "Deliberate leaving this at default/package private access level.\nIf it were to be public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class.", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465436371", "createdAt": "2020-08-05T02:33:27Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/TreeFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+class TreeFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzMyNg=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgzMDU0OnYy", "diffSide": "RIGHT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/UncollideArrangement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo0ODoyM1rOG72Qrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyNDowOVrOG731iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODE3NA==", "bodyText": "these 2 could maybe be final?", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465408174", "createdAt": "2020-08-05T00:48:23Z", "author": {"login": "antares1470"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/UncollideArrangement.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphConstants;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.PluginException;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.plugins.PluginInteraction;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.utilities.ArrangementUtilities;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.openide.util.Exceptions;\n+import org.python.modules.math;\n+\n+public class UncollideArrangement implements Arranger {\n+\n+    private final Dimensions dimensions;\n+    private PluginInteraction interaction;\n+    private boolean maintainMean = false;\n+    private final double twinScaling;\n+    \n+\n+    public UncollideArrangement(final Dimensions dimensions, final int maxExpansions) {\n+        this.twinScaling = math.pow(1.1, -maxExpansions);\n+        this.dimensions = dimensions;\n+        \n+    }\n+\n+    public void setInteraction(final PluginInteraction interaction) {\n+        this.interaction = interaction;\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+        final float[] oldMean = maintainMean ? ArrangementUtilities.getXyzMean(wg) : null;\n+\n+        final int vxCount = wg.getVertexCount();\n+\n+        if (vxCount > 0) {\n+            try {\n+                uncollide(wg, 2000);\n+            } catch (PluginException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+            if (maintainMean) {\n+                ArrangementUtilities.moveMean(wg, oldMean);\n+            }\n+        }\n+    }\n+\n+    private void uncollide(final GraphWriteMethods wg,final int iter) throws InterruptedException, PluginException {\n+        final int vertexCount = wg.getVertexCount();\n+\n+        AbstractTree tree = TreeFactory.create(wg, dimensions);\n+        int countIterations = 0;\n+        int numberNoTwins = 0;\n+        while (numberNoTwins < vertexCount) {\n+            if (Objects.nonNull(interaction)) {\n+                final String msg = String.format(\"Nodes with \\\"Twins\\\" %d of %d; iteration %d\", numberNoTwins, vertexCount, ++countIterations);\n+                interaction.setProgress(numberNoTwins, vertexCount, msg, true);\n+            }\n+            numberNoTwins = nudgeAllTwins(wg, tree);\n+            tree = TreeFactory.create(wg, dimensions);\n+        }\n+\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", true);\n+        }\n+        \n+        for (int i = 0; i < iter && tree.hasCollision(); i++) {\n+\n+            PluginExecution.withPlugin(ArrangementPluginRegistry.EXPAND_GRAPH).executeNow(wg);\n+\n+            tree = TreeFactory.create(wg, dimensions);\n+\n+            if (Thread.interrupted()) {\n+                throw new InterruptedException();\n+            }\n+        }\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", false);\n+        }\n+    }\n+    \n+    private int nudgeAllTwins(GraphWriteMethods wg, AbstractTree tree) {\n+        List<Integer> twins;\n+        int numberNoTwins = 0;\n+        for (int subject = 0; subject < wg.getVertexCount(); subject++) {\n+            twins = tree.getTwins(subject, twinScaling);\n+            if (twins.isEmpty()) {\n+                numberNoTwins++;\n+            } else {\n+                nudgeTwins(wg, subject, twins.get(0));\n+            }                  \n+        }\n+        return numberNoTwins;\n+    }\n+    \n+    /**\n+     * Nudges two nodes in approximately the same place so that they do not overlap.\n+     *\n+     * @param subject The vertex to check for twins.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     */\n+    private void nudgeTwins(final GraphWriteMethods wg, final int subject, final int twin) {\n+        final int xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        final int yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        final int zId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName());\n+        final int rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+        \n+        double[] deltas;\n+        float deltaX = wg.getFloatValue(xId, subject) - wg.getFloatValue(xId, twin);\n+        float deltaY = wg.getFloatValue(yId, subject) - wg.getFloatValue(yId, twin);\n+        float deltaZ = 0;\n+        \n+        double collisionDistance;\n+        double delta;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk5Mw==", "bodyText": "They certainly can!", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433993", "createdAt": "2020-08-05T02:24:09Z", "author": {"login": "Nova-2119"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/UncollideArrangement.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphConstants;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.PluginException;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.plugins.PluginInteraction;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.utilities.ArrangementUtilities;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.openide.util.Exceptions;\n+import org.python.modules.math;\n+\n+public class UncollideArrangement implements Arranger {\n+\n+    private final Dimensions dimensions;\n+    private PluginInteraction interaction;\n+    private boolean maintainMean = false;\n+    private final double twinScaling;\n+    \n+\n+    public UncollideArrangement(final Dimensions dimensions, final int maxExpansions) {\n+        this.twinScaling = math.pow(1.1, -maxExpansions);\n+        this.dimensions = dimensions;\n+        \n+    }\n+\n+    public void setInteraction(final PluginInteraction interaction) {\n+        this.interaction = interaction;\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+        final float[] oldMean = maintainMean ? ArrangementUtilities.getXyzMean(wg) : null;\n+\n+        final int vxCount = wg.getVertexCount();\n+\n+        if (vxCount > 0) {\n+            try {\n+                uncollide(wg, 2000);\n+            } catch (PluginException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+            if (maintainMean) {\n+                ArrangementUtilities.moveMean(wg, oldMean);\n+            }\n+        }\n+    }\n+\n+    private void uncollide(final GraphWriteMethods wg,final int iter) throws InterruptedException, PluginException {\n+        final int vertexCount = wg.getVertexCount();\n+\n+        AbstractTree tree = TreeFactory.create(wg, dimensions);\n+        int countIterations = 0;\n+        int numberNoTwins = 0;\n+        while (numberNoTwins < vertexCount) {\n+            if (Objects.nonNull(interaction)) {\n+                final String msg = String.format(\"Nodes with \\\"Twins\\\" %d of %d; iteration %d\", numberNoTwins, vertexCount, ++countIterations);\n+                interaction.setProgress(numberNoTwins, vertexCount, msg, true);\n+            }\n+            numberNoTwins = nudgeAllTwins(wg, tree);\n+            tree = TreeFactory.create(wg, dimensions);\n+        }\n+\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", true);\n+        }\n+        \n+        for (int i = 0; i < iter && tree.hasCollision(); i++) {\n+\n+            PluginExecution.withPlugin(ArrangementPluginRegistry.EXPAND_GRAPH).executeNow(wg);\n+\n+            tree = TreeFactory.create(wg, dimensions);\n+\n+            if (Thread.interrupted()) {\n+                throw new InterruptedException();\n+            }\n+        }\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", false);\n+        }\n+    }\n+    \n+    private int nudgeAllTwins(GraphWriteMethods wg, AbstractTree tree) {\n+        List<Integer> twins;\n+        int numberNoTwins = 0;\n+        for (int subject = 0; subject < wg.getVertexCount(); subject++) {\n+            twins = tree.getTwins(subject, twinScaling);\n+            if (twins.isEmpty()) {\n+                numberNoTwins++;\n+            } else {\n+                nudgeTwins(wg, subject, twins.get(0));\n+            }                  \n+        }\n+        return numberNoTwins;\n+    }\n+    \n+    /**\n+     * Nudges two nodes in approximately the same place so that they do not overlap.\n+     *\n+     * @param subject The vertex to check for twins.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     */\n+    private void nudgeTwins(final GraphWriteMethods wg, final int subject, final int twin) {\n+        final int xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        final int yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        final int zId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName());\n+        final int rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+        \n+        double[] deltas;\n+        float deltaX = wg.getFloatValue(xId, subject) - wg.getFloatValue(xId, twin);\n+        float deltaY = wg.getFloatValue(yId, subject) - wg.getFloatValue(yId, twin);\n+        float deltaZ = 0;\n+        \n+        double collisionDistance;\n+        double delta;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODE3NA=="}, "originalCommit": {"oid": "0742b2cff50e364e318679055e376b7b6555fd13"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2240, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}