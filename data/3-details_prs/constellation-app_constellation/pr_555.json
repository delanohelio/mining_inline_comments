{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjQyMjEy", "number": 555, "title": "Add Search filters to Transaction Types and Node Types tabs in Schema View", "bodyText": "Description of the Change\nAdd Search filters to Transaction Types and Node Types tabs in Schema View\n\nAlternate Designs\nN/A\n\nWhy Should This Be In Core?\nBetter UX\n\nBenefits\nBetter UX\n\nPossible Drawbacks\nN/A\n\nVerification Process\nTry the  Search filters in 'Transaction Types' and 'Node Types' tabs in Schema View of a graph.\n\nApplicable Issues\n#373", "createdAt": "2020-05-27T06:41:45Z", "url": "https://github.com/constellation-app/constellation/pull/555", "merged": true, "mergeCommit": {"oid": "0f7f4a215b042d8d0d1557bc679be5516384c6fa"}, "closed": true, "closedAt": "2020-06-09T01:18:19Z", "author": {"login": "Auriga2"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclTNdvgH2gAyNDIzNjQyMjEyOjI2OWI2YWIxNTdlOWViYzkwMDBlMmI3MDQzNDE3NDQ4NTEyM2E2MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpZPl1AFqTQyNjY5MzQ0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630", "author": {"user": {"login": "Auriga2", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/269b6ab157e9ebc9000e2b70434174485123a630", "committedDate": "2020-05-27T06:24:11Z", "message": "Add Search filters to Transaction Types and Node Types tabs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTczNjQ3", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-419173647", "createdAt": "2020-05-27T12:55:28Z", "commit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NToyOFrOGbH7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjozMlrOGbIpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NDcxOA==", "bodyText": "I wonder if it'd be better to move this into a stylesheet, given that we're looking to implement light/dark themes and the highlight style might need to change with the theme.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431094718", "createdAt": "2020-05-27T12:55:28Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -59,11 +63,14 @@\n     public static final String MIMETYPE = \"application/x-constellation-transactiontype\";\n     public static final DataFormat TRANSACTION_TYPE = new DataFormat(MIMETYPE);\n     private static final int ICON_IMAGE_SIZE = 16;\n+    private static final String HIGHLIGHT_BLUE_STYLE = \"-fx-background-color: rgb(30,144,255); -fx-padding: 2 5 2 5;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NTM3Mg==", "bodyText": "You should try to avoid non-descriptive variable names like this.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431095372", "createdAt": "2020-05-27T12:56:27Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NzYyMQ==", "bodyText": "why does only this variable have 'Label' in its name?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431097621", "createdAt": "2020-05-27T12:59:11Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();\n+        found = isFilterMatchText(name);\n+        if (!found) {\n+            final String description = treeItem.getDescription();\n+            found = isFilterMatchText(description);\n+        }\n+        if (!found) {\n+            final String color = treeItem.getColor().toString();\n+            found = isFilterMatchText(color);\n+        }\n+        if (!found) {\n+            final String style = treeItem.getStyle().toString();\n+            found = isFilterMatchText(style);\n+        }\n+        if (!found) {\n+            final String directedLabel = treeItem.isDirected().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5ODE5MQ==", "bodyText": "This could be final.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431098191", "createdAt": "2020-05-27T12:59:38Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();\n+        found = isFilterMatchText(name);\n+        if (!found) {\n+            final String description = treeItem.getDescription();\n+            found = isFilterMatchText(description);\n+        }\n+        if (!found) {\n+            final String color = treeItem.getColor().toString();\n+            found = isFilterMatchText(color);\n+        }\n+        if (!found) {\n+            final String style = treeItem.getStyle().toString();\n+            found = isFilterMatchText(style);\n+        }\n+        if (!found) {\n+            final String directedLabel = treeItem.isDirected().toString();\n+            found = isFilterMatchText(directedLabel);\n+        }\n+        if (!found) {\n+            final String hierachy = treeItem.getHierachy();\n+            found = isFilterMatchText(hierachy);\n+        }\n+        if (!found) {\n+            for (String property : treeItem.getProperties().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5ODU5NA==", "bodyText": "This and the variables below could be final.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431098594", "createdAt": "2020-05-27T12:59:58Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -200,12 +296,20 @@ public void setContent(final Tab tab) {\n                         grid.add(propertyLabel, 1, gridPosition);\n                     }\n                 }\n-\n+                for (Node child : grid.getChildren()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjQxOA==", "bodyText": "This block could be made more compact using something like\nreturn isFilterMatchText(treeItem.getName()) \n    || isFilterMatchText(treeItem.getDescription())\n    ...\n    || treeItem.getProperties.stream().anyMatch(property -> \n        property != null && isFilterMatchText(property.toString())\n    );\n\n...although I do wonder how much readability you'd lose.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431106418", "createdAt": "2020-05-27T13:06:32Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjU5MDIw", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-420659020", "createdAt": "2020-05-29T05:21:40Z", "commit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToyMTo0MFrOGcPHxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozODoyOFrOGcPY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MTA2Mg==", "bodyText": "This can all be simplified to return isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432261062", "createdAt": "2020-05-29T05:21:40Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MzY0OQ==", "bodyText": "I'll add my 2 cents here and say that provided you added each condition on a new line, I think what @cygnus-x-1 has suggested is more readable than a large list of if statements. The numerous amount of if statements will also increase the cognitive complexity higher than I reckon it needs to be", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432263649", "createdAt": "2020-05-29T05:31:08Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjQxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDQ3NQ==", "bodyText": "Can probably omit .toLowerCase() if you are just checking if it's empty", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264475", "createdAt": "2020-05-29T05:34:36Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDU1Mg==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264552", "createdAt": "2020-05-29T05:34:51Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(tt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == value && tt != value) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDg4OA==", "bodyText": "Similar to what was mentioned in the other file, this can probably be reduced to one return statement", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264888", "createdAt": "2020-05-29T05:36:11Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -177,15 +187,122 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n+\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter Node types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n \n-            final TreeItem<SchemaVertexType> root = createNode(null);\n-            treeView.setRoot(root);\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaVertexType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchTextAnyProperty(treeItem);\n+        }\n+        if (!found) {\n+            found = isFilterMatchTextAnyChildNodes(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTI2Mg==", "bodyText": "This and the above can be made final", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265262", "createdAt": "2020-05-29T05:37:42Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -303,12 +420,20 @@ public void setContent(final Tab tab) {\n                         grid.add(propertyLabel, 1, gridPosition);\n                     }\n                 }\n-\n+                for (Node child : grid.getChildren()) {\n+                    Integer column = GridPane.getColumnIndex(child);\n+                    Integer row = GridPane.getRowIndex(child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ0NA==", "bodyText": "can probably omit toLowerCase() if just doing emptiness check", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265444", "createdAt": "2020-05-29T05:38:21Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ2Nw==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265467", "createdAt": "2020-05-29T05:38:28Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(vt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == value && vt != value) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 206}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538", "author": {"user": {"login": "Auriga2", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/17846549a982161c51cf34b861e2f43e538b5538", "committedDate": "2020-06-02T03:44:08Z", "message": "Bug fixes and improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzI1MDg4", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-422325088", "createdAt": "2020-06-02T03:56:04Z", "commit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1NjowNVrOGdhOQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowNDoxNVrOGdhVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ==", "bodyText": "Change this return to !filterText.getText().isEmpty() || isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433606211", "createdAt": "2020-06-02T03:56:05Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzM0Ng==", "bodyText": "change this return to !filterInputText.isEmpty() && !propertyValue.isEmpty() && (startsWithRb.isSelected() ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607346", "createdAt": "2020-06-02T04:01:22Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);\n     }\n \n     private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String style = treeItem.getStyle().toString();\n-            found = isFilterMatchText(style);\n-        }\n-        if (!found) {\n-            final String directedLabel = treeItem.isDirected().toString();\n-            found = isFilterMatchText(directedLabel);\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(Objects.toString(treeItem.getColor().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getStyle().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.isDirected().toString(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzU0Ng==", "bodyText": "Change this return to !filterText.getText().isEmpty() && (isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607546", "createdAt": "2020-06-02T04:02:27Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzk1MA==", "bodyText": "change this return to !filterInputText.isEmpty() && !propertyValue.isEmpty() && (startsWithRb.isSelected() ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607950", "createdAt": "2020-06-02T04:04:15Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);\n     }\n \n-    private boolean isFilterMatchTextAnyChildNodes(SchemaVertexType treeItem) {\n+    private boolean isFilterMatchAnyChildNodes(SchemaVertexType treeItem) {\n         boolean found = false;\n-        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n+        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt\n+                -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n \n         for (SchemaVertexType child : children) {\n-            found = isFilterMatchTextCurrentNodeOrAnyChildren(child);\n+            found = isFilterMatchCurrentNodeOrAnyChildren(child);\n             if (found) {\n                 break;\n             }\n         }\n         return found;\n     }\n \n-    private boolean isFilterMatchTextAnyProperty(SchemaVertexType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String foregroundIconLabel = treeItem.getForegroundIcon().getName();\n-            found = isFilterMatchText(foregroundIconLabel);\n-        }\n-        if (!found) {\n-            if (treeItem.getValidationRegex() != null) {\n-                final String validationLabel = treeItem.getValidationRegex().toString();\n-                found = isFilterMatchText(validationLabel);\n-            }\n-        }\n-        if (!found) {\n-            if (treeItem.getDetectionRegex() != null) {\n-                final String detectionLabel = treeItem.getDetectionRegex().toString();\n-                found = isFilterMatchText(detectionLabel);\n-            }\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+    private boolean isFilterMatchAnyProperty(SchemaVertexType treeItem) {\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(treeItem.getColor().getName())\n+                || isFilterMatchText(treeItem.getForegroundIcon().getName())\n+                || isFilterMatchText(Objects.toString(treeItem.getValidationRegex(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getDetectionRegex(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284", "author": {"user": {"login": "Auriga2", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284", "committedDate": "2020-06-03T03:28:40Z", "message": " Improvements and fix code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjA0NDU1", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-423204455", "createdAt": "2020-06-03T04:08:36Z", "commit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDk4MzE2", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-424098316", "createdAt": "2020-06-04T04:44:19Z", "commit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDoxOVrOGe1phw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDo0MlrOGe1pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4OTQ0Nw==", "bodyText": "I'd suggest expanding out the variable name tt.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434989447", "createdAt": "2020-06-04T04:44:19Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -290,18 +368,17 @@ public boolean isLeaf() {\n                     // Null is a special marker for the single root node.\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n-                        if (tt.getSuperType() == tt) {\n-                            children.add(createNode(tt));\n+                        if ((tt.getSuperType() == tt) && (isFilterMatchCurrentNode(tt) || filterText.getText().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4OTUxNg==", "bodyText": "...and similarly the variable name vt.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434989516", "createdAt": "2020-06-04T04:44:42Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -394,18 +483,17 @@ public boolean isLeaf() {\n                     // Null is a special marker for the single root node.\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n-                        if (vt.getSuperType() == vt) {\n-                            children.add(createNode(vt));\n+                        if ((vt.getSuperType() == vt) && (isFilterMatchCurrentNodeOrAnyChildren(vt) || filterText.getText().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7633272a6f8f70d8cda24222e4ff75b9892a9587", "author": {"user": {"login": "Auriga2", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/7633272a6f8f70d8cda24222e4ff75b9892a9587", "committedDate": "2020-06-04T05:44:18Z", "message": "Fix some non-descriptive variable names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjkzNDQz", "url": "https://github.com/constellation-app/constellation/pull/555#pullrequestreview-426693443", "createdAt": "2020-06-08T23:41:38Z", "commit": {"oid": "7633272a6f8f70d8cda24222e4ff75b9892a9587"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3537, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}