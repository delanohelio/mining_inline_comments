{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODA3NDE1", "number": 215, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzozNToyOVrODbH3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0ODowMFrODbIBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY3MDExOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzozNToyOVrOFibV4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjozNzo0M1rOFjG7Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Mzg3NA==", "bodyText": "What is happening here?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371643874", "createdAt": "2020-01-28T07:35:29Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwMDUxOA==", "bodyText": "constellation/CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java\n    \n    \n        Lines 527 to 535\n      in\n      fbce6de\n    \n    \n    \n    \n\n        \n          \n           // Allows triggering of selection listener when a checkbox is changed \n        \n\n        \n          \n           this.checkbox.selectedProperty().addListener((observable, oldValue, newValue) -> { \n        \n\n        \n          \n               if (parent != null) { \n        \n\n        \n          \n                   if (parent.getListView().getSelectionModel().getSelectedItem() == this) { \n        \n\n        \n          \n                       parent.getListView().getSelectionModel().clearSelection(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   parent.getListView().getSelectionModel().select(this); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }); \n        \n    \n  \n\n\nSo, for an event to fire on the selection model of the pluginList, the plugin has to change state to highlighted. If the plugin was already highlighted but did not have it's checkbox \"checked\", a user could select the checkbox and no update event would occur to store the state.\nBy adding a listener to the checkbox, I could trigger an event in it's parent (Listviewcell)'s selection model event. I felt that this would be the cleanest way rather than creating another public method to call once the checkbox event was called.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372100518", "createdAt": "2020-01-28T22:43:18Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Mzg3NA=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1Nzg5NQ==", "bodyText": "Cool - that makes sense.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372357895", "createdAt": "2020-01-29T12:37:43Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Mzg3NA=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY3NDU4OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzozNzo0NVrOFibYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1MzozOFrOFi3c6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NDU0Mw==", "bodyText": "Should this be categoryWasSelected?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371644543", "createdAt": "2020-01-28T07:37:45Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -582,4 +620,71 @@ public String getName() {\n             return \"Analytic View: Update State\";\n         }\n     }\n+    \n+    /**\n+     * Update the display by reading and writing to/from the state attribute. \n+     */\n+    private static final class AnalyticViewStateUpdater extends SimpleEditPlugin {\n+\n+        private final AnalyticConfigurationPane analyticConfigurationPane;\n+        private final boolean pluginWasSelected;\n+        \n+        public AnalyticViewStateUpdater(final AnalyticConfigurationPane analyticConfigurationPane, final boolean categoryWasSelected) {\n+            this.analyticConfigurationPane = analyticConfigurationPane;\n+            this.pluginWasSelected = categoryWasSelected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNDQyNA==", "bodyText": "A missed variable when refactoring for ease of reading. Ill get that fixed.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372104424", "createdAt": "2020-01-28T22:53:38Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -582,4 +620,71 @@ public String getName() {\n             return \"Analytic View: Update State\";\n         }\n     }\n+    \n+    /**\n+     * Update the display by reading and writing to/from the state attribute. \n+     */\n+    private static final class AnalyticViewStateUpdater extends SimpleEditPlugin {\n+\n+        private final AnalyticConfigurationPane analyticConfigurationPane;\n+        private final boolean pluginWasSelected;\n+        \n+        public AnalyticViewStateUpdater(final AnalyticConfigurationPane analyticConfigurationPane, final boolean categoryWasSelected) {\n+            this.analyticConfigurationPane = analyticConfigurationPane;\n+            this.pluginWasSelected = categoryWasSelected;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NDU0Mw=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY4MDUxOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0MToxNVrOFibcOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjoxNjo0MVrOFjGZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTQ5Ng==", "bodyText": "What's the advantage of this, isn't it functionally equivalent to what was there before?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371645496", "createdAt": "2020-01-28T07:41:15Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNTA2Ng==", "bodyText": "Yes, I overlooked the change when working on another solution. This should work fine without the change.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372105066", "createdAt": "2020-01-28T22:55:30Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTQ5Ng=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMzc2MA==", "bodyText": "On testing, I now recall that the reason for this was to pass a list of selected plugins to the state class. This state class then grabbed each one and singly added them to a list and added that list as an entry to the activeSelectablePlugins list.\nRegarding the double list structure, and your comment in the original issue post; Would you like this refactored, or the implementation changed to match the design decision of including multiple plugins in a single list to suit the question and tabbed design?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372113760", "createdAt": "2020-01-28T23:20:51Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTQ5Ng=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTIwNQ==", "bodyText": "Yes I think that would be a better design.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372349205", "createdAt": "2020-01-29T12:16:41Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTQ5Ng=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY5MDM5OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0NTo0N1rOFibh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjoxNzoyOVrOFjGaMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Njk0OA==", "bodyText": "Why are you doing this? In fact why is activeSelectablePlugins a list of lists?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371646948", "createdAt": "2020-01-28T07:45:47Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNDcyOA==", "bodyText": "I had the impression it was a design decision for something that may be implemented in the future possibly to do with saving/loading of questions/plugins.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372104728", "createdAt": "2020-01-28T22:54:24Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Njk0OA=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTQ5MQ==", "bodyText": "Sorry, I recalled why it was structured this way after I wrote this comment - please disregard.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372349491", "createdAt": "2020-01-29T12:17:29Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewState.java", "diffHunk": "@@ -65,7 +66,11 @@ public void setCurrentAnalyticQuestionIndex(final int currentAnalyticQuestionInd\n \n     public void addAnalyticQuestion(final AnalyticQuestionDescription<?> question, final List<SelectableAnalyticPlugin> selectablePlugins) {\n         activeAnalyticQuestions.add(question);\n-        activeSelectablePlugins.add(selectablePlugins);\n+        for (SelectableAnalyticPlugin plugin : selectablePlugins) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Njk0OA=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY5MTg3OnYy", "diffSide": "LEFT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0NjowOFrOFibilQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoyNzo0NFrOFkJ74A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ==", "bodyText": "Why have you removed all the attribute listeners? Also, is there a reason you haven't implemented the structure and state listeners above?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371647125", "createdAt": "2020-01-28T07:46:08Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMDcwNw==", "bodyText": "Regarding the attribute listeners,\nThey seemed to be running over most if not all plugin parameters and updating their parameters to the default parameters. Do you have a suggestion on how this would be possible to work around, whilst still allowing them to be added for the plugins not on this repo?\nI can take a look at refactoring the code to include these state listeners if you feel they would benefit as opposed to the current solution.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372110707", "createdAt": "2020-01-28T23:11:34Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NjUwNQ==", "bodyText": "So what should be happening here is that individual analytics can specify prerequisite attributes (ie. attributes they rely on for their parameters) using AnalyticPlugin.getPrerequisiteAttributes along with a way of handling changes to those attributes using AnalyticPlugin.onPrerequisiteAttributeChange. This block of code is generically attaching listeners against all specified prerequisite attributes and handling them with the provided handler functions. I would expect many analytics to be affected by this as ScoreAnalyticPlugin and FactAnalyticPlugin use this mechanism to listen for changes to the AnalyticConcept.TransactionAttribute.TYPE attribute in order to update their \"Transaction Types\" parameters when types are added to or removed from the graph. If it's not quite behaving on an update, then it might be worth taking a look at ScoreAnalyticPlugin.onPrerequisiteAttributeChange and FactAnalyticPlugin.onPrerequisiteAttributeChange.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372356505", "createdAt": "2020-01-29T12:34:33Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NzA1OA==", "bodyText": "Hi @cygnus-x-1 I've noticed that within the section I removed for listeners and prerequisite attributes, there is a call to createParameters().\n\n  \n    \n      constellation/CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/analytics/AnalyticPlugin.java\n    \n    \n        Lines 80 to 83\n      in\n      b9389f2\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n\n        \n          \n           public PluginParameters createParameters() { \n        \n\n        \n          \n               return new PluginParameters(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nI believe that when it hits line 115, the plugins that do not implement any special behaviour just act out the superclass method above. Which just returns the default parameters from a plugin.\n\n  \n    \n      constellation/CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java\n    \n    \n        Lines 112 to 122\n      in\n      b9389f2\n    \n    \n    \n    \n\n        \n          \n               prerequisiteAttributes.forEach((attribute, plugins) -> { \n        \n\n        \n          \n                   addAttributeValueChangeHandler(attribute, graph -> { \n        \n\n        \n          \n                       plugins.forEach(plugin -> { \n        \n\n        \n          \n                           final PluginParameters updatedParameters = plugin.createParameters().copy(); \n        \n\n        \n          \n                           plugin.onPrerequisiteAttributeChange(graph, updatedParameters); \n        \n\n        \n          \n                           analyticViewPane.getConfigurationPane().lookupSelectablePlugin(plugin).setUpdatedParameters(updatedParameters); \n        \n\n        \n          \n                       }); \n        \n\n        \n          \n                       analyticViewPane.getConfigurationPane().updateSelectablePluginsParameters(); \n        \n\n        \n          \n                   }); \n        \n\n        \n          \n               }); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThese are then set at line 117 which overrides the different parameter values at runtime.\nAs createParameters() is utilized by many other classes, changing the default behaviour may come with unwanted bugs. How could I handle this to keep it from breaking other code.\nI'll also push the rest of the code, this is the last of the pull request fixes currently in review.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372777058", "createdAt": "2020-01-30T06:26:36Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyNDQzMw==", "bodyText": "That sounds right - if an AnalyticPlugin does not have any parameters, then it'll simply use an empty PluginParameters  inherited from the abstract base class.\nThe listeners in the AnalyticViewTopComponent will then react to changes to a \"prerequisite attribute\" by updating that plugins parameters (which defaults to no parameters) using that plugins onPrerequisiteAttributeChange implementation (which defaults to a no-op). Note that this code also takes a copy of the parameters and updates SelectableAnalyticPlugin.updatedParameters instead of SelectableAnalyticPlugin.parameters in order to avoid events being triggered by changes to these parameters until the Analytic View is ready for them (AnalyticConfigurationPane.updateSelectablePluginsParameters).\nPlugin.createParameters is simply designed to set-up and return the default parameters for a plugin, generally to be used at the beginning of a plugin lifecycle. It is designed to be overridden to make it specific to a plugin implementation, and I believe that's exactly how it's being used here. Are you seeing any specific issues manifesting with this code?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372924433", "createdAt": "2020-01-30T12:39:00Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MDI0NA==", "bodyText": "Plugin.createParameters is simply designed to set-up and return the default parameters for a plugin, generally to be used at the beginning of a plugin lifecycle. It is designed to be overridden to make it specific to a plugin implementation, and I believe that's exactly how it's being used here.\n\nYou are not wrong in saying this, It currently gets the default PluginParameters during the createParameters() call. Then, obviously it .copy() 's the default parameters values.\nThe main issue I see is that within .manualUpdate(), all listeners are triggered to update things. Including the PrerequisiteAttributeListeners. The graph is read from and state attribute written to first. Then when you launch the Analytic View, it does a .manualUpdate().\nAs you can see in this step through, the first image is line 117 getting the SelectableAnalyticPlugin. Note the red circle showing the boolean value read from the state attribute.\n\nIn this second screenshot, It displays the value of the updatedParameters which are going to replace the current values. Note the highlighted boolean value down the bottom showing the SelectableAnalyticPlugin parameters value which will now be set to true after execution of this line.\n\nAll of this occurs when the following preconditions are met:\n\nGraph is currently opened\nAnalytic View is being opened\n\nLine 115 and 116 seem to work perfect for the use case when the prerequisite attribute changes, but on triggering of all handlers, it writes defaults to them which override the loaded parameters from state.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r373280244", "createdAt": "2020-01-31T01:32:33Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1NTg0MA==", "bodyText": "Okay I think I understand the problem you're describing - essentially any parameters which are not updated by AnalyticPlugin.onPrerequisiteAttributeChange explicitly will instead be updated to the default value for that parameter when SelectableAnalyticPlugin.updatedParameters is copied across to SelectableAnalyticPlugin.parameters, overwriting any other changes, such as those set by the state.\nYeah that's a tough one - i'll have to think about that.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r373455840", "createdAt": "2020-01-31T12:27:44Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticViewTopComponent.java", "diffHunk": "@@ -109,16 +109,6 @@ public AnalyticViewTopComponent() {\n                 prerequisiteAttributes.get(attribute).add(plugin);\n             });\n         });\n-        prerequisiteAttributes.forEach((attribute, plugins) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzEyNQ=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY5Mjc3OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0NjozN1rOFibjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMTo1N1rOFi4C6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzI2NA==", "bodyText": "Shouldn't all this be in the state listener on the top component?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371647264", "createdAt": "2020-01-28T07:46:37Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -582,4 +620,71 @@ public String getName() {\n             return \"Analytic View: Update State\";\n         }\n     }\n+    \n+    /**\n+     * Update the display by reading and writing to/from the state attribute. \n+     */\n+    private static final class AnalyticViewStateUpdater extends SimpleEditPlugin {\n+\n+        private final AnalyticConfigurationPane analyticConfigurationPane;\n+        private final boolean pluginWasSelected;\n+        \n+        public AnalyticViewStateUpdater(final AnalyticConfigurationPane analyticConfigurationPane, final boolean categoryWasSelected) {\n+            this.analyticConfigurationPane = analyticConfigurationPane;\n+            this.pluginWasSelected = categoryWasSelected;\n+        }\n+\n+        @Override\n+        public void edit(final GraphWriteMethods graph, final PluginInteraction interaction, final PluginParameters parameters) throws InterruptedException, PluginException {\n+            String currentCategory = analyticConfigurationPane.categoryList.getSelectionModel().getSelectedItem();\n+            int stateAttributeId = AnalyticViewConcept.MetaAttribute.ANALYTIC_VIEW_STATE.ensure(graph);\n+            \n+            // Make a copy in case the state on the graph is currently being modified.\n+            AnalyticViewState currentState = graph.getObjectValue(stateAttributeId, 0);\n+            currentState = (currentState == null) ? new AnalyticViewState() : new AnalyticViewState(currentState);\n+            \n+            if (pluginWasSelected) {\n+                // remove all plugins matching category\n+                currentState.removePluginsMatchingCategory(currentCategory);\n+                // grab all plugins from currently selected category\n+                List<SelectableAnalyticPlugin> checkedPlugins = new ArrayList<>();\n+                // adding items to checkedPlugins array when they are selected\n+                analyticConfigurationPane.pluginList.getItems().forEach(selectablePlugin -> {\n+                    if (selectablePlugin.isSelected()) {\n+                        checkedPlugins.add(selectablePlugin);\n+                    }\n+                });\n+                if (!checkedPlugins.isEmpty()) {\n+                    currentState.addAnalyticQuestion(analyticConfigurationPane.currentQuestion, checkedPlugins);\n+                }\n+                graph.setObjectValue(stateAttributeId, 0, currentState);\n+            }\n+            \n+            // get question only if one exists ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDE1NQ==", "bodyText": "I can take a look at refactoring the code to include these state listeners if you feel they would benefit as opposed to the current solution.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372114155", "createdAt": "2020-01-28T23:21:57Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -582,4 +620,71 @@ public String getName() {\n             return \"Analytic View: Update State\";\n         }\n     }\n+    \n+    /**\n+     * Update the display by reading and writing to/from the state attribute. \n+     */\n+    private static final class AnalyticViewStateUpdater extends SimpleEditPlugin {\n+\n+        private final AnalyticConfigurationPane analyticConfigurationPane;\n+        private final boolean pluginWasSelected;\n+        \n+        public AnalyticViewStateUpdater(final AnalyticConfigurationPane analyticConfigurationPane, final boolean categoryWasSelected) {\n+            this.analyticConfigurationPane = analyticConfigurationPane;\n+            this.pluginWasSelected = categoryWasSelected;\n+        }\n+\n+        @Override\n+        public void edit(final GraphWriteMethods graph, final PluginInteraction interaction, final PluginParameters parameters) throws InterruptedException, PluginException {\n+            String currentCategory = analyticConfigurationPane.categoryList.getSelectionModel().getSelectedItem();\n+            int stateAttributeId = AnalyticViewConcept.MetaAttribute.ANALYTIC_VIEW_STATE.ensure(graph);\n+            \n+            // Make a copy in case the state on the graph is currently being modified.\n+            AnalyticViewState currentState = graph.getObjectValue(stateAttributeId, 0);\n+            currentState = (currentState == null) ? new AnalyticViewState() : new AnalyticViewState(currentState);\n+            \n+            if (pluginWasSelected) {\n+                // remove all plugins matching category\n+                currentState.removePluginsMatchingCategory(currentCategory);\n+                // grab all plugins from currently selected category\n+                List<SelectableAnalyticPlugin> checkedPlugins = new ArrayList<>();\n+                // adding items to checkedPlugins array when they are selected\n+                analyticConfigurationPane.pluginList.getItems().forEach(selectablePlugin -> {\n+                    if (selectablePlugin.isSelected()) {\n+                        checkedPlugins.add(selectablePlugin);\n+                    }\n+                });\n+                if (!checkedPlugins.isEmpty()) {\n+                    currentState.addAnalyticQuestion(analyticConfigurationPane.currentQuestion, checkedPlugins);\n+                }\n+                graph.setObjectValue(stateAttributeId, 0, currentState);\n+            }\n+            \n+            // get question only if one exists ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzI2NA=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY5NDI5OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0NzoyNlrOFibkJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0NzoyNlrOFibkJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzUyNA==", "bodyText": "Should this be categoryWasSelected?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371647524", "createdAt": "2020-01-28T07:47:26Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -582,4 +620,71 @@ public String getName() {\n             return \"Analytic View: Update State\";\n         }\n     }\n+    \n+    /**\n+     * Update the display by reading and writing to/from the state attribute. \n+     */\n+    private static final class AnalyticViewStateUpdater extends SimpleEditPlugin {\n+\n+        private final AnalyticConfigurationPane analyticConfigurationPane;\n+        private final boolean pluginWasSelected;\n+        \n+        public AnalyticViewStateUpdater(final AnalyticConfigurationPane analyticConfigurationPane, final boolean categoryWasSelected) {\n+            this.analyticConfigurationPane = analyticConfigurationPane;\n+            this.pluginWasSelected = categoryWasSelected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY5NTIyOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo0ODowMFrOFibkzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjoxOTozNlrOFjGddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzY5Mg==", "bodyText": "What is this trying to achieve?", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r371647692", "createdAt": "2020-01-28T07:48:00Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed\n+            this.checkbox.selectedProperty().addListener((observable, oldValue, newValue) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMTM3NQ==", "bodyText": "See #215 (comment)", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372111375", "createdAt": "2020-01-28T23:13:35Z", "author": {"login": "aldebaran30701"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed\n+            this.checkbox.selectedProperty().addListener((observable, oldValue, newValue) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzY5Mg=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1MDMyNA==", "bodyText": "Sorry about the duplicate comments, I accidentally left the page while reviewing and didn't realise GitHub must have submitted my comments automatically on exit.", "url": "https://github.com/constellation-app/constellation/pull/215#discussion_r372350324", "createdAt": "2020-01-29T12:19:36Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/AnalyticConfigurationPane.java", "diffHunk": "@@ -490,15 +510,29 @@ public static final SelectableAnalyticPlugin lookupSelectablePlugin(final String\n         return NAME_TO_SELECTABLE_PLUGIN_MAP.get(selectableAnalyticPluginName);\n     }\n \n+    private static void setSuppressedFlag(final boolean newValue) {\n+        selectionSuppressed = newValue;\n+    }\n+\n     public final class SelectableAnalyticPlugin {\n \n         private final CheckBox checkbox;\n+        private ListCell<SelectableAnalyticPlugin> parent;\n         private final AnalyticPlugin plugin;\n         private PluginParameters parameters;\n         private PluginParameters updatedParameters;\n \n         public SelectableAnalyticPlugin(final AnalyticPlugin plugin) {\n             this.checkbox = new CheckBox();\n+            // Allows triggering of selection listener when a checkbox is changed\n+            this.checkbox.selectedProperty().addListener((observable, oldValue, newValue) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NzY5Mg=="}, "originalCommit": {"oid": "fbce6de64cf65397f7d6065cb58cd2b85b3c8e2c"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2480, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}