{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjk0NTU2", "number": 346, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozNDo0OVrODqn6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0NDoxM1rODqoAPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIwNjk4OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozNDo0OVrOF6fCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNDoyMjo0M1rOF6gj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIxNQ==", "bodyText": "I think i liked the multi-line version here - it's too long to easily read.", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396870215", "createdAt": "2020-03-24T02:34:49Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java", "diffHunk": "@@ -110,9 +110,7 @@ private void contractSingleVertex(GraphWriteMethods wg, final int vxId, final Re\n         idToCopiedId.put(vxId, copiedId[0]);\n \n         // Add to the expansion store those transactions between this vertex and all vertices already added to the expansion store\n-        idToCopiedId.entrySet().stream().forEach((entry) -> {\n-            GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue());\n-        });\n+        idToCopiedId.entrySet().stream().forEach(entry -> GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTIyMg==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895222", "createdAt": "2020-03-24T04:22:43Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/objects/ExpandedCompositeNodeState.java", "diffHunk": "@@ -110,9 +110,7 @@ private void contractSingleVertex(GraphWriteMethods wg, final int vxId, final Re\n         idToCopiedId.put(vxId, copiedId[0]);\n \n         // Add to the expansion store those transactions between this vertex and all vertices already added to the expansion store\n-        idToCopiedId.entrySet().stream().forEach((entry) -> {\n-            GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue());\n-        });\n+        idToCopiedId.entrySet().stream().forEach(entry -> GraphRecordStoreUtilities.copyTransactionsBetweenVertices(wg, constituentNodeStore, vxId, entry.getKey(), copiedId[0], entry.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIxNQ=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIxMTE1OnYy", "diffSide": "RIGHT", "path": "CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozNzoyM1rOF6fE1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNDoyMjozNlrOF6gj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDg3MA==", "bodyText": "Ditto here (although the line below is also stupidly long).", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396870870", "createdAt": "2020-03-24T02:37:23Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java", "diffHunk": "@@ -868,9 +863,7 @@ private void modifyAttributeAction(final AttributeData attr) {\n     }\n \n     private void updateTimeZoneAction(final AttributeData attr) {\n-        final EditOperation editOperation = (zoneId) -> {\n-            PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());\n-        };\n+        final EditOperation editOperation = zoneId -> PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTE5OQ==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895199", "createdAt": "2020-03-24T04:22:36Z", "author": {"login": "antares1470"}, "path": "CoreAttributeEditorView/src/au/gov/asd/tac/constellation/views/attributeeditor/AttributeEditorPanel.java", "diffHunk": "@@ -868,9 +863,7 @@ private void modifyAttributeAction(final AttributeData attr) {\n     }\n \n     private void updateTimeZoneAction(final AttributeData attr) {\n-        final EditOperation editOperation = (zoneId) -> {\n-            PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());\n-        };\n+        final EditOperation editOperation = zoneId -> PluginExecution.withPlugin(new UpdateTimeZonePlugin((ZoneId) zoneId, attr)).executeLater(GraphManager.getDefault().getActiveGraph());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDg3MA=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIxMzE5OnYy", "diffSide": "RIGHT", "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjozODozMlrOF6fGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTo1NDo1MFrOF7M_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw==", "bodyText": "Is the stream redundant here given forEach is used right after? I noticed this all throughout this PR - would you mind searching for instances of stream().forEach(...) and correcting that?", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396871197", "createdAt": "2020-03-24T02:38:32Z", "author": {"login": "cygnus-x-1"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3ODIzMQ==", "bodyText": "The forEach function used is for the stream object. Removing the stream call will result in this instance (and I suspect others) in using the Iterable version. Do you know if they have similar implementations? If they don't, it may be worthwhile leaving as is", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396878231", "createdAt": "2020-03-24T03:06:47Z", "author": {"login": "antares1470"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTA0MQ==", "bodyText": "You are correct, and from what I've read it shouldn't make too much difference which one you use for most cases. That being said, unless you're following up with streaming operations, the Iterable version does seem a little more flexible in that it has order, respects data locks and allows premature returns. @arcturus2 - what do you think?", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396919041", "createdAt": "2020-03-24T06:04:49Z", "author": {"login": "cygnus-x-1"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5ODIzMw==", "bodyText": "@cygnus-x-1 based on what I've read a stream is less memory intensive that an iterator which writes to the heap more often (for the reasons you have described - the extra checks it does).\nI'd like to get into using streams more so I'd favor to leave it as is.", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396998233", "createdAt": "2020-03-24T09:08:53Z", "author": {"login": "arcturus2"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MzU5NA==", "bodyText": "Ok I think I'll leave it as is then. We can address this at a later date if we do decide we want to go down a different path", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397463594", "createdAt": "2020-03-24T21:11:26Z", "author": {"login": "antares1470"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTEzMg==", "bodyText": "@arcturus from what i've read the memory and time improvements only really apply when streaming over large datasets. For a Lookup as above, where you would expect no more than 10's of results, streams can actually have a higher time and possibly even memory overhead due to the additional objects created by the stream. We should revisit this later...", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397535132", "createdAt": "2020-03-25T00:06:05Z", "author": {"login": "cygnus-x-1"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMzEyOQ==", "bodyText": "ok @cygnus-x-1 worth fleshing out more sometime.", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r397623129", "createdAt": "2020-03-25T05:54:50Z", "author": {"login": "arcturus2"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/DataAccessPluginType.java", "diffHunk": "@@ -84,11 +80,9 @@\n      */\n     private static List<PositionalDataAccessPluginType> getTypesOrderedByPosition() {\n         final List<PositionalDataAccessPluginType> ptypeList = new ArrayList<>();\n-        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach((type) -> {\n-            ptypeList.addAll(type.getPluginTypeList());\n-        });\n+        Lookup.getDefault().lookupAll(DataAccessPluginType.class).stream().forEach(type -> ptypeList.addAll(type.getPluginTypeList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE5Nw=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDIyMjA0OnYy", "diffSide": "RIGHT", "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo0NDoxM1rOF6fLfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNDoyMjoyN1rOF6gjvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjU3NA==", "bodyText": "Could you expand the single character variable names here?", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396872574", "createdAt": "2020-03-24T02:44:13Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java", "diffHunk": "@@ -130,10 +130,10 @@ public static StoreGraph collapsePlaceholders(final StoreGraphRecordStore graph,\n         // remove all transactions with type 'unknown' and all nodes with identifier 'unknown'\n         if (cleanupGraph) {\n             g.streamTransactions()\n-                    .filter((t) -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))\n+                    .filter(t -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NTE2NA==", "bodyText": "Done", "url": "https://github.com/constellation-app/constellation/pull/346#discussion_r396895164", "createdAt": "2020-03-24T04:22:27Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/placeholder/PlaceholderUtilities.java", "diffHunk": "@@ -130,10 +130,10 @@ public static StoreGraph collapsePlaceholders(final StoreGraphRecordStore graph,\n         // remove all transactions with type 'unknown' and all nodes with identifier 'unknown'\n         if (cleanupGraph) {\n             g.streamTransactions()\n-                    .filter((t) -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))\n+                    .filter(t -> t.getTypeValue().equals(SchemaTransactionTypeUtilities.getDefaultType()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjU3NA=="}, "originalCommit": {"oid": "3b1a8b5cd70ace3bea2eabf9cb9b0dd7e8682030"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2415, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}