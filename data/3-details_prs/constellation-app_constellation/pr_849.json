{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTAwNzAy", "number": 849, "title": "Expressions framework and Layers View Integration", "bodyText": "Description of the Change\nThis PR contains two parts:\n\nExpressions framework - @sirius-1\nLayers Integration with the expression framework\n\nThe need for an Expressions framework was brought to light during querying of attribute values through the first experimental version of the Layers View.\nThis new framework allows multiple different types of queries to be ran on any attribute.\nThe following list describes the currently implemented functions:\n\nAnd\nAssign\nContains\nDifference\nEnds with\nEquals\nExclusive Or\nGreater Than\nGreater Than Or Equals\nLess Than\nLess Than Or Equals\nModulus\nNegative\nNot\nNot equals\nOr\nPositive\nProduct\nQuotient\nStarts With\nSum\n\nan example of how this works is as follows.\nVertex1 (Label : Vertex #0)\nTransaction 1 (Label : Unknown)\nUsing the Layers View, allows you to enter a query into either a Vertex, Transaction or both text entries.\nYou would simply enter the following into Vertex query area:\nLabel == 'Vertex #0' To show the vertex.\nYou would simply enter the following into Transaction query area:\nLabel == 'Unknown' To show the Transaction.\nOr enter into both text entries:\nLabel == 'Vertex #0' || Label == 'Unknown' to show both transactions or vertices when satisfied by the query.\nThe Layers View portion of the PR reworks the refresh structure and listening of the graph attributes as well as merging in the expressions to use for the layers querying.\n\nAlternate Designs\nN/A\n\nWhy Should This Be In Core?\nExpressions framework is largely extensible and can be used in many other areas.\nLayers view is reworked and now garners the expressions framework underneath to make querying more powerful and efficient.\n\nBenefits\nAs above\n\nPossible Drawbacks\nLink and edge attribute querying will require additional changes such as updating the plugins to check all types (vertex, transaction, link, edge)\n\nVerification Process\nLayers functionality has been tested somewhat extensively, the expressions is not fully tested thus far.\n\nApplicable Issues\n#223 - original issue\n#823 - addresses this in the PR\n#809 (Union and intersect not implemented between layers)\n#792 - retest this issue on this branch\n#715 - addresses this in the PR", "createdAt": "2020-10-01T02:11:51Z", "url": "https://github.com/constellation-app/constellation/pull/849", "merged": true, "mergeCommit": {"oid": "498e8efa97cfefb702886a486eec35e05ea55ccb"}, "closed": true, "closedAt": "2020-11-03T10:20:36Z", "author": {"login": "aldebaran30701"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8GhlTgH2gAyNDk1OTAwNzAyOmRkMzViZGY0NWFhMGNmMzg3NGE0YjdkNjU3ZTUyMGE3MjhiZGQ2NmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYrpZSgFqTUyMjAxMzcxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd35bdf45aa0cf3874a4b7d657e520a728bdd66f", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/dd35bdf45aa0cf3874a4b7d657e520a728bdd66f", "committedDate": "2020-08-06T02:37:39Z", "message": "Version 1 of expression framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085e232f556cf4b29723dab4c6631151f608090c", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/085e232f556cf4b29723dab4c6631151f608090c", "committedDate": "2020-08-10T02:01:43Z", "message": "Word based operators, parsing handles more edge cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87040c1262ab3015fc8f52f5b9b9bdfd1fafeff", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/e87040c1262ab3015fc8f52f5b9b9bdfd1fafeff", "committedDate": "2020-08-10T02:06:36Z", "message": "Merge remote-tracking branch 'origin/master' into expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c72f2fbf75ff76f184f2cf277fff1a34e80728", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/62c72f2fbf75ff76f184f2cf277fff1a34e80728", "committedDate": "2020-08-11T03:05:10Z", "message": "Updated licence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6b33eead10915e535f9832d092903aeed1d193", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/8a6b33eead10915e535f9832d092903aeed1d193", "committedDate": "2020-08-13T01:02:19Z", "message": "Added help dependency back in to get working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3315024330b92cb0240ea1e8a64074a7dd957677", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/3315024330b92cb0240ea1e8a64074a7dd957677", "committedDate": "2020-08-17T13:51:49Z", "message": "Initial commit for expressions framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70885010fd556c47452ba4baf31033f229f68c4a", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/70885010fd556c47452ba4baf31033f229f68c4a", "committedDate": "2020-08-20T01:04:48Z", "message": "Updated to expressions framework version 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc63ba59225880e3688c943ff0c34194c7725732", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/fc63ba59225880e3688c943ff0c34194c7725732", "committedDate": "2020-08-24T04:05:52Z", "message": "Added access registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75e246785cb40cc2767da3046305d23dbdc9284", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/b75e246785cb40cc2767da3046305d23dbdc9284", "committedDate": "2020-08-24T04:10:20Z", "message": "Merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95361812593ab77f746b3a3f9b914b2c2eb6682", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/a95361812593ab77f746b3a3f9b914b2c2eb6682", "committedDate": "2020-09-01T01:48:19Z", "message": "Merge remote-tracking branch 'origin/master' into expressions_framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8e0288b05b160016e66b0fad2f10e77752669b2", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/f8e0288b05b160016e66b0fad2f10e77752669b2", "committedDate": "2020-09-01T02:32:55Z", "message": "Pull out functionality from storegraph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d305834212385e32e4ad1dc68ae85fab93f688", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/a4d305834212385e32e4ad1dc68ae85fab93f688", "committedDate": "2020-09-01T22:41:14Z", "message": "Merge branch 'expressions' into feature/layer-standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092a3608979d37ec73a35f3d63f657414175a9c6", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/092a3608979d37ec73a35f3d63f657414175a9c6", "committedDate": "2020-09-02T04:59:01Z", "message": "implement expression functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120a5d6d540789d61ed384f6122147501e5b1d17", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/120a5d6d540789d61ed384f6122147501e5b1d17", "committedDate": "2020-09-02T05:15:32Z", "message": "Dependencies update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb1ad0e725465df459d250dd96e1397ab6088fb", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/cfb1ad0e725465df459d250dd96e1397ab6088fb", "committedDate": "2020-09-02T06:00:16Z", "message": "Merge branch 'expressions_framework' into feature/layer-standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee841db8f54d0069bb2ebfe6a4227666d9ab1f43", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/ee841db8f54d0069bb2ebfe6a4227666d9ab1f43", "committedDate": "2020-09-02T06:27:32Z", "message": "Query class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93a1d533a05e8edfecc8f68f59d210ebacb45c9", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/a93a1d533a05e8edfecc8f68f59d210ebacb45c9", "committedDate": "2020-09-02T07:02:52Z", "message": "BitmaskQuery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38a2857f76d1bd80788c5d17890722122ad0d48", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/c38a2857f76d1bd80788c5d17890722122ad0d48", "committedDate": "2020-09-02T23:42:33Z", "message": "BitMaskQuery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b5e3a977bc054b96103aa29aec9518218d4999", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/b8b5e3a977bc054b96103aa29aec9518218d4999", "committedDate": "2020-09-03T12:01:41Z", "message": "Working BitMaskQuery Plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77fe1fadc94f09fc12963ff8783433fc0f2c5404", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/77fe1fadc94f09fc12963ff8783433fc0f2c5404", "committedDate": "2020-09-03T23:31:31Z", "message": "Fixed active queries bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5cf8cb43d6a1e50dc47772ee43804554aac9e34", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/b5cf8cb43d6a1e50dc47772ee43804554aac9e34", "committedDate": "2020-09-04T08:12:23Z", "message": "Removed conflicting code from StoreGraph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06972f7fd22feb373716873f6400c8de3bf6608", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/f06972f7fd22feb373716873f6400c8de3bf6608", "committedDate": "2020-09-07T00:18:28Z", "message": "Merge branch 'expressions_framework' into feature/layer-standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebc9d9f5a9b944146d43b727055d371255bb51a3", "author": {"user": {"login": "sirius-1", "name": "sirius-1"}}, "url": "https://github.com/constellation-app/constellation/commit/ebc9d9f5a9b944146d43b727055d371255bb51a3", "committedDate": "2020-09-07T01:28:32Z", "message": "Fixed small bug in BitMaskQueryCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e370508bd99b8347de276ee05ef5110439702155", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/e370508bd99b8347de276ee05ef5110439702155", "committedDate": "2020-09-09T02:17:43Z", "message": "convert Layerdescription to Bitmaskquery\n\nmerge conflict and layers view switch to query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a314eab8a0986956479b512dfa857adccffdff60", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/a314eab8a0986956479b512dfa857adccffdff60", "committedDate": "2020-09-09T02:25:27Z", "message": "Merge branch 'expressions_framework' into feature/layer-standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281a2b82d12beecae37c6742e7acbb4d339ce32d", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/281a2b82d12beecae37c6742e7acbb4d339ce32d", "committedDate": "2020-09-21T04:28:05Z", "message": "convert Layers View to use expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2756ba418eb03a3a6476bc9a45ef273bb5321f", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/3d2756ba418eb03a3a6476bc9a45ef273bb5321f", "committedDate": "2020-09-29T04:34:08Z", "message": "bugfixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6551f9407f66868afb400780ac441699f61e321d", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/6551f9407f66868afb400780ac441699f61e321d", "committedDate": "2020-10-01T01:15:13Z", "message": "convert layers to query using expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597897aa9ce2d8ad5d80671a84986b6b3e65639d", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/597897aa9ce2d8ad5d80671a84986b6b3e65639d", "committedDate": "2020-10-01T01:15:55Z", "message": "Merge branch 'master' into feature/layer-standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a0602698bd5009f7075b78e6a392307fcdadbe", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/69a0602698bd5009f7075b78e6a392307fcdadbe", "committedDate": "2020-10-01T23:22:01Z", "message": "resolve race condition for attribute listening"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5d5ce48ebf1e06d747e41ccf6f59656f79d415", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/ea5d5ce48ebf1e06d747e41ccf6f59656f79d415", "committedDate": "2020-10-02T00:20:30Z", "message": "sonar bug fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/2c8ce30289dd4da043903eb88ff0a058c9f8de94", "committedDate": "2020-10-02T05:17:57Z", "message": "fix test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzk4NDI0", "url": "https://github.com/constellation-app/constellation/pull/849#pullrequestreview-503398424", "createdAt": "2020-10-06T22:17:15Z", "commit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoxNzoxNVrOHdb3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoxODoyMFrOHdeRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNzM2MA==", "bodyText": "What is the reason for moving from Integer to Long for this? I'm probably not understanding how the layers are programmed in but I didn't think you could have that many layers.", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500627360", "createdAt": "2020-10-06T22:17:15Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/LayersConcept.java", "diffHunk": "@@ -54,23 +53,11 @@ private GraphAttribute() {\n             throw new IllegalStateException(\"Concept class\");\n         }\n \n-        public static final SchemaAttribute LAYER_MASK_SELECTED = new SchemaAttribute.Builder(GraphElementType.GRAPH, IntegerAttributeDescription.ATTRIBUTE_NAME, \"layer_bitmask_selected\")\n+        public static final SchemaAttribute LAYER_MASK_SELECTED = new SchemaAttribute.Builder(GraphElementType.GRAPH, LongAttributeDescription.ATTRIBUTE_NAME, \"layer_bitmask_selected\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyODY1OQ==", "bodyText": "not using setStringValue?", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500628659", "createdAt": "2020-10-06T22:20:39Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/StringAttributeDescription.java", "diffHunk": "@@ -257,4 +261,24 @@ public void restoreData(final Object savedData) {\n         final String[] sd = (String[]) savedData;\n         data = Arrays.copyOf(sd, sd.length);\n     }\n+\n+    @Override\n+    public Object createReadObject(IntReadable indexReadable) {\n+        return (StringReadable) () -> data[indexReadable.readInt()];\n+    }\n+\n+    @Override\n+    public Object createWriteObject(GraphWriteMethods graph, int attribute, IntReadable indexReadable) {\n+        return new StringVariable() {\n+            @Override\n+            public String readString() {\n+                return data[indexReadable.readInt()];\n+            }\n+\n+            @Override\n+            public void writeString(String value) {\n+                graph.setObjectValue(attribute, indexReadable.readInt(), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMDIyNw==", "bodyText": "I would declare this as AccessRegistry<D> rather than var", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500630227", "createdAt": "2020-10-06T22:24:49Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/Access.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import au.gov.asd.tac.constellation.graph.value.readables.ByteReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.CharReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.DoubleReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.FloatReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.IntReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.LongReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.ShortReadable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class Access {\n+    \n+    private static final Access DEFAULT = new Access();\n+    \n+    public static Access getDefault() {\n+        return DEFAULT;\n+    }\n+    \n+    static {\n+        Access.getDefault().getRegistry(CharReadable.class)\n+                .register(ByteReadable.class, (s) -> () -> (char)s.readShort())\n+                .register(ShortReadable.class, (s) -> () -> (char)s.readShort())\n+                .register(IntReadable.class, (s) -> () -> (char)s.readInt())\n+                .register(LongReadable.class, (s) -> () -> (char)s.readLong())\n+                .register(FloatReadable.class, (s) -> () -> (char)s.readFloat())\n+                .register(DoubleReadable.class, (s) -> () -> (char)s.readDouble());\n+\n+            \n+            Access.getDefault().getRegistry(ByteReadable.class)\n+                .register(ShortReadable.class, (s) -> () -> (byte)s.readShort())\n+                .register(IntReadable.class, (s) -> () -> (byte)s.readInt())\n+                .register(LongReadable.class, (s) -> () -> (byte)s.readLong())\n+                .register(FloatReadable.class, (s) -> () -> (byte)s.readFloat())\n+                .register(DoubleReadable.class, (s) -> () -> (byte)s.readDouble());\n+            \n+            Access.getDefault().getRegistry(ShortReadable.class)\n+                .register(IntReadable.class, (s) -> () -> (byte)s.readInt())\n+                .register(LongReadable.class, (s) -> () -> (byte)s.readLong())\n+                .register(FloatReadable.class, (s) -> () -> (byte)s.readFloat())\n+                .register(DoubleReadable.class, (s) -> () -> (byte)s.readDouble());\n+            \n+            Access.getDefault().getRegistry(IntReadable.class)\n+                .register(LongReadable.class, (s) -> () -> (byte)s.readLong())\n+                .register(FloatReadable.class, (s) -> () -> (byte)s.readFloat())\n+                .register(DoubleReadable.class, (s) -> () -> (byte)s.readDouble());\n+            \n+            Access.getDefault().getRegistry(LongReadable.class)\n+                .register(FloatReadable.class, (s) -> () -> (byte)s.readFloat())\n+                .register(DoubleReadable.class, (s) -> () -> (byte)s.readDouble());\n+            \n+            Access.getDefault().getRegistry(FloatReadable.class)\n+                .register(DoubleReadable.class, (s) -> () -> (byte)s.readDouble());\n+    }\n+    \n+    private final Map<Class, AccessRegistry> registries = new HashMap<>();\n+    \n+    public final <D> AccessRegistry<D> getRegistry(Class<D> destinationClass) {\n+        synchronized(registries) {\n+            var registry = (AccessRegistry<D>)registries.get(destinationClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMTA5NQ==", "bodyText": "Would declare as Class<?> (or if you know the type then include that)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500631095", "createdAt": "2020-10-06T22:27:08Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/AccessRegistry.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class AccessRegistry<D> {\n+\n+    private final Class<D> destinationClass;\n+    private final List<FunctionRecord<?, D>> functions = new ArrayList<>();\n+\n+    public AccessRegistry(Class<D> destinationClass) {\n+        this.destinationClass = destinationClass;\n+    }\n+\n+    public <S> AccessRegistry<D> register(Class<S> sourceClass, Function<? super S, ? extends D> function) {\n+        functions.add(new FunctionRecord<>(sourceClass, destinationClass, function));\n+        return this;\n+    }\n+\n+    public D convert(Object source) {\n+        final var sourceClass = source.getClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMTg3Mw==", "bodyText": "given the value of i is altered in the loop, it may be better to make this a while loop", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500631873", "createdAt": "2020-10-06T22:29:04Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/AccessRegistry.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class AccessRegistry<D> {\n+\n+    private final Class<D> destinationClass;\n+    private final List<FunctionRecord<?, D>> functions = new ArrayList<>();\n+\n+    public AccessRegistry(Class<D> destinationClass) {\n+        this.destinationClass = destinationClass;\n+    }\n+\n+    public <S> AccessRegistry<D> register(Class<S> sourceClass, Function<? super S, ? extends D> function) {\n+        functions.add(new FunctionRecord<>(sourceClass, destinationClass, function));\n+        return this;\n+    }\n+\n+    public D convert(Object source) {\n+        final var sourceClass = source.getClass();\n+        final List<FunctionRecord<?, D>> applicableRecords = new ArrayList<>();\n+        functions.forEach((function) -> {\n+            if (function.isApplicable(sourceClass)) {\n+                boolean insert = true;\n+                for (int i = 0; i < applicableRecords.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMzU3Mw==", "bodyText": "given the value of i is altered in the loop, should probably make this a while loop", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500633573", "createdAt": "2020-10-06T22:33:42Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/OperatorRegistry.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class OperatorRegistry {\n+\n+    private final String name;\n+    private final List<FunctionRecord> functions = new ArrayList<>();\n+    private final List<BiFunctionRecord> biFunctions = new ArrayList<>();\n+\n+    public OperatorRegistry(String name) {\n+        this.name = name;\n+    }\n+\n+    public final <P, R> OperatorRegistry register(Class<P> parameterClass, Class<R> resultClass, Function<? super P, ? extends R> function) {\n+        functions.add(new FunctionRecord(parameterClass, function));\n+        return this;\n+    }\n+\n+    public final <P1, P2, R> OperatorRegistry register(Class<P1> parameter1Class, Class<P2> parameter2Class, Class<R> resultClass, BiFunction<? super P1, ? super P2, ? extends R> biFunction) {\n+        biFunctions.add(new BiFunctionRecord(parameter1Class, parameter2Class, biFunction));\n+        return this;\n+    }\n+\n+    public Object apply(Object parameter) {\n+        final var parameterClass = parameter.getClass();\n+        final List<FunctionRecord> applicableRecords = new ArrayList<>();\n+        functions.forEach((function) -> {\n+            if (function.isApplicable(parameterClass)) {\n+                boolean insert = true;\n+                for (int i = 0; i < applicableRecords.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzNTYzNA==", "bodyText": "Change the declaration to not be var for both of these", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500635634", "createdAt": "2020-10-06T22:39:23Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/OperatorRegistry.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class OperatorRegistry {\n+\n+    private final String name;\n+    private final List<FunctionRecord> functions = new ArrayList<>();\n+    private final List<BiFunctionRecord> biFunctions = new ArrayList<>();\n+\n+    public OperatorRegistry(String name) {\n+        this.name = name;\n+    }\n+\n+    public final <P, R> OperatorRegistry register(Class<P> parameterClass, Class<R> resultClass, Function<? super P, ? extends R> function) {\n+        functions.add(new FunctionRecord(parameterClass, function));\n+        return this;\n+    }\n+\n+    public final <P1, P2, R> OperatorRegistry register(Class<P1> parameter1Class, Class<P2> parameter2Class, Class<R> resultClass, BiFunction<? super P1, ? super P2, ? extends R> biFunction) {\n+        biFunctions.add(new BiFunctionRecord(parameter1Class, parameter2Class, biFunction));\n+        return this;\n+    }\n+\n+    public Object apply(Object parameter) {\n+        final var parameterClass = parameter.getClass();\n+        final List<FunctionRecord> applicableRecords = new ArrayList<>();\n+        functions.forEach((function) -> {\n+            if (function.isApplicable(parameterClass)) {\n+                boolean insert = true;\n+                for (int i = 0; i < applicableRecords.size(); i++) {\n+                    switch (function.compareTo(applicableRecords.get(i))) {\n+                        case -1:\n+                            insert = false;\n+                            break;\n+                        case 0:\n+                            break;\n+                        case 1:\n+                            applicableRecords.remove(i);\n+                            i -= 1;\n+                            break;\n+                        default:\n+                            // Default case added - S131\n+                            break;\n+                    }\n+                }\n+                if (insert) {\n+                    applicableRecords.add(function);\n+                }\n+            }\n+        });\n+        switch (applicableRecords.size()) {\n+            case 0:\n+                return null;\n+            case 1:\n+                return applicableRecords.get(0).apply(parameter);\n+            default:\n+                throw new IllegalArgumentException(\"Ambiguous operator\");\n+        }\n+    }\n+\n+    public Object apply(Object parameter1, Object parameter2) {\n+        final var parameter1Class = parameter1.getClass();\n+        final var parameter2Class = parameter2.getClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzNjgxMw==", "bodyText": "Declare as OperatorRegistry", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500636813", "createdAt": "2020-10-06T22:42:33Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/Operators.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class Operators {\n+    \n+    private static final Operators DEFAULT = new Operators();\n+    \n+    public static Operators getDefault() {\n+        return DEFAULT;\n+    }\n+    \n+    private final Map<String, OperatorRegistry> registries = new HashMap<>();\n+    \n+    public final OperatorRegistry getRegistry(String name) {\n+        synchronized(registries) {\n+            var registry = registries.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzNzEyMQ==", "bodyText": "Declare these without using var. I'll stop adding comments for all of them but there do seem to be more scattered throughout the code", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500637121", "createdAt": "2020-10-06T22:43:24Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/StringOperation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value;\n+\n+import au.gov.asd.tac.constellation.graph.value.constants.StringConstant;\n+import au.gov.asd.tac.constellation.graph.value.readables.BooleanReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.DoubleReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.FloatReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.IntReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.LongReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.StringReadable;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public interface StringOperation {\n+    boolean execute(String p1, String p2);\n+    \n+    default void register(OperatorRegistry registry) {\n+        \n+        registry.register(StringReadable.class, StringReadable.class, BooleanReadable.class, (p1, p2) -> { \n+            return () -> execute(p1.readString(), p2.readString()); \n+        });\n+        \n+        registry.register(StringConstant.class, StringConstant.class, BooleanReadable.class, (p1, p2) -> { \n+            final var p1String = p1.readString();\n+            final var p2String = p2.readString();\n+            final var result = execute(p1String, p2String);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzODUxNg==", "bodyText": "Is the intention that stuff can be added to this interface? A blank interface seems unnecessary (could just use StringReadable)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500638516", "createdAt": "2020-10-06T22:47:09Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/constants/StringConstant.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.constants;\n+\n+import au.gov.asd.tac.constellation.graph.value.readables.StringReadable;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public interface StringConstant extends StringReadable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MDIxMQ==", "bodyText": "public abstract static rather than public static abstract", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500640211", "createdAt": "2020-10-06T22:51:58Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/expression/ExpressionParser.java", "diffHunk": "@@ -0,0 +1,465 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.expression;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class ExpressionParser {\n+\n+    public static final char NO_TOKEN = 0;\n+    private static final String NESTED_PARENTHESIS_ERROR = \"Invalid nesting of parenthesis\";\n+    private static final String ENDS_WITH_OPERATOR_ERROR = \"An expression cannot end with an operator\";\n+    private static final String END_OF_QUOTED_STRING_ERROR = \"Unexpected end of expression while in quoted string\";\n+    private static final String UNEXPECTED_CHARACTER_ERROR = \"Unexpected character: \";\n+\n+    private static enum ParseState {\n+        READING_WHITESPACE,\n+        READING_SINGLE_STRING,\n+        READING_DOUBLE_STRING,\n+        READING_VARIABLE,\n+        READING_SINGLE_ESCAPED,\n+        READING_DOUBLE_ESCAPED\n+    }\n+\n+    public static enum Operator {\n+        AND_AND(NO_TOKEN, 11),\n+        AND('&', 11, null, AND_AND),\n+        OR_OR(NO_TOKEN, 12),\n+        OR('|', 12, null, OR_OR),\n+        EXCLUSIVE_OR('^', 3),\n+        NOT('!', 2),\n+        ADD('+', 4),\n+        SUBTRACT('-', 4),\n+        MULTIPLY('*', 3),\n+        DIVIDE('/', 3),\n+        MODULO('%', 3),\n+        GREATER_THAN('>', 6),\n+        LESS_THAN('<', 6),\n+        GREATER_THAN_OR_EQUALS(NO_TOKEN, 6),\n+        LESS_THAN_OR_EQUALS(NO_TOKEN, 6),\n+        NOT_EQUALS(NO_TOKEN, 7),\n+        CONTAINS(NO_TOKEN, 4),\n+        STARTS_WITH(NO_TOKEN, 4),\n+        ENDS_WITH(NO_TOKEN, 4),\n+        EQUALS(NO_TOKEN, 7),\n+        ASSIGN('=', 14, null, EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, NOT, NOT_EQUALS);\n+\n+        private final char token;\n+        private final int precedence;\n+        private final Map<Operator, Operator> combinations = new HashMap<>();\n+\n+        private Operator(char token, int precedence, Operator... combinations) {\n+            this.token = token;\n+            this.precedence = precedence;\n+\n+            for (int i = 0; i < combinations.length; i += 2) {\n+                if (combinations[i] == null) {\n+                    this.combinations.put(this, combinations[i + 1]);\n+                } else {\n+                    this.combinations.put(combinations[i], combinations[i + 1]);\n+                }\n+            }\n+        }\n+\n+        public char getToken() {\n+            return token;\n+        }\n+\n+        public int getPrecedence() {\n+            return precedence;\n+        }\n+\n+        private static final Map<Character, Operator> OPERATOR_TOKENS = new HashMap<>();\n+\n+        static {\n+            for (final Operator operator : Operator.values()) {\n+                if (operator.token != NO_TOKEN) {\n+                    OPERATOR_TOKENS.put(operator.token, operator);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final Map<String, Operator> WORD_OPERATORS = new HashMap<>();\n+\n+    static {\n+        WORD_OPERATORS.put(\"contains\", Operator.CONTAINS);\n+        WORD_OPERATORS.put(\"startswith\", Operator.STARTS_WITH);\n+        WORD_OPERATORS.put(\"endswith\", Operator.ENDS_WITH);\n+        WORD_OPERATORS.put(\"or\", Operator.OR);\n+        WORD_OPERATORS.put(\"and\", Operator.AND);\n+        WORD_OPERATORS.put(\"equals\", Operator.EQUALS);\n+        WORD_OPERATORS.put(\"notequals\", Operator.NOT_EQUALS);\n+    }\n+\n+    private ExpressionParser() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static abstract class Expression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzExMA==", "bodyText": "assuming to the todo is the children being empty then adding currentExpression.children.isEmpty to the beginning of the if conditional should resolve the todo (|| it with the current conditional)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500643110", "createdAt": "2020-10-06T23:00:21Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/expression/ExpressionParser.java", "diffHunk": "@@ -0,0 +1,465 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.expression;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class ExpressionParser {\n+\n+    public static final char NO_TOKEN = 0;\n+    private static final String NESTED_PARENTHESIS_ERROR = \"Invalid nesting of parenthesis\";\n+    private static final String ENDS_WITH_OPERATOR_ERROR = \"An expression cannot end with an operator\";\n+    private static final String END_OF_QUOTED_STRING_ERROR = \"Unexpected end of expression while in quoted string\";\n+    private static final String UNEXPECTED_CHARACTER_ERROR = \"Unexpected character: \";\n+\n+    private static enum ParseState {\n+        READING_WHITESPACE,\n+        READING_SINGLE_STRING,\n+        READING_DOUBLE_STRING,\n+        READING_VARIABLE,\n+        READING_SINGLE_ESCAPED,\n+        READING_DOUBLE_ESCAPED\n+    }\n+\n+    public static enum Operator {\n+        AND_AND(NO_TOKEN, 11),\n+        AND('&', 11, null, AND_AND),\n+        OR_OR(NO_TOKEN, 12),\n+        OR('|', 12, null, OR_OR),\n+        EXCLUSIVE_OR('^', 3),\n+        NOT('!', 2),\n+        ADD('+', 4),\n+        SUBTRACT('-', 4),\n+        MULTIPLY('*', 3),\n+        DIVIDE('/', 3),\n+        MODULO('%', 3),\n+        GREATER_THAN('>', 6),\n+        LESS_THAN('<', 6),\n+        GREATER_THAN_OR_EQUALS(NO_TOKEN, 6),\n+        LESS_THAN_OR_EQUALS(NO_TOKEN, 6),\n+        NOT_EQUALS(NO_TOKEN, 7),\n+        CONTAINS(NO_TOKEN, 4),\n+        STARTS_WITH(NO_TOKEN, 4),\n+        ENDS_WITH(NO_TOKEN, 4),\n+        EQUALS(NO_TOKEN, 7),\n+        ASSIGN('=', 14, null, EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, NOT, NOT_EQUALS);\n+\n+        private final char token;\n+        private final int precedence;\n+        private final Map<Operator, Operator> combinations = new HashMap<>();\n+\n+        private Operator(char token, int precedence, Operator... combinations) {\n+            this.token = token;\n+            this.precedence = precedence;\n+\n+            for (int i = 0; i < combinations.length; i += 2) {\n+                if (combinations[i] == null) {\n+                    this.combinations.put(this, combinations[i + 1]);\n+                } else {\n+                    this.combinations.put(combinations[i], combinations[i + 1]);\n+                }\n+            }\n+        }\n+\n+        public char getToken() {\n+            return token;\n+        }\n+\n+        public int getPrecedence() {\n+            return precedence;\n+        }\n+\n+        private static final Map<Character, Operator> OPERATOR_TOKENS = new HashMap<>();\n+\n+        static {\n+            for (final Operator operator : Operator.values()) {\n+                if (operator.token != NO_TOKEN) {\n+                    OPERATOR_TOKENS.put(operator.token, operator);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final Map<String, Operator> WORD_OPERATORS = new HashMap<>();\n+\n+    static {\n+        WORD_OPERATORS.put(\"contains\", Operator.CONTAINS);\n+        WORD_OPERATORS.put(\"startswith\", Operator.STARTS_WITH);\n+        WORD_OPERATORS.put(\"endswith\", Operator.ENDS_WITH);\n+        WORD_OPERATORS.put(\"or\", Operator.OR);\n+        WORD_OPERATORS.put(\"and\", Operator.AND);\n+        WORD_OPERATORS.put(\"equals\", Operator.EQUALS);\n+        WORD_OPERATORS.put(\"notequals\", Operator.NOT_EQUALS);\n+    }\n+\n+    private ExpressionParser() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static abstract class Expression {\n+\n+        private SequenceExpression parent;\n+\n+        private Expression(SequenceExpression parent) {\n+            this.parent = parent;\n+        }\n+\n+        public SequenceExpression getParent() {\n+            return parent;\n+        }\n+\n+        protected abstract void print(String prefix, StringBuilder out);\n+\n+        @Override\n+        public String toString() {\n+            final var out = new StringBuilder();\n+            print(\"\", out);\n+            return out.toString();\n+        }\n+    }\n+\n+    public static class VariableExpression extends Expression {\n+\n+        private final String content;\n+\n+        private VariableExpression(SequenceExpression parent, char[] content, int contentLength) {\n+            super(parent);\n+            this.content = new String(content, 0, contentLength);\n+        }\n+\n+        public String getContent() {\n+            return content;\n+        }\n+\n+        @Override\n+        protected void print(String prefix, StringBuilder out) {\n+            out.append(prefix).append(\"VARIABLE: \").append(content).append(\"\\n\");\n+        }\n+    }\n+\n+    public static class StringExpression extends Expression {\n+\n+        private final String content;\n+\n+        private StringExpression(SequenceExpression parent, char[] content, int contentLength) {\n+            super(parent);\n+            this.content = new String(content, 0, contentLength);\n+        }\n+\n+        public String getContent() {\n+            return content;\n+        }\n+\n+        @Override\n+        protected void print(String prefix, StringBuilder out) {\n+            out.append(prefix).append(\"STRING: \").append(content).append(\"\\n\");\n+        }\n+    }\n+\n+    public static class OperatorExpression extends Expression {\n+\n+        private Operator operator;\n+\n+        private OperatorExpression(SequenceExpression parent, Operator operator) {\n+            super(parent);\n+            this.operator = operator;\n+        }\n+\n+        public Operator getOperator() {\n+            return operator;\n+        }\n+\n+        @Override\n+        protected void print(String prefix, StringBuilder out) {\n+            out.append(prefix).append(\"OPERATOR\").append(\": \").append(operator).append(\"\\n\");\n+        }\n+    }\n+\n+    public static class SequenceExpression extends Expression {\n+\n+        private final List<Expression> children = new ArrayList<>();\n+        private final List<Expression> unmodifiableChildren = Collections.unmodifiableList(children);\n+\n+        private SequenceExpression(SequenceExpression parent) {\n+            super(parent);\n+        }\n+\n+        public List<Expression> getUnmodifiableChildren() {\n+            return unmodifiableChildren;\n+        }\n+\n+        private void addChild(Expression expression) {\n+\n+            if (expression instanceof SequenceExpression) {\n+                final var tokenSequence = (SequenceExpression) expression;\n+                switch (tokenSequence.children.size()) {\n+                    case 0:\n+                        return;\n+                    case 1:\n+                        expression = tokenSequence.children.get(0);\n+                        break;\n+                    default:\n+                        if (tokenSequence.children.get(tokenSequence.children.size() - 1) instanceof OperatorExpression) {\n+                            throw new IllegalArgumentException(ENDS_WITH_OPERATOR_ERROR);\n+                        }\n+                }\n+            }\n+\n+            if (expression instanceof OperatorExpression && !children.isEmpty()) {\n+                final var lastChild = children.get(children.size() - 1);\n+                if (lastChild instanceof OperatorExpression) {\n+                    final var tokenOperator = (OperatorExpression) expression;\n+                    final var lastChildOperator = (OperatorExpression) lastChild;\n+                    final var combinedOperator = tokenOperator.operator.combinations.get(lastChildOperator.operator);\n+                    if (combinedOperator != null) {\n+                        children.remove(children.size() - 1);\n+                        tokenOperator.operator = combinedOperator;\n+                    }\n+                }\n+            }\n+\n+            if (!(expression instanceof OperatorExpression) && !children.isEmpty()) {\n+                final var lastChild = children.get(children.size() - 1);\n+                if (lastChild instanceof OperatorExpression) {\n+                    if (children.size() == 1 || children.get(children.size() - 2) instanceof OperatorExpression) {\n+                        final var childSequence = new SequenceExpression(this);\n+                        lastChild.parent = childSequence;\n+                        childSequence.children.add(lastChild);\n+                        expression.parent = childSequence;\n+                        childSequence.children.add(expression);\n+                        children.remove(children.size() - 1);\n+                        addChild(childSequence);\n+                        return;\n+                    }\n+                } else {\n+                    if (expression instanceof VariableExpression) {\n+                        final var tokenVariable = (VariableExpression) expression;\n+                        final var wordOperator = WORD_OPERATORS.get(tokenVariable.content.toLowerCase());\n+                        if (wordOperator != null) {\n+                            children.add(new OperatorExpression(this, wordOperator));\n+                            return;\n+                        }\n+                    }\n+                    throw new IllegalStateException(\"2 non-operator tokens in sequence\");\n+                }\n+            }\n+\n+            children.add(expression);\n+        }\n+\n+        public void normalize() {\n+            normalizeChildren();\n+\n+            while (children.size() > 3) {\n+                var lowestPrecedence = Integer.MAX_VALUE;\n+                var lowestIndex = -1;\n+                for (int i = 1; i < children.size(); i += 2) {\n+                    final int precedence = ((OperatorExpression) children.get(i)).getOperator().getPrecedence();\n+                    if (precedence < lowestPrecedence) {\n+                        lowestPrecedence = precedence;\n+                        lowestIndex = i;\n+                    }\n+                }\n+\n+                final var childSequence = new SequenceExpression(this);\n+\n+                final var left = children.remove(lowestIndex - 1);\n+                left.parent = childSequence;\n+                childSequence.addChild(left);\n+\n+                final var operator = children.remove(lowestIndex - 1);\n+                operator.parent = childSequence;\n+                childSequence.addChild(operator);\n+\n+                final var right = children.get(lowestIndex - 1);\n+                right.parent = childSequence;\n+                childSequence.addChild(right);\n+\n+                children.set(lowestIndex - 1, childSequence);\n+            }\n+        }\n+\n+        private void normalizeChildren() {\n+            for (int i = children.size() - 1; i >= 0; i--) {\n+                final var child = children.get(i);\n+                if (child instanceof SequenceExpression) {\n+                    ((SequenceExpression) child).normalize();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        protected void print(String prefix, StringBuilder out) {\n+            out.append(prefix).append(\"(\\n\");\n+            children.forEach(child -> {\n+                child.print(prefix + \"  \", out);\n+            });\n+            out.append(prefix).append(\")\\n\");\n+        }\n+    }\n+\n+    public static SequenceExpression parse(String expression) {\n+\n+        var state = ParseState.READING_WHITESPACE;\n+        var content = new char[expression.length()];\n+        var contentLength = 0;\n+\n+        var rootExpression = new SequenceExpression(null);\n+        var currentExpression = rootExpression;\n+\n+        for (int i = 0; i <= expression.length(); i++) {\n+            final char c = i < expression.length() ? expression.charAt(i) : 0;\n+\n+            switch (state) {\n+                case READING_WHITESPACE:\n+                    if (c != ' ' && c != 0) {\n+                        if (isLetter(c)) {\n+                            content[contentLength++] = c;\n+                            state = ParseState.READING_VARIABLE;\n+                        } else if (c == '\\'') {\n+                            state = ParseState.READING_SINGLE_STRING;\n+                        } else if (c == '\"') {\n+                            state = ParseState.READING_DOUBLE_STRING;\n+                        } else if (c == '(') {\n+                            currentExpression = new SequenceExpression(currentExpression);\n+                        } else if (c == ')') {\n+                            if (currentExpression == rootExpression) {\n+                                throw new IllegalArgumentException(NESTED_PARENTHESIS_ERROR);\n+                            }\n+                            final var parentExpression = currentExpression.getParent();\n+                            parentExpression.addChild(currentExpression);\n+                            currentExpression = parentExpression;\n+                        } else if (Operator.OPERATOR_TOKENS.containsKey(c)) {\n+                            currentExpression.addChild(new OperatorExpression(currentExpression, Operator.OPERATOR_TOKENS.get(c)));\n+                        } else {\n+                            throw new IllegalArgumentException(UNEXPECTED_CHARACTER_ERROR + c);\n+                        }\n+                    }\n+                    break;\n+\n+                case READING_VARIABLE:\n+                    if (c == ' ' || c == 0) {\n+                        currentExpression.addChild(new VariableExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        state = ParseState.READING_WHITESPACE;\n+                    } else if (isLetter(c) || isDigit(c)) {\n+                        content[contentLength++] = c;\n+                    } else if (c == '(') {\n+                        currentExpression.addChild(new VariableExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        currentExpression = new SequenceExpression(currentExpression);\n+                    } else if (c == ')') {\n+                        if (currentExpression == rootExpression) {\n+                            throw new IllegalArgumentException(NESTED_PARENTHESIS_ERROR);\n+                        }\n+                        currentExpression.addChild(new VariableExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        final var parentExpression = currentExpression.getParent();\n+                        parentExpression.addChild(currentExpression);\n+                        currentExpression = parentExpression;\n+                        state = ParseState.READING_WHITESPACE;\n+                    } else if (Operator.OPERATOR_TOKENS.containsKey(c)) {\n+                        currentExpression.addChild(new VariableExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        currentExpression.addChild(new OperatorExpression(currentExpression, Operator.OPERATOR_TOKENS.get(c)));\n+                        state = ParseState.READING_WHITESPACE;\n+                    } else {\n+                        throw new IllegalArgumentException(UNEXPECTED_CHARACTER_ERROR + c);\n+                    }\n+                    break;\n+\n+                case READING_SINGLE_STRING:\n+                    if (c == '\\'') {\n+                        currentExpression.addChild(new StringExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        state = ParseState.READING_WHITESPACE;\n+                    } else if (c == '\\\\') {\n+                        state = ParseState.READING_SINGLE_ESCAPED;\n+                    } else if (c == 0) {\n+                        throw new IllegalArgumentException(END_OF_QUOTED_STRING_ERROR);\n+                    } else {\n+                        content[contentLength++] = c;\n+                    }\n+                    break;\n+\n+                case READING_DOUBLE_STRING:\n+                    if (c == '\"') {\n+                        currentExpression.addChild(new StringExpression(currentExpression, content, contentLength));\n+                        contentLength = 0;\n+                        state = ParseState.READING_WHITESPACE;\n+                    } else if (c == '\\\\') {\n+                        state = ParseState.READING_DOUBLE_ESCAPED;\n+                    } else if (c == 0) {\n+                        throw new IllegalArgumentException(END_OF_QUOTED_STRING_ERROR);\n+                    } else {\n+                        content[contentLength++] = c;\n+                    }\n+                    break;\n+\n+                case READING_SINGLE_ESCAPED:\n+                    if (c == 0) {\n+                        throw new IllegalArgumentException(END_OF_QUOTED_STRING_ERROR);\n+                    } else {\n+                        content[contentLength++] = c;\n+                        state = ParseState.READING_SINGLE_STRING;\n+                    }\n+                    break;\n+\n+                case READING_DOUBLE_ESCAPED:\n+                    if (c == 0) {\n+                        throw new IllegalArgumentException(END_OF_QUOTED_STRING_ERROR);\n+                    } else {\n+                        content[contentLength++] = c;\n+                        state = ParseState.READING_DOUBLE_STRING;\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        if (currentExpression != rootExpression) {\n+            throw new IllegalArgumentException(NESTED_PARENTHESIS_ERROR);\n+        }\n+        if (rootExpression.children.size() == 1) {\n+            final var onlyChild = rootExpression.children.get(0);\n+            if (onlyChild instanceof SequenceExpression) {\n+                rootExpression = (SequenceExpression) onlyChild;\n+            }\n+        }\n+        // TODO: errors as indexoutofbounds when it is 0.\n+        if (!currentExpression.children.isEmpty() && currentExpression.children.get(currentExpression.children.size() - 1) instanceof OperatorExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NTk2Mw==", "bodyText": "change to return p2 == null || p1.compareTo(p2) > 0", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500645963", "createdAt": "2020-10-06T23:09:36Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/GreaterThan.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.ComparisonOperation;\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class GreaterThan {\n+\n+    public static final String NAME = \"GREATER_THAN\";\n+\n+    private GreaterThan() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static final ComparisonOperation COMPARISON_OPERATION = new ComparisonOperation() {\n+        @Override\n+        public boolean execute(double p1, double p2) {\n+            return p1 > p2;\n+        }\n+\n+        @Override\n+        public boolean execute(float p1, float p2) {\n+            return p1 > p2;\n+        }\n+\n+        @Override\n+        public boolean execute(long p1, long p2) {\n+            return p1 > p2;\n+        }\n+\n+        @Override\n+        public boolean execute(int p1, int p2) {\n+            return p1 > p2;\n+        }\n+\n+        @Override\n+        public boolean execute(String p1, String p2) {\n+            if (p1 == null) {\n+                return false;\n+            } else {\n+                return p2 == null ? true : p1.compareTo(p2) > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NjIxNA==", "bodyText": "change to return p2 == null || p1.compareTo(p2) >= 0", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500646214", "createdAt": "2020-10-06T23:10:19Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/GreaterThanOrEquals.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.ComparisonOperation;\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class GreaterThanOrEquals {\n+\n+    public static final String NAME = \"GREATER_THAN_OR_EQUALS\";\n+\n+    private GreaterThanOrEquals() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static final ComparisonOperation COMPARISON_OPERATION = new ComparisonOperation() {\n+        @Override\n+        public boolean execute(double p1, double p2) {\n+            return p1 >= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(float p1, float p2) {\n+            return p1 >= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(long p1, long p2) {\n+            return p1 >= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(int p1, int p2) {\n+            return p1 >= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(String p1, String p2) {\n+            if (p1 == null) {\n+                return p2 == null;\n+            } else {\n+                return p2 == null ? true : p1.compareTo(p2) >= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NjUyMg==", "bodyText": "change to return p2 != null && p1.compareTo(p2) < 0", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500646522", "createdAt": "2020-10-06T23:11:22Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/LessThan.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.ComparisonOperation;\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class LessThan {\n+\n+    public static final String NAME = \"LESS_THAN\";\n+\n+    private LessThan() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static final ComparisonOperation COMPARISON_OPERATION = new ComparisonOperation() {\n+        @Override\n+        public boolean execute(double p1, double p2) {\n+            return p1 < p2;\n+        }\n+\n+        @Override\n+        public boolean execute(float p1, float p2) {\n+            return p1 < p2;\n+        }\n+\n+        @Override\n+        public boolean execute(long p1, long p2) {\n+            return p1 < p2;\n+        }\n+\n+        @Override\n+        public boolean execute(int p1, int p2) {\n+            return p1 < p2;\n+        }\n+\n+        @Override\n+        public boolean execute(String p1, String p2) {\n+            if (p1 == null) {\n+                return p2 != null;\n+            } else {\n+                return p2 == null ? false : p1.compareTo(p2) < 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NzAwMA==", "bodyText": "change to return p2 != null && p1.compareTo(p2) <= 0", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500647000", "createdAt": "2020-10-06T23:12:52Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/LessThanOrEquals.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.ComparisonOperation;\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class LessThanOrEquals {\n+\n+    public static final String NAME = \"LESS_THAN_OR_EQUALS\";\n+\n+    private LessThanOrEquals() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static final ComparisonOperation COMPARISON_OPERATION = new ComparisonOperation() {\n+        @Override\n+        public boolean execute(double p1, double p2) {\n+            return p1 <= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(float p1, float p2) {\n+            return p1 <= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(long p1, long p2) {\n+            return p1 <= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(int p1, int p2) {\n+            return p1 <= p2;\n+        }\n+\n+        @Override\n+        public boolean execute(String p1, String p2) {\n+            if (p1 == null) {\n+                return true;\n+            } else {\n+                return p2 == null ? false : p1.compareTo(p2) <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0Nzc0NA==", "bodyText": "can remove the brackets from p1 (similar for following instances)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500647744", "createdAt": "2020-10-06T23:15:19Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/Negative.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+import au.gov.asd.tac.constellation.graph.value.readables.DoubleReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.FloatReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.IntReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.LongReadable;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class Negative {\n+\n+    public static final String NAME = \"NEGATIVE\";\n+\n+    private Negative() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static void register(Operators operators) {\n+        final var registry = operators.getRegistry(NAME);\n+\n+        registry.register(DoubleReadable.class, DoubleReadable.class, (p1) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0ODAyMQ==", "bodyText": "can remove brackets surrounding p1 and alter lambda to p1 -> p1 (similar for following instances)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500648021", "createdAt": "2020-10-06T23:16:18Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/operations/Positive.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.operations;\n+\n+import au.gov.asd.tac.constellation.graph.value.Operators;\n+import au.gov.asd.tac.constellation.graph.value.readables.DoubleReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.FloatReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.IntReadable;\n+import au.gov.asd.tac.constellation.graph.value.readables.LongReadable;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class Positive {\n+\n+    public static final String NAME = \"POSITIVE\";\n+\n+    private Positive() {\n+        // added private constructor to hide implicit public constructor - S1118.\n+    }\n+\n+    public static void register(Operators operators) {\n+        final var registry = operators.getRegistry(NAME);\n+\n+        registry.register(DoubleReadable.class, DoubleReadable.class, (p1) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTU1Ng==", "bodyText": "this and number of other interfaces for expressions are blank. Is there a reason why they need to be included?", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500649556", "createdAt": "2020-10-06T23:21:30Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/readables/And.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.readables;\n+\n+import au.gov.asd.tac.constellation.graph.value.Readable;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public interface And<V> extends Readable<V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MTU0OA==", "bodyText": "package names shouldn't have any capitals but personally I reckon we could probably just put this one and others directly in the types directory (I not too bothered by the number of files that it may end up containing)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500651548", "createdAt": "2020-10-06T23:28:26Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/types/booleanType/BooleanLogicConverters.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.types.booleanType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MjMxOA==", "bodyText": "can omit V in return type (i.e. ObjectValue<>())", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500662318", "createdAt": "2020-10-07T00:03:04Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/types/objectType/ObjectValueStore.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.types.objectType;\n+\n+import java.util.Arrays;\n+import au.gov.asd.tac.constellation.graph.value.ValueStore;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class ObjectValueStore<V> implements ValueStore<ObjectValue<V>> {\n+\n+    private static final Object[] EMPTY_VALUES = new Object[0];\n+    \n+    private Object[] values = EMPTY_VALUES;\n+    \n+    public ObjectValueStore() {\n+        this.values = EMPTY_VALUES;\n+    }\n+    \n+    public ObjectValueStore(V[] values) {\n+        this.values = values;\n+    }\n+    \n+    @Override\n+    public ObjectValue<V> createValue() {\n+        return new ObjectValue<V>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MzE4NA==", "bodyText": "public static synchronized", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500663184", "createdAt": "2020-10-07T00:06:11Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "diffHunk": "@@ -40,10 +45,74 @@\n  */\n public class LayersViewController {\n \n-    private final LayersViewTopComponent parent;\n+    // Layers view controller instance\n+    private static LayersViewController INSTANCE = null;\n+    private LayersViewTopComponent parent;\n \n-    public LayersViewController(final LayersViewTopComponent parent) {\n+    private final List<AttributeValueMonitor> valueMonitors;\n+    private final List<SchemaAttribute> changeListeners;\n+\n+    private final BitMaskQueryCollection vxBitMaskCollection = new BitMaskQueryCollection(GraphElementType.VERTEX);\n+    private final BitMaskQueryCollection txBitMaskCollection = new BitMaskQueryCollection(GraphElementType.TRANSACTION);\n+\n+    /**\n+     * Private constructor for singleton\n+     */\n+    private LayersViewController() {\n+        this.valueMonitors = new ArrayList<>();\n+        this.changeListeners = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Singleton instance retrieval\n+     *\n+     * @return the instance, if one is not made, it will make one.\n+     */\n+    public synchronized static LayersViewController getDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NDU4MQ==", "bodyText": "change modifiers of above 4 fields to static final", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500664581", "createdAt": "2020-10-07T00:11:03Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/query/BitMaskQueryCollection.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.query;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.attribute.SchemaAttribute;\n+import au.gov.asd.tac.constellation.graph.schema.attribute.SchemaAttributeUtilities;\n+import au.gov.asd.tac.constellation.graph.value.values.IntValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class BitMaskQueryCollection {\n+\n+    public final static int MAX_QUERY_AMT = 64;\n+    private final static String INVALID_INDEX_ERROR = \" is not a valid index for a layer\";\n+\n+    public final static BitMaskQuery[] DEFAULT_VX_QUERIES = new BitMaskQuery[]{\n+        new BitMaskQuery(new Query(null, BitMaskQuery.DEFAULT_QUERY_STRING), 0, BitMaskQuery.DEFAULT_QUERY_DESCRIPTION),\n+        new BitMaskQuery(new Query(GraphElementType.VERTEX, null), 1, StringUtils.EMPTY)};\n+\n+    public final static BitMaskQuery[] DEFAULT_TX_QUERIES = new BitMaskQuery[]{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTc4OQ==", "bodyText": "Split the InterruptedException and ExecutionException cases as there is no need to interrupt the thread in the ExecutionException case", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500665789", "createdAt": "2020-10-07T00:15:03Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/shortcut/LayersViewShortcuts.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.shortcut;\n+\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.views.layers.LayersViewController;\n+import java.awt.event.ActionEvent;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import javax.swing.AbstractAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ * Defines the keyboard shortcuts for use with the Layers view\n+ *\n+ * @author formalhaut69\n+ */\n+@ActionID(category = \"Options\", id = \"au.gov.asd.tac.constellation.views.layersviewshortcuts\")\n+@ActionRegistration(displayName = \"#CTL_LayersViewShortcuts\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-D\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-L\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-1\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-2\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-3\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-4\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-5\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-6\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-7\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-8\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-9\")\n+})\n+@NbBundle.Messages(\"CTL_LayersViewShortcuts=Layers View: Shortcuts\")\n+public class LayersViewShortcuts extends AbstractAction {\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        Future<?> enableLayerFuture = null;\n+\n+        final String hotkey = e.getActionCommand();\n+        switch (hotkey) {\n+            case \"CA-L\":\n+                PluginExecution.withPlugin(new NewLayerPlugin()).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-D\":\n+                PluginExecution.withPlugin(new DeselectAllLayersPlugin()).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-1\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(1)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-2\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(2)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-3\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(3)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-4\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(4)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-5\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(5)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-6\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(6)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-7\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(7)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-8\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(8)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-9\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(9)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        // wait for future, execute and update the state.\n+        if (enableLayerFuture != null) {\n+            try {\n+                enableLayerFuture.get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                Exceptions.printStackTrace(ex);\n+                // Restore interrupted state...\n+                Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTg1Mg==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500665852", "createdAt": "2020-10-07T00:15:15Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/shortcut/LayersViewShortcuts.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.shortcut;\n+\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.views.layers.LayersViewController;\n+import java.awt.event.ActionEvent;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import javax.swing.AbstractAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ * Defines the keyboard shortcuts for use with the Layers view\n+ *\n+ * @author formalhaut69\n+ */\n+@ActionID(category = \"Options\", id = \"au.gov.asd.tac.constellation.views.layersviewshortcuts\")\n+@ActionRegistration(displayName = \"#CTL_LayersViewShortcuts\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-D\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-L\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-1\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-2\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-3\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-4\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-5\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-6\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-7\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-8\"),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-9\")\n+})\n+@NbBundle.Messages(\"CTL_LayersViewShortcuts=Layers View: Shortcuts\")\n+public class LayersViewShortcuts extends AbstractAction {\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        Future<?> enableLayerFuture = null;\n+\n+        final String hotkey = e.getActionCommand();\n+        switch (hotkey) {\n+            case \"CA-L\":\n+                PluginExecution.withPlugin(new NewLayerPlugin()).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-D\":\n+                PluginExecution.withPlugin(new DeselectAllLayersPlugin()).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-1\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(1)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-2\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(2)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-3\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(3)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-4\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(4)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-5\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(5)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-6\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(6)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-7\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(7)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-8\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(8)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            case \"CA-9\":\n+                enableLayerFuture = PluginExecution.withPlugin(new EnableLayerPlugin(9)).executeLater(GraphManager.getDefault().getActiveGraph());\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        // wait for future, execute and update the state.\n+        if (enableLayerFuture != null) {\n+            try {\n+                enableLayerFuture.get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                Exceptions.printStackTrace(ex);\n+                // Restore interrupted state...\n+                Thread.currentThread().interrupt();\n+            }\n+\n+            LayersViewController.getDefault().execute();\n+            final Future<?> writeStateFuture = LayersViewController.getDefault().writeState();\n+            if (writeStateFuture != null) {\n+                try {\n+                    writeStateFuture.get();\n+                } catch (InterruptedException | ExecutionException ex) {\n+                    Exceptions.printStackTrace(ex);\n+                    // Restore interrupted state...\n+                    Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NjY1OQ==", "bodyText": "can omit static modifier from nested enum (nested enums are static implicitly)", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500666659", "createdAt": "2020-10-07T00:18:12Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/expression/ExpressionParser.java", "diffHunk": "@@ -0,0 +1,465 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.expression;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class ExpressionParser {\n+\n+    public static final char NO_TOKEN = 0;\n+    private static final String NESTED_PARENTHESIS_ERROR = \"Invalid nesting of parenthesis\";\n+    private static final String ENDS_WITH_OPERATOR_ERROR = \"An expression cannot end with an operator\";\n+    private static final String END_OF_QUOTED_STRING_ERROR = \"Unexpected end of expression while in quoted string\";\n+    private static final String UNEXPECTED_CHARACTER_ERROR = \"Unexpected character: \";\n+\n+    private static enum ParseState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NjcwNQ==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r500666705", "createdAt": "2020-10-07T00:18:20Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/expression/ExpressionParser.java", "diffHunk": "@@ -0,0 +1,465 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.value.expression;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author sirius\n+ */\n+public class ExpressionParser {\n+\n+    public static final char NO_TOKEN = 0;\n+    private static final String NESTED_PARENTHESIS_ERROR = \"Invalid nesting of parenthesis\";\n+    private static final String ENDS_WITH_OPERATOR_ERROR = \"An expression cannot end with an operator\";\n+    private static final String END_OF_QUOTED_STRING_ERROR = \"Unexpected end of expression while in quoted string\";\n+    private static final String UNEXPECTED_CHARACTER_ERROR = \"Unexpected character: \";\n+\n+    private static enum ParseState {\n+        READING_WHITESPACE,\n+        READING_SINGLE_STRING,\n+        READING_DOUBLE_STRING,\n+        READING_VARIABLE,\n+        READING_SINGLE_ESCAPED,\n+        READING_DOUBLE_ESCAPED\n+    }\n+\n+    public static enum Operator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ce30289dd4da043903eb88ff0a058c9f8de94"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a78eaa6446651be3c0bb46aeed3e6604e5b303a", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/4a78eaa6446651be3c0bb46aeed3e6604e5b303a", "committedDate": "2020-10-07T23:39:59Z", "message": "Requested changes fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc862d8cc4ea76332f79c41f293f04029b891b4d", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/cc862d8cc4ea76332f79c41f293f04029b891b4d", "committedDate": "2020-10-13T22:39:35Z", "message": "Replace var with explicit type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d2cafaf602610c2fdecaf038247ce2e35a1398", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/f9d2cafaf602610c2fdecaf038247ce2e35a1398", "committedDate": "2020-10-13T22:58:33Z", "message": "convert for loop to while"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzU1OTE4", "url": "https://github.com/constellation-app/constellation/pull/849#pullrequestreview-509355918", "createdAt": "2020-10-15T13:05:34Z", "commit": {"oid": "f9d2cafaf602610c2fdecaf038247ce2e35a1398"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db11bce4284cd7a426a0bdc4f0f5e407c0db581", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/3db11bce4284cd7a426a0bdc4f0f5e407c0db581", "committedDate": "2020-10-26T02:29:00Z", "message": "sonarcube fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859e0d443cf2cbd55eb8aeda116374c4b116b28a", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/859e0d443cf2cbd55eb8aeda116374c4b116b28a", "committedDate": "2020-10-30T04:03:39Z", "message": "SQ Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjYyOTk1", "url": "https://github.com/constellation-app/constellation/pull/849#pullrequestreview-521262995", "createdAt": "2020-11-01T21:26:44Z", "commit": {"oid": "859e0d443cf2cbd55eb8aeda116374c4b116b28a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToyNjo0NFrOHryP0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToyNjo0NFrOHryP0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NDA2Nw==", "bodyText": "I'll just point out as an FYI that an easier solution for the code smell you were fixing here would've been to simply omit the curly braces as they were unnecessary in the switch statement case", "url": "https://github.com/constellation-app/constellation/pull/849#discussion_r515674067", "createdAt": "2020-11-01T21:26:44Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/value/expression/ExpressionCompiler.java", "diffHunk": "@@ -89,35 +89,38 @@ private ExpressionCompiler() {\n         // added private constructor to hide implicit public constructor - S1118.\n     }\n \n+    private static Object compileTwoChildrenExpression(final List<Expression> children, final VariableProvider variableProvider, final IntReadable indexReadable, final Operators operators) {\n+        final OperatorExpression operator = (OperatorExpression) children.get(0);\n+        final Object right = compileExpression(children.get(1), variableProvider, indexReadable, operators);\n+        final String operatorName = CONVERTER_CLASSES.get(operator.getOperator());\n+        final Object result = operators.getRegistry(operatorName).apply(right);\n+        if (result == null) {\n+            throw new ExpressionException(\"Unable to find implementation of operator: \" + operatorName + \" (\" + right.getClass().getCanonicalName() + \")\");\n+        }\n+        return result;\n+    }\n+\n+    private static Object compileThreeChildrenExpression(final List<Expression> children, final VariableProvider variableProvider, final IntReadable indexReadable, final Operators operators) {\n+        final Object left = compileExpression(children.get(0), variableProvider, indexReadable, operators);\n+        final OperatorExpression operator = (OperatorExpression) children.get(1);\n+        final Object right = compileExpression(children.get(2), variableProvider, indexReadable, operators);\n+        final String operatorName = OPERATOR_CLASSES.get(operator.getOperator());\n+        final Object result = operators.getRegistry(operatorName).apply(left, right);\n+        if (result == null) {\n+            throw new ExpressionException(\"Unable to find implementation of operator: \" + operatorName + \" (\" + left.getClass().getCanonicalName() + \", \" + right.getClass().getCanonicalName() + \")\");\n+        }\n+        return result;\n+    }\n+\n     public static Object compileSequenceExpression(SequenceExpression expression, VariableProvider variableProvider, IntReadable indexReadable, Operators operators) {\n         final List<Expression> children = expression.getUnmodifiableChildren();\n         switch (children.size()) {\n             case 1:\n                 return compileExpression(children.get(0), variableProvider, indexReadable, operators);\n-\n-            case 2: {\n-                final OperatorExpression operator = (OperatorExpression) children.get(0);\n-                final Object right = compileExpression(children.get(1), variableProvider, indexReadable, operators);\n-                final String operatorName = CONVERTER_CLASSES.get(operator.getOperator());\n-                final Object result = operators.getRegistry(operatorName).apply(right);\n-                if (result == null) {\n-                    throw new ExpressionException(\"Unable to find implementation of operator: \" + operatorName + \" (\" + right.getClass().getCanonicalName() + \")\");\n-                }\n-                return result;\n-            }\n-\n-            case 3: {\n-                final Object left = compileExpression(children.get(0), variableProvider, indexReadable, operators);\n-                final OperatorExpression operator = (OperatorExpression) children.get(1);\n-                final Object right = compileExpression(children.get(2), variableProvider, indexReadable, operators);\n-                final String operatorName = OPERATOR_CLASSES.get(operator.getOperator());\n-                final Object result = operators.getRegistry(operatorName).apply(left, right);\n-                if (result == null) {\n-                    throw new ExpressionException(\"Unable to find implementation of operator: \" + operatorName + \" (\" + left.getClass().getCanonicalName() + \", \" + right.getClass().getCanonicalName() + \")\");\n-                }\n-                return result;\n-            }\n-\n+            case 2:\n+                return compileTwoChildrenExpression(children, variableProvider, indexReadable, operators);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859e0d443cf2cbd55eb8aeda116374c4b116b28a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ee8a62c2a52ac5c6a24822168578a9853821a9", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/83ee8a62c2a52ac5c6a24822168578a9853821a9", "committedDate": "2020-11-01T22:08:04Z", "message": "revert switch statements from methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "802d4653e8b192c4ab323fbcfb2ad90c5b79316c", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/802d4653e8b192c4ab323fbcfb2ad90c5b79316c", "committedDate": "2020-11-01T22:53:16Z", "message": "sonar diamond operator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDEzNzE2", "url": "https://github.com/constellation-app/constellation/pull/849#pullrequestreview-522013716", "createdAt": "2020-11-02T21:42:33Z", "commit": {"oid": "802d4653e8b192c4ab323fbcfb2ad90c5b79316c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}