{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDIyNjg2", "number": 397, "title": "Created generric JSON config file read/writer.", "bodyText": "Description of the Change\nMoved logic that reads/writes JSON configuration files into a generic package in Core Functionality. (genericjsonio).\nUse this functionality to support PArameterIOUtlities.java.\nNow that a generic JSON config package exists, this can be wrapped up and used to support saving tableview column preferences - ie columns to display, their order, and any column identiifed for sorting.\nUpdated TableView functionlaity to include a preferences menu item containing a save and load preferences sub-menu. User can now save current table column state for future use - note, only the current table type (ie vertex/transaction) is saved ./ loaded.\nTable preferecnes are saved into users constellation directory, within the TableViewPreferences subfolder. The name of the config file saved is prefixed with an indication of the type of data being displayed in the table, however this is hidden from the user.\nAdditionally updated TableView code to store sort order - which was previously being lost when columns ere manually reordered.\nAlternate Designs\nnil\nWhy Should This Be In Core?\nProvides ability to precan table layouts for specific purposes.\nBenefits\nAs above\nPossible Drawbacks\nI'm not aware of any.\nVerification Process\n\nOpen a new graph as well as tableview. Add a selection of nodes and transactions to the graph using draw mode (or some other method).\nEnsure transactions are being displayed in table and update the displayed columns to include non-standard columns. Sort the data by one of the columns\nClick the heart icon and select 'Save Table Preferences'\nOn the save dialog enter a name - ie 'test' and click Ok.\nModify the displayed columns and their order, change the column being sorted by and the direction.\nClick on the heart icon and select \"Load Table Preferences\". Select the entry in the list corresponding to the save name entered at step 4 and press the cancel button. Confirm that no changes are made to the table.\nClick on the heart icon and select \"Load Table Preferences\". Select the entry in the list corresponding to the save name entered at step 4 and press the OK button.  Confirm that the columns, their order and sorting reflect the changes saved at step 4\nChange the table to display vertexes.\nMake changes to the displayed columns, their order and sorting.\nRepeat steps 3-7 and confirm functionlaity works for vertexes as it does for transactions. use the same filename used above, to confirm this is possible\nClick on the heart icon and select \"Save Table Preferences\". In the save dialog hit enter without entering a filename.\nNavigate to users .CONSTELLATION directory, and then to the TableViewPreferences subdirectory. Confirm that contained in this folder are filenames transaction-test.json and vertex-test.json (assuming the filename test was used when saving config), confirm an additonal file of the form \" at .json exists\n\nApplicable Issues\nnil", "createdAt": "2020-04-03T08:03:29Z", "url": "https://github.com/constellation-app/constellation/pull/397", "merged": true, "mergeCommit": {"oid": "4036e8310592aa552ee597cfbef07542653a3313"}, "closed": true, "closedAt": "2020-04-07T05:27:32Z", "author": {"login": "serpens24"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT7nTHAH2gAyMzk4MDIyNjg2OmI3NzQ3YWNhNzg0YWY2OTgzNzdhMWRmM2ZhNjk3Nzk1NzFiOGYxNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVMHPuAFqTM4ODc4NTcwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7747aca784af698377a1df3fa69779571b8f149", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/b7747aca784af698377a1df3fa69779571b8f149", "committedDate": "2020-04-03T07:17:58Z", "message": "Created generric JSON config file read/writer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTY2NTg1", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387166585", "createdAt": "2020-04-03T11:16:28Z", "commit": {"oid": "b7747aca784af698377a1df3fa69779571b8f149"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMToxNjoyOFrOGARLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMToxNzo0M1rOGARNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDU5Mg==", "bodyText": "Since this doesn't appear to rely on graphs or anything else high-level, could you please move it into Core Utilities.", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r402934592", "createdAt": "2020-04-03T11:16:28Z", "author": {"login": "cygnus-x-1"}, "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIODialog.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.functionality.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.gui.DraggableCell;\n+//import au.gov.asd.tac.constellation.visual.DraggableCell;\n+import java.util.Optional;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextInputDialog;\n+\n+/**\n+ * Displays a generic dialog window that can allow the user to select a Json\n+ * preference from a list\n+ *\n+ * @author formalhaut69\n+ */\n+public class JsonIODialog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7747aca784af698377a1df3fa69779571b8f149"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNDgyOQ==", "bodyText": "And this one...", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r402934829", "createdAt": "2020-04-03T11:16:59Z", "author": {"login": "cygnus-x-1"}, "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.functionality.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7747aca784af698377a1df3fa69779571b8f149"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNTE4Mg==", "bodyText": "...and don't forget to remove the dependency on Core Functionality here.", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r402935182", "createdAt": "2020-04-03T11:17:43Z", "author": {"login": "cygnus-x-1"}, "path": "CoreTableView/nbproject/project.xml", "diffHunk": "@@ -14,6 +14,14 @@\n                         <specification-version>1.0</specification-version>\n                     </run-dependency>\n                 </dependency>\n+                <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7747aca784af698377a1df3fa69779571b8f149"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/4969e5fd9a405d479571ccf0d440e5edcb5c52e6", "committedDate": "2020-04-04T05:28:12Z", "message": "SonarQube updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f75a6868c5c5ff6b3ad4b32ac929451a7f6b8a8", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/6f75a6868c5c5ff6b3ad4b32ac929451a7f6b8a8", "committedDate": "2020-04-04T06:12:05Z", "message": "Moved genericjsonio from CoreFunctionality to CoreUtilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa95a97edccd33eb55015176788c832d0e4c9ccc", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/aa95a97edccd33eb55015176788c832d0e4c9ccc", "committedDate": "2020-04-04T07:40:21Z", "message": "Reenabled JsonIO test and removed Tableview dependency on CoreFunctionality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc98f86ab546580ec473157874492fd148866554", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/bc98f86ab546580ec473157874492fd148866554", "committedDate": "2020-04-04T08:57:27Z", "message": "Delete pref file fix + further Sonarqube."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595be8b9493848216dfad50e7040f298610a1aa9", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/595be8b9493848216dfad50e7040f298610a1aa9", "committedDate": "2020-04-04T09:39:58Z", "message": "Sonarqube"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e904c960638acac5a0c1bf6cdea339d1e742e7a8", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/e904c960638acac5a0c1bf6cdea339d1e742e7a8", "committedDate": "2020-04-04T10:36:12Z", "message": "Moved filename encode/decode functions into their own utilities package to remove code duplication. Other minor sonarqube issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38", "committedDate": "2020-04-04T11:02:48Z", "message": "Found extra duplicate code for filename encode/decode. Replaced with calls to new coreUtilities version."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQwNjk4", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387940698", "createdAt": "2020-04-06T05:24:31Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyNDozMVrOGBINiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyNDozMVrOGBINiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjI5OQ==", "bodyText": "More a preference thing but possibly putting the 2 authorships on seperate lines?", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403836299", "createdAt": "2020-04-06T05:24:31Z", "author": {"login": "antares1470"}, "path": "CoreTableView/src/au/gov/asd/tac/constellation/views/tableview2/io/TableViewPreferencesIOUtilities.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.tableview2.io;\n+\n+import au.gov.asd.tac.constellation.utilities.genericjsonio.JsonIO;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.prefs.Preferences;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Save and Load TableView preferences.\n+ *\n+ * @author formalhaut69/serpens24", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQxNDUz", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387941453", "createdAt": "2020-04-06T05:27:15Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyNzoxNlrOGBIQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyNzoxNlrOGBIQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNjk0Mg==", "bodyText": "I might need some clarification here. You mention in the exception that it is a static class but the class itself doesn't appear to be static", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403836942", "createdAt": "2020-04-06T05:27:16Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/file/FilenameEncoder.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package au.gov.asd.tac.constellation.utilities.file;\n+\n+/**\n+ * Manage the encode/decode of strings into filenames. This essentially ensures\n+ * the characters in the filename are within a valid set.\n+ * @author serpens24\n+ */\n+public class FilenameEncoder {\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private FilenameEncoder() {\n+        throw new IllegalStateException(\"Static class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQxNzcw", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387941770", "createdAt": "2020-04-06T05:28:26Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyODoyN1rOGBIRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyODoyN1rOGBIRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzI2Mg==", "bodyText": "same comment as before. Possibly moving authorships to separate lines", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837262", "createdAt": "2020-04-06T05:28:27Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQxODc5", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387941879", "createdAt": "2020-04-06T05:28:48Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyODo0OFrOGBIRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNToyODo0OFrOGBIRvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzM3Mg==", "bodyText": "same comment as before on static class", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837372", "createdAt": "2020-04-06T05:28:48Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQyMzUx", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387942351", "createdAt": "2020-04-06T05:30:33Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozMDozM1rOGBITqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozMDozM1rOGBITqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNzg2NQ==", "bodyText": "is there a way to right the void function without the return? More that sonar is probably going to flag this", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403837865", "createdAt": "2020-04-06T05:30:33Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");\n+    }\n+ \n+    /**\n+     * Save the supplied JSON data in a file, within an allocated subdirectory\n+     * of the users configuration directory. The filename can optionally be\n+     * prefixed with a string, which can be used to categorize it. Refer to\n+     * further comments inline.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     * @param filePrefix Ignored if blank, if not, a string to prefix the\n+     * filename with.\n+     *\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode, String filePrefix) {\n+        // Normal operation sees an empty filePrefix string supplied. In this case, the name of the file will contain\n+        // only the filename entered by the user. If however a non-empty filePrefix is supplied, then the filename\n+        // privided by the user will be prefixed with this.\n+        // This is MOST useful when a dedicated directory exists for similar 'type' config files, like the example\n+        // directory structure below:\n+        // <user-dir>\n+        //     +-- tableconfigs\n+        //              +--- transaction_config1.json\n+        //              +--- transaction_config2.json\n+        //              +--- transaction_config3.json\n+        //              +--- vertex_configa.json\n+        //              +--- vertex_configb.json\n+        //              +--- vertex_configc.json\n+        //\n+        // The above structure could have been contructed with multiple calls to saveJsonPreferences all using\n+        // tableconfigs as the value for saveDir, three using 'transaction_' for filePrefix and the other three\n+        // using 'vertex_'.\n+        // This functionality is integrated with loadJsonPreferences such that if a filePrefix is supplied in the\n+        // loadJsonPreferences call then only files that contain the prefix are offered to the user to load. Hence,\n+        // it allows a form of config file filtering.\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final File prefDir = new File(ApplicationPreferenceKeys.getUserDir(prefs), saveDir);\n+\n+        // Create containing directory if it doesn't exist, wnsure it was successful.\n+        if (!prefDir.exists()) {\n+            prefDir.mkdir();\n+        }\n+        if (!prefDir.isDirectory()) {\n+            final String msg = String.format(\"Can't create data access directory '%s'.\", prefDir);\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+\n+        // Configure the mapper\n+        mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+        mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+        // Obtain a filename from the user. If no filename is supplied, and the user didn't hit cancel, then\n+        // generate a filename for them based on username and timestamp. If cancel was hit, no more processing\n+        // is required.\n+        Tuple<Boolean, String> preferenceNameDetails = JsonIODialog.getName();\n+        if (!preferenceNameDetails.getFirst()) {\n+            // Cancel was pressed, lets exit straight away - nothing to do here\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQyNTky", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387942592", "createdAt": "2020-04-06T05:31:22Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozMToyM1rOGBIUZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozMToyM1rOGBIUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzODA1Mw==", "bodyText": "is it possible is this can be made to use a logger instead?", "url": "https://github.com/constellation-app/constellation/pull/397#discussion_r403838053", "createdAt": "2020-04-06T05:31:23Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/genericjsonio/JsonIO.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.utilities.genericjsonio;\n+\n+import au.gov.asd.tac.constellation.preferences.ApplicationPreferenceKeys;\n+import au.gov.asd.tac.constellation.utilities.datastructure.Tuple;\n+import au.gov.asd.tac.constellation.utilities.file.FilenameEncoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Optional;\n+import java.util.prefs.Preferences;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.ButtonType;\n+import org.openide.DialogDisplayer;\n+import org.openide.NotifyDescriptor;\n+import org.openide.awt.StatusDisplayer;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbPreferences;\n+\n+/**\n+ * Common functionality allowing JSON preferences to be saved/loaded.\n+ *\n+ * @author formalhaut69/serpens24\n+ */\n+public class JsonIO {\n+\n+    private static final String FILE_EXT = \".json\";\n+    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter\n+            .ofPattern(\"yyyy-MM-dd HH:mm:ss z\").withZone(ZoneId.systemDefault());\n+    private static String currentDir = \"\";  // Stores directory used by load dialog for reuse in delete call\n+    private static String currentPrefix = \"\";  // Stores prefix used by load dialog for reuse in delete call\n+\n+    /**\n+     * Private constructor to hide implicit public one.\n+     */\n+    private JsonIO() {\n+        throw new IllegalStateException(\"Static class\");\n+    }\n+ \n+    /**\n+     * Save the supplied JSON data in a file, within an allocated subdirectory\n+     * of the users configuration directory. The filename can optionally be\n+     * prefixed with a string, which can be used to categorize it. Refer to\n+     * further comments inline.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     * @param filePrefix Ignored if blank, if not, a string to prefix the\n+     * filename with.\n+     *\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode, String filePrefix) {\n+        // Normal operation sees an empty filePrefix string supplied. In this case, the name of the file will contain\n+        // only the filename entered by the user. If however a non-empty filePrefix is supplied, then the filename\n+        // privided by the user will be prefixed with this.\n+        // This is MOST useful when a dedicated directory exists for similar 'type' config files, like the example\n+        // directory structure below:\n+        // <user-dir>\n+        //     +-- tableconfigs\n+        //              +--- transaction_config1.json\n+        //              +--- transaction_config2.json\n+        //              +--- transaction_config3.json\n+        //              +--- vertex_configa.json\n+        //              +--- vertex_configb.json\n+        //              +--- vertex_configc.json\n+        //\n+        // The above structure could have been contructed with multiple calls to saveJsonPreferences all using\n+        // tableconfigs as the value for saveDir, three using 'transaction_' for filePrefix and the other three\n+        // using 'vertex_'.\n+        // This functionality is integrated with loadJsonPreferences such that if a filePrefix is supplied in the\n+        // loadJsonPreferences call then only files that contain the prefix are offered to the user to load. Hence,\n+        // it allows a form of config file filtering.\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final File prefDir = new File(ApplicationPreferenceKeys.getUserDir(prefs), saveDir);\n+\n+        // Create containing directory if it doesn't exist, wnsure it was successful.\n+        if (!prefDir.exists()) {\n+            prefDir.mkdir();\n+        }\n+        if (!prefDir.isDirectory()) {\n+            final String msg = String.format(\"Can't create data access directory '%s'.\", prefDir);\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+\n+        // Configure the mapper\n+        mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+        mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+        // Obtain a filename from the user. If no filename is supplied, and the user didn't hit cancel, then\n+        // generate a filename for them based on username and timestamp. If cancel was hit, no more processing\n+        // is required.\n+        Tuple<Boolean, String> preferenceNameDetails = JsonIODialog.getName();\n+        if (!preferenceNameDetails.getFirst()) {\n+            // Cancel was pressed, lets exit straight away - nothing to do here\n+            return;\n+        }\n+        String fileName = preferenceNameDetails.getSecond();\n+        if (fileName.equals(\"\")) {\n+            // User didn't enter anyhting but hit OK ... this is a trigger to auto generate a filename\n+            fileName = String.format(\"%s at %s\", System.getProperty(\"user.name\"), TIMESTAMP_FORMAT.format(Instant.now()));\n+        }\n+\n+        // At this point ensure the filename isn't all whitespace, if it is, the user may have entered multiple spaces\n+        // or similar which is a bad filename.\n+        if (fileName.trim().length() > 0) {\n+            // Append filePrefix - it may well be empty, in which case the final fileName is unchanged.\n+            fileName = filePrefix.concat(fileName);\n+\n+            // Configure JSON mapper settings\n+            mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+            mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, true);\n+\n+            // Create the file and write its contents. IF the file already exists, confirm from the user that they\n+            // wish to continue (and overwrite the existing file).\n+            final File f = new File(prefDir, FilenameEncoder.encode(fileName + FILE_EXT));\n+            boolean go = true;\n+            if (f.exists()) {\n+                final String msg = String.format(\"'%s' already exists. Do you want to overwrite it?\", fileName);\n+                final Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n+                alert.setHeaderText(\"Preference file exists\");\n+                alert.setContentText(msg);\n+                final Optional<ButtonType> option = alert.showAndWait();\n+                go = option.isPresent() && option.get() == ButtonType.OK;\n+            }\n+\n+            if (go) {\n+                try {\n+                    mapper.writeValue(f, rootNode);\n+                    StatusDisplayer.getDefault().setStatusText(String.format(\"Preference saved to %s.\", f.getPath()));\n+                } catch (IOException ex) {\n+                    final String msg = String.format(\"Can't save table view preference: %s\", ex.getMessage());\n+                    final NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);\n+                    DialogDisplayer.getDefault().notify(nd);\n+                }\n+            }\n+        } else {\n+            final NotifyDescriptor nd = new NotifyDescriptor.Message(\"There must be a valid preference name.\", NotifyDescriptor.ERROR_MESSAGE);\n+            DialogDisplayer.getDefault().notify(nd);\n+        }\n+    }\n+\n+    /**\n+     * Wrapper around base saveJsonPreferences method which sets an empty prefix\n+     * string meaning no prefix is supplied.\n+     *\n+     * @param saveDir Directory name within users directory to save the\n+     * configuration file to\n+     * @param mapper ObjectMapper tied to the JSON object being written to file\n+     * @param rootNode The root node of the JSON object being written\n+     */\n+    public static void saveJsonPreferences(String saveDir, ObjectMapper mapper, ArrayNode rootNode) {\n+        saveJsonPreferences(saveDir, mapper, rootNode, \"\");\n+    }\n+\n+    /**\n+     * Allow user to select a preference file to load from the supplied\n+     * directory. If filePrefix was provided as a non empty string, then only\n+     * files prefixed with this value are available to the user to load.\n+     *\n+     * @param loadDir the directory location of the JSON files as a string\n+     * @param filePrefix if not blank a prefix string is pre-pended to the\n+     * beginning of the filename this can be used to create categorized JSON\n+     * files with forced name groupings\n+     *\n+     * @return The JsonNode of the selected preference or null if nothing is\n+     * selected\n+     */\n+    public static JsonNode loadJsonPreferences(final String loadDir, String filePrefix) {\n+        final Preferences prefs = NbPreferences.forModule(ApplicationPreferenceKeys.class);\n+        final String userDir = ApplicationPreferenceKeys.getUserDir(prefs);\n+        final File prefDir = new File(userDir, loadDir);\n+        final String[] names;\n+        final ObjectMapper mapper = new ObjectMapper();\n+\n+        // Store the load directory/prefix so that they can be used by deleteJsonPreference\n+        currentDir = loadDir;\n+        currentPrefix = filePrefix;\n+\n+        // Check the supplied directory for any files, if filePrefix was supplied, only files\n+        // containing the prefix are returned. Return a list of filenames for the user to select from.\n+        if (prefDir.isDirectory()) {\n+            names = prefDir.list((File dir, String name) -> {\n+                if (filePrefix.isEmpty()) {\n+                    return name.toLowerCase().endsWith(FILE_EXT);\n+                }\n+                return (name.toLowerCase().startsWith(filePrefix) && name.toLowerCase().endsWith(FILE_EXT));\n+            });\n+        } else {\n+            // Nothing to select from - return an empty list\n+            names = new String[0];\n+        }\n+\n+        // chop off \".json\" from the filenames\n+        for (int i = 0; i < names.length; i++) {\n+            final String nextName = FilenameEncoder.decode(names[i].substring(0, names[i].length() - 5));\n+            if (nextName != null && !nextName.isEmpty()) {\n+                names[i] = nextName;\n+                // Hide any file prefix which the user didn't see when saving\n+                if (!filePrefix.isEmpty()) {\n+                    names[i] = names[i].substring(filePrefix.length());\n+                }\n+            } \n+        }\n+\n+        // Allow user to select a filename from the crafted list using the dialog.\n+        String fileName = JsonIODialog.getSelection(names);\n+        if (fileName != null) {\n+            try {\n+                // Reconsitute filename to include any file prefix\n+                if (!filePrefix.isEmpty()) {\n+                    fileName = filePrefix.concat(fileName);\n+                }\n+                return mapper.readTree(new File(prefDir, FilenameEncoder.encode(fileName) + FILE_EXT));\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "originalPosition": 238}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTQyOTU4", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-387942958", "createdAt": "2020-04-06T05:32:45Z", "commit": {"oid": "f58f92e9c3c7b685b9d378ba651c5cb5b5cc5c38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/fac53db6c1bdfd66d9f8e6fbc252166b4289fc3a", "committedDate": "2020-04-06T08:17:39Z", "message": "Addressed review comments from antares1470"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42cb85f8a16fed5b54d18e5e9095e4b9cae28a64", "author": {"user": null}, "url": "https://github.com/constellation-app/constellation/commit/42cb85f8a16fed5b54d18e5e9095e4b9cae28a64", "committedDate": "2020-04-06T09:21:46Z", "message": "remove unused import."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjY1ODMx", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-388665831", "createdAt": "2020-04-06T22:35:33Z", "commit": {"oid": "42cb85f8a16fed5b54d18e5e9095e4b9cae28a64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Nzg1NzA2", "url": "https://github.com/constellation-app/constellation/pull/397#pullrequestreview-388785706", "createdAt": "2020-04-07T05:05:16Z", "commit": {"oid": "42cb85f8a16fed5b54d18e5e9095e4b9cae28a64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3879, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}