{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTk2NDE1", "number": 382, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMDo1MVrODtE-8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxNjozOVrODtFG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTk0MTYzOnYy", "diffSide": "RIGHT", "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/infomap/InfomapDirected.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMDo1MVrOF-SpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMDo1MVrOF-SpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MTQ2MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/constellation-app/constellation/pull/382#discussion_r400861461", "createdAt": "2020-03-31T12:10:51Z", "author": {"login": "arcturus2"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/infomap/InfomapDirected.java", "diffHunk": "@@ -63,25 +63,26 @@ protected InfomapBase getNewInfomapInstance(final Config config, final GraphRead\n     @Override\n     protected void addTeleportationDeltaFlowOnOldModuleIfMove(final Node nodeToMove, final DeltaFlow oldModuleDeltaFlow) {\n         final FlowDirectedWithTeleportation nodeToMoveData = (FlowDirectedWithTeleportation) nodeToMove.getData();\n-        final FlowDirectedWithTeleportation oldModuleFlowData = (FlowDirectedWithTeleportation) moduleFlowData[oldModuleDeltaFlow.module];\n-        oldModuleDeltaFlow.deltaExit += (alpha * nodeToMoveData.teleportSourceFlow + beta * nodeToMoveData.danglingFlow) * (oldModuleFlowData.teleportWeight - nodeToMoveData.teleportWeight);\n-        oldModuleDeltaFlow.deltaEnter += (alpha * (oldModuleFlowData.teleportSourceFlow - nodeToMoveData.teleportSourceFlow)\n-                + beta * (oldModuleFlowData.danglingFlow - nodeToMoveData.danglingFlow)) * nodeToMoveData.teleportWeight;\n+        final FlowDirectedWithTeleportation oldModuleFlowData = (FlowDirectedWithTeleportation) moduleFlowData[oldModuleDeltaFlow.getModule()];\n+        oldModuleDeltaFlow.setDeltaExit(oldModuleDeltaFlow.getDeltaExit() + ((alpha * nodeToMoveData.getTeleportSourceFlow() + beta * nodeToMoveData.getDanglingFlow()) * (oldModuleFlowData.getTeleportWeight() - nodeToMoveData.getTeleportWeight())));\n+        oldModuleDeltaFlow.setDeltaEnter(oldModuleDeltaFlow.getDeltaEnter() \n+                + ((alpha * (oldModuleFlowData.getTeleportSourceFlow() - nodeToMoveData.getTeleportSourceFlow()) + beta * (oldModuleFlowData.getDanglingFlow() - nodeToMoveData.getDanglingFlow())) \n+                        * nodeToMoveData.getTeleportWeight()));\n     }\n \n     @Override\n     protected void addTeleportationDeltaFlowOnNewModuleIfMove(final Node nodeToMove, final DeltaFlow newModuleDeltaFlow) {\n         final FlowDirectedWithTeleportation nodeToMoveData = (FlowDirectedWithTeleportation) nodeToMove.getData();\n-        final FlowDirectedWithTeleportation newModuleFlowData = (FlowDirectedWithTeleportation) moduleFlowData[newModuleDeltaFlow.module];\n-        newModuleDeltaFlow.deltaExit += (alpha * nodeToMoveData.teleportSourceFlow + beta * nodeToMoveData.danglingFlow) * newModuleFlowData.teleportWeight;\n-        newModuleDeltaFlow.deltaEnter += (alpha * newModuleFlowData.teleportSourceFlow + beta * newModuleFlowData.danglingFlow) * nodeToMoveData.teleportWeight;\n+        final FlowDirectedWithTeleportation newModuleFlowData = (FlowDirectedWithTeleportation) moduleFlowData[newModuleDeltaFlow.getModule()];\n+        newModuleDeltaFlow.setDeltaExit(newModuleDeltaFlow.getDeltaExit() + ((alpha * nodeToMoveData.getTeleportSourceFlow() + beta * nodeToMoveData.getDanglingFlow()) * newModuleFlowData.getTeleportWeight()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44415821de94f4f7932852a619e9d21f1030854"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTk2MjIyOnYy", "diffSide": "LEFT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/access/ObjectValueUpdater2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxNjozOVrOF-S1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxNjozOVrOF-S1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2NDc2Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/constellation-app/constellation/pull/382#discussion_r400864767", "createdAt": "2020-03-31T12:16:39Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/access/ObjectValueUpdater2.java", "diffHunk": "@@ -67,34 +67,40 @@ public void getUndo(UndoGraphEditState edit) {\n         new ValueGetter() {\n             @Override\n             public void getExecute(UndoGraphEditState edit) {\n-                edit.currentObject ^= (int) edit.byteStack[edit.bytePointer++] - Byte.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44415821de94f4f7932852a619e9d21f1030854"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2436, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}