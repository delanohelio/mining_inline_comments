{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTA0ODM5", "number": 892, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzozOToyMFrOE3iiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0MTo1NFrOE3iltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjcyOTE4OnYy", "diffSide": "RIGHT", "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzozOToyMFrOHw8yFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzozOTo0OVrOHyYluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4OTU1OA==", "bodyText": "These 2 can be final", "url": "https://github.com/constellation-app/constellation/pull/892#discussion_r521089558", "createdAt": "2020-11-11T03:39:20Z", "author": {"login": "antares1470"}, "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "diffHunk": "@@ -269,46 +269,22 @@ public Vector3f windowToGraphCoordinates(final Camera camera, final Point point)\n         worldPosition.add(camera.lookAtEye);\n         return worldPosition;\n     }\n-\n+    \n     @Override\n     public Vector3f closestNodeCameraCoordinates(GraphReadMethods graph, Camera camera, Point p) {\n \n         // Calculate the height and width of the viewing frustrum as a function of distance from the camera\n         final float verticalScale = (float) (Math.tan(Math.toRadians(Camera.FIELD_OF_VIEW / 2.0)));\n         final float horizontalScale = verticalScale * getCanvas().getWidth() / getCanvas().getHeight();\n-        float closestDistance = Float.MAX_VALUE;\n-        Vector3f closestNode = null;\n-        boolean foundScreenNode = false;\n \n         // Iterate through the camera locations of each node in the graph\n-        Iterator<Vector3f> nodeLocations = VisualGraphUtilities.streamVertexSceneLocations(graph, camera).iterator();\n-        while (nodeLocations.hasNext()) {\n-\n-            final Vector3f nodeLoaction = nodeLocations.next();\n-            final float zDistanceFromCamera = nodeLoaction.getZ();\n-            final float distanceFromCamera = nodeLoaction.getLength();\n-\n-            // Is the vertex in front of the camera?\n-            if (zDistanceFromCamera < 0) {\n-                final float horizontalOffset = nodeLoaction.getX() / zDistanceFromCamera;\n-                final float verticalOffset = nodeLoaction.getY() / zDistanceFromCamera;\n-\n-                // Is this vertex visible on the screen?\n-                if (horizontalOffset > -horizontalScale && horizontalOffset < horizontalScale && verticalOffset > -verticalScale && verticalOffset < verticalScale) {\n-                    // Is the first or closest node visible on the screen, record it as the closest node\n-                    if (!foundScreenNode || distanceFromCamera < closestDistance) {\n-                        closestNode = nodeLoaction;\n-                        closestDistance = closestNode.getLength();\n-                        foundScreenNode = true;\n-                    }\n-                } else if (!foundScreenNode && distanceFromCamera < closestDistance) {\n-                    // If no vertices on the screen have been found, this vertex is in front of the camera, and is the closest (or first) such vertex, record it as the closest node.\n-                    closestNode = nodeLoaction;\n-                    closestDistance = closestNode.getLength();\n-                }\n-            }\n-        }\n-        return closestNode;\n+        Stream<NodeCameraDistance> nodeCameraDistances = VisualGraphUtilities.streamVertexSceneLocations(graph, camera)\n+                                                .parallel()\n+                                                .map(vector -> new NodeCameraDistance(vector, horizontalScale, verticalScale));\n+                                                \n+        NodeCameraDistance closest = nodeCameraDistances.parallel().reduce(new NodeCameraDistance(), (ncd1, ncd2) -> NodeCameraDistance.getClosestNode(ncd1, ncd2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9927fd8feb47d53204dca097487d2c835695090d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MzcyMA==", "bodyText": "Updated", "url": "https://github.com/constellation-app/constellation/pull/892#discussion_r522593720", "createdAt": "2020-11-13T03:39:49Z", "author": {"login": "arcturus2"}, "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "diffHunk": "@@ -269,46 +269,22 @@ public Vector3f windowToGraphCoordinates(final Camera camera, final Point point)\n         worldPosition.add(camera.lookAtEye);\n         return worldPosition;\n     }\n-\n+    \n     @Override\n     public Vector3f closestNodeCameraCoordinates(GraphReadMethods graph, Camera camera, Point p) {\n \n         // Calculate the height and width of the viewing frustrum as a function of distance from the camera\n         final float verticalScale = (float) (Math.tan(Math.toRadians(Camera.FIELD_OF_VIEW / 2.0)));\n         final float horizontalScale = verticalScale * getCanvas().getWidth() / getCanvas().getHeight();\n-        float closestDistance = Float.MAX_VALUE;\n-        Vector3f closestNode = null;\n-        boolean foundScreenNode = false;\n \n         // Iterate through the camera locations of each node in the graph\n-        Iterator<Vector3f> nodeLocations = VisualGraphUtilities.streamVertexSceneLocations(graph, camera).iterator();\n-        while (nodeLocations.hasNext()) {\n-\n-            final Vector3f nodeLoaction = nodeLocations.next();\n-            final float zDistanceFromCamera = nodeLoaction.getZ();\n-            final float distanceFromCamera = nodeLoaction.getLength();\n-\n-            // Is the vertex in front of the camera?\n-            if (zDistanceFromCamera < 0) {\n-                final float horizontalOffset = nodeLoaction.getX() / zDistanceFromCamera;\n-                final float verticalOffset = nodeLoaction.getY() / zDistanceFromCamera;\n-\n-                // Is this vertex visible on the screen?\n-                if (horizontalOffset > -horizontalScale && horizontalOffset < horizontalScale && verticalOffset > -verticalScale && verticalOffset < verticalScale) {\n-                    // Is the first or closest node visible on the screen, record it as the closest node\n-                    if (!foundScreenNode || distanceFromCamera < closestDistance) {\n-                        closestNode = nodeLoaction;\n-                        closestDistance = closestNode.getLength();\n-                        foundScreenNode = true;\n-                    }\n-                } else if (!foundScreenNode && distanceFromCamera < closestDistance) {\n-                    // If no vertices on the screen have been found, this vertex is in front of the camera, and is the closest (or first) such vertex, record it as the closest node.\n-                    closestNode = nodeLoaction;\n-                    closestDistance = closestNode.getLength();\n-                }\n-            }\n-        }\n-        return closestNode;\n+        Stream<NodeCameraDistance> nodeCameraDistances = VisualGraphUtilities.streamVertexSceneLocations(graph, camera)\n+                                                .parallel()\n+                                                .map(vector -> new NodeCameraDistance(vector, horizontalScale, verticalScale));\n+                                                \n+        NodeCameraDistance closest = nodeCameraDistances.parallel().reduce(new NodeCameraDistance(), (ncd1, ncd2) -> NodeCameraDistance.getClosestNode(ncd1, ncd2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4OTU1OA=="}, "originalCommit": {"oid": "9927fd8feb47d53204dca097487d2c835695090d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjczODQ0OnYy", "diffSide": "RIGHT", "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0MTo1NVrOHw84uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzozOTo1OFrOHyYl7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MTI1Ng==", "bodyText": "These look like they could be final", "url": "https://github.com/constellation-app/constellation/pull/892#discussion_r521091256", "createdAt": "2020-11-11T03:41:55Z", "author": {"login": "antares1470"}, "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "diffHunk": "@@ -335,4 +311,71 @@ public float getDPIScalingFactor() {\n             return 1.0f;\n         }\n     }\n+    \n+        \n+    private static class NodeCameraDistance{\n+        Vector3f nodeLocation;\n+        Float distanceFromCamera;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9927fd8feb47d53204dca097487d2c835695090d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5Mzc3NQ==", "bodyText": "Updated", "url": "https://github.com/constellation-app/constellation/pull/892#discussion_r522593775", "createdAt": "2020-11-13T03:39:58Z", "author": {"login": "arcturus2"}, "path": "CoreInteractiveGraph/src/au/gov/asd/tac/constellation/graph/interaction/visual/InteractiveGLVisualProcessor.java", "diffHunk": "@@ -335,4 +311,71 @@ public float getDPIScalingFactor() {\n             return 1.0f;\n         }\n     }\n+    \n+        \n+    private static class NodeCameraDistance{\n+        Vector3f nodeLocation;\n+        Float distanceFromCamera;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MTI1Ng=="}, "originalCommit": {"oid": "9927fd8feb47d53204dca097487d2c835695090d"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2140, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}