{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDMwMTAw", "number": 879, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0ODozMVrOEzA8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNTozN1rOEzBQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI4Mjc1OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0ODozMVrOHp-x3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0ODozMVrOHp-x3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MjIzNg==", "bodyText": "add an interrupt to the catch block (Thread.currentThread().interrupt())", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513782236", "createdAt": "2020-10-28T21:48:31Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "diffHunk": "@@ -159,7 +160,11 @@ VisualChangeProcessor getChangeProcessor(VisualProperty property) {\n                     addTask(iconBatcher.disposeBatch());\n                     addTask(iconBatcher.createBatch(access));\n                     addTask(nodeLabelBatcher.disposeBatch());\n-                    addTask(nodeLabelBatcher.createBatch(access));\n+                    try {\n+                        addTask(nodeLabelBatcher.createBatch(access));\n+                    } catch (InterruptedException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI4MzM0OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0ODo0MlrOHp-yNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0ODo0MlrOHp-yNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MjMyNg==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513782326", "createdAt": "2020-10-28T21:48:42Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "diffHunk": "@@ -179,7 +184,11 @@ VisualChangeProcessor getChangeProcessor(VisualProperty property) {\n                     addTask(loopBatcher.disposeBatch());\n                     addTask(loopBatcher.createBatch(access));\n                     addTask(connectionLabelBatcher.disposeBatch());\n-                    addTask(connectionLabelBatcher.createBatch(access));\n+                    try {\n+                        addTask(connectionLabelBatcher.createBatch(access));\n+                    } catch (InterruptedException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI4Nzk3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1MDowMFrOHp-0yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1MDowMFrOHp-0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4Mjk4Nw==", "bodyText": "Same here. I won't mark every place this should be done since there are a few more to go but if you could add that to all of those instances that would be good", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513782987", "createdAt": "2020-10-28T21:50:00Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/GraphRenderable.java", "diffHunk": "@@ -220,8 +229,12 @@ VisualChangeProcessor getChangeProcessor(VisualProperty property) {\n                 return (change, access) -> {\n                     addTask(nodeLabelBatcher.setBottomLabelColors(access));\n                     addTask(nodeLabelBatcher.setBottomLabelSizes(access));\n-                    // Note that updating bottom labels always rebuilds from scratch, so it is not an issue if the batch was not 'ready'.\n-                    addTask(nodeLabelBatcher.updateBottomLabels(access));\n+                    try {\n+                        // Note that updating bottom labels always rebuilds from scratch, so it is not an issue if the batch was not 'ready'.\n+                        addTask(nodeLabelBatcher.updateBottomLabels(access));\n+                    } catch (InterruptedException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI5NTU0OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1MjoyMFrOHp-5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1MjoyMFrOHp-5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NDE4MA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513784180", "createdAt": "2020-10-28T21:52:20Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI5NzExOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1Mjo1NFrOHp-6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1Mjo1NFrOHp-6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NDQzMw==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513784433", "createdAt": "2020-10-28T21:52:54Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n+        \n         return gl -> {\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        attributeLabelFloats.clear();\n-        attributeLabelInts.clear();\n-        fillLabels(access);\n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMwMjQ3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NDo0MFrOHp-9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NDo0MFrOHp-9vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTI3OA==", "bodyText": "Either make final and rename to numCores to follow naming convention, or make this a static final constant (leaving the name as is). Whichever you think makes more sense", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513785278", "createdAt": "2020-10-28T21:54:40Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n+        \n         return gl -> {\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        attributeLabelFloats.clear();\n-        attributeLabelInts.clear();\n-        fillLabels(access);\n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n         return gl -> {\n-            attributeLabelBatch.dispose(gl);\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.dispose(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.dispose(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    private void fillLabels(final VisualAccess access) {\n+    private void fillLabels(final VisualAccess access, ConnectionGlyphStream glyphStream) throws InterruptedException {\n+        int NUM_CORES = Runtime.getRuntime().availableProcessors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMwNDIxOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NToxN1rOHp--6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NToxN1rOHp--6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTU3Ng==", "bodyText": "both of these can be final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513785576", "createdAt": "2020-10-28T21:55:17Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n+        \n         return gl -> {\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        attributeLabelFloats.clear();\n-        attributeLabelInts.clear();\n-        fillLabels(access);\n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n         return gl -> {\n-            attributeLabelBatch.dispose(gl);\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.dispose(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.dispose(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    private void fillLabels(final VisualAccess access) {\n+    private void fillLabels(final VisualAccess access, ConnectionGlyphStream glyphStream) throws InterruptedException {\n+        int NUM_CORES = Runtime.getRuntime().availableProcessors();\n+        ConnectionGlyphStreamContext context = new ConnectionGlyphStreamContext();\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMwNTM2OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NTo0MlrOHp-_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NTo0MlrOHp-_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTc1MA==", "bodyText": "both of these can be final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513785750", "createdAt": "2020-10-28T21:55:42Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n+        \n         return gl -> {\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        attributeLabelFloats.clear();\n-        attributeLabelInts.clear();\n-        fillLabels(access);\n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n         return gl -> {\n-            attributeLabelBatch.dispose(gl);\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.dispose(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.dispose(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    private void fillLabels(final VisualAccess access) {\n+    private void fillLabels(final VisualAccess access, ConnectionGlyphStream glyphStream) throws InterruptedException {\n+        int NUM_CORES = Runtime.getRuntime().availableProcessors();\n+        ConnectionGlyphStreamContext context = new ConnectionGlyphStreamContext();\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);\n         for (int link = 0; link < access.getLinkCount(); link++) {\n             final int connectionCount = access.getLinkConnectionCount(link);\n-            setCurrentConnection(access.getLinkLowVertex(link), access.getLinkHighVertex(link), connectionCount);\n+            setCurrentConnection(access.getLinkLowVertex(link), access.getLinkHighVertex(link), connectionCount, context);\n             for (int pos = 0; pos < connectionCount; pos++) {\n                 final int connection = access.getLinkConnection(link, pos);\n-                nextParallelConnection((int) (LabelUtilities.NRADIUS_TO_LINE_WIDTH_UNITS * Math.min(LabelUtilities.MAX_TRANSACTION_WIDTH, access.getConnectionWidth(connection))));\n-                currentFloats = access.getIsLabelSummary(connection) ? summaryLabelFloats : attributeLabelFloats;\n-                currentInts = access.getIsLabelSummary(connection) ? summaryLabelInts : attributeLabelInts;\n-                currentLabelInfo = access.getIsLabelSummary(connection) ? summaryLabelInfo : attributeLabelInfoReference;\n-                bufferLabel(connection, access);\n+                nextParallelConnection((int) (LabelUtilities.NRADIUS_TO_LINE_WIDTH_UNITS * Math.min(LabelUtilities.MAX_TRANSACTION_WIDTH, access.getConnectionWidth(connection))), context);\n+                Matrix44f currentLabelInfo = access.getIsLabelSummary(connection) ? summaryLabelInfo : attributeLabelInfoReference;\n+                Thread bufferThread = new BufferLabel(connection, access, glyphStream, currentLabelInfo, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMwOTMwOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NzowNVrOHp_B5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NzowNVrOHp_B5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NjM0MA==", "bodyText": "I know you didn't add this but if you could make this final that would be great", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513786340", "createdAt": "2020-10-28T21:57:05Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/ConnectionLabelBatcher.java", "diffHunk": "@@ -180,73 +143,64 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-\n-        attributeLabelFloats = new FloatArray();\n-        attributeLabelInts = new IntArray();\n-        summaryLabelFloats = new FloatArray();\n-        summaryLabelInts = new IntArray();\n-        fillLabels(access);\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n \n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n+        \n         return gl -> {\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        attributeLabelFloats.clear();\n-        attributeLabelInts.clear();\n-        fillLabels(access);\n+        ConnectionGlyphStream glyphStream = new ConnectionGlyphStream();\n+        fillLabels(access, glyphStream);\n         return gl -> {\n-            attributeLabelBatch.dispose(gl);\n-            attributeLabelBatch.initialise(attributeLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            attributeLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(attributeLabelInts.rawArray()));\n-            attributeLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(attributeLabelFloats.rawArray()));\n-            attributeLabelBatch.finalise(gl);\n-            summaryLabelBatch.dispose(gl);\n-            summaryLabelBatch.initialise(summaryLabelFloats.size() / FLOAT_BUFFER_WIDTH);\n-            summaryLabelBatch.buffer(gl, intsTarget, IntBuffer.wrap(summaryLabelInts.rawArray()));\n-            summaryLabelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(summaryLabelFloats.rawArray()));\n-            summaryLabelBatch.finalise(gl);\n+            labelBatch.dispose(gl);\n+            labelBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFER_WIDTH);\n+            labelBatch.buffer(gl, intsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n+            labelBatch.buffer(gl, floatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            labelBatch.finalise(gl);\n         };\n     }\n \n-    private void fillLabels(final VisualAccess access) {\n+    private void fillLabels(final VisualAccess access, ConnectionGlyphStream glyphStream) throws InterruptedException {\n+        int NUM_CORES = Runtime.getRuntime().availableProcessors();\n+        ConnectionGlyphStreamContext context = new ConnectionGlyphStreamContext();\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);\n         for (int link = 0; link < access.getLinkCount(); link++) {\n             final int connectionCount = access.getLinkConnectionCount(link);\n-            setCurrentConnection(access.getLinkLowVertex(link), access.getLinkHighVertex(link), connectionCount);\n+            setCurrentConnection(access.getLinkLowVertex(link), access.getLinkHighVertex(link), connectionCount, context);\n             for (int pos = 0; pos < connectionCount; pos++) {\n                 final int connection = access.getLinkConnection(link, pos);\n-                nextParallelConnection((int) (LabelUtilities.NRADIUS_TO_LINE_WIDTH_UNITS * Math.min(LabelUtilities.MAX_TRANSACTION_WIDTH, access.getConnectionWidth(connection))));\n-                currentFloats = access.getIsLabelSummary(connection) ? summaryLabelFloats : attributeLabelFloats;\n-                currentInts = access.getIsLabelSummary(connection) ? summaryLabelInts : attributeLabelInts;\n-                currentLabelInfo = access.getIsLabelSummary(connection) ? summaryLabelInfo : attributeLabelInfoReference;\n-                bufferLabel(connection, access);\n+                nextParallelConnection((int) (LabelUtilities.NRADIUS_TO_LINE_WIDTH_UNITS * Math.min(LabelUtilities.MAX_TRANSACTION_WIDTH, access.getConnectionWidth(connection))), context);\n+                Matrix44f currentLabelInfo = access.getIsLabelSummary(connection) ? summaryLabelInfo : attributeLabelInfoReference;\n+                Thread bufferThread = new BufferLabel(connection, access, glyphStream, currentLabelInfo, context);\n+                pool.submit(bufferThread);\n             }\n+\n         }\n-        attributeLabelFloats.trimToSize();\n-        attributeLabelInts.trimToSize();\n-        summaryLabelFloats.trimToSize();\n-        summaryLabelInts.trimToSize();\n+        pool.shutdown();\n+        pool.awaitTermination(10, TimeUnit.MINUTES);\n+            \n+        glyphStream.trimToSize();\n     }\n \n-    private void bufferLabel(final int pos, final VisualAccess access) {\n+    private void bufferLabel(final int pos, final VisualAccess access, final ConnectionGlyphStream glyphStream, Matrix44f currentLabelInfo, final ConnectionGlyphStreamContext context) {\n         int totalScale = 0;\n-        final float visibility = access.getConnectionVisibility(pos);\n+        context.visibility = access.getConnectionVisibility(pos);\n         for (int label = 0; label < access.getConnectionLabelCount(pos); label++) {\n+            context.labelNumber = label;\n             final String text = access.getConnectionLabelText(pos, label);\n             ArrayList<String> lines = LabelUtilities.splitTextIntoLines(text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyMjg5OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMTo0MVrOHp_J8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMTo0MVrOHp_J8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODQwMQ==", "bodyText": "This and the thread above can be final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788401", "createdAt": "2020-10-28T22:01:41Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyMzU4OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMTo1NVrOHp_KVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMTo1NVrOHp_KVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODUwMA==", "bodyText": "both final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788500", "createdAt": "2020-10-28T22:01:55Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);\n+        bottomLabelThread.start();\n+                    \n+        topLabelThread.join();\n+        bottomLabelThread.join();\n         \n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n-\n         return gl -> {\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(topGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topGlyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topGlyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(bottomGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomGlyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomGlyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread topLabelThread = new FillTopLabels(access, glyphStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyNDI3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjowOFrOHp_KvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjowOFrOHp_KvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODYwNA==", "bodyText": "both final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788604", "createdAt": "2020-10-28T22:02:08Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);\n+        bottomLabelThread.start();\n+                    \n+        topLabelThread.join();\n+        bottomLabelThread.join();\n         \n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n-\n         return gl -> {\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(topGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topGlyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topGlyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(bottomGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomGlyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomGlyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread topLabelThread = new FillTopLabels(access, glyphStream);\n+        topLabelThread.start();\n+\n+        topLabelThread.join();\n+\n         return gl -> {\n             topBatch.dispose(gl);\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread bottomLabelThread = new FillBottomLabels(access, glyphStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyNDc2OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjoyMVrOHp_LEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjoyMVrOHp_LEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODY5MA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788690", "createdAt": "2020-10-28T22:02:21Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);\n+        bottomLabelThread.start();\n+                    \n+        topLabelThread.join();\n+        bottomLabelThread.join();\n         \n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n-\n         return gl -> {\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(topGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topGlyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topGlyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(bottomGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomGlyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomGlyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread topLabelThread = new FillTopLabels(access, glyphStream);\n+        topLabelThread.start();\n+\n+        topLabelThread.join();\n+\n         return gl -> {\n             topBatch.dispose(gl);\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread bottomLabelThread = new FillBottomLabels(access, glyphStream);\n+        bottomLabelThread.start();\n+\n+        bottomLabelThread.join();\n+\n         return gl -> {\n             bottomBatch.dispose(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n     \n-    private void fillTopLabels(final VisualAccess access, final FloatArray topLabelFloats, final IntArray topLabelInts) {\n-        currentFloats = topLabelFloats;\n-        currentInts = topLabelInts;\n+    private void fillTopLabels(final VisualAccess access, NodeGlyphStream glyphStream) throws InterruptedException {\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyNTAyOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjoyOVrOHp_LQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjoyOVrOHp_LQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODczNw==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788737", "createdAt": "2020-10-28T22:02:29Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);\n+        bottomLabelThread.start();\n+                    \n+        topLabelThread.join();\n+        bottomLabelThread.join();\n         \n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n-\n         return gl -> {\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(topGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topGlyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topGlyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(bottomGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomGlyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomGlyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread topLabelThread = new FillTopLabels(access, glyphStream);\n+        topLabelThread.start();\n+\n+        topLabelThread.join();\n+\n         return gl -> {\n             topBatch.dispose(gl);\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread bottomLabelThread = new FillBottomLabels(access, glyphStream);\n+        bottomLabelThread.start();\n+\n+        bottomLabelThread.join();\n+\n         return gl -> {\n             bottomBatch.dispose(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n     \n-    private void fillTopLabels(final VisualAccess access, final FloatArray topLabelFloats, final IntArray topLabelInts) {\n-        currentFloats = topLabelFloats;\n-        currentInts = topLabelInts;\n+    private void fillTopLabels(final VisualAccess access, NodeGlyphStream glyphStream) throws InterruptedException {\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);  \n         for (int pos = 0; pos < access.getVertexCount(); pos++) {\n-            bufferTopLabel(pos, access);\n+            Thread thread = new BufferTopLabel(pos, access, glyphStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyNTgxOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjo0OVrOHp_Lvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMjo0OVrOHp_Lvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODg2Mw==", "bodyText": "this and pool can be final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513788863", "createdAt": "2020-10-28T22:02:49Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -145,99 +124,114 @@ public void createShader(GL3 gl) throws IOException {\n     }\n \n     @Override\n-    public GLRenderableUpdateTask createBatch(final VisualAccess access) {\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n+    public GLRenderableUpdateTask createBatch(final VisualAccess access) throws InterruptedException {\n+        final NodeGlyphStream topGlyphStream = new NodeGlyphStream();\n+        final NodeGlyphStream bottomGlyphStream = new NodeGlyphStream();\n+        \n+        Thread topLabelThread = new FillTopLabels(access, topGlyphStream);\n+        topLabelThread.start();\n+        \n+        Thread bottomLabelThread = new FillBottomLabels(access, bottomGlyphStream);\n+        bottomLabelThread.start();\n+                    \n+        topLabelThread.join();\n+        bottomLabelThread.join();\n         \n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n-\n         return gl -> {\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(topGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topGlyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topGlyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(bottomGlyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomGlyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomGlyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateTopLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray topLabelFloats = new FloatArray();\n-        final IntArray topLabelInts = new IntArray();\n-        fillTopLabels(access, topLabelFloats, topLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread topLabelThread = new FillTopLabels(access, glyphStream);\n+        topLabelThread.start();\n+\n+        topLabelThread.join();\n+\n         return gl -> {\n             topBatch.dispose(gl);\n-            topBatch.initialise(topLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(topLabelFloats.rawArray()));\n-            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(topLabelInts.rawArray()));\n+            topBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            topBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            topBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             topBatch.finalise(gl);\n         };\n     }\n \n-    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) {\n+    public GLRenderableUpdateTask updateBottomLabels(final VisualAccess access) throws InterruptedException {\n         // We build the whole batch again - can't update labels in place at this stage.\n-        final FloatArray bottomLabelFloats = new FloatArray();\n-        final IntArray bottomLabelInts = new IntArray();\n-        fillBottomLabels(access, bottomLabelFloats, bottomLabelInts);\n+        NodeGlyphStream glyphStream = new NodeGlyphStream();\n+        Thread bottomLabelThread = new FillBottomLabels(access, glyphStream);\n+        bottomLabelThread.start();\n+\n+        bottomLabelThread.join();\n+\n         return gl -> {\n             bottomBatch.dispose(gl);\n-            bottomBatch.initialise(bottomLabelFloats.size() / FLOAT_BUFFERS_WIDTH);\n-            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(bottomLabelFloats.rawArray()));\n-            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(bottomLabelInts.rawArray()));\n+            bottomBatch.initialise(glyphStream.getCurrentFloats().size() / FLOAT_BUFFERS_WIDTH);\n+            bottomBatch.buffer(gl, labelFloatsTarget, FloatBuffer.wrap(glyphStream.getCurrentFloats().rawArray()));\n+            bottomBatch.buffer(gl, labelIntsTarget, IntBuffer.wrap(glyphStream.getCurrentInts().rawArray()));\n             bottomBatch.finalise(gl);\n         };\n     }\n     \n-    private void fillTopLabels(final VisualAccess access, final FloatArray topLabelFloats, final IntArray topLabelInts) {\n-        currentFloats = topLabelFloats;\n-        currentInts = topLabelInts;\n+    private void fillTopLabels(final VisualAccess access, NodeGlyphStream glyphStream) throws InterruptedException {\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);  \n         for (int pos = 0; pos < access.getVertexCount(); pos++) {\n-            bufferTopLabel(pos, access);\n+            Thread thread = new BufferTopLabel(pos, access, glyphStream);\n+            pool.submit(thread);\n         }\n-        topLabelFloats.trimToSize();\n-        topLabelInts.trimToSize();\n+        pool.shutdown();\n+\n+        pool.awaitTermination(10, TimeUnit.MINUTES);\n+\n+        glyphStream.trimToSize();\n     }\n \n-    private void fillBottomLabels(final VisualAccess access, final FloatArray bottomLabelFloats, final IntArray bottomLabelInts) {\n-        currentFloats = bottomLabelFloats;\n-        currentInts = bottomLabelInts;\n+    private void fillBottomLabels(final VisualAccess access, NodeGlyphStream glyphStream) throws InterruptedException {\n+        ExecutorService pool = Executors.newFixedThreadPool(NUM_CORES);  \n+        \n         for (int pos = 0; pos < access.getVertexCount(); pos++) {\n-            bufferBottomLabel(pos, access);\n+            Thread thread = new BufferBottomLabel(pos, access, glyphStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyNzYyOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzozNlrOHp_M7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzozNlrOHp_M7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTE2Nw==", "bodyText": "swap the modifiers around on both of these to be private final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789167", "createdAt": "2020-10-28T22:03:36Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -340,4 +334,75 @@ public void drawBatch(final GL3 gl, final Camera camera, final Matrix44f mvMatri\n             }\n         }\n     }\n-}\n+\n+    \n+    class FillTopLabels extends Thread {\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyODE0OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzo0N1rOHp_NNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzo0N1rOHp_NNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTIzOA==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789238", "createdAt": "2020-10-28T22:03:47Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -340,4 +334,75 @@ public void drawBatch(final GL3 gl, final Camera camera, final Matrix44f mvMatri\n             }\n         }\n     }\n-}\n+\n+    \n+    class FillTopLabels extends Thread {\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;\n+        \n+        FillTopLabels(final VisualAccess access, final NodeGlyphStream glyphStream) {\n+            this.access = access;\n+            this.glyphStream = glyphStream;\n+        }\n+   \n+        public void run() {\n+            try {\n+                fillTopLabels(access, glyphStream);\n+            } catch (InterruptedException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+    }   \n+    \n+    class FillBottomLabels extends Thread {\n+            final private VisualAccess access;\n+            final private NodeGlyphStream glyphStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyODY3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzo1N1rOHp_Ngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzo1N1rOHp_Ngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTMxNQ==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789315", "createdAt": "2020-10-28T22:03:57Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -340,4 +334,75 @@ public void drawBatch(final GL3 gl, final Camera camera, final Matrix44f mvMatri\n             }\n         }\n     }\n-}\n+\n+    \n+    class FillTopLabels extends Thread {\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;\n+        \n+        FillTopLabels(final VisualAccess access, final NodeGlyphStream glyphStream) {\n+            this.access = access;\n+            this.glyphStream = glyphStream;\n+        }\n+   \n+        public void run() {\n+            try {\n+                fillTopLabels(access, glyphStream);\n+            } catch (InterruptedException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+    }   \n+    \n+    class FillBottomLabels extends Thread {\n+            final private VisualAccess access;\n+            final private NodeGlyphStream glyphStream;\n+\n+            FillBottomLabels(final VisualAccess access, final NodeGlyphStream glyphStream) {\n+                this.access = access;\n+                this.glyphStream = glyphStream;\n+            }\n+\n+            public void run() {\n+                try {\n+                    fillBottomLabels(access, glyphStream);\n+                } catch (InterruptedException ex) {\n+                    Exceptions.printStackTrace(ex);\n+                }\n+            }\n+    }\n+    \n+    class BufferBottomLabel extends Thread {\n+        final private int pos;\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyODk3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDowNVrOHp_Nrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDowNVrOHp_Nrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTM1OA==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789358", "createdAt": "2020-10-28T22:04:05Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/renderer/batcher/NodeLabelBatcher.java", "diffHunk": "@@ -340,4 +334,75 @@ public void drawBatch(final GL3 gl, final Camera camera, final Matrix44f mvMatri\n             }\n         }\n     }\n-}\n+\n+    \n+    class FillTopLabels extends Thread {\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;\n+        \n+        FillTopLabels(final VisualAccess access, final NodeGlyphStream glyphStream) {\n+            this.access = access;\n+            this.glyphStream = glyphStream;\n+        }\n+   \n+        public void run() {\n+            try {\n+                fillTopLabels(access, glyphStream);\n+            } catch (InterruptedException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        }\n+    }   \n+    \n+    class FillBottomLabels extends Thread {\n+            final private VisualAccess access;\n+            final private NodeGlyphStream glyphStream;\n+\n+            FillBottomLabels(final VisualAccess access, final NodeGlyphStream glyphStream) {\n+                this.access = access;\n+                this.glyphStream = glyphStream;\n+            }\n+\n+            public void run() {\n+                try {\n+                    fillBottomLabels(access, glyphStream);\n+                } catch (InterruptedException ex) {\n+                    Exceptions.printStackTrace(ex);\n+                }\n+            }\n+    }\n+    \n+    class BufferBottomLabel extends Thread {\n+        final private int pos;\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;\n+        \n+        BufferBottomLabel(final int pos, final VisualAccess access, final NodeGlyphStream glyphStream){\n+            this.pos = pos;\n+            this.access = access;\n+            this.glyphStream = glyphStream;\n+        }\n+        \n+        public void run() {\n+            bufferBottomLabel(pos, access, glyphStream);\n+        }\n+        \n+    }\n+\n+    class BufferTopLabel extends Thread {\n+        final private int pos;\n+        final private VisualAccess access;\n+        final private NodeGlyphStream glyphStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMyOTk3OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/ConnectionGlyphStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDoyMlrOHp_OOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDoyMlrOHp_OOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTQ5Ng==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789496", "createdAt": "2020-10-28T22:04:22Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/ConnectionGlyphStream.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs;\n+\n+import au.gov.asd.tac.constellation.utilities.graphics.FloatArray;\n+import au.gov.asd.tac.constellation.utilities.graphics.IntArray;\n+import au.gov.asd.tac.constellation.visual.opengl.renderer.batcher.ConnectionLabelBatcher;\n+import static au.gov.asd.tac.constellation.visual.opengl.renderer.batcher.ConnectionLabelBatcher.MAX_STAGGERS;\n+import au.gov.asd.tac.constellation.visual.opengl.utilities.SharedDrawable;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+public class ConnectionGlyphStream implements GlyphManager.GlyphStream {\n+    \n+    private final FloatArray currentFloats;\n+    private final IntArray currentInts;\n+    private float currentWidth;\n+    private Object addLock = new Object();\n+\n+    public ConnectionGlyphStream() {\n+        this.currentFloats = new FloatArray();\n+        this.currentInts = new IntArray();\n+    }\n+    \n+    \n+    @Override\n+    public void addGlyph(int glyphPosition, float x, float y, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof ConnectionGlyphStreamContext) {\n+            ConnectionGlyphStreamContext context = (ConnectionGlyphStreamContext) streamContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMzMDM4OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/ConnectionGlyphStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDozMVrOHp_OeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNDozMVrOHp_OeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTU2MA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789560", "createdAt": "2020-10-28T22:04:31Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/ConnectionGlyphStream.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs;\n+\n+import au.gov.asd.tac.constellation.utilities.graphics.FloatArray;\n+import au.gov.asd.tac.constellation.utilities.graphics.IntArray;\n+import au.gov.asd.tac.constellation.visual.opengl.renderer.batcher.ConnectionLabelBatcher;\n+import static au.gov.asd.tac.constellation.visual.opengl.renderer.batcher.ConnectionLabelBatcher.MAX_STAGGERS;\n+import au.gov.asd.tac.constellation.visual.opengl.utilities.SharedDrawable;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+public class ConnectionGlyphStream implements GlyphManager.GlyphStream {\n+    \n+    private final FloatArray currentFloats;\n+    private final IntArray currentInts;\n+    private float currentWidth;\n+    private Object addLock = new Object();\n+\n+    public ConnectionGlyphStream() {\n+        this.currentFloats = new FloatArray();\n+        this.currentInts = new IntArray();\n+    }\n+    \n+    \n+    @Override\n+    public void addGlyph(int glyphPosition, float x, float y, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof ConnectionGlyphStreamContext) {\n+            ConnectionGlyphStreamContext context = (ConnectionGlyphStreamContext) streamContext;\n+            synchronized(addLock) {\n+                currentFloats.add(currentWidth, x, y, context.visibility);\n+                currentInts.add(context.currentLowNodeId, context.currentHighNodeId, (context.currentOffset << 16) + (context.totalScale << 2) + context.labelNumber, (glyphPosition << 8) + context.currentStagger * 256 / (Math.min(context.currentLinkLabelCount, ConnectionLabelBatcher.MAX_STAGGERS) + 1));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void newLine(float width, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof ConnectionGlyphStreamContext) {\n+            ConnectionGlyphStreamContext context = (ConnectionGlyphStreamContext) streamContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMzMzM5OnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/NodeGlyphStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNToyOVrOHp_QLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNToyOVrOHp_QLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTk5Ng==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513789996", "createdAt": "2020-10-28T22:05:29Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/NodeGlyphStream.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs;\n+\n+import au.gov.asd.tac.constellation.utilities.graphics.FloatArray;\n+import au.gov.asd.tac.constellation.utilities.graphics.IntArray;\n+import au.gov.asd.tac.constellation.visual.opengl.utilities.SharedDrawable;\n+\n+/**\n+ * Glyph stream used when buffering Node Labels.\n+ * \n+ * @author Nova\n+ */\n+public class NodeGlyphStream implements GlyphManager.GlyphStream {\n+\n+    private final FloatArray currentFloats;\n+    private final IntArray currentInts;\n+    private final Object addLock = new Object();\n+\n+    public NodeGlyphStream() {\n+        this.currentFloats = new FloatArray();\n+        this.currentInts = new IntArray();\n+    }\n+    \n+    \n+    @Override\n+    public void addGlyph(final int glyphPosition, final float x, final float y, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof NodeGlyphStreamContext){\n+            NodeGlyphStreamContext context = (NodeGlyphStreamContext) streamContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTMzMzkwOnYy", "diffSide": "RIGHT", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/NodeGlyphStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNTozN1rOHp_QeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowNTozN1rOHp_QeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5MDA3Mg==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/879#discussion_r513790072", "createdAt": "2020-10-28T22:05:37Z", "author": {"login": "antares1470"}, "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/glyphs/NodeGlyphStream.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.visual.opengl.utilities.glyphs;\n+\n+import au.gov.asd.tac.constellation.utilities.graphics.FloatArray;\n+import au.gov.asd.tac.constellation.utilities.graphics.IntArray;\n+import au.gov.asd.tac.constellation.visual.opengl.utilities.SharedDrawable;\n+\n+/**\n+ * Glyph stream used when buffering Node Labels.\n+ * \n+ * @author Nova\n+ */\n+public class NodeGlyphStream implements GlyphManager.GlyphStream {\n+\n+    private final FloatArray currentFloats;\n+    private final IntArray currentInts;\n+    private final Object addLock = new Object();\n+\n+    public NodeGlyphStream() {\n+        this.currentFloats = new FloatArray();\n+        this.currentInts = new IntArray();\n+    }\n+    \n+    \n+    @Override\n+    public void addGlyph(final int glyphPosition, final float x, final float y, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof NodeGlyphStreamContext){\n+            NodeGlyphStreamContext context = (NodeGlyphStreamContext) streamContext;\n+            synchronized(addLock) {\n+                currentFloats.add(glyphPosition, x, y, context.visibility);\n+                currentInts.add(context.currentNodeID, context.totalScale, context.labelNumber, 0);\n+            }\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Provided context lacks Node information, please use a NodeGlyphStreamContext\");\n+        }\n+    }\n+\n+    @Override\n+    public void newLine(float width, final GlyphStreamContext streamContext) {\n+        if (streamContext instanceof NodeGlyphStreamContext) {\n+            NodeGlyphStreamContext context = (NodeGlyphStreamContext) streamContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd755f4485894f27970c8460446835fd357c9436"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}