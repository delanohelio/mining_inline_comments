{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzI1OTQy", "number": 314, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzozNDoxMFrODpvgQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjowMToyNlrODqMYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDk2NTEyOnYy", "diffSide": "RIGHT", "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/flow/Network.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzozNDoxMFrOF5G4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzozNDoxMFrOF5G4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNTg0NQ==", "bodyText": "For some reason I thought you couldn't throw Exceptions from Lambdas...must be dreaming", "url": "https://github.com/constellation-app/constellation/pull/314#discussion_r395425845", "createdAt": "2020-03-20T03:34:10Z", "author": {"login": "arcturus2"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/flow/Network.java", "diffHunk": "@@ -58,18 +57,15 @@ public Network(final Config config, final GraphReadMethods rg) {\n         Arrays.fill(nodeWeights, 1);\n         sumNodeWeights = rg.getVertexCount();\n \n-        graphConnections = new Iterable<Connection>() {\n-            @Override\n-            public Iterator<Connection> iterator() {\n-                if (config.connectionType == ConnectionType.LINKS) {\n-                    return new LinkIterator(rg);\n-                } else if (config.connectionType == ConnectionType.EDGES) {\n-                    return new EdgeIterator(rg);\n-                } else if (config.connectionType == ConnectionType.TRANSACTIONS) {\n-                    return new TransactionIterator(rg);\n-                } else {\n-                    throw new IllegalStateException(String.format(\"Unexpected connection type %s\", config.connectionType));\n-                }\n+        graphConnections = () -> {\n+            if (config.connectionType == ConnectionType.LINKS) {\n+                return new LinkIterator(rg);\n+            } else if (config.connectionType == ConnectionType.EDGES) {\n+                return new EdgeIterator(rg);\n+            } else if (config.connectionType == ConnectionType.TRANSACTIONS) {\n+                return new TransactionIterator(rg);\n+            } else {\n+                throw new IllegalStateException(String.format(\"Unexpected connection type %s\", config.connectionType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d9497a2b5ac560de7674f3f6c55cbfdaf64cb2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTY5NzEyOnYy", "diffSide": "RIGHT", "path": "CoreGraphNode/src/au/gov/asd/tac/constellation/graph/node/plugins/DefaultPluginEnvironment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjowMToyNlrOF5y2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMjowMToyNlrOF5y2IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE0NjIwOA==", "bodyText": "I wouldn't suggest doing it now - but this lambda is big enough to be broken up into several functions.", "url": "https://github.com/constellation-app/constellation/pull/314#discussion_r396146208", "createdAt": "2020-03-22T22:01:26Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphNode/src/au/gov/asd/tac/constellation/graph/node/plugins/DefaultPluginEnvironment.java", "diffHunk": "@@ -59,67 +58,52 @@\n     @Override\n     public Future<?> executePluginLater(final Graph graph, final Plugin plugin, final PluginParameters parameters, final boolean interactive, final List<Future<?>> async, final PluginSynchronizer synchronizer) {\n \n-        return pluginExecutor.submit(new Callable<Object>() {\n-            @Override\n-            public Object call() {\n-                Thread.currentThread().setName(THREAD_POOL_NAME);\n-\n-                // If a Future has been specified, don't do anything until the Future has completed.\n-                // A typical use-case is an arrangement followed by a camera reset: obviously doing the reset before the\n-                // vertices have been relocated is not sensible.\n-                if (async != null) {\n-                    for (Future<?> future : async) {\n-                        if (future != null) {\n-                            try {\n-                                future.get();\n-                            } catch (InterruptedException ex) {\n-                                Exceptions.printStackTrace(ex);\n-                                Thread.currentThread().interrupt();\n-                            } catch (ExecutionException ex) {\n-                                Exceptions.printStackTrace(ex);\n-                            }\n+        return pluginExecutor.submit(() -> {\n+            Thread.currentThread().setName(THREAD_POOL_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490f4ee8dc6987b4981d0cab3b3b2d0f9ada2dff"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2401, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}