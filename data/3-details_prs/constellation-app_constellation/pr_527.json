{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTMxODgy", "number": 527, "title": "Add in hashmod experimental plugin.", "bodyText": "Description of the Change\nAdd in the hashmod editor in as an experimental plugin.  Allows the user to specify a Key Column in a CSV file and then modify multiple attributes in the subsequent columns if the key attribute matches a row.\nAlternate Designs\nAn option to have more than one key element would be good to add in (at the moment it's only 1).\nI've also thought about having a chained amount of .csv files (pasted in as a file list) to allow the editor to apply multiple files worth of data at once.\nWhy Should This Be In Core?\nThis is supplying a way for users to self add to their own data with their own data sets. I can't see not wanting to have it available all the time (Geo.Country for example being a key for Geo.Latitude and Geo.Longitude is the most go to example I've come up with so far)\nBenefits\nA new way to set data automatically and controllable via an external CSV.\nPossible Drawbacks\nNil\nVerification Process\nI was able to load Geo.Country data, verify it had no Geo.Latitude / Geo.Longitude and then used it to setup the Geo.Lat/Long and was able to use Scatter3D to then draw a crude map of the Mercator Projection of the earth in 3d.\nApplicable Issues\nNil.", "createdAt": "2020-05-17T15:45:29Z", "url": "https://github.com/constellation-app/constellation/pull/527", "merged": true, "mergeCommit": {"oid": "10f86fb9132cc3199585ffea683ab5725a37bca5"}, "closed": true, "closedAt": "2020-05-18T05:13:58Z", "author": {"login": "CrucisGamma"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciNLj3AH2gAyNDE5MTMxODgyOmUwZmE0NzcwMzk1MGY2MTY1MjZhODgzNWIzODcyNGJjM2Q3NmVkYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciYVIzgFqTQxMzI2NzAwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5", "author": {"user": {"login": "CrucisGamma", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/e0fa47703950f616526a8835b38724bc3d76edc5", "committedDate": "2020-05-17T15:40:54Z", "message": "Fixups from code review for hashmod"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjA0NDkw", "url": "https://github.com/constellation-app/constellation/pull/527#pullrequestreview-413204490", "createdAt": "2020-05-17T22:23:39Z", "commit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoyMzo0MFrOGWj_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoyNjo0M1rOGWkAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTU2OQ==", "bodyText": "Use java.util.logging.Logger instead", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311569", "createdAt": "2020-05-17T22:23:40Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTYzNw==", "bodyText": "replace data.size() > 0 with !data.isEmpty()", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311637", "createdAt": "2020-05-17T22:24:36Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;\n+\n+/**\n+ * A text hashmod based on a supplied CSV file. Will modify attributes specified\n+ * in the headers to be values based on the first Key column.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Hashmod {\n+\n+    public static final String ATTRIBUTE_NAME = \"hashmod\";\n+    private HashmodCSVImportFileParser parser;\n+    private String csvFileStr;\n+    private List<String[]> data;\n+\n+    public Hashmod() {\n+        parser = null;\n+        csvFileStr = \"\";\n+    }\n+\n+    /**\n+     * Create a new Hashmod.\n+     *\n+     * @param csvFile Name of the CSV file the user has chosen\n+     */\n+    public Hashmod(final String csvFileStr) {\n+        if (csvFileStr == null) {\n+            this.csvFileStr = \"\";\n+        } else {\n+            this.csvFileStr = csvFileStr;\n+        }\n+\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public void setCSVFileStr(final String csvFileStr) {\n+        this.csvFileStr = csvFileStr;\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public String[] getCSVFileHeaders() {\n+        if (data != null && data.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTc5MA==", "bodyText": "replace data.size() > 0 with !data.isEmpty()", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311790", "createdAt": "2020-05-17T22:26:03Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;\n+\n+/**\n+ * A text hashmod based on a supplied CSV file. Will modify attributes specified\n+ * in the headers to be values based on the first Key column.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Hashmod {\n+\n+    public static final String ATTRIBUTE_NAME = \"hashmod\";\n+    private HashmodCSVImportFileParser parser;\n+    private String csvFileStr;\n+    private List<String[]> data;\n+\n+    public Hashmod() {\n+        parser = null;\n+        csvFileStr = \"\";\n+    }\n+\n+    /**\n+     * Create a new Hashmod.\n+     *\n+     * @param csvFile Name of the CSV file the user has chosen\n+     */\n+    public Hashmod(final String csvFileStr) {\n+        if (csvFileStr == null) {\n+            this.csvFileStr = \"\";\n+        } else {\n+            this.csvFileStr = csvFileStr;\n+        }\n+\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public void setCSVFileStr(final String csvFileStr) {\n+        this.csvFileStr = csvFileStr;\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public String[] getCSVFileHeaders() {\n+        if (data != null && data.size() > 0) {\n+            return data.get(0);\n+        }\n+        return null;\n+    }\n+\n+    public String[] getCSVRow(final int row) {\n+        if (data != null && data.size() > row) {\n+            return data.get(row);\n+        }\n+        return null;\n+    }\n+\n+    public String getCSVKey() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > 0) {\n+            if (headers.length > 0) {\n+                return headers[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public HashMap<String, Integer> getCSVKeys() {\n+        final HashMap<String, Integer> keys = new HashMap<>();\n+        if (data != null && data.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTgwNg==", "bodyText": "replace data.size() > 0 with !data.isEmpty()", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311806", "createdAt": "2020-05-17T22:26:19Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;\n+\n+/**\n+ * A text hashmod based on a supplied CSV file. Will modify attributes specified\n+ * in the headers to be values based on the first Key column.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Hashmod {\n+\n+    public static final String ATTRIBUTE_NAME = \"hashmod\";\n+    private HashmodCSVImportFileParser parser;\n+    private String csvFileStr;\n+    private List<String[]> data;\n+\n+    public Hashmod() {\n+        parser = null;\n+        csvFileStr = \"\";\n+    }\n+\n+    /**\n+     * Create a new Hashmod.\n+     *\n+     * @param csvFile Name of the CSV file the user has chosen\n+     */\n+    public Hashmod(final String csvFileStr) {\n+        if (csvFileStr == null) {\n+            this.csvFileStr = \"\";\n+        } else {\n+            this.csvFileStr = csvFileStr;\n+        }\n+\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public void setCSVFileStr(final String csvFileStr) {\n+        this.csvFileStr = csvFileStr;\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public String[] getCSVFileHeaders() {\n+        if (data != null && data.size() > 0) {\n+            return data.get(0);\n+        }\n+        return null;\n+    }\n+\n+    public String[] getCSVRow(final int row) {\n+        if (data != null && data.size() > row) {\n+            return data.get(row);\n+        }\n+        return null;\n+    }\n+\n+    public String getCSVKey() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > 0) {\n+            if (headers.length > 0) {\n+                return headers[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public HashMap<String, Integer> getCSVKeys() {\n+        final HashMap<String, Integer> keys = new HashMap<>();\n+        if (data != null && data.size() > 0) {\n+            for (int i = 1; i < data.size(); i++) {\n+                final String[] row = getCSVRow(i);\n+                if (row[0] != null) {\n+                    keys.put(row[0].toUpperCase(), 0);\n+                }\n+            }\n+        }\n+        return keys;\n+    }\n+\n+    public int getNumberCSVColumns() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null) {\n+            return headers.length;\n+        }\n+        return 0;\n+    }\n+\n+    public String getCSVHeader(final int col) {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > col) {\n+            return headers[col];\n+        }\n+        return null;\n+    }\n+\n+    public List<String[]> getCSVFileData() {\n+        if (data != null && data.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTgxOQ==", "bodyText": "replace data.size() > 0 with !data.isEmpty()", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311819", "createdAt": "2020-05-17T22:26:28Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;\n+\n+/**\n+ * A text hashmod based on a supplied CSV file. Will modify attributes specified\n+ * in the headers to be values based on the first Key column.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Hashmod {\n+\n+    public static final String ATTRIBUTE_NAME = \"hashmod\";\n+    private HashmodCSVImportFileParser parser;\n+    private String csvFileStr;\n+    private List<String[]> data;\n+\n+    public Hashmod() {\n+        parser = null;\n+        csvFileStr = \"\";\n+    }\n+\n+    /**\n+     * Create a new Hashmod.\n+     *\n+     * @param csvFile Name of the CSV file the user has chosen\n+     */\n+    public Hashmod(final String csvFileStr) {\n+        if (csvFileStr == null) {\n+            this.csvFileStr = \"\";\n+        } else {\n+            this.csvFileStr = csvFileStr;\n+        }\n+\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public void setCSVFileStr(final String csvFileStr) {\n+        this.csvFileStr = csvFileStr;\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public String[] getCSVFileHeaders() {\n+        if (data != null && data.size() > 0) {\n+            return data.get(0);\n+        }\n+        return null;\n+    }\n+\n+    public String[] getCSVRow(final int row) {\n+        if (data != null && data.size() > row) {\n+            return data.get(row);\n+        }\n+        return null;\n+    }\n+\n+    public String getCSVKey() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > 0) {\n+            if (headers.length > 0) {\n+                return headers[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public HashMap<String, Integer> getCSVKeys() {\n+        final HashMap<String, Integer> keys = new HashMap<>();\n+        if (data != null && data.size() > 0) {\n+            for (int i = 1; i < data.size(); i++) {\n+                final String[] row = getCSVRow(i);\n+                if (row[0] != null) {\n+                    keys.put(row[0].toUpperCase(), 0);\n+                }\n+            }\n+        }\n+        return keys;\n+    }\n+\n+    public int getNumberCSVColumns() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null) {\n+            return headers.length;\n+        }\n+        return 0;\n+    }\n+\n+    public String getCSVHeader(final int col) {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > col) {\n+            return headers[col];\n+        }\n+        return null;\n+    }\n+\n+    public List<String[]> getCSVFileData() {\n+        if (data != null && data.size() > 0) {\n+            return data;\n+        }\n+        return null;\n+    }\n+\n+    public String getValueFromKey(final String key, final int value) {\n+        if (data != null && data.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTgyNg==", "bodyText": "replace data.size() > 0 with !data.isEmpty()", "url": "https://github.com/constellation-app/constellation/pull/527#discussion_r426311826", "createdAt": "2020-05-17T22:26:43Z", "author": {"login": "antares1470"}, "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/hashmod/Hashmod.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.utilities.hashmod;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Level;\n+import static org.geotools.referencing.factory.ReferencingFactory.LOGGER;\n+\n+/**\n+ * A text hashmod based on a supplied CSV file. Will modify attributes specified\n+ * in the headers to be values based on the first Key column.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Hashmod {\n+\n+    public static final String ATTRIBUTE_NAME = \"hashmod\";\n+    private HashmodCSVImportFileParser parser;\n+    private String csvFileStr;\n+    private List<String[]> data;\n+\n+    public Hashmod() {\n+        parser = null;\n+        csvFileStr = \"\";\n+    }\n+\n+    /**\n+     * Create a new Hashmod.\n+     *\n+     * @param csvFile Name of the CSV file the user has chosen\n+     */\n+    public Hashmod(final String csvFileStr) {\n+        if (csvFileStr == null) {\n+            this.csvFileStr = \"\";\n+        } else {\n+            this.csvFileStr = csvFileStr;\n+        }\n+\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public void setCSVFileStr(final String csvFileStr) {\n+        this.csvFileStr = csvFileStr;\n+        parser = new HashmodCSVImportFileParser();\n+        try {\n+            data = parser.parse(new HashmodInputSource(new File(csvFileStr)), null);\n+        } catch (IOException ex) {\n+            LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);\n+        }\n+    }\n+\n+    public String[] getCSVFileHeaders() {\n+        if (data != null && data.size() > 0) {\n+            return data.get(0);\n+        }\n+        return null;\n+    }\n+\n+    public String[] getCSVRow(final int row) {\n+        if (data != null && data.size() > row) {\n+            return data.get(row);\n+        }\n+        return null;\n+    }\n+\n+    public String getCSVKey() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > 0) {\n+            if (headers.length > 0) {\n+                return headers[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public HashMap<String, Integer> getCSVKeys() {\n+        final HashMap<String, Integer> keys = new HashMap<>();\n+        if (data != null && data.size() > 0) {\n+            for (int i = 1; i < data.size(); i++) {\n+                final String[] row = getCSVRow(i);\n+                if (row[0] != null) {\n+                    keys.put(row[0].toUpperCase(), 0);\n+                }\n+            }\n+        }\n+        return keys;\n+    }\n+\n+    public int getNumberCSVColumns() {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null) {\n+            return headers.length;\n+        }\n+        return 0;\n+    }\n+\n+    public String getCSVHeader(final int col) {\n+        final String[] headers = getCSVFileHeaders();\n+        if (headers != null && headers.length > col) {\n+            return headers[col];\n+        }\n+        return null;\n+    }\n+\n+    public List<String[]> getCSVFileData() {\n+        if (data != null && data.size() > 0) {\n+            return data;\n+        }\n+        return null;\n+    }\n+\n+    public String getValueFromKey(final String key, final int value) {\n+        if (data != null && data.size() > 0) {\n+            for (int i = 1; i < data.size(); i++) {\n+                final String[] row = getCSVRow(i);\n+                if (row[0].equalsIgnoreCase(key)) {\n+\n+                    if (row.length > value) {\n+                        return row[value];\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public Boolean doesKeyExist(final String key) {\n+        if (key == null) {\n+            return false;\n+        }\n+        if (data != null && data.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fa47703950f616526a8835b38724bc3d76edc5"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b89606f20b109702c05b17ddc8bc31db05c4cc", "author": {"user": {"login": "CrucisGamma", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/13b89606f20b109702c05b17ddc8bc31db05c4cc", "committedDate": "2020-05-18T04:09:56Z", "message": "Fixups from code review for hashmod"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjY3MDA0", "url": "https://github.com/constellation-app/constellation/pull/527#pullrequestreview-413267004", "createdAt": "2020-05-18T04:40:19Z", "commit": {"oid": "13b89606f20b109702c05b17ddc8bc31db05c4cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3766, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}