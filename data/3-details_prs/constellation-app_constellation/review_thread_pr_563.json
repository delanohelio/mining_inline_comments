{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTMyODA1", "number": 563, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzoxNjozNFrOEC1-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo0MjoyN1rOEELbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDE2OTM2OnYy", "diffSide": "RIGHT", "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "isResolved": true, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzoxNjozNFrOGfjAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1MzoyNFrOGjkBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA==", "bodyText": "For some background, there is a quality score available from the data access view near the Go button. An analyst is meant to do their own checks and also double check the quality score before hitting go. The only risk here is that given the plugin runs \"later\", there is no guarantee that it will finish before the analyst decides to press Go.\nThe only advantage of this stuff running on the EDT (though obviously very bad design) is that there is less chance for this race condition to occur because Constellation would effectively lock up until the quality score was updated.\nI will test this out in anger and if you haven't done so already, I will see if there is a way to show a progress or \"thinking\" graphic to the little quality score section to let the analyst know that its not ready for you to press Go.\nHmm, thinking out aloud, perhaps the Go button could also be disabled whilst these jobs run?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r435732614", "createdAt": "2020-06-05T07:16:34Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzM3Mw==", "bodyText": "I've been thinking of how to disable the Go button depending on if the scores are updating. The only solution I could come up with would be to have a static boolean variable within DAV pane. So when QCV updates the rules, the DAV would know when to change button state. This leads to one issue, I don't know how I would be able to trigger a disable or enable of the button from the static context.\nI'm all ears for ideas, as I don't think my solution will exactly work in practice.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437063373", "createdAt": "2020-06-08T23:56:10Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3OTc0Mw==", "bodyText": "@aldebaran30701 How about having a static method in the DAV that you can call to enable or disable it from the QC code?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437079743", "createdAt": "2020-06-09T00:59:55Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NDQ1Mg==", "bodyText": "That's what I was trying to explain, but I wouldn't think I would have access to the instance of the button to change it's state (enabled or disabled) because of the static context of that method.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437084452", "createdAt": "2020-06-09T01:17:58Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NTUxNw==", "bodyText": "Can you try making the button static?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437085517", "createdAt": "2020-06-09T01:22:09Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NTU2Ng==", "bodyText": "I've been messing around with it but cannot get around a cyclic dependency when trying to use the static method DataAccessPane.setCanRun() - A static method which I made.\nWhen I try to access DataAccessPane from QCV AutoVetter class it makes the cyclic dependency.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437095566", "createdAt": "2020-06-09T02:01:43Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNTQxNg==", "bodyText": "Thanks for trying this out. Yeah circular dependencies is a problem and not too surprised it came up because of how the widget is embedded in the DAV.\nOne way to get around this would be to introduce a mini event driven design pattern so that you can \"fire\" and event that can tell the button to be enabled or disabled. You can fire the event from the QC code and pick it up from the DAV code without the dependency.\nThere are several places where this is being done and for an example see fireChangeEvent() in PluginParameter. Happy for you to have a go with this if you like and if you need any assistance let me know.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437115416", "createdAt": "2020-06-09T03:19:27Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMjc0Ng==", "bodyText": "From memory, the DAV depends on the QCV (as it makes use of that widget) - so you can't also have the QCV depend on the DAV as that would introduce a circular dependency. What you want instead is to treat the QCV widget as a service - so it would update itself and provide information about its state for the DAV (or any other clients) to use as necessary.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437132746", "createdAt": "2020-06-09T04:37:25Z", "author": {"login": "cygnus-x-1"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MDc1MQ==", "bodyText": "So from your comment @cygnus-x-1 would that mean I would change code in QCV to become a service, use the fire change event pattern @arcturus2 described, or are they the same thing?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437140751", "createdAt": "2020-06-09T05:09:51Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0MjQ5Ng==", "bodyText": "I think they're essentially the same - you'd be sending a signal from the QCV that something has happened, and it would be up to the DAV to listen for that and respond.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437242496", "createdAt": "2020-06-09T08:50:40Z", "author": {"login": "cygnus-x-1"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjgwNg==", "bodyText": "I've implemented an observer to fire events and let the button update dependent on the rules running. Let me know if you notice anything. Should I be calling removeListener() at any point?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437856806", "createdAt": "2020-06-10T04:43:46Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MjkyNA==", "bodyText": "Yes @aldebaran30701 for sure and good on you for thinking thoroughly about this part. The count of addListener's should equal the removeListener's or else that is by definition a memory leak.\nI would suggest the removeListener should run when the component is closed. Therefore can you consider moving the addListener() to DataAccessViewTopCoponent().handleComponentOpened() and the remove in the handleComponentClosed(). I think you have access to the DataAccessPane from there so it should be OK to do. Would you agree?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r439342924", "createdAt": "2020-06-12T10:39:59Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0MzI3Mg==", "bodyText": "I've moved the listeners to the specified locations, and fixed the concurrent modification exception.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r439943272", "createdAt": "2020-06-15T05:52:35Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0MzQ4NA==", "bodyText": "Implemented in most recent commit", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r439943484", "createdAt": "2020-06-15T05:53:24Z", "author": {"login": "aldebaran30701"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlAutoVetter.java", "diffHunk": "@@ -142,71 +148,20 @@ public void graphChanged(final GraphChangeEvent event) {\n      *\n      * @param graph The graph to vet for quality control, may be null if there\n      * is no current graph.\n-     * @return the current quality control state on the given graph.\n      */\n-    public static QualityControlState updateQualityControlState(final GraphReadMethods graph) {\n-        final List<QualityControlRule> registeredRules = new ArrayList<>();\n-        final List<Integer> vertexList = new ArrayList<>();\n-        final List<String> identifierList = new ArrayList<>();\n-        final List<SchemaVertexType> typeList = new ArrayList<>();\n-\n-        if (graph != null) {\n-            final CountDownLatch countDownLatch = new CountDownLatch(1);\n-            final Thread thread = new Thread(\"Quality Control View: Run Rule\") {\n-                @Override\n-                public void run() {\n-                    final int selectedAttribute = VisualConcept.VertexAttribute.SELECTED.get(graph);\n-                    final int identifierAttribute = VisualConcept.VertexAttribute.IDENTIFIER.get(graph);\n-                    final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n-                    if (selectedAttribute != Graph.NOT_FOUND && identifierAttribute != Graph.NOT_FOUND && typeAttribute != Graph.NOT_FOUND) {\n-                        final int vxCount = graph.getVertexCount();\n-                        for (int position = 0; position < vxCount; position++) {\n-                            final int vertex = graph.getVertex(position);\n-                            final String identifier = graph.getStringValue(identifierAttribute, vertex);\n-                            final SchemaVertexType type = graph.getObjectValue(typeAttribute, vertex);\n-\n-                            final boolean selected = graph.getBooleanValue(selectedAttribute, vertex);\n-                            if (selected) {\n-                                vertexList.add(vertex);\n-                                identifierList.add(identifier);\n-                                typeList.add(type);\n-                            }\n-                        }\n-                    }\n-\n-                    // Set up and run each rule.\n-                    if (!vertexList.isEmpty()) {\n-                        for (final QualityControlRule rule : getRules()) {\n-                            rule.clearResults();\n-                            rule.executeRule(graph, vertexList);\n-                            registeredRules.add(rule);\n-                        }\n-                    }\n-\n-                    countDownLatch.countDown();\n-                }\n-            };\n-            thread.start();\n-\n-            try {\n-                countDownLatch.await();\n-            } catch (InterruptedException ex) {\n-                Exceptions.printStackTrace(ex);\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-\n-        // Build quality control events based on results of rules.\n-        // Sort by descending risk.\n-        final List<QualityControlEvent> qualityControlEvents = new ArrayList<>();\n-        for (int i = 0; i < vertexList.size(); i++) {\n-            final QualityControlEvent qualityControlEvent = new QualityControlEvent(vertexList.get(i), identifierList.get(i), typeList.get(i), Collections.unmodifiableList(registeredRules));\n-            qualityControlEvents.add(qualityControlEvent);\n+    public static void updateQualityControlState(final GraphReadMethods graph) {\n+        final Graph currentGraph = GraphManager.getDefault().getActiveGraph();\n+        Future<?> stateFuture = PluginExecution.withPlugin(new QualityControlViewStateUpdater(graph))\n+                .executeLater(currentGraph);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjYxNA=="}, "originalCommit": {"oid": "538c0508f34ee5712cdb4e0896d84720d5537f31"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODE1NzQ3OnYy", "diffSide": "RIGHT", "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlButtonListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo0MDoxOFrOGhonuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo0MDoxOFrOGhonuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMTcyMA==", "bodyText": "Should this be called something like QualityControlAutoVetterListener to remain consistent with the thing it's listening to?", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437921720", "createdAt": "2020-06-10T07:40:18Z", "author": {"login": "cygnus-x-1"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/daemon/QualityControlButtonListener.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.qualitycontrol.daemon;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ca1dddc1170ab5883678f962c171bf4b1f3224"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODE2OTYwOnYy", "diffSide": "RIGHT", "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/panes/DataAccessPane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo0MjoyN1rOGhovjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo0MjoyN1rOGhovjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMzcyNw==", "bodyText": "The \"stop\" style is also used when a query is running - i'd probably either create a new \"thinking\" style or just disable the button when canRun = false to avoid any confusion.", "url": "https://github.com/constellation-app/constellation/pull/563#discussion_r437923727", "createdAt": "2020-06-10T07:42:27Z", "author": {"login": "cygnus-x-1"}, "path": "CoreDataAccessView/src/au/gov/asd/tac/constellation/views/dataaccess/panes/DataAccessPane.java", "diffHunk": "@@ -1033,6 +1036,23 @@ private void deselectAllPlugins() {\n         });\n     }\n \n+    @Override\n+    public void qualityControlRuleChanged(final boolean canRun) {\n+        if (canRun) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ca1dddc1170ab5883678f962c171bf4b1f3224"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2168, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}