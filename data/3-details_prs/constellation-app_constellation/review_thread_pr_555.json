{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjQyMjEy", "number": 555, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NToyOFrOEAEvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDo0MlrOECZ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTEzMTM3OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NToyOFrOGbH7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo0Nzo0NVrOGdhHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NDcxOA==", "bodyText": "I wonder if it'd be better to move this into a stylesheet, given that we're looking to implement light/dark themes and the highlight style might need to change with the theme.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431094718", "createdAt": "2020-05-27T12:55:28Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -59,11 +63,14 @@\n     public static final String MIMETYPE = \"application/x-constellation-transactiontype\";\n     public static final DataFormat TRANSACTION_TYPE = new DataFormat(MIMETYPE);\n     private static final int ICON_IMAGE_SIZE = 16;\n+    private static final String HIGHLIGHT_BLUE_STYLE = \"-fx-background-color: rgb(30,144,255); -fx-padding: 2 5 2 5;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4ODk2OQ==", "bodyText": "@cygnus-x-1 Do you mean a new css file or a java class like JavafxStyleManager? I couldn't find a way how that would support light/dark themes. Is it implemented anywhere in the current code?\nOr can I use Style-Timeline-Light.css and Style-Timeline-Dark.css maybe?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433088969", "createdAt": "2020-06-01T07:45:45Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -59,11 +63,14 @@\n     public static final String MIMETYPE = \"application/x-constellation-transactiontype\";\n     public static final DataFormat TRANSACTION_TYPE = new DataFormat(MIMETYPE);\n     private static final int ICON_IMAGE_SIZE = 16;\n+    private static final String HIGHLIGHT_BLUE_STYLE = \"-fx-background-color: rgb(30,144,255); -fx-padding: 2 5 2 5;\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NDcxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MzM2Mw==", "bodyText": "I think what @cygnus-x-1 is referring to is if you could try to put this into the table-view.css file. There is a separate issue I created to create a light and dark theme and the way we can implement that is to decide which css file we load. That can be done at the generic view framework and what I will do as part of that ticket is to create something like table-view-light.css and table-view-dark.css. As a prerequisite for that, getting you to put the styles in the css file will help (i.e rather than having it in the code). Noted that there are still other parts of the application that have Java FX styling in code and they need to be fixed too; if we can have new changes not go in the code that will help.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433573363", "createdAt": "2020-06-02T01:31:51Z", "author": {"login": "arcturus2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -59,11 +63,14 @@\n     public static final String MIMETYPE = \"application/x-constellation-transactiontype\";\n     public static final DataFormat TRANSACTION_TYPE = new DataFormat(MIMETYPE);\n     private static final int ICON_IMAGE_SIZE = 16;\n+    private static final String HIGHLIGHT_BLUE_STYLE = \"-fx-background-color: rgb(30,144,255); -fx-padding: 2 5 2 5;\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NDcxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNDQyMA==", "bodyText": "Added a similar schema-view.css as these are in Schema View module.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433604420", "createdAt": "2020-06-02T03:47:45Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -59,11 +63,14 @@\n     public static final String MIMETYPE = \"application/x-constellation-transactiontype\";\n     public static final DataFormat TRANSACTION_TYPE = new DataFormat(MIMETYPE);\n     private static final int ICON_IMAGE_SIZE = 16;\n+    private static final String HIGHLIGHT_BLUE_STYLE = \"-fx-background-color: rgb(30,144,255); -fx-padding: 2 5 2 5;\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NDcxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTEzNTMyOnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1NjoyN1rOGbH-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTozMjo1MVrOGdfO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NTM3Mg==", "bodyText": "You should try to avoid non-descriptive variable names like this.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431095372", "createdAt": "2020-05-27T12:56:27Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MzYzMA==", "bodyText": "@Auriga2 just wondering if you saw this comment? If you need a hand let me know. so something like toggleGroup would be preferred.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433573630", "createdAt": "2020-06-02T01:32:51Z", "author": {"login": "arcturus2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NTM3Mg=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE0ODI4OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OToxMVrOGbIHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OToxMVrOGbIHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5NzYyMQ==", "bodyText": "why does only this variable have 'Label' in its name?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431097621", "createdAt": "2020-05-27T12:59:11Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();\n+        found = isFilterMatchText(name);\n+        if (!found) {\n+            final String description = treeItem.getDescription();\n+            found = isFilterMatchText(description);\n+        }\n+        if (!found) {\n+            final String color = treeItem.getColor().toString();\n+            found = isFilterMatchText(color);\n+        }\n+        if (!found) {\n+            final String style = treeItem.getStyle().toString();\n+            found = isFilterMatchText(style);\n+        }\n+        if (!found) {\n+            final String directedLabel = treeItem.isDirected().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE1MTQ5OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OTozOFrOGbIJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OTozOFrOGbIJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5ODE5MQ==", "bodyText": "This could be final.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431098191", "createdAt": "2020-05-27T12:59:38Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();\n+        found = isFilterMatchText(name);\n+        if (!found) {\n+            final String description = treeItem.getDescription();\n+            found = isFilterMatchText(description);\n+        }\n+        if (!found) {\n+            final String color = treeItem.getColor().toString();\n+            found = isFilterMatchText(color);\n+        }\n+        if (!found) {\n+            final String style = treeItem.getStyle().toString();\n+            found = isFilterMatchText(style);\n+        }\n+        if (!found) {\n+            final String directedLabel = treeItem.isDirected().toString();\n+            found = isFilterMatchText(directedLabel);\n+        }\n+        if (!found) {\n+            final String hierachy = treeItem.getHierachy();\n+            found = isFilterMatchText(hierachy);\n+        }\n+        if (!found) {\n+            for (String property : treeItem.getProperties().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE1Mzg4OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OTo1OFrOGbIK4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1OTo1OFrOGbIK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5ODU5NA==", "bodyText": "This and the variables below could be final.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431098594", "createdAt": "2020-05-27T12:59:58Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -200,12 +296,20 @@ public void setContent(final Tab tab) {\n                         grid.add(propertyLabel, 1, gridPosition);\n                     }\n                 }\n-\n+                for (Node child : grid.getChildren()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE5NzM3OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjozMlrOGbIpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTo1MjoxMFrOGdfiRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjQxOA==", "bodyText": "This block could be made more compact using something like\nreturn isFilterMatchText(treeItem.getName()) \n    || isFilterMatchText(treeItem.getDescription())\n    ...\n    || treeItem.getProperties.stream().anyMatch(property -> \n        property != null && isFilterMatchText(property.toString())\n    );\n\n...although I do wonder how much readability you'd lose.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r431106418", "createdAt": "2020-05-27T13:06:32Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MzY0OQ==", "bodyText": "I'll add my 2 cents here and say that provided you added each condition on a new line, I think what @cygnus-x-1 has suggested is more readable than a large list of if statements. The numerous amount of if statements will also increase the cognitive complexity higher than I reckon it needs to be", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432263649", "createdAt": "2020-05-29T05:31:08Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjQxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3ODU2Ng==", "bodyText": "@Auriga2 did you see this message?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433578566", "createdAt": "2020-06-02T01:52:10Z", "author": {"login": "arcturus2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;\n+    }\n+\n+    private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n+        boolean found = false;\n+        final String name = treeItem.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjQxOA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMxMjQyOnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToyMTo0MFrOGcPHxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTo1MTozMVrOGdfhqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MTA2Mg==", "bodyText": "This can all be simplified to return isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432261062", "createdAt": "2020-05-29T05:21:40Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4OTI5MQ==", "bodyText": "I just tried to loop the properties only if it doesn't match the type name, to avoid unnecessary processing. May be worthless the effort in this scenario?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432289291", "createdAt": "2020-05-29T06:54:19Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MTA2Mg=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3ODQwOA==", "bodyText": "@Auriga2 so what you had is fine though it could be simplified with @antares1470's suggestion as a 1 line return statement. Are you able to consider making this change?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433578408", "createdAt": "2020-06-02T01:51:31Z", "author": {"login": "arcturus2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -130,15 +143,98 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n \n-            final TreeItem<SchemaTransactionType> root = createNode(null);\n-            treeView.setRoot(root);\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter transaction types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaTransactionType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchAnyProperty(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MTA2Mg=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMzNDI3OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNDozNlrOGcPVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1Mjo1OFrOGcQ0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDQ3NQ==", "bodyText": "Can probably omit .toLowerCase() if you are just checking if it's empty", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264475", "createdAt": "2020-05-29T05:34:36Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4ODc4Ng==", "bodyText": "Ah yes. Fixed it.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432288786", "createdAt": "2020-05-29T06:52:58Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDQ3NQ=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMzNDc5OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNDo1MVrOGcPVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1MzoxM1rOGcQ0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDU1Mg==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264552", "createdAt": "2020-05-29T05:34:51Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(tt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == value && tt != value) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4ODkwMg==", "bodyText": "Fixed.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432288902", "createdAt": "2020-05-29T06:53:13Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -291,16 +395,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == tt) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(tt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaTransactionType tt : transactionTypes) {\n                         if (tt.getSuperType() == value && tt != value) {\n+                            if (isFilterMatchCurrentNode(tt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDU1Mg=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMzNjk2OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNjoxMVrOGcPWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNjoxMVrOGcPWuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NDg4OA==", "bodyText": "Similar to what was mentioned in the other file, this can probably be reduced to one return statement", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432264888", "createdAt": "2020-05-29T05:36:11Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -177,15 +187,122 @@ public void newActiveGraph(final Graph graph) {\n             } else {\n                 schemaLabel.setText(\"No schema available\");\n             }\n+            populateTree();\n+        });\n+    }\n+\n+    private VBox addFilter() {\n+        filterText.setPromptText(\"Filter Node types\");\n+        final ToggleGroup tg = new ToggleGroup();\n+        startsWithRb.setToggleGroup(tg);\n+        startsWithRb.setPadding(new Insets(0, 0, 0, 5));\n+        startsWithRb.setSelected(true);\n+        final RadioButton containsRb = new RadioButton(\"Contains\");\n+        containsRb.setToggleGroup(tg);\n+        containsRb.setPadding(new Insets(0, 0, 0, 5));\n+\n+        tg.selectedToggleProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n+        });\n \n-            final TreeItem<SchemaVertexType> root = createNode(null);\n-            treeView.setRoot(root);\n+        filterText.textProperty().addListener((ov, oldValue, newValue) -> {\n+            populateTree();\n         });\n+\n+        final HBox headerBox = new HBox(new Label(\"Filter: \"), filterText, startsWithRb, containsRb);\n+        headerBox.setAlignment(Pos.CENTER_LEFT);\n+        headerBox.setPadding(new Insets(5));\n+\n+        final VBox box = new VBox(schemaLabel, headerBox, treeView);\n+        VBox.setVgrow(treeView, Priority.ALWAYS);\n+        return box;\n+    }\n+\n+    private void populateTree() {\n+        final TreeItem<SchemaVertexType> root = createNode(null);\n+        treeView.setRoot(root);\n+    }\n+\n+    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        boolean found = isFilterMatchText(treeItem.getName());\n+        if (!found) {\n+            found = isFilterMatchTextAnyProperty(treeItem);\n+        }\n+        if (!found) {\n+            found = isFilterMatchTextAnyChildNodes(treeItem);\n+        }\n+        return found;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMzOTMwOnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNzo0MlrOGcPYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozNzo0MlrOGcPYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTI2Mg==", "bodyText": "This and the above can be made final", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265262", "createdAt": "2020-05-29T05:37:42Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -303,12 +420,20 @@ public void setContent(final Tab tab) {\n                         grid.add(propertyLabel, 1, gridPosition);\n                     }\n                 }\n-\n+                for (Node child : grid.getChildren()) {\n+                    Integer column = GridPane.getColumnIndex(child);\n+                    Integer row = GridPane.getRowIndex(child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM0MDU0OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozODoyMVrOGcPY5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1NToxMVrOGcQ3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ0NA==", "bodyText": "can probably omit toLowerCase() if just doing emptiness check", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265444", "createdAt": "2020-05-29T05:38:21Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4OTY0NQ==", "bodyText": "Yes, fixed.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432289645", "createdAt": "2020-05-29T06:55:11Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ0NA=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM0MDY2OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTozODoyOFrOGcPY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1NToyMVrOGcQ3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ2Nw==", "bodyText": "same here", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432265467", "createdAt": "2020-05-29T05:38:28Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(vt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == value && vt != value) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4OTczMg==", "bodyText": "Yes, fixed.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r432289732", "createdAt": "2020-05-29T06:55:21Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -395,17 +520,20 @@ public boolean isLeaf() {\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == vt) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {\n                             children.add(createNode(vt));\n                         }\n                     }\n+                    }\n                 } else {\n                     for (final SchemaVertexType vt : vertexTypes) {\n                         if (vt.getSuperType() == value && vt != value) {\n+                            if (isFilterMatchTextCurrentNodeOrAnyChildren(vt) || filterText.getText().toLowerCase().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTQ2Nw=="}, "originalCommit": {"oid": "269b6ab157e9ebc9000e2b70434174485123a630"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk3NDM2OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1NjowNVrOGdhOQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjowMjozMVrOGeJndg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ==", "bodyText": "Change this return to !filterText.getText().isEmpty() || isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433606211", "createdAt": "2020-06-02T03:56:05Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MDU0MQ==", "bodyText": "@antares1470 I added original line to avoid further processing when the string is null. Feels like the above will still try to process when it is null? (I yet have to remove the .toLowerCase() from the check)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433670541", "createdAt": "2020-06-02T07:21:28Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyMzQ2Mw==", "bodyText": "@Auriga2 So in this case (and the others I've suggested), Java will lazily evaluate the or boolean conditions (i.e. if the first condition is true it doesn't evaluate the rest of them).\nIf you want to avoid further processing for null, isEmpty() won't actually check that (in fact you'll get null pointer calling a isEmpty() on null). If you want to include a null check, change !filterText.getText().isEmpty() to StringUtils.isNotBlank(filterText.getText()) which will check for both null and empty.\nUltimately, the purpose of my suggestions is to remove the literal boolean false from the statements (which is a sonar code smell)", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434223463", "createdAt": "2020-06-02T23:10:07Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzY2NA==", "bodyText": "Yeah when it (either) is empty, that side is false, so it valuates the other side because of False ||.\nLooks like we should add an && there.\nSorry I meant empty. But checking for both could be better.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434263664", "createdAt": "2020-06-03T01:43:05Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTM1MA==", "bodyText": "My bad, you are correct (I was mixing up my translations). It should be !filterText.getText().isEmpty() && (isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem))\nIf you don't think a null check is necessary, than just using isEmpty() is fine\nI'll edit the other comments accordingly", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434265350", "createdAt": "2020-06-03T01:50:40Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2ODAyMg==", "bodyText": "I think it's safer to use isNotBlank. I edited them all, and will test a bit and push in a while.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434268022", "createdAt": "2020-06-03T02:02:31Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjIxMQ=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk4MjAyOnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowMToyMlrOGdhSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjowNDozMFrOGeJpKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzM0Ng==", "bodyText": "change this return to !filterInputText.isEmpty() && !propertyValue.isEmpty() && (startsWithRb.isSelected() ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607346", "createdAt": "2020-06-02T04:01:22Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);\n     }\n \n     private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String style = treeItem.getStyle().toString();\n-            found = isFilterMatchText(style);\n-        }\n-        if (!found) {\n-            final String directedLabel = treeItem.isDirected().toString();\n-            found = isFilterMatchText(directedLabel);\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(Objects.toString(treeItem.getColor().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getStyle().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.isDirected().toString(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MDgxMg==", "bodyText": "Same issue as above.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433670812", "createdAt": "2020-06-02T07:22:01Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);\n     }\n \n     private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String style = treeItem.getStyle().toString();\n-            found = isFilterMatchText(style);\n-        }\n-        if (!found) {\n-            final String directedLabel = treeItem.isDirected().toString();\n-            found = isFilterMatchText(directedLabel);\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(Objects.toString(treeItem.getColor().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getStyle().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.isDirected().toString(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzM0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNDAyOA==", "bodyText": "see above comment", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434224028", "createdAt": "2020-06-02T23:12:04Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);\n     }\n \n     private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String style = treeItem.getStyle().toString();\n-            found = isFilterMatchText(style);\n-        }\n-        if (!found) {\n-            final String directedLabel = treeItem.isDirected().toString();\n-            found = isFilterMatchText(directedLabel);\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(Objects.toString(treeItem.getColor().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getStyle().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.isDirected().toString(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzM0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2ODQ1OA==", "bodyText": "Similarly,  && seems to work here.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434268458", "createdAt": "2020-06-03T02:04:30Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -180,54 +180,25 @@ private void populateTree() {\n     }\n \n     private boolean isFilterMatchCurrentNode(SchemaTransactionType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchAnyProperty(treeItem);\n-        }\n-        return found;\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem);\n     }\n \n     private boolean isFilterMatchAnyProperty(SchemaTransactionType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String style = treeItem.getStyle().toString();\n-            found = isFilterMatchText(style);\n-        }\n-        if (!found) {\n-            final String directedLabel = treeItem.isDirected().toString();\n-            found = isFilterMatchText(directedLabel);\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(Objects.toString(treeItem.getColor().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getStyle().toString(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.isDirected().toString(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzM0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk4MzI5OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowMjoyN1rOGdhTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjowNDo1NFrOGeJprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzU0Ng==", "bodyText": "Change this return to !filterText.getText().isEmpty() && (isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607546", "createdAt": "2020-06-02T04:02:27Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTE4Ng==", "bodyText": "@antares1470  I added original line to avoid further processing when the strings are null. Feels like the above will still try to process when it is null?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433669186", "createdAt": "2020-06-02T07:18:55Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzU0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNDA3Mw==", "bodyText": "see above comment", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434224073", "createdAt": "2020-06-02T23:12:14Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzU0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2ODU5MA==", "bodyText": "Similarly,  && seems to work here.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434268590", "createdAt": "2020-06-03T02:04:54Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzU0Ng=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk4NjA5OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowNDoxNVrOGdhVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjowNTowNVrOGeJp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzk1MA==", "bodyText": "change this return to !filterInputText.isEmpty() && !propertyValue.isEmpty() && (startsWithRb.isSelected() ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText))", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433607950", "createdAt": "2020-06-02T04:04:15Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);\n     }\n \n-    private boolean isFilterMatchTextAnyChildNodes(SchemaVertexType treeItem) {\n+    private boolean isFilterMatchAnyChildNodes(SchemaVertexType treeItem) {\n         boolean found = false;\n-        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n+        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt\n+                -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n \n         for (SchemaVertexType child : children) {\n-            found = isFilterMatchTextCurrentNodeOrAnyChildren(child);\n+            found = isFilterMatchCurrentNodeOrAnyChildren(child);\n             if (found) {\n                 break;\n             }\n         }\n         return found;\n     }\n \n-    private boolean isFilterMatchTextAnyProperty(SchemaVertexType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String foregroundIconLabel = treeItem.getForegroundIcon().getName();\n-            found = isFilterMatchText(foregroundIconLabel);\n-        }\n-        if (!found) {\n-            if (treeItem.getValidationRegex() != null) {\n-                final String validationLabel = treeItem.getValidationRegex().toString();\n-                found = isFilterMatchText(validationLabel);\n-            }\n-        }\n-        if (!found) {\n-            if (treeItem.getDetectionRegex() != null) {\n-                final String detectionLabel = treeItem.getDetectionRegex().toString();\n-                found = isFilterMatchText(detectionLabel);\n-            }\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+    private boolean isFilterMatchAnyProperty(SchemaVertexType treeItem) {\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(treeItem.getColor().getName())\n+                || isFilterMatchText(treeItem.getForegroundIcon().getName())\n+                || isFilterMatchText(Objects.toString(treeItem.getValidationRegex(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getDetectionRegex(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2Nzg4Nw==", "bodyText": "I added original line to avoid further processing when the strings are null. Feels like the above will still try to process when either is null?", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r433667887", "createdAt": "2020-06-02T07:16:10Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);\n     }\n \n-    private boolean isFilterMatchTextAnyChildNodes(SchemaVertexType treeItem) {\n+    private boolean isFilterMatchAnyChildNodes(SchemaVertexType treeItem) {\n         boolean found = false;\n-        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n+        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt\n+                -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n \n         for (SchemaVertexType child : children) {\n-            found = isFilterMatchTextCurrentNodeOrAnyChildren(child);\n+            found = isFilterMatchCurrentNodeOrAnyChildren(child);\n             if (found) {\n                 break;\n             }\n         }\n         return found;\n     }\n \n-    private boolean isFilterMatchTextAnyProperty(SchemaVertexType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String foregroundIconLabel = treeItem.getForegroundIcon().getName();\n-            found = isFilterMatchText(foregroundIconLabel);\n-        }\n-        if (!found) {\n-            if (treeItem.getValidationRegex() != null) {\n-                final String validationLabel = treeItem.getValidationRegex().toString();\n-                found = isFilterMatchText(validationLabel);\n-            }\n-        }\n-        if (!found) {\n-            if (treeItem.getDetectionRegex() != null) {\n-                final String detectionLabel = treeItem.getDetectionRegex().toString();\n-                found = isFilterMatchText(detectionLabel);\n-            }\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+    private boolean isFilterMatchAnyProperty(SchemaVertexType treeItem) {\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(treeItem.getColor().getName())\n+                || isFilterMatchText(treeItem.getForegroundIcon().getName())\n+                || isFilterMatchText(Objects.toString(treeItem.getValidationRegex(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getDetectionRegex(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzk1MA=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNDEyMQ==", "bodyText": "see above comment", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434224121", "createdAt": "2020-06-02T23:12:25Z", "author": {"login": "antares1470"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);\n     }\n \n-    private boolean isFilterMatchTextAnyChildNodes(SchemaVertexType treeItem) {\n+    private boolean isFilterMatchAnyChildNodes(SchemaVertexType treeItem) {\n         boolean found = false;\n-        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n+        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt\n+                -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n \n         for (SchemaVertexType child : children) {\n-            found = isFilterMatchTextCurrentNodeOrAnyChildren(child);\n+            found = isFilterMatchCurrentNodeOrAnyChildren(child);\n             if (found) {\n                 break;\n             }\n         }\n         return found;\n     }\n \n-    private boolean isFilterMatchTextAnyProperty(SchemaVertexType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String foregroundIconLabel = treeItem.getForegroundIcon().getName();\n-            found = isFilterMatchText(foregroundIconLabel);\n-        }\n-        if (!found) {\n-            if (treeItem.getValidationRegex() != null) {\n-                final String validationLabel = treeItem.getValidationRegex().toString();\n-                found = isFilterMatchText(validationLabel);\n-            }\n-        }\n-        if (!found) {\n-            if (treeItem.getDetectionRegex() != null) {\n-                final String detectionLabel = treeItem.getDetectionRegex().toString();\n-                found = isFilterMatchText(detectionLabel);\n-            }\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+    private boolean isFilterMatchAnyProperty(SchemaVertexType treeItem) {\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(treeItem.getColor().getName())\n+                || isFilterMatchText(treeItem.getForegroundIcon().getName())\n+                || isFilterMatchText(Objects.toString(treeItem.getValidationRegex(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getDetectionRegex(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzk1MA=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2ODY0NQ==", "bodyText": "Similarly,  && seems to work here.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434268645", "createdAt": "2020-06-03T02:05:05Z", "author": {"login": "Auriga2"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -223,79 +223,41 @@ private void populateTree() {\n         treeView.setRoot(root);\n     }\n \n-    private boolean isFilterMatchTextCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n-        boolean found = isFilterMatchText(treeItem.getName());\n-        if (!found) {\n-            found = isFilterMatchTextAnyProperty(treeItem);\n-        }\n-        if (!found) {\n-            found = isFilterMatchTextAnyChildNodes(treeItem);\n-        }\n-        return found;\n+    private boolean isFilterMatchCurrentNodeOrAnyChildren(SchemaVertexType treeItem) {\n+        return filterText.getText().toLowerCase().isEmpty() ? false\n+                : isFilterMatchText(treeItem.getName()) || isFilterMatchAnyProperty(treeItem) || isFilterMatchAnyChildNodes(treeItem);\n     }\n \n-    private boolean isFilterMatchTextAnyChildNodes(SchemaVertexType treeItem) {\n+    private boolean isFilterMatchAnyChildNodes(SchemaVertexType treeItem) {\n         boolean found = false;\n-        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n+        final List<SchemaVertexType> children = vertexTypes.stream().filter(vt\n+                -> vt.getSuperType() == treeItem && vt != treeItem).collect(Collectors.toList());\n \n         for (SchemaVertexType child : children) {\n-            found = isFilterMatchTextCurrentNodeOrAnyChildren(child);\n+            found = isFilterMatchCurrentNodeOrAnyChildren(child);\n             if (found) {\n                 break;\n             }\n         }\n         return found;\n     }\n \n-    private boolean isFilterMatchTextAnyProperty(SchemaVertexType treeItem) {\n-        boolean found = false;\n-        final String name = treeItem.getName();\n-        found = isFilterMatchText(name);\n-        if (!found) {\n-            final String description = treeItem.getDescription();\n-            found = isFilterMatchText(description);\n-        }\n-        if (!found) {\n-            final String color = treeItem.getColor().toString();\n-            found = isFilterMatchText(color);\n-        }\n-        if (!found) {\n-            final String foregroundIconLabel = treeItem.getForegroundIcon().getName();\n-            found = isFilterMatchText(foregroundIconLabel);\n-        }\n-        if (!found) {\n-            if (treeItem.getValidationRegex() != null) {\n-                final String validationLabel = treeItem.getValidationRegex().toString();\n-                found = isFilterMatchText(validationLabel);\n-            }\n-        }\n-        if (!found) {\n-            if (treeItem.getDetectionRegex() != null) {\n-                final String detectionLabel = treeItem.getDetectionRegex().toString();\n-                found = isFilterMatchText(detectionLabel);\n-            }\n-        }\n-        if (!found) {\n-            final String hierachy = treeItem.getHierachy();\n-            found = isFilterMatchText(hierachy);\n-        }\n-        if (!found) {\n-            for (String property : treeItem.getProperties().keySet()) {\n-                final Object propertyValue = treeItem.getProperty(property);\n-                if (propertyValue != null) {\n-                    found = isFilterMatchText(propertyValue.toString());\n-                    if (found) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return found;\n+    private boolean isFilterMatchAnyProperty(SchemaVertexType treeItem) {\n+        return isFilterMatchText(treeItem.getName())\n+                || isFilterMatchText(treeItem.getDescription())\n+                || isFilterMatchText(treeItem.getColor().getName())\n+                || isFilterMatchText(treeItem.getForegroundIcon().getName())\n+                || isFilterMatchText(Objects.toString(treeItem.getValidationRegex(), \"\"))\n+                || isFilterMatchText(Objects.toString(treeItem.getDetectionRegex(), \"\"))\n+                || isFilterMatchText(treeItem.getHierachy())\n+                || !(treeItem.getProperties().keySet().isEmpty()) && treeItem.getProperties().keySet().stream().anyMatch(property\n+                -> property != null && isFilterMatchText(property.toString())\n+        );\n     }\n \n     private boolean isFilterMatchText(final String propertyValue) {\n         final String filterInputText = filterText.getText().toLowerCase();\n-        return filterInputText.isEmpty() ? false : startsWithRb.isSelected()\n+        return (filterInputText.isEmpty() || propertyValue.isEmpty()) ? false : startsWithRb.isSelected()\n                 ? propertyValue.toLowerCase().startsWith(filterInputText) : propertyValue.toLowerCase().contains(filterInputText);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzk1MA=="}, "originalCommit": {"oid": "17846549a982161c51cf34b861e2f43e538b5538"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTU1Nzg5OnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDoxOVrOGe1phw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDoxOVrOGe1phw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4OTQ0Nw==", "bodyText": "I'd suggest expanding out the variable name tt.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434989447", "createdAt": "2020-06-04T04:44:19Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/TransactionTypeNodeProvider.java", "diffHunk": "@@ -290,18 +368,17 @@ public boolean isLeaf() {\n                     // Null is a special marker for the single root node.\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaTransactionType tt : transactionTypes) {\n-                        if (tt.getSuperType() == tt) {\n-                            children.add(createNode(tt));\n+                        if ((tt.getSuperType() == tt) && (isFilterMatchCurrentNode(tt) || filterText.getText().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTU1ODMzOnYy", "diffSide": "RIGHT", "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDo0MlrOGe1pzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDo0NDo0MlrOGe1pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4OTUxNg==", "bodyText": "...and similarly the variable name vt.", "url": "https://github.com/constellation-app/constellation/pull/555#discussion_r434989516", "createdAt": "2020-06-04T04:44:42Z", "author": {"login": "cygnus-x-1"}, "path": "CoreSchemaView/src/au/gov/asd/tac/constellation/views/schemaview/providers/VertexTypeNodeProvider.java", "diffHunk": "@@ -394,18 +483,17 @@ public boolean isLeaf() {\n                     // Null is a special marker for the single root node.\n                     // Any vertextype that points to itself is in the root layer.\n                     for (final SchemaVertexType vt : vertexTypes) {\n-                        if (vt.getSuperType() == vt) {\n-                            children.add(createNode(vt));\n+                        if ((vt.getSuperType() == vt) && (isFilterMatchCurrentNodeOrAnyChildren(vt) || filterText.getText().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d56636798a0ee5c0b1ec2936fa3ab3c29f8284"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2158, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}