{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Njg4NTk1", "number": 1708, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo0OTozNlrOE1JeDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo0OTozNlrOE1JeDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTY1MTM1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/apoc/util/UtilQuoteTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo0OTozNlrOHtQiyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozMjoyMVrOHtWHww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxOTAxNw==", "bodyText": "maybe makes sense trim the string?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1708#discussion_r517219017", "createdAt": "2020-11-04T09:49:36Z", "author": {"login": "conker84"}, "path": "core/src/test/java/apoc/util/UtilQuoteTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package apoc.util;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.neo4j.test.rule.DbmsRule;\n+import org.neo4j.test.rule.ImpermanentDbmsRule;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(Parameterized.class)\n+public class UtilQuoteTest {\n+\n+    @ClassRule\n+    public static DbmsRule db = new ImpermanentDbmsRule();\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { \"abc\", true },\n+                { \"_id\", true },\n+                { \"some_var\", true },\n+                { \"$lock\", false },\n+                { \"has$inside\", true },\n+                { \"\u00e4hhh\", true },\n+                { \"r\u00fcbe\", true },\n+                { \"r\u00e5dhuset\", true },\n+                { \"1first\", false },\n+                { \"first1\", true },\n+                { \"a weird identifier\", false },\n+                { \"^n\", false },\n+                { \"$$n\", false },\n+                { \" $var \", false },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753e01f83ad446c5e2fc52ddb45b85c77fb257f8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMDQwMw==", "bodyText": "Thanks for pointing me towards this.\nMy intention was to have a test case for an identifier with a leading space because that's a valid identifier when quoted. But I just realized I should have rather used var as a test case for that. And then the test method needs fixing... That's what I just pushed.\nOr did you mean something else?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1708#discussion_r517310403", "createdAt": "2020-11-04T12:32:21Z", "author": {"login": "Phoosha"}, "path": "core/src/test/java/apoc/util/UtilQuoteTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package apoc.util;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.neo4j.test.rule.DbmsRule;\n+import org.neo4j.test.rule.ImpermanentDbmsRule;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(Parameterized.class)\n+public class UtilQuoteTest {\n+\n+    @ClassRule\n+    public static DbmsRule db = new ImpermanentDbmsRule();\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { \"abc\", true },\n+                { \"_id\", true },\n+                { \"some_var\", true },\n+                { \"$lock\", false },\n+                { \"has$inside\", true },\n+                { \"\u00e4hhh\", true },\n+                { \"r\u00fcbe\", true },\n+                { \"r\u00e5dhuset\", true },\n+                { \"1first\", false },\n+                { \"first1\", true },\n+                { \"a weird identifier\", false },\n+                { \"^n\", false },\n+                { \"$$n\", false },\n+                { \" $var \", false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxOTAxNw=="}, "originalCommit": {"oid": "753e01f83ad446c5e2fc52ddb45b85c77fb257f8"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4290, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}