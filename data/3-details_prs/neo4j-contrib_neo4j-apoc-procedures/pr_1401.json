{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDI0Nzg5", "number": 1401, "title": "Tables4Labels - 4.x", "bodyText": "Fixes #1388 (for 4.x)\nFull list of features:\n\nTables4Labels. Base functionality to replace nodeTypeProperties() and relTypeProperties() with sampling versions.\nRelationships4Labels. Adds two columns to relTypeProperties() to show source and target labels for each relationship that has a valid property.\nMandatory handling functionality change. Forces \"mandatory\" flag to true only if a constraint exists for this property (only works for Enterprise Edition as constraints are a licensed function of Neo4J).\nAllow inclusion/exclusion of nodes by relationships. When calling nodeTypeProperties(), include/exclude a node if it has a specifically has/doesn't have a relationship type associated).\n\nWork-in-progress PR. Still requires:\n\nComplete unit tests (some are complete, some are not)\nDocumentation", "createdAt": "2020-02-05T15:08:35Z", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401", "merged": true, "mergeCommit": {"oid": "123d483a824448660aeaa4b16cdd38565319ab02"}, "closed": true, "closedAt": "2020-02-17T07:10:36Z", "author": {"login": "neoarchitect"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBXeyVgH2gAyMzcxNDI0Nzg5OjlmNGY5ZDBjZTgxZjY3M2JjZGMwNzY4OTZkN2NhYjY5NTUyODc0MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcD60y-gH2gAyMzcxNDI0Nzg5OjlkYmM4ZTkwODQzNmJkNzg1NTAwMWE0NzQ0MTJlZGE5NWJkYzljNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9f4f9d0ce81f673bcdc076896d7cab6955287413", "committedDate": "2020-02-05T15:01:27Z", "message": "Adding T4L feature from APOC 3.5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b73491220d4bcac9ec8211d87b82ce578cabd8c9", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/b73491220d4bcac9ec8211d87b82ce578cabd8c9", "committedDate": "2020-02-11T15:20:07Z", "message": "Fixed double underscore issue on node labels for relTypeProperties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzM2NTg0", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#pullrequestreview-356736584", "createdAt": "2020-02-11T15:11:28Z", "commit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMToyOFrOFoMvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToyNzo1N1rOFoNbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjA1Mw==", "bodyText": "printStackTrace isn't good error handling. Maybe use log.warn to dump the stacetrace and rethrow it wrapped into a RuntimeException", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377696053", "createdAt": "2020-02-11T15:11:28Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjMxNA==", "bodyText": "same as above on error handling", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377696314", "createdAt": "2020-02-11T15:11:53Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NzgzNQ==", "bodyText": "continue is IMO bad practice. Instead use a if (!badCondition) { /* do stuff */ }", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377697835", "createdAt": "2020-02-11T15:14:11Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    private Tables4LabelsProfile collectTables4LabelsProfile (MetaConfig config) {\n+        Tables4LabelsProfile profile = new Tables4LabelsProfile();\n+\n+        Schema schema = tx.schema();\n+\n+        Map<String, Iterable<ConstraintDefinition>> relConstraints = new HashMap<>(20);\n+\n+        for (RelationshipType type : tx.getAllRelationshipTypesInUse()) {\n+            List<ConstraintDefinition> tcd = new ArrayList<ConstraintDefinition>();\n+            for (ConstraintDefinition cd : schema.getConstraints(type)) {\n+                if (cd.isConstraintType(ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE)) {\n+                    tcd.add(cd);\n+                }\n+            }\n+            relConstraints.put(type.name(),tcd);\n+        }\n+\n+        Map<String, Long> countStore = getLabelCountStore();\n+\n+        Set<String> includeLabels = config.getIncludesLabels();\n+        Set<String> excludes = config.getExcludes();\n+\n+        Set<String> includeRels = config.getIncludesRels();\n+        Set<String> excludeRels = config.getExcludeRels();\n+\n+        for (Label label : tx.getAllLabelsInUse()) {\n+            String labelName = label.name();\n+\n+            if (excludes.contains(labelName)) {\n+                // Skip if explicitly excluded\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwNzQ1MA==", "bodyText": "I guess it's more concise to use java 8 streams for mapping and sorting?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377707450", "createdAt": "2020-02-11T15:27:57Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/tablesforlabels/OrderedLabels.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package apoc.meta.tablesforlabels;\n+\n+import apoc.meta.Tables4LabelsProfile;\n+import org.neo4j.graphdb.Label;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Abstraction on an ordered label set, used as a key for tables for labels profiles\n+ */\n+public class OrderedLabels {\n+    List<String> labels;\n+\n+    public OrderedLabels(Iterable<Label> input) {\n+        labels = new ArrayList<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2bdd222686abe50ce9df3ba4ace913cd22c5ba", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/ef2bdd222686abe50ce9df3ba4ace913cd22c5ba", "committedDate": "2020-02-13T09:38:44Z", "message": "Adding T4L feature from APOC 3.5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aafa8b38e754f37bb5ee8c27518ca944a1ef926c", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/aafa8b38e754f37bb5ee8c27518ca944a1ef926c", "committedDate": "2020-02-13T09:38:44Z", "message": "Fixed double underscore issue on node labels for relTypeProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8da551deb6f6c1e84bdf4f86f0d0cc8057f1c84", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c8da551deb6f6c1e84bdf4f86f0d0cc8057f1c84", "committedDate": "2020-02-13T09:39:02Z", "message": "Merge branch '4.0' of https://github.com/neoarchitect/neo4j-apoc-procedures into 4.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f271618ecf995e335afc92fbeb0494a2ae91c4", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/99f271618ecf995e335afc92fbeb0494a2ae91c4", "committedDate": "2020-02-13T09:44:09Z", "message": "Changes to error handling, etc, based on code review comments by sarmbruster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13f376b54b8f0d83a217d523535b5d7edc69071", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/b13f376b54b8f0d83a217d523535b5d7edc69071", "committedDate": "2020-02-13T10:49:56Z", "message": "Added tests for T4L"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e153d57b0adf3cab16f050e574b9f663e58baf", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/a0e153d57b0adf3cab16f050e574b9f663e58baf", "committedDate": "2020-02-13T10:58:21Z", "message": "Added asciidoc documentation for new procedures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbc8e908436bd7855001a474412eda95bdc9c44", "author": {"user": null}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9dbc8e908436bd7855001a474412eda95bdc9c44", "committedDate": "2020-02-13T13:20:01Z", "message": "Rewrite of constraint checking mechanism for performance in T4L"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 944, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}