{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjE2NjYx", "number": 1485, "title": "Procedures that wrap AWS NLP Entities endpoint", "bodyText": "Just to start with. We'll wrap the others as well in upcoming PRs.", "createdAt": "2020-04-22T11:05:58Z", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485", "merged": true, "mergeCommit": {"oid": "86cedbb38bcfe0a6d5103f70bca71ccb37cc45ab"}, "closed": true, "closedAt": "2020-04-22T16:54:50Z", "author": {"login": "mneedham"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaIKhngFqTM5ODE0MTA0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaLP3gABqjMyNjE1MzU5MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTQxMDQx", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#pullrequestreview-398141041", "createdAt": "2020-04-22T12:32:20Z", "commit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozMjoyMFrOGJz3cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxNzo1OVrOGJ168A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MDE0NQ==", "bodyText": "I created an uber jar for the dependecies maybe we can put it on S3 and also add a link to this\naws-java-sdk-comprehend-dependencies.jar.zip", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412940145", "createdAt": "2020-04-22T12:32:20Z", "author": {"login": "conker84"}, "path": "docs/asciidoc/nlp/aws.adoc", "diffHunk": "@@ -0,0 +1,273 @@\n+[[nlp-aws]]\n+=== Amazon Web Services (AWS)\n+\n+[abstract]\n+--\n+This chapter describes procedures that wrap Amazon Web Services Comprehend Natural Language API.\n+--\n+\n+Amazon Web Services (AWS) https://docs.aws.amazon.com/comprehend/index.html[Comprehend Natural Language API^] uses machine learning to find insights and relationships in text.\n+The procedures in this chapter act as a wrapper around calls to this API to extract entities from text stored as node properties.\n+\n+Each procedure has two modes:\n+\n+* Stream - returns a map constructed from the JSON returned from the API\n+* Graph - creates a graph or virtual graph based on the values returned by the API\n+\n+This section includes the following:\n+\n+* <<nlp-aws-overview>>\n+* <<nlp-aws-java-sdk>>\n+* <<nlp-aws-api-key>>\n+* <<nlp-aws-entities>>\n+* <<nlp-aws-examples>>\n+    ** <<nlp-aws-examples-entities>>\n+\n+[[nlp-aws-overview]]\n+==== Procedure Overview\n+\n+The procedures are described below:\n+\n+[separator=\u00a6,opts=header,cols=\"1,1m,1m,5\"]\n+|===\n+include::../../../build/generated-documentation/apoc.nlp.aws.entities.csv[]\n+|===\n+\n+[[nlp-aws-java-sdk]]\n+==== Install AWS Java SDK For Amazon Comprehend\n+\n+The AWS NLP procedures are compiled against version _1.11.163_ of the https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-comprehend[AWS Java SDK For Amazon Comprehend^] library, which is not included in the APOC Library.\n+To use the library we'll need to download the following jar files and place them in the `plugins` directory:\n+\n+* https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-comprehend/1.11.683/aws-java-sdk-comprehend-1.11.683.jar[aws-java-sdk-comprehend-1.11.683.jar^]\n+* https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-core/1.11.683/aws-java-sdk-core-1.11.683.jar[aws-java-sdk-core-1.11.683.jar^]\n+* https://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5.9/httpclient-4.5.9.jar[httpclient-4.5.9.jar^]\n+* https://repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.11/httpcore-4.4.11.jar[httpcore-4.4.11.jar^]\n+* https://repo1.maven.org/maven2/joda-time/joda-time/2.8.1/joda-time-2.8.1.jar[joda-time-2.8.1.jar^]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NTg3Ng==", "bodyText": "we can use a data class here", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412945876", "createdAt": "2020-04-22T12:40:41Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0Nzc1OA==", "bodyText": "can we remove this?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412947758", "createdAt": "2020-04-22T12:43:08Z", "author": {"login": "conker84"}, "path": "src/main/java/apoc/result/NodeWithMapResult.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package apoc.result;\n+\n+import org.neo4j.graphdb.Node;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0OTU5Mw==", "bodyText": "can we remove .toMutableSet()?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412949593", "createdAt": "2020-04-22T12:45:35Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {\n+    fun createAndStore(transaction: Transaction?): VirtualGraph {\n+        return createVirtualGraph(transaction)\n+    }\n+\n+    fun create(): VirtualGraph {\n+        return createVirtualGraph(null)\n+    }\n+\n+    private fun createVirtualGraph(transaction: Transaction?): VirtualGraph {\n+        val storeGraph = transaction != null\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapping,\n+                \"write\" to storeGraph\n+        )\n+\n+        val allNodes: MutableSet<Node> = mutableSetOf()\n+        val nonSourceNodes: MutableSet<Node> = mutableSetOf()\n+        val allRelationships: MutableSet<Relationship> = mutableSetOf()\n+\n+        sourceNodes.forEachIndexed { index, sourceNode ->\n+            val documentToGraph = DocumentToGraph(transaction, GraphsConfig(graphConfig), nonSourceNodes)\n+            val document = AWSProcedures.transformResults(index, sourceNode, detectEntitiesResult).value[\"entities\"]\n+\n+            val graph = documentToGraph.create(document)\n+            val mutableGraph = graph.graph.toMutableMap()\n+\n+            val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0OTc3NA==", "bodyText": "can we remove .toMutableMap()?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412949774", "createdAt": "2020-04-22T12:45:49Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {\n+    fun createAndStore(transaction: Transaction?): VirtualGraph {\n+        return createVirtualGraph(transaction)\n+    }\n+\n+    fun create(): VirtualGraph {\n+        return createVirtualGraph(null)\n+    }\n+\n+    private fun createVirtualGraph(transaction: Transaction?): VirtualGraph {\n+        val storeGraph = transaction != null\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapping,\n+                \"write\" to storeGraph\n+        )\n+\n+        val allNodes: MutableSet<Node> = mutableSetOf()\n+        val nonSourceNodes: MutableSet<Node> = mutableSetOf()\n+        val allRelationships: MutableSet<Relationship> = mutableSetOf()\n+\n+        sourceNodes.forEachIndexed { index, sourceNode ->\n+            val documentToGraph = DocumentToGraph(transaction, GraphsConfig(graphConfig), nonSourceNodes)\n+            val document = AWSProcedures.transformResults(index, sourceNode, detectEntitiesResult).value[\"entities\"]\n+\n+            val graph = documentToGraph.create(document)\n+            val mutableGraph = graph.graph.toMutableMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDI0NQ==", "bodyText": "we can switch to object instead of class and remove the companion object", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412950245", "createdAt": "2020-04-22T12:46:25Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/NLPHelperFunctions.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package apoc.nlp\n+\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import java.util.stream.Stream\n+\n+class NLPHelperFunctions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDg2Nw==", "bodyText": "instead of MutableSet => Set", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412950867", "createdAt": "2020-04-22T12:47:17Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/NLPHelperFunctions.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package apoc.nlp\n+\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import java.util.stream.Stream\n+\n+class NLPHelperFunctions {\n+    companion object {\n+        fun createRelationships(node: Node, nodes: MutableSet<Node>, relationshipType: RelationshipType) =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDk5Mw==", "bodyText": "Same as above", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412950993", "createdAt": "2020-04-22T12:47:27Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/NLPHelperFunctions.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package apoc.nlp\n+\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import java.util.stream.Stream\n+\n+class NLPHelperFunctions {\n+    companion object {\n+        fun createRelationships(node: Node, nodes: MutableSet<Node>, relationshipType: RelationshipType) =\n+                sequence {\n+                    for (n in nodes) {\n+                        yield(node.createRelationshipTo(n, relationshipType))\n+                    }\n+                }\n+\n+        fun mergeRelationships(transaction: Transaction, node: Node, nodes: MutableSet<Node>, relType: RelationshipType): Stream<Relationship> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MTk2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        nodes.add(node)\n          \n          \n            \n                        allNodes.add(node)", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412951964", "createdAt": "2020-04-22T12:48:47Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {\n+    fun createAndStore(transaction: Transaction?): VirtualGraph {\n+        return createVirtualGraph(transaction)\n+    }\n+\n+    fun create(): VirtualGraph {\n+        return createVirtualGraph(null)\n+    }\n+\n+    private fun createVirtualGraph(transaction: Transaction?): VirtualGraph {\n+        val storeGraph = transaction != null\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapping,\n+                \"write\" to storeGraph\n+        )\n+\n+        val allNodes: MutableSet<Node> = mutableSetOf()\n+        val nonSourceNodes: MutableSet<Node> = mutableSetOf()\n+        val allRelationships: MutableSet<Relationship> = mutableSetOf()\n+\n+        sourceNodes.forEachIndexed { index, sourceNode ->\n+            val documentToGraph = DocumentToGraph(transaction, GraphsConfig(graphConfig), nonSourceNodes)\n+            val document = AWSProcedures.transformResults(index, sourceNode, detectEntitiesResult).value[\"entities\"]\n+\n+            val graph = documentToGraph.create(document)\n+            val mutableGraph = graph.graph.toMutableMap()\n+\n+            val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+            nonSourceNodes.addAll(nodes)\n+\n+            val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+            val node = if (storeGraph) {\n+                NLPHelperFunctions.mergeRelationships(transaction!!, sourceNode, nodes, relationshipType).forEach { rel -> relationships.add(rel) }\n+                sourceNode\n+            } else {\n+                val virtualNode = VirtualNode(sourceNode, sourceNode.propertyKeys.toList())\n+                NLPHelperFunctions.createRelationships(virtualNode, nodes, relationshipType).forEach { rel -> relationships.add(rel) }\n+                virtualNode\n+            }\n+            nodes.add(node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MjU1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return createVirtualGraph(null)\n          \n          \n            \n                    return createVirtualGraph()\n          \n      \n    \n    \n  \n\nand then apply the next comment", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412952552", "createdAt": "2020-04-22T12:49:36Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {\n+    fun createAndStore(transaction: Transaction?): VirtualGraph {\n+        return createVirtualGraph(transaction)\n+    }\n+\n+    fun create(): VirtualGraph {\n+        return createVirtualGraph(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MjYzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private fun createVirtualGraph(transaction: Transaction?): VirtualGraph {\n          \n          \n            \n                private fun createVirtualGraph(transaction: Transaction? = null): VirtualGraph {", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412952636", "createdAt": "2020-04-22T12:49:45Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/AWSVirtualNLPGraph.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package apoc.nlp\n+\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.nlp.aws.AWSProcedures\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+\n+class AWSVirtualNLPGraph(private val detectEntitiesResult: BatchDetectEntitiesResult, private val sourceNodes: List<Node>, val relationshipType: RelationshipType, val mapping: Map<String, String>) {\n+    fun createAndStore(transaction: Transaction?): VirtualGraph {\n+        return createVirtualGraph(transaction)\n+    }\n+\n+    fun create(): VirtualGraph {\n+        return createVirtualGraph(null)\n+    }\n+\n+    private fun createVirtualGraph(transaction: Transaction?): VirtualGraph {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MzEyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n          \n          \n            \n                            else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `$source`\")", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412953124", "createdAt": "2020-04-22T12:50:26Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/aws/AWSProcedures.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+package apoc.nlp.aws\n+\n+import apoc.ai.service.AWSClient\n+import apoc.nlp.NLPHelperFunctions\n+import apoc.nlp.AWSVirtualNLPGraph\n+import apoc.nlp.AWSVirtualNLPGraph.Companion.ENTITY_MAPPING\n+import apoc.result.NodeWithMapResult\n+import apoc.result.VirtualGraph\n+import apoc.util.JsonUtil\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class AWSProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"source\") source: Any,\n+                 @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<NodeWithMapResult> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client: AWSClient = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        return convert(source).mapIndexed { index, node -> transformResults(index, node, detectEntitiesResult!!) }.stream()\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"source\") source: Any,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<VirtualGraph> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        val storeGraph: Boolean = config.getOrDefault(\"write\", false) as Boolean\n+\n+        val relationshipType = NLPHelperFunctions.entityRelationshipType(config)\n+\n+        val virtualNLPGraph = AWSVirtualNLPGraph(detectEntitiesResult!!, convert(source), relationshipType, ENTITY_MAPPING)\n+        return if (storeGraph) {\n+            Stream.of(virtualNLPGraph.createAndStore(tx))\n+        } else {\n+            Stream.of(virtualNLPGraph.create())\n+        }\n+    }\n+\n+    companion object {\n+        fun transformResults(index: Int, node: Node, res: BatchDetectEntitiesResult): NodeWithMapResult {\n+            val result = res.resultList.find { result -> result.index == index }\n+            return if (result != null) {\n+                NodeWithMapResult.withResult(node, JsonUtil.OBJECT_MAPPER!!.convertValue(result, Map::class.java) as Map<String, Any?>)\n+            } else {\n+                val err = res.errorList.find { error -> error.index == index }\n+                NodeWithMapResult.withError(node, mapOf(\"code\" to err?.errorCode, \"message\" to err?.errorMessage))\n+            }\n+        }\n+\n+        private fun convert(source: Any): List<Node> {\n+            return when (source) {\n+                is Node -> listOf(source)\n+                is List<*> -> source.map { item -> item as Node }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NDAyNg==", "bodyText": "and can we transform to a method? as it's used in several points", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412954026", "createdAt": "2020-04-22T12:51:40Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/aws/AWSProcedures.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+package apoc.nlp.aws\n+\n+import apoc.ai.service.AWSClient\n+import apoc.nlp.NLPHelperFunctions\n+import apoc.nlp.AWSVirtualNLPGraph\n+import apoc.nlp.AWSVirtualNLPGraph.Companion.ENTITY_MAPPING\n+import apoc.result.NodeWithMapResult\n+import apoc.result.VirtualGraph\n+import apoc.util.JsonUtil\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class AWSProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"source\") source: Any,\n+                 @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<NodeWithMapResult> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client: AWSClient = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        return convert(source).mapIndexed { index, node -> transformResults(index, node, detectEntitiesResult!!) }.stream()\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"source\") source: Any,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<VirtualGraph> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        val storeGraph: Boolean = config.getOrDefault(\"write\", false) as Boolean\n+\n+        val relationshipType = NLPHelperFunctions.entityRelationshipType(config)\n+\n+        val virtualNLPGraph = AWSVirtualNLPGraph(detectEntitiesResult!!, convert(source), relationshipType, ENTITY_MAPPING)\n+        return if (storeGraph) {\n+            Stream.of(virtualNLPGraph.createAndStore(tx))\n+        } else {\n+            Stream.of(virtualNLPGraph.create())\n+        }\n+    }\n+\n+    companion object {\n+        fun transformResults(index: Int, node: Node, res: BatchDetectEntitiesResult): NodeWithMapResult {\n+            val result = res.resultList.find { result -> result.index == index }\n+            return if (result != null) {\n+                NodeWithMapResult.withResult(node, JsonUtil.OBJECT_MAPPER!!.convertValue(result, Map::class.java) as Map<String, Any?>)\n+            } else {\n+                val err = res.errorList.find { error -> error.index == index }\n+                NodeWithMapResult.withError(node, mapOf(\"code\" to err?.errorCode, \"message\" to err?.errorMessage))\n+            }\n+        }\n+\n+        private fun convert(source: Any): List<Node> {\n+            return when (source) {\n+                is Node -> listOf(source)\n+                is List<*> -> source.map { item -> item as Node }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MzEyNA=="}, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTAxOA==", "bodyText": "should we also check if the property is not null?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412955018", "createdAt": "2020-04-22T12:52:58Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/aws/AWSProcedures.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+package apoc.nlp.aws\n+\n+import apoc.ai.service.AWSClient\n+import apoc.nlp.NLPHelperFunctions\n+import apoc.nlp.AWSVirtualNLPGraph\n+import apoc.nlp.AWSVirtualNLPGraph.Companion.ENTITY_MAPPING\n+import apoc.result.NodeWithMapResult\n+import apoc.result.VirtualGraph\n+import apoc.util.JsonUtil\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class AWSProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"source\") source: Any,\n+                 @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<NodeWithMapResult> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client: AWSClient = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        return convert(source).mapIndexed { index, node -> transformResults(index, node, detectEntitiesResult!!) }.stream()\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"source\") source: Any,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<VirtualGraph> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        val storeGraph: Boolean = config.getOrDefault(\"write\", false) as Boolean\n+\n+        val relationshipType = NLPHelperFunctions.entityRelationshipType(config)\n+\n+        val virtualNLPGraph = AWSVirtualNLPGraph(detectEntitiesResult!!, convert(source), relationshipType, ENTITY_MAPPING)\n+        return if (storeGraph) {\n+            Stream.of(virtualNLPGraph.createAndStore(tx))\n+        } else {\n+            Stream.of(virtualNLPGraph.create())\n+        }\n+    }\n+\n+    companion object {\n+        fun transformResults(index: Int, node: Node, res: BatchDetectEntitiesResult): NodeWithMapResult {\n+            val result = res.resultList.find { result -> result.index == index }\n+            return if (result != null) {\n+                NodeWithMapResult.withResult(node, JsonUtil.OBJECT_MAPPER!!.convertValue(result, Map::class.java) as Map<String, Any?>)\n+            } else {\n+                val err = res.errorList.find { error -> error.index == index }\n+                NodeWithMapResult.withError(node, mapOf(\"code\" to err?.errorCode, \"message\" to err?.errorMessage))\n+            }\n+        }\n+\n+        private fun convert(source: Any): List<Node> {\n+            return when (source) {\n+                is Node -> listOf(source)\n+                is List<*> -> source.map { item -> item as Node }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifySource(source: Any) {\n+            when (source) {\n+                is Node -> return\n+                is List<*> -> source.forEach { item ->\n+                    if (item !is Node) {\n+                        throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+                    }\n+                }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifyNodeProperty(source: Any, nodeProperty: String) {\n+            when (source) {\n+                is Node -> verifyNodeProperty(source, nodeProperty)\n+                is List<*> -> source.forEach { node -> verifyNodeProperty(node as Node, nodeProperty) }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifyKey(config: Map<String, Any>, property: String) {\n+            if (!config.containsKey(property)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTMzNg==", "bodyText": "should we also check if the property is not null?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412955336", "createdAt": "2020-04-22T12:53:25Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/aws/AWSProcedures.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+package apoc.nlp.aws\n+\n+import apoc.ai.service.AWSClient\n+import apoc.nlp.NLPHelperFunctions\n+import apoc.nlp.AWSVirtualNLPGraph\n+import apoc.nlp.AWSVirtualNLPGraph.Companion.ENTITY_MAPPING\n+import apoc.result.NodeWithMapResult\n+import apoc.result.VirtualGraph\n+import apoc.util.JsonUtil\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class AWSProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"source\") source: Any,\n+                 @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<NodeWithMapResult> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client: AWSClient = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        return convert(source).mapIndexed { index, node -> transformResults(index, node, detectEntitiesResult!!) }.stream()\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"source\") source: Any,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<VirtualGraph> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        val storeGraph: Boolean = config.getOrDefault(\"write\", false) as Boolean\n+\n+        val relationshipType = NLPHelperFunctions.entityRelationshipType(config)\n+\n+        val virtualNLPGraph = AWSVirtualNLPGraph(detectEntitiesResult!!, convert(source), relationshipType, ENTITY_MAPPING)\n+        return if (storeGraph) {\n+            Stream.of(virtualNLPGraph.createAndStore(tx))\n+        } else {\n+            Stream.of(virtualNLPGraph.create())\n+        }\n+    }\n+\n+    companion object {\n+        fun transformResults(index: Int, node: Node, res: BatchDetectEntitiesResult): NodeWithMapResult {\n+            val result = res.resultList.find { result -> result.index == index }\n+            return if (result != null) {\n+                NodeWithMapResult.withResult(node, JsonUtil.OBJECT_MAPPER!!.convertValue(result, Map::class.java) as Map<String, Any?>)\n+            } else {\n+                val err = res.errorList.find { error -> error.index == index }\n+                NodeWithMapResult.withError(node, mapOf(\"code\" to err?.errorCode, \"message\" to err?.errorMessage))\n+            }\n+        }\n+\n+        private fun convert(source: Any): List<Node> {\n+            return when (source) {\n+                is Node -> listOf(source)\n+                is List<*> -> source.map { item -> item as Node }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifySource(source: Any) {\n+            when (source) {\n+                is Node -> return\n+                is List<*> -> source.forEach { item ->\n+                    if (item !is Node) {\n+                        throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+                    }\n+                }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifyNodeProperty(source: Any, nodeProperty: String) {\n+            when (source) {\n+                is Node -> verifyNodeProperty(source, nodeProperty)\n+                is List<*> -> source.forEach { node -> verifyNodeProperty(node as Node, nodeProperty) }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifyKey(config: Map<String, Any>, property: String) {\n+            if (!config.containsKey(property)) {\n+                throw IllegalArgumentException(\"Missing parameter `$property`. An API key for the Amazon Comprehend API can be generated from https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\")\n+            }\n+        }\n+\n+        private fun getNodeProperty(config: Map<String, Any>): String {\n+            return config.getOrDefault(\"nodeProperty\", \"text\").toString()\n+        }\n+\n+        private fun verifyNodeProperty(node: Node, nodeProperty: String) {\n+            if (!node.hasProperty(nodeProperty)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NTMxNw==", "bodyText": "can we move this and the other validation methods to Util class and reuse them in AWS and GCP procedures?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412965317", "createdAt": "2020-04-22T13:07:11Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/aws/AWSProcedures.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+package apoc.nlp.aws\n+\n+import apoc.ai.service.AWSClient\n+import apoc.nlp.NLPHelperFunctions\n+import apoc.nlp.AWSVirtualNLPGraph\n+import apoc.nlp.AWSVirtualNLPGraph.Companion.ENTITY_MAPPING\n+import apoc.result.NodeWithMapResult\n+import apoc.result.VirtualGraph\n+import apoc.util.JsonUtil\n+import com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class AWSProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"source\") source: Any,\n+                 @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<NodeWithMapResult> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client: AWSClient = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        return convert(source).mapIndexed { index, node -> transformResults(index, node, detectEntitiesResult!!) }.stream()\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.aws.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"source\") source: Any,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>) : Stream<VirtualGraph> {\n+        verifySource(source)\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(source, nodeProperty)\n+        verifyKey(config, \"key\")\n+        verifyKey(config, \"secret\")\n+\n+        val client = RealAWSClient(config, log!!)\n+        val detectEntitiesResult = client.entities(source)\n+\n+        val storeGraph: Boolean = config.getOrDefault(\"write\", false) as Boolean\n+\n+        val relationshipType = NLPHelperFunctions.entityRelationshipType(config)\n+\n+        val virtualNLPGraph = AWSVirtualNLPGraph(detectEntitiesResult!!, convert(source), relationshipType, ENTITY_MAPPING)\n+        return if (storeGraph) {\n+            Stream.of(virtualNLPGraph.createAndStore(tx))\n+        } else {\n+            Stream.of(virtualNLPGraph.create())\n+        }\n+    }\n+\n+    companion object {\n+        fun transformResults(index: Int, node: Node, res: BatchDetectEntitiesResult): NodeWithMapResult {\n+            val result = res.resultList.find { result -> result.index == index }\n+            return if (result != null) {\n+                NodeWithMapResult.withResult(node, JsonUtil.OBJECT_MAPPER!!.convertValue(result, Map::class.java) as Map<String, Any?>)\n+            } else {\n+                val err = res.errorList.find { error -> error.index == index }\n+                NodeWithMapResult.withError(node, mapOf(\"code\" to err?.errorCode, \"message\" to err?.errorMessage))\n+            }\n+        }\n+\n+        private fun convert(source: Any): List<Node> {\n+            return when (source) {\n+                is Node -> listOf(source)\n+                is List<*> -> source.map { item -> item as Node }\n+                else -> throw java.lang.IllegalArgumentException(\"`source` must be a node or list of nodes, but was: `${source}`\")\n+            }\n+        }\n+\n+        private fun verifySource(source: Any) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NzQ5OA==", "bodyText": "there is no assertion here, is it correct?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412967498", "createdAt": "2020-04-22T13:10:08Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/aws/AWSProceduresAPITest.kt", "diffHunk": "@@ -0,0 +1,204 @@\n+package apoc.nlp.aws\n+\n+import apoc.result.VirtualNode\n+import apoc.util.TestUtil\n+import junit.framework.Assert.assertEquals\n+import junit.framework.Assert.assertTrue\n+import org.hamcrest.MatcherAssert.assertThat\n+import org.hamcrest.Matchers.hasItem\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.graphdb.Label\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+\n+class AWSProceduresAPITest {\n+    companion object {\n+        const val article1 = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        const val article2 = \"\"\"\n+            Leeds United great Norman Hunter has died in hospital aged 76 after contracting coronavirus.\n+            The tough-tackling centre-back, nicknamed 'Bites Yer Legs', was a key player in Leeds' most successful era.\n+            He won two league titles during a 14-year first-team career at Elland Road, and was a non-playing member of England's 1966 World Cup-winning squad.\n+            Hunter was admitted to hospital on 10 April after testing positive for coronavirus.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+        val apiSecret: String? = System.getenv(\"API_SECRET\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, AWSProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+            assumeTrue(apiSecret != null)\n+        }\n+\n+        fun nodeMatches(item: Node?, labels: List<String>?, properties: Map<String, Any>?): Boolean {\n+            val labelsMatched = item?.labels!!.count() == labels?.size  && item.labels!!.all { label -> labels?.contains(label.name())!! }\n+            val propertiesMatches = item.allProperties.keys == properties?.keys && item.allProperties.all { entry -> properties?.containsKey(entry.key)!! && properties.get(entry.key) == entry.value }\n+            return labelsMatched && propertiesMatches\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities for individual nodes`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NzU5Mw==", "bodyText": "there is no assertion here, is it correct?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412967593", "createdAt": "2020-04-22T13:10:15Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/aws/AWSProceduresAPITest.kt", "diffHunk": "@@ -0,0 +1,204 @@\n+package apoc.nlp.aws\n+\n+import apoc.result.VirtualNode\n+import apoc.util.TestUtil\n+import junit.framework.Assert.assertEquals\n+import junit.framework.Assert.assertTrue\n+import org.hamcrest.MatcherAssert.assertThat\n+import org.hamcrest.Matchers.hasItem\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.graphdb.Label\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+\n+class AWSProceduresAPITest {\n+    companion object {\n+        const val article1 = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        const val article2 = \"\"\"\n+            Leeds United great Norman Hunter has died in hospital aged 76 after contracting coronavirus.\n+            The tough-tackling centre-back, nicknamed 'Bites Yer Legs', was a key player in Leeds' most successful era.\n+            He won two league titles during a 14-year first-team career at Elland Road, and was a non-playing member of England's 1966 World Cup-winning squad.\n+            Hunter was admitted to hospital on 10 April after testing positive for coronavirus.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+        val apiSecret: String? = System.getenv(\"API_SECRET\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, AWSProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+            assumeTrue(apiSecret != null)\n+        }\n+\n+        fun nodeMatches(item: Node?, labels: List<String>?, properties: Map<String, Any>?): Boolean {\n+            val labelsMatched = item?.labels!!.count() == labels?.size  && item.labels!!.all { label -> labels?.contains(label.name())!! }\n+            val propertiesMatches = item.allProperties.keys == properties?.keys && item.allProperties.all { entry -> properties?.containsKey(entry.key)!! && properties.get(entry.key) == entry.value }\n+            return labelsMatched && propertiesMatches\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities for individual nodes`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to article1))\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to article2))\n+        neo4j.executeTransactionally(\"MATCH (a:Article) RETURN a\", emptyMap()) {\n+            println(it.resultAsString())\n+        }\n+        neo4j.executeTransactionally(\"\"\"\n+                    MATCH (a:Article)\n+                    CALL apoc.nlp.aws.entities.stream(a, {\n+                      key: ${'$'}apiKey,\n+                      secret: ${'$'}apiSecret,\n+                      nodeProperty: \"body\"\n+                    })\n+                    YIELD value\n+                    RETURN value\n+                \"\"\".trimIndent(), mapOf(\"apiKey\" to apiKey, \"apiSecret\" to apiSecret)) {\n+            println(it.resultAsString())\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities for collection of nodes`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTAxMA==", "bodyText": "can we use a data class?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412971010", "createdAt": "2020-04-22T13:14:34Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/aws/NodeMatcher.kt", "diffHunk": "@@ -0,0 +1,25 @@\n+package apoc.nlp.aws\n+\n+import org.hamcrest.Description\n+import org.neo4j.graphdb.Label\n+import org.neo4j.graphdb.Node\n+import java.util.stream.Collectors\n+\n+class NodeMatcher(labels: List<Label>, val properties: Map<String, Any>) : org.hamcrest.TypeSafeDiagnosingMatcher<Node>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTg0Ng==", "bodyText": "can we use a data class?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412971846", "createdAt": "2020-04-22T13:15:39Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/aws/RelationshipMatcher.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+package apoc.nlp.aws\n+\n+import org.hamcrest.Description\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+\n+class RelationshipMatcher(private val startNode: Node?, private val endNode: Node?, private val relationshipType: String) : org.hamcrest.TypeSafeDiagnosingMatcher<Relationship>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MzgwOA==", "bodyText": "do we need this lazy evaluation here? or we can just do a map over nodes?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1485#discussion_r412973808", "createdAt": "2020-04-22T13:17:59Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/NLPHelperFunctions.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package apoc.nlp\n+\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import java.util.stream.Stream\n+\n+class NLPHelperFunctions {\n+    companion object {\n+        fun createRelationships(node: Node, nodes: MutableSet<Node>, relationshipType: RelationshipType) =\n+                sequence {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5d97e474ad05a074278b90a12a7acafcefa0cdd", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/e5d97e474ad05a074278b90a12a7acafcefa0cdd", "committedDate": "2020-04-22T11:05:02Z", "message": "more docs"}, "afterCommit": {"oid": "758d8e012dfce391e468c988c53cbc7b8db84114", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/758d8e012dfce391e468c988c53cbc7b8db84114", "committedDate": "2020-04-22T14:57:35Z", "message": "more docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4774e042ee621eb7925c1f14afccc3b2c50eaa8c", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/4774e042ee621eb7925c1f14afccc3b2c50eaa8c", "committedDate": "2020-04-22T15:51:56Z", "message": "wip: AWS NLP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0530a57917b26d7555d0e03cb19759857a646da6", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/0530a57917b26d7555d0e03cb19759857a646da6", "committedDate": "2020-04-22T15:51:56Z", "message": "AWS NLP - Entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3ac3e861a8a38cd3422e0c9d8f7ca629655eb2c", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/b3ac3e861a8a38cd3422e0c9d8f7ca629655eb2c", "committedDate": "2020-04-22T15:51:56Z", "message": "handle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1554668b566ae540bbb8a2855b7860cad49a85f", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/a1554668b566ae540bbb8a2855b7860cad49a85f", "committedDate": "2020-04-22T15:51:56Z", "message": "Add tests for error conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c79c825487cba8c8617619e9dae359cb8e64d3f", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9c79c825487cba8c8617619e9dae359cb8e64d3f", "committedDate": "2020-04-22T15:51:56Z", "message": "Add tests for result transformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea1d6baee8a18d55f1db0c9a8357ee3cedddb6c", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9ea1d6baee8a18d55f1db0c9a8357ee3cedddb6c", "committedDate": "2020-04-22T15:51:56Z", "message": "aws docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d471d4c52d67b5ab4794d518ff26a75ee83ffa", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/f6d471d4c52d67b5ab4794d518ff26a75ee83ffa", "committedDate": "2020-04-22T15:51:56Z", "message": "wip: graph version of AWS Procs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4cb2c49ad2a21eb6fc9a6ed7773bbee97d9596f", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c4cb2c49ad2a21eb6fc9a6ed7773bbee97d9596f", "committedDate": "2020-04-22T15:51:56Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeca46e968fc0f123fd870b622108c0088f66c29", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/aeca46e968fc0f123fd870b622108c0088f66c29", "committedDate": "2020-04-22T15:51:56Z", "message": "pull out matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9055f033066d63f5774ac6e80c4ff0f4c6b38591", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9055f033066d63f5774ac6e80c4ff0f4c6b38591", "committedDate": "2020-04-22T15:51:56Z", "message": "add tests for NodeMatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5d6d8b4c52da0840f653d0d6db6568625ab7b8", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/fb5d6d8b4c52da0840f653d0d6db6568625ab7b8", "committedDate": "2020-04-22T15:51:56Z", "message": "test relationship matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9835b8fa56920d1879df7add64b7e12fc4a47e67", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9835b8fa56920d1879df7add64b7e12fc4a47e67", "committedDate": "2020-04-22T15:51:56Z", "message": "simplify transformResults function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d723aa52c9b0e17df3b5cc8e14b79f820eaa3e", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/d9d723aa52c9b0e17df3b5cc8e14b79f820eaa3e", "committedDate": "2020-04-22T15:51:56Z", "message": "pull out virtual graph fn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb0f9aab213595573717f4c585535dc2fd049db", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9eb0f9aab213595573717f4c585535dc2fd049db", "committedDate": "2020-04-22T15:51:56Z", "message": "virtual graph test with one source node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad82a7674bda31f96fd439522204fa17c819eb8f", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/ad82a7674bda31f96fd439522204fa17c819eb8f", "committedDate": "2020-04-22T15:51:56Z", "message": "virtual graph with multiple source nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a49a46913201f27cbdaa42eb59924ad59494d5d", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/4a49a46913201f27cbdaa42eb59924ad59494d5d", "committedDate": "2020-04-22T15:51:56Z", "message": "virtual graph with multiple source nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f4774f285ca5d6e298f048deac917e1ddd2cb9", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/20f4774f285ca5d6e298f048deac917e1ddd2cb9", "committedDate": "2020-04-22T15:51:56Z", "message": "Encapsulate NLP Virtual Graph logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c812ab3b5b518dc8f29af81143efaa2721116a50", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c812ab3b5b518dc8f29af81143efaa2721116a50", "committedDate": "2020-04-22T15:51:56Z", "message": "update AWS docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41c1f6d978d3bb1890d7be0155b5723837bf7995", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/41c1f6d978d3bb1890d7be0155b5723837bf7995", "committedDate": "2020-04-22T15:51:56Z", "message": "add more aws docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922d2647be1521269461815aaec0b234fdc144d9", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/922d2647be1521269461815aaec0b234fdc144d9", "committedDate": "2020-04-22T15:51:56Z", "message": "more docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9eb62048dcc76913314673e463e917a5e8b6d1", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9a9eb62048dcc76913314673e463e917a5e8b6d1", "committedDate": "2020-04-22T16:54:15Z", "message": "add assertions to API test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "758d8e012dfce391e468c988c53cbc7b8db84114", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/758d8e012dfce391e468c988c53cbc7b8db84114", "committedDate": "2020-04-22T14:57:35Z", "message": "more docs"}, "afterCommit": {"oid": "9a9eb62048dcc76913314673e463e917a5e8b6d1", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/9a9eb62048dcc76913314673e463e917a5e8b6d1", "committedDate": "2020-04-22T16:54:15Z", "message": "add assertions to API test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 914, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}