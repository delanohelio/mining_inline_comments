{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjM5NTk3", "number": 1475, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyMjo0OVrODxso3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyMjo0OVrODxso3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDM4MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/apoc/trigger/Trigger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyMjo0OVrOGFUCBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyNDoxMVrOGFUGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNDI2MA==", "bodyText": "Should this be synchronized, in case multiple callers invoke procedures simultaneously?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1475#discussion_r408224260", "createdAt": "2020-04-14T15:22:49Z", "author": {"login": "jakewins"}, "path": "src/main/java/apoc/trigger/Trigger.java", "diffHunk": "@@ -148,80 +149,107 @@ public TriggerInfo toTriggerInfo(Map.Entry<String, Object> e) {\n     @Procedure(mode = Mode.WRITE)\n     @Description(\"list all installed triggers\")\n     public Stream<TriggerInfo> list() {\n-        return TriggerHandler.list().entrySet().stream()\n+        return TriggerHandler.getInstance().list().entrySet().stream()\n                 .map( (e) -> new TriggerInfo(e.getKey(),(String)e.getValue().get(\"kernelTransaction\"),(Map<String,Object>)e.getValue().get(\"selector\"), (Map<String, Object>) e.getValue().get(\"params\"),true, (Boolean) e.getValue().get(\"paused\")));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.pause(name) | it pauses the trigger\")\n     public Stream<TriggerInfo> pause(@Name(\"name\")String name) {\n-        Map<String, Object> paused = TriggerHandler.paused(name);\n+        Map<String, Object> paused = TriggerHandler.getInstance().paused(name);\n \n         return Stream.of(new TriggerInfo(name,(String)paused.get(\"kernelTransaction\"), (Map<String,Object>) paused.get(\"selector\"), (Map<String,Object>) paused.get(\"params\"),true, true));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.resume(name) | it resumes the paused trigger\")\n     public Stream<TriggerInfo> resume(@Name(\"name\")String name) {\n-        Map<String, Object> resume = TriggerHandler.resume(name);\n+        Map<String, Object> resume = TriggerHandler.getInstance().resume(name);\n \n         return Stream.of(new TriggerInfo(name,(String)resume.get(\"kernelTransaction\"), (Map<String,Object>) resume.get(\"selector\"), (Map<String,Object>) resume.get(\"params\"),true, false));\n     }\n \n     public static class TriggerHandler implements TransactionEventHandler {\n         public static final String APOC_TRIGGER = \"apoc.trigger\";\n-        static ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n-        private static GraphProperties properties;\n+        private final ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n+        private final GraphProperties properties;\n         private final Log log;\n \n         public static final String NOT_ENABLED_ERROR = \"Triggers have not been enabled.\" +\n                 \" Set 'apoc.trigger.enabled=true' in your neo4j.conf file located in the $NEO4J_HOME/conf/ directory.\";\n+        private final GraphDatabaseService db;\n+        private final AtomicBoolean registeredWithKernel = new AtomicBoolean(false);\n \n-        public TriggerHandler(GraphDatabaseAPI api, Log log) {\n+        private static TriggerHandler instance;\n+\n+        private TriggerHandler(GraphDatabaseAPI api, Log log) {\n             properties = api.getDependencyResolver().resolveDependency(EmbeddedProxySPI.class).newGraphPropertiesProxy();\n //            Pools.SCHEDULED.submit(() -> updateTriggers(null,null));\n             this.log = log;\n+            this.db = api;\n         }\n \n-        public static void checkEnabled() {\n+        public static TriggerHandler initialize(GraphDatabaseAPI api, Log log) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18256280a54b01ebe51f9804bf3951ccee6bbc83"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTMzMA==", "bodyText": "Oop, nvm, only called from start()", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1475#discussion_r408225330", "createdAt": "2020-04-14T15:24:11Z", "author": {"login": "jakewins"}, "path": "src/main/java/apoc/trigger/Trigger.java", "diffHunk": "@@ -148,80 +149,107 @@ public TriggerInfo toTriggerInfo(Map.Entry<String, Object> e) {\n     @Procedure(mode = Mode.WRITE)\n     @Description(\"list all installed triggers\")\n     public Stream<TriggerInfo> list() {\n-        return TriggerHandler.list().entrySet().stream()\n+        return TriggerHandler.getInstance().list().entrySet().stream()\n                 .map( (e) -> new TriggerInfo(e.getKey(),(String)e.getValue().get(\"kernelTransaction\"),(Map<String,Object>)e.getValue().get(\"selector\"), (Map<String, Object>) e.getValue().get(\"params\"),true, (Boolean) e.getValue().get(\"paused\")));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.pause(name) | it pauses the trigger\")\n     public Stream<TriggerInfo> pause(@Name(\"name\")String name) {\n-        Map<String, Object> paused = TriggerHandler.paused(name);\n+        Map<String, Object> paused = TriggerHandler.getInstance().paused(name);\n \n         return Stream.of(new TriggerInfo(name,(String)paused.get(\"kernelTransaction\"), (Map<String,Object>) paused.get(\"selector\"), (Map<String,Object>) paused.get(\"params\"),true, true));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.resume(name) | it resumes the paused trigger\")\n     public Stream<TriggerInfo> resume(@Name(\"name\")String name) {\n-        Map<String, Object> resume = TriggerHandler.resume(name);\n+        Map<String, Object> resume = TriggerHandler.getInstance().resume(name);\n \n         return Stream.of(new TriggerInfo(name,(String)resume.get(\"kernelTransaction\"), (Map<String,Object>) resume.get(\"selector\"), (Map<String,Object>) resume.get(\"params\"),true, false));\n     }\n \n     public static class TriggerHandler implements TransactionEventHandler {\n         public static final String APOC_TRIGGER = \"apoc.trigger\";\n-        static ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n-        private static GraphProperties properties;\n+        private final ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n+        private final GraphProperties properties;\n         private final Log log;\n \n         public static final String NOT_ENABLED_ERROR = \"Triggers have not been enabled.\" +\n                 \" Set 'apoc.trigger.enabled=true' in your neo4j.conf file located in the $NEO4J_HOME/conf/ directory.\";\n+        private final GraphDatabaseService db;\n+        private final AtomicBoolean registeredWithKernel = new AtomicBoolean(false);\n \n-        public TriggerHandler(GraphDatabaseAPI api, Log log) {\n+        private static TriggerHandler instance;\n+\n+        private TriggerHandler(GraphDatabaseAPI api, Log log) {\n             properties = api.getDependencyResolver().resolveDependency(EmbeddedProxySPI.class).newGraphPropertiesProxy();\n //            Pools.SCHEDULED.submit(() -> updateTriggers(null,null));\n             this.log = log;\n+            this.db = api;\n         }\n \n-        public static void checkEnabled() {\n+        public static TriggerHandler initialize(GraphDatabaseAPI api, Log log) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNDI2MA=="}, "originalCommit": {"oid": "18256280a54b01ebe51f9804bf3951ccee6bbc83"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4310, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}