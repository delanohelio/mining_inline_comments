{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDI0Nzg5", "number": 1401, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMToyOFrODe10nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToyNzo1N1rODe2QyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjY1NjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/apoc/meta/Meta.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMToyOFrOFoMvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo0NTo0MlrOFpNH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjA1Mw==", "bodyText": "printStackTrace isn't good error handling. Maybe use log.warn to dump the stacetrace and rethrow it wrapped into a RuntimeException", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377696053", "createdAt": "2020-02-11T15:11:28Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MDk3MQ==", "bodyText": "Done - pushed the stacktrace to debug (instead of warn) and wrapped in RuntimeException. As it's something that shouldn't really happen, I thought debug would be better than warn.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r378750971", "createdAt": "2020-02-13T09:45:42Z", "author": {"login": "neoarchitect"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjA1Mw=="}, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjY1ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/apoc/meta/Meta.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMTo1M1rOFoMwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo0NTo1M1rOFpNIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjMxNA==", "bodyText": "same as above on error handling", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377696314", "createdAt": "2020-02-11T15:11:53Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MTA4Mg==", "bodyText": "Done - pushed the stacktrace to debug (instead of warn) and wrapped in RuntimeException. As it's something that shouldn't really happen, I thought debug would be better than warn.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r378751082", "createdAt": "2020-02-13T09:45:53Z", "author": {"login": "neoarchitect"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NjMxNA=="}, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjY2ODE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/apoc/meta/Meta.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxNDoxMVrOFoM2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo0ODozOVrOFpNN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NzgzNQ==", "bodyText": "continue is IMO bad practice. Instead use a if (!badCondition) { /* do stuff */ }", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377697835", "createdAt": "2020-02-11T15:14:11Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    private Tables4LabelsProfile collectTables4LabelsProfile (MetaConfig config) {\n+        Tables4LabelsProfile profile = new Tables4LabelsProfile();\n+\n+        Schema schema = tx.schema();\n+\n+        Map<String, Iterable<ConstraintDefinition>> relConstraints = new HashMap<>(20);\n+\n+        for (RelationshipType type : tx.getAllRelationshipTypesInUse()) {\n+            List<ConstraintDefinition> tcd = new ArrayList<ConstraintDefinition>();\n+            for (ConstraintDefinition cd : schema.getConstraints(type)) {\n+                if (cd.isConstraintType(ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE)) {\n+                    tcd.add(cd);\n+                }\n+            }\n+            relConstraints.put(type.name(),tcd);\n+        }\n+\n+        Map<String, Long> countStore = getLabelCountStore();\n+\n+        Set<String> includeLabels = config.getIncludesLabels();\n+        Set<String> excludes = config.getExcludes();\n+\n+        Set<String> includeRels = config.getIncludesRels();\n+        Set<String> excludeRels = config.getExcludeRels();\n+\n+        for (Label label : tx.getAllLabelsInUse()) {\n+            String labelName = label.name();\n+\n+            if (excludes.contains(labelName)) {\n+                // Skip if explicitly excluded\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MjQ4Mg==", "bodyText": "I changed it and wrapped the code in an if predicate. I'm not too concerned with continue's usually, but I can see where it could be an issue. Performance wise this might save a few clock cycles too (not really sure)!", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r378752482", "createdAt": "2020-02-13T09:48:39Z", "author": {"login": "neoarchitect"}, "path": "src/main/java/apoc/meta/Meta.java", "diffHunk": "@@ -430,6 +432,126 @@ private void collectStats(Collection<String> labelNames, Collection<String> relT\n         return Stream.of(new MapResult(nodes));\n     }\n \n+\n+    // Start new code\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.nodeTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.NodeTypePropertiesEntry> nodeTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asNodeStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This procedure is intended to replicate what's in the core Neo4j product, but with the crucial difference that it\n+     * supports flexible sampling options, and does not scan the entire database.  The result is producing a table of\n+     * metadata that is useful for generating \"Tables 4 Labels\" schema designs for RDBMSs, but in a more performant way.\n+     */\n+    @Procedure\n+    @Description(\"apoc.meta.relTypeProperties()\")\n+    public Stream<Tables4LabelsProfile.RelTypePropertiesEntry> relTypeProperties(@Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {\n+        MetaConfig metaConfig = new MetaConfig(config);\n+        try {\n+            return collectTables4LabelsProfile(metaConfig).asRelStream();\n+        } catch (Exception exc) {\n+            exc.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+    private Tables4LabelsProfile collectTables4LabelsProfile (MetaConfig config) {\n+        Tables4LabelsProfile profile = new Tables4LabelsProfile();\n+\n+        Schema schema = tx.schema();\n+\n+        Map<String, Iterable<ConstraintDefinition>> relConstraints = new HashMap<>(20);\n+\n+        for (RelationshipType type : tx.getAllRelationshipTypesInUse()) {\n+            List<ConstraintDefinition> tcd = new ArrayList<ConstraintDefinition>();\n+            for (ConstraintDefinition cd : schema.getConstraints(type)) {\n+                if (cd.isConstraintType(ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE)) {\n+                    tcd.add(cd);\n+                }\n+            }\n+            relConstraints.put(type.name(),tcd);\n+        }\n+\n+        Map<String, Long> countStore = getLabelCountStore();\n+\n+        Set<String> includeLabels = config.getIncludesLabels();\n+        Set<String> excludes = config.getExcludes();\n+\n+        Set<String> includeRels = config.getIncludesRels();\n+        Set<String> excludeRels = config.getExcludeRels();\n+\n+        for (Label label : tx.getAllLabelsInUse()) {\n+            String labelName = label.name();\n+\n+            if (excludes.contains(labelName)) {\n+                // Skip if explicitly excluded\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NzgzNQ=="}, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjcyOTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/apoc/meta/tablesforlabels/OrderedLabels.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToyNzo1N1rOFoNbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo0OTozM1rOFpNPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwNzQ1MA==", "bodyText": "I guess it's more concise to use java 8 streams for mapping and sorting?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r377707450", "createdAt": "2020-02-11T15:27:57Z", "author": {"login": "sarmbruster"}, "path": "src/main/java/apoc/meta/tablesforlabels/OrderedLabels.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package apoc.meta.tablesforlabels;\n+\n+import apoc.meta.Tables4LabelsProfile;\n+import org.neo4j.graphdb.Label;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Abstraction on an ordered label set, used as a key for tables for labels profiles\n+ */\n+public class OrderedLabels {\n+    List<String> labels;\n+\n+    public OrderedLabels(Iterable<Label> input) {\n+        labels = new ArrayList<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1Mjk1MA==", "bodyText": "For minimal changes between 3.5 and 4.0 I didn't change it, but if you think updating this would help, let me know. We're in a bit of a time crunch, so unless critical I'd rather leave it.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1401#discussion_r378752950", "createdAt": "2020-02-13T09:49:33Z", "author": {"login": "neoarchitect"}, "path": "src/main/java/apoc/meta/tablesforlabels/OrderedLabels.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package apoc.meta.tablesforlabels;\n+\n+import apoc.meta.Tables4LabelsProfile;\n+import org.neo4j.graphdb.Label;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Abstraction on an ordered label set, used as a key for tables for labels profiles\n+ */\n+public class OrderedLabels {\n+    List<String> labels;\n+\n+    public OrderedLabels(Iterable<Label> input) {\n+        labels = new ArrayList<>(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwNzQ1MA=="}, "originalCommit": {"oid": "9f4f9d0ce81f673bcdc076896d7cab6955287413"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4345, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}