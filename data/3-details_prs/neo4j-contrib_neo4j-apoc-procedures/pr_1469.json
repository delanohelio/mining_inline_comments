{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDk2NTU1", "number": 1469, "title": "Procedures wrapping Google Natural Language API", "bodyText": "Fixes #<Replace with the number of the issue, Mandatory>\nOne sentence summary of the change.\nProposed Changes (Mandatory)\nA brief list of proposed changes in order to fix the issue:", "createdAt": "2020-04-01T16:17:49Z", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469", "merged": true, "mergeCommit": {"oid": "e74dfc55e876fd56411693d6975856583208f6b7"}, "closed": true, "closedAt": "2020-04-03T09:44:46Z", "author": {"login": "mneedham"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTpBNGABqjMxOTEzNzM2NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT9tJhAH2gAyMzk3MDk2NTU1OmMxMGU0YmI3NGU0ZjYzN2RiY2RlMTYzYjU1YWM1ZmIyMTc2NjNkZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "066cfc843e842fd8f9d38bd680c80f305058c1cc", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/066cfc843e842fd8f9d38bd680c80f305058c1cc", "committedDate": "2020-04-01T16:17:39Z", "message": "undo publishing"}, "afterCommit": {"oid": "fe2d44fd3961d3da62097fca5e1998da499f5dff", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/fe2d44fd3961d3da62097fca5e1998da499f5dff", "committedDate": "2020-04-02T09:37:56Z", "message": "undo publishing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe2d44fd3961d3da62097fca5e1998da499f5dff", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/fe2d44fd3961d3da62097fca5e1998da499f5dff", "committedDate": "2020-04-02T09:37:56Z", "message": "undo publishing"}, "afterCommit": {"oid": "1d1d7a0c646060d66b73f1ce081ae2f517e3ca4f", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/1d1d7a0c646060d66b73f1ce081ae2f517e3ca4f", "committedDate": "2020-04-02T09:37:56Z", "message": "comment out undocumented procs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDA3NDM2", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#pullrequestreview-387007436", "createdAt": "2020-04-03T07:35:05Z", "commit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNTowNVrOGAIVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTo1N1rOGAJneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTc2Mg==", "bodyText": "As we incorporated the project into apoc I think that we can get rid of this and use MapResult instead", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402789762", "createdAt": "2020-04-03T07:35:05Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/ai/dto/AIResult.kt", "diffHunk": "@@ -0,0 +1,3 @@\n+package apoc.ai.dto\n+\n+data class AIMapResult(@JvmField val response: Map<String, Any?>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDk4NQ==", "bodyText": "As we incorporated the project into apoc I think that we can get rid of this and use JsonUtil.OBJECT_MAPPER instead", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402790985", "createdAt": "2020-04-03T07:37:26Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPClient.kt", "diffHunk": "@@ -0,0 +1,53 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import com.fasterxml.jackson.databind.SerializationFeature\n+import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\n+import org.neo4j.logging.Log\n+import java.io.DataOutputStream\n+import java.net.URL\n+import javax.net.ssl.HttpsURLConnection\n+\n+\n+enum class GCPEndpoint(val method: String) {\n+    CLASSIFY(\"/documents:classifyText\"),\n+    SENTIMENT(\"/documents:analyzeSentiment\"),\n+    ENTITIES(\"/documents:analyzeEntities\")\n+}\n+\n+class GCPClient( private val key: String, private val log: Log) {\n+    private val baseUrl = \"https://language.googleapis.com/v1\"\n+\n+    companion object {\n+        @JvmStatic val MAPPER = jacksonObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MjY0Nw==", "bodyText": "we can use the functional if here as well", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402792647", "createdAt": "2020-04-03T07:40:35Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "diffHunk": "@@ -0,0 +1,176 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.result.RelationshipResult\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class GCPProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(entities(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = entities(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Entity{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"entities\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {\n+            mergeRelationships(sourceNode, nodes, entityRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n+            nodes.add(sourceNode)\n+        } else {\n+            val virtualNode = VirtualNode(sourceNode, sourceNode.propertyKeys.toList())\n+            createRelationships(virtualNode, nodes, entityRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n+            nodes.add(virtualNode)\n+        }\n+\n+        return Stream.of(VirtualGraph(\"Graph\", nodes, relationships, emptyMap()))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.classify.stream\", mode = Mode.READ)\n+    @Description(\"Classifies a document into categories.\")\n+    fun classifyStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(classify(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.classify.graph\", mode = Mode.WRITE)\n+    @Description(\"Classifies a document into categories.\")\n+    fun classifyGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = classify(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Category{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"categories\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwOTM2Mw==", "bodyText": "We can use single line string here:\nneo4j.executeTransactionally(\"CREATE (a:Article {body: $body})\", mapOf(\"body\" to body))", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402809363", "createdAt": "2020-04-03T08:04:18Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+package apoc.nlp.gcp\n+\n+import apoc.util.TestUtil\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+class GCPProceduresTest {\n+    companion object {\n+        val body = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, GCPProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to body))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwOTUzNg==", "bodyText": "same here", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402809536", "createdAt": "2020-04-03T08:04:32Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+package apoc.nlp.gcp\n+\n+import apoc.util.TestUtil\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+class GCPProceduresTest {\n+    companion object {\n+        val body = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, GCPProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to body))\n+        neo4j.executeTransactionally(\"MATCH (a:Article) RETURN a\", emptyMap()) {\n+            println(it.resultAsString())\n+        }\n+        neo4j.executeTransactionally(\"\"\"\n+                    MATCH (a:Article)\n+                    CALL apoc.nlp.gcp.entities.stream(a, {\n+                      key: ${'$'}apiKey,\n+                      nodeProperty: \"body\"\n+                    })\n+                    YIELD response\n+                    RETURN response\n+                \"\"\".trimIndent(), mapOf(\"apiKey\" to apiKey)) {\n+            println(it.resultAsString())\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities as virtual graph`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {id: 1234, body:${'$'}body})\"\"\", mapOf(\"body\" to body))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMDc0Ng==", "bodyText": "we can use a functional way to do this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(storeGraph) {\n          \n          \n            \n                    val node = if(storeGraph) {\n          \n          \n            \n                        mergeRelationships(sourceNode, nodes, classifyRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n          \n          \n            \n                        sourceNode\n          \n          \n            \n                    } else {\n          \n          \n            \n                        val virtualNode = VirtualNode(sourceNode, sourceNode.propertyKeys.toList())\n          \n          \n            \n                        createRelationships(virtualNode, nodes, classifyRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n          \n          \n            \n                        virtualNode\n          \n          \n            \n                    }\n          \n          \n            \n                    nodes.add(node)", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402810746", "createdAt": "2020-04-03T08:05:57Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "diffHunk": "@@ -0,0 +1,176 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.result.RelationshipResult\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class GCPProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(entities(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = entities(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Entity{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"entities\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5d7cdb260b305bdaf5a482cd43c3954597211a7", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/a5d7cdb260b305bdaf5a482cd43c3954597211a7", "committedDate": "2020-04-03T09:27:03Z", "message": "Procedures to wrap Cloud NLP APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c09431f5fd2a6a09a6d3b5bfba54e5c17ddfb29", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/0c09431f5fd2a6a09a6d3b5bfba54e5c17ddfb29", "committedDate": "2020-04-03T09:27:03Z", "message": "docs for GCP NLP API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b199cdd42169a4b5f42344fb95a11c6bac6a9be", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/3b199cdd42169a4b5f42344fb95a11c6bac6a9be", "committedDate": "2020-04-03T09:27:03Z", "message": "merge rels don't create them"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a989f085fc2cd2d4c79f14e3bf519d6cc9669c37", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/a989f085fc2cd2d4c79f14e3bf519d6cc9669c37", "committedDate": "2020-04-03T09:27:03Z", "message": "comment out undocumented procs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa6f8916f4f07a50a94d0699609578786d6a8483", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/aa6f8916f4f07a50a94d0699609578786d6a8483", "committedDate": "2020-04-03T09:27:03Z", "message": "ai -> nlp based on Michael feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6dc4109f420cb713d6b36d3fe560493eabbdfe3", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/b6dc4109f420cb713d6b36d3fe560493eabbdfe3", "committedDate": "2020-04-03T09:27:03Z", "message": "Address Andrea feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/a26e89f61c2d73e454bd8573c6d0a97596097cdd", "committedDate": "2020-04-02T10:55:11Z", "message": "ai -> nlp based on Michael feedback"}, "afterCommit": {"oid": "b6dc4109f420cb713d6b36d3fe560493eabbdfe3", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/b6dc4109f420cb713d6b36d3fe560493eabbdfe3", "committedDate": "2020-04-03T09:27:03Z", "message": "Address Andrea feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTA0Njcx", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#pullrequestreview-387104671", "createdAt": "2020-04-03T09:38:44Z", "commit": {"oid": "b6dc4109f420cb713d6b36d3fe560493eabbdfe3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10e4bb74e4f637dbcde163b55ac5fb217663dda", "author": {"user": {"login": "mneedham", "name": "Mark Needham"}}, "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c10e4bb74e4f637dbcde163b55ac5fb217663dda", "committedDate": "2020-04-03T09:44:10Z", "message": "update field"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 905, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}