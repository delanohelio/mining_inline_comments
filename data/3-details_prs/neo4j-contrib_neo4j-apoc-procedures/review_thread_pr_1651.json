{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTEzNDkw", "number": 1651, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoyNjo1MlrOEgz9OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo1MTo0MVrOEg0oaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODQxMTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/apoc/ApocConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoyNjo1MlrOHNzMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo0NTozNVrOHNz3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIzMjM3MA==", "bodyText": "It's nice if you're deprecating things to add some info on what the replacement is:\ne.g.\n/**\n     * @deprecated\n     * This has been replaced by database-specific initialisers.\n     * Use apoc.initializer.<database name> instead.\n     */", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484232370", "createdAt": "2020-09-07T07:26:52Z", "author": {"login": "eastlondoner"}, "path": "core/src/main/java/apoc/ApocConfig.java", "diffHunk": "@@ -57,7 +57,9 @@\n     public static final String APOC_CONFIG_JOBS_SCHEDULED_NUM_THREADS = \"apoc.jobs.scheduled.num_threads\";\n     public static final String APOC_CONFIG_JOBS_POOL_NUM_THREADS = \"apoc.jobs.pool.num_threads\";\n     public static final String APOC_CONFIG_JOBS_QUEUE_SIZE = \"apoc.jobs.queue.size\";\n-    public static final String APOC_CONFIG_INITIALIZER_CYPHER = \"apoc.initializer.cypher\";\n+    public static final String APOC_CONFIG_INITIALIZER = \"apoc.initializer\";\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4da1e169b7a9d0c1d92ae64aeedd8d4c64cd98d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0MzMwOQ==", "bodyText": "good catch, added your suggestions.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484243309", "createdAt": "2020-09-07T07:45:35Z", "author": {"login": "sarmbruster"}, "path": "core/src/main/java/apoc/ApocConfig.java", "diffHunk": "@@ -57,7 +57,9 @@\n     public static final String APOC_CONFIG_JOBS_SCHEDULED_NUM_THREADS = \"apoc.jobs.scheduled.num_threads\";\n     public static final String APOC_CONFIG_JOBS_POOL_NUM_THREADS = \"apoc.jobs.pool.num_threads\";\n     public static final String APOC_CONFIG_JOBS_QUEUE_SIZE = \"apoc.jobs.queue.size\";\n-    public static final String APOC_CONFIG_INITIALIZER_CYPHER = \"apoc.initializer.cypher\";\n+    public static final String APOC_CONFIG_INITIALIZER = \"apoc.initializer\";\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIzMjM3MA=="}, "originalCommit": {"oid": "d4da1e169b7a9d0c1d92ae64aeedd8d4c64cd98d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODUxODkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo1MToxMFrOHN0MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoxNjo0MFrOHN5nCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0ODc1Ng==", "bodyText": "can we move this higher as a guard clause and just return from the method?\nalso can this whole collecting initializers go into a separate method?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484248756", "createdAt": "2020-09-07T07:51:10Z", "author": {"login": "jexp"}, "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de2174e09f3c19125d1a0edef98bc85fb5c187d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzNzQxOA==", "bodyText": "moving higher doesn't make a lot of sense IMO. We do want to execute initializers for any db (including system). Systemdb is just treated differently.\nCollecting initializers is now in a separate method, see my commit below.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484337418", "createdAt": "2020-09-07T10:16:40Z", "author": {"login": "sarmbruster"}, "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0ODc1Ng=="}, "originalCommit": {"oid": "4de2174e09f3c19125d1a0edef98bc85fb5c187d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODUyMjAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo1MTo0MVrOHN0Odg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzo1NjoyMVrOHN0giA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0OTIwNg==", "bodyText": "what is an example of this?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484249206", "createdAt": "2020-09-07T07:51:41Z", "author": {"login": "jexp"}, "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {\n+                    config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+                }\n \n                 for (Object initializer : initializers.values()) {\n                     String query = initializer.toString();\n-                    try {\n-                        db.executeTransactionally(query);\n-                        userLog.info(\"successfully initialized: \" + query);\n-                    } catch (Exception e) {\n-                        userLog.warn(\"error upon initialization, running: \" + query, e);\n+                    if (!query.isEmpty()) {\n+                        try {\n+                            // we need to apply a retry strategy here since in systemdb we potentially conflict with\n+                            // creating contraints which could cause our query to fail with a transient error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de2174e09f3c19125d1a0edef98bc85fb5c187d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI1MzgzMg==", "bodyText": "when not having the retry strategy I found that an initializer of apoc.initializer.system=create user dummy set password 'abc' resulted in a transaction failed since a concurrent transaction was setting up a constraint.", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484253832", "createdAt": "2020-09-07T07:56:21Z", "author": {"login": "sarmbruster"}, "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {\n+                    config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+                }\n \n                 for (Object initializer : initializers.values()) {\n                     String query = initializer.toString();\n-                    try {\n-                        db.executeTransactionally(query);\n-                        userLog.info(\"successfully initialized: \" + query);\n-                    } catch (Exception e) {\n-                        userLog.warn(\"error upon initialization, running: \" + query, e);\n+                    if (!query.isEmpty()) {\n+                        try {\n+                            // we need to apply a retry strategy here since in systemdb we potentially conflict with\n+                            // creating contraints which could cause our query to fail with a transient error.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0OTIwNg=="}, "originalCommit": {"oid": "4de2174e09f3c19125d1a0edef98bc85fb5c187d"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4276, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}