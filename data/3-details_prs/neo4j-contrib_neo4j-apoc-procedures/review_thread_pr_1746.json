{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjIyMDQ3", "number": 1746, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNjozMlrOFGr83Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNzowMFrOFGr9jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTU1ODY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/apoc/util/CompressionAlgo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNjozMlrOIHzpUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNjozMlrOIHzpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1NzEwNQ==", "bodyText": "this should be a byte[]", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1746#discussion_r545057105", "createdAt": "2020-12-17T12:36:32Z", "author": {"login": "jexp"}, "path": "core/src/main/java/apoc/util/CompressionAlgo.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package apoc.util;\n+\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n+import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;\n+import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;\n+import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;\n+import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.reflect.Constructor;\n+import java.nio.charset.Charset;\n+import java.util.List;\n+\n+import static apoc.util.Util.convertFromBytesToList;\n+import static apoc.util.Util.convertFromListToBytes;\n+\n+public enum CompressionAlgo {\n+\n+    GZIP(GzipCompressorOutputStream.class, GzipCompressorInputStream.class),\n+    BZIP2(BZip2CompressorOutputStream.class, BZip2CompressorInputStream.class),\n+    DEFLATE(DeflateCompressorOutputStream.class, DeflateCompressorInputStream.class),\n+    BLOCK_LZ4(BlockLZ4CompressorOutputStream.class, BlockLZ4CompressorInputStream.class),\n+    FRAMED_SNAPPY(FramedSnappyCompressorOutputStream.class, FramedSnappyCompressorInputStream.class);\n+\n+    private final Class<?> compressor;\n+    private final Class<?> decompressor;\n+\n+    CompressionAlgo(Class<?> compressor, Class<?> decompressor) {\n+        this.compressor = compressor;\n+        this.decompressor = decompressor;\n+    }\n+\n+    public List<Long> compress(String string, Charset charset) throws Exception {\n+        Constructor<?> constructor = compressor.getConstructor(OutputStream.class);\n+        try (ByteArrayOutputStream stream = new ByteArrayOutputStream()) {\n+            try (OutputStream outputStream = (OutputStream) constructor.newInstance((OutputStream) stream)) {\n+                outputStream.write(string.getBytes(charset));\n+            }\n+            return convertFromBytesToList(stream.toByteArray());\n+        }\n+    }\n+\n+    public String decompress(List<Long> byteArray, Charset charset) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ae0f19ecb74dac6ae99d9fc6f179ddf5aa8351"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTU2MDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/apoc/util/Util.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNzowMFrOIHzqVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozNzowMFrOIHzqVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1NzM2NA==", "bodyText": "this is a big waste of memory we should not do that", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1746#discussion_r545057364", "createdAt": "2020-12-17T12:37:00Z", "author": {"login": "jexp"}, "path": "core/src/main/java/apoc/util/Util.java", "diffHunk": "@@ -913,4 +914,19 @@ public static Thread newDaemonThread(Runnable target) {\n         thread.setDaemon(true);\n         return thread;\n     }\n+\n+    public static List<Long> convertFromBytesToList(byte[] bytes) {\n+        List<Long> result = new ArrayList<>(bytes.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ae0f19ecb74dac6ae99d9fc6f179ddf5aa8351"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4297, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}