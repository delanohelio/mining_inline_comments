{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDk2NTU1", "number": 1469, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNTowNVrODuPaoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTo1N1rODuQTtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODEzNjY0OnYy", "diffSide": "RIGHT", "path": "src/main/kotlin/apoc/ai/dto/AIResult.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNTowNVrOGAIVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNTowNVrOGAIVgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTc2Mg==", "bodyText": "As we incorporated the project into apoc I think that we can get rid of this and use MapResult instead", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402789762", "createdAt": "2020-04-03T07:35:05Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/ai/dto/AIResult.kt", "diffHunk": "@@ -0,0 +1,3 @@\n+package apoc.ai.dto\n+\n+data class AIMapResult(@JvmField val response: Map<String, Any?>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE0NDY2OnYy", "diffSide": "RIGHT", "path": "src/main/kotlin/apoc/nlp/gcp/GCPClient.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNzoyNlrOGAIaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNzoyNlrOGAIaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDk4NQ==", "bodyText": "As we incorporated the project into apoc I think that we can get rid of this and use JsonUtil.OBJECT_MAPPER instead", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402790985", "createdAt": "2020-04-03T07:37:26Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPClient.kt", "diffHunk": "@@ -0,0 +1,53 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import com.fasterxml.jackson.databind.SerializationFeature\n+import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\n+import org.neo4j.logging.Log\n+import java.io.DataOutputStream\n+import java.net.URL\n+import javax.net.ssl.HttpsURLConnection\n+\n+\n+enum class GCPEndpoint(val method: String) {\n+    CLASSIFY(\"/documents:classifyText\"),\n+    SENTIMENT(\"/documents:analyzeSentiment\"),\n+    ENTITIES(\"/documents:analyzeEntities\")\n+}\n+\n+class GCPClient( private val key: String, private val log: Log) {\n+    private val baseUrl = \"https://language.googleapis.com/v1\"\n+\n+    companion object {\n+        @JvmStatic val MAPPER = jacksonObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE1NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0MDozNVrOGAIgxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0MDozNVrOGAIgxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MjY0Nw==", "bodyText": "we can use the functional if here as well", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402792647", "createdAt": "2020-04-03T07:40:35Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "diffHunk": "@@ -0,0 +1,176 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.result.RelationshipResult\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class GCPProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(entities(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = entities(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Entity{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"entities\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {\n+            mergeRelationships(sourceNode, nodes, entityRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n+            nodes.add(sourceNode)\n+        } else {\n+            val virtualNode = VirtualNode(sourceNode, sourceNode.propertyKeys.toList())\n+            createRelationships(virtualNode, nodes, entityRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n+            nodes.add(virtualNode)\n+        }\n+\n+        return Stream.of(VirtualGraph(\"Graph\", nodes, relationships, emptyMap()))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.classify.stream\", mode = Mode.READ)\n+    @Description(\"Classifies a document into categories.\")\n+    fun classifyStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(classify(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.classify.graph\", mode = Mode.WRITE)\n+    @Description(\"Classifies a document into categories.\")\n+    fun classifyGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = classify(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Category{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"categories\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI3MzIxOnYy", "diffSide": "RIGHT", "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNDoxOFrOGAJiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyNToxMVrOGANknA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwOTM2Mw==", "bodyText": "We can use single line string here:\nneo4j.executeTransactionally(\"CREATE (a:Article {body: $body})\", mapOf(\"body\" to body))", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402809363", "createdAt": "2020-04-03T08:04:18Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+package apoc.nlp.gcp\n+\n+import apoc.util.TestUtil\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+class GCPProceduresTest {\n+    companion object {\n+        val body = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, GCPProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to body))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0OA==", "bodyText": "I thought it'll read the body variable from Kotlin if I do that, whereas I wanted it to read the Neo4j parameter?", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402875548", "createdAt": "2020-04-03T09:25:11Z", "author": {"login": "mneedham"}, "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+package apoc.nlp.gcp\n+\n+import apoc.util.TestUtil\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+class GCPProceduresTest {\n+    companion object {\n+        val body = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, GCPProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to body))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwOTM2Mw=="}, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI3NDQ5OnYy", "diffSide": "RIGHT", "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNDozMlrOGAJiwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNDozMlrOGAJiwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwOTUzNg==", "bodyText": "same here", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402809536", "createdAt": "2020-04-03T08:04:32Z", "author": {"login": "conker84"}, "path": "src/test/kotlin/apoc/nlp/gcp/GCPProceduresTest.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+package apoc.nlp.gcp\n+\n+import apoc.util.TestUtil\n+import org.junit.Assume.assumeTrue\n+import org.junit.BeforeClass\n+import org.junit.ClassRule\n+import org.junit.Test\n+import org.neo4j.test.rule.ImpermanentDbmsRule\n+\n+class GCPProceduresTest {\n+    companion object {\n+        val body = \"\"\"\n+            Hospitals should use spare laboratory space to test self-isolating NHS staff in England for coronavirus, Health Secretary Matt Hancock has said.\n+            The government faces growing criticism over a lack of testing for frontline staff who could return to work if found clear of the virus.\n+            On Tuesday, Cabinet Office minister Michael Gove admitted the UK had to go \"further, faster\" to increase testing.\n+        \"\"\"\n+\n+        val apiKey: String? = System.getenv(\"API_KEY\")\n+\n+        @ClassRule\n+        @JvmField\n+        val neo4j = ImpermanentDbmsRule()\n+\n+        @BeforeClass\n+        @JvmStatic\n+        fun beforeClass() {\n+            TestUtil.registerProcedure(neo4j, GCPProcedures::class.java)\n+            assumeTrue(apiKey != null)\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {body:${'$'}body})\"\"\", mapOf(\"body\" to body))\n+        neo4j.executeTransactionally(\"MATCH (a:Article) RETURN a\", emptyMap()) {\n+            println(it.resultAsString())\n+        }\n+        neo4j.executeTransactionally(\"\"\"\n+                    MATCH (a:Article)\n+                    CALL apoc.nlp.gcp.entities.stream(a, {\n+                      key: ${'$'}apiKey,\n+                      nodeProperty: \"body\"\n+                    })\n+                    YIELD response\n+                    RETURN response\n+                \"\"\".trimIndent(), mapOf(\"apiKey\" to apiKey)) {\n+            println(it.resultAsString())\n+        }\n+    }\n+\n+    @Test\n+    fun `should extract entities as virtual graph`() {\n+        neo4j.executeTransactionally(\"\"\"CREATE (a:Article {id: 1234, body:${'$'}body})\"\"\", mapOf(\"body\" to body))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI4Mjc4OnYy", "diffSide": "RIGHT", "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTo1N1rOGAJneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTo1N1rOGAJneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMDc0Ng==", "bodyText": "we can use a functional way to do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(storeGraph) {\n          \n          \n            \n                    val node = if(storeGraph) {\n          \n          \n            \n                        mergeRelationships(sourceNode, nodes, classifyRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n          \n          \n            \n                        sourceNode\n          \n          \n            \n                    } else {\n          \n          \n            \n                        val virtualNode = VirtualNode(sourceNode, sourceNode.propertyKeys.toList())\n          \n          \n            \n                        createRelationships(virtualNode, nodes, classifyRelationshipType(config)).forEach { rel -> relationships.add(rel) }\n          \n          \n            \n                        virtualNode\n          \n          \n            \n                    }\n          \n          \n            \n                    nodes.add(node)", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1469#discussion_r402810746", "createdAt": "2020-04-03T08:05:57Z", "author": {"login": "conker84"}, "path": "src/main/kotlin/apoc/nlp/gcp/GCPProcedures.kt", "diffHunk": "@@ -0,0 +1,176 @@\n+package apoc.nlp.gcp\n+\n+import apoc.ai.dto.AIMapResult\n+import apoc.graph.document.builder.DocumentToGraph\n+import apoc.graph.util.GraphsConfig\n+import apoc.result.RelationshipResult\n+import apoc.result.VirtualGraph\n+import apoc.result.VirtualNode\n+import apoc.util.Util\n+import org.neo4j.graphdb.Node\n+import org.neo4j.graphdb.Relationship\n+import org.neo4j.graphdb.RelationshipType\n+import org.neo4j.graphdb.Transaction\n+import org.neo4j.logging.Log\n+import org.neo4j.procedure.*\n+import java.util.stream.Stream\n+\n+class GCPProcedures {\n+    @Context\n+    @JvmField\n+    var log: Log? = null\n+\n+    @Context\n+    @JvmField\n+    var tx: Transaction? = null\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.stream\", mode = Mode.READ)\n+    @Description(\"Returns a stream of entities for provided text\")\n+    fun entitiesStream(@Name(\"sourceNode\") sourceNode: Node,\n+                       @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<AIMapResult> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        return Stream.of(entities(config, sourceNode, nodeProperty))\n+    }\n+\n+    @Procedure(value = \"apoc.nlp.gcp.entities.graph\", mode = Mode.WRITE)\n+    @Description(\"Creates a (virtual) entity graph for provided text\")\n+    fun entitiesGraph(@Name(\"sourceNode\") sourceNode: Node,\n+                      @Name(value = \"config\", defaultValue = \"{}\") config: Map<String, Any>)\n+            : Stream<VirtualGraph> {\n+        verifyKey(config, \"key\")\n+        val nodeProperty = getNodeProperty(config)\n+        verifyNodeProperty(sourceNode, nodeProperty)\n+\n+        val response = entities(config, sourceNode, nodeProperty).response\n+\n+        val storeGraph:Boolean = config.getOrDefault(\"write\", false) as Boolean\n+        val graphConfig = mapOf(\n+                \"skipValidation\" to true,\n+                \"mappings\" to mapOf(\"$\" to \"Entity{!name,type,@metadata}\"),\n+                \"write\" to storeGraph\n+        )\n+\n+        val documentToGraph = DocumentToGraph(tx, GraphsConfig(graphConfig))\n+        val graph = documentToGraph.create(response[\"entities\"])\n+\n+        val mutableGraph = graph.graph.toMutableMap()\n+\n+        val nodes = (mutableGraph[\"nodes\"] as Set<Node>).toMutableSet()\n+        val relationships = (mutableGraph[\"relationships\"] as Set<Relationship>).toMutableSet()\n+        if(storeGraph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26e89f61c2d73e454bd8573c6d0a97596097cdd"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4308, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}