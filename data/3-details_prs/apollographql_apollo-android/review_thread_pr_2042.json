{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjQwMzc1", "number": 2042, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1Mzo0OFrODl2ImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1NTowOFrODl2KXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDEwODQwOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonReader.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1Mzo0OFrOFy9rmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1Mzo0OFrOFy9rmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MzcwNQ==", "bodyText": "Can we put markdown style comments with Kotlin?", "url": "https://github.com/apollographql/apollo-android/pull/2042#discussion_r388983705", "createdAt": "2020-03-06T15:53:48Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonReader.kt", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.apollographql.apollo.api.internal.json\n+\n+import java.io.Closeable\n+import java.io.IOException\n+\n+/**\n+ * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n+ * encoded value as a stream of tokens. This stream includes both literal\n+ * values (strings, numbers, booleans, and nulls) as well as the begin and\n+ * end delimiters of objects and arrays. The tokens are traversed in\n+ * depth-first order, the same order that they appear in the JSON document.\n+ * Within JSON objects, name/value pairs are represented by a single token.\n+ *\n+ * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n+ * of this class are not thread safe.\n+ */\n+interface JsonReader : Closeable {\n+\n+  /**\n+   * Configure this parser to be liberal in what it accepts. By default\n+   * this parser is strict and only accepts JSON as specified by <a\n+   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec6fac9688b6c7a55395269abcdd32ff28675c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDExMjkzOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonScope.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1NTowOFrOFy9uog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo1NTowOFrOFy9uog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4NDQ4Mg==", "bodyText": "Putting -> Unit is a really nice way to indicate no operation.", "url": "https://github.com/apollographql/apollo-android/pull/2042#discussion_r388984482", "createdAt": "2020-03-06T15:55:08Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonScope.kt", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.apollographql.apollo.api.internal.json\n+\n+/** Lexical scoping elements within a JSON reader or writer.  */\n+object JsonScope {\n+  /** An array with no elements requires no separators or newlines before it is closed.  */\n+  const val EMPTY_ARRAY = 1\n+  /** A array with at least one value requires a comma and newline before the next element.  */\n+  const val NONEMPTY_ARRAY = 2\n+  /** An object with no name/value pairs requires no separators or newlines before it is closed.  */\n+  const val EMPTY_OBJECT = 3\n+  /** An object whose most recent element is a key. The next element must be a value.  */\n+  const val DANGLING_NAME = 4\n+  /** An object with at least one name/value pair requires a separator before the next element.  */\n+  const val NONEMPTY_OBJECT = 5\n+  /** No object or array has been started.  */\n+  const val EMPTY_DOCUMENT = 6\n+  /** A document with at an array or object.  */\n+  const val NONEMPTY_DOCUMENT = 7\n+  /** A document that's been closed and cannot be accessed.  */\n+  const val CLOSED = 8\n+\n+  /**\n+   * Renders the path in a JSON document to a string. The `pathNames` and `pathIndices`\n+   * parameters corresponds directly to stack: At indices where the stack contains an object\n+   * (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT), pathNames contains the name at this scope.\n+   * Where it contains an array (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index\n+   * in that array. Otherwise the value is undefined, and we take advantage of that by incrementing\n+   * pathIndices when doing so isn't useful.\n+   */\n+  fun getPath(stackSize: Int, stack: IntArray, pathNames: Array<String?>, pathIndices: IntArray): String {\n+    val result = StringBuilder().append('$')\n+    for (i in 0 until stackSize) {\n+      when (stack[i]) {\n+        EMPTY_ARRAY, NONEMPTY_ARRAY -> result.append('[').append(pathIndices[i]).append(']')\n+        EMPTY_OBJECT, DANGLING_NAME, NONEMPTY_OBJECT -> {\n+          result.append('.')\n+          if (pathNames[i] != null) {\n+            result.append(pathNames[i])\n+          }\n+        }\n+        NONEMPTY_DOCUMENT, EMPTY_DOCUMENT, CLOSED -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec6fac9688b6c7a55395269abcdd32ff28675c"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}