{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzkwNDg1", "number": 2304, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoyNjo0N1rOD_1gBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoyNjo0N1rOD_1gBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjYzNDMwOnYy", "diffSide": "RIGHT", "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoyNjo0N1rOGavHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0ODo0MlrOGa9Ywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA==", "bodyText": "Now that we have Kotlin in the repository, I think it would be much better to have this implemented fully in Kotlin.\nThat means, maybe we should merge it with RxJavaExtensions below and have everything as top-level functions.\nLet me know what you think.", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430688054", "createdAt": "2020-05-26T20:26:47Z", "author": {"login": "tasomaniac"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNTI4OA==", "bodyText": "Totally agree! I would love to follow up with another PR doing this - I think adding that to this PR would be a little bit out of scope since it would be done for both Rx2 and Rx3 support.", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430705288", "createdAt": "2020-05-26T21:00:53Z", "author": {"login": "Jawnnypoo"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMDAyOQ==", "bodyText": "That means, maybe we should merge it with RxJavaExtensions below and have everything as top-level functions.\n\nDoes that mean RxJava3 support will not be usable for Java callers ?", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430710029", "createdAt": "2020-05-26T21:10:56Z", "author": {"login": "martinbonnin"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczMTU1MQ==", "bodyText": "Ah no, the changes could be made in a way that makes it fully compatible and callable from Java.", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430731551", "createdAt": "2020-05-26T21:59:47Z", "author": {"login": "Jawnnypoo"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MTI2MA==", "bodyText": "Yep, that can be done via JvmStatic and JvmName annotations", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430751260", "createdAt": "2020-05-26T22:54:49Z", "author": {"login": "tasomaniac"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDcwOQ==", "bodyText": "@tasomaniac Would you prefer me to change this PR to include those changes as well? Or can I do a follow up PR?", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430920709", "createdAt": "2020-05-27T07:46:34Z", "author": {"login": "Jawnnypoo"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMTkyMg==", "bodyText": "If you want to do a follow-up that would be awesome. Let's merge this then.", "url": "https://github.com/apollographql/apollo-android/pull/2304#discussion_r430921922", "createdAt": "2020-05-27T07:48:42Z", "author": {"login": "tasomaniac"}, "path": "apollo-rx3-support/src/main/java/com/apollographql/apollo/rx3/Rx3Apollo.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.apollographql.apollo.rx3;\n+\n+import com.apollographql.apollo.ApolloCall;\n+import com.apollographql.apollo.ApolloPrefetch;\n+import com.apollographql.apollo.ApolloQueryWatcher;\n+import com.apollographql.apollo.ApolloSubscriptionCall;\n+import com.apollographql.apollo.api.Response;\n+import com.apollographql.apollo.cache.normalized.ApolloStoreOperation;\n+import com.apollographql.apollo.exception.ApolloException;\n+import com.apollographql.apollo.internal.subscription.ApolloSubscriptionTerminatedException;\n+import com.apollographql.apollo.internal.util.Cancelable;\n+import org.jetbrains.annotations.NotNull;\n+import io.reactivex.rxjava3.annotations.CheckReturnValue;\n+import io.reactivex.rxjava3.core.BackpressureStrategy;\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.CompletableEmitter;\n+import io.reactivex.rxjava3.core.CompletableOnSubscribe;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.FlowableEmitter;\n+import io.reactivex.rxjava3.core.FlowableOnSubscribe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.ObservableEmitter;\n+import io.reactivex.rxjava3.core.ObservableOnSubscribe;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.core.SingleEmitter;\n+import io.reactivex.rxjava3.core.SingleOnSubscribe;\n+import io.reactivex.rxjava3.disposables.Disposable;\n+import io.reactivex.rxjava3.exceptions.Exceptions;\n+import static com.apollographql.apollo.api.internal.Utils.checkNotNull;\n+\n+/**\n+ * The Rx3Apollo class provides methods for converting ApolloCall, ApolloPrefetch and ApolloWatcher types to RxJava 3\n+ * sources.\n+ */\n+public class Rx3Apollo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODA1NA=="}, "originalCommit": {"oid": "41a777f53f734e9c6ee198ec5b97882784ea0f56"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3093, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}