{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Nzc5NDc1", "number": 2677, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1MDo1OFrOEwHhow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyNTowOFrOEwp0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODkwNDAzOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1MDo1OFrOHleuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1OTozNlrOHlfDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MjY5Mg==", "bodyText": "Shouldn't we just delete this completely now?", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509062692", "createdAt": "2020-10-21T07:50:58Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -45,7 +45,10 @@ class GraphQLCompiler(val logger: Logger = NoOpLogger) {\n     )\n \n     val files = args.graphqlFiles\n-    checkDuplicateFiles(roots, files)\n+    /**\n+     * Android can have duplicate files but that's ok as long as they do not define the same operations (which is checked in IRBuilder)\n+     */\n+    // checkDuplicateFiles(roots, files)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab76b24dcb5c891a6358316775aa4cf7b928303"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2ODE2Nw==", "bodyText": "I guess I got sentimentally attached to this method \ud83d\ude02 . You're right, I'll remove it. Also it's present in the createAllAndroidVariantServices so that should be enough", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509068167", "createdAt": "2020-10-21T07:59:36Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -45,7 +45,10 @@ class GraphQLCompiler(val logger: Logger = NoOpLogger) {\n     )\n \n     val files = args.graphqlFiles\n-    checkDuplicateFiles(roots, files)\n+    /**\n+     * Android can have duplicate files but that's ok as long as they do not define the same operations (which is checked in IRBuilder)\n+     */\n+    // checkDuplicateFiles(roots, files)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MjY5Mg=="}, "originalCommit": {"oid": "eab76b24dcb5c891a6358316775aa4cf7b928303"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODkwOTU3OnYy", "diffSide": "RIGHT", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/AndroidProject.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1MjoxOVrOHlexfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1MDo0MVrOHmXUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MzU0OA==", "bodyText": "project is not used in this function. What about making this an extension over androidExtension or making androidExtension a parameter?", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509063548", "createdAt": "2020-10-21T07:52:19Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/AndroidProject.kt", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.apollographql.apollo.gradle.api\n+\n+import com.android.build.gradle.AppExtension\n+import com.android.build.gradle.BaseExtension\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.TestedExtension\n+import com.android.build.gradle.api.BaseVariant\n+import com.apollographql.apollo.gradle.internal.ApolloGenerateSourcesTask\n+import org.gradle.api.Project\n+import org.gradle.api.Task\n+import org.gradle.api.file.Directory\n+import org.gradle.api.provider.Provider\n+import org.gradle.api.tasks.TaskContainer\n+import org.gradle.api.tasks.TaskProvider\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n+\n+object AndroidProject {\n+  fun onEachVariant(project: Project, withTestVariants: Boolean = false, block: (BaseVariant) -> Unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab76b24dcb5c891a6358316775aa4cf7b928303"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2NDYxMg==", "bodyText": "Hmm, I see now that you do a null check with a proper message. But it looks like the usages also check that.", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509064612", "createdAt": "2020-10-21T07:54:05Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/AndroidProject.kt", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.apollographql.apollo.gradle.api\n+\n+import com.android.build.gradle.AppExtension\n+import com.android.build.gradle.BaseExtension\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.TestedExtension\n+import com.android.build.gradle.api.BaseVariant\n+import com.apollographql.apollo.gradle.internal.ApolloGenerateSourcesTask\n+import org.gradle.api.Project\n+import org.gradle.api.Task\n+import org.gradle.api.file.Directory\n+import org.gradle.api.provider.Provider\n+import org.gradle.api.tasks.TaskContainer\n+import org.gradle.api.tasks.TaskProvider\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n+\n+object AndroidProject {\n+  fun onEachVariant(project: Project, withTestVariants: Boolean = false, block: (BaseVariant) -> Unit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MzU0OA=="}, "originalCommit": {"oid": "eab76b24dcb5c891a6358316775aa4cf7b928303"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5MDA0NA==", "bodyText": "project is not used in this function. What about making this an extension over androidExtension or making androidExtension a parameter?\n\nI like that it's somehow symmetric with KotlinJvmProject and KotlinMultiplatformProject. These helpers are now public APIs so users can use them to do all kind of crazy things if they really want to. They all take a project as a first parameter because this is what's usually available from build.gradle[.kts]\n\nHmm, I see now that you do a null check with a proper message. But it looks like the usages also check that.\n\nYup, that check is not needed, I'll remove it.", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509990044", "createdAt": "2020-10-22T08:50:41Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/AndroidProject.kt", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.apollographql.apollo.gradle.api\n+\n+import com.android.build.gradle.AppExtension\n+import com.android.build.gradle.BaseExtension\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.TestedExtension\n+import com.android.build.gradle.api.BaseVariant\n+import com.apollographql.apollo.gradle.internal.ApolloGenerateSourcesTask\n+import org.gradle.api.Project\n+import org.gradle.api.Task\n+import org.gradle.api.file.Directory\n+import org.gradle.api.provider.Provider\n+import org.gradle.api.tasks.TaskContainer\n+import org.gradle.api.tasks.TaskProvider\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n+\n+object AndroidProject {\n+  fun onEachVariant(project: Project, withTestVariants: Boolean = false, block: (BaseVariant) -> Unit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MzU0OA=="}, "originalCommit": {"oid": "eab76b24dcb5c891a6358316775aa4cf7b928303"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDUxNzk3OnYy", "diffSide": "RIGHT", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyMzo1NlrOHmWONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoxNToyNVrOHm2_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjAyMg==", "bodyText": "Can we not target 6.2 now?", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509972022", "createdAt": "2020-10-22T08:23:56Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -20,14 +21,22 @@ import javax.inject.Inject\n abstract class DefaultService @Inject constructor(val objects: ObjectFactory, override val name: String)\n   : Service {\n \n+  init {\n+    // see https://github.com/gradle/gradle/issues/7485\n+    // TODO replace with `convention(null)` when we can target Gradle 6.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4MTE0OQ==", "bodyText": "This was filed not so long ago: #2536\nOverall, I don't think this alone justifies bumping the Gradle version. We could do something like this:\nif (gradleVersion >= 6.2) {\n   customTypeMapping.convention(null)\n} else {\n   customTypeMapping.set(null as Map<String, String>?)\n}\n\nThis would make it possible for 6.2+ users to do something like\napollo {\n  customTypeMapping.put(\"Date\", \"java.util.Date\")\n}\n\n(in addition to the always working)\napollo {\n  customTypeMapping.set(mapOf(\"Date\" to \"java.util.Date\"))\n}", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509981149", "createdAt": "2020-10-22T08:37:55Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -20,14 +21,22 @@ import javax.inject.Inject\n abstract class DefaultService @Inject constructor(val objects: ObjectFactory, override val name: String)\n   : Service {\n \n+  init {\n+    // see https://github.com/gradle/gradle/issues/7485\n+    // TODO replace with `convention(null)` when we can target Gradle 6.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjAyMg=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMTMzOA==", "bodyText": "Hmm, I was thinking because of 3.x but you're right. If we don't need it, we shouldn't.\nYour suggestion also looks like a good improvement. I didn't know that. It is up to you.", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r510431338", "createdAt": "2020-10-22T20:17:21Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -20,14 +21,22 @@ import javax.inject.Inject\n abstract class DefaultService @Inject constructor(val objects: ObjectFactory, override val name: String)\n   : Service {\n \n+  init {\n+    // see https://github.com/gradle/gradle/issues/7485\n+    // TODO replace with `convention(null)` when we can target Gradle 6.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjAyMg=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwODgxMQ==", "bodyText": "I added it, it feels more natural to have proper .put support", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r510508811", "createdAt": "2020-10-22T23:15:25Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -20,14 +21,22 @@ import javax.inject.Inject\n abstract class DefaultService @Inject constructor(val objects: ObjectFactory, override val name: String)\n   : Service {\n \n+  init {\n+    // see https://github.com/gradle/gradle/issues/7485\n+    // TODO replace with `convention(null)` when we can target Gradle 6.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjAyMg=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDUyMjg1OnYy", "diffSide": "RIGHT", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyNTowOFrOHmWRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzoxNzoyMVrOHm3BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjgwMw==", "bodyText": "This error is now missing a suggestion. When we fail because of multiple schemas, what should they do?", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509972803", "createdAt": "2020-10-22T08:25:08Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -123,16 +128,7 @@ abstract class DefaultService @Inject constructor(val objects: ObjectFactory, ov\n         \"\"\"\n Multiple schemas found:\n ${candidates.joinToString(separator = \"\\n\")}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4Njk2Nw==", "bodyText": "The answer to this question depends whether you're using service or createAllAndroidVariantServices. It was actually wrong to suggest using multiple services before if the multiple schemas were the result of schemas being present in multiple flavor/buildType source sets. So I'd prefer a less precise error message over a wrong one.", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r509986967", "createdAt": "2020-10-22T08:46:18Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -123,16 +128,7 @@ abstract class DefaultService @Inject constructor(val objects: ObjectFactory, ov\n         \"\"\"\n Multiple schemas found:\n ${candidates.joinToString(separator = \"\\n\")}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjgwMw=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMjEzNg==", "bodyText": "Can we say that multiple schema files are not supported?", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r510432136", "createdAt": "2020-10-22T20:18:55Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -123,16 +128,7 @@ abstract class DefaultService @Inject constructor(val objects: ObjectFactory, ov\n         \"\"\"\n Multiple schemas found:\n ${candidates.joinToString(separator = \"\\n\")}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjgwMw=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwOTM4Mw==", "bodyText": "I added this: Multiple schemas are not supported. You can either define multiple services or specify the schema you want to use explicitely with schemaFile`. I think this is technically not wrong :)", "url": "https://github.com/apollographql/apollo-android/pull/2677#discussion_r510509383", "createdAt": "2020-10-22T23:17:21Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultService.kt", "diffHunk": "@@ -123,16 +128,7 @@ abstract class DefaultService @Inject constructor(val objects: ObjectFactory, ov\n         \"\"\"\n Multiple schemas found:\n ${candidates.joinToString(separator = \"\\n\")}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MjgwMw=="}, "originalCommit": {"oid": "be28b2fd06a0ff097bb244c09dc78469bd510851"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2952, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}