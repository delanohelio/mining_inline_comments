{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MTM0NTAw", "number": 2569, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1MjowM1rOEicSOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0ODoxN1rOEi5Ang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTUwNDU5OnYy", "diffSide": "LEFT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/FileUpload.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1MjowM1rOHQUPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1MjowM1rOHQUPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MDg4Nw==", "bodyText": "I didn't find a need to implement equals/hashCode on this class. Am I missing something?", "url": "https://github.com/apollographql/apollo-android/pull/2569#discussion_r486870887", "createdAt": "2020-09-11T08:52:03Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/FileUpload.kt", "diffHunk": "@@ -1,19 +1,37 @@\n package com.apollographql.apollo.api\n \n-class FileUpload(val mimetype: String, val filePath: String) {\n-  override fun equals(other: Any?): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198bddeda224080adb21c9599e48e12378a22408"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIxMDg2OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/FileUpload.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0ODoxN1rOHQ9xdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMTo0NTowN1rOHQ_l3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MTM1MQ==", "bodyText": "Should we just remove filePath field and make this class abstract? Also make filename to be non null abstrac property?", "url": "https://github.com/apollographql/apollo-android/pull/2569#discussion_r487551351", "createdAt": "2020-09-13T16:48:17Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/FileUpload.kt", "diffHunk": "@@ -1,19 +1,37 @@\n package com.apollographql.apollo.api\n \n-class FileUpload(val mimetype: String, val filePath: String) {\n-  override fun equals(other: Any?): Boolean {\n-    if (this === other) return true\n-    if (other !is FileUpload) return false\n+import okio.BufferedSink\n \n-    if (mimetype != other.mimetype) return false\n-    if (filePath != other.filePath) return false\n+/**\n+ * A class that represents a file upload in a multipart upload\n+ * See https://github.com/jaydenseric/graphql-multipart-request-spec\n+ *\n+ * This class is heavily inspired by [okhttp3.RequestBody]\n+ */\n+open class FileUpload(val mimetype: String, val filePath: String? = null) {\n+  /**\n+   * Returns the number of bytes that will be written to `sink` in a call to [.writeTo],\n+   * or -1 if that count is unknown.\n+   */\n+  open fun contentLength(): Long {\n+    return -1\n+  }\n+\n+  /**\n+   *  Writes the content of this request to `sink`.\n+   */\n+  open fun writeTo(sink: BufferedSink) {\n+    throw UnsupportedOperationException(\"ApolloGraphQL: if you're not passing a `filePath` parameter, you must override `FileUpload.writeTo`\")\n+  }\n \n-    return true\n+  /**\n+   * The fileName to send to the server. Might be null\n+   */\n+  open fun fileName(): String? {\n+    throw UnsupportedOperationException(\"ApolloGraphQL: if you're not passing a `filePath` parameter, you must override `FileUpload.fileName`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198bddeda224080adb21c9599e48e12378a22408"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MTE0OQ==", "bodyText": "That would be much nicer but also a breaking change which I'd like to avoid if possible. I'll do it in dev-3x but given Android 11 is just out, I think it makes sense to release this before 3.0.0.", "url": "https://github.com/apollographql/apollo-android/pull/2569#discussion_r487581149", "createdAt": "2020-09-13T21:45:07Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/FileUpload.kt", "diffHunk": "@@ -1,19 +1,37 @@\n package com.apollographql.apollo.api\n \n-class FileUpload(val mimetype: String, val filePath: String) {\n-  override fun equals(other: Any?): Boolean {\n-    if (this === other) return true\n-    if (other !is FileUpload) return false\n+import okio.BufferedSink\n \n-    if (mimetype != other.mimetype) return false\n-    if (filePath != other.filePath) return false\n+/**\n+ * A class that represents a file upload in a multipart upload\n+ * See https://github.com/jaydenseric/graphql-multipart-request-spec\n+ *\n+ * This class is heavily inspired by [okhttp3.RequestBody]\n+ */\n+open class FileUpload(val mimetype: String, val filePath: String? = null) {\n+  /**\n+   * Returns the number of bytes that will be written to `sink` in a call to [.writeTo],\n+   * or -1 if that count is unknown.\n+   */\n+  open fun contentLength(): Long {\n+    return -1\n+  }\n+\n+  /**\n+   *  Writes the content of this request to `sink`.\n+   */\n+  open fun writeTo(sink: BufferedSink) {\n+    throw UnsupportedOperationException(\"ApolloGraphQL: if you're not passing a `filePath` parameter, you must override `FileUpload.writeTo`\")\n+  }\n \n-    return true\n+  /**\n+   * The fileName to send to the server. Might be null\n+   */\n+  open fun fileName(): String? {\n+    throw UnsupportedOperationException(\"ApolloGraphQL: if you're not passing a `filePath` parameter, you must override `FileUpload.fileName`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MTM1MQ=="}, "originalCommit": {"oid": "198bddeda224080adb21c9599e48e12378a22408"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}