{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDUyMzIx", "number": 2044, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxMDo1NVrODmAxsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozNToyM1rODmDCaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTg1MjAzOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/CustomTypeValue.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxMDo1NVrOFzN-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxMDo1NVrOFzN-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sealed class CustomTypeValue<T> (@JvmField val value: T) {\n          \n          \n            \n            sealed class CustomTypeValue<T>(@JvmField val value: T) {", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r389250583", "createdAt": "2020-03-07T12:10:55Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/CustomTypeValue.kt", "diffHunk": "@@ -4,9 +4,7 @@ package com.apollographql.apollo.api\n  * A wrapper class for representation of custom GraphQL type value, used in user provided [CustomTypeAdapter]\n  * encoding / decoding functions.\n  **/\n-abstract class CustomTypeValue<T> private constructor(\n-    @JvmField val value: T\n-) {\n+sealed class CustomTypeValue<T> (@JvmField val value: T) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTg1MjcwOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/BufferedSourceJsonReader.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxMzowNVrOFzN-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxMzowNVrOFzN-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDY3MA==", "bodyText": "One thing that I do for self returning functions is to use apply\noverride fun beginArray(): JsonReader = apply {\n  // do stuff\n}\n\nThen you don't have to return this", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r389250670", "createdAt": "2020-03-07T12:13:05Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/BufferedSourceJsonReader.kt", "diffHunk": "@@ -55,7 +55,7 @@ class BufferedSourceJsonReader(private val source: BufferedSource) : JsonReader\n   override var failOnUnknown = false\n \n   @Throws(IOException::class)\n-  override fun beginArray() {\n+  override fun beginArray(): JsonReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTg1MzY2OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/InputFieldJsonWriter.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxNTozOVrOFzN-4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxNTozOVrOFzN-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDc4NA==", "bodyText": "For consistency, maybe we can invert this conditional and have value == null first.", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r389250784", "createdAt": "2020-03-07T12:15:39Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/InputFieldJsonWriter.kt", "diffHunk": "@@ -0,0 +1,222 @@\n+package com.apollographql.apollo.api.internal.json\n+\n+import com.apollographql.apollo.api.CustomTypeValue.*\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.json.Utils.writeToJson\n+import java.io.IOException\n+\n+class InputFieldJsonWriter(\n+    private val jsonWriter: JsonWriter,\n+    private val scalarTypeAdapters: ScalarTypeAdapters\n+) : InputFieldWriter {\n+\n+  @Throws(IOException::class)\n+  override fun writeString(fieldName: String, value: String?) {\n+    if (value != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjIyMjQ5OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonEncodingException.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxOTozNToyM1rOFzRYCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo0MTowNFrOFz_rdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjM3OA==", "bodyText": "What is the reason to make it a RuntimeException instead of an IOException like it used to be ?", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r389306378", "createdAt": "2020-03-07T19:35:23Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonEncodingException.kt", "diffHunk": "@@ -13,13 +13,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.apollographql.apollo.api.internal.json;\n+package com.apollographql.apollo.api.internal.json\n \n-import java.io.IOException;\n-\n-/** Thrown when the data being parsed is not encoded as valid JSON. */\n-public final class JsonEncodingException extends IOException {\n-  public JsonEncodingException(String message) {\n-    super(message);\n-  }\n-}\n+/**\n+ * Thrown when the data being parsed is not encoded as valid JSON.\n+ */\n+class JsonEncodingException(message: String) : RuntimeException(message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTM4Ng==", "bodyText": "Are you suggesting to keep it as IOException but skip having @throws annotation? I assume this turns checked exception to unchecked. In Kotlin the difference is thinner.", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r389315386", "createdAt": "2020-03-07T22:02:01Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonEncodingException.kt", "diffHunk": "@@ -13,13 +13,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.apollographql.apollo.api.internal.json;\n+package com.apollographql.apollo.api.internal.json\n \n-import java.io.IOException;\n-\n-/** Thrown when the data being parsed is not encoded as valid JSON. */\n-public final class JsonEncodingException extends IOException {\n-  public JsonEncodingException(String message) {\n-    super(message);\n-  }\n-}\n+/**\n+ * Thrown when the data being parsed is not encoded as valid JSON.\n+ */\n+class JsonEncodingException(message: String) : RuntimeException(message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjM3OA=="}, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2NTAxNQ==", "bodyText": "Agh, it was my mistake. Will revert it back", "url": "https://github.com/apollographql/apollo-android/pull/2044#discussion_r390065015", "createdAt": "2020-03-10T02:41:04Z", "author": {"login": "sav007"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/json/JsonEncodingException.kt", "diffHunk": "@@ -13,13 +13,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.apollographql.apollo.api.internal.json;\n+package com.apollographql.apollo.api.internal.json\n \n-import java.io.IOException;\n-\n-/** Thrown when the data being parsed is not encoded as valid JSON. */\n-public final class JsonEncodingException extends IOException {\n-  public JsonEncodingException(String message) {\n-    super(message);\n-  }\n-}\n+/**\n+ * Thrown when the data being parsed is not encoded as valid JSON.\n+ */\n+class JsonEncodingException(message: String) : RuntimeException(message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNjM3OA=="}, "originalCommit": {"oid": "30783010f578e7dfb18629dc2d403cabd4002aea"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}