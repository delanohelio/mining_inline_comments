{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzYxODA0", "number": 1891, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDoyMFrODX0x2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowODoxMVrODX01ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA4NTY5OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/test/java/com/apollographql/apollo/api/internal/SimpleResponseReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDoyMFrOFdVPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDoyMFrOFdVPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMTA0NA==", "bodyText": "typo here.", "url": "https://github.com/apollographql/apollo-android/pull/1891#discussion_r366301044", "createdAt": "2020-01-14T12:04:20Z", "author": {"login": "tasomaniac"}, "path": "apollo-api/src/test/java/com/apollographql/apollo/api/internal/SimpleResponseReaderTest.java", "diffHunk": "@@ -95,7 +95,7 @@\n     }\n   }\n \n-  @Test public void readDouble() {\n+  @Test public void readD1ouble() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae25a2f4f696ec67d3f16929415ef7ceff7e098"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA5MjYwOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ResponseFieldSpec.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNzowNVrOFdVThA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNzowNVrOFdVThA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjA4NA==", "bodyText": "should this be deleted?", "url": "https://github.com/apollographql/apollo-android/pull/1891#discussion_r366302084", "createdAt": "2020-01-14T12:07:05Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ResponseFieldSpec.kt", "diffHunk": "@@ -212,40 +230,26 @@ class ResponseFieldSpec(\n         READ_METHODS[responseFieldType], fieldParam, readerTypeSpec)\n   }\n \n-  private fun readInlineFragmentCode(readerParam: CodeBlock, fieldParam: CodeBlock): CodeBlock {\n-    val readerTypeSpec = TypeSpec.anonymousClassBuilder(\"\")\n-        .superclass(conditionalResponseFieldReaderType(normalizedFieldSpec.type))\n-        .addMethod(MethodSpec\n-            .methodBuilder(\"read\")\n-            .addModifiers(Modifier.PUBLIC)\n-            .addAnnotation(Override::class.java)\n-            .returns(normalizedFieldSpec.type)\n-            .addParameter(ParameterSpec.builder(String::class.java, CONDITIONAL_TYPE_VAR).build())\n-            .addParameter(RESPONSE_READER_PARAM)\n-            .addStatement(\"return \\$L.map(\\$L)\", (normalizedFieldSpec.type as ClassName).mapperFieldName(),\n-                RESPONSE_READER_PARAM.name)\n-            .build())\n-        .build()\n-    return CodeBlock.of(\"final \\$T \\$L = \\$L.\\$L(\\$L, \\$L);\\n\", normalizedFieldSpec.type, fieldSpec.name,\n-        readerParam, READ_METHODS[responseFieldType], fieldParam, readerTypeSpec)\n-  }\n-\n-  private fun readFragmentsCode(readerParam: CodeBlock, fieldParam: CodeBlock): CodeBlock {\n-    val readerTypeSpec = TypeSpec.anonymousClassBuilder(\"\")\n-        .superclass(conditionalResponseFieldReaderType(FRAGMENTS_CLASS))\n-        .addMethod(MethodSpec\n-            .methodBuilder(\"read\")\n-            .addModifiers(Modifier.PUBLIC)\n-            .addAnnotation(Override::class.java)\n-            .returns(FRAGMENTS_CLASS)\n-            .addParameter(ParameterSpec.builder(String::class.java, CONDITIONAL_TYPE_VAR).build())\n-            .addParameter(RESPONSE_READER_PARAM)\n-            .addStatement(\"return \\$L.map(\\$L, \\$L)\", FRAGMENTS_CLASS.mapperFieldName(),\n-                RESPONSE_READER_PARAM.name, CONDITIONAL_TYPE_VAR)\n-            .build())\n-        .build()\n-    return CodeBlock.of(\"final \\$T \\$L = \\$L.\\$L(\\$L, \\$L);\\n\", normalizedFieldSpec.type, fieldSpec.name,\n-        readerParam, READ_METHODS[responseFieldType], fieldParam, readerTypeSpec)\n+//  private fun readFragmentCode(readerParam: CodeBlock, fieldParam: CodeBlock): CodeBlock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae25a2f4f696ec67d3f16929415ef7ceff7e098"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA5NTM5OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/SchemaTypeSpecBuilder.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowODoxMVrOFdVVJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowODoxMVrOFdVVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjUwMQ==", "bodyText": "codestyle: Looks like here, it would be better to put the first param in a new line", "url": "https://github.com/apollographql/apollo-android/pull/1891#discussion_r366302501", "createdAt": "2020-01-14T12:08:11Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/SchemaTypeSpecBuilder.kt", "diffHunk": "@@ -433,18 +449,18 @@ class SchemaTypeSpecBuilder(\n   }\n \n   private fun inlineFragmentsResponseMapperSpec(nameOverrideMap: Map<String, String>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae25a2f4f696ec67d3f16929415ef7ceff7e098"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}