{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjc5MjM0", "number": 2168, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMjozMFrODxuShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMjozMFrODxuShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDY1MjIxOnYy", "diffSide": "RIGHT", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMjozMFrOGFWsmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNTo1MlrOGFXQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NzkzMQ==", "bodyText": "Isn't type inference supposed to work here ? Or are you adding this for readability reasons ?", "url": "https://github.com/apollographql/apollo-android/pull/2168#discussion_r408267931", "createdAt": "2020-04-14T16:22:30Z", "author": {"login": "martinbonnin"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -19,7 +22,7 @@ import kotlinx.coroutines.flow.*\n  * @return a flow which emits [Responses<T>]\n  */\n @ExperimentalCoroutinesApi\n-fun <T> ApolloCall<T>.toFlow() = callbackFlow {\n+fun <T> ApolloCall<T>.toFlow(): Flow<Response<T>> = callbackFlow {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131919b1cd6d4e873e189e41cdd4bc98df6a0629"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NzIzNw==", "bodyText": "I think originally this was because of compileOnly. I added it. But then didn't remove it since It is a good practice to explicitly define types in public APIs.", "url": "https://github.com/apollographql/apollo-android/pull/2168#discussion_r408277237", "createdAt": "2020-04-14T16:35:52Z", "author": {"login": "tasomaniac"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -19,7 +22,7 @@ import kotlinx.coroutines.flow.*\n  * @return a flow which emits [Responses<T>]\n  */\n @ExperimentalCoroutinesApi\n-fun <T> ApolloCall<T>.toFlow() = callbackFlow {\n+fun <T> ApolloCall<T>.toFlow(): Flow<Response<T>> = callbackFlow {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NzkzMQ=="}, "originalCommit": {"oid": "131919b1cd6d4e873e189e41cdd4bc98df6a0629"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3189, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}