{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDA0NzY2", "number": 2648, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo0NzoxOFrOEsY-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowNTozMFrOEsZFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgxOTY0OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo0NzoxOFrOHfoG9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoyMjoyNVrOHf0BxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNTA0Ng==", "bodyText": "Why do we even need shouldSkip ? Isn't this supposed to be handled server side? If a server returns a value for a skipped field, this is most likely against the spec. Maybe we can avoid this logic client side and save a few more CPU cycles?", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r502925046", "createdAt": "2020-10-11T14:47:18Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "diffHunk": "@@ -78,4 +80,24 @@ interface ResponseReader {\n       })\n     }\n   }\n+\n+  fun ResponseField.shouldSkip(variableValues: Map<String, Any?>): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAwOTU0Ng==", "bodyText": "Yeah, I think you are right. This function is only needed in case of normalized cache. We can remove it.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503009546", "createdAt": "2020-10-12T02:35:53Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "diffHunk": "@@ -78,4 +80,24 @@ interface ResponseReader {\n       })\n     }\n   }\n+\n+  fun ResponseField.shouldSkip(variableValues: Map<String, Any?>): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNTA0Ng=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxMjg2Ng==", "bodyText": "I will leave it for now in RealResponseReader as it used when parse normalized cache, until we replace it with stream parses.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503012866", "createdAt": "2020-10-12T02:51:59Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "diffHunk": "@@ -78,4 +80,24 @@ interface ResponseReader {\n       })\n     }\n   }\n+\n+  fun ResponseField.shouldSkip(variableValues: Map<String, Any?>): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNTA0Ng=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyMDMyNQ==", "bodyText": "Right \ud83d\udc4d", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503120325", "createdAt": "2020-10-12T08:22:25Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "diffHunk": "@@ -78,4 +80,24 @@ interface ResponseReader {\n       })\n     }\n   }\n+\n+  fun ResponseField.shouldSkip(variableValues: Map<String, Any?>): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNTA0Ng=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzODE1OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowNTozMFrOHfoQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxNjowOVrOHgC96g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA==", "bodyText": "We could leverage the fact that field order should be preserved to remove the iteration here and have faster parsing performance than json. Maybe with a \"slow\" path for non-compliant server implementations.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r502927410", "createdAt": "2020-10-11T15:05:30Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxMTIxNg==", "bodyText": "Even this is in 90% cases true, I wouldn't trust the order of fields we have in our models vs fields sent in query, we already do couple optimizations / merging fields, the order might changed and it's very fragile in terms of our codegen, any changes that impact fields order in our models everything will fall down as house of cards.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503011216", "createdAt": "2020-10-12T02:44:04Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyMzk0MA==", "bodyText": "we already do couple optimizations / merging fields\n\nDo you have an exemple for that?\nWe'd have to do some benchmarking but if we started the string matching on an index that increments as new fields are read and that'd work in 90% of the case, I think we'd save some time and be effectively faster than json (that'd be a cool marketing claim ;)). If the 10% case fallbacks to iterating all the possible fields, everything would still work, albeit with performance on average the same as the one we have now?", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503123940", "createdAt": "2020-10-12T08:28:05Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMjczMw==", "bodyText": "Inline fragments, in some conditions we merge fields. Also I'm not sure that we preserve 100% order when build IR or AST. If we want to do this we need to verify all over the place where we build IR and AST that we keep the original order of fields.\nI would say let's first do perf measurement and see if it's a case, pretty sure we will get the same numbers as Moshi as it does the same field lookup.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503302733", "createdAt": "2020-10-12T13:39:06Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDI0MQ==", "bodyText": "Damn inline fragments! But yea, I agree this all needs to be benchmarked.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503304241", "createdAt": "2020-10-12T13:41:27Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxNzgwNA==", "bodyText": "Actually after thinking we can do small optimization here, we can keep previously selected field index, then during next selectField call we can try to guess next field to select by fields[previousSelectedFieldIndex + 1] and if we fail fallback to lookup. Should optimize in 90%.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503317804", "createdAt": "2020-10-12T14:02:26Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxODU3NQ==", "bodyText": "Yes, exactly \ud83d\udc4d", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503318575", "createdAt": "2020-10-12T14:03:41Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2NTA5OA==", "bodyText": "I will address this in my next PR in StreamResponseReader.", "url": "https://github.com/apollographql/apollo-android/pull/2648#discussion_r503365098", "createdAt": "2020-10-12T15:16:09Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/SimpleResponseReader.kt", "diffHunk": "@@ -13,121 +13,64 @@ class SimpleResponseReader private constructor(\n     private val variableValues: Map<String, Any?>,\n     private val scalarTypeAdapters: ScalarTypeAdapters\n ) : ResponseReader {\n+  private val responseRecordSetIterator = recordSet.iterator()\n \n   constructor(\n       recordSet: Map<String, Any?>,\n       variables: Operation.Variables,\n       scalarTypeAdapters: ScalarTypeAdapters\n   ) : this(recordSet, variables.valueMap(), scalarTypeAdapters)\n \n-  override fun readString(field: ResponseField): String? {\n-    if (shouldSkip(field)) {\n-      return null\n-    }\n+  override fun selectField(fields: Array<ResponseField>): Int {\n+    while (true)\n+      if (responseRecordSetIterator.hasNext()) {\n+        val (nextFieldName, _) = responseRecordSetIterator.next()\n+        val fieldIndex = fields.indexOfFirst { field -> field.responseName == nextFieldName }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNzQxMA=="}, "originalCommit": {"oid": "868a8a72563223029b36ed8fbb70708abf108924"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2935, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}