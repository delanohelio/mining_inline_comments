{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTQ3ODY1", "number": 2535, "title": "Part 2 (backend): New Kotlin codegen", "bodyText": "Kotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\nNamed fragment now generated as interfaces with default implementation.\nRight now there is no tests as the PR is going to be insane. Tests for new generated models is going in next PR.", "createdAt": "2020-08-23T16:39:10Z", "url": "https://github.com/apollographql/apollo-android/pull/2535", "merged": true, "mergeCommit": {"oid": "8ad5a1c55db2a3f9c66a91d556aad6d2d1dbfb27"}, "closed": true, "closedAt": "2020-08-26T14:31:57Z", "author": {"login": "sav007"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBwydVgBqjM2ODI5NjM5ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCjsg9gH2gAyNDcyMTQ3ODY1OmEwNmIwNGQxNGVmY2MxN2FjYTU4YTcyZmIyOGYzZjYxZDYwODYxOWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8505fc3c32028ea98f0ce3db8afd6db642bd7803", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/8505fc3c32028ea98f0ce3db8afd6db642bd7803", "committedDate": "2020-08-23T16:38:14Z", "message": "Part 2 (backend): New Kotlin codegen\n\nKotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\n\nNamed fragment now generated as interfaces with default implementation."}, "afterCommit": {"oid": "96e800047a806048bcf037b8a7390cee7f9b1553", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/96e800047a806048bcf037b8a7390cee7f9b1553", "committedDate": "2020-08-23T16:41:25Z", "message": "Part 2 (backend): New Kotlin codegen\n\nKotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\n\nNamed fragment now generated as interfaces with default implementation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDI5MjU3", "url": "https://github.com/apollographql/apollo-android/pull/2535#pullrequestreview-473029257", "createdAt": "2020-08-23T17:34:38Z", "commit": {"oid": "96e800047a806048bcf037b8a7390cee7f9b1553"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzozNDozOFrOHFOptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzozNzoxM1rOHFOrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NDk4MA==", "bodyText": "Importing these classes would make the code easier to read", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475244980", "createdAt": "2020-08-23T17:34:38Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/codegen/Common.kt", "diffHunk": "@@ -0,0 +1,409 @@\n+package com.apollographql.apollo.compiler.next.codegen\n+\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseReader\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.codegen.kotlin.KotlinCodeGen\n+import com.apollographql.apollo.compiler.next.ast.CodeGenerationAst\n+import com.squareup.kotlinpoet.AnnotationSpec\n+import com.squareup.kotlinpoet.BOOLEAN\n+import com.squareup.kotlinpoet.ClassName\n+import com.squareup.kotlinpoet.CodeBlock\n+import com.squareup.kotlinpoet.DOUBLE\n+import com.squareup.kotlinpoet.FLOAT\n+import com.squareup.kotlinpoet.FunSpec\n+import com.squareup.kotlinpoet.INT\n+import com.squareup.kotlinpoet.KModifier\n+import com.squareup.kotlinpoet.LONG\n+import com.squareup.kotlinpoet.ParameterSpec\n+import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy\n+import com.squareup.kotlinpoet.PropertySpec\n+import com.squareup.kotlinpoet.TypeName\n+import com.squareup.kotlinpoet.asClassName\n+import com.squareup.kotlinpoet.asTypeName\n+import com.squareup.kotlinpoet.joinToCode\n+\n+internal fun CodeGenerationAst.FieldType.asTypeName(nullable: Boolean = false): TypeName {\n+  return when (this) {\n+    is CodeGenerationAst.FieldType.Scalar -> when (this) {\n+      is CodeGenerationAst.FieldType.Scalar.ID -> ClassName.bestGuess(type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e800047a806048bcf037b8a7390cee7f9b1553"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NTMzNA==", "bodyText": "Can this be just KModifier.PRIVATE", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475245334", "createdAt": "2020-08-23T17:37:13Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/codegen/Common.kt", "diffHunk": "@@ -0,0 +1,409 @@\n+package com.apollographql.apollo.compiler.next.codegen\n+\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseReader\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.codegen.kotlin.KotlinCodeGen\n+import com.apollographql.apollo.compiler.next.ast.CodeGenerationAst\n+import com.squareup.kotlinpoet.AnnotationSpec\n+import com.squareup.kotlinpoet.BOOLEAN\n+import com.squareup.kotlinpoet.ClassName\n+import com.squareup.kotlinpoet.CodeBlock\n+import com.squareup.kotlinpoet.DOUBLE\n+import com.squareup.kotlinpoet.FLOAT\n+import com.squareup.kotlinpoet.FunSpec\n+import com.squareup.kotlinpoet.INT\n+import com.squareup.kotlinpoet.KModifier\n+import com.squareup.kotlinpoet.LONG\n+import com.squareup.kotlinpoet.ParameterSpec\n+import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy\n+import com.squareup.kotlinpoet.PropertySpec\n+import com.squareup.kotlinpoet.TypeName\n+import com.squareup.kotlinpoet.asClassName\n+import com.squareup.kotlinpoet.asTypeName\n+import com.squareup.kotlinpoet.joinToCode\n+\n+internal fun CodeGenerationAst.FieldType.asTypeName(nullable: Boolean = false): TypeName {\n+  return when (this) {\n+    is CodeGenerationAst.FieldType.Scalar -> when (this) {\n+      is CodeGenerationAst.FieldType.Scalar.ID -> ClassName.bestGuess(type)\n+      is CodeGenerationAst.FieldType.Scalar.String -> String::class.asClassName()\n+      is CodeGenerationAst.FieldType.Scalar.Int -> INT\n+      is CodeGenerationAst.FieldType.Scalar.Boolean -> BOOLEAN\n+      is CodeGenerationAst.FieldType.Scalar.Float -> DOUBLE\n+      is CodeGenerationAst.FieldType.Scalar.Enum -> typeRef.asTypeName()\n+      is CodeGenerationAst.FieldType.Scalar.Custom -> ClassName.bestGuess(type)\n+    }\n+    is CodeGenerationAst.FieldType.Object -> typeRef.asTypeName()\n+    is CodeGenerationAst.FieldType.Array -> List::class.asClassName().parameterizedBy(rawType.asTypeName(nullable))\n+  }.copy(nullable = nullable)\n+}\n+\n+internal fun CodeGenerationAst.TypeRef.asTypeName(): TypeName {\n+  return if (enclosingType == null) {\n+    ClassName(packageName, name)\n+  } else {\n+    ClassName(packageName, enclosingType.name, name)\n+  }\n+}\n+\n+internal fun Any.toDefaultValueCodeBlock(typeName: TypeName, fieldType: CodeGenerationAst.FieldType): CodeBlock {\n+  return when {\n+    this is Number -> CodeBlock.of(\"%L%L\", castTo(typeName), if (typeName == LONG) \"L\" else \"\")\n+    fieldType is CodeGenerationAst.FieldType.Scalar.Enum -> CodeBlock.of(\"%T.safeValueOf(%S)\", typeName, this)\n+    fieldType is CodeGenerationAst.FieldType.Array -> {\n+      @Suppress(\"UNCHECKED_CAST\")\n+      (this as List<Any>).toDefaultValueCodeBlock(typeName, fieldType)\n+    }\n+    this !is String -> CodeBlock.of(\"%L\", this)\n+    else -> CodeBlock.of(\"%S\", this)\n+  }\n+}\n+\n+internal fun CodeGenerationAst.Field.asPropertySpec(initializer: CodeBlock? = null): PropertySpec {\n+  return PropertySpec\n+      .builder(\n+          name = name,\n+          type = if (type.nullable) type.asTypeName().copy(nullable = true) else type.asTypeName()\n+      )\n+      .applyIf(override) { addModifiers(KModifier.OVERRIDE) }\n+      .applyIf(deprecated) { addAnnotation(KotlinCodeGen.deprecatedAnnotation(deprecationReason)) }\n+      .applyIf(description.isNotBlank()) { addKdoc(\"%L\\n\", description) }\n+      .applyIf(initializer != null) { initializer(initializer!!) }\n+      .build()\n+}\n+\n+internal fun responseFieldsPropertySpec(fields: List<CodeGenerationAst.Field>): PropertySpec {\n+  val initializer = CodeBlock.builder()\n+      .addStatement(\"arrayOf(\")\n+      .indent()\n+      .add(fields.map { field -> field.responseFieldInitializerCode }.joinToCode(separator = \",\\n\"))\n+      .unindent()\n+      .addStatement(\"\")\n+      .add(\")\")\n+      .build()\n+  return PropertySpec\n+      .builder(\n+          name = \"RESPONSE_FIELDS\",\n+          type = Array<ResponseField>::class.asClassName().parameterizedBy(ResponseField::class.asClassName()),\n+          modifiers = *arrayOf(KModifier.PRIVATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e800047a806048bcf037b8a7390cee7f9b1553"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcbd2de76dab353bd46ba91edd6e33712cba6a33", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/bcbd2de76dab353bd46ba91edd6e33712cba6a33", "committedDate": "2020-08-26T03:26:48Z", "message": "Part 2 (backend): New Kotlin codegen\n\nKotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\n\nNamed fragment now generated as interfaces with default implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9628764c52c237b710ae730e655d28bf8f01d60a", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/9628764c52c237b710ae730e655d28bf8f01d60a", "committedDate": "2020-08-26T03:28:01Z", "message": "Refactoring / fixing issues after running new code gen for existing test fixtures. No breaking changes yet."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a3fd3e014ace06e1703400fdd023f120aa35538", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/4a3fd3e014ace06e1703400fdd023f120aa35538", "committedDate": "2020-08-26T03:28:04Z", "message": "Revert"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "561adcb58bce8b8c0c020f85238c2bc7951cfd25", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/561adcb58bce8b8c0c020f85238c2bc7951cfd25", "committedDate": "2020-08-26T03:25:03Z", "message": "Revert"}, "afterCommit": {"oid": "4a3fd3e014ace06e1703400fdd023f120aa35538", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/4a3fd3e014ace06e1703400fdd023f120aa35538", "committedDate": "2020-08-26T03:28:04Z", "message": "Revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a06b04d14efcc17aca58a72fb28f3f61d608619b", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/a06b04d14efcc17aca58a72fb28f3f61d608619b", "committedDate": "2020-08-26T04:00:23Z", "message": "Update test fixtures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4249, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}