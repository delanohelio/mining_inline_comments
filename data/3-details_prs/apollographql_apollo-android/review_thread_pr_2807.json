{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDM1NTMy", "number": 2807, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDozMFrOFHqCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo1MDoyM1rOFIYLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTczMTc4OnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/gradle.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDozMFrOIJLoFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo1MjoxMVrOIKQX1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODU4MQ==", "bodyText": "why not just call it apollo-cache? I thought that everything that belongs to normalize cache will be packaged in one artifact?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546498581", "createdAt": "2020-12-21T04:04:30Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/gradle.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+POM_ARTIFACT_ID=apollo-cache-interceptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MDEwNA==", "bodyText": "Excellent question! I'm not 100% sure where I'm going with this but it feels like we should bundle the sqlite cache by default so multiple artifacts would be needed. At this stage of development, my rationale was that having multiple single-responsibility modules makes for better separation of concern and that we would \"polish\" the user-facing API/artifacts once everything is feature complete.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546590104", "createdAt": "2020-12-21T09:11:23Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/gradle.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+POM_ARTIFACT_ID=apollo-cache-interceptor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODU4MQ=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDkxOQ==", "bodyText": "Sure, we can always change this later, let's leave it for now.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547624919", "createdAt": "2020-12-23T03:52:11Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/gradle.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+POM_ARTIFACT_ID=apollo-cache-interceptor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODU4MQ=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTczMzI3OnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNTozM1rOIJLo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNTozM1rOIJLo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODc5NQ==", "bodyText": "nit: private for both props?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546498795", "createdAt": "2020-12-21T04:05:33Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTczNzkxOnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowODo1N1rOIJLrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowMzowOFrOIJ8OHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTQyOQ==", "bodyText": "should we mark as internal? I was thinking back in a day that cache plugin will take existing ApolloClient and decorate it with proper execution context and setup interceptors, so user won't know existence of interceptor as it's our internal implementation abstraction.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499429", "createdAt": "2020-12-21T04:08:57Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NTQ1Nw==", "bodyText": "Also excellent question. I'd love to find a nicer API. Did you have something in mind already?\nShould we introduce a ApolloClientBuilder to take care of the wiring of all the interceptors? In all cases, I think this should stay public as ultimately, we also want users to be able to plug their own interceptors and modify the list as they please?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546595457", "createdAt": "2020-12-21T09:22:36Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTQyOQ=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NDc1MQ==", "bodyText": "@sav007 I ended up adding ApolloClient.Builder, one option would have been to make ApolloClient a data class and copying it around. Using a Builder adds some boilerplate code but also has a few advantages:\n\nI didn't really liked the idea of making ApolloClient a data class\nIt makes it clear what is mutable and what's not\nIt puts the arguments verification logic in a single place", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547294751", "createdAt": "2020-12-22T14:03:08Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTQyOQ=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTczOTQzOnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMDoxNVrOIJLsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMDoxNVrOIJLsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTY1Mw==", "bodyText": "Should we extract interface and inject implementation during construction time?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499653", "createdAt": "2020-12-21T04:10:15Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTc0MDU4OnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMToxNFrOIJLs5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyNTo1NlrOIJRpHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTgxNA==", "bodyText": "nit: could you pls put arguments on separate lines", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499814", "createdAt": "2020-12-21T04:11:14Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {\n+    override fun read(key: String, cacheHeaders: CacheHeaders): Record? {\n+      return normalizedCache.loadRecord(key, cacheHeaders)\n+    }\n+\n+    override fun read(keys: Collection<String>, cacheHeaders: CacheHeaders): Collection<Record> {\n+      return keys.mapNotNull { normalizedCache.loadRecord(it, cacheHeaders) }\n+    }\n+  }\n+\n+  override fun <D : Operation.Data> intercept(request: ApolloRequest<D>, chain: ApolloInterceptorChain): Flow<ApolloResponse<D>> {\n+    return flow {\n+      val response = readFromCache(request)\n+      if (response != null) {\n+        emit(ApolloResponse(requestUuid = request.requestUuid, response = response, executionContext = request.executionContext + CacheExecutionContext(true)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NzE0OA==", "bodyText": "Sure thing!", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546597148", "createdAt": "2020-12-21T09:25:56Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {\n+    override fun read(key: String, cacheHeaders: CacheHeaders): Record? {\n+      return normalizedCache.loadRecord(key, cacheHeaders)\n+    }\n+\n+    override fun read(keys: Collection<String>, cacheHeaders: CacheHeaders): Collection<Record> {\n+      return keys.mapNotNull { normalizedCache.loadRecord(it, cacheHeaders) }\n+    }\n+  }\n+\n+  override fun <D : Operation.Data> intercept(request: ApolloRequest<D>, chain: ApolloInterceptorChain): Flow<ApolloResponse<D>> {\n+    return flow {\n+      val response = readFromCache(request)\n+      if (response != null) {\n+        emit(ApolloResponse(requestUuid = request.requestUuid, response = response, executionContext = request.executionContext + CacheExecutionContext(true)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTgxNA=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTc0MTk3OnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/CacheExecutionContext.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMjoyOFrOIJLtwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoyMDoyNVrOIJd8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDAzMg==", "bodyText": "internal?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546500032", "createdAt": "2020-12-21T04:12:28Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/CacheExecutionContext.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.ExecutionContext\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+\n+@ApolloExperimental\n+data class CacheExecutionContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5ODA2MA==", "bodyText": "I used this to carry the information about whether a given response came from the cache or not so ultimately the user should have access to this.\nSee Response<D>.cacheContext()", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546598060", "createdAt": "2020-12-21T09:27:52Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/CacheExecutionContext.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.ExecutionContext\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+\n+@ApolloExperimental\n+data class CacheExecutionContext(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDAzMg=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5ODc1NQ==", "bodyText": "My bad you are right.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546798755", "createdAt": "2020-12-21T16:20:25Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/CacheExecutionContext.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.ExecutionContext\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+\n+@ApolloExperimental\n+data class CacheExecutionContext(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDAzMg=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTc0NzUzOnYy", "diffSide": "RIGHT", "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNjoyNlrOIJLwyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo0Mjo1NVrOIJSHuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDgxMA==", "bodyText": "As far as I remember the original idea is that interceptor get *Store implementation injected where *Store is constructed with cache implementation. So interceptor knows only about store, and has only one dependency.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546500810", "createdAt": "2020-12-21T04:16:26Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNDk4NA==", "bodyText": "Makes perfect sense, I changed that.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546604984", "createdAt": "2020-12-21T09:42:55Z", "author": {"login": "martinbonnin"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDgxMA=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTc0OTE0OnYy", "diffSide": "RIGHT", "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNzoxOFrOIJLxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNzoxOFrOIJLxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMTAxNA==", "bodyText": "private?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546501014", "createdAt": "2020-12-21T04:17:18Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.apollographql.apollo.cache.normalized.simple\n+\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+\n+class SimpleNormalizedCache : NormalizedCache() {\n+  val map = mutableMapOf<String, Record>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTc1MDYzOnYy", "diffSide": "RIGHT", "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxODozNVrOIJLyZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo0NzowM1rOIJSP7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMTIyMA==", "bodyText": "internal? Also should we call it InMemoryNormalizedCache or  MapNormalizedCache?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546501220", "createdAt": "2020-12-21T04:18:35Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.apollographql.apollo.cache.normalized.simple\n+\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+\n+class SimpleNormalizedCache : NormalizedCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNzA4NA==", "bodyText": "Renamed to MapNormalizedCache. InMemoryNormalizedCache might clash with the future LRU cache.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546607084", "createdAt": "2020-12-21T09:47:03Z", "author": {"login": "martinbonnin"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.apollographql.apollo.cache.normalized.simple\n+\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+\n+class SimpleNormalizedCache : NormalizedCache() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMTIyMA=="}, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzI4NzkwOnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo0ODozMVrOIKQUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo0ODozMVrOIKQUuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDEyMA==", "bodyText": "nit:\nfun serverUrl(serverUrl: String): Builder = apply {\n   ...\n}\n\nthe same nit for the rest APIs", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547624120", "createdAt": "2020-12-23T03:48:31Z", "author": {"login": "sav007"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "diffHunk": "@@ -50,4 +55,100 @@ class ApolloClient(\n         executionContext = executionContext + coroutineDispatcherContext\n     )\n   }\n+\n+  fun newBuilder(): Builder {\n+    return DefaultBuilder(scalarTypeAdapters)\n+        .networkTransport(networkTransport)\n+        .subscriptionNetworkTransport(subscriptionNetworkTransport)\n+        .interceptors(interceptors)\n+        .executionContext(executionContext)\n+  }\n+\n+  class DefaultBuilder(override val scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT) : Builder()\n+\n+  abstract class Builder {\n+    internal abstract val scalarTypeAdapters: ScalarTypeAdapters\n+\n+    private var networkTransport: NetworkTransport? = null\n+    private var subscriptionNetworkTransport: NetworkTransport? = null\n+    private var interceptors: List<ApolloRequestInterceptor> = emptyList()\n+    private var executionContext: ExecutionContext = ExecutionContext.Empty\n+\n+    fun serverUrl(serverUrl: String): Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzI5MDg4OnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo1MDoyM1rOIKQWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0MjoxMVrOIKb2Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDU0Mg==", "bodyText": "is there a reason to have this DefaultBuilder  class, can't Builder be concrete class with scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547624542", "createdAt": "2020-12-23T03:50:23Z", "author": {"login": "sav007"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "diffHunk": "@@ -50,4 +55,100 @@ class ApolloClient(\n         executionContext = executionContext + coroutineDispatcherContext\n     )\n   }\n+\n+  fun newBuilder(): Builder {\n+    return DefaultBuilder(scalarTypeAdapters)\n+        .networkTransport(networkTransport)\n+        .subscriptionNetworkTransport(subscriptionNetworkTransport)\n+        .interceptors(interceptors)\n+        .executionContext(executionContext)\n+  }\n+\n+  class DefaultBuilder(override val scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT) : Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxMjk0Mw==", "bodyText": "I was contemplating the idea of auto generating Builders with pre-built ScalarTypeAdapters like ApolloClient.Companion.GithubBuilder(). But that makes the generated code depend on the runtime which isn't great. I'll revert.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547812943", "createdAt": "2020-12-23T08:42:11Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "diffHunk": "@@ -50,4 +55,100 @@ class ApolloClient(\n         executionContext = executionContext + coroutineDispatcherContext\n     )\n   }\n+\n+  fun newBuilder(): Builder {\n+    return DefaultBuilder(scalarTypeAdapters)\n+        .networkTransport(networkTransport)\n+        .subscriptionNetworkTransport(subscriptionNetworkTransport)\n+        .interceptors(interceptors)\n+        .executionContext(executionContext)\n+  }\n+\n+  class DefaultBuilder(override val scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT) : Builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDU0Mg=="}, "originalCommit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2910, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}