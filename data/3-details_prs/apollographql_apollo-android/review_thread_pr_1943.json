{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTgzMTg0", "number": 1943, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjowMjoxOVrODauiuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NjoxOFrODbYuRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzUyMTIwOnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/subscription/OperationClientMessage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjowMjoxOVrOFh0q0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyNDozM1rOGCWs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDI1OA==", "bodyText": "Should this just be queryHashMethod? It's not necessarily sha256", "url": "https://github.com/apollographql/apollo-android/pull/1943#discussion_r371010258", "createdAt": "2020-01-26T16:02:19Z", "author": {"login": "kenyee"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/subscription/OperationClientMessage.java", "diffHunk": "@@ -62,26 +62,48 @@ public Init(@NotNull Map<String, Object> connectionParams) {\n     private static final String JSON_KEY_QUERY = \"query\";\n     private static final String JSON_KEY_VARIABLES = \"variables\";\n     private static final String JSON_KEY_OPERATION_NAME = \"operationName\";\n+    private static final String JSON_KEY_EXTENSIONS = \"extensions\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY = \"persistedQuery\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_VERSION = \"version\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_HASH = \"sha256Hash\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5809fce374cc7f836389cb620cbc5d4d7485229c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5Njc4NQ==", "bodyText": "that part is really interesting, GraphQL spec doesn't have any info regarding this. BTW I noticed the same issue with regular queries, we sending sha256Hash  but as you said it can be different (md5). As far as I remember Apollo server expects sha256Hash.\nWhat about your use case, what GraphQL server are you using? Are you using sha256 as hash?\nI guess the only option right now is to make it configurable.", "url": "https://github.com/apollographql/apollo-android/pull/1943#discussion_r371596785", "createdAt": "2020-01-28T03:41:05Z", "author": {"login": "sav007"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/subscription/OperationClientMessage.java", "diffHunk": "@@ -62,26 +62,48 @@ public Init(@NotNull Map<String, Object> connectionParams) {\n     private static final String JSON_KEY_QUERY = \"query\";\n     private static final String JSON_KEY_VARIABLES = \"variables\";\n     private static final String JSON_KEY_OPERATION_NAME = \"operationName\";\n+    private static final String JSON_KEY_EXTENSIONS = \"extensions\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY = \"persistedQuery\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_VERSION = \"version\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_HASH = \"sha256Hash\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDI1OA=="}, "originalCommit": {"oid": "5809fce374cc7f836389cb620cbc5d4d7485229c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMjI1Nw==", "bodyText": "@sav007 . This part is already merged, but would it be better to just name it hash as it could be anything.\nWe use md5", "url": "https://github.com/apollographql/apollo-android/pull/1943#discussion_r405122257", "createdAt": "2020-04-07T21:24:33Z", "author": {"login": "SaurabhKukreja"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/subscription/OperationClientMessage.java", "diffHunk": "@@ -62,26 +62,48 @@ public Init(@NotNull Map<String, Object> connectionParams) {\n     private static final String JSON_KEY_QUERY = \"query\";\n     private static final String JSON_KEY_VARIABLES = \"variables\";\n     private static final String JSON_KEY_OPERATION_NAME = \"operationName\";\n+    private static final String JSON_KEY_EXTENSIONS = \"extensions\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY = \"persistedQuery\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_VERSION = \"version\";\n+    private static final String JSON_KEY_EXTENSIONS_PERSISTED_QUERY_HASH = \"sha256Hash\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDI1OA=="}, "originalCommit": {"oid": "5809fce374cc7f836389cb620cbc5d4d7485229c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzUyMTg4OnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/response/OperationResponseParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjowMzozM1rOFh0rLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjowMzozM1rOFh0rLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDM1MA==", "bodyText": "Nice renaming of this method \ud83d\ude42", "url": "https://github.com/apollographql/apollo-android/pull/1943#discussion_r371010350", "createdAt": "2020-01-26T16:03:33Z", "author": {"login": "kenyee"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/response/OperationResponseParser.java", "diffHunk": "@@ -130,15 +130,15 @@ public OperationResponseParser(Operation<D, W, ?> operation, ResponseFieldMapper\n       @Override public Error read(ResponseJsonStreamReader reader) throws IOException {\n         return reader.nextObject(true, new ResponseJsonStreamReader.ObjectReader<Error>() {\n           @Override public Error read(ResponseJsonStreamReader reader) throws IOException {\n-            return readError(reader.toMap());\n+            return parseError(reader.toMap());\n           }\n         });\n       }\n     });\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private Error readError(Map<String, Object> payload) {\n+  public static Error parseError(Map<String, Object> payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5809fce374cc7f836389cb620cbc5d4d7485229c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDQzMjA3OnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/subscription/RealSubscriptionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NjoxOFrOFi2BRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NjoxOFrOFi2BRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDk2Ng==", "bodyText": "This looks little weird in terms of code style. Would be nice to leave this false alone", "url": "https://github.com/apollographql/apollo-android/pull/1943#discussion_r372080966", "createdAt": "2020-01-28T21:56:18Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/subscription/RealSubscriptionManager.java", "diffHunk": "@@ -165,13 +170,16 @@ void doSubscribe(Subscription subscription, SubscriptionManager.Callback callbac\n         timer.cancelTask(INACTIVITY_TIMEOUT_TIMER_TASK_ID);\n \n         final UUID subscriptionId = UUID.randomUUID();\n-\n         subscriptions.put(subscriptionId, new SubscriptionRecord(subscriptionId, subscription, callback));\n+\n         if (state == SubscriptionManagerState.DISCONNECTED) {\n           state = SubscriptionManagerState.CONNECTING;\n           transport.connect();\n         } else if (state == SubscriptionManagerState.ACTIVE) {\n-          transport.send(new OperationClientMessage.Start(subscriptionId.toString(), subscription, scalarTypeAdapters));\n+          transport.send(\n+              new OperationClientMessage.Start(subscriptionId.toString(), subscription, scalarTypeAdapters, autoPersistSubscription,\n+                  false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5809fce374cc7f836389cb620cbc5d4d7485229c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3246, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}