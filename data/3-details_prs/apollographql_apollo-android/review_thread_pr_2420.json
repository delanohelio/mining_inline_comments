{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MTAwOTY0", "number": 2420, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyM1rOELRv8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowODoyOFrOELrYfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjYwNTk0OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Operation.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyM1rOGszCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyM1rOGszCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNjc4Nw==", "bodyText": "I think this isn't used by subscriptions at the moment but looking at the json, it looks like it it could be factored in.", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r449626787", "createdAt": "2020-07-03T15:07:23Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Operation.kt", "diffHunk": "@@ -73,6 +73,36 @@ interface Operation<D : Operation.Data, T, V : Operation.Variables> {\n   @Throws(IOException::class)\n   fun parse(byteString: ByteString): Response<T>\n \n+  /**\n+   * Composes POST JSON-encoded request body to be sent to the GraphQL server.\n+   *\n+   * In case when [autoPersistQueries] is set to `true` special `extension` attributes, required by query auto persistence,\n+   * will be encoded along with regular GraphQL request body. If query was previously persisted on the GraphQL server\n+   * set [withQueryDocument] to `false` to skip query document be sent in the request.\n+   *\n+   * Optional [scalarTypeAdapters] must be provided in case when this operation defines variables with custom GraphQL scalar type.\n+   *\n+   * *Example*:\n+   * ```\n+   * {\n+   *    \"query\": \"query TestQuery($episode: Episode) { hero(episode: $episode) { name } }\",\n+   *    \"operationName\": \"TestQuery\",\n+   *    \"variables\": { \"episode\": \"JEDI\" }\n+   *    \"extensions\": {\n+   *      \"persistedQuery\": {\n+   *        \"version\": 1,\n+   *        \"sha256Hash\": \"32637895609e6c51a2593f5cfb49244fd79358d327ff670b3e930e024c3db8f6\"\n+   *      }\n+   *    }\n+   * }\n+   * ```\n+   */\n+  fun composeRequestBody(\n+      autoPersistQueries: Boolean,\n+      withQueryDocument: Boolean,\n+      scalarTypeAdapters: ScalarTypeAdapters\n+  ): ByteString\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzIxMzA0OnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjozMTo1OFrOGs4XSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTozMDoxMlrOGtP3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzk5NA==", "bodyText": "So it seems like this choose to preserve the old behavior of not allowing persisted mutations if you don't use a custom interceptor? Fine with me since we plan to use  a custom one :) but is there plan to follow-up to investigate enabling this for everyone?", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r449713994", "createdAt": "2020-07-03T22:31:58Z", "author": {"login": "BenSchwab"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java", "diffHunk": "@@ -383,14 +386,24 @@ private ApolloInterceptorChain prepareInterceptorChain(Operation operation) {\n     List<ApolloInterceptor> interceptors = new ArrayList<>();\n \n     for (ApolloInterceptorFactory factory : applicationInterceptorFactories) {\n-      interceptors.add(factory.newInterceptor());\n+      ApolloInterceptor interceptor = factory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n     }\n     interceptors.addAll(applicationInterceptors);\n \n     interceptors.add(responseFetcher.provideInterceptor(logger));\n     interceptors.add(new ApolloCacheInterceptor(apolloStore, responseFieldMapper, dispatcher, logger));\n-    if (operation instanceof Query && enableAutoPersistedQueries) {\n-      interceptors.add(new ApolloAutoPersistedQueryInterceptor(logger, useHttpGetMethodForPersistedQueries));\n+    if (autoPersistedOperationsInterceptorFactory != null) {\n+      ApolloInterceptor interceptor = autoPersistedOperationsInterceptorFactory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n+    } else {\n+      if (operation instanceof Query && enableAutoPersistedQueries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTEyMA==", "bodyText": "The plan would be to encourage using the custom interceptor approach for more advanced use cases. Maybe even deprecate enableAutoPersistedQueries and useHttpGetMethodForPersistedQueries. There's a lot of boilerplate involved right now in passing these variables over from the ApolloClientBuilder to ApolloClient to RealApolloCall (and even QueryRefetcher) and I didn't really fell like adding a new enableAutoPersistedMutations boolean. It feels like most of this state can be local to the interceptor. Also, ApolloAutoPersistedOperationInterceptor is public so that users won't have to reimplement a full interceptor but can do something like:\nbuilder.setAutoPersistedOperationsInterceptorFactory(ApolloAutoPersistedOperationInterceptor.Factory())", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450099120", "createdAt": "2020-07-06T09:30:12Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java", "diffHunk": "@@ -383,14 +386,24 @@ private ApolloInterceptorChain prepareInterceptorChain(Operation operation) {\n     List<ApolloInterceptor> interceptors = new ArrayList<>();\n \n     for (ApolloInterceptorFactory factory : applicationInterceptorFactories) {\n-      interceptors.add(factory.newInterceptor());\n+      ApolloInterceptor interceptor = factory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n     }\n     interceptors.addAll(applicationInterceptors);\n \n     interceptors.add(responseFetcher.provideInterceptor(logger));\n     interceptors.add(new ApolloCacheInterceptor(apolloStore, responseFieldMapper, dispatcher, logger));\n-    if (operation instanceof Query && enableAutoPersistedQueries) {\n-      interceptors.add(new ApolloAutoPersistedQueryInterceptor(logger, useHttpGetMethodForPersistedQueries));\n+    if (autoPersistedOperationsInterceptorFactory != null) {\n+      ApolloInterceptor interceptor = autoPersistedOperationsInterceptorFactory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n+    } else {\n+      if (operation instanceof Query && enableAutoPersistedQueries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzk5NA=="}, "originalCommit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjgwNTczOnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowODoyOFrOGtWgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo0NzoyN1rOGumbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA==", "bodyText": "should we make it configurable to enable / disable autopersistence for queries / mutations?", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450207950", "createdAt": "2020-07-06T13:08:28Z", "author": {"login": "sav007"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNzc2Nw==", "bodyText": "It's relatively easy to do so by implementing a custom ApolloInterceptorFactory:\nclass OnlyPersistQueriesInterceptor: ApolloInterceptorFactory {\n    override fun newInterceptor(logger: Logger, operation: Operation<?, ?, ?>) = if (operation is Query) {\n         ApolloAutoPersistedOperationInterceptor(logger, false);\n    } else {\n       null\n    }\n}\nBut it might be easier to add more params to the Factory. Something like this:\nFactory(boolean useHttpGetForQueries, boolean persistQueries, boolean persistMutations)\n?\nThe useHttpGetForQueries feels a bit asymmetrical though. Maybe it is the one that should be left out instead?", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450217767", "createdAt": "2020-07-06T13:24:56Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}, "originalCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NTU2NQ==", "bodyText": "I was thinking of Factory(boolean useHttpGetForQueries, boolean persistQueries, boolean persistMutations), so to keep everything in one place.", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r451095565", "createdAt": "2020-07-07T19:32:54Z", "author": {"login": "sav007"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}, "originalCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxNzE5OA==", "bodyText": "Done. Let me know what you think.", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r451517198", "createdAt": "2020-07-08T12:47:27Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA=="}, "originalCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}