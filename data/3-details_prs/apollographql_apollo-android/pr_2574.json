{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTgwMzQ5", "number": 2574, "title": "Deprecate toDeferred and toJob in favor of await.", "bodyText": "Closes #2571\nI've removed the toDeferred and toJob APIs since they weren't respecting structured concurrency properly. I've introduced new await calls as discussed in the ticket.\nI wanted to provide some tests, but I found out the necessary infrastructure isn't there yet, and it's out of scope of this PR.\nEDIT: Found where the tests are, will add a few of them.", "createdAt": "2020-09-12T18:17:06Z", "url": "https://github.com/apollographql/apollo-android/pull/2574", "merged": true, "mergeCommit": {"oid": "7897ece127ae5318b45eb4c0c91bb4a6b6be82de"}, "closed": true, "closedAt": "2020-09-13T21:49:08Z", "author": {"login": "R4md4c"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIOV5WgFqTQ4NzI0Nzc0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIlsjjgFqTQ4NzM0MjIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjQ3NzQ4", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487247748", "createdAt": "2020-09-12T18:30:23Z", "commit": {"oid": "e48511201835d0cef67061732218c25f48742f9d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozMDoyM1rOHQ2upw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozMDoyM1rOHQ2upw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTk0Mw==", "bodyText": "You should have some kind of boolean to check if you already resumed once, otherwise an exception will be thrown second time the callback is called (I assume it's possible)", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487435943", "createdAt": "2020-09-12T18:30:23Z", "author": {"login": "recheej"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -73,35 +73,27 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n \n \n /**\n- * Converts an [ApolloCall] to an [Deferred]. This is a convenience method that will only return the first value emitted.\n- * If the more than one response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the deferred\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun <T> ApolloCall<T>.toDeferred(): Deferred<Response<T>> {\n-  val deferred = CompletableDeferred<Response<T>>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n   enqueue(object : ApolloCall.Callback<T>() {\n     override fun onResponse(response: Response<T>) {\n-      if (deferred.isActive) {\n-        deferred.complete(response)\n-      }\n+      cont.resume(response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48511201835d0cef67061732218c25f48742f9d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjU2MTY5", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487256169", "createdAt": "2020-09-12T20:57:27Z", "commit": {"oid": "2411d3b6f3e68199d1fe89112d241e907d8cefea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMDo1NzoyOFrOHQ3eZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMDo1ODo0N1rOHQ3epw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ==", "bodyText": "You should also guard here too I guess since you can possibly get multiple failures.", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487448165", "createdAt": "2020-09-12T20:57:28Z", "author": {"login": "recheej"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -73,35 +73,33 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n \n \n /**\n- * Converts an [ApolloCall] to an [Deferred]. This is a convenience method that will only return the first value emitted.\n- * If the more than one response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the deferred\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun <T> ApolloCall<T>.toDeferred(): Deferred<Response<T>> {\n-  val deferred = CompletableDeferred<Response<T>>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n   enqueue(object : ApolloCall.Callback<T>() {\n+\n+    private var resumeIsCalled = false\n+\n     override fun onResponse(response: Response<T>) {\n-      if (deferred.isActive) {\n-        deferred.complete(response)\n+      if (!resumeIsCalled) {\n+        cont.resume(response)\n+        resumeIsCalled = true\n       }\n     }\n \n     override fun onFailure(e: ApolloException) {\n-      if (deferred.isActive) {\n-        deferred.completeExceptionally(e)\n-      }\n+      cont.resumeWithException(e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2411d3b6f3e68199d1fe89112d241e907d8cefea"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODIzMQ==", "bodyText": "I'm not familiar with this library tbh, but reading the documentation for ApolloPrefetch says it should only be called back once so you shouldn't need this. Then again adding the check doesn't hurt. I'll let library maintainers say whether this can be called multiple times or not.", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487448231", "createdAt": "2020-09-12T20:58:47Z", "author": {"login": "recheej"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -141,35 +139,34 @@ fun <T> ApolloSubscriptionCall<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n }\n \n /**\n- * Converts an [ApolloPrefetch] to [Job].\n+ * Suspends the [ApolloPrefetch] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloPrefetch] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the converted job\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun ApolloPrefetch.toJob(): Job {\n-  val deferred = CompletableDeferred<Unit>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun ApolloPrefetch.await(): Unit = suspendCancellableCoroutine { cont ->\n \n   enqueue(object : ApolloPrefetch.Callback() {\n+\n+    private var resumedIsCalled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2411d3b6f3e68199d1fe89112d241e907d8cefea"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjU3NzEw", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487257710", "createdAt": "2020-09-12T21:29:50Z", "commit": {"oid": "2411d3b6f3e68199d1fe89112d241e907d8cefea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9", "author": {"user": {"login": "R4md4c", "name": "Ahmed I. Khalil"}}, "url": "https://github.com/apollographql/apollo-android/commit/52bf16a4981fdd89999685d35c81e1e2f0f3eba9", "committedDate": "2020-09-13T12:24:31Z", "message": "Remove toDeferred in favor of await.\n\nCloses #2571"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzIyNDUw", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487322450", "createdAt": "2020-09-13T16:44:09Z", "commit": {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzIyNDU4", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487322458", "createdAt": "2020-09-13T16:44:16Z", "commit": {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0NDoxNlrOHQ9vyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0NDoxNlrOHQ9vyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDkyMA==", "bodyText": "is there any reason to not use cont.isCancelled? There was an issue with RC but looks like it was fixed Kotlin/kotlinx.coroutines#830\nSame below", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487550920", "createdAt": "2020-09-13T16:44:16Z", "author": {"login": "sav007"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -72,13 +76,49 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n }\n \n \n+/**\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n+ *\n+ * This is a convenience method that will only return the first value emitted. If more than one\n+ * response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ *\n+ * @param <T>  the value type.\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n+ */\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n+\n+  cont.invokeOnCancellation {\n+    cancel()\n+  }\n+\n+  enqueue(object : ApolloCall.Callback<T>() {\n+\n+    private val wasCalled = AtomicBoolean(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzQyMjM3", "url": "https://github.com/apollographql/apollo-android/pull/2574#pullrequestreview-487342237", "createdAt": "2020-09-13T21:43:47Z", "commit": {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4269, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}