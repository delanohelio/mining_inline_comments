{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjMwNDYz", "number": 2467, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDo0NTozOVrOESDoSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDo0OToxN1rOESDpMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY5MjkwOnYy", "diffSide": "RIGHT", "path": "apollo-api/build.gradle.kts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDo0NTozOVrOG3FTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNTo0NjowM1rOG3FngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMTczOQ==", "bodyText": "I'm super reluctant to adding kotlin-reflect as a dependency as it's known to be a laaaaaarge dependency. See https://youtrack.jetbrains.com/issue/KT-20793 for an exemple.\napollo-api is pretty lightweight at the moment and given that it's imported by all other modules, I'd like to keep it that way.\nCan you elaborate why keeping a String for scalar types doesn't work ? I didn't find that many places using KClass.qualifiedName() and most of them are for debug/troubleshooting.", "url": "https://github.com/apollographql/apollo-android/pull/2467#discussion_r460411739", "createdAt": "2020-07-25T14:45:39Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/build.gradle.kts", "diffHunk": "@@ -36,6 +44,7 @@ kotlin {\n       dependsOn(commonMain)\n       dependencies {\n         implementation(kotlin(\"stdlib\"))\n+        implementation(groovy.util.Eval.x(project, \"x.dep.kotlin.reflect\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f52b490097c584426828e6a9cd930632ca5c8e50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNDIzOQ==", "bodyText": "The dependency shouldn't be required since 1.3.70, since KClass is moved out of kotlin-reflect jar. I will remove it.\n\nCan you elaborate why keeping a String for scalar types doesn't work ? I didn't find that many places using KClass.qualifiedName() and most of them are for debug/troubleshooting.\n\nIt is used by apollo-api to select the type adapters to use (among the set of default ones for Kotlin/Java stdlib types, and the user-supplied ones via customTypeMapping in Gradle). The lookup tables are currently keyed by KClass.qualifiedName(), which does not work at Kotlin/JS runtime.", "url": "https://github.com/apollographql/apollo-android/pull/2467#discussion_r460414239", "createdAt": "2020-07-25T15:14:32Z", "author": {"login": "andersio"}, "path": "apollo-api/build.gradle.kts", "diffHunk": "@@ -36,6 +44,7 @@ kotlin {\n       dependsOn(commonMain)\n       dependencies {\n         implementation(kotlin(\"stdlib\"))\n+        implementation(groovy.util.Eval.x(project, \"x.dep.kotlin.reflect\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMTczOQ=="}, "originalCommit": {"oid": "f52b490097c584426828e6a9cd930632ca5c8e50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTkxOQ==", "bodyText": "The dependency shouldn't be required since 1.3.70, since KClass is moved out of kotlin-reflect jar. I will remove it.\n\nNice \ud83d\udc4d\n\nThe lookup tables are currently keyed by KClass.qualifiedName(), which does not work at Kotlin/JS runtime.\n\nThat's what I'm trying to understand.\nLooking at ScalarTypeAdapters:\n  fun <T : Any> adapterFor(scalarType: ScalarType): CustomTypeAdapter<T> {\n    var customTypeAdapter: CustomTypeAdapter<*>? = customTypeAdapters[scalarType.typeName()]\n    if (customTypeAdapter == null) {\n      customTypeAdapter = DEFAULT_ADAPTERS[scalarType.className()]\n    }\n    return requireNotNull(customTypeAdapter) {\n      \"Can't map GraphQL type: `${scalarType.typeName()}` to: `${scalarType.className()}`. Did you forget to add a custom type adapter?\"\n    } as CustomTypeAdapter<T>\n  }\nThis doesn't use KClass.qualifiedName(), does it ? both typeName() and className()are generated by the compiler based on either default hardcoded value (java.lang.String, etc...) or user input in case of a custom adapter:\nenum class CustomType : ScalarType {\n  ID {\n    override fun typeName(): String = \"ID\"\n\n    override fun className(): String = \"kotlin.String\"\n  },\n\n  URL {\n    override fun typeName(): String = \"URL\"\n\n    override fun className(): String = \"kotlin.Any\"\n  }\n}", "url": "https://github.com/apollographql/apollo-android/pull/2467#discussion_r460415919", "createdAt": "2020-07-25T15:34:33Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/build.gradle.kts", "diffHunk": "@@ -36,6 +44,7 @@ kotlin {\n       dependsOn(commonMain)\n       dependencies {\n         implementation(kotlin(\"stdlib\"))\n+        implementation(groovy.util.Eval.x(project, \"x.dep.kotlin.reflect\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMTczOQ=="}, "originalCommit": {"oid": "f52b490097c584426828e6a9cd930632ca5c8e50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNjg5Ng==", "bodyText": "That's a good point. I probably had made the decision to change it simply because Gradle wasn't building, ignoring the fact that .qualifiedName() is used only in Tests. I will revert it.", "url": "https://github.com/apollographql/apollo-android/pull/2467#discussion_r460416896", "createdAt": "2020-07-25T15:46:03Z", "author": {"login": "andersio"}, "path": "apollo-api/build.gradle.kts", "diffHunk": "@@ -36,6 +44,7 @@ kotlin {\n       dependsOn(commonMain)\n       dependencies {\n         implementation(kotlin(\"stdlib\"))\n+        implementation(groovy.util.Eval.x(project, \"x.dep.kotlin.reflect\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMTczOQ=="}, "originalCommit": {"oid": "f52b490097c584426828e6a9cd930632ca5c8e50"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY5NTIzOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Response.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDo0OToxN1rOG3FUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDo0OToxN1rOG3FUdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMjAyMQ==", "bodyText": "Nit: unused import?", "url": "https://github.com/apollographql/apollo-android/pull/2467#discussion_r460412021", "createdAt": "2020-07-25T14:49:17Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Response.kt", "diffHunk": "@@ -1,6 +1,7 @@\n package com.apollographql.apollo.api\n \n import kotlin.jvm.JvmStatic\n+import kotlin.js.JsName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f52b490097c584426828e6a9cd930632ca5c8e50"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2991, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}