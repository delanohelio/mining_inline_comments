{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjc2Mzg4", "number": 2501, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowMTowN1rOEWP75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowMTowN1rOEWP75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzY1MjIxOnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/ApolloMutationCall.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowMTowN1rOG9dSYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1NTowNVrOG9khew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NjE2Mg==", "bodyText": "While reviewing I remembered I also added similar capability to ApolloClient. There I used newBuilder naming since OkHttp and Retrofit use that. I don't have a strong feeling but we should align them.\nhttps://github.com/apollographql/apollo-android/blob/master/apollo-runtime/src/main/java/com/apollographql/apollo/ApolloClient.java#L352", "url": "https://github.com/apollographql/apollo-android/pull/2501#discussion_r467096162", "createdAt": "2020-08-07T15:01:07Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/ApolloMutationCall.java", "diffHunk": "@@ -40,9 +52,11 @@\n    * @param requestHeaders The {@link RequestHeaders} to use for this request.\n    * @return The ApolloCall object with the provided {@link RequestHeaders}.\n    */\n-  @NotNull ApolloMutationCall<T> requestHeaders(@NotNull RequestHeaders requestHeaders);\n+  @Deprecated @NotNull ApolloMutationCall<T> requestHeaders(@NotNull RequestHeaders requestHeaders);\n+\n+  @Deprecated @NotNull @Override ApolloMutationCall<T> clone();\n \n-  @NotNull @Override ApolloMutationCall<T> clone();\n+  @NotNull @Override ApolloMutationCall.Builder<T> toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e230ad3f3051bc7f0f4d9e8729bdfbed569b306"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDcxNQ==", "bodyText": "I like newBuilder() better, it's more consistent with other libs. The question is whether we want to invest in this API if end up rebuilding it in apollo-runtime-kotlin. If we end up deprecating apollo-runtime in favor of apollo-runtime-kotlin, there's no need to deprecate too much.", "url": "https://github.com/apollographql/apollo-android/pull/2501#discussion_r467214715", "createdAt": "2020-08-07T18:55:05Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/ApolloMutationCall.java", "diffHunk": "@@ -40,9 +52,11 @@\n    * @param requestHeaders The {@link RequestHeaders} to use for this request.\n    * @return The ApolloCall object with the provided {@link RequestHeaders}.\n    */\n-  @NotNull ApolloMutationCall<T> requestHeaders(@NotNull RequestHeaders requestHeaders);\n+  @Deprecated @NotNull ApolloMutationCall<T> requestHeaders(@NotNull RequestHeaders requestHeaders);\n+\n+  @Deprecated @NotNull @Override ApolloMutationCall<T> clone();\n \n-  @NotNull @Override ApolloMutationCall<T> clone();\n+  @NotNull @Override ApolloMutationCall.Builder<T> toBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NjE2Mg=="}, "originalCommit": {"oid": "3e230ad3f3051bc7f0f4d9e8729bdfbed569b306"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3010, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}