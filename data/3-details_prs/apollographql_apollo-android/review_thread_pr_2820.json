{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1Mzk0MDU3", "number": 2820, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo1NDo0NVrOFJSEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo1Mjo0N1rOFJYqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjc3NTU1OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/CustomScalar.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo1NDo0NVrOILl3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0ODoyMFrOIL1pZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTY3Mw==", "bodyText": "where it's used? I might missed that during reviewing PR", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549025673", "createdAt": "2020-12-26T19:54:45Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/CustomScalar.kt", "diffHunk": "@@ -3,15 +3,17 @@ package com.apollographql.apollo.api\n /**\n  * Represents a mapping from a custom GraphQL scalar type to a Java/Kotlin class\n  */\n-interface ScalarType {\n-\n+data class CustomScalar(\n   /**\n    * GraphQL schema custom scalar type name (e.g. `ID`, `URL`, `DateTime` etc.)\n    */\n-  val graphqlName: String\n+  val graphqlName: String,\n \n   /**\n    * Fully qualified class name this GraphQL scalar type is mapped to (e.g. `java.lang.String`, `java.net.URL`, `java.util.DateTime`)\n    */\n   val className: String\n+) {\n+  // Do not remove, this is used by generated code\n+  companion object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4NDE5OA==", "bodyText": "My bad, it's a leftover from a previous attempt to generate CustomScalars as extension properties like CustomScalar.Date. But it leads to nasty import clashes (extension property vs java.util.Date for an exemple) so I reverted to using CustomScalars.Date (See da7da11)", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549284198", "createdAt": "2020-12-28T09:48:20Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/CustomScalar.kt", "diffHunk": "@@ -3,15 +3,17 @@ package com.apollographql.apollo.api\n /**\n  * Represents a mapping from a custom GraphQL scalar type to a Java/Kotlin class\n  */\n-interface ScalarType {\n-\n+data class CustomScalar(\n   /**\n    * GraphQL schema custom scalar type name (e.g. `ID`, `URL`, `DateTime` etc.)\n    */\n-  val graphqlName: String\n+  val graphqlName: String,\n \n   /**\n    * Fully qualified class name this GraphQL scalar type is mapped to (e.g. `java.lang.String`, `java.net.URL`, `java.util.DateTime`)\n    */\n   val className: String\n+) {\n+  // Do not remove, this is used by generated code\n+  companion object", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTY3Mw=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjc4NzU1OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQyMDoxMDozOFrOILl81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToxNzowMVrOINqSQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA==", "bodyText": "Should we skip empty object generation?", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549027030", "createdAt": "2020-12-26T20:10:38Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4NTUzNw==", "bodyText": "I feel like consistency is a better dev experience and adheres to the principle of least astonishment (see #2721 for an exemple)\nNo strong feeling there though. If generating an empty object it causes any problem, we should remove it.", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549285537", "createdAt": "2020-12-28T09:52:47Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MDgxNA==", "bodyText": "I think it will look odd for the user to see empty class generated and visible for import.", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549760814", "createdAt": "2020-12-29T16:09:33Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MTkxNg==", "bodyText": "Also I have a suggestion to generate additional KDoc that briefly explains the purpose of this generated class, what do you think?", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549761916", "createdAt": "2020-12-29T16:12:54Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NjMyMQ==", "bodyText": "Yup, +1000 for KDoc, I'll add that. And remove the generated class if empty.", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549776321", "createdAt": "2020-12-29T16:56:10Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5NTIwMA==", "bodyText": "Kdoc and skipping empty classes are added", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r551195200", "createdAt": "2021-01-04T09:17:01Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg1MDIxOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/Ast.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo0NDozMlrOILtgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMDowODoyOVrOIL2BSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MDgyOA==", "bodyText": "Idea was that this class AST supposed to be free from any specific kotlin / java poet classes and can be used with any code generation libraries. With these changes we lock AST to be used only with Kotlin Poet.", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549150828", "createdAt": "2020-12-27T18:44:32Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/Ast.kt", "diffHunk": "@@ -1,5 +1,8 @@\n package com.apollographql.apollo.compiler.backend.ast\n \n+import com.squareup.kotlinpoet.MemberName\n+import com.squareup.kotlinpoet.TypeName\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5MDMxMw==", "bodyText": "Good catch! Fixed.", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549290313", "createdAt": "2020-12-28T10:08:29Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/Ast.kt", "diffHunk": "@@ -1,5 +1,8 @@\n package com.apollographql.apollo.compiler.backend.ast\n \n+import com.squareup.kotlinpoet.MemberName\n+import com.squareup.kotlinpoet.TypeName\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MDgyOA=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg1NDc3OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/AstBuilder.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo0OTozOVrOILtiZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMDoxODoxOVrOIL2NqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTMzMw==", "bodyText": "Should we introduce object CustomScalarType in CustomScalarType.kt with the const for enum name CustomScalars. Also I was thinking maybe we should use object  as namespace for any top level functions?  For example move all functions in ObjectTypeCodegen.kt into object ObjectTypeCodegen ? So any top level functions will have explicit namespaces", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549151333", "createdAt": "2020-12-27T18:49:39Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/AstBuilder.kt", "diffHunk": "@@ -665,18 +643,14 @@ internal class AstBuilder private constructor(\n           \"BOOLEAN\" -> CodeGenerationAst.FieldType.Scalar.Boolean(nullable = true)\n           \"FLOAT\" -> CodeGenerationAst.FieldType.Scalar.Float(nullable = true)\n           else -> {\n-            val customType = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n+            val className = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n               \"Failed to resolve custom scalar type `${schemaTypeRef.name}`\"\n             }\n             CodeGenerationAst.FieldType.Scalar.Custom(\n                 nullable = true,\n                 schemaType = schemaTypeRef.name,\n-                type = customType,\n-                customEnumType = CodeGenerationAst.TypeRef(\n-                    name = schemaTypeRef.name,\n-                    packageName = typesPackageName,\n-                    enclosingType = CodeGenerationAst.customTypeRef(typesPackageName)\n-                )\n+                type = className,\n+                typeName = ClassName(typesPackageName, \"CustomScalars\", schemaTypeRef.name.capitalize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5MzQ4MA==", "bodyText": "Should we introduce object CustomScalarType in CustomScalarType.kt with the const for enum name CustomScalars\n\nNot sure I get it. CustomScalars is now a generated object. I'd rather avoid having 2 instances in 2 different packages.\n\nAlso I was thinking maybe we should use object as namespace for any top level functions?\n\nYea, it's a bit heterogeneous at the moment. I don't mind it too much since this is mostly internal compiler API. The functions in ObjectType.kt are mostly extension functions though so IntelliJ will auto-add any enclosing object and even if we wrap them, they will look the same at the call site, only the import will change:\n// this import is currently not needed because everything is in the same package.\nimport com.apollographql.apollo.compiler.backend.codegen.ObjectTypeCodegen\n\n... \n\ndataType.typeSpec()\n\nIt's still convenient being able to completely leave out the import?", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549293480", "createdAt": "2020-12-28T10:18:19Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/AstBuilder.kt", "diffHunk": "@@ -665,18 +643,14 @@ internal class AstBuilder private constructor(\n           \"BOOLEAN\" -> CodeGenerationAst.FieldType.Scalar.Boolean(nullable = true)\n           \"FLOAT\" -> CodeGenerationAst.FieldType.Scalar.Float(nullable = true)\n           else -> {\n-            val customType = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n+            val className = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n               \"Failed to resolve custom scalar type `${schemaTypeRef.name}`\"\n             }\n             CodeGenerationAst.FieldType.Scalar.Custom(\n                 nullable = true,\n                 schemaType = schemaTypeRef.name,\n-                type = customType,\n-                customEnumType = CodeGenerationAst.TypeRef(\n-                    name = schemaTypeRef.name,\n-                    packageName = typesPackageName,\n-                    enclosingType = CodeGenerationAst.customTypeRef(typesPackageName)\n-                )\n+                type = className,\n+                typeName = ClassName(typesPackageName, \"CustomScalars\", schemaTypeRef.name.capitalize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTMzMw=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mzg1NjcwOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/test/graphql/com/example/antlr_tokens/type/CustomScalars.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo1Mjo0N1rOILtjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMDoyNToyM1rOIL2VyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTU1Ng==", "bodyText": "Didn't we have PR into 2.x branch that introduces some interface for CustomScalars when it's generated as sealed class? Also I believe we had compiler option to generate this as sealed class, are we sure to change this behaviour in 3.x?", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549151556", "createdAt": "2020-12-27T18:52:47Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/antlr_tokens/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.antlr_tokens.type\n+\n+import com.apollographql.apollo.api.CustomScalar\n+\n+object CustomScalars {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5NTU2MA==", "bodyText": "This was about Enums and the EnumValue interface: \n  \n    \n      apollo-android/apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/EnumValue.kt\n    \n    \n         Line 6\n      in\n      d59f2a1\n    \n    \n    \n    \n\n        \n          \n           interface EnumValue { \n        \n    \n  \n\n\nThis should be backported to 3.0. as part of #2813", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549295560", "createdAt": "2020-12-28T10:25:23Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/antlr_tokens/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.antlr_tokens.type\n+\n+import com.apollographql.apollo.api.CustomScalar\n+\n+object CustomScalars {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTU1Ng=="}, "originalCommit": {"oid": "da7da119a3d58144aa9225955e9e7a4268b65b95"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2923, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}