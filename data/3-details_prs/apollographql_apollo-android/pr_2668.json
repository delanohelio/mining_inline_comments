{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDI0OTk2", "number": 2668, "title": "\ud83c\udf42 3.0.0 fall cleanup of the Gradle Plugin \ud83c\udf42", "bodyText": "At a high level, the main change is that the plugin doesn't try to create a GraphQL source set per Kotlin source set anymore. Instead, there is now a 1:1 mapping between a service and a GraphQL source set. By default, files are are searched under src/main/graphql or src/commonMain/graphql but this is just a convention that can be overriden.\nTrying to map GraphQL to Java/Kotlin source sets was confusing and created issues like #1981 or special cases for the test source sets where we would end up with duplicate classes in the classpath. Also the schema resolution rules were becoming super complex and hard to maintain.\nHaving one GraphQL service per sourceSet is a simple mapping that allows the files/schema resolution rules to be way easier than they used to be, removing the need for schemaPath vs schemaFile, CompilationUnit, ApolloVariant, ...\nIn more details, a few points worth noting:\nAndroid variants handling\nThe custom Android variants handling code has been removed. This means that the plugin will not look into the different src/${flavor}/graphql directories by default. I'm hoping that in the very vast majority of case this will not an issue because there is rarely a need for different queries. This will even save some compilation time by not generating sources for each variant. If per-variant queries are still required, this can still be achieved either with:\n\nR8: define all the queries in the main variant and have R8 remove the ones that are unused in other variants.\nOr define different services and wire them to the variants manually (see below)\n\nCustom task wiring\nFor the case where finer control over how the generated sources are used is required, the Service now offers a withOutputDir action that exposes a Task and a Provider<Directory> that you can forward to other parts of the build as needed. Coupled with Service.outputDir, this allows more complex scenarios like registering generated sources to specific Android variants or to a test source set:\napollo {\n  service(\"starwars\") {\n    graphqlSourceDirectorySet.srcDir(\"src/test/graphql/starwars\")\n    withOutputDir {\n      val kotlinProjectExtension = project.extensions.get(\"kotlin\") as KotlinProjectExtension\n      // add the starwars generated sources to the test source set\n      kotlinProjectExtension.sourceSets.getByName(\"test\").kotlin.srcDir(outputDir)\n    }\n  }\n}\nDefault service\nThis PR also gets rid of the whole CompilerParams inheritance/overriding because:\n\nthe behaviour wasn't always obvious\nexplicit is better than implicit\nit didn't make any sense for some arguments like customTypeMapping that are specific to a schema to be shared by a common ancestor.\n\nTo keep things simple and keep some of the previous behaviour, for simple cases where there is only one schema, a default service is created at the root of the apollo {} block:\napollo {\n  // this is still working and will generate generated/source/apollo/service/...\n  sourceFolder.set(\"starwars\") \n}\nMixing implicit and explicit services will fail to make this new behaviour explicit:\napollo {\n  sourceFolder.set(\"starwars\") \n  service(\"github\") {\n    // this will fail. You can either remove `sourceFolder.set(\"starwars\")` above or create an explicit \"starwars\" service\n    sourceFolder.set(\"github\")\n  }\n}\n\n(Almost) no more afterEvaluate {}\nThe plugin is one step closer to removing afterEvaluate completely. Tasks are now registered 100% reactively. There are still 2 afterEvaluate: one for the defaultService and the other to make sure the Android and Kotlin plugins have settled. This last one is maybe not even required but it felt safer to keep it.\ncloses #2563", "createdAt": "2020-10-16T18:27:23Z", "url": "https://github.com/apollographql/apollo-android/pull/2668", "merged": true, "mergeCommit": {"oid": "e30d992ef012c2dd6d80c49e3d837cbf3b514cc3"}, "closed": true, "closedAt": "2020-10-20T12:42:23Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTyroBAFqTUxMTE2Mjg3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTzrCnABqjM4OTA0OTgyOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTYyODc5", "url": "https://github.com/apollographql/apollo-android/pull/2668#pullrequestreview-511162879", "createdAt": "2020-10-18T17:04:41Z", "commit": {"oid": "74b946a42f500cf0cbd925557a3c650c3180c457"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNDo0MVrOHjsP2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNzowNDo0MVrOHjsP2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NzE2MQ==", "bodyText": "Is this class used for just grab GraphQL schema from Apollo registry? Should we add some class docs?", "url": "https://github.com/apollographql/apollo-android/pull/2668#discussion_r507187161", "createdAt": "2020-10-18T17:04:41Z", "author": {"login": "sav007"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/Registry.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.apollographql.apollo.gradle.api\n+\n+import org.gradle.api.provider.Property\n+\n+interface Registry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b946a42f500cf0cbd925557a3c650c3180c457"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTYzNTI3", "url": "https://github.com/apollographql/apollo-android/pull/2668#pullrequestreview-511163527", "createdAt": "2020-10-18T17:12:42Z", "commit": {"oid": "74b946a42f500cf0cbd925557a3c650c3180c457"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87dbaf66e22d6c5ab9e86a18ad2155899f5b54d5", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/87dbaf66e22d6c5ab9e86a18ad2155899f5b54d5", "committedDate": "2020-10-18T18:11:34Z", "message": "Gradle plugin fall cleanup\n\nAt a high level, the main change is that the plugin doesn't try to create a GraphQL source set per Kotlin source set anymore. Instead, there is now a 1:1 mapping between a service and a GraphQL source set. By default, files are are searched under src/main/graphql or src/commonMain/graphql but this is just a convention that can be overriden.\n\nTrying to map GraphQL source sets was confusing and created issues like https://github.com/apollographql/apollo-android/issues/1981 or special cases for the test source sets where we would end up with duplicate classes in the classpath. Also the schema resolution rules were becoming super complex and hard to maintain.\n\nHaving one GraphQL service per service is a simple mapping that allows the files/schema resolution rules to be way easier than they used to be, removing the need for schemaPath vs schemaFile, CompilationUnit, ApolloVariant, ..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a5207b9c46fc0942f0afe5a2c72cf202c64a70", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/78a5207b9c46fc0942f0afe5a2c72cf202c64a70", "committedDate": "2020-10-18T18:11:34Z", "message": "update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4132b05a8191bab1d30ece8bd191cabb4851b0a", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/c4132b05a8191bab1d30ece8bd191cabb4851b0a", "committedDate": "2020-10-18T18:11:34Z", "message": "fix codegen test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74de5f9ee07775286a1d74842018b3483379b6b7", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/74de5f9ee07775286a1d74842018b3483379b6b7", "committedDate": "2020-10-18T18:11:34Z", "message": "add Kdoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4608f3e615365e47736a7ff3701c7c55ff3276f", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/e4608f3e615365e47736a7ff3701c7c55ff3276f", "committedDate": "2020-10-18T18:13:41Z", "message": "update test fixtures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b84b0b7b4df953b6abd20276ac0f371bb76ad8d3", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/b84b0b7b4df953b6abd20276ac0f371bb76ad8d3", "committedDate": "2020-10-18T17:57:05Z", "message": "add Kdoc"}, "afterCommit": {"oid": "e4608f3e615365e47736a7ff3701c7c55ff3276f", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/e4608f3e615365e47736a7ff3701c7c55ff3276f", "committedDate": "2020-10-18T18:13:41Z", "message": "update test fixtures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4155, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}