{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTU3MDkw", "number": 2090, "title": "Fix issue with fragment condition type coercing", "bodyText": "Closes #1975\nIt might be not easy to get the idea what is going on in the original issue, here is another attempt of explanation.\nImagine we have 2 GraphQL interfaces Foo and Bar and we have object FooBar that confirms  to both these interfaces\ninterface Foo {\n   foo: String\n}\n\ninterface Bar {\n  bar:String\n}\n\nobject FooBar: Foo, Bar {\n  foo: String\n  bar:String\n}\n\nNow we have query with selection that returns field with  type Foo:\nquery TestQuery {\n  foo { # field with Foo type \n    foo\n  }\n}\n\nSo the issue is during parsing and validating query we don't allow to use inline fragment on interface Bar:\nquery TestQuery {\n  foo {\n    foo\n   ... on Bar { # current implementation gives error that fragment cannot be spread here\n     bar\n  }\n}\n\nThis is an issue, as we have object FooBar that confirms to BOTH interfaces Foo and Bar, means response might have field that has FooBar type so we SHOULD allow to use inline fragment on type Bar.", "createdAt": "2020-03-22T04:56:20Z", "url": "https://github.com/apollographql/apollo-android/pull/2090", "merged": true, "mergeCommit": {"oid": "64d17164ddbdfc006066ba74d60c34bfd290e7cf"}, "closed": true, "closedAt": "2020-03-22T21:29:51Z", "author": {"login": "sav007"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQCHjkAH2gAyMzkxOTU3MDkwOmRlNWNkNTkyYmMwNDg0YzdhNjA4ZWRiNTNjYzI2M2U4YzIxYzNkMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQNZ7AgH2gAyMzkxOTU3MDkwOjE1MDVkMzExMThjODViZWY3MWJlZGJhZTVlZWQ3MWM2MGNlYjQ1Zjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de5cd592bc0484c7a608edb53cc263e8c21c3d01", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/de5cd592bc0484c7a608edb53cc263e8c21c3d01", "committedDate": "2020-03-22T04:36:56Z", "message": "Fix issue with fragment condition type coercing\n\nCloses https://github.com/apollographql/apollo-android/issues/1975"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTgzNzcz", "url": "https://github.com/apollographql/apollo-android/pull/2090#pullrequestreview-378983773", "createdAt": "2020-03-22T08:56:08Z", "commit": {"oid": "de5cd592bc0484c7a608edb53cc263e8c21c3d01"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODo1NjowOFrOF5uJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwODo1NjowOFrOF5uJ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2OTMzMw==", "bodyText": "You might want to keep the original value if null. Like description = field.description ?: description\nRight now, this always overrides it with empty String if field description is null", "url": "https://github.com/apollographql/apollo-android/pull/2090#discussion_r396069333", "createdAt": "2020-03-22T08:56:08Z", "author": {"login": "tasomaniac"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/GraphQLDocumentParser.kt", "diffHunk": "@@ -387,38 +387,55 @@ class GraphQLDocumentParser(val schema: Schema, private val packageNameProvider:\n   }\n \n   private fun GraphQLParser.InlineFragmentContext.parse(\n-      parentSelectionSet: GraphQLParser.SelectionSetContext,\n-      parentSchemaType: Schema.Type\n+      parentSchemaType: Schema.Type,\n+      parentFields: ParseResult<List<Field>>\n+\n   ): ParseResult<InlineFragment> {\n     val typeCondition = typeCondition().typeName().NAME().text\n     val schemaType = schema[typeCondition] ?: throw ParseException(\n         message = \"Unknown type`$typeCondition}`\",\n         token = typeCondition().typeName().start\n     )\n \n-    if (!parentSchemaType.isAssignableFrom(schema = schema, other = schemaType)) {\n+    if (!parentSchemaType.isAssignableFrom(other = schemaType, schema = schema)) {\n       throw ParseException(\n-          message = \"Fragment cannot be spread here as objects of type `${parentSchemaType.name}` can never be of type `$typeCondition`\",\n+          message = \"Fragment cannot be spread here as result can never be of type `$typeCondition`\",\n           token = typeCondition().typeName().start\n       )\n     }\n \n-    val possibleTypes = when (schemaType) {\n-      is Schema.Type.Interface -> schemaType.possibleTypes?.map { it.rawType.name!! } ?: emptyList()\n-      is Schema.Type.Union -> schemaType.possibleTypes?.map { it.rawType.name!! } ?: emptyList()\n-      else -> listOf(typeCondition)\n-    }.distinct()\n+    val decoratedParentFields = parentFields.let { (parentFields, usedTypes) ->\n+      // if inline fragment conditional type contains the same field as parent type\n+      // carry over meta info such as: `description`, `isDeprecated`, `deprecationReason`\n+      val decoratedFields = parentFields.map { parentField ->\n+        when (schemaType) {\n+          is Schema.Type.Interface -> schemaType.fields?.find { it.name == parentField.fieldName }\n+          is Schema.Type.Object -> schemaType.fields?.find { it.name == parentField.fieldName }\n+          is Schema.Type.Union -> schemaType.fields?.find { it.name == parentField.fieldName }\n+          else -> null\n+        }?.let { field ->\n+          parentField.copy(\n+              description = field.description ?: \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5cd592bc0484c7a608edb53cc263e8c21c3d01"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1505d31118c85bef71bedbae5eed71c60ceb45f9", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/1505d31118c85bef71bedbae5eed71c60ceb45f9", "committedDate": "2020-03-22T17:45:57Z", "message": "Feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}