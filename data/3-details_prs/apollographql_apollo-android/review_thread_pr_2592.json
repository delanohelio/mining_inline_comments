{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjIzMTAx", "number": 2592, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyNzozNFrOElnK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxMjoxOVrOEm0KYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODc0NTU0OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/test/graphql/com/example/arguments_complex/TestQuery.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyNzozNFrOHVLX-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0MDoyN1rOHVLvrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2ODUwNQ==", "bodyText": "I also took this opportunity to map GraphQL's Int and Float to Kotlin's Int and Double for better typing. While I believe it's more correct, it's a behaviour change so I'm happy to revert if we think this is risky.", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r491968505", "createdAt": "2020-09-21T11:27:34Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/arguments_complex/TestQuery.kt", "diffHunk": "@@ -170,21 +171,34 @@ data class TestQuery(\n           ResponseField.forObject(\"heroWithReview\", \"heroWithReview\", mapOf<String, Any>(\n             \"episode\" to mapOf<String, Any>(\n               \"kind\" to \"Variable\",\n-              \"variableName\" to \"episode\"),\n+              \"variableName\" to \"episode\"\n+            ),\n             \"review\" to mapOf<String, Any>(\n               \"stars\" to mapOf<String, Any>(\n                 \"kind\" to \"Variable\",\n-                \"variableName\" to \"stars\"),\n+                \"variableName\" to \"stars\"\n+              ),\n               \"favoriteColor\" to mapOf<String, Any>(\n-                \"red\" to \"0\",\n+                \"red\" to 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e556bf29139a768b44db3c19b7f1392a37515c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NDU3NQ==", "bodyText": "Thinking more about this, this shouldn't change what's sent to the server (which is in QUERY_DOCUMENT) so the impact would only be for the cache. So impact is still limited but that could trigger some unwanted cache miss so I'm going to revert that.", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r491974575", "createdAt": "2020-09-21T11:40:27Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/arguments_complex/TestQuery.kt", "diffHunk": "@@ -170,21 +171,34 @@ data class TestQuery(\n           ResponseField.forObject(\"heroWithReview\", \"heroWithReview\", mapOf<String, Any>(\n             \"episode\" to mapOf<String, Any>(\n               \"kind\" to \"Variable\",\n-              \"variableName\" to \"episode\"),\n+              \"variableName\" to \"episode\"\n+            ),\n             \"review\" to mapOf<String, Any>(\n               \"stars\" to mapOf<String, Any>(\n                 \"kind\" to \"Variable\",\n-                \"variableName\" to \"stars\"),\n+                \"variableName\" to \"stars\"\n+              ),\n               \"favoriteColor\" to mapOf<String, Any>(\n-                \"red\" to \"0\",\n+                \"red\" to 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2ODUwNQ=="}, "originalCommit": {"oid": "92e556bf29139a768b44db3c19b7f1392a37515c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDcyNzcxOnYy", "diffSide": "RIGHT", "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozOTo0NlrOHW-KEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjowMjowMVrOHXChdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0OTEwNw==", "bodyText": "toSortedMap() fits also\nhttps://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-sorted-map.html", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r493849107", "createdAt": "2020-09-23T19:39:46Z", "author": {"login": "akelix"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMDYzMA==", "bodyText": "I wish it worked but unfortunately toSortedMap() is JVM only. At this point this is mainly rhetorical because there's no real way to consume the normalized cache from anything else than JVM but there will be a native cache in the future.", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r493920630", "createdAt": "2020-09-23T22:02:01Z", "author": {"login": "martinbonnin"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0OTEwNw=="}, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM1Mjg5OnYy", "diffSide": "LEFT", "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxMDozM1rOHXEGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo0MjoxM1rOHXHtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NjM5Ng==", "bodyText": "sanity check: why these lines were removed?", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r493946396", "createdAt": "2020-09-23T23:10:33Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }\n+              .toMap()\n+        }\n+      }\n+      is List<*> -> {\n+        value.map {\n+          resolveVariables(it, variables)\n         }\n-      } else {\n-        value\n       }\n-    }.toList()\n-        .sortedBy { it.first }\n-        .toMap()\n+      else -> value\n+    }\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveVariableArgument(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n+  private fun resolveVariable(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n     val variable = objectMap[ResponseField.VARIABLE_NAME_KEY]\n \n     return when (val resolvedVariable = variables.valueMap()[variable]) {\n-      null -> null\n-      is Map<*, *> -> resolveArguments(resolvedVariable as Map<String, Any?>, variables)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNTU0NQ==", "bodyText": "nvm, I found that it's handled above", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r494005545", "createdAt": "2020-09-24T02:42:13Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }\n+              .toMap()\n+        }\n+      }\n+      is List<*> -> {\n+        value.map {\n+          resolveVariables(it, variables)\n         }\n-      } else {\n-        value\n       }\n-    }.toList()\n-        .sortedBy { it.first }\n-        .toMap()\n+      else -> value\n+    }\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveVariableArgument(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n+  private fun resolveVariable(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n     val variable = objectMap[ResponseField.VARIABLE_NAME_KEY]\n \n     return when (val resolvedVariable = variables.valueMap()[variable]) {\n-      null -> null\n-      is Map<*, *> -> resolveArguments(resolvedVariable as Map<String, Any?>, variables)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NjM5Ng=="}, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM1OTY5OnYy", "diffSide": "LEFT", "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxMjoxOVrOHXEKOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MTo1NFrOHXNtfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NzQ0OQ==", "bodyText": "don't really remember why but looks like this was launching recursion for nested map arguments resolution for input type. We this change we dont do this anymore, is it right?", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r493947449", "createdAt": "2020-09-23T23:12:19Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }\n+              .toMap()\n+        }\n+      }\n+      is List<*> -> {\n+        value.map {\n+          resolveVariables(it, variables)\n         }\n-      } else {\n-        value\n       }\n-    }.toList()\n-        .sortedBy { it.first }\n-        .toMap()\n+      else -> value\n+    }\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveVariableArgument(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n+  private fun resolveVariable(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n     val variable = objectMap[ResponseField.VARIABLE_NAME_KEY]\n \n     return when (val resolvedVariable = variables.valueMap()[variable]) {\n-      null -> null\n-      is Map<*, *> -> resolveArguments(resolvedVariable as Map<String, Any?>, variables)\n       is InputType -> {\n         val inputFieldMapWriter = SortedInputFieldMapWriter()\n         resolvedVariable.marshaller().marshal(inputFieldMapWriter)\n-        resolveArguments(inputFieldMapWriter.map(), variables)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwODE3OA==", "bodyText": "Looks like it doesn't make any sense for recursion here at first place. If resolvedVariable is InputType there is no way it has reference to other variables.", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r494008178", "createdAt": "2020-09-24T02:52:43Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }\n+              .toMap()\n+        }\n+      }\n+      is List<*> -> {\n+        value.map {\n+          resolveVariables(it, variables)\n         }\n-      } else {\n-        value\n       }\n-    }.toList()\n-        .sortedBy { it.first }\n-        .toMap()\n+      else -> value\n+    }\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveVariableArgument(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n+  private fun resolveVariable(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n     val variable = objectMap[ResponseField.VARIABLE_NAME_KEY]\n \n     return when (val resolvedVariable = variables.valueMap()[variable]) {\n-      null -> null\n-      is Map<*, *> -> resolveArguments(resolvedVariable as Map<String, Any?>, variables)\n       is InputType -> {\n         val inputFieldMapWriter = SortedInputFieldMapWriter()\n         resolvedVariable.marshaller().marshal(inputFieldMapWriter)\n-        resolveArguments(inputFieldMapWriter.map(), variables)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NzQ0OQ=="}, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwMzkzNQ==", "bodyText": "Yes, exactly !", "url": "https://github.com/apollographql/apollo-android/pull/2592#discussion_r494103935", "createdAt": "2020-09-24T07:41:54Z", "author": {"login": "martinbonnin"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/internal/RealCacheKeyBuilder.kt", "diffHunk": "@@ -29,34 +29,39 @@ class RealCacheKeyBuilder : CacheKeyBuilder {\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveArguments(objectMap: Map<String, Any?>, variables: Operation.Variables): Map<String, Any?> {\n-    return objectMap.mapValues { (_, value) ->\n-      if (value is Map<*, *>) {\n-        val nestedObjectMap = value as Map<String, Any?>\n-        if (isArgumentValueVariableType(nestedObjectMap)) {\n-          resolveVariableArgument(nestedObjectMap, variables)\n+  private fun resolveVariables(value: Any?, variables: Operation.Variables): Any? {\n+    return when (value) {\n+      null -> null\n+      is Map<*, *> -> {\n+        value as Map<String, Any?>\n+        if (isArgumentValueVariableType(value)) {\n+          resolveVariable(value, variables)\n         } else {\n-          resolveArguments(nestedObjectMap, variables)\n+          value.mapValues {\n+            resolveVariables(it.value, variables)\n+          }.toList()\n+              .sortedBy { it.first }\n+              .toMap()\n+        }\n+      }\n+      is List<*> -> {\n+        value.map {\n+          resolveVariables(it, variables)\n         }\n-      } else {\n-        value\n       }\n-    }.toList()\n-        .sortedBy { it.first }\n-        .toMap()\n+      else -> value\n+    }\n   }\n \n   @Suppress(\"UNCHECKED_CAST\")\n-  private fun resolveVariableArgument(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n+  private fun resolveVariable(objectMap: Map<String, Any?>, variables: Operation.Variables): Any? {\n     val variable = objectMap[ResponseField.VARIABLE_NAME_KEY]\n \n     return when (val resolvedVariable = variables.valueMap()[variable]) {\n-      null -> null\n-      is Map<*, *> -> resolveArguments(resolvedVariable as Map<String, Any?>, variables)\n       is InputType -> {\n         val inputFieldMapWriter = SortedInputFieldMapWriter()\n         resolvedVariable.marshaller().marshal(inputFieldMapWriter)\n-        resolveArguments(inputFieldMapWriter.map(), variables)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NzQ0OQ=="}, "originalCommit": {"oid": "04a162648359692b9becd6843ca5c55c2646aa6b"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}