{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDM0NzAw", "number": 2669, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0NjowN1rOEuqZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxNjozMlrOEuq5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzY0NTc4OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/FragmentsResponseMapperBuilder.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0NjowN1rOHjNxjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxMTo1OFrOHjOcYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4Nzg4Nw==", "bodyText": "I think this should work but would love another pair of eyes.", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506687887", "createdAt": "2020-10-16T19:46:07Z", "author": {"login": "Laimiux"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/FragmentsResponseMapperBuilder.kt", "diffHunk": "@@ -69,7 +69,7 @@ class FragmentsResponseMapperBuilder(\n   private fun mapperFields(fragmentFields: List<ResponseFieldSpec>): List<FieldSpec> {\n     return fragmentFields.map { field ->\n       val fieldType = field.normalizedFieldSpec.type as ClassName\n-      val mapperClassName = ClassName.get(context.ir.fragmentsPackageName, fieldType.simpleName(),\n+      val mapperClassName = ClassName.get(fieldType.packageName(), fieldType.simpleName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02821ada0765ddf5946713a064de7228aa10c169"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5ODg0OA==", "bodyText": "Looks good to me \ud83d\udc40", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506698848", "createdAt": "2020-10-16T20:11:58Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/FragmentsResponseMapperBuilder.kt", "diffHunk": "@@ -69,7 +69,7 @@ class FragmentsResponseMapperBuilder(\n   private fun mapperFields(fragmentFields: List<ResponseFieldSpec>): List<FieldSpec> {\n     return fragmentFields.map { field ->\n       val fieldType = field.normalizedFieldSpec.type as ClassName\n-      val mapperClassName = ClassName.get(context.ir.fragmentsPackageName, fieldType.simpleName(),\n+      val mapperClassName = ClassName.get(fieldType.packageName(), fieldType.simpleName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4Nzg4Nw=="}, "originalCommit": {"oid": "02821ada0765ddf5946713a064de7228aa10c169"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzY0ODkwOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/graphql/GraphQLDocumentParser.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0NzowOVrOHjNzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDowOTowNlrOHjOXyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4ODM1MQ==", "bodyText": "A few comments:\n\nWhat about dropping the \".fragment\" here? It made sense as long as all fragments ended up in the same package but if we start using the file package name instead, it might be confusing to append \".fragment\nSince fragments are not operations, we might want to rename operationPackageName to filePackageName\nIt's ok to change this behaviour for experimental multi-module things but not for the stable non-multi-module users so this will have to be configurable somewhere.", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506688351", "createdAt": "2020-10-16T19:47:09Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/graphql/GraphQLDocumentParser.kt", "diffHunk": "@@ -531,7 +531,8 @@ class GraphQLDocumentParser(\n             fragmentRefs = fragmentRefs.union(mergeInlineFragmentRefs).toList(),\n             inlineFragments = inlineFragments.result.filter { it.typeCondition != typeCondition },\n             filePath = graphQLFilePath,\n-            sourceLocation = SourceLocation(start)\n+            sourceLocation = SourceLocation(start),\n+            packageName = \"${packageNameProvider.operationPackageName(graphQLFilePath)}.fragment\".removePrefix(\".\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MTY0OQ==", "bodyText": "Thanks for the feedback:\n\nI'm for dropping the fragment package suffix.\nMakes sense, however, if we want to make this behavior configurable, maybe having a separate fragmentPackageName() function that encapsulates this logical fork?\nDo you have a suggestion for a flag name?", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506691649", "createdAt": "2020-10-16T19:54:40Z", "author": {"login": "Laimiux"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/graphql/GraphQLDocumentParser.kt", "diffHunk": "@@ -531,7 +531,8 @@ class GraphQLDocumentParser(\n             fragmentRefs = fragmentRefs.union(mergeInlineFragmentRefs).toList(),\n             inlineFragments = inlineFragments.result.filter { it.typeCondition != typeCondition },\n             filePath = graphQLFilePath,\n-            sourceLocation = SourceLocation(start)\n+            sourceLocation = SourceLocation(start),\n+            packageName = \"${packageNameProvider.operationPackageName(graphQLFilePath)}.fragment\".removePrefix(\".\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4ODM1MQ=="}, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5NzY3NA==", "bodyText": "I'm for dropping the fragment package suffix.\n\n\ud83d\udc4d\n\nDo you have a suggestion for a flag name?\n\nMaybe something like:\napollo {\n  // Use the path to the file that defined the fragment as package name\n  // i.e. com/example/Fragment.graphql will end up in `com.example` package instead of a global `*.fragment` package\n  useFilePackageNameForFragments.set(true)\n}\n\n\nmaybe having a separate fragmentPackageName() function that encapsulates this logical fork?\n\nYup, that works too", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506697674", "createdAt": "2020-10-16T20:09:06Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/graphql/GraphQLDocumentParser.kt", "diffHunk": "@@ -531,7 +531,8 @@ class GraphQLDocumentParser(\n             fragmentRefs = fragmentRefs.union(mergeInlineFragmentRefs).toList(),\n             inlineFragments = inlineFragments.result.filter { it.typeCondition != typeCondition },\n             filePath = graphQLFilePath,\n-            sourceLocation = SourceLocation(start)\n+            sourceLocation = SourceLocation(start),\n+            packageName = \"${packageNameProvider.operationPackageName(graphQLFilePath)}.fragment\".removePrefix(\".\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4ODM1MQ=="}, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzY0OTIxOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/SchemaTypeSpecBuilder.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0NzoxN1rOHjNzjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo0NzoxN1rOHjNzjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4ODM5OQ==", "bodyText": "I'm assuming fragmentRef and fragment are representing the same object.", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506688399", "createdAt": "2020-10-16T19:47:17Z", "author": {"login": "Laimiux"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/SchemaTypeSpecBuilder.kt", "diffHunk": "@@ -190,7 +190,7 @@ class SchemaTypeSpecBuilder(\n             val optional = fragmentRef.isOptional()\n             val possibleTypes = fragment.takeIf { fragment.typeCondition != normalizeGraphQlType(schemaType) }?.possibleTypes ?: emptyList()\n             val fieldSpec = FieldSpec.builder(\n-                JavaTypeResolver(context = context, packageName = context.ir.fragmentsPackageName)\n+                JavaTypeResolver(context = context, packageName = fragment.packageName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzcyNzQ2OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/AST.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxNjozMlrOHjOkAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0Nzo1NVrOHjPXCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMDgwMg==", "bodyText": "Can you add packageName: String? to ObjectType instead? It doesn't really make sense to have an AST type named \"Fragment\" as Kotlin doesn't know anything about a Fragment.", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506700802", "createdAt": "2020-10-16T20:16:32Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/AST.kt", "diffHunk": "@@ -92,6 +92,11 @@ internal data class ObjectType(\n   }\n }\n \n+internal class FragmentType(\n+    val objectType: ObjectType,\n+    val packageName: String\n+)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNzQzMA==", "bodyText": "Mmm but there's also an OperationType too so maybe it doesn't matter that much. @sav007 any opinion about this ?", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506707430", "createdAt": "2020-10-16T20:32:09Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/AST.kt", "diffHunk": "@@ -92,6 +92,11 @@ internal data class ObjectType(\n   }\n }\n \n+internal class FragmentType(\n+    val objectType: ObjectType,\n+    val packageName: String\n+)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMDgwMg=="}, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMzg2Ng==", "bodyText": "I think your point that it doesn't map to a Kotlin concept is valid. The reason I didn't place it on the ObjectType is that ObjectType is also used as an intermediary object in a couple of places so it feels like it is breaking this principle already. I used a separate type to more closely tie package name to class generation logic which allows the type system to ensure that packageName is provided. Let me know if you want me to change that, not a big deal to me just wanted to explain my position.", "url": "https://github.com/apollographql/apollo-android/pull/2669#discussion_r506713866", "createdAt": "2020-10-16T20:47:55Z", "author": {"login": "Laimiux"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/AST.kt", "diffHunk": "@@ -92,6 +92,11 @@ internal data class ObjectType(\n   }\n }\n \n+internal class FragmentType(\n+    val objectType: ObjectType,\n+    val packageName: String\n+)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMDgwMg=="}, "originalCommit": {"oid": "d042483ac9d2f4d67877854a86e0987160bf6aab"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2946, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}