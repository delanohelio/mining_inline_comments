{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjEyNTE1", "number": 2028, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozMjozN1rODkdn-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozODo0M1rODkdtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTYwNjk2OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/InputFieldMarshaller.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozMjozN1rOFwzNVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNToyOVrOFw0DtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNDk2Nw==", "bodyText": "Is there a place where invoke is used as a function call ? If it doesn't need to be an operator, maybe call it from or wrap ?\n    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.from { writer ->\n      writer.writeBoolean(\"withDetails\", this@TestQuery.withDetails)\n      writer.writeBoolean(\"skipHumanDetails\", this@TestQuery.skipHumanDetails)\n    }\nOr with a top-level function, like coroutines use a lot ?\n    override fun marshaller(): InputFieldMarshaller = inputFieldMarshaller { writer ->\n      writer.writeBoolean(\"withDetails\", this@TestQuery.withDetails)\n      writer.writeBoolean(\"skipHumanDetails\", this@TestQuery.skipHumanDetails)\n    }", "url": "https://github.com/apollographql/apollo-android/pull/2028#discussion_r386714967", "createdAt": "2020-03-02T23:32:37Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/InputFieldMarshaller.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.api.internal\n+\n+import java.io.IOException\n+\n+interface InputFieldMarshaller {\n+  @Throws(IOException::class)\n+  fun marshal(writer: InputFieldWriter)\n+\n+  companion object {\n+    @JvmSynthetic\n+    inline operator fun invoke(crossinline block: (InputFieldWriter) -> Unit) = object : InputFieldMarshaller {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4938300a04e74d10ada999b3869828bcb5984708"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODg4NA==", "bodyText": "It's used in input types for example https://github.com/apollographql/apollo-android/pull/2028/files#diff-431dfc1d4ab56f3b8039eb0ddb8547fdR107\nLet's keep it for now as SAM conversion for interfaces is coming in  Kotlin 1.4 https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/?_ga=2.136948336.1505843568.1583040891-1122893.1461098344\nAfter that we will remove these functions entirely.", "url": "https://github.com/apollographql/apollo-android/pull/2028#discussion_r386728884", "createdAt": "2020-03-03T00:15:29Z", "author": {"login": "sav007"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/internal/InputFieldMarshaller.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.api.internal\n+\n+import java.io.IOException\n+\n+interface InputFieldMarshaller {\n+  @Throws(IOException::class)\n+  fun marshal(writer: InputFieldWriter)\n+\n+  companion object {\n+    @JvmSynthetic\n+    inline operator fun invoke(crossinline block: (InputFieldWriter) -> Unit) = object : InputFieldMarshaller {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNDk2Nw=="}, "originalCommit": {"oid": "4938300a04e74d10ada999b3869828bcb5984708"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTYyMDAyOnYy", "diffSide": "RIGHT", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozODo0M1rOFwzVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozODo0M1rOFwzVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNzAzMg==", "bodyText": "Using primitive types looks way better \ud83d\udc4d", "url": "https://github.com/apollographql/apollo-android/pull/2028#discussion_r386717032", "createdAt": "2020-03-02T23:38:43Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseReader.java", "diffHunk": "@@ -286,22 +286,22 @@ private void checkValue(ResponseField field, Object value) {\n       return (String) value;\n     }\n \n-    @Override public Integer readInt() {\n+    @Override public int readInt() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ba6977212a36d4b4ffb42aedec46d1f22e9591"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3278, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}