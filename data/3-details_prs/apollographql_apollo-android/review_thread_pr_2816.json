{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NTU0ODE2", "number": 2816, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowMTo0OFrOFIkgJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzoxNToxN1rOFIkuBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTMwOTgyOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowMTo0OFrOIKkGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNToyMzo1MVrOIMdoYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ==", "bodyText": "Shouldn't we put the marshaller() on the class rather than the interface?", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r547948041", "createdAt": "2020-12-23T13:01:48Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyMjUzMQ==", "bodyText": "Hm, user will mostly work with interfaces when it comes to fragments, so we need to provide access to marshaller via interface rather than via fragment implementation that can be intersection of fragments.", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549022531", "createdAt": "2020-12-26T19:23:29Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MTQwOQ==", "bodyText": "I'm not sure how many users use marshaller() directly. My assumption was that very few users need to write  data/fragments and those who do use the imperative store APIs instead of calling marshaller directly.\nMore philosophically, what does marshalling an interface mean? There has to be a matching implementation to marshal something which is why it feels weird to have the method on the interface.", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549271409", "createdAt": "2020-12-28T09:07:28Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDMxNw==", "bodyText": "Just to make sure we are on the same page, you want to remove marshaller  from the generated nested interfaces and leave it only for top level generated operation data classes:  Operation.Data#responseFieldMapper() and for GraphqlFragment#marshaller, right?", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549764317", "createdAt": "2020-12-29T16:19:22Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3MzQxNw==", "bodyText": "The initial thought was to move them from the interfaces to the data classes but I think it makes sense to remove them from nested interfaces/classes altogether and only keep them in Operation.Data#responseFieldMapper() and GraphqlFragment#marshaller. Thinking more about this, maybe we could even remove marshaller from the public API and expose Operation.Data#responseAdapter() instead?", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549773417", "createdAt": "2020-12-29T16:46:52Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzOTI5Nw==", "bodyText": "Yeah, that makes sense, will do that in next PR", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549939297", "createdAt": "2020-12-30T05:23:51Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/fragment_used_twice/TestQuery.kt", "diffHunk": "@@ -141,43 +152,154 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         override val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n+\n+        interface Character : Human, HumanDetail.Character {\n+          override val __typename: String\n+\n+          /**\n+           * What this human calls themselves\n+           */\n+          override val name: String\n+\n+          /**\n+           * The date character was born.\n+           */\n+          override val birthDate: Any\n+\n+          override fun marshaller(): ResponseFieldMarshaller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODA0MQ=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTM0NTM1OnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzoxNToxN1rOIKkaSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo0NzowMlrOIMTgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzIyNA==", "bodyText": "What about dropping the Characterinheritance ( and __typename and name fields here) to just keep:\ninterface Droid {\n  val primaryFunction: String?\n}\n\nThat would simplify the codegen a bunch. There's a minor annoyance that users won't be able to do hero.asDroid()?.name anymore but they can still achieve the same results with something like\nwhen (hero) {\n  is DroidHero -> // do something with hero.name and hero.primaryFunction\n}\n\nIt might actually simplify the mental model since inline fragments would be closer to named fragments", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r547953224", "createdAt": "2020-12-23T13:15:17Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "diffHunk": "@@ -122,64 +122,139 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n-      }\n \n-      interface Human : Search {\n-        override val __typename: String\n+        interface Human : Character {\n+          override val __typename: String\n \n-        /**\n-         * The home planet of the human, or null if unknown\n-         */\n-        val homePlanet: String?\n+          /**\n+           * The name of the character\n+           */\n+          override val name: String\n \n-        override fun marshaller(): ResponseFieldMarshaller\n+          /**\n+           * The home planet of the human, or null if unknown\n+           */\n+          val homePlanet: String?\n+\n+          override fun marshaller(): ResponseFieldMarshaller\n+        }\n+\n+        interface Droid : Character {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyMzEzOA==", "bodyText": "We can't do that as we merge parent fields from Character, so any fields that defined in parent field / fragment will be merged down to Droid interface. Otherwise we can easily run into clash of fields when build implementation for multiple fragments, like for instance:\ninterface Droid {\n  friends: List<Friend>\n\n  interface Friend {\n    ...\n  }\n}\n\ninterface Character {\n friends: List<Friend>\n\n  interface Friend {\n    ...\n  }\n}\n\ndata class DroidCharacterHero(val friends: List<Friend>): Character, Droid\n\n\nhere we going to clash on friends as it ambiguous type", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549023138", "createdAt": "2020-12-26T19:30:42Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "diffHunk": "@@ -122,64 +122,139 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n-      }\n \n-      interface Human : Search {\n-        override val __typename: String\n+        interface Human : Character {\n+          override val __typename: String\n \n-        /**\n-         * The home planet of the human, or null if unknown\n-         */\n-        val homePlanet: String?\n+          /**\n+           * The name of the character\n+           */\n+          override val name: String\n \n-        override fun marshaller(): ResponseFieldMarshaller\n+          /**\n+           * The home planet of the human, or null if unknown\n+           */\n+          val homePlanet: String?\n+\n+          override fun marshaller(): ResponseFieldMarshaller\n+        }\n+\n+        interface Droid : Character {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzIyNA=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjM1Ng==", "bodyText": "here we going to clash on friends as it ambiguous type\n\nSince we're going to generate a data class for Friend, we could implement the different interfaces there?\ninterface Droid {\n  friends: List<Friend>\n\n  interface Friend {\n    ...\n  }\n}\n\ninterface Character {\n friends: List<Friend>\n\n  interface Friend {\n    ...\n  }\n}\n\ndata class DroidCharacter(val friends: List<Friend>): Character, Droid {\n  data class Friend([...]) : Character.Friend, Droid.Friend\n}\n\nThis is more symmetrical.", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549276356", "createdAt": "2020-12-28T09:23:09Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "diffHunk": "@@ -122,64 +122,139 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n-      }\n \n-      interface Human : Search {\n-        override val __typename: String\n+        interface Human : Character {\n+          override val __typename: String\n \n-        /**\n-         * The home planet of the human, or null if unknown\n-         */\n-        val homePlanet: String?\n+          /**\n+           * The name of the character\n+           */\n+          override val name: String\n \n-        override fun marshaller(): ResponseFieldMarshaller\n+          /**\n+           * The home planet of the human, or null if unknown\n+           */\n+          val homePlanet: String?\n+\n+          override fun marshaller(): ResponseFieldMarshaller\n+        }\n+\n+        interface Droid : Character {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzIyNA=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NTQyOA==", "bodyText": "hm, you are right.... let me try this again, I don't remember what was the issue and why this didn't work out last time, smth related to nested fragments. I think we can merge this PR and I will try to optimize this in next one.", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549765428", "createdAt": "2020-12-29T16:22:47Z", "author": {"login": "sav007"}, "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "diffHunk": "@@ -122,64 +122,139 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n-      }\n \n-      interface Human : Search {\n-        override val __typename: String\n+        interface Human : Character {\n+          override val __typename: String\n \n-        /**\n-         * The home planet of the human, or null if unknown\n-         */\n-        val homePlanet: String?\n+          /**\n+           * The name of the character\n+           */\n+          override val name: String\n \n-        override fun marshaller(): ResponseFieldMarshaller\n+          /**\n+           * The home planet of the human, or null if unknown\n+           */\n+          val homePlanet: String?\n+\n+          override fun marshaller(): ResponseFieldMarshaller\n+        }\n+\n+        interface Droid : Character {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzIyNA=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3MzQ4OA==", "bodyText": "Sounds good to me!", "url": "https://github.com/apollographql/apollo-android/pull/2816#discussion_r549773488", "createdAt": "2020-12-29T16:47:02Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/inline_fragment_inside_inline_fragment/TestQuery.kt", "diffHunk": "@@ -122,64 +122,139 @@ class TestQuery : Query<TestQuery.Data, Operation.Variables> {\n         val name: String\n \n         override fun marshaller(): ResponseFieldMarshaller\n-      }\n \n-      interface Human : Search {\n-        override val __typename: String\n+        interface Human : Character {\n+          override val __typename: String\n \n-        /**\n-         * The home planet of the human, or null if unknown\n-         */\n-        val homePlanet: String?\n+          /**\n+           * The name of the character\n+           */\n+          override val name: String\n \n-        override fun marshaller(): ResponseFieldMarshaller\n+          /**\n+           * The home planet of the human, or null if unknown\n+           */\n+          val homePlanet: String?\n+\n+          override fun marshaller(): ResponseFieldMarshaller\n+        }\n+\n+        interface Droid : Character {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzIyNA=="}, "originalCommit": {"oid": "364ac9876112fa991f40e975560b35a28686681e"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2917, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}