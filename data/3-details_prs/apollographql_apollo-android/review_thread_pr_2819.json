{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjUwODM5", "number": 2819, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoyNToyNFrOFI5pPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0NToyOVrOFJSByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODc3MzcyOnYy", "diffSide": "LEFT", "path": "apollo-android-support/api.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoyNToyNFrOILExCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoyNToyNFrOILExCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ4MzMzNg==", "bodyText": "Removed the api.txt for now. I'll re-add them for 3.0.0-alpha01", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r548483336", "createdAt": "2020-12-24T10:25:24Z", "author": {"login": "martinbonnin"}, "path": "apollo-android-support/api.txt", "diffHunk": "@@ -1,31 +0,0 @@\n-// Signature format: 3.0\n-package com.apollographql.apollo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf620041caa95abbef030e1c7465262f415682b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODc3OTYxOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/BuiltinAdapters.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoyODowOVrOILE0TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoyODowOVrOILE0TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ4NDE3Mg==", "bodyText": "JsonElement is the new, more type safe CustomTypeValue. It makes it clear that CustomScalarAdapters ultimately work on Json:\ninterface CustomScalarAdapter<T> {\n  fun decode(jsonElement: JsonElement): T\n  fun encode(value: T): JsonElement\n}\nI know GraphQL is not Json-only but so far it is so we'll see when (if...) that changes.", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r548484172", "createdAt": "2020-12-24T10:28:09Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/BuiltinAdapters.kt", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.apollographql.apollo.api\n+\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import com.apollographql.apollo.api.internal.json.Utils\n+import com.apollographql.apollo.api.internal.json.use\n+import okio.Buffer\n+\n+/**\n+ * Builtin CustomScalarTypeAdapter provided for convenience. Encoding is most of the times straightforward. Decoding\n+ * can involve coercion. If you need stricter decoding or different logic, define your own adapter\n+ */\n+object BuiltinScalarTypeAdapters {\n+  val STRING_ADAPTER = adapterWithDefaultEncode { jsonElement ->\n+    when (jsonElement) {\n+      is JsonElement.JsonString -> jsonElement.value\n+      is JsonElement.JsonNull -> null\n+      is JsonElement.JsonBoolean -> jsonElement.value.toString()\n+      is JsonElement.JsonNumber -> jsonElement.value.toString()\n+      is JsonElement.JsonObject,\n+      is JsonElement.JsonList -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf620041caa95abbef030e1c7465262f415682b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODc4ODY1OnYy", "diffSide": "RIGHT", "path": "apollo-idling-resource/src/test/java/com/apollographql/apollo/test/espresso/ApolloIdlingResourceTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDozMjoxOFrOILE5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDozMjoxOFrOILE5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ4NTQ0MA==", "bodyText": "Converted a bunch of files to Kotlin as I'd like to get rid of @JvmField annotation for 3.0.0-alpha01", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r548485440", "createdAt": "2020-12-24T10:32:18Z", "author": {"login": "martinbonnin"}, "path": "apollo-idling-resource/src/test/java/com/apollographql/apollo/test/espresso/ApolloIdlingResourceTest.kt", "diffHunk": "@@ -0,0 +1,210 @@\n+package com.apollographql.apollo.test.espresso", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf620041caa95abbef030e1c7465262f415682b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjc2NTYwOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/JsonElement.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0MDo1MlrOILlzKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwOTo0MTo0MVrOIL1hPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDU1NA==", "bodyText": "nit: should we move this into /json subfolder?", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549024554", "createdAt": "2020-12-26T19:40:52Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/JsonElement.kt", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * A wrapper class for representation of custom GraphQL type value, used in user provided [CustomScalarAdapter]\n+ * encoding / decoding functions.\n+ **/\n+sealed class JsonElement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MjEwOQ==", "bodyText": "Good question. We currently have com.apollographql.apollo.api.internal.json where the Json parser (BufferedSourceJsonReader) resides.\nTechnically, we could make the json parser work with JsonElement but that will introduce some unnecessary wrapping and I'm afraid it'll only slow down parsing...\nSo JsonElement is right now only used to wrap Kotlin instances into more type-safe/user-friendly types. In that sense I feel that it should be closer to CustomScalarAdapter than BufferedSourceJsonReader, even if it's about Json. Also the com.apollographql.apollo.api package isn't too much cluttered right now. It contains ~30 classes, some of which can maybe be moved to internal. All that makes me want to keep it in the root package for the time being but I'm not against reorganizing things differently if we ultimately think it makes more sense.", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549282109", "createdAt": "2020-12-28T09:41:41Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/JsonElement.kt", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * A wrapper class for representation of custom GraphQL type value, used in user provided [CustomScalarAdapter]\n+ * encoding / decoding functions.\n+ **/\n+sealed class JsonElement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDU1NA=="}, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjc2NzI4OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarType.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0Mzo0NFrOILlz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0OTowM1rOILl17A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDc0Ng==", "bodyText": "nit: should we rename this to CustomScalarType?", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549024746", "createdAt": "2020-12-26T19:43:44Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarType.kt", "diffHunk": "@@ -1,17 +1,17 @@\n package com.apollographql.apollo.api\n \n /**\n- * Represents a custom GraphQL scalar type\n+ * Represents a mapping from a custom GraphQL scalar type to a Java/Kotlin class\n  */\n interface ScalarType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTI2MA==", "bodyText": "nvm I see it's done in next PR #2820", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549025260", "createdAt": "2020-12-26T19:49:03Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarType.kt", "diffHunk": "@@ -1,17 +1,17 @@\n package com.apollographql.apollo.api\n \n /**\n- * Represents a custom GraphQL scalar type\n+ * Represents a mapping from a custom GraphQL scalar type to a Java/Kotlin class\n  */\n interface ScalarType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDc0Ng=="}, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Mjc2ODc1OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarTypeAdapters.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0NToyOVrOILl0iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxOTo0OToxMlrOILl18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDkwNw==", "bodyText": "same should we use naming CustomScalar* everywhere?", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549024907", "createdAt": "2020-12-26T19:45:29Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarTypeAdapters.kt", "diffHunk": "@@ -1,129 +1,65 @@\n package com.apollographql.apollo.api\n \n-import com.apollographql.apollo.api.CustomTypeValue.*\n-import com.apollographql.apollo.api.CustomTypeValue.Companion.fromRawValue\n-import com.apollographql.apollo.api.internal.json.JsonWriter\n-import com.apollographql.apollo.api.internal.json.Utils\n-import com.apollographql.apollo.api.internal.json.use\n-import okio.Buffer\n-import kotlin.jvm.JvmField\n+class ScalarTypeAdapters(val customScalarAdapters: Map<ScalarType, CustomScalarAdapter<*>>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTI2Nw==", "bodyText": "nvm I see it's done in next PR #2820", "url": "https://github.com/apollographql/apollo-android/pull/2819#discussion_r549025267", "createdAt": "2020-12-26T19:49:12Z", "author": {"login": "sav007"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarTypeAdapters.kt", "diffHunk": "@@ -1,129 +1,65 @@\n package com.apollographql.apollo.api\n \n-import com.apollographql.apollo.api.CustomTypeValue.*\n-import com.apollographql.apollo.api.CustomTypeValue.Companion.fromRawValue\n-import com.apollographql.apollo.api.internal.json.JsonWriter\n-import com.apollographql.apollo.api.internal.json.Utils\n-import com.apollographql.apollo.api.internal.json.use\n-import okio.Buffer\n-import kotlin.jvm.JvmField\n+class ScalarTypeAdapters(val customScalarAdapters: Map<ScalarType, CustomScalarAdapter<*>>) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNDkwNw=="}, "originalCommit": {"oid": "a28a7502cee70a35d0715ca78b741fd7c4e3afae"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2920, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}