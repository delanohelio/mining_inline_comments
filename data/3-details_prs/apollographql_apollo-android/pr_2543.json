{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODQ4NDMw", "number": 2543, "title": "[Compiler] fix optional Int properties with an uppercase name", "bodyText": "Fixes #2541\nThe actual fix is really small. The reason the PR is long it that while adding tests, I moved the test schema to SDL (it's easier to edit and removes 10k lines \ud83e\udd29  from the repo) and this took me to a rabbit hole of small SDL fixes (see comments inline).", "createdAt": "2020-08-26T11:42:37Z", "url": "https://github.com/apollographql/apollo-android/pull/2543", "merged": true, "mergeCommit": {"oid": "e6ea6744c6c7dd754a729c9c8f83392dac1e8d73"}, "closed": true, "closedAt": "2020-08-27T12:06:06Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCqC5wAH2gAyNDczODQ4NDMwOmE4ZTE4NWRjMWQ3ZDM5NDdiYzRjYTg1YjFmNGQzNDlhZGQ1Y2ZkZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdC80QeAH2gAyNDczODQ4NDMwOjVkODMzODMzOGNmZjYyMTdhNzNmNWM2MmRiMjQ0M2JmMWQ3NjA1Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8e185dc1d7d3947bc4ca85b1f4d349add5cfde0", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/a8e185dc1d7d3947bc4ca85b1f4d349add5cfde0", "committedDate": "2020-08-26T11:24:16Z", "message": "use the field name for class properties, not the schema name\n\nfixes #2541"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263d50e89a1c94573c85e5124d0a0c6c9245cab9", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/263d50e89a1c94573c85e5124d0a0c6c9245cab9", "committedDate": "2020-08-26T11:25:42Z", "message": "add built in introspection types to SDL parser\n\nAlso:\n- remove leading whitespace in block strings\n- remove leading trailing quotes when parsing String default values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b731254440cc1aa24a370928e046c542d10ae62", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/4b731254440cc1aa24a370928e046c542d10ae62", "committedDate": "2020-08-26T11:28:56Z", "message": "normalize Json numbers, GraphQL Ints and Floats to Kotlin Double"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0decbe64d8895013d157bac640e313abaf6fe36", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/b0decbe64d8895013d157bac640e313abaf6fe36", "committedDate": "2020-08-26T11:30:54Z", "message": "use SDL schemas for codegen tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/23b42879edc412d7fc876f577c83fdf07f857055", "committedDate": "2020-08-26T11:40:19Z", "message": "update test fixtures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDA1ODE3", "url": "https://github.com/apollographql/apollo-android/pull/2543#pullrequestreview-475405817", "createdAt": "2020-08-26T11:42:57Z", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0Mjo1N1rOHHIMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0Mjo1N1rOHHIMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNjM4OA==", "bodyText": "This is the actual fix", "url": "https://github.com/apollographql/apollo-android/pull/2543#discussion_r477236388", "createdAt": "2020-08-26T11:42:57Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/codegen/kotlin/InputType.kt", "diffHunk": "@@ -89,7 +89,7 @@ internal fun InputType.Field.writeCodeBlock(thisRef: String): CodeBlock {\n       is FieldType.Scalar.Int -> {\n         if (isOptional) {\n           CodeBlock.builder()\n-              .addStatement(\"if\u00b7(this@%L.%L.defined)\u00b7{\", thisRef, schemaName)\n+              .addStatement(\"if\u00b7(this@%L.%L.defined)\u00b7{\", thisRef, name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDA3Njk0", "url": "https://github.com/apollographql/apollo-android/pull/2543#pullrequestreview-475407694", "createdAt": "2020-08-26T11:45:49Z", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0NTo1MFrOHHISKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0NTo1MFrOHHISKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNzgwMw==", "bodyText": "Adding the built-in introspection types was required for the introspection_query codegen test to pass. More generally, users should be able to generate models for introspection types if needed.\nI started adding these types programmatically but it becomes verbose real fast and we have a parser for that already so I put the builtin types as inline SDL", "url": "https://github.com/apollographql/apollo-android/pull/2543#discussion_r477237803", "createdAt": "2020-08-26T11:45:50Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/sdl/GraphSDLSchemaParser.kt", "diffHunk": "@@ -17,38 +18,207 @@ import java.io.IOException\n import java.util.Locale\n \n internal object GraphSDLSchemaParser {\n-  private val builtInScalarTypes = listOf(\n-      GraphSdlSchema.TypeDefinition.Scalar(\n-          name = \"Int\",\n-          description = \"The `Int` scalar type represents non-fractional signed whole numeric values. \" +\n-              \"Int can represent values between -(2^31) and 2^31 - 1. \",\n-          directives = emptyList()\n-      ),\n-      GraphSdlSchema.TypeDefinition.Scalar(\n-          name = \"Float\",\n-          description = \"The `Float` scalar type represents signed double-precision fractional values as specified by \" +\n-              \"[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\",\n-          directives = emptyList()\n-      ),\n-      GraphSdlSchema.TypeDefinition.Scalar(\n-          name = \"String\",\n-          description = \"The `String` scalar type represents textual data, represented as UTF-8 character sequences. \" +\n-              \"The String type is most often used by GraphQL to represent free-form human-readable text.\",\n-          directives = emptyList()\n-      ),\n-      GraphSdlSchema.TypeDefinition.Scalar(\n-          name = \"Boolean\",\n-          description = \"The `Boolean` scalar type represents `true` or `false`.\",\n-          directives = emptyList()\n-      ),\n-      GraphSdlSchema.TypeDefinition.Scalar(\n-          name = \"ID\",\n-          description = \"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. \" +\n-              \"The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. \" +\n-              \"When expected as an input type, any string (such as `\\\"4\\\"`) or integer (such as `4`) input value will be accepted as an ID.\",\n-          directives = emptyList()\n-      )\n-  )\n+  /**\n+   * Built in scalar and introspection types from:\n+   * - https://spec.graphql.org/June2018/#sec-Scalars\n+   * - https://spec.graphql.org/June2018/#sec-Schema-Introspection\n+   */\n+  private val builtInTypes = \"\"\"\n+\"\"${'\"'}\n+The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\n+\"\"${'\"'}\n+scalar Int\n+\n+\"\"${'\"'}\n+The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\n+\"\"${'\"'}\n+scalar Float\n+\n+\"\"${'\"'}\n+The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\n+\"\"${'\"'}\n+scalar String\n+\n+\"\"${'\"'}\n+The `Boolean` scalar type represents `true` or `false`.\n+\"\"${'\"'}\n+scalar Boolean\n+\n+\"\"${'\"'}\n+The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.\n+\"\"${'\"'}\n+scalar ID\n+\n+\"\"${'\"'}\n+A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n+\n+In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\n+\"\"${'\"'}\n+type __Directive {\n+  name: String!\n+  description: String\n+  locations: [__DirectiveLocation!]!\n+  args: [__InputValue!]!\n+}\n+\n+\"\"${'\"'}\n+A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.\n+\"\"${'\"'}\n+enum __DirectiveLocation {\n+  \"\"${'\"'}Location adjacent to a query operation.\"\"${'\"'}\n+  QUERY\n+\n+  \"\"${'\"'}Location adjacent to a mutation operation.\"\"${'\"'}\n+  MUTATION\n+\n+  \"\"${'\"'}Location adjacent to a subscription operation.\"\"${'\"'}\n+  SUBSCRIPTION\n+\n+  \"\"${'\"'}Location adjacent to a field.\"\"${'\"'}\n+  FIELD\n+\n+  \"\"${'\"'}Location adjacent to a fragment definition.\"\"${'\"'}\n+  FRAGMENT_DEFINITION\n+\n+  \"\"${'\"'}Location adjacent to a fragment spread.\"\"${'\"'}\n+  FRAGMENT_SPREAD\n+\n+  \"\"${'\"'}Location adjacent to an inline fragment.\"\"${'\"'}\n+  INLINE_FRAGMENT\n+\n+  \"\"${'\"'}Location adjacent to a schema definition.\"\"${'\"'}\n+  SCHEMA\n+\n+  \"\"${'\"'}Location adjacent to a scalar definition.\"\"${'\"'}\n+  SCALAR\n+\n+  \"\"${'\"'}Location adjacent to an object type definition.\"\"${'\"'}\n+  OBJECT\n+\n+  \"\"${'\"'}Location adjacent to a field definition.\"\"${'\"'}\n+  FIELD_DEFINITION\n+\n+  \"\"${'\"'}Location adjacent to an argument definition.\"\"${'\"'}\n+  ARGUMENT_DEFINITION\n+\n+  \"\"${'\"'}Location adjacent to an interface definition.\"\"${'\"'}\n+  INTERFACE\n+\n+  \"\"${'\"'}Location adjacent to a union definition.\"\"${'\"'}\n+  UNION\n+\n+  \"\"${'\"'}Location adjacent to an enum definition.\"\"${'\"'}\n+  ENUM\n+\n+  \"\"${'\"'}Location adjacent to an enum value definition.\"\"${'\"'}\n+  ENUM_VALUE\n+\n+  \"\"${'\"'}Location adjacent to an input object type definition.\"\"${'\"'}\n+  INPUT_OBJECT\n+\n+  \"\"${'\"'}Location adjacent to an input object field definition.\"\"${'\"'}\n+  INPUT_FIELD_DEFINITION\n+}\n+\n+\"\"${'\"'}\n+One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.\n+\"\"${'\"'}\n+type __EnumValue {\n+  name: String!\n+  description: String\n+  isDeprecated: Boolean!\n+  deprecationReason: String\n+}\n+\n+\"\"${'\"'}\n+Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.\n+\"\"${'\"'}\n+type __Field {\n+  name: String!\n+  description: String\n+  args: [__InputValue!]!\n+  type: __Type!\n+  isDeprecated: Boolean!\n+  deprecationReason: String\n+}\n+\n+\"\"${'\"'}\n+Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.\n+\"\"${'\"'}\n+type __InputValue {\n+  name: String!\n+  description: String\n+  type: __Type!\n+\n+  \"\"${'\"'}\n+  A GraphQL-formatted string representing the default value for this input value.\n+  \"\"${'\"'}\n+  defaultValue: String\n+}\n+\n+\"\"${'\"'}\n+A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.\n+\"\"${'\"'}\n+type __Schema {\n+  \"\"${'\"'}A list of all types supported by this server.\"\"${'\"'}\n+  types: [__Type!]!\n+\n+  \"\"${'\"'}The type that query operations will be rooted at.\"\"${'\"'}\n+  queryType: __Type!\n+\n+  \"\"${'\"'}\n+  If this server supports mutation, the type that mutation operations will be rooted at.\n+  \"\"${'\"'}\n+  mutationType: __Type\n+  \"\"${'\"'}\n+  If this server supports subscription, the type that subscription operations will be rooted at.\n+  \"\"${'\"'}\n+  subscriptionType: __Type\n+  \"\"${'\"'}A list of all directives supported by this server.\"\"${'\"'}\n+  directives: [__Directive!]!\n+}\n+\"\"${'\"'}\n+The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n+\n+Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.\n+\"\"${'\"'}\n+type __Type {\n+  kind: __TypeKind!\n+  name: String\n+  description: String\n+  fields(includeDeprecated: Boolean = false): [__Field!]\n+  interfaces: [__Type!]\n+  possibleTypes: [__Type!]\n+  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n+  inputFields: [__InputValue!]\n+  ofType: __Type\n+}\n+\"\"${'\"'}An enum describing what kind of type a given `__Type` is.\"\"${'\"'}\n+enum __TypeKind {\n+  \"\"${'\"'}Indicates this type is a scalar.\"\"${'\"'}\n+  SCALAR\n+  \"\"${'\"'}\n+  Indicates this type is an object. `fields` and `interfaces` are valid fields.\n+  \"\"${'\"'}\n+  OBJECT\n+  \"\"${'\"'}\n+  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.\n+  \"\"${'\"'}\n+  INTERFACE\n+  \"\"${'\"'}Indicates this type is a union. `possibleTypes` is a valid field.\"\"${'\"'}\n+  UNION\n+  \"\"${'\"'}Indicates this type is an enum. `enumValues` is a valid field.\"\"${'\"'}\n+  ENUM\n+  \"\"${'\"'}\n+  Indicates this type is an input object. `inputFields` is a valid field.\n+  \"\"${'\"'}\n+  INPUT_OBJECT\n+  \"\"${'\"'}Indicates this type is a list. `ofType` is a valid field.\"\"${'\"'}\n+  LIST\n+  \"\"${'\"'}Indicates this type is a non-null. `ofType` is a valid field.\"\"${'\"'}\n+  NON_NULL\n+}\n+  \"\"\".trimIndent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "originalPosition": 244}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDA4OTI3", "url": "https://github.com/apollographql/apollo-android/pull/2543#pullrequestreview-475408927", "createdAt": "2020-08-26T11:47:49Z", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0Nzo0OVrOHHIWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0Nzo0OVrOHHIWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzODgxMw==", "bodyText": "The order change is unfortunate but I don't think it matters a lot. I think it is due to moving to SDL and the order types are parsed. Where would be the good place to enforce iteration order? When parsing the schemas? Generating code? Somewhere else?", "url": "https://github.com/apollographql/apollo-android/pull/2543#discussion_r477238813", "createdAt": "2020-08-26T11:47:49Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/graphql/com/example/directive_with_inline_fragment/TestQuery.java", "diffHunk": "@@ -340,7 +340,7 @@ public Hero read(ResponseReader reader) {\n         )),\n         ResponseField.forFragment(\"__typename\", \"__typename\", Arrays.<ResponseField.Condition>asList(\n           ResponseField.Condition.booleanCondition(\"withDetails\", false),\n-          ResponseField.Condition.typeCondition(new String[] {\"Human\", \"Droid\"})\n+          ResponseField.Condition.typeCondition(new String[] {\"Droid\", \"Human\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDQ5NjEz", "url": "https://github.com/apollographql/apollo-android/pull/2543#pullrequestreview-475449613", "createdAt": "2020-08-26T12:45:13Z", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo0NToxM1rOHHKVQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo0NToxM1rOHHKVQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3MTM2MA==", "bodyText": "I'm still not 100% sure about coercing rules for default values but I think the quotes are not needed here.", "url": "https://github.com/apollographql/apollo-android/pull/2543#discussion_r477271360", "createdAt": "2020-08-26T12:45:13Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/sdl/GraphSDLSchemaParser.kt", "diffHunk": "@@ -271,7 +445,7 @@ internal object GraphSDLSchemaParser {\n       enumValue() != null -> enumValue().name().text\n       listValue() != null -> listValue().value().map { it.parse() }\n       objectValue() != null -> text\n-      stringValue() != null -> text\n+      stringValue() != null -> text.removePrefix(\"\\\"\").removeSuffix(\"\\\"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "originalPosition": 289}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODk5MDg3", "url": "https://github.com/apollographql/apollo-android/pull/2543#pullrequestreview-475899087", "createdAt": "2020-08-26T22:03:26Z", "commit": {"oid": "23b42879edc412d7fc876f577c83fdf07f857055"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8338338cff6217a73f5c62db2443bf1d760577", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/5d8338338cff6217a73f5c62db2443bf1d760577", "committedDate": "2020-08-27T09:16:28Z", "message": "move the SDL definitions to a separate file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4257, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}