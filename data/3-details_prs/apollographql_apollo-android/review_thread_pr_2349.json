{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzcyOTQ1", "number": 2349, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozNzoxOFrOED4bLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMDozNlrOED72mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA1NjQ3OnYy", "diffSide": "RIGHT", "path": "apollo-normalized-cache/src/test/java/com/apollographql/apollo/cache/normalized/internal/CacheKeyBuilderTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozNzoxOFrOGhKKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDowNVrOGhKSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMjcxNw==", "bodyText": "Just curious why this test was converted to Kotlin, is it required by this PR?", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437422717", "createdAt": "2020-06-09T13:37:18Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/test/java/com/apollographql/apollo/cache/normalized/internal/CacheKeyBuilderTest.kt", "diffHunk": "@@ -0,0 +1,369 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.InputType\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ResponseField.Companion.forString\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.UnmodifiableMapBuilder\n+import com.google.common.truth.Truth\n+import org.junit.Test\n+import java.io.IOException\n+import java.math.BigDecimal\n+import java.util.HashMap\n+\n+class CacheKeyBuilderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1669fc93878db9054ba590f6125600c128cb2fcd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDc2Mg==", "bodyText": "In Kotlin, this test can make use of InputFieldWriter.writeList(String, (ListItemWriter) -> Unit) (the version that takes a block as parameter) and therefore reproduce the problem.", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437424762", "createdAt": "2020-06-09T13:40:05Z", "author": {"login": "martinbonnin"}, "path": "apollo-normalized-cache/src/test/java/com/apollographql/apollo/cache/normalized/internal/CacheKeyBuilderTest.kt", "diffHunk": "@@ -0,0 +1,369 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.InputType\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ResponseField.Companion.forString\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.UnmodifiableMapBuilder\n+import com.google.common.truth.Truth\n+import org.junit.Test\n+import java.io.IOException\n+import java.math.BigDecimal\n+import java.util.HashMap\n+\n+class CacheKeyBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMjcxNw=="}, "originalCommit": {"oid": "1669fc93878db9054ba590f6125600c128cb2fcd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTYxODE4OnYy", "diffSide": "RIGHT", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/internal/SortedInputFieldMapWriter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMDozNlrOGhPugw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo1Mzo1NFrOGhRVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzg1OQ==", "bodyText": "Instead of init, can you move this to constructor. We also shouldn't use checkNotNull in kotlin.", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437513859", "createdAt": "2020-06-09T15:20:36Z", "author": {"login": "tasomaniac"}, "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/internal/SortedInputFieldMapWriter.kt", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.Utils.__checkNotNull\n+import java.io.IOException\n+import java.util.ArrayList\n+import java.util.Collections\n+import java.util.Comparator\n+import java.util.TreeMap\n+\n+class SortedInputFieldMapWriter(fieldNameComparator: Comparator<String>) : InputFieldWriter {\n+  private val fieldNameComparator: Comparator<String>\n+  private val buffer: MutableMap<String, Any?>\n+  fun map(): Map<String, Any?> {\n+    return Collections.unmodifiableMap(buffer)\n+  }\n+\n+  override fun writeString(fieldName: String, value: String?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeInt(fieldName: String, value: Int?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeLong(fieldName: String, value: Long?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeDouble(fieldName: String, value: Double?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeNumber(fieldName: String, value: Number?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeBoolean(fieldName: String, value: Boolean?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeCustom(fieldName: String, scalarType: ScalarType, value: Any?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeObject(fieldName: String, marshaller: InputFieldMarshaller?) {\n+    if (marshaller == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+      marshaller.marshal(nestedWriter)\n+      buffer[fieldName] = nestedWriter.buffer\n+    }\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeList(fieldName: String, listWriter: InputFieldWriter.ListWriter?) {\n+    if (listWriter == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val listItemWriter = ListItemWriter(fieldNameComparator)\n+      listWriter.write(listItemWriter)\n+      buffer[fieldName] = listItemWriter.list\n+    }\n+  }\n+\n+  override fun writeMap(fieldName: String, value: Map<String, Any?>?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  private open class ListItemWriter internal constructor(val fieldNameComparator: Comparator<String>) : InputFieldWriter.ListItemWriter {\n+    val list: MutableList<Any?> = ArrayList<Any?>()\n+    override fun writeString(value: String?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeInt(value: Int?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeLong(value: Long?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeDouble(value: Double?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeNumber(value: Number?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeBoolean(value: Boolean?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeCustom(scalarType: ScalarType, value: Any?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeObject(marshaller: InputFieldMarshaller?) {\n+      if (marshaller != null) {\n+        val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+        marshaller.marshal(nestedWriter)\n+        list.add(nestedWriter.buffer)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeList(listWriter: InputFieldWriter.ListWriter?) {\n+      if (listWriter != null) {\n+        val nestedListItemWriter = ListItemWriter(fieldNameComparator)\n+        listWriter.write(nestedListItemWriter)\n+        list.add(nestedListItemWriter.list)\n+      }\n+    }\n+\n+    override fun writeMap(value: Map<String, Any?>?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+  }\n+\n+  init {\n+    this.fieldNameComparator = __checkNotNull(fieldNameComparator, \"fieldNameComparator == null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cead9b2efe2103d9188829c27fdf35c6ef359d2c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MDI2NA==", "bodyText": "Sorry I forgot to check the automatic code conversion there \ud83d\ude05. Thank for the heads up!", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437540264", "createdAt": "2020-06-09T15:53:54Z", "author": {"login": "martinbonnin"}, "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/internal/SortedInputFieldMapWriter.kt", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.Utils.__checkNotNull\n+import java.io.IOException\n+import java.util.ArrayList\n+import java.util.Collections\n+import java.util.Comparator\n+import java.util.TreeMap\n+\n+class SortedInputFieldMapWriter(fieldNameComparator: Comparator<String>) : InputFieldWriter {\n+  private val fieldNameComparator: Comparator<String>\n+  private val buffer: MutableMap<String, Any?>\n+  fun map(): Map<String, Any?> {\n+    return Collections.unmodifiableMap(buffer)\n+  }\n+\n+  override fun writeString(fieldName: String, value: String?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeInt(fieldName: String, value: Int?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeLong(fieldName: String, value: Long?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeDouble(fieldName: String, value: Double?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeNumber(fieldName: String, value: Number?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeBoolean(fieldName: String, value: Boolean?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeCustom(fieldName: String, scalarType: ScalarType, value: Any?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeObject(fieldName: String, marshaller: InputFieldMarshaller?) {\n+    if (marshaller == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+      marshaller.marshal(nestedWriter)\n+      buffer[fieldName] = nestedWriter.buffer\n+    }\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeList(fieldName: String, listWriter: InputFieldWriter.ListWriter?) {\n+    if (listWriter == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val listItemWriter = ListItemWriter(fieldNameComparator)\n+      listWriter.write(listItemWriter)\n+      buffer[fieldName] = listItemWriter.list\n+    }\n+  }\n+\n+  override fun writeMap(fieldName: String, value: Map<String, Any?>?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  private open class ListItemWriter internal constructor(val fieldNameComparator: Comparator<String>) : InputFieldWriter.ListItemWriter {\n+    val list: MutableList<Any?> = ArrayList<Any?>()\n+    override fun writeString(value: String?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeInt(value: Int?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeLong(value: Long?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeDouble(value: Double?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeNumber(value: Number?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeBoolean(value: Boolean?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeCustom(scalarType: ScalarType, value: Any?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeObject(marshaller: InputFieldMarshaller?) {\n+      if (marshaller != null) {\n+        val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+        marshaller.marshal(nestedWriter)\n+        list.add(nestedWriter.buffer)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeList(listWriter: InputFieldWriter.ListWriter?) {\n+      if (listWriter != null) {\n+        val nestedListItemWriter = ListItemWriter(fieldNameComparator)\n+        listWriter.write(nestedListItemWriter)\n+        list.add(nestedListItemWriter.list)\n+      }\n+    }\n+\n+    override fun writeMap(value: Map<String, Any?>?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+  }\n+\n+  init {\n+    this.fieldNameComparator = __checkNotNull(fieldNameComparator, \"fieldNameComparator == null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzg1OQ=="}, "originalCommit": {"oid": "cead9b2efe2103d9188829c27fdf35c6ef359d2c"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}