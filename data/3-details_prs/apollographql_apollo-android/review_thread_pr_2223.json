{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjIxMjE4", "number": 2223, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTo1NjozMFrOD3-WNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTo1NjozMFrOD3-WNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDE5NzY2OnYy", "diffSide": "RIGHT", "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/RepositoryManager.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTo1NjozMFrOGOiORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozMjozNVrOGO8nog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5Mzk1OQ==", "bodyText": "Is there a way to force a crash if $0 is not nil but not of type GithubRepositoryCommitsQuery.Edge either? Some swift equivalent of mapNotNull { it as GithubRepositoryCommitsQuery.Edge? } in Kotlin?", "url": "https://github.com/apollographql/apollo-android/pull/2223#discussion_r417893959", "createdAt": "2020-04-30T09:56:30Z", "author": {"login": "martinbonnin"}, "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/RepositoryManager.swift", "diffHunk": "@@ -0,0 +1,46 @@\n+//\n+//  RepositoryManager.swift\n+//  kmp-ios-app\n+//\n+//  Created by Ellen Shapiro on 4/26/20.\n+//\n+\n+import Foundation\n+import kmp_lib_sample\n+import SwiftUI\n+\n+class RepositoryManager: ObservableObject {\n+    \n+    private let repository = ApolloiOSRepositoryKt.create()\n+    \n+    @Published var repos: [RepositoryFragment] = []\n+    @Published var repoDetails: [String: RepositoryDetail] = [:]\n+    @Published var commits: [String: [GithubRepositoryCommitsQuery.Node]] = [:]\n+    \n+    func fetch() {\n+        self.repository.fetchRepositories { [weak self] repos in\n+            self?.repos = repos\n+        }\n+    }\n+    \n+    func fetchDetails(for repo: RepositoryFragment) {        \n+        self.repository.fetchRepositoryDetail(repositoryName: repo.name) { [weak self] detail in\n+            if let detail = detail {\n+                self?.repoDetails[repo.name] = detail\n+            }\n+        }\n+    }\n+    \n+    func fetchCommits(for repo: RepositoryFragment) {\n+        // NOTE: This comes in as `[Any]` due to some some issues with representing\n+        // optional types in a generic array in Objective-C from K/N. The actual\n+        // type coming back here is `GithubRepositoryCommitsQuery.Edge`, and the\n+        // `Node` it contains is where actual information about the commit lives.\n+        self.repository.fetchCommits(repositoryName: repo.name) { [weak self] commits in\n+            let filteredCommits = commits\n+                .compactMap { $0 as? GithubRepositoryCommitsQuery.Edge }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027cc4781870e81168efb224e6027acc2d5fa934"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MjQ2MA==", "bodyText": "\ud83e\udd14 Good question - this isn't really a pattern used much in iOS so I don't think it's a change worth making generally, but I'll mess around and see because now I'm curious :)", "url": "https://github.com/apollographql/apollo-android/pull/2223#discussion_r418182460", "createdAt": "2020-04-30T17:45:31Z", "author": {"login": "designatednerd"}, "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/RepositoryManager.swift", "diffHunk": "@@ -0,0 +1,46 @@\n+//\n+//  RepositoryManager.swift\n+//  kmp-ios-app\n+//\n+//  Created by Ellen Shapiro on 4/26/20.\n+//\n+\n+import Foundation\n+import kmp_lib_sample\n+import SwiftUI\n+\n+class RepositoryManager: ObservableObject {\n+    \n+    private let repository = ApolloiOSRepositoryKt.create()\n+    \n+    @Published var repos: [RepositoryFragment] = []\n+    @Published var repoDetails: [String: RepositoryDetail] = [:]\n+    @Published var commits: [String: [GithubRepositoryCommitsQuery.Node]] = [:]\n+    \n+    func fetch() {\n+        self.repository.fetchRepositories { [weak self] repos in\n+            self?.repos = repos\n+        }\n+    }\n+    \n+    func fetchDetails(for repo: RepositoryFragment) {        \n+        self.repository.fetchRepositoryDetail(repositoryName: repo.name) { [weak self] detail in\n+            if let detail = detail {\n+                self?.repoDetails[repo.name] = detail\n+            }\n+        }\n+    }\n+    \n+    func fetchCommits(for repo: RepositoryFragment) {\n+        // NOTE: This comes in as `[Any]` due to some some issues with representing\n+        // optional types in a generic array in Objective-C from K/N. The actual\n+        // type coming back here is `GithubRepositoryCommitsQuery.Edge`, and the\n+        // `Node` it contains is where actual information about the commit lives.\n+        self.repository.fetchCommits(repositoryName: repo.name) { [weak self] commits in\n+            let filteredCommits = commits\n+                .compactMap { $0 as? GithubRepositoryCommitsQuery.Edge }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5Mzk1OQ=="}, "originalCommit": {"oid": "027cc4781870e81168efb224e6027acc2d5fa934"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjQzNA==", "bodyText": "OK, survey says that's not a thing in Swift:\n\nYou also can't do$0 as? GithubRepositoryCommitsQuery.Edge? since the type is [Any] rather than [Any?]:\n\nIf the type were [Any?] then you could do that:\n\nBut yeah basically you can't do what causes a runtime crash in Kotlin because it causes a compile-time error in Swift.", "url": "https://github.com/apollographql/apollo-android/pull/2223#discussion_r418326434", "createdAt": "2020-04-30T22:32:35Z", "author": {"login": "designatednerd"}, "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/RepositoryManager.swift", "diffHunk": "@@ -0,0 +1,46 @@\n+//\n+//  RepositoryManager.swift\n+//  kmp-ios-app\n+//\n+//  Created by Ellen Shapiro on 4/26/20.\n+//\n+\n+import Foundation\n+import kmp_lib_sample\n+import SwiftUI\n+\n+class RepositoryManager: ObservableObject {\n+    \n+    private let repository = ApolloiOSRepositoryKt.create()\n+    \n+    @Published var repos: [RepositoryFragment] = []\n+    @Published var repoDetails: [String: RepositoryDetail] = [:]\n+    @Published var commits: [String: [GithubRepositoryCommitsQuery.Node]] = [:]\n+    \n+    func fetch() {\n+        self.repository.fetchRepositories { [weak self] repos in\n+            self?.repos = repos\n+        }\n+    }\n+    \n+    func fetchDetails(for repo: RepositoryFragment) {        \n+        self.repository.fetchRepositoryDetail(repositoryName: repo.name) { [weak self] detail in\n+            if let detail = detail {\n+                self?.repoDetails[repo.name] = detail\n+            }\n+        }\n+    }\n+    \n+    func fetchCommits(for repo: RepositoryFragment) {\n+        // NOTE: This comes in as `[Any]` due to some some issues with representing\n+        // optional types in a generic array in Objective-C from K/N. The actual\n+        // type coming back here is `GithubRepositoryCommitsQuery.Edge`, and the\n+        // `Node` it contains is where actual information about the commit lives.\n+        self.repository.fetchCommits(repositoryName: repo.name) { [weak self] commits in\n+            let filteredCommits = commits\n+                .compactMap { $0 as? GithubRepositoryCommitsQuery.Edge }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5Mzk1OQ=="}, "originalCommit": {"oid": "027cc4781870e81168efb224e6027acc2d5fa934"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3229, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}