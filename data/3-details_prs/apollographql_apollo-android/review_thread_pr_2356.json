{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTYzODEz", "number": 2356, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0OTo0M1rOEF0nMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0OTo0M1rOEF0nMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQwMzM2OnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/ApolloRequest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0OTo0M1rOGkPW3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMTo0MVrOGluOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MzUzMg==", "bodyText": "Looks like requestUuid is specific to WebSockets, a bit similar to how headers are specific to Http. Should it be in an opaque ExecutionContext.Element ?", "url": "https://github.com/apollographql/apollo-android/pull/2356#discussion_r440653532", "createdAt": "2020-06-16T07:49:43Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/ApolloRequest.kt", "diffHunk": "@@ -4,10 +4,13 @@ import com.apollographql.apollo.api.ApolloExperimental\n import com.apollographql.apollo.api.ExecutionContext\n import com.apollographql.apollo.api.Operation\n import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.benasher44.uuid.uuid4\n \n @ApolloExperimental\n-class ApolloRequest<T> constructor(\n-    val operation: Operation<*, T, *>,\n+class ApolloRequest<D : Operation.Data>(\n+    val operation: Operation<D, D, *>,\n     val scalarTypeAdapters: ScalarTypeAdapters,\n-    val executionContext: ExecutionContext = ExecutionContext.Empty\n-)\n+    val executionContext: ExecutionContext\n+) {\n+  val requestUuid = uuid4()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4666e8851bc89b80b23cb0f860caa81401e7568d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwNzkzMw==", "bodyText": "I would leave it to be a pat of the request ApolloRequest object for the future as it gives a way to match request with the corresponding response by requestUuid. I feel it will be helpful if someone requires it in own custom interceptor implementation.", "url": "https://github.com/apollographql/apollo-android/pull/2356#discussion_r442207933", "createdAt": "2020-06-18T13:01:41Z", "author": {"login": "sav007"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/ApolloRequest.kt", "diffHunk": "@@ -4,10 +4,13 @@ import com.apollographql.apollo.api.ApolloExperimental\n import com.apollographql.apollo.api.ExecutionContext\n import com.apollographql.apollo.api.Operation\n import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.benasher44.uuid.uuid4\n \n @ApolloExperimental\n-class ApolloRequest<T> constructor(\n-    val operation: Operation<*, T, *>,\n+class ApolloRequest<D : Operation.Data>(\n+    val operation: Operation<D, D, *>,\n     val scalarTypeAdapters: ScalarTypeAdapters,\n-    val executionContext: ExecutionContext = ExecutionContext.Empty\n-)\n+    val executionContext: ExecutionContext\n+) {\n+  val requestUuid = uuid4()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MzUzMg=="}, "originalCommit": {"oid": "4666e8851bc89b80b23cb0f860caa81401e7568d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3119, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}