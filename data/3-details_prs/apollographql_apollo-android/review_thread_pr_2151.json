{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDUwNjI3", "number": 2151, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxNzoxMVrODw2V2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyMTozM1rODw9kFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQ4NTY5OnYy", "diffSide": "LEFT", "path": "apollo-android-support/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxNzoxMVrOGEEsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxNzoxMVrOGEEsrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNDQ2Mg==", "bodyText": "This is out of scope but it was redundant.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r406924462", "createdAt": "2020-04-10T20:17:11Z", "author": {"login": "tasomaniac"}, "path": "apollo-android-support/build.gradle.kts", "diffHunk": "@@ -1,10 +1,4 @@\n import com.android.build.gradle.BaseExtension\n-buildscript {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df59e582ef8a5e1e8bdc2f9b3fa558db62c30639"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjY2NDYzOnYy", "diffSide": "RIGHT", "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoxNTo1NFrOGEOSLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMjo0ODo0NVrOGERr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MTUxOA==", "bodyText": "I have to double check entire logic of this function, after quick look at the logic that was before looks suspicious.\nIt looks like we remove only from the nextCache if it present and never from current instance \ud83e\udd14", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407081518", "createdAt": "2020-04-11T16:15:54Z", "author": {"login": "sav007"}, "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "diffHunk": "@@ -102,40 +99,35 @@\n     return changedKeys;\n   }\n \n-  @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n   @Override public void clearAll() {\n-    //noinspection ResultOfMethodCallIgnored\n-    nextCache().apply(new Action<NormalizedCache>() {\n-      @Override public void apply(@NotNull NormalizedCache cache) {\n-        cache.clearAll();\n-      }\n-    });\n+    NormalizedCache nextCache = getNextCache();\n+    if (nextCache != null) {\n+      nextCache.clearAll();\n+    }\n     clearCurrentCache();\n   }\n \n   @Override public boolean remove(@NotNull final CacheKey cacheKey, final boolean cascade) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjA1Ng==", "bodyText": "Do you mean the current change is suspicious or the old behavior is? This code is quite well tested.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407082056", "createdAt": "2020-04-11T16:21:03Z", "author": {"login": "tasomaniac"}, "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "diffHunk": "@@ -102,40 +99,35 @@\n     return changedKeys;\n   }\n \n-  @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n   @Override public void clearAll() {\n-    //noinspection ResultOfMethodCallIgnored\n-    nextCache().apply(new Action<NormalizedCache>() {\n-      @Override public void apply(@NotNull NormalizedCache cache) {\n-        cache.clearAll();\n-      }\n-    });\n+    NormalizedCache nextCache = getNextCache();\n+    if (nextCache != null) {\n+      nextCache.clearAll();\n+    }\n     clearCurrentCache();\n   }\n \n   @Override public boolean remove(@NotNull final CacheKey cacheKey, final boolean cascade) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MTUxOA=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjI3OQ==", "bodyText": "From what I understand, return result || ... was doing the same. If the result is true, the rest will never be executed.\nOn a second look, I don't think the tests cover having a nextCache scenario", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407082279", "createdAt": "2020-04-11T16:23:15Z", "author": {"login": "tasomaniac"}, "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "diffHunk": "@@ -102,40 +99,35 @@\n     return changedKeys;\n   }\n \n-  @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n   @Override public void clearAll() {\n-    //noinspection ResultOfMethodCallIgnored\n-    nextCache().apply(new Action<NormalizedCache>() {\n-      @Override public void apply(@NotNull NormalizedCache cache) {\n-        cache.clearAll();\n-      }\n-    });\n+    NormalizedCache nextCache = getNextCache();\n+    if (nextCache != null) {\n+      nextCache.clearAll();\n+    }\n     clearCurrentCache();\n   }\n \n   @Override public boolean remove(@NotNull final CacheKey cacheKey, final boolean cascade) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MTUxOA=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMTM3Ng==", "bodyText": "I did another iteration to keep it much closer to the original implementation. Behavior wise, it should be the same but I think this will make it easier to review. Let me know if you see any issues.\nI am personally not 100% sure how should the implementation be with the nextCache involved.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407101376", "createdAt": "2020-04-11T19:26:05Z", "author": {"login": "tasomaniac"}, "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "diffHunk": "@@ -102,40 +99,35 @@\n     return changedKeys;\n   }\n \n-  @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n   @Override public void clearAll() {\n-    //noinspection ResultOfMethodCallIgnored\n-    nextCache().apply(new Action<NormalizedCache>() {\n-      @Override public void apply(@NotNull NormalizedCache cache) {\n-        cache.clearAll();\n-      }\n-    });\n+    NormalizedCache nextCache = getNextCache();\n+    if (nextCache != null) {\n+      nextCache.clearAll();\n+    }\n     clearCurrentCache();\n   }\n \n   @Override public boolean remove(@NotNull final CacheKey cacheKey, final boolean cascade) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MTUxOA=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzI3NA==", "bodyText": "No sorry for the confusion, I had to mention that it's not about your changes, I meant the logic that we had before.\nThe issue is that we are removing the next chained cache (nextCache()) and if it  succeed we skip the current one as return result || deleteRecord won't call deleteRecord.\nThe reason that it's not an issue is because usually SqlNormalizedCache is the last one in the chain but implementation is definitely not correct.\nI will fix it in separate PR, let's keep it for now as is.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407137274", "createdAt": "2020-04-12T02:48:45Z", "author": {"login": "sav007"}, "path": "apollo-android-support/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.java", "diffHunk": "@@ -102,40 +99,35 @@\n     return changedKeys;\n   }\n \n-  @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n   @Override public void clearAll() {\n-    //noinspection ResultOfMethodCallIgnored\n-    nextCache().apply(new Action<NormalizedCache>() {\n-      @Override public void apply(@NotNull NormalizedCache cache) {\n-        cache.clearAll();\n-      }\n-    });\n+    NormalizedCache nextCache = getNextCache();\n+    if (nextCache != null) {\n+      nextCache.clearAll();\n+    }\n     clearCurrentCache();\n   }\n \n   @Override public boolean remove(@NotNull final CacheKey cacheKey, final boolean cascade) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MTUxOA=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjY2OTAyOnYy", "diffSide": "RIGHT", "path": "build.gradle.kts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyMTozM1rOGEOUbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNToyNjoxMlrOGESXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjA5NQ==", "bodyText": "what is the implication on the user side, will it be required to include this compiler arg on the library consumer side as well?", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407082095", "createdAt": "2020-04-11T16:21:33Z", "author": {"login": "sav007"}, "path": "build.gradle.kts", "diffHunk": "@@ -71,7 +71,10 @@ subprojects {\n   }\n \n   tasks.withType<KotlinCompile> {\n-    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()\n+    kotlinOptions {\n+      jvmTarget = JavaVersion.VERSION_1_8.toString()\n+      freeCompilerArgs += \"-Xopt-in=kotlin.RequiresOptIn\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjQ2OQ==", "bodyText": "As far as understand, this makes it an implementation detail. Users shouldn't require anything. We can test that with snapshots after merging this one. If it is not the case, it is easy to remove this. The experimental map/set builder API is just nicer.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407082469", "createdAt": "2020-04-11T16:25:06Z", "author": {"login": "tasomaniac"}, "path": "build.gradle.kts", "diffHunk": "@@ -71,7 +71,10 @@ subprojects {\n   }\n \n   tasks.withType<KotlinCompile> {\n-    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()\n+    kotlinOptions {\n+      jvmTarget = JavaVersion.VERSION_1_8.toString()\n+      freeCompilerArgs += \"-Xopt-in=kotlin.RequiresOptIn\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjA5NQ=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzYxNw==", "bodyText": "I just want to make sure that we don't introduce extra requirements for the users to include this compilation flag on their end whenever they want to use dump().\nhttps://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-experimental-stdlib-api/\n\nBeware using the annotated API especially if you're developing a library, since your library might become binary incompatible with the future versions of the standard library.\n\nIt can cause issues in the future if they decide to change API.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407137617", "createdAt": "2020-04-12T02:53:33Z", "author": {"login": "sav007"}, "path": "build.gradle.kts", "diffHunk": "@@ -71,7 +71,10 @@ subprojects {\n   }\n \n   tasks.withType<KotlinCompile> {\n-    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()\n+    kotlinOptions {\n+      jvmTarget = JavaVersion.VERSION_1_8.toString()\n+      freeCompilerArgs += \"-Xopt-in=kotlin.RequiresOptIn\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjA5NQ=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0ODQ2MA==", "bodyText": "Tbh, this is an inline function and it is not something we expose to consumers.In this particular case, it should be fine.", "url": "https://github.com/apollographql/apollo-android/pull/2151#discussion_r407148460", "createdAt": "2020-04-12T05:26:12Z", "author": {"login": "tasomaniac"}, "path": "build.gradle.kts", "diffHunk": "@@ -71,7 +71,10 @@ subprojects {\n   }\n \n   tasks.withType<KotlinCompile> {\n-    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()\n+    kotlinOptions {\n+      jvmTarget = JavaVersion.VERSION_1_8.toString()\n+      freeCompilerArgs += \"-Xopt-in=kotlin.RequiresOptIn\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjA5NQ=="}, "originalCommit": {"oid": "b87ef9d8212689867548c0389eb9a6e537d335c8"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3184, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}