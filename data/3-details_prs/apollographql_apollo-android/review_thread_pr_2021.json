{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDE1ODQ2", "number": 2021, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMDowNlrODkE24A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMToxNjozMFrODkE6Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU0OTEyOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMDowNlrOFwNjQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMDowNlrOFwNjQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Nzk4Nw==", "bodyText": "Is the @JvmField required here ? It exposes a field publicly for no apparent reason.", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386097987", "createdAt": "2020-03-01T11:00:06Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Represents an error response returned from the GraphQL server\n+ */\n+data class Error(\n+    /**\n+     * Server error message\n+     */\n+    @JvmField\n+    val message: String,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265a7e5f75d7a4141fee77730b74be242798d518"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU1MDY3OnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMjoxNlrOFwNj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjo0NDo1NVrOFwPCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODE2Nw==", "bodyText": "+1 for the deprecation notice \ud83d\udc4d\nI wonder how that's going to play with Java if we decide to remove @JvmField as mentioned above.", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386098167", "createdAt": "2020-03-01T11:02:16Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Represents an error response returned from the GraphQL server\n+ */\n+data class Error(\n+    /**\n+     * Server error message\n+     */\n+    @JvmField\n+    val message: String,\n+\n+    /**\n+     * Locations of the errors in the GraphQL operation\n+     */\n+    @JvmField\n+    val locations: List<Location> = emptyList(),\n+\n+    /**\n+     * Custom attributes associated with this error\n+     */\n+    @JvmField\n+    val customAttributes: Map<String, Any?> = emptyMap()\n+) {\n+\n+  /**\n+   * Returns server error message.\n+   */\n+  @Deprecated(message = \"Use property instead\", replaceWith = ReplaceWith(expression = \"message\"))\n+  fun message(): String? = message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265a7e5f75d7a4141fee77730b74be242798d518"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMjM5Ng==", "bodyText": "On Java as far as I can see it just marked as deprecated without replace action, just a message. I think we are good here.", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386122396", "createdAt": "2020-03-01T16:44:55Z", "author": {"login": "sav007"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Represents an error response returned from the GraphQL server\n+ */\n+data class Error(\n+    /**\n+     * Server error message\n+     */\n+    @JvmField\n+    val message: String,\n+\n+    /**\n+     * Locations of the errors in the GraphQL operation\n+     */\n+    @JvmField\n+    val locations: List<Location> = emptyList(),\n+\n+    /**\n+     * Custom attributes associated with this error\n+     */\n+    @JvmField\n+    val customAttributes: Map<String, Any?> = emptyMap()\n+) {\n+\n+  /**\n+   * Returns server error message.\n+   */\n+  @Deprecated(message = \"Use property instead\", replaceWith = ReplaceWith(expression = \"message\"))\n+  fun message(): String? = message", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODE2Nw=="}, "originalCommit": {"oid": "265a7e5f75d7a4141fee77730b74be242798d518"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU1NDEzOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/FileUpload.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMToxMDoyMlrOFwNlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMToxMDoyMlrOFwNlyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODYzNQ==", "bodyText": "Why do we need FileUpload to be a data class ?", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386098635", "createdAt": "2020-03-01T11:10:22Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/FileUpload.kt", "diffHunk": "@@ -0,0 +1,5 @@\n+package com.apollographql.apollo.api\n+\n+import java.io.File\n+\n+data class FileUpload(@JvmField val mimetype: String, @JvmField val file: File)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265a7e5f75d7a4141fee77730b74be242798d518"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU1NzQyOnYy", "diffSide": "RIGHT", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Operation.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMToxNjozMFrOFwNnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMToxNjozMFrOFwNnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5OTA0Ng==", "bodyText": "This used to have throw IOException in the signature. I don't think it's a huge problem since I think marshal is only used internally ? If that's the case, it would be worth hiding that in the .internal package at some point (can be done in a later PR)", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386099046", "createdAt": "2020-03-01T11:16:30Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Operation.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.apollographql.apollo.api\n+\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.json.InputFieldJsonWriter\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import okio.Buffer\n+import okio.BufferedSource\n+import java.io.IOException\n+\n+/**\n+ * Represents a GraphQL operation (mutation or query).\n+ */\n+interface Operation<D : Operation.Data, T, V : Operation.Variables> {\n+  /**\n+   * Returns the raw GraphQL operation String.\n+   */\n+  fun queryDocument(): String\n+\n+  /**\n+   * Returns the variables associated with this GraphQL operation.\n+   */\n+  fun variables(): V\n+\n+  /**\n+   * Returns a mapper that maps the server response data to generated model class [D].\n+   */\n+  fun responseFieldMapper(): ResponseFieldMapper<D>\n+\n+  /**\n+   * Wraps the generated response data class [D] with another class. For example, a use case for this would be to\n+   * wrap the generated response data class in an Optional i.e. Optional.fromNullable(data).\n+   */\n+  fun wrapData(data: D?): T?\n+\n+  /**\n+   * Returns GraphQL operation name [OperationName].\n+   */\n+  fun name(): OperationName\n+\n+  /**\n+   * Returns a unique identifier for this operation.\n+   */\n+  fun operationId(): String\n+\n+  /**\n+   * Parses GraphQL operation raw response from the [source] with provided [scalarTypeAdapters] and returns result [Response]\n+   */\n+  @Throws(IOException::class)\n+  fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<T>\n+\n+  /**\n+   * Parses GraphQL operation raw response from the [source] and returns result [Response]\n+   */\n+  @Throws(IOException::class)\n+  fun parse(source: BufferedSource): Response<T>\n+\n+  /**\n+   * Abstraction for data returned by the server in response to this operation.\n+   */\n+  interface Data {\n+\n+    /**\n+     * Returns marshaller [ResponseFieldMarshaller] to serialize operation data\n+     */\n+    fun marshaller(): ResponseFieldMarshaller\n+  }\n+\n+  /**\n+   * Abstraction for the variables which are a part of the GraphQL operation.\n+   * For example, for the following GraphQL operation, Variables represents values for GraphQL '$type' and '$limit' variables:\n+   *\n+   * ```\n+   *  query FeedQuery($type: FeedType!, $limit: Int!) {\n+   *    feedEntries: feed(type: $type, limit: $limit) {\n+   *      id\n+   *      repository {\n+   *        ...RepositoryFragment\n+   *      }\n+   *      postedBy {\n+   *        login\n+   *      }\n+   *    }\n+   * }\n+   * ```\n+   */\n+  open class Variables {\n+\n+    open fun valueMap(): Map<String, Any?> {\n+      return emptyMap()\n+    }\n+\n+    open fun marshaller(): InputFieldMarshaller {\n+      return InputFieldMarshaller { }\n+    }\n+\n+    /**\n+     * Serializes variables as JSON string to be sent to the GraphQL server.\n+     */\n+    fun marshal(): String {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265a7e5f75d7a4141fee77730b74be242798d518"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3272, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}