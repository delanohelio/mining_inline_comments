{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDQ1OTE1", "number": 2298, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0NjoyN1rOD_13iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MTowOFrOD_19EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY5NDUxOnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/BearerTokenInterceptor.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0NjoyN1rOGavuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToyNToxOVrOGaw3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODA0OQ==", "bodyText": "I feel like this let only add to the default branch with emptyMap. It should add to the existing context, shouldn't it?", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430698049", "createdAt": "2020-05-26T20:46:27Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/BearerTokenInterceptor.kt", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.apollographql.apollo.interceptor\n+\n+import com.apollographql.apollo.ApolloException\n+import com.apollographql.apollo.ApolloHttpException\n+import com.apollographql.apollo.BearerTokenException\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.network.HttpExecutionContext\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.catch\n+import kotlinx.coroutines.flow.flatMapConcat\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.retry\n+import kotlinx.coroutines.sync.Mutex\n+import kotlinx.coroutines.sync.withLock\n+\n+@ApolloExperimental\n+class BearerTokenInterceptor(private val tokenProvider: TokenProvider) : ApolloRequestInterceptor {\n+  val mutex = Mutex()\n+\n+  private fun <T> ApolloRequest<T>.withHeader(name: String, value: String): ApolloRequest<T> {\n+    val httpRequestContext = executionContext[HttpExecutionContext.Request]\n+        ?: HttpExecutionContext.Request(emptyMap())\n+            .let {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNjc5MQ==", "bodyText": "Oh my. Good catch, thanks !", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430716791", "createdAt": "2020-05-26T21:25:19Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/BearerTokenInterceptor.kt", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.apollographql.apollo.interceptor\n+\n+import com.apollographql.apollo.ApolloException\n+import com.apollographql.apollo.ApolloHttpException\n+import com.apollographql.apollo.BearerTokenException\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.network.HttpExecutionContext\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.catch\n+import kotlinx.coroutines.flow.flatMapConcat\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.retry\n+import kotlinx.coroutines.sync.Mutex\n+import kotlinx.coroutines.sync.withLock\n+\n+@ApolloExperimental\n+class BearerTokenInterceptor(private val tokenProvider: TokenProvider) : ApolloRequestInterceptor {\n+  val mutex = Mutex()\n+\n+  private fun <T> ApolloRequest<T>.withHeader(name: String, value: String): ApolloRequest<T> {\n+    val httpRequestContext = executionContext[HttpExecutionContext.Request]\n+        ?: HttpExecutionContext.Request(emptyMap())\n+            .let {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODA0OQ=="}, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY5OTU3OnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0ODowMVrOGavxbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoxMjoyOFrOGbqUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg==", "bodyText": "Would it make sense to somehow extend ApolloHttpException here since this is essentially also an HttpException", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430698862", "createdAt": "2020-05-26T20:48:01Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "diffHunk": "@@ -14,3 +14,5 @@ class ApolloHttpException(\n     message: String,\n     cause: Throwable? = null\n ) : ApolloException(message = message, cause = cause)\n+\n+class BearerTokenException(message: String, cause: Throwable? = null, val token: String): ApolloException(message = message, cause = cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTAwOQ==", "bodyText": "The reasoning was to keep the inheritance tree relatively flat. Also now that ApolloException is a sealed class, inheriting from sealed class wouldn't be working.\nIf the user wants statusCode and headers, they are still readable in BearerTokenException.cause\nPS: I prefixed with Apollo: ApolloBearerTokenException to make it consistent with the other classes above.", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430719009", "createdAt": "2020-05-26T21:30:13Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "diffHunk": "@@ -14,3 +14,5 @@ class ApolloHttpException(\n     message: String,\n     cause: Throwable? = null\n ) : ApolloException(message = message, cause = cause)\n+\n+class BearerTokenException(message: String, cause: Throwable? = null, val token: String): ApolloException(message = message, cause = cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1Nzc1OQ==", "bodyText": "Sounds good. Maybe the type of cause can be the concrete type rather than Throwable.", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r431657759", "createdAt": "2020-05-28T08:11:48Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "diffHunk": "@@ -14,3 +14,5 @@ class ApolloHttpException(\n     message: String,\n     cause: Throwable? = null\n ) : ApolloException(message = message, cause = cause)\n+\n+class BearerTokenException(message: String, cause: Throwable? = null, val token: String): ApolloException(message = message, cause = cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1ODE3Ng==", "bodyText": "But tbh, I'm not sure if that's even necessary since this is not going to be used directly, right?", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r431658176", "createdAt": "2020-05-28T08:12:28Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "diffHunk": "@@ -14,3 +14,5 @@ class ApolloHttpException(\n     message: String,\n     cause: Throwable? = null\n ) : ApolloException(message = message, cause = cause)\n+\n+class BearerTokenException(message: String, cause: Throwable? = null, val token: String): ApolloException(message = message, cause = cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjcwODY0OnYy", "diffSide": "RIGHT", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/TokenProvider.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MTowOFrOGav3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTozMTozNlrOGaxCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDM0NQ==", "bodyText": "I wonder how much we should follow OAuth standards here? I was thinking about refreshToken for example. That is usually used for getting a new token in such scenario.", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430700345", "createdAt": "2020-05-26T20:51:08Z", "author": {"login": "tasomaniac"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/TokenProvider.kt", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.apollographql.apollo.interceptor\n+\n+interface TokenProvider {\n+  suspend fun currentToken(): String\n+  suspend fun renewToken(previousToken: String): String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTYxMQ==", "bodyText": "Renamed. Also, that aligns perfectly with currentToken \ud83d\udc4c", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430719611", "createdAt": "2020-05-26T21:31:36Z", "author": {"login": "martinbonnin"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/TokenProvider.kt", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.apollographql.apollo.interceptor\n+\n+interface TokenProvider {\n+  suspend fun currentToken(): String\n+  suspend fun renewToken(previousToken: String): String", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDM0NQ=="}, "originalCommit": {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3089, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}