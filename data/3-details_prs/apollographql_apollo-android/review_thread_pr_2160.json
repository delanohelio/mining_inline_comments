{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODIzNTQ0", "number": 2160, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0ODoxNFrODxu79A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMzoxMzoyOFrODx5d7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc1ODI4OnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0ODoxNFrOGFXwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowMTozNVrOGFYS-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NTIwMg==", "bodyText": "Do we need the native-mt version, I think I read somewhere that ktor might not be compatible with it ?", "url": "https://github.com/apollographql/apollo-android/pull/2160#discussion_r408285202", "createdAt": "2020-04-14T16:48:14Z", "author": {"login": "martinbonnin"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -11,7 +11,7 @@ def versions = [\n     jetbrainsAnnotations  : '13.0',\n     junit                 : '4.12',\n     kotlin                : '1.3.71',\n-    kotlinCoroutines      : '1.3.1',\n+    kotlinCoroutines      : '1.3.5-native-mt',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ab5aefb95bb12b43b303d47d4552f8161bd58b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NDEzOA==", "bodyText": "Just a copy paste. It might be the reason why iOS sample does not return results. Will try without\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                kotlinCoroutines      : '1.3.5-native-mt',\n          \n          \n            \n                kotlinCoroutines      : '1.3.5',", "url": "https://github.com/apollographql/apollo-android/pull/2160#discussion_r408294138", "createdAt": "2020-04-14T17:01:35Z", "author": {"login": "tasomaniac"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -11,7 +11,7 @@ def versions = [\n     jetbrainsAnnotations  : '13.0',\n     junit                 : '4.12',\n     kotlin                : '1.3.71',\n-    kotlinCoroutines      : '1.3.1',\n+    kotlinCoroutines      : '1.3.5-native-mt',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NTIwMg=="}, "originalCommit": {"oid": "66ab5aefb95bb12b43b303d47d4552f8161bd58b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQ4MzY0OnYy", "diffSide": "RIGHT", "path": "samples/multiplatform/kmp-lib-sample/src/iosMain/kotlin/com/apollographql/apollo/kmpsample/data/ApolloCoroutinesService.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMzoxMzoyOFrOGFoRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowNjowM1rOGFscPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1NTk0Mw==", "bodyText": "as far as I remember KN still doesn't support multiple threaded coroutines. Means you can't offload network execution to background thread using coroutines. Coroutines work only on main thread.\nBut what we can do is similar to Ktor and how we did at Shopify.\n\nWrap  network execution into suspendCancellableCoroutine\nBefore network execution create strong stable reference for passed continuation and pointer (via val continuationRef = StableRef.create(continuation).asCPointer())\nExecute network and parse response in the background via regular NSURLSession\nSwitch back to main thread, and restore reference to continuation (asStableRef<CancellableContinuation<>>)\nresume continuation.\n\nIf you want I can extract network executor that we have and add to this PR.", "url": "https://github.com/apollographql/apollo-android/pull/2160#discussion_r408555943", "createdAt": "2020-04-15T03:13:28Z", "author": {"login": "sav007"}, "path": "samples/multiplatform/kmp-lib-sample/src/iosMain/kotlin/com/apollographql/apollo/kmpsample/data/ApolloCoroutinesService.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.apollographql.apollo.kmpsample.data\n+\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.kmpsample.GithubRepositoriesQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryCommitsQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryDetailQuery\n+import okio.Buffer\n+import okio.toByteString\n+import platform.Foundation.NSMutableURLRequest\n+import platform.Foundation.NSString\n+import platform.Foundation.NSURL\n+import platform.Foundation.NSURLConnection\n+import platform.Foundation.NSUTF8StringEncoding\n+import platform.Foundation.create\n+import platform.Foundation.dataUsingEncoding\n+import platform.Foundation.sendSynchronousRequest\n+import platform.Foundation.setHTTPBody\n+import platform.Foundation.setHTTPMethod\n+import platform.Foundation.setValue\n+import kotlin.coroutines.suspendCoroutine\n+\n+actual class ApolloCoroutinesService {\n+\n+  private val url = NSURL(string = BASE_URL)\n+\n+  actual suspend fun fetchRepositories(query: GithubRepositoriesQuery): Response<GithubRepositoriesQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  actual suspend fun fetchRepositoryDetail(query: GithubRepositoryDetailQuery): Response<GithubRepositoryDetailQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  actual suspend fun fetchCommits(query: GithubRepositoryCommitsQuery): Response<GithubRepositoryCommitsQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  private fun <D : Operation.Data, T, V : Operation.Variables> doRequest(query: Operation<D, T, V>): Response<T> {\n+    val request = createRequest(query)\n+    val response = NSURLConnection.sendSynchronousRequest(request, null, null)\n+    return query.parse(Buffer().write(response!!.toByteString()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249d20a3328aba6be440031820374b182fbd2dbd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDE5MA==", "bodyText": "That would definitely be welcome.  This was me trying to learn and implement at the same time \ud83d\ude0a", "url": "https://github.com/apollographql/apollo-android/pull/2160#discussion_r408624190", "createdAt": "2020-04-15T07:06:03Z", "author": {"login": "tasomaniac"}, "path": "samples/multiplatform/kmp-lib-sample/src/iosMain/kotlin/com/apollographql/apollo/kmpsample/data/ApolloCoroutinesService.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.apollographql.apollo.kmpsample.data\n+\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.kmpsample.GithubRepositoriesQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryCommitsQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryDetailQuery\n+import okio.Buffer\n+import okio.toByteString\n+import platform.Foundation.NSMutableURLRequest\n+import platform.Foundation.NSString\n+import platform.Foundation.NSURL\n+import platform.Foundation.NSURLConnection\n+import platform.Foundation.NSUTF8StringEncoding\n+import platform.Foundation.create\n+import platform.Foundation.dataUsingEncoding\n+import platform.Foundation.sendSynchronousRequest\n+import platform.Foundation.setHTTPBody\n+import platform.Foundation.setHTTPMethod\n+import platform.Foundation.setValue\n+import kotlin.coroutines.suspendCoroutine\n+\n+actual class ApolloCoroutinesService {\n+\n+  private val url = NSURL(string = BASE_URL)\n+\n+  actual suspend fun fetchRepositories(query: GithubRepositoriesQuery): Response<GithubRepositoriesQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  actual suspend fun fetchRepositoryDetail(query: GithubRepositoryDetailQuery): Response<GithubRepositoryDetailQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  actual suspend fun fetchCommits(query: GithubRepositoryCommitsQuery): Response<GithubRepositoryCommitsQuery.Data> =\n+      suspendCoroutine {\n+        doRequest(query)\n+      }\n+\n+  private fun <D : Operation.Data, T, V : Operation.Variables> doRequest(query: Operation<D, T, V>): Response<T> {\n+    val request = createRequest(query)\n+    val response = NSURLConnection.sendSynchronousRequest(request, null, null)\n+    return query.parse(Buffer().write(response!!.toByteString()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1NTk0Mw=="}, "originalCommit": {"oid": "249d20a3328aba6be440031820374b182fbd2dbd"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3188, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}