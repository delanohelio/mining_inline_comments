{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDUxNzA4", "number": 2674, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjowNlrOEw9CYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo0NjowMVrOEw9Nvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY3MTM3OnYy", "diffSide": "RIGHT", "path": "benchmark/addTypename.main.kts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTozNjowNlrOHm0wRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowMjoyNlrOHm2wrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MjI2MQ==", "bodyText": "what is this file? Is it meant to be committed - it doesn't seem to be used in the actual benchmark from what I can tell?", "url": "https://github.com/apollographql/apollo-android/pull/2674#discussion_r510472261", "createdAt": "2020-10-22T21:36:06Z", "author": {"login": "BenSchwab"}, "path": "benchmark/addTypename.main.kts", "diffHunk": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env kotlin\n+@file:DependsOn(\"com.squareup.okio:okio:2.9.0\")\n+@file:DependsOn(\"com.squareup.moshi:moshi:1.11.0\")\n+\n+import com.squareup.moshi.Moshi\n+import okio.buffer\n+import okio.sink\n+import okio.source\n+import java.io.File\n+\n+val adapter = Moshi.Builder().build().adapter(Any::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8e5e02f98a75561671e1d4f1c8f9f0ca39d2d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTEzMg==", "bodyText": "Good catch! It was a one-time script to add the __typename field to the ZacSweers's largesample.json since GraphQL requires __typename. It's actually one area where we might gain a tiny bit of performance if we wanted to save this parsing for fields that are not polymorphic.\nIn all cases, this file isn't needed anymore, I removed it.", "url": "https://github.com/apollographql/apollo-android/pull/2674#discussion_r510505132", "createdAt": "2020-10-22T23:02:26Z", "author": {"login": "martinbonnin"}, "path": "benchmark/addTypename.main.kts", "diffHunk": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env kotlin\n+@file:DependsOn(\"com.squareup.okio:okio:2.9.0\")\n+@file:DependsOn(\"com.squareup.moshi:moshi:1.11.0\")\n+\n+import com.squareup.moshi.Moshi\n+import okio.buffer\n+import okio.sink\n+import okio.source\n+import java.io.File\n+\n+val adapter = Moshi.Builder().build().adapter(Any::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MjI2MQ=="}, "originalCommit": {"oid": "c0e8e5e02f98a75561671e1d4f1c8f9f0ca39d2d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzcwMDQ2OnYy", "diffSide": "RIGHT", "path": "benchmark/src/androidTest/java/com/apollographql/apollo/benchmark/Benchmark.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo0NjowMVrOHm1B0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowMjo0OVrOHm2xGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3Njc1Mg==", "bodyText": "I would love to also see a benchmark that goes the actual apollo client with response normalization enabled", "url": "https://github.com/apollographql/apollo-android/pull/2674#discussion_r510476752", "createdAt": "2020-10-22T21:46:01Z", "author": {"login": "BenSchwab"}, "path": "benchmark/src/androidTest/java/com/apollographql/apollo/benchmark/Benchmark.kt", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.apollographql.apollo.benchmark\n+\n+import androidx.benchmark.junit4.BenchmarkRule\n+import androidx.benchmark.junit4.measureRepeated\n+import androidx.test.platform.app.InstrumentationRegistry\n+import com.apollographql.apollo.benchmark.moshi.Query\n+import com.apollographql.apollo.benchmark.test.R\n+import com.squareup.moshi.Moshi\n+import okio.buffer\n+import okio.source\n+import org.junit.Rule\n+import org.junit.Test\n+\n+class Benchmark {\n+  @get:Rule\n+  val benchmarkRule = BenchmarkRule()\n+\n+  private val operation = GetResponseQuery()\n+\n+  private val moshiAdapter = Moshi.Builder().build().adapter(Query::class.java)\n+\n+  private fun bufferedSource() = InstrumentationRegistry.getInstrumentation().context.resources.openRawResource(R.raw.largesample)\n+      .source()\n+      .buffer()\n+\n+  @Test\n+  fun apollo() = benchmarkRule.measureRepeated {\n+    val bufferedSource = runWithTimingDisabled {\n+      bufferedSource()\n+    }\n+\n+    operation.parse(bufferedSource)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e8e5e02f98a75561671e1d4f1c8f9f0ca39d2d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTI0Mg==", "bodyText": "\ud83d\udc4d Good idea, I'll try to think of something", "url": "https://github.com/apollographql/apollo-android/pull/2674#discussion_r510505242", "createdAt": "2020-10-22T23:02:49Z", "author": {"login": "martinbonnin"}, "path": "benchmark/src/androidTest/java/com/apollographql/apollo/benchmark/Benchmark.kt", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.apollographql.apollo.benchmark\n+\n+import androidx.benchmark.junit4.BenchmarkRule\n+import androidx.benchmark.junit4.measureRepeated\n+import androidx.test.platform.app.InstrumentationRegistry\n+import com.apollographql.apollo.benchmark.moshi.Query\n+import com.apollographql.apollo.benchmark.test.R\n+import com.squareup.moshi.Moshi\n+import okio.buffer\n+import okio.source\n+import org.junit.Rule\n+import org.junit.Test\n+\n+class Benchmark {\n+  @get:Rule\n+  val benchmarkRule = BenchmarkRule()\n+\n+  private val operation = GetResponseQuery()\n+\n+  private val moshiAdapter = Moshi.Builder().build().adapter(Query::class.java)\n+\n+  private fun bufferedSource() = InstrumentationRegistry.getInstrumentation().context.resources.openRawResource(R.raw.largesample)\n+      .source()\n+      .buffer()\n+\n+  @Test\n+  fun apollo() = benchmarkRule.measureRepeated {\n+    val bufferedSource = runWithTimingDisabled {\n+      bufferedSource()\n+    }\n+\n+    operation.parse(bufferedSource)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3Njc1Mg=="}, "originalCommit": {"oid": "c0e8e5e02f98a75561671e1d4f1c8f9f0ca39d2d"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2948, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}