{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjY4OTc2", "number": 1914, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowMTo0MFrODYoAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowMTo0MFrODYoAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTQ3OTY5OnYy", "diffSide": "RIGHT", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowMTo0MFrOFel3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowMTo0MFrOFel3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMTk0NQ==", "bodyText": "Small: I know the whole project is still called Apollo Android but it would be better to avoid Android in docs if it is not Android specific. What about just saying Apollo? Or you can go passive and say \"all generated classes will end with ...\"", "url": "https://github.com/apollographql/apollo-android/pull/1914#discussion_r367621945", "createdAt": "2020-01-16T20:01:40Z", "author": {"login": "tasomaniac"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt", "diffHunk": "@@ -15,75 +15,105 @@ import org.gradle.api.provider.Provider\n  */\n interface CompilerParams {\n   /**\n-   * Whether to generate java (default) or kotlin models\n+   * Whether to generate Java or Kotlin models\n+   *\n+   * Default value: false\n    */\n   val generateKotlinModels: Property<Boolean>\n \n   /**\n-   * Whether to generate the operation output json. The json contains information such as\n-   * operation id, name and complete source sent to the server. This can be useful if you need to upload\n+   * Whether to generate OperationOutput.json. OperationOutput.json contains information such as\n+   * operation id, name and complete source sent to the server. This can be used to upload\n    * a query's exact content to a server that doesn't support automatic persisted queries.\n    *\n    * The operation output is written in [CompilationUnit.operationOutputFile]\n+   *\n+   * Default value: false\n    */\n   val generateOperationOutput: Property<Boolean>\n \n \n   /**\n    * For custom scalar types like Date, map from the GraphQL type to the jvm/kotlin type.\n    *\n-   * empty by default.\n+   * Default value: the empty map\n    */\n   val customTypeMapping: MapProperty<String, String>\n \n   /**\n-   * For custom persisted query Ids.\n+   * By default, Apollo uses `Sha256` hashing algorithm to generate an ID for the query.\n+   * To provide a custom ID generation logic, pass an `instance` that implements the [OperationIdGenerator]. How the ID is generated is\n+   * indifferent to the compiler. It can be an hashing algorithm or generated by a backend.\n+   *\n+   * Example Md5 hash generator:\n+   * ```groovy\n+   * import com.apollographql.apollo.compiler.OperationIdGenerator\n+   *\n+   * apollo {\n+   *   operationIdGenerator = new OperationIdGenerator() {\n+   *     String apply(String operationDocument, String operationFilepath) {\n+   *       return operationDocument.md5()\n+   *     }\n+   *\n+   *     /**\n+   *      * Use this version override to indicate an update to the implementation.\n+   *      * This invalidates the current cache.\n+   *      */\n+   *     String version = \"v1\"\n+   *   }\n+   * }\n+   * ```\n    *\n-   * If not provided, default hashing algorithm (sha256) will be used\n+   * Default value: [OperationIdGenerator.Sha256]\n    */\n   val operationIdGenerator: Property<OperationIdGenerator>\n \n   /**\n    * The custom types code generate some warnings that might make the build fail.\n    * suppressRawTypesWarning will add the appropriate SuppressWarning annotation\n    *\n-   * false by default\n+   * Default value: false\n    */\n   val suppressRawTypesWarning: Property<Boolean>\n \n   /**\n-   * Whether to suffix your queries, etc.. with `Query`, etc..\n+   * When true, Apollo-Android will make sure all the generated classes end with 'Query' or 'Mutation'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781edfd7312907df2e863027cab57299973b83dd"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3238, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}