{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDAzNjU3", "number": 2514, "title": "Multi-module support", "bodyText": "See #1973\nHow it works:\n\nThe parent module has a flag to enable generation of additional metadata for each compilation unit:\n\n// parent/build.gradle.kts\napollo {\n  generateApolloMetadata.set(true)\n}\nwill generate:\nmetadata.json that contains:\n-the introspection schema\n-the IR fragments after parsing\n-the names of generated input/enum/scalar types (see more below)\n-various configuration options used by the compilationUnit: schemaPackageName,  generateKotlinModels, etc...\n\n\nThe child module defines a dependency on the parent module:\n\ndependencies {\n  implementation(\"com.apollographql.apollo:apollo-api:2.2.3\")\n  // ...\n  apollo(project(\":parent\"))\n}\n\nThe child module will use the parent schema (an error is thrown if the child also defines a schema) and inject the parent fragments in CodeGenerationIR before generating code.\n\nHandling different types\n\nOperations and Fragments are always generated in the module where they are defined and can only be consumed by downstream modules.\n\nFor input/scalar/enum types, one solution is to generate everything in the root module since we don't know in advance which ones are going to be used by downstream modules. Unfortunately, that scales poorly for big schemas. Instead, the following is proposed:\n\nKeep this behaviour the default in the hope that it'll work for most schemas (Github for an exemple is ~280 input types and compilation time is acceptable)\nFor big modules, users can opt-in alwaysGenerateTypesMatching = emptyList(). In this case, the input/enums will be generated in the modules where they are used. If two sibling modules use the same type, an error is raised and users have to manually generated the type in the common upstream module:\n\napollo {\n  // Declare the types that are used in several modules so they will be generated in this module\n  alwaysGenerateTypesMatching(\"InputType1\", \"Enum1\", ...)\n  // Can accept regexes\n  alwaysGenerateTypesMatching(\".*Input\")\n  // By default, it will include everything so smaller schemas will not have any configuration to do\n  // alwaysGenerateTypesMatching(\".*\")\n}\nQuestions\n\nWhat options should be inherited?  generateKotlinModels, customTypeMappings, rootPackageName are inherited.\nThe current validation errors read the fragments files to show a preview of where the error is happening. That won't work with this approach unless we also add the graphql files in the metadata which feels a bit overkill. An exemple is if an inherited fragment uses a variable that is not defined in a child query. How to handle this? The compiler now takes the rootProjectDir as parameter so as long as all compilations are done in the same root project, this should work.\nShould we handle publication? Is there a use case to ship the metadata as a maven artifact? out of scope for now\nI haven't looked too much at how this will behave with transitive dependencies. I feel like as long as each module only contributes it's own fragments, it should be ok but not sure... There is a test for transitive dependencies there: \n  \n    \n      apollo-android/apollo-gradle-plugin/src/test/kotlin/com/apollographql/apollo/gradle/test/MultiModulesTests.kt\n    \n    \n         Line 26\n      in\n      0757f88\n    \n    \n    \n    \n\n        \n          \n           val result = TestUtils.executeTask(\":leaf:assemble\", dir) \n        \n    \n  \n\n\nThe root module, containing the schema currently generates all possible types, which can be a lot. Is this acceptable? If not what can we make about it. That was not acceptable, hence generateAllTypesMatching.\nError handling, what error is happening when when the same input type is defined in two sibling modules There is a test there: \n  \n    \n      apollo-android/apollo-gradle-plugin/src/test/kotlin/com/apollographql/apollo/gradle/test/MultiModulesTests.kt\n    \n    \n         Line 45\n      in\n      0757f88\n    \n    \n    \n    \n\n        \n          \n           TestUtils.withTestProject(\"multi-modules-duplicates\") { dir ->", "createdAt": "2020-08-10T10:05:32Z", "url": "https://github.com/apollographql/apollo-android/pull/2514", "merged": true, "mergeCommit": {"oid": "d3cb1f89adfd5408c98f742df465d8ca02732868"}, "closed": true, "closedAt": "2020-09-10T12:30:51Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9ka1GgBqjM2Mzk0NDMwNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHfAuKgH2gAyNDY1NDAzNjU3OmI5OWM2OWRiMzVjN2QzNjg1OGUzOTg3Mjg5OWE4MzAxNDJhZGE5MGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7995bbc1c5faeab839d5b153c89161042b0acebc", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/7995bbc1c5faeab839d5b153c89161042b0acebc", "committedDate": "2020-08-10T10:06:15Z", "message": "unbreak tests"}, "afterCommit": {"oid": "6d31664e33567d710f1c5fcb60e15cee509cdfe9", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/6d31664e33567d710f1c5fcb60e15cee509cdfe9", "committedDate": "2020-08-10T16:00:13Z", "message": "unbreak tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjM0MzY2", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-464634366", "createdAt": "2020-08-10T22:37:36Z", "commit": {"oid": "b3b3ec89b02989a46e39689fae45b450a0324f24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjozNzozNlrOG-iIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjozNzozNlrOG-iIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNDAxOA==", "bodyText": "Nit: unneeded space", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r468224018", "createdAt": "2020-08-10T22:37:36Z", "author": {"login": "Jawnnypoo"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/Fragment.kt", "diffHunk": "@@ -20,9 +22,9 @@ data class Fragment(\n     val fields: List<Field>,\n     val fragmentRefs: List<FragmentRef>,\n     val inlineFragments: List<InlineFragment>,\n-    val filePath: String,\n+    val filePath: String?, // might be null if coming from another module\n     val sourceLocation: SourceLocation\n-) : CodeGenerator {\n+  ) : CodeGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b3ec89b02989a46e39689fae45b450a0324f24"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3b3ec89b02989a46e39689fae45b450a0324f24", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/b3b3ec89b02989a46e39689fae45b450a0324f24", "committedDate": "2020-08-10T17:43:42Z", "message": "make the schema property lazy again"}, "afterCommit": {"oid": "1aa4e9d9a4205166c9ffa240fd5b020b80142e39", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/1aa4e9d9a4205166c9ffa240fd5b020b80142e39", "committedDate": "2020-08-12T14:21:17Z", "message": "First drop for multi-module support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43bde1ae24fda1b78593487929e13d55529f4616", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/43bde1ae24fda1b78593487929e13d55529f4616", "committedDate": "2020-08-21T19:50:27Z", "message": "update metalava"}, "afterCommit": {"oid": "3a0e42467c20f6b705a39a6c7f0f22235eb52738", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/3a0e42467c20f6b705a39a6c7f0f22235eb52738", "committedDate": "2020-08-27T14:49:53Z", "message": "add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d46b62a65e5b987611ffd657a313dfbe161d37", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/41d46b62a65e5b987611ffd657a313dfbe161d37", "committedDate": "2020-08-27T14:51:14Z", "message": "First drop for multi-module support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c2f030af44c46a7c444a0b24aa6fa83246a1e7", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/f1c2f030af44c46a7c444a0b24aa6fa83246a1e7", "committedDate": "2020-08-27T14:51:16Z", "message": "update metalava"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03954e6929c79f8a3cd3f9dec09642eaee182d72", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/03954e6929c79f8a3cd3f9dec09642eaee182d72", "committedDate": "2020-08-27T14:58:21Z", "message": "add alwaysGenerateTypesMatching and a few unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a2f7aa8b848a475ea595802755e4d814dd0a220", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/8a2f7aa8b848a475ea595802755e4d814dd0a220", "committedDate": "2020-08-27T14:58:23Z", "message": "added some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7605cb7f205b65423c4809bebbc813260c887e9c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/7605cb7f205b65423c4809bebbc813260c887e9c", "committedDate": "2020-08-27T14:58:23Z", "message": "minor tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a11615d0bfb96fe54d1d65e48dc5ce9ef2735cd", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/2a11615d0bfb96fe54d1d65e48dc5ce9ef2735cd", "committedDate": "2020-08-27T14:58:23Z", "message": "update metalava"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "146ee4f272db9246fb8efc04198a278711dfc0dc", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/146ee4f272db9246fb8efc04198a278711dfc0dc", "committedDate": "2020-08-27T14:58:23Z", "message": "stay on Gradle 6.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672948d4171bb70c1630ab8f0dfcc169555e3db2", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/672948d4171bb70c1630ab8f0dfcc169555e3db2", "committedDate": "2020-08-27T14:58:23Z", "message": "add more gradle tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74d53cb640291cb242137bc12219e3226f9d658", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/f74d53cb640291cb242137bc12219e3226f9d658", "committedDate": "2020-08-27T14:58:23Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f43bada2b25b85c19ee73c96b45666a7c1ed6f1c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/f43bada2b25b85c19ee73c96b45666a7c1ed6f1c", "committedDate": "2020-08-27T14:58:23Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "847bd1d09deb5ff503af4bbdc4bc28a3d2040f29", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/847bd1d09deb5ff503af4bbdc4bc28a3d2040f29", "committedDate": "2020-08-27T14:58:23Z", "message": "better place to put the workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30876bf9af5c8b423bd0143d8cd204c7f2b46dfc", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/30876bf9af5c8b423bd0143d8cd204c7f2b46dfc", "committedDate": "2020-08-27T14:58:23Z", "message": "add experimental markers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4261dcb3142b5ece37c5c2d9eb005af77a1b12", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/2e4261dcb3142b5ece37c5c2d9eb005af77a1b12", "committedDate": "2020-08-27T14:58:23Z", "message": "remove some references to zip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa51d5c5f212f9f4093cca5cb382c85920dc3754", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/aa51d5c5f212f9f4093cca5cb382c85920dc3754", "committedDate": "2020-08-27T14:58:23Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eca929bcd1c0b7ff148d3ae0fabea5997d360cd", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/3eca929bcd1c0b7ff148d3ae0fabea5997d360cd", "committedDate": "2020-08-27T14:58:23Z", "message": "add a test for diamond-shaped dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0a857cec15e6477fa9de75661a026659599167", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/8f0a857cec15e6477fa9de75661a026659599167", "committedDate": "2020-08-27T14:58:23Z", "message": "work in progress on a duplicates task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9d2717eb5773c03cf5289fb9de6f8e8046f3a2", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/3d9d2717eb5773c03cf5289fb9de6f8e8046f3a2", "committedDate": "2020-08-27T14:58:23Z", "message": "add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0757f8878f4011146cf3ef88429ecc94c1d4f62c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/0757f8878f4011146cf3ef88429ecc94c1d4f62c", "committedDate": "2020-08-27T15:18:10Z", "message": "fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a0e42467c20f6b705a39a6c7f0f22235eb52738", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/3a0e42467c20f6b705a39a6c7f0f22235eb52738", "committedDate": "2020-08-27T14:49:53Z", "message": "add more tests"}, "afterCommit": {"oid": "0757f8878f4011146cf3ef88429ecc94c1d4f62c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/0757f8878f4011146cf3ef88429ecc94c1d4f62c", "committedDate": "2020-08-27T15:18:10Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661420dd35157682cbb7c412cf4cfbe4e8eea8d4", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/661420dd35157682cbb7c412cf4cfbe4e8eea8d4", "committedDate": "2020-08-27T15:40:53Z", "message": "remove debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/3eca9f5ad6fe53219641bbbbdca1375b064734fc", "committedDate": "2020-08-27T16:25:29Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODg5MjU3", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476889257", "createdAt": "2020-08-27T16:28:08Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyODowOFrOHIYHkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyODowOFrOHIYHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0NTgxMQ==", "bodyText": "There are a lot of changes in this file because I moved some of the IR logic that was in the Gradle plugin here.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478545811", "createdAt": "2020-08-27T16:28:08Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -1,52 +1,174 @@\n package com.apollographql.apollo.compiler\n \n+import com.apollographql.apollo.api.internal.QueryDocumentMinifier\n+import com.apollographql.apollo.compiler.ApolloMetadata.Companion.merge\n import com.apollographql.apollo.compiler.codegen.kotlin.GraphQLKompiler\n import com.apollographql.apollo.compiler.ir.CodeGenerationContext\n import com.apollographql.apollo.compiler.ir.CodeGenerationIR\n+import com.apollographql.apollo.compiler.ir.IRBuilder\n import com.apollographql.apollo.compiler.ir.ScalarType\n-import com.apollographql.apollo.compiler.ir.TypeDeclaration\n-import com.apollographql.apollo.compiler.operationoutput.OperationOutput\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_ENUM\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_INPUT_OBJECT_TYPE\n+import com.apollographql.apollo.compiler.operationoutput.OperationDescriptor\n+import com.apollographql.apollo.compiler.operationoutput.toJson\n+import com.apollographql.apollo.compiler.parser.graphql.GraphQLDocumentParser\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.toIntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.wrap\n+import com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema\n+import com.apollographql.apollo.compiler.parser.sdl.toIntrospectionSchema\n import com.squareup.javapoet.JavaFile\n+import com.squareup.kotlinpoet.asClassName\n import java.io.File\n \n class GraphQLCompiler {\n   fun write(args: Arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODkxNjgx", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476891681", "createdAt": "2020-08-27T16:31:08Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozMTowOFrOHIYPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozMTowOFrOHIYPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0NzcxOQ==", "bodyText": "That's the workaround to not break Gradle build cache and still be able to read back into the file to display nice parse errors.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478547719", "createdAt": "2020-08-27T16:31:08Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -1,52 +1,174 @@\n package com.apollographql.apollo.compiler\n \n+import com.apollographql.apollo.api.internal.QueryDocumentMinifier\n+import com.apollographql.apollo.compiler.ApolloMetadata.Companion.merge\n import com.apollographql.apollo.compiler.codegen.kotlin.GraphQLKompiler\n import com.apollographql.apollo.compiler.ir.CodeGenerationContext\n import com.apollographql.apollo.compiler.ir.CodeGenerationIR\n+import com.apollographql.apollo.compiler.ir.IRBuilder\n import com.apollographql.apollo.compiler.ir.ScalarType\n-import com.apollographql.apollo.compiler.ir.TypeDeclaration\n-import com.apollographql.apollo.compiler.operationoutput.OperationOutput\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_ENUM\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_INPUT_OBJECT_TYPE\n+import com.apollographql.apollo.compiler.operationoutput.OperationDescriptor\n+import com.apollographql.apollo.compiler.operationoutput.toJson\n+import com.apollographql.apollo.compiler.parser.graphql.GraphQLDocumentParser\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.toIntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.wrap\n+import com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema\n+import com.apollographql.apollo.compiler.parser.sdl.toIntrospectionSchema\n import com.squareup.javapoet.JavaFile\n+import com.squareup.kotlinpoet.asClassName\n import java.io.File\n \n class GraphQLCompiler {\n   fun write(args: Arguments) {\n-    val ir = args.ir\n-    val customTypeMap = args.customTypeMap.supportedTypeMap(ir.typesUsed)\n-    val context = CodeGenerationContext(\n-        reservedTypeNames = emptyList(),\n-        typeDeclarations = ir.typesUsed,\n-        customTypeMap = customTypeMap,\n-        operationOutput = args.operationOutput,\n-        nullableValueType = args.nullableValueType,\n-        ir = ir,\n-        useSemanticNaming = args.useSemanticNaming,\n-        generateModelBuilder = args.generateModelBuilder,\n-        useJavaBeansSemanticNaming = args.useJavaBeansSemanticNaming,\n-        suppressRawTypesWarning = args.suppressRawTypesWarning,\n-        generateVisitorForPolymorphicDatatypes = args.generateVisitorForPolymorphicDatatypes\n+    args.outputDir.deleteRecursively()\n+    args.outputDir.mkdirs()\n+\n+    val roots = Roots(args.rootFolders)\n+    val metadata = collectMetadata(args.metadata, args.rootProjectDir)\n+\n+    val (introspectionSchema, schemaPackageName) = getSchemaInfo(roots, args.rootPackageName, args.schemaFile, metadata)\n+\n+    val generateKotlinModels = metadata?.generateKotlinModels ?: args.generateKotlinModels\n+    val userCustomTypesMap = metadata?.customTypesMap ?: args.customTypeMap\n+\n+    val packageNameProvider = DefaultPackageNameProvider(\n+        roots = roots,\n+        rootPackageName = args.rootPackageName\n     )\n \n-    if (args.generateKotlinModels) {\n+    val files = args.graphqlFiles\n+    checkDuplicateFiles(roots, files)\n+\n+    val parseResult = GraphQLDocumentParser(\n+        schema = introspectionSchema,\n+        packageNameProvider = packageNameProvider\n+    ).parse(files)\n+\n+    val ir = IRBuilder(\n+        schema = introspectionSchema,\n+        schemaPackageName = schemaPackageName,\n+        incomingMetadata = metadata,\n+        alwaysGenerateTypesMatching = args.alwaysGenerateTypesMatching,\n+        generateMetadata = args.generateMetadata\n+    ).build(parseResult)\n+\n+    val operationOutput = ir.operations.map {\n+      OperationDescriptor(\n+          name = it.operationName,\n+          packageName = it.packageName,\n+          filePath = it.filePath,\n+          source = QueryDocumentMinifier.minify(it.sourceWithFragments)\n+      )\n+    }.let {\n+      args.operationOutputGenerator.generate(it)\n+    }\n+\n+    check(operationOutput.size == ir.operations.size) {\n+      \"\"\"The number of operation IDs (${operationOutput.size}) should match the number of operations (${ir.operations.size}).\n+        |Check that all your IDs are unique.\n+      \"\"\".trimMargin()\n+    }\n+\n+    if (args.operationOutputFile != null) {\n+      args.operationOutputFile.writeText(operationOutput.toJson(\"  \"))\n+    }\n+\n+    val customTypeMap = (introspectionSchema.types.values.filter {\n+      it is IntrospectionSchema.Type.Scalar && ScalarType.forName(it.name) == null\n+    }.map { it.name } + ScalarType.ID.name)\n+        .supportedTypeMap(userCustomTypesMap, generateKotlinModels)\n+\n+    if (generateKotlinModels) {\n       GraphQLKompiler(\n           ir = ir,\n-          customTypeMap = args.customTypeMap,\n-          operationOutput = args.operationOutput,\n+          customTypeMap = customTypeMap,\n+          operationOutput = operationOutput,\n           useSemanticNaming = args.useSemanticNaming,\n           generateAsInternal = args.generateAsInternal,\n           kotlinMultiPlatformProject = args.kotlinMultiPlatformProject,\n           enumAsSealedClassPatternFilters = args.enumAsSealedClassPatternFilters.map { it.toRegex() }\n       ).write(args.outputDir)\n     } else {\n+      val context = CodeGenerationContext(\n+          reservedTypeNames = emptyList(),\n+          typeDeclarations = ir.typeDeclarations,\n+          customTypeMap = customTypeMap,\n+          operationOutput = operationOutput,\n+          nullableValueType = args.nullableValueType,\n+          ir = ir,\n+          useSemanticNaming = args.useSemanticNaming,\n+          generateModelBuilder = args.generateModelBuilder,\n+          useJavaBeansSemanticNaming = args.useJavaBeansSemanticNaming,\n+          suppressRawTypesWarning = args.suppressRawTypesWarning,\n+          generateVisitorForPolymorphicDatatypes = args.generateVisitorForPolymorphicDatatypes\n+      )\n+\n       ir.writeJavaFiles(\n           context = context,\n           outputDir = args.outputDir\n       )\n     }\n+\n+    args.metadataOutputFile.parentFile.mkdirs()\n+    if (args.generateMetadata) {\n+      val outgoingMetadata = ApolloMetadata(\n+          schema = if (metadata == null) introspectionSchema.wrap() else null,\n+          schemaPackageName = schemaPackageName,\n+          moduleName = args.moduleName,\n+          types = ir.enumsToGenerate + ir.inputObjectsToGenerate,\n+          fragments = ir.fragments.filter { ir.fragmentsToGenerate.contains(it.fragmentName) },\n+          generateKotlinModels = generateKotlinModels,\n+          customTypesMap = args.customTypeMap,\n+          pluginVersion = com.apollographql.apollo.compiler.VERSION\n+      ).let {\n+        if (args.rootProjectDir != null) {\n+          it.withRelativeFragments(args.rootProjectDir)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODk1MDc0", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476895074", "createdAt": "2020-08-27T16:35:34Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNTozNFrOHIYZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNTozNFrOHIYZYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MDM3MA==", "bodyText": "The code around custom scalars is more complex now, I'll most likely try to refactor in a subsequent pull request. customTypeMap here contains all the scalar types from the schema and their matching className either defined by the user or by us (for ID and Any).", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478550370", "createdAt": "2020-08-27T16:35:34Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -1,52 +1,174 @@\n package com.apollographql.apollo.compiler\n \n+import com.apollographql.apollo.api.internal.QueryDocumentMinifier\n+import com.apollographql.apollo.compiler.ApolloMetadata.Companion.merge\n import com.apollographql.apollo.compiler.codegen.kotlin.GraphQLKompiler\n import com.apollographql.apollo.compiler.ir.CodeGenerationContext\n import com.apollographql.apollo.compiler.ir.CodeGenerationIR\n+import com.apollographql.apollo.compiler.ir.IRBuilder\n import com.apollographql.apollo.compiler.ir.ScalarType\n-import com.apollographql.apollo.compiler.ir.TypeDeclaration\n-import com.apollographql.apollo.compiler.operationoutput.OperationOutput\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_ENUM\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_INPUT_OBJECT_TYPE\n+import com.apollographql.apollo.compiler.operationoutput.OperationDescriptor\n+import com.apollographql.apollo.compiler.operationoutput.toJson\n+import com.apollographql.apollo.compiler.parser.graphql.GraphQLDocumentParser\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.toIntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema.Companion.wrap\n+import com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema\n+import com.apollographql.apollo.compiler.parser.sdl.toIntrospectionSchema\n import com.squareup.javapoet.JavaFile\n+import com.squareup.kotlinpoet.asClassName\n import java.io.File\n \n class GraphQLCompiler {\n   fun write(args: Arguments) {\n-    val ir = args.ir\n-    val customTypeMap = args.customTypeMap.supportedTypeMap(ir.typesUsed)\n-    val context = CodeGenerationContext(\n-        reservedTypeNames = emptyList(),\n-        typeDeclarations = ir.typesUsed,\n-        customTypeMap = customTypeMap,\n-        operationOutput = args.operationOutput,\n-        nullableValueType = args.nullableValueType,\n-        ir = ir,\n-        useSemanticNaming = args.useSemanticNaming,\n-        generateModelBuilder = args.generateModelBuilder,\n-        useJavaBeansSemanticNaming = args.useJavaBeansSemanticNaming,\n-        suppressRawTypesWarning = args.suppressRawTypesWarning,\n-        generateVisitorForPolymorphicDatatypes = args.generateVisitorForPolymorphicDatatypes\n+    args.outputDir.deleteRecursively()\n+    args.outputDir.mkdirs()\n+\n+    val roots = Roots(args.rootFolders)\n+    val metadata = collectMetadata(args.metadata, args.rootProjectDir)\n+\n+    val (introspectionSchema, schemaPackageName) = getSchemaInfo(roots, args.rootPackageName, args.schemaFile, metadata)\n+\n+    val generateKotlinModels = metadata?.generateKotlinModels ?: args.generateKotlinModels\n+    val userCustomTypesMap = metadata?.customTypesMap ?: args.customTypeMap\n+\n+    val packageNameProvider = DefaultPackageNameProvider(\n+        roots = roots,\n+        rootPackageName = args.rootPackageName\n     )\n \n-    if (args.generateKotlinModels) {\n+    val files = args.graphqlFiles\n+    checkDuplicateFiles(roots, files)\n+\n+    val parseResult = GraphQLDocumentParser(\n+        schema = introspectionSchema,\n+        packageNameProvider = packageNameProvider\n+    ).parse(files)\n+\n+    val ir = IRBuilder(\n+        schema = introspectionSchema,\n+        schemaPackageName = schemaPackageName,\n+        incomingMetadata = metadata,\n+        alwaysGenerateTypesMatching = args.alwaysGenerateTypesMatching,\n+        generateMetadata = args.generateMetadata\n+    ).build(parseResult)\n+\n+    val operationOutput = ir.operations.map {\n+      OperationDescriptor(\n+          name = it.operationName,\n+          packageName = it.packageName,\n+          filePath = it.filePath,\n+          source = QueryDocumentMinifier.minify(it.sourceWithFragments)\n+      )\n+    }.let {\n+      args.operationOutputGenerator.generate(it)\n+    }\n+\n+    check(operationOutput.size == ir.operations.size) {\n+      \"\"\"The number of operation IDs (${operationOutput.size}) should match the number of operations (${ir.operations.size}).\n+        |Check that all your IDs are unique.\n+      \"\"\".trimMargin()\n+    }\n+\n+    if (args.operationOutputFile != null) {\n+      args.operationOutputFile.writeText(operationOutput.toJson(\"  \"))\n+    }\n+\n+    val customTypeMap = (introspectionSchema.types.values.filter {\n+      it is IntrospectionSchema.Type.Scalar && ScalarType.forName(it.name) == null\n+    }.map { it.name } + ScalarType.ID.name)\n+        .supportedTypeMap(userCustomTypesMap, generateKotlinModels)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODk2MjE0", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476896214", "createdAt": "2020-08-27T16:37:05Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNzowNVrOHIYdCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNzowNVrOHIYdCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MTMwNA==", "bodyText": "That's where we tell the compiler to only generate a subset of input objects", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478551304", "createdAt": "2020-08-27T16:37:05Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/builder/SchemaBuilder.kt", "diffHunk": "@@ -19,16 +18,26 @@ internal fun CodeGenerationIR.ast(\n     useSemanticNaming: Boolean,\n     operationOutput: OperationOutput\n ): Schema {\n-  val enums = typesUsed.filter { it.kind == TypeDeclaration.KIND_ENUM }.map { it.ast() }\n-  val inputTypes = typesUsed.filter { it.kind == TypeDeclaration.KIND_INPUT_OBJECT_TYPE }.map {\n+  val enums = typeDeclarations.filter {\n+    it.kind == TypeDeclaration.KIND_ENUM\n+        // && enumsToGenerate.contains(it.name) // filtering is done later as the rest of the codegen needs all enums\n+  }.map {\n+    it.ast()\n+  }\n+  val inputTypes = typeDeclarations.filter {\n+    it.kind == TypeDeclaration.KIND_INPUT_OBJECT_TYPE\n+        && inputObjectsToGenerate.contains(it.name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODk2NzQ4", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476896748", "createdAt": "2020-08-27T16:37:44Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNzo0NFrOHIYefg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozNzo0NFrOHIYefg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MTY3OA==", "bodyText": "same for fragments (all fragments are still needed as input to validate arguments, type conditions, etc...)", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478551678", "createdAt": "2020-08-27T16:37:44Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ast/builder/SchemaBuilder.kt", "diffHunk": "@@ -19,16 +18,26 @@ internal fun CodeGenerationIR.ast(\n     useSemanticNaming: Boolean,\n     operationOutput: OperationOutput\n ): Schema {\n-  val enums = typesUsed.filter { it.kind == TypeDeclaration.KIND_ENUM }.map { it.ast() }\n-  val inputTypes = typesUsed.filter { it.kind == TypeDeclaration.KIND_INPUT_OBJECT_TYPE }.map {\n+  val enums = typeDeclarations.filter {\n+    it.kind == TypeDeclaration.KIND_ENUM\n+        // && enumsToGenerate.contains(it.name) // filtering is done later as the rest of the codegen needs all enums\n+  }.map {\n+    it.ast()\n+  }\n+  val inputTypes = typeDeclarations.filter {\n+    it.kind == TypeDeclaration.KIND_INPUT_OBJECT_TYPE\n+        && inputObjectsToGenerate.contains(it.name)\n+  }.map {\n     it.ast(\n         enums = enums,\n         customTypeMap = customTypeMap,\n         typesPackageName = typesPackageName\n     )\n   }\n   val irFragments = fragments.associateBy { it.fragmentName }\n-  val fragments = fragments.map {\n+  val fragments = fragments.filter {\n+    fragmentsToGenerate.contains(it.fragmentName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODk4MjY4", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476898268", "createdAt": "2020-08-27T16:39:44Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozOTo0NFrOHIYjKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjozOTo0NFrOHIYjKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1Mjg3NA==", "bodyText": "The IR is made serializable (to save the Fragment in the metadata). The serialization is only done if generateMetadata is true so as not to slow down compilation in the general case.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478552874", "createdAt": "2020-08-27T16:39:44Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/Argument.kt", "diffHunk": "@@ -1,5 +1,8 @@\n package com.apollographql.apollo.compiler.ir\n \n+import com.squareup.moshi.JsonClass\n+\n+@JsonClass(generateAdapter = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODk5NjIx", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476899621", "createdAt": "2020-08-27T16:41:27Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0MToyN1rOHIYnPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0MToyN1rOHIYnPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MzkxNw==", "bodyText": "This method decides what types to generate/not generate. The rest of this file is mainly code copied from GraphQLDocumentParser. GraphQLDocumentParser is now only responsible for parsing and IRBuilder does more global operation such as determining the types to generate and including the fragments sources.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478553917", "createdAt": "2020-08-27T16:41:27Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/IRBuilder.kt", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.apollographql.apollo.compiler.ir\n+\n+import com.apollographql.apollo.compiler.ApolloMetadata\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_ENUM\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_INPUT_OBJECT_TYPE\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_SCALAR_TYPE\n+import com.apollographql.apollo.compiler.parser.error.DocumentParseException\n+import com.apollographql.apollo.compiler.parser.error.ParseException\n+import com.apollographql.apollo.compiler.parser.graphql.DocumentParseResult\n+import com.apollographql.apollo.compiler.parser.graphql.checkMultipleFragmentDefinitions\n+import com.apollographql.apollo.compiler.parser.graphql.checkMultipleOperationDefinitions\n+import com.apollographql.apollo.compiler.parser.graphql.validateArguments\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.asGraphQLType\n+import com.apollographql.apollo.compiler.parser.introspection.possibleTypes\n+\n+class IRBuilder(private val schema: IntrospectionSchema,\n+                private val schemaPackageName: String,\n+                private val incomingMetadata: ApolloMetadata?,\n+                private val alwaysGenerateTypesMatching: Set<String>?,\n+                generateMetadata: Boolean\n+) {\n+  private val isRootCompilationUnit = incomingMetadata == null && generateMetadata\n+\n+  private fun extraTypes(): Set<String> {\n+    val regexes = (alwaysGenerateTypesMatching ?: (listOf(\".*\").takeIf { isRootCompilationUnit } ?: emptyList()))\n+        .map { Regex(it) }\n+\n+    return schema.types.values.filter { type ->\n+      (type.kind == IntrospectionSchema.Kind.ENUM\n+          || type.kind == IntrospectionSchema.Kind.INPUT_OBJECT)\n+          && regexes.indexOfFirst { it.matches(type.name) } >= 0\n+    }.map { it.name }\n+        .toSet()\n+  }\n+\n+  fun build(documentParseResult: DocumentParseResult): CodeGenerationIR {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTAxMTYw", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476901160", "createdAt": "2020-08-27T16:43:25Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0MzoyNVrOHIYrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0MzoyNVrOHIYrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NTA1NQ==", "bodyText": "Do we need to generate \"ID\" in the CustomType enum? Is there a use case where users can register a custom adapter for \"ID\" ? In the spec, it is treated like Int, String and other builtin scalar types, it feels asymmetrical to give it a specific treatment there.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478555055", "createdAt": "2020-08-27T16:43:25Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/IRBuilder.kt", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.apollographql.apollo.compiler.ir\n+\n+import com.apollographql.apollo.compiler.ApolloMetadata\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_ENUM\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_INPUT_OBJECT_TYPE\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion.KIND_SCALAR_TYPE\n+import com.apollographql.apollo.compiler.parser.error.DocumentParseException\n+import com.apollographql.apollo.compiler.parser.error.ParseException\n+import com.apollographql.apollo.compiler.parser.graphql.DocumentParseResult\n+import com.apollographql.apollo.compiler.parser.graphql.checkMultipleFragmentDefinitions\n+import com.apollographql.apollo.compiler.parser.graphql.checkMultipleOperationDefinitions\n+import com.apollographql.apollo.compiler.parser.graphql.validateArguments\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.asGraphQLType\n+import com.apollographql.apollo.compiler.parser.introspection.possibleTypes\n+\n+class IRBuilder(private val schema: IntrospectionSchema,\n+                private val schemaPackageName: String,\n+                private val incomingMetadata: ApolloMetadata?,\n+                private val alwaysGenerateTypesMatching: Set<String>?,\n+                generateMetadata: Boolean\n+) {\n+  private val isRootCompilationUnit = incomingMetadata == null && generateMetadata\n+\n+  private fun extraTypes(): Set<String> {\n+    val regexes = (alwaysGenerateTypesMatching ?: (listOf(\".*\").takeIf { isRootCompilationUnit } ?: emptyList()))\n+        .map { Regex(it) }\n+\n+    return schema.types.values.filter { type ->\n+      (type.kind == IntrospectionSchema.Kind.ENUM\n+          || type.kind == IntrospectionSchema.Kind.INPUT_OBJECT)\n+          && regexes.indexOfFirst { it.matches(type.name) } >= 0\n+    }.map { it.name }\n+        .toSet()\n+  }\n+\n+  fun build(documentParseResult: DocumentParseResult): CodeGenerationIR {\n+    val allFragments = (incomingMetadata?.fragments ?: emptyList()) + documentParseResult.fragments\n+\n+    documentParseResult.operations.checkMultipleOperationDefinitions()\n+    allFragments.checkMultipleFragmentDefinitions()\n+\n+    val fragmentsToGenerate = documentParseResult.fragments.map { it.fragmentName }\n+\n+    val incomingTypes = incomingMetadata?.types ?: emptySet()\n+    val extraTypes = extraTypes()\n+\n+    val typeDeclarations = (documentParseResult.usedTypes + extraTypes) .usedTypeDeclarations()\n+\n+    val enumsToGenerate = typeDeclarations.filter { it.kind == KIND_ENUM }\n+        .map { it.name }\n+        .filter { !incomingTypes.contains(it) }\n+\n+    val inputObjectsToGenerate = typeDeclarations.filter { it.kind == KIND_INPUT_OBJECT_TYPE }\n+        .map { it.name }\n+        .filter { !incomingTypes.contains(it) }\n+\n+    // Always generate the extra \"ID\" scalar type\n+    // I'm not 100% sure why this is required but keep this for backward compatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTA1OTI3", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476905927", "createdAt": "2020-08-27T16:49:21Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0OToyMVrOHIY50g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0OToyMVrOHIY50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODY3NA==", "bodyText": "Refactored these tests slightly to have one test for Java and another for Kotlin", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478558674", "createdAt": "2020-08-27T16:49:21Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/test/kotlin/com/apollographql/apollo/compiler/CodegenTest.kt", "diffHunk": "@@ -218,16 +175,21 @@ class CodeGenTest(private val folder: File) {\n           generateVisitorForPolymorphicDatatypes = generateVisitorForPolymorphicDatatypes,\n           generateAsInternal = generateAsInternal,\n           kotlinMultiPlatformProject = true,\n-          enumAsSealedClassPatternFilters = enumAsSealedClassPatternFilters\n+          enumAsSealedClassPatternFilters = enumAsSealedClassPatternFilters,\n+          metadataOutputFile = File(\"build/generated/test/${folder.name}/metadata/$language\"),\n       )\n     }\n \n     @JvmStatic\n-    @Parameterized.Parameters(name = \"{0}\")\n-    fun data(): Collection<File> {\n+    @Parameterized.Parameters(name = \"{0}-{1}\")\n+    fun data(): Collection<Array<Any>> {\n       return File(\"src/test/graphql/com/example/\")\n           .listFiles()!!\n           .filter { it.isDirectory }\n+          .flatMap { listOf(\n+              arrayOf(it, TestLanguage.Java),\n+              arrayOf(it, TestLanguage.Kotlin)\n+          ) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTA2NzYz", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476906763", "createdAt": "2020-08-27T16:50:26Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MDoyNlrOHIY8UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MDoyNlrOHIY8UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1OTMxMg==", "bodyText": "I expect multi-module to stay in experimental for some time so that we can tweak the APIs if needed.", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478559312", "createdAt": "2020-08-27T16:50:26Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt", "diffHunk": "@@ -193,4 +194,29 @@ interface CompilerParams {\n    * the client was compiled against an older schema that doesn't have knowledge of the new enums.\n    */\n   val sealedClassesForEnumsMatching: ListProperty<String>\n+\n+  /**\n+   * Whether or not to generate Apollo metadata. Apollo metadata is used for multi-module support. Set this to true if you want other\n+   * modules to be able to re-use fragments and types from this module.\n+   *\n+   * This is currently experimental and this API might change in the future.\n+   *\n+   * Default value: false\n+   */\n+  @ApolloExperimental\n+  val generateApolloMetadata: Property<Boolean>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTA4MzE4", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-476908318", "createdAt": "2020-08-27T16:52:31Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MjozMVrOHIZA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MjozMVrOHIZA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MDUwNg==", "bodyText": "This is a pain. For 3.0, I'd like to do something about test variants. Most likely remove them... Do we know if anyone uses .graphql files in test source sets? Anything that could not be solved with a fair amount of R8?", "url": "https://github.com/apollographql/apollo-android/pull/2514#discussion_r478560506", "createdAt": "2020-08-27T16:52:31Z", "author": {"login": "martinbonnin"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/DefaultCompilationUnit.kt", "diffHunk": "@@ -45,17 +45,29 @@ abstract class DefaultCompilationUnit @Inject constructor(\n     }\n \n     if (!compilerParams.schemaFile.isPresent) {\n-      compilerParams.schemaFile.set {\n-        project.file(\n+      // This needs to be lazy for:\n+      // - test variants that don't have a schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTQyNDkw", "url": "https://github.com/apollographql/apollo-android/pull/2514#pullrequestreview-485542490", "createdAt": "2020-09-10T03:37:22Z", "commit": {"oid": "3eca9f5ad6fe53219641bbbbdca1375b064734fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c43d5c9b1ea74c69b5a031caced11e47582e58", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/10c43d5c9b1ea74c69b5a031caced11e47582e58", "committedDate": "2020-09-10T08:22:20Z", "message": "Merge branch 'master' into feature-1973/multi-module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bca7855630a89d4ff61282b0ab6b7cb9d5f1071", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/4bca7855630a89d4ff61282b0ab6b7cb9d5f1071", "committedDate": "2020-09-10T08:35:11Z", "message": "in the compiler module, use 'metadata' instead of 'multi-module'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b40e738787bac10008535406e443c2ebdd2978", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/25b40e738787bac10008535406e443c2ebdd2978", "committedDate": "2020-09-10T09:35:29Z", "message": "added a few comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4332254ec9c8ef30c2bf84071f27f78d069ea43e", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/4332254ec9c8ef30c2bf84071f27f78d069ea43e", "committedDate": "2020-09-10T09:49:27Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa107e8b03496f40caeb10eb8b7390a670f7bbe9", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/aa107e8b03496f40caeb10eb8b7390a670f7bbe9", "committedDate": "2020-09-10T10:47:14Z", "message": "make Service and Variant public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b99c69db35c7d36858e39872899a830142ada90c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/b99c69db35c7d36858e39872899a830142ada90c", "committedDate": "2020-09-10T11:22:33Z", "message": "update metalava"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4244, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}