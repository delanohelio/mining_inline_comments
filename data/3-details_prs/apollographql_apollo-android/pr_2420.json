{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MTAwOTY0", "number": 2420, "title": "[Runtime] add `ApolloClient.autoPersistedOperationsInterceptorFactory`", "bodyText": "closes #2330\nThis PR allows to override the APQ (Auto Persisted Queries) interceptor and also enables APQs for mutations. I'm not sure if there was a specific reason to disable APQs for mutations. I tested against https://apollo-fullstack-tutorial.herokuapp.com/ and it's working well but maybe there is something else?\nApolloClient.Builder.setAutoPersistedOperationsInterceptorFactory() now takes precedence over enableAutoPersistedQueries. This allows to keep the existing behavior. There is one breaking change: the ApolloInterceptorFactory signature changes from\nfun newInterceptor(): ApolloInterceptor\nto\nfun newInterceptor(logger: ApolloLogger, operation: Operation<*, *, *>): Operation?\nSince ApolloInterceptorFactory is pretty new and it's mainly adding new parameters, I'm hoping this change will be mostly pain-free.", "createdAt": "2020-07-03T15:03:54Z", "url": "https://github.com/apollographql/apollo-android/pull/2420", "merged": true, "mergeCommit": {"oid": "edda84c4ec76a995064cb42dce5a565fff6b6869"}, "closed": true, "closedAt": "2020-07-09T16:23:49Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxU3w_gFqTQ0MjQ2ODk4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczRjPhAFqTQ0NTc3NTgyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDY4OTg0", "url": "https://github.com/apollographql/apollo-android/pull/2420#pullrequestreview-442468984", "createdAt": "2020-07-03T15:07:23Z", "commit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyM1rOGszCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyM1rOGszCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNjc4Nw==", "bodyText": "I think this isn't used by subscriptions at the moment but looking at the json, it looks like it it could be factored in.", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r449626787", "createdAt": "2020-07-03T15:07:23Z", "author": {"login": "martinbonnin"}, "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Operation.kt", "diffHunk": "@@ -73,6 +73,36 @@ interface Operation<D : Operation.Data, T, V : Operation.Variables> {\n   @Throws(IOException::class)\n   fun parse(byteString: ByteString): Response<T>\n \n+  /**\n+   * Composes POST JSON-encoded request body to be sent to the GraphQL server.\n+   *\n+   * In case when [autoPersistQueries] is set to `true` special `extension` attributes, required by query auto persistence,\n+   * will be encoded along with regular GraphQL request body. If query was previously persisted on the GraphQL server\n+   * set [withQueryDocument] to `false` to skip query document be sent in the request.\n+   *\n+   * Optional [scalarTypeAdapters] must be provided in case when this operation defines variables with custom GraphQL scalar type.\n+   *\n+   * *Example*:\n+   * ```\n+   * {\n+   *    \"query\": \"query TestQuery($episode: Episode) { hero(episode: $episode) { name } }\",\n+   *    \"operationName\": \"TestQuery\",\n+   *    \"variables\": { \"episode\": \"JEDI\" }\n+   *    \"extensions\": {\n+   *      \"persistedQuery\": {\n+   *        \"version\": 1,\n+   *        \"sha256Hash\": \"32637895609e6c51a2593f5cfb49244fd79358d327ff670b3e930e024c3db8f6\"\n+   *      }\n+   *    }\n+   * }\n+   * ```\n+   */\n+  fun composeRequestBody(\n+      autoPersistQueries: Boolean,\n+      withQueryDocument: Boolean,\n+      scalarTypeAdapters: ScalarTypeAdapters\n+  ): ByteString\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTY5ODg4", "url": "https://github.com/apollographql/apollo-android/pull/2420#pullrequestreview-442569888", "createdAt": "2020-07-03T22:31:57Z", "commit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjozMTo1OFrOGs4XSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjozMTo1OFrOGs4XSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzk5NA==", "bodyText": "So it seems like this choose to preserve the old behavior of not allowing persisted mutations if you don't use a custom interceptor? Fine with me since we plan to use  a custom one :) but is there plan to follow-up to investigate enabling this for everyone?", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r449713994", "createdAt": "2020-07-03T22:31:58Z", "author": {"login": "BenSchwab"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/RealApolloCall.java", "diffHunk": "@@ -383,14 +386,24 @@ private ApolloInterceptorChain prepareInterceptorChain(Operation operation) {\n     List<ApolloInterceptor> interceptors = new ArrayList<>();\n \n     for (ApolloInterceptorFactory factory : applicationInterceptorFactories) {\n-      interceptors.add(factory.newInterceptor());\n+      ApolloInterceptor interceptor = factory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n     }\n     interceptors.addAll(applicationInterceptors);\n \n     interceptors.add(responseFetcher.provideInterceptor(logger));\n     interceptors.add(new ApolloCacheInterceptor(apolloStore, responseFieldMapper, dispatcher, logger));\n-    if (operation instanceof Query && enableAutoPersistedQueries) {\n-      interceptors.add(new ApolloAutoPersistedQueryInterceptor(logger, useHttpGetMethodForPersistedQueries));\n+    if (autoPersistedOperationsInterceptorFactory != null) {\n+      ApolloInterceptor interceptor = autoPersistedOperationsInterceptorFactory.newInterceptor(logger, operation);\n+      if (interceptor != null) {\n+        interceptors.add(interceptor);\n+      }\n+    } else {\n+      if (operation instanceof Query && enableAutoPersistedQueries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e63ede45e32419310f183d12654488f7d66ba0c4"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7abfc3145c2b7b9e950164ebc5aa32a9667a001", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/e7abfc3145c2b7b9e950164ebc5aa32a9667a001", "committedDate": "2020-07-06T09:58:11Z", "message": "unbreak tests"}, "afterCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/bc2f5baece929161812652e336ca021f4eeb297a", "committedDate": "2020-07-06T11:44:01Z", "message": "unbreak tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDU4Mzc2", "url": "https://github.com/apollographql/apollo-android/pull/2420#pullrequestreview-443058376", "createdAt": "2020-07-06T13:08:28Z", "commit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowODoyOFrOGtWgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowODoyOFrOGtWgzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNzk1MA==", "bodyText": "should we make it configurable to enable / disable autopersistence for queries / mutations?", "url": "https://github.com/apollographql/apollo-android/pull/2420#discussion_r450207950", "createdAt": "2020-07-06T13:08:28Z", "author": {"login": "sav007"}, "path": "apollo-runtime/src/main/java/com/apollographql/apollo/interceptor/ApolloAutoPersistedOperationInterceptor.java", "diffHunk": "@@ -108,4 +112,21 @@ boolean isPersistedQueryNotSupported(List<Error> errors) {\n     }\n     return false;\n   }\n+\n+  public static class Factory implements ApolloInterceptorFactory {\n+\n+    final boolean useHttpGet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2f5baece929161812652e336ca021f4eeb297a"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf20d91b0a20ef57e248455c1ef0f129ec912e9e", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/cf20d91b0a20ef57e248455c1ef0f129ec912e9e", "committedDate": "2020-07-08T12:46:12Z", "message": "add persistQueries and persistMutations parameters"}, "afterCommit": {"oid": "ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "committedDate": "2020-07-08T13:49:54Z", "message": "update API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c0e77bc5d5cd6acbc4a328db60396410c5cfc55", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/5c0e77bc5d5cd6acbc4a328db60396410c5cfc55", "committedDate": "2020-07-09T14:50:24Z", "message": "also add the `composeRequestBody` overload for persisted queries on\nmutations/subscriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c8bf00c2390d40a4baa996cce7eaa2f6965dc7", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/f8c8bf00c2390d40a4baa996cce7eaa2f6965dc7", "committedDate": "2020-07-09T14:50:24Z", "message": "update test fixtures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c2298c2bdebb8e04957df8902e5e400feca0be", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/10c2298c2bdebb8e04957df8902e5e400feca0be", "committedDate": "2020-07-09T14:50:24Z", "message": "Pass a logger and operation to `newInterceptor`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7269393a3719a96a8719138170ac3b023bfcbe", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/1e7269393a3719a96a8719138170ac3b023bfcbe", "committedDate": "2020-07-09T14:50:25Z", "message": "make ApolloAutoPersistedQueryInterceptor public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8db65b77440758a2dc908e2288eb430eef8240c", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/e8db65b77440758a2dc908e2288eb430eef8240c", "committedDate": "2020-07-09T14:51:59Z", "message": "add apolloClient.autoPersistedOperationsInterceptorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac32a8257a91053cf2a9fb1a964511494b5caf6b", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/ac32a8257a91053cf2a9fb1a964511494b5caf6b", "committedDate": "2020-07-09T14:52:01Z", "message": "minor tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02033d70dc253d3e0946e0c9e6c1c70298367be", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/f02033d70dc253d3e0946e0c9e6c1c70298367be", "committedDate": "2020-07-09T14:52:01Z", "message": "unbreak tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735e30a635a7c786c91f47ddb6d3e7ca69fdc708", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/735e30a635a7c786c91f47ddb6d3e7ca69fdc708", "committedDate": "2020-07-09T14:52:01Z", "message": "add persistQueries and persistMutations parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10167fa716147e228252d7eb93afd2348b2fa020", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/10167fa716147e228252d7eb93afd2348b2fa020", "committedDate": "2020-07-09T14:52:01Z", "message": "do not run in parallel for now. It might take a bit more time but it'll\nmake errors more readble in CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66d64731ca824cdae556ea4a28431735e1194a1", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d66d64731ca824cdae556ea4a28431735e1194a1", "committedDate": "2020-07-09T14:52:02Z", "message": "update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/ad9eaa16bdcdbbb176dbd80a8418a6fcd05b03ed", "committedDate": "2020-07-08T13:49:54Z", "message": "update API"}, "afterCommit": {"oid": "d66d64731ca824cdae556ea4a28431735e1194a1", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d66d64731ca824cdae556ea4a28431735e1194a1", "committedDate": "2020-07-09T14:52:02Z", "message": "update API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Nzc1ODIy", "url": "https://github.com/apollographql/apollo-android/pull/2420#pullrequestreview-445775822", "createdAt": "2020-07-09T16:23:06Z", "commit": {"oid": "d66d64731ca824cdae556ea4a28431735e1194a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4285, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}