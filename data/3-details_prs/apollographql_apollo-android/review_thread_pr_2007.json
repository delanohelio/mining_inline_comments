{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDM1NDQ5", "number": 2007, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1OTo0OFrODhuKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1OTo0OFrODhuKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg1ODMyOnYy", "diffSide": "RIGHT", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1OTo0OFrOFsnaxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjoxNDo1MFrOFtGMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNzQ5Mw==", "bodyText": "@sav007 I feel the runCatching approach is safer since there could potentially be a race condition where the channel is closed just after the if before. Let me know if isClosedForSend was used to catch other cases.", "url": "https://github.com/apollographql/apollo-android/pull/2007#discussion_r382327493", "createdAt": "2020-02-20T23:59:48Z", "author": {"login": "martinbonnin"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -13,9 +13,8 @@ import kotlinx.coroutines.flow.*\n \n private class ChannelCallback<T>(val channel: Channel<Response<T>>) : ApolloCall.Callback<T>() {\n \n-  @ExperimentalCoroutinesApi\n   override fun onResponse(response: Response<T>) {\n-    if (!channel.isClosedForSend) {\n+    runCatching {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f417e21e10fd8ae2e0c8c77ce43a34a4f385fc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwODMyNg==", "bodyText": "To avoid having to wrap the offer in a runCatching, you could create an extension on a Channel.\nfun <E> SendChannel<E>.safeOffer(value: E) = runCatching {\n        offer(value)\n}", "url": "https://github.com/apollographql/apollo-android/pull/2007#discussion_r382708326", "createdAt": "2020-02-21T17:25:17Z", "author": {"login": "msya"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -13,9 +13,8 @@ import kotlinx.coroutines.flow.*\n \n private class ChannelCallback<T>(val channel: Channel<Response<T>>) : ApolloCall.Callback<T>() {\n \n-  @ExperimentalCoroutinesApi\n   override fun onResponse(response: Response<T>) {\n-    if (!channel.isClosedForSend) {\n+    runCatching {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNzQ5Mw=="}, "originalCommit": {"oid": "45f417e21e10fd8ae2e0c8c77ce43a34a4f385fc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMTY2NA==", "bodyText": "@msya, for 2 instances only, I'd rather not pollute the SendChannel namespace with an extension function.", "url": "https://github.com/apollographql/apollo-android/pull/2007#discussion_r382831664", "createdAt": "2020-02-21T22:14:50Z", "author": {"login": "martinbonnin"}, "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -13,9 +13,8 @@ import kotlinx.coroutines.flow.*\n \n private class ChannelCallback<T>(val channel: Channel<Response<T>>) : ApolloCall.Callback<T>() {\n \n-  @ExperimentalCoroutinesApi\n   override fun onResponse(response: Response<T>) {\n-    if (!channel.isClosedForSend) {\n+    runCatching {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNzQ5Mw=="}, "originalCommit": {"oid": "45f417e21e10fd8ae2e0c8c77ce43a34a4f385fc"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3269, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}