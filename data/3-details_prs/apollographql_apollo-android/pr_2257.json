{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Mzk4Mzgx", "number": 2257, "title": "Fix issue with GraphQL document parse perf.", "bodyText": "TL;DR:\nreplaced recursion for traversing tree of a input types and their children with plain loop.\nCloses #2243", "createdAt": "2020-05-08T19:37:56Z", "url": "https://github.com/apollographql/apollo-android/pull/2257", "merged": true, "mergeCommit": {"oid": "d3fe7beb1874ca0872a23f8e012c9bdd1ba02335"}, "closed": true, "closedAt": "2020-05-09T00:14:43Z", "author": {"login": "sav007"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfXKwbAH2gAyNDE1Mzk4MzgxOjhhODNmOTlkNDQ2YjQ0MjNiMDZhZWUxZmUwZDA3NWVmNzk0NmRlOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfamkyAH2gAyNDE1Mzk4MzgxOmU3ZjI2MGMzNDEyZWJlZWRjMTc0MzhmZDc3NTdlODhlNmFjZTliMWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/8a83f99d446b4423b06aee1fe0d075ef7946de98", "committedDate": "2020-05-08T19:37:18Z", "message": "Fix issue with GraphQL document parse perf.\n\nCloses https://github.com/apollographql/apollo-android/issues/2243"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTc3NTg5", "url": "https://github.com/apollographql/apollo-android/pull/2257#pullrequestreview-408577589", "createdAt": "2020-05-08T23:26:32Z", "commit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNjozMlrOGS2V9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNjozMlrOGS2V9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNzkxMA==", "bodyText": "Just curious: does this actually save time ?", "url": "https://github.com/apollographql/apollo-android/pull/2257#discussion_r422417910", "createdAt": "2020-05-08T23:26:32Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/GraphQLDocumentParser.kt", "diffHunk": "@@ -645,29 +645,48 @@ class GraphQLDocumentParser(val schema: Schema, private val packageNameProvider:\n     }\n   }\n \n-  private fun Set<String>.usedSchemaTypes(exclude: Set<String> = emptySet()): Set<Schema.Type> {\n+  private fun Set<String>.usedSchemaTypes(): Set<Schema.Type> {\n     if (isEmpty()) {\n       return emptySet()\n     }\n \n-    val usedSchemaTypes = filter { ScalarType.forName(it) == null }\n+    val (scalarTypes, inputObjectTypes) = filter { ScalarType.forName(it) == null }\n         .map { schema[it] ?: throw GraphQLParseException(message = \"Undefined schema type `$it`\") }\n         .filter { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM || type.kind == Schema.Kind.INPUT_OBJECT }\n-        .toSet()\n+        .partition { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM }\n+        .let { (scalarTypes, inputObjectTypes) ->\n+          @Suppress(\"UNCHECKED_CAST\")\n+          scalarTypes to (inputObjectTypes as List<Schema.Type.InputObject>)\n+        }\n \n-    val inputObjectUsedTypes = usedSchemaTypes\n-        .mapNotNull { type -> type as? Schema.Type.InputObject }\n-        .flatMap { inputObject -> inputObject.usedTypes(exclude = this + exclude) }\n-        .toSet()\n-        .usedSchemaTypes(this + exclude)\n+    val usedTypes = (scalarTypes + inputObjectTypes).toMutableSet()\n+    val visitedTypeNames = scalarTypes.map { it.name }.toMutableSet()\n \n-    return usedSchemaTypes + inputObjectUsedTypes\n-  }\n+    val inputTypesToVisit = inputObjectTypes.toMutableList()\n+    while (inputTypesToVisit.isNotEmpty()) {\n+      val inputType = inputTypesToVisit.removeAt(inputTypesToVisit.lastIndex).also {\n+        usedTypes.add(it)\n+        visitedTypeNames.add(it.name)\n+      }\n+      val (nestedScalarTypes, nestedInputTypes) = inputType\n+          .inputFields\n+          .asSequence()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTc3NzI5", "url": "https://github.com/apollographql/apollo-android/pull/2257#pullrequestreview-408577729", "createdAt": "2020-05-08T23:27:09Z", "commit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNzowOVrOGS2Wew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNzowOVrOGS2Wew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      .let { (scalaTypes, inputTypes) ->\n          \n          \n            \n                        @Suppress(\"UNCHECKED_CAST\")\n          \n          \n            \n                        scalaTypes.filter { ScalarType.forName(it.name) == null } to (inputTypes as List<Schema.Type.InputObject>)\n          \n          \n            \n                      .let { (scalarTypes, inputTypes) ->\n          \n          \n            \n                        @Suppress(\"UNCHECKED_CAST\")\n          \n          \n            \n                        scalarTypes.filter { ScalarType.forName(it.name) == null } to (inputTypes as List<Schema.Type.InputObject>)", "url": "https://github.com/apollographql/apollo-android/pull/2257#discussion_r422418043", "createdAt": "2020-05-08T23:27:09Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/GraphQLDocumentParser.kt", "diffHunk": "@@ -645,29 +645,48 @@ class GraphQLDocumentParser(val schema: Schema, private val packageNameProvider:\n     }\n   }\n \n-  private fun Set<String>.usedSchemaTypes(exclude: Set<String> = emptySet()): Set<Schema.Type> {\n+  private fun Set<String>.usedSchemaTypes(): Set<Schema.Type> {\n     if (isEmpty()) {\n       return emptySet()\n     }\n \n-    val usedSchemaTypes = filter { ScalarType.forName(it) == null }\n+    val (scalarTypes, inputObjectTypes) = filter { ScalarType.forName(it) == null }\n         .map { schema[it] ?: throw GraphQLParseException(message = \"Undefined schema type `$it`\") }\n         .filter { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM || type.kind == Schema.Kind.INPUT_OBJECT }\n-        .toSet()\n+        .partition { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM }\n+        .let { (scalarTypes, inputObjectTypes) ->\n+          @Suppress(\"UNCHECKED_CAST\")\n+          scalarTypes to (inputObjectTypes as List<Schema.Type.InputObject>)\n+        }\n \n-    val inputObjectUsedTypes = usedSchemaTypes\n-        .mapNotNull { type -> type as? Schema.Type.InputObject }\n-        .flatMap { inputObject -> inputObject.usedTypes(exclude = this + exclude) }\n-        .toSet()\n-        .usedSchemaTypes(this + exclude)\n+    val usedTypes = (scalarTypes + inputObjectTypes).toMutableSet()\n+    val visitedTypeNames = scalarTypes.map { it.name }.toMutableSet()\n \n-    return usedSchemaTypes + inputObjectUsedTypes\n-  }\n+    val inputTypesToVisit = inputObjectTypes.toMutableList()\n+    while (inputTypesToVisit.isNotEmpty()) {\n+      val inputType = inputTypesToVisit.removeAt(inputTypesToVisit.lastIndex).also {\n+        usedTypes.add(it)\n+        visitedTypeNames.add(it.name)\n+      }\n+      val (nestedScalarTypes, nestedInputTypes) = inputType\n+          .inputFields\n+          .asSequence()\n+          .map { field -> field.type.rawType.name!! }\n+          .filterNot { type -> visitedTypeNames.contains(type) }\n+          .map { schema[it] ?: throw GraphQLParseException(message = \"Undefined schema type `$it`\") }\n+          .filter { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM || type.kind == Schema.Kind.INPUT_OBJECT }\n+          .partition { type -> type.kind == Schema.Kind.SCALAR || type.kind == Schema.Kind.ENUM }\n+          .let { (scalaTypes, inputTypes) ->\n+            @Suppress(\"UNCHECKED_CAST\")\n+            scalaTypes.filter { ScalarType.forName(it.name) == null } to (inputTypes as List<Schema.Type.InputObject>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTc3ODI0", "url": "https://github.com/apollographql/apollo-android/pull/2257#pullrequestreview-408577824", "createdAt": "2020-05-08T23:27:32Z", "commit": {"oid": "8a83f99d446b4423b06aee1fe0d075ef7946de98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f260c3412ebeedc17438fd7757e88e6ace9b1b", "author": {"user": {"login": "sav007", "name": "Ivan Savytskyi"}}, "url": "https://github.com/apollographql/apollo-android/commit/e7f260c3412ebeedc17438fd7757e88e6ace9b1b", "committedDate": "2020-05-08T23:37:24Z", "message": "Update apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/parser/GraphQLDocumentParser.kt\n\nCo-authored-by: Martin Bonnin <martin@mbonnin.net>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3783, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}