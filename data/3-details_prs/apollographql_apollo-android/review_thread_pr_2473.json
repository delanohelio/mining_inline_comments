{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjM4MTQx", "number": 2473, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyMzoxMFrOESl7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyMzoxMFrOESl7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMxMjE1OnYy", "diffSide": "RIGHT", "path": "apollo-integration/src/test/java/com/apollographql/apollo/performance/NumberParsingTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyMzoxMFrOG32_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1Nzo1NFrOG4Fhzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTk0MA==", "bodyText": "Is there any reason to not use our JsonWriter to compose test json? I mean at least we can avoid extra dependency to kotlinx-serialization that is used as far as I understood only for this test?", "url": "https://github.com/apollographql/apollo-android/pull/2473#discussion_r461225940", "createdAt": "2020-07-27T23:23:10Z", "author": {"login": "sav007"}, "path": "apollo-integration/src/test/java/com/apollographql/apollo/performance/NumberParsingTest.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.apollographql.apollo.performance\n+\n+import com.apollographql.apollo.ApolloClient\n+import com.apollographql.apollo.Utils.immediateExecutor\n+import com.apollographql.apollo.Utils.immediateExecutorService\n+import com.apollographql.apollo.api.internal.SimpleOperationResponseParser\n+import com.apollographql.apollo.fetcher.ApolloResponseFetchers\n+import com.apollographql.apollo.integration.performance.GetFloatsQuery\n+import com.apollographql.apollo.integration.performance.GetIntsQuery\n+import kotlinx.coroutines.runBlocking\n+import kotlinx.serialization.json.JsonArray\n+import kotlinx.serialization.json.JsonObject\n+import kotlinx.serialization.json.JsonPrimitive\n+import okhttp3.Dispatcher\n+import okhttp3.OkHttpClient\n+import okio.ByteString\n+import okio.ByteString.Companion.encodeUtf8\n+import kotlin.random.Random\n+import kotlin.test.Test\n+import kotlin.time.ExperimentalTime\n+import kotlin.time.measureTime\n+\n+data class Data(\n+    val randomInts: List<Int>\n+)\n+\n+/**\n+ * These tests are disabled by default. Set the `runPerformanceTests` property to run them:\n+ * ./gradlew :apollo-integration:testDebug --tests '*parseFloats*' -DrunPerformanceTests=true\n+ */\n+@OptIn(ExperimentalTime::class)\n+class NumberParsingTest {\n+  /**\n+   * A test to benchmark the parsing of integers in Json.\n+   */\n+  @Test\n+  fun parseInts() {\n+\n+    val random = Random.Default\n+\n+    val data = JsonObject(\n+        mapOf(\n+            \"data\" to JsonObject(\n+                mapOf(\n+                    \"randomInts\" to JsonArray(\n+                        0.until(10000).map {\n+                          JsonPrimitive(random.nextInt())\n+                        }\n+                    )\n+                )\n+            )\n+        )\n+    )\n+\n+    val json = data.toString().encodeUtf8()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bae64e70bc9d8dfa4ef9157544b63ca64ed6e2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NDAxNA==", "bodyText": "It was mostly me being lazy to count the number of beginObject and endObjects using the JsonWriter API. I just did it.", "url": "https://github.com/apollographql/apollo-android/pull/2473#discussion_r461464014", "createdAt": "2020-07-28T09:57:54Z", "author": {"login": "martinbonnin"}, "path": "apollo-integration/src/test/java/com/apollographql/apollo/performance/NumberParsingTest.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.apollographql.apollo.performance\n+\n+import com.apollographql.apollo.ApolloClient\n+import com.apollographql.apollo.Utils.immediateExecutor\n+import com.apollographql.apollo.Utils.immediateExecutorService\n+import com.apollographql.apollo.api.internal.SimpleOperationResponseParser\n+import com.apollographql.apollo.fetcher.ApolloResponseFetchers\n+import com.apollographql.apollo.integration.performance.GetFloatsQuery\n+import com.apollographql.apollo.integration.performance.GetIntsQuery\n+import kotlinx.coroutines.runBlocking\n+import kotlinx.serialization.json.JsonArray\n+import kotlinx.serialization.json.JsonObject\n+import kotlinx.serialization.json.JsonPrimitive\n+import okhttp3.Dispatcher\n+import okhttp3.OkHttpClient\n+import okio.ByteString\n+import okio.ByteString.Companion.encodeUtf8\n+import kotlin.random.Random\n+import kotlin.test.Test\n+import kotlin.time.ExperimentalTime\n+import kotlin.time.measureTime\n+\n+data class Data(\n+    val randomInts: List<Int>\n+)\n+\n+/**\n+ * These tests are disabled by default. Set the `runPerformanceTests` property to run them:\n+ * ./gradlew :apollo-integration:testDebug --tests '*parseFloats*' -DrunPerformanceTests=true\n+ */\n+@OptIn(ExperimentalTime::class)\n+class NumberParsingTest {\n+  /**\n+   * A test to benchmark the parsing of integers in Json.\n+   */\n+  @Test\n+  fun parseInts() {\n+\n+    val random = Random.Default\n+\n+    val data = JsonObject(\n+        mapOf(\n+            \"data\" to JsonObject(\n+                mapOf(\n+                    \"randomInts\" to JsonArray(\n+                        0.until(10000).map {\n+                          JsonPrimitive(random.nextInt())\n+                        }\n+                    )\n+                )\n+            )\n+        )\n+    )\n+\n+    val json = data.toString().encodeUtf8()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTk0MA=="}, "originalCommit": {"oid": "42bae64e70bc9d8dfa4ef9157544b63ca64ed6e2"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2993, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}