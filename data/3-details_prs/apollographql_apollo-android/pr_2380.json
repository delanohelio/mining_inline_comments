{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTU1NTIw", "number": 2380, "title": "[Plugin] Make `./gradlew downloadApolloSchema` resolve the schema path automatically", "bodyText": "The --schema parameter is now optional and it's possible to specify --variant and --service parameters:\n./gradlew downloadApolloSchema --endpoint https://... --variant release --service starwars\n\nIf not specified, the schema location will be resolved from the compilation units.\nThis uses a new gradle task called DownloadApolloSchemaCliTask. This task doesn't feel very \"gradle-y\" because not only does it have no output but it also takes compilationUnits as internal parameter and makes a lot of things as execution time (compared to configuration time). I'm not sure how that will play with the configuration cache. Since this task will mainly be used outside of the graph, I hope there will be no consequences. If it is a problem, I guess the compilationUnit can be somehow serialized.\ncloses #2364", "createdAt": "2020-06-19T15:12:33Z", "url": "https://github.com/apollographql/apollo-android/pull/2380", "merged": true, "mergeCommit": {"oid": "f622dd154d5379a608a9b1bfb6923c0e43c9c0cc"}, "closed": true, "closedAt": "2020-06-29T09:04:38Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs0eUoAH2gAyNDM3MTU1NTIwOjQ0YWI3ZjBkN2YxMDFlN2ZiZTQ2M2M3MDhhMjYxM2MwNmRjZjE0MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct4IXrAFqTQzNTMwMTgxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44ab7f0d7f101e7fbe463c708a2613c06dcf1424", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/44ab7f0d7f101e7fbe463c708a2613c06dcf1424", "committedDate": "2020-06-19T15:06:56Z", "message": "Make `./gradlew downloadApolloSchema` resolve the schema path\nautomatically\n\ncloses #2364"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjA1MzY5", "url": "https://github.com/apollographql/apollo-android/pull/2380#pullrequestreview-434205369", "createdAt": "2020-06-19T16:28:49Z", "commit": {"oid": "44ab7f0d7f101e7fbe463c708a2613c06dcf1424"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjoyODo0OVrOGmawdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjoyODo0OVrOGmawdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzNzQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.lifecycle(\"Using the com.apollographql.apollo.headers property is deprecated. Add parameters to the endpoint instead.\")\n          \n          \n            \n            logger.lifecycle(\"Using the com.apollographql.apollo.query_params property is deprecated. Add parameters to the endpoint instead.\")", "url": "https://github.com/apollographql/apollo-android/pull/2380#discussion_r442937463", "createdAt": "2020-06-19T16:28:49Z", "author": {"login": "francescocervone"}, "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/ApolloDownloadSchemaCliTask.kt", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.apollographql.apollo.gradle.internal\n+\n+import com.apollographql.apollo.gradle.api.CompilationUnit\n+import okhttp3.HttpUrl.Companion.toHttpUrl\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.NamedDomainObjectContainer\n+import org.gradle.api.file.RegularFileProperty\n+import org.gradle.api.provider.MapProperty\n+import org.gradle.api.provider.Property\n+import org.gradle.api.tasks.Input\n+import org.gradle.api.tasks.InputFile\n+import org.gradle.api.tasks.Internal\n+import org.gradle.api.tasks.Optional\n+import org.gradle.api.tasks.TaskAction\n+import org.gradle.api.tasks.options.Option\n+import java.io.File\n+\n+/**\n+ * This task is very similar to [ApolloDownloadSchemaTask] except it allows to override parameters from the command line\n+ */\n+abstract class ApolloDownloadSchemaCliTask : DefaultTask() {\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"endpoint\", description = \"url of the GraphQL endpoint\")\n+  abstract val endpoint: Property<String>\n+\n+  @get:Input\n+  @get:Optional\n+  @get:Option(option = \"schema\", description = \"path where the schema will be downloaded, relative to the current working directory\")\n+  abstract val schema: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"variant\", description = \"Variant to download the schema for. Defaults to the main variant\")\n+  abstract val variant: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"service\", description = \"Service to download the schema for. Defaults to the only service if there is only one or throws\")\n+  abstract val service: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @set:Option(option = \"header\", description = \"headers in the form 'Name: Value'\")\n+  var header = emptyList<String>() // cannot be abstract for @Option to work\n+\n+  @Internal\n+  lateinit var compilationUnits: NamedDomainObjectContainer<DefaultCompilationUnit>\n+\n+  init {\n+    /**\n+     * We cannot know in advance if the backend schema changed so don't cache or mark this task up-to-date\n+     * This code actually redundant because the task has no output but adding it make it explicit.\n+     */\n+    outputs.upToDateWhen { false }\n+    outputs.cacheIf { false }\n+  }\n+\n+  @TaskAction\n+  fun taskAction() {\n+    val candidates = compilationUnits.filter {\n+      if (variant.isPresent && it.variantName == variant.get()) {\n+        return@filter true\n+      }\n+\n+      it.variantName == \"main\" || it.variantName == \"release\"\n+    }\n+\n+    val compilationUnit = if (service.isPresent) {\n+      candidates.firstOrNull { it.serviceName == service.get() }\n+    } else {\n+      check(candidates.size <= 1) {\n+        \"please specify the --service\"\n+      }\n+      candidates.firstOrNull()\n+    }\n+\n+    check(compilationUnit != null) {\n+      val services = compilationUnits.map { it.serviceName }.distinct().sorted().joinToString(\"\\n\")\n+      val variants = compilationUnits.map { it.variantName }.distinct().sorted().joinToString(\"\\n\")\n+      \"Cannot find compilation unit, check variant and service.\\nPossible services:\\n$services\\nPossible variants:\\n$variants\"\n+    }\n+\n+    val (compilerParams, _) = compilationUnit.resolveParams(project)\n+\n+    val endpointProp = project.findProperty(\"com.apollographql.apollo.endpoint\") as? String\n+    var endpointUrl = when {\n+      endpoint.isPresent -> endpoint.get()\n+      endpointProp != null -> {\n+        logger.lifecycle(\"Using the com.apollographql.apollo.endpoint property is deprecated. Use --endpoint instead.\")\n+        endpointProp\n+      }\n+      else -> compilationUnit.service.introspection?.endpointUrl?.get()\n+    }\n+    check(endpointUrl != null) {\n+      \"Specify the endpoint either with --endpoint or the introspection {} block\"\n+    }\n+\n+    val schemaProp = project.findProperty(\"com.apollographql.apollo.schema\") as? String\n+    val schemaFile = when {\n+      schema.isPresent -> File(schema.get())\n+      schemaProp != null -> {\n+        logger.lifecycle(\"Using the com.apollographql.apollo.schema property is deprecated. Use --schema instead.\")\n+        project.file(schemaProp)\n+      }\n+      else -> compilerParams.schemaFile.asFile.get()\n+    }\n+\n+    val headersProp = project.findProperty(\"com.apollographql.apollo.headers\") as? String\n+    val headers = when {\n+      headersProp != null -> {\n+        logger.lifecycle(\"Using the com.apollographql.apollo.headers property is deprecated. Use --header instead.\")\n+        ApolloPlugin.toMap(headersProp)\n+      }\n+      else -> header.toMap()\n+    }\n+\n+    val queryParamsProp = project.findProperty(\"com.apollographql.apollo.query_params\") as? String\n+    if (queryParamsProp != null) {\n+      logger.lifecycle(\"Using the com.apollographql.apollo.headers property is deprecated. Add parameters to the endpoint instead.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ab7f0d7f101e7fbe463c708a2613c06dcf1424"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a45fcd21779d121a6380d82d46a8d095ad1efa", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/29a45fcd21779d121a6380d82d46a8d095ad1efa", "committedDate": "2020-06-19T21:21:05Z", "message": "Update apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/ApolloDownloadSchemaCliTask.kt\n\nCo-authored-by: Francesco Cervone <cervonefrancesco@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzAxODEz", "url": "https://github.com/apollographql/apollo-android/pull/2380#pullrequestreview-435301813", "createdAt": "2020-06-22T21:56:30Z", "commit": {"oid": "29a45fcd21779d121a6380d82d46a8d095ad1efa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}