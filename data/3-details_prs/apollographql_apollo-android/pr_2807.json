{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDM1NTMy", "number": 2807, "title": "Initial work for multiplatform cache", "bodyText": "Added apollo-cache-interceptor as a separate artifact\nThe cache is cache_first only at the moment and provided by\nApolloCacheInterceptor\nAdded CacheExecutionContext and Response.cacheContext to access\nfromCache\nAdded apollo-integration-kotlin, like apollo-integration but\nmultiplatform. See CacheInterceptorTest for a test\nAdded apollo-testing-support to group useful classes for testing.\nUltimately, this could be exported to end users for mock/testing\npurposes\n\nNext steps:\n\nImplement different fetchers\nMake the cache work with the streaming parser", "createdAt": "2020-12-16T09:53:42Z", "url": "https://github.com/apollographql/apollo-android/pull/2807", "merged": true, "mergeCommit": {"oid": "9839dbe460bd7025eeba69c0e79a81070893f274"}, "closed": true, "closedAt": "2020-12-23T14:47:03Z", "author": {"login": "martinbonnin"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoN4WJgFqTU1NjExNzk4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdo7qbigH2gAyNTQxMDM1NTMyOjQwNmMyYzAyODI0MDhiYmE4ODAwODBlZDNlMWY5MjBlZjRjYTk2NGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE3OTg4", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556117988", "createdAt": "2020-12-21T04:04:30Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDozMFrOIJLoFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDozMFrOIJLoFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODU4MQ==", "bodyText": "why not just call it apollo-cache? I thought that everything that belongs to normalize cache will be packaged in one artifact?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546498581", "createdAt": "2020-12-21T04:04:30Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/gradle.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+POM_ARTIFACT_ID=apollo-cache-interceptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE4MjAw", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556118200", "createdAt": "2020-12-21T04:05:33Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNTozM1rOIJLo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNTozM1rOIJLo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODc5NQ==", "bodyText": "nit: private for both props?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546498795", "createdAt": "2020-12-21T04:05:33Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE4ODYy", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556118862", "createdAt": "2020-12-21T04:08:57Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowODo1N1rOIJLrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowODo1N1rOIJLrZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTQyOQ==", "bodyText": "should we mark as internal? I was thinking back in a day that cache plugin will take existing ApolloClient and decorate it with proper execution context and setup interceptors, so user won't know existence of interceptor as it's our internal implementation abstraction.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499429", "createdAt": "2020-12-21T04:08:57Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE5MTI2", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556119126", "createdAt": "2020-12-21T04:10:15Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMDoxNVrOIJLsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMDoxNVrOIJLsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTY1Mw==", "bodyText": "Should we extract interface and inject implementation during construction time?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499653", "createdAt": "2020-12-21T04:10:15Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE5MzA5", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556119309", "createdAt": "2020-12-21T04:11:13Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMToxNFrOIJLs5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMToxNFrOIJLs5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTgxNA==", "bodyText": "nit: could you pls put arguments on separate lines", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546499814", "createdAt": "2020-12-21T04:11:14Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {\n+    override fun read(key: String, cacheHeaders: CacheHeaders): Record? {\n+      return normalizedCache.loadRecord(key, cacheHeaders)\n+    }\n+\n+    override fun read(keys: Collection<String>, cacheHeaders: CacheHeaders): Collection<Record> {\n+      return keys.mapNotNull { normalizedCache.loadRecord(it, cacheHeaders) }\n+    }\n+  }\n+\n+  override fun <D : Operation.Data> intercept(request: ApolloRequest<D>, chain: ApolloInterceptorChain): Flow<ApolloResponse<D>> {\n+    return flow {\n+      val response = readFromCache(request)\n+      if (response != null) {\n+        emit(ApolloResponse(requestUuid = request.requestUuid, response = response, executionContext = request.executionContext + CacheExecutionContext(true)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTE5NTc2", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556119576", "createdAt": "2020-12-21T04:12:28Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMjoyOFrOIJLtwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxMjoyOFrOIJLtwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDAzMg==", "bodyText": "internal?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546500032", "createdAt": "2020-12-21T04:12:28Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/CacheExecutionContext.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.ExecutionContext\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+\n+@ApolloExperimental\n+data class CacheExecutionContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTIwNDEx", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556120411", "createdAt": "2020-12-21T04:16:26Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNjoyNlrOIJLwyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNjoyNlrOIJLwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMDgxMA==", "bodyText": "As far as I remember the original idea is that interceptor get *Store implementation injected where *Store is constructed with cache implementation. So interceptor knows only about store, and has only one dependency.", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546500810", "createdAt": "2020-12-21T04:16:26Z", "author": {"login": "sav007"}, "path": "apollo-cache-interceptor/src/commonMain/kotlin/com/apollographql/apollo/interceptor/cache/ApolloCacheInterceptor.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.apollographql.apollo.interceptor.cache\n+\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.api.Response.Companion.builder\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.NoOpResolveDelegate\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.CacheKeyResolver\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.internal.CacheFieldValueResolver\n+import com.apollographql.apollo.cache.normalized.internal.CacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ReadableStore\n+import com.apollographql.apollo.cache.normalized.internal.RealCacheKeyBuilder\n+import com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer\n+import com.apollographql.apollo.cache.normalized.simple.SimpleNormalizedCache\n+import com.apollographql.apollo.interceptor.ApolloInterceptorChain\n+import com.apollographql.apollo.interceptor.ApolloRequest\n+import com.apollographql.apollo.interceptor.ApolloRequestInterceptor\n+import com.apollographql.apollo.interceptor.ApolloResponse\n+import com.apollographql.apollo.internal.response.RealResponseReader\n+import com.apollographql.apollo.internal.response.RealResponseWriter\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+\n+@ApolloExperimental\n+class ApolloCacheInterceptor : ApolloRequestInterceptor {\n+  val normalizedCache = SimpleNormalizedCache()\n+  val readableStore = object : ReadableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTIwNTc5", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556120579", "createdAt": "2020-12-21T04:17:18Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNzoxOFrOIJLxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxNzoxOFrOIJLxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMTAxNA==", "bodyText": "private?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546501014", "createdAt": "2020-12-21T04:17:18Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.apollographql.apollo.cache.normalized.simple\n+\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+\n+class SimpleNormalizedCache : NormalizedCache() {\n+  val map = mutableMapOf<String, Record>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTIwODMw", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-556120830", "createdAt": "2020-12-21T04:18:34Z", "commit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxODozNVrOIJLyZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDoxODozNVrOIJLyZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMTIyMA==", "bodyText": "internal? Also should we call it InMemoryNormalizedCache or  MapNormalizedCache?", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r546501220", "createdAt": "2020-12-21T04:18:35Z", "author": {"login": "sav007"}, "path": "apollo-normalized-cache/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/simple/SimpleNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.apollographql.apollo.cache.normalized.simple\n+\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+\n+class SimpleNormalizedCache : NormalizedCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2512343dd52a6d6e08db26e995bf62458e665352"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NTM1MzIw", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-557535320", "createdAt": "2020-12-23T03:48:30Z", "commit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo0ODozMVrOIKQUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo0ODozMVrOIKQUuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDEyMA==", "bodyText": "nit:\nfun serverUrl(serverUrl: String): Builder = apply {\n   ...\n}\n\nthe same nit for the rest APIs", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547624120", "createdAt": "2020-12-23T03:48:31Z", "author": {"login": "sav007"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "diffHunk": "@@ -50,4 +55,100 @@ class ApolloClient(\n         executionContext = executionContext + coroutineDispatcherContext\n     )\n   }\n+\n+  fun newBuilder(): Builder {\n+    return DefaultBuilder(scalarTypeAdapters)\n+        .networkTransport(networkTransport)\n+        .subscriptionNetworkTransport(subscriptionNetworkTransport)\n+        .interceptors(interceptors)\n+        .executionContext(executionContext)\n+  }\n+\n+  class DefaultBuilder(override val scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT) : Builder()\n+\n+  abstract class Builder {\n+    internal abstract val scalarTypeAdapters: ScalarTypeAdapters\n+\n+    private var networkTransport: NetworkTransport? = null\n+    private var subscriptionNetworkTransport: NetworkTransport? = null\n+    private var interceptors: List<ApolloRequestInterceptor> = emptyList()\n+    private var executionContext: ExecutionContext = ExecutionContext.Empty\n+\n+    fun serverUrl(serverUrl: String): Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NTM4Mjg2", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-557538286", "createdAt": "2020-12-23T03:50:23Z", "commit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo1MDoyM1rOIKQWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzo1MDoyM1rOIKQWXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNDU0Mg==", "bodyText": "is there a reason to have this DefaultBuilder  class, can't Builder be concrete class with scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT", "url": "https://github.com/apollographql/apollo-android/pull/2807#discussion_r547624542", "createdAt": "2020-12-23T03:50:23Z", "author": {"login": "sav007"}, "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloClient.kt", "diffHunk": "@@ -50,4 +55,100 @@ class ApolloClient(\n         executionContext = executionContext + coroutineDispatcherContext\n     )\n   }\n+\n+  fun newBuilder(): Builder {\n+    return DefaultBuilder(scalarTypeAdapters)\n+        .networkTransport(networkTransport)\n+        .subscriptionNetworkTransport(subscriptionNetworkTransport)\n+        .interceptors(interceptors)\n+        .executionContext(executionContext)\n+  }\n+\n+  class DefaultBuilder(override val scalarTypeAdapters: ScalarTypeAdapters = ScalarTypeAdapters.DEFAULT) : Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NTQxNDIx", "url": "https://github.com/apollographql/apollo-android/pull/2807#pullrequestreview-557541421", "createdAt": "2020-12-23T03:52:19Z", "commit": {"oid": "5da516e8019aef5462ed28ab6ee0f3314249c4b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5daa2231640ab65df08a7e2f528bea7728e8330", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d5daa2231640ab65df08a7e2f528bea7728e8330", "committedDate": "2020-12-23T08:59:49Z", "message": "Initial work for the multiplatform cache\n\n* Added `apollo-cache-interceptor` as a separate artifact\n* The cache is cache_first only at the moment and provided by\n  `ApolloCacheInterceptor`\n* Added CacheExecutionContext and `Response.cacheContext` to access\n  `fromCache`\n* Added `apollo-integration-kotlin`, like `apollo-integration` but\n  multiplatform. See CacheInterceptorTest for a test\n* Added `apollo-testing-support` to group useful classes for testing.\n  Ultimately, this could be exported to end users for mock/testing\npurposes\n\nNext steps:\n* Implement different fetchers\n* Make the cache work with the streaming parser\n\nmake compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23196762a0d814862adc4a2e86eaf2212a8963f2", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/23196762a0d814862adc4a2e86eaf2212a8963f2", "committedDate": "2020-12-23T09:00:08Z", "message": "make the normalized cache injectable and private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32fc605607afaa6a2cb924e8c3dbfc8080db0a4", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/b32fc605607afaa6a2cb924e8c3dbfc8080db0a4", "committedDate": "2020-12-23T09:00:08Z", "message": "put arguments on multiple lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ac7e34b994a59527416e0daf775a3786aafebe", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d0ac7e34b994a59527416e0daf775a3786aafebe", "committedDate": "2020-12-23T09:00:08Z", "message": "make ApolloCacheInterceptor depend on Store only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f4f8bce854032e478d14c5b85c4ef3c10d7dbe1", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/1f4f8bce854032e478d14c5b85c4ef3c10d7dbe1", "committedDate": "2020-12-23T09:00:08Z", "message": "make private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38e79696d483097d0be74e370137546203c352bc", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/38e79696d483097d0be74e370137546203c352bc", "committedDate": "2020-12-23T09:00:08Z", "message": "rename to `MapNormalizedCache`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e68647add7c9e442bba15bc22739e7ea2eceb7", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/43e68647add7c9e442bba15bc22739e7ea2eceb7", "committedDate": "2020-12-23T09:00:08Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "754e2983b031cf8bf867c216b3fe4e3ce2e158d6", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/754e2983b031cf8bf867c216b3fe4e3ce2e158d6", "committedDate": "2020-12-23T09:00:08Z", "message": "fix some more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d64481c518ecf1d87560d2351afa2976817e456b", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d64481c518ecf1d87560d2351afa2976817e456b", "committedDate": "2020-12-23T09:00:08Z", "message": "introduce ApolloClient.Builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e5f76c8398026587e66ddd8e694e7f1a3f348bb", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/9e5f76c8398026587e66ddd8e694e7f1a3f348bb", "committedDate": "2020-12-23T09:00:09Z", "message": "add ApolloClient.Builder.normalizedCache()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e65950f4d9f64e5da0e5e4af19281c293e8069d3", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/e65950f4d9f64e5da0e5e4af19281c293e8069d3", "committedDate": "2020-12-23T09:00:09Z", "message": "Opt-in the experimental coroutines API\n\nDo not propagate the experimental annotation, the experimental usages\nare implementation details and we already have @ApolloExperimental for\nour experimental stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be079883bc0015d4ac8a31f2511c906fe20bc6f", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/9be079883bc0015d4ac8a31f2511c906fe20bc6f", "committedDate": "2020-12-23T09:00:09Z", "message": "update to new coroutine API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1fbb435464633bea458a46c0034b7b56ceacc44", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d1fbb435464633bea458a46c0034b7b56ceacc44", "committedDate": "2020-12-23T09:00:09Z", "message": "use apply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23cd570c0d17abadb020a19d1db4bd6ac81bf58d", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/23cd570c0d17abadb020a19d1db4bd6ac81bf58d", "committedDate": "2020-12-23T09:00:09Z", "message": "make `Builder` instanciable directly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4d643ff6fd8d7124b980f2e54a7f9d9fc012c45", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/d4d643ff6fd8d7124b980f2e54a7f9d9fc012c45", "committedDate": "2020-12-23T08:51:03Z", "message": "make `Builder` instanciable directly"}, "afterCommit": {"oid": "23cd570c0d17abadb020a19d1db4bd6ac81bf58d", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/23cd570c0d17abadb020a19d1db4bd6ac81bf58d", "committedDate": "2020-12-23T09:00:09Z", "message": "make `Builder` instanciable directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406c2c0282408bba880080ed3e1f920ef4ca964b", "author": {"user": {"login": "martinbonnin", "name": "Martin Bonnin"}}, "url": "https://github.com/apollographql/apollo-android/commit/406c2c0282408bba880080ed3e1f920ef4ca964b", "committedDate": "2020-12-23T09:24:57Z", "message": "use Builder instead of DefaultBuilder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}