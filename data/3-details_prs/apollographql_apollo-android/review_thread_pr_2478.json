{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjExMzY2", "number": 2478, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NDo0N1rOESfeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NDo0N1rOESfeNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI1NDYyOnYy", "diffSide": "RIGHT", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/ast/CodeGenerationAstBuilder.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NDo0N1rOG3s88w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NDo0N1rOG3s88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTM2Mw==", "bodyText": "That will most likely conflict with #2476 since it takes a operationOutput instead of an operationIdGenerator but I can rebase once this is merged.", "url": "https://github.com/apollographql/apollo-android/pull/2478#discussion_r461061363", "createdAt": "2020-07-27T17:44:47Z", "author": {"login": "martinbonnin"}, "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/ast/CodeGenerationAstBuilder.kt", "diffHunk": "@@ -0,0 +1,286 @@\n+package com.apollographql.apollo.compiler.next.ast\n+\n+import com.apollographql.apollo.api.internal.QueryDocumentMinifier\n+import com.apollographql.apollo.compiler.OperationIdGenerator\n+import com.apollographql.apollo.compiler.ast.CustomTypes\n+import com.apollographql.apollo.compiler.escapeKotlinReservedWord\n+import com.apollographql.apollo.compiler.ir.CodeGenerationIR\n+import com.apollographql.apollo.compiler.ir.Operation\n+import com.apollographql.apollo.compiler.ir.TypeDeclaration\n+import com.apollographql.apollo.compiler.parser.introspection.IntrospectionSchema\n+import com.apollographql.apollo.compiler.parser.introspection.resolveType\n+import com.apollographql.apollo.compiler.ir.Fragment as IrFragment\n+\n+internal fun CodeGenerationIR.buildCodeGenerationAst(\n+    schema: IntrospectionSchema,\n+    customTypeMap: CustomTypes,\n+    typesPackageName: String,\n+    fragmentsPackage: String,\n+    useSemanticNaming: Boolean,\n+    operationIdGenerator: OperationIdGenerator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ce0974ac87704759723af08475f7753c1f5377"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2999, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}