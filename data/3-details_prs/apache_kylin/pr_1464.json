{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjE4MjE2", "number": 1464, "title": "KYLIN-4800 Add canary tool for sparder-context", "bodyText": "Proposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\nTypes of changes\nWhat types of changes does your code introduce to Kylin?\nPut an x in the boxes that apply\n\n Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n Documentation Update (if none of the other choices apply)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on Kylin's jira, and have described the bug/feature there in detail\n Commit messages in my PR start with the related jira ID, like \"KYLIN-0000 Make Kylin project open-source\"\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I will prepare another pr against the document branch\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at user@kylin or dev@kylin by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-10-28T01:49:38Z", "url": "https://github.com/apache/kylin/pull/1464", "merged": true, "mergeCommit": {"oid": "1d43e0a4ac81648f89666365e06e2519ae53271b"}, "closed": true, "closedAt": "2020-10-29T03:30:31Z", "author": {"login": "zhangayqian"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW382qgFqTUxODM2NTcxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXJn6XAFqTUxOTMwNjIzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzY1NzEx", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518365711", "createdAt": "2020-10-28T06:54:48Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1NDo0OVrOHpcK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1NDo0OVrOHpcK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNTE4OQ==", "bodyText": "This line should be indented .", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513215189", "createdAt": "2020-10-28T06:54:49Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala", "diffHunk": "@@ -194,6 +195,10 @@ object SparderContext extends Logging {\n         logInfo(\"Initializing Spark, waiting for done.\")\n         initializingThread.join()\n       }\n+\n+      if (System.getProperty(\"spark.local\") ne \"true\")\n+      //monitor sparder\n+      SparderContextCanary.init()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzY3MTU5", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518367159", "createdAt": "2020-10-28T06:58:04Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1ODowNVrOHpcPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1ODowNVrOHpcPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNjQxMg==", "bodyText": "Use new ArrayList<>() instead.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513216412", "createdAt": "2020-10-28T06:58:05Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {\n+                        SparderContext.setSparkSession(KylinSparkEnv.getSparkSession());\n+                    } else {\n+                        SparderContext.restartSpark();\n+                    }\n+                } catch (Throwable th) {\n+                    logger.error(\"Restart sparder context failed.\", th);\n+                }\n+                sparderRestarting = false;\n+            }\n+        } catch (Throwable th) {\n+            logger.error(\"Error when monitoring Sparder.\", th);\n+        }\n+    }\n+\n+    // for canary\n+    private static JavaFutureAction<Long> numberCount(JavaSparkContext jsc) {\n+        List<Integer> list = new ArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzY5NTM3", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518369537", "createdAt": "2020-10-28T07:03:25Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzoyNVrOHpcXOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzoyNVrOHpcXOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODM2MA==", "bodyText": "Add @SuppressWarnings(\"unused\") to suppress warning in IDE, or remove this method.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218360", "createdAt": "2020-10-28T07:03:25Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzY5Njgy", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518369682", "createdAt": "2020-10-28T07:03:46Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzo0NlrOHpcXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzo0NlrOHpcXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODQ3Mg==", "bodyText": "Same here~", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218472", "createdAt": "2020-10-28T07:03:46Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzcwMTk1", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518370195", "createdAt": "2020-10-28T07:04:49Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNDo0OVrOHpcZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNDo0OVrOHpcZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODkwNQ==", "bodyText": "Use == or equals ?", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218905", "createdAt": "2020-10-28T07:04:49Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzcxMDgz", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518371083", "createdAt": "2020-10-28T07:06:42Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNjo0MlrOHpccNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNjo0MlrOHpccNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxOTYzOQ==", "bodyText": "I wonder if we can see any short but clear comments here for Kylin user.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513219639", "createdAt": "2020-10-28T07:06:42Z", "author": {"login": "hit-lacus"}, "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "diffHunk": "@@ -2879,6 +2879,18 @@ public boolean isAutoStartSparder() {\n         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context\", \"false\"));\n     }\n \n+    public int getSparderCanaryErrorResponseMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzgyOTI3", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-518382927", "createdAt": "2020-10-28T07:30:39Z", "commit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "author": {"user": {"login": "zhangayqian", "name": "Yaqian Zhang"}}, "url": "https://github.com/apache/kylin/commit/9d745e5b3743b13f6cfb252b4396d5c6129d0510", "committedDate": "2020-10-28T08:12:11Z", "message": "KYLIN-4800 Add canary tool for sparder-context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311", "author": {"user": {"login": "zhangayqian", "name": "Yaqian Zhang"}}, "url": "https://github.com/apache/kylin/commit/daff34fcc4ac0327c9038158509bc52d8c543311", "committedDate": "2020-10-28T01:43:47Z", "message": "KYLIN-4800 Add canary tool for sparder-context"}, "afterCommit": {"oid": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "author": {"user": {"login": "zhangayqian", "name": "Yaqian Zhang"}}, "url": "https://github.com/apache/kylin/commit/9d745e5b3743b13f6cfb252b4396d5c6129d0510", "committedDate": "2020-10-28T08:12:11Z", "message": "KYLIN-4800 Add canary tool for sparder-context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzA2MjMy", "url": "https://github.com/apache/kylin/pull/1464#pullrequestreview-519306232", "createdAt": "2020-10-29T03:30:14Z", "commit": {"oid": "9d745e5b3743b13f6cfb252b4396d5c6129d0510"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}