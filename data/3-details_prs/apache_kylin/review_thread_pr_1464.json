{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjE4MjE2", "number": 1464, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1NDo0OVrOEyrBvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNjo0MlrOEyrNOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTY5MjEzOnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1NDo0OVrOHpcK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1NDo0OVrOHpcK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNTE4OQ==", "bodyText": "This line should be indented .", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513215189", "createdAt": "2020-10-28T06:54:49Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala", "diffHunk": "@@ -194,6 +195,10 @@ object SparderContext extends Logging {\n         logInfo(\"Initializing Spark, waiting for done.\")\n         initializingThread.join()\n       }\n+\n+      if (System.getProperty(\"spark.local\") ne \"true\")\n+      //monitor sparder\n+      SparderContextCanary.init()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTcwMDIwOnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1ODowNVrOHpcPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjo1ODowNVrOHpcPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNjQxMg==", "bodyText": "Use new ArrayList<>() instead.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513216412", "createdAt": "2020-10-28T06:58:05Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {\n+                        SparderContext.setSparkSession(KylinSparkEnv.getSparkSession());\n+                    } else {\n+                        SparderContext.restartSpark();\n+                    }\n+                } catch (Throwable th) {\n+                    logger.error(\"Restart sparder context failed.\", th);\n+                }\n+                sparderRestarting = false;\n+            }\n+        } catch (Throwable th) {\n+            logger.error(\"Error when monitoring Sparder.\", th);\n+        }\n+    }\n+\n+    // for canary\n+    private static JavaFutureAction<Long> numberCount(JavaSparkContext jsc) {\n+        List<Integer> list = new ArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTcxMzE0OnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzoyNVrOHpcXOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzoyNVrOHpcXOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODM2MA==", "bodyText": "Add @SuppressWarnings(\"unused\") to suppress warning in IDE, or remove this method.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218360", "createdAt": "2020-10-28T07:03:25Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTcxMzg3OnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzo0NlrOHpcXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowMzo0NlrOHpcXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODQ3Mg==", "bodyText": "Same here~", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218472", "createdAt": "2020-10-28T07:03:46Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTcxNjY4OnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNDo0OVrOHpcZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNDo0OVrOHpcZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODkwNQ==", "bodyText": "Use == or equals ?", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218905", "createdAt": "2020-10-28T07:04:49Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTcyMTUyOnYy", "diffSide": "RIGHT", "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNjo0MlrOHpccNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzowNjo0MlrOHpccNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxOTYzOQ==", "bodyText": "I wonder if we can see any short but clear comments here for Kylin user.", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513219639", "createdAt": "2020-10-28T07:06:42Z", "author": {"login": "hit-lacus"}, "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "diffHunk": "@@ -2879,6 +2879,18 @@ public boolean isAutoStartSparder() {\n         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context\", \"false\"));\n     }\n \n+    public int getSparderCanaryErrorResponseMs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daff34fcc4ac0327c9038158509bc52d8c543311"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1555, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}