{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODE5MDM5", "number": 1334, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MzozN1rOETUYNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MzozN1rOETUYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkyMjc2OnYy", "diffSide": "RIGHT", "path": "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MzozN1rOG4_DCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo1ODoyNVrOG5f7NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjQxMA==", "bodyText": "How about making it possible to use unbounded LinkedBlockingQueue like following?\nthis.recordsQueue = maxQueueSize <= 0 ? new LinkedBlockingQueue<>() : new LinkedBlockingQueue<>(maxQueueSize);", "url": "https://github.com/apache/kylin/pull/1334#discussion_r462406410", "createdAt": "2020-07-29T15:53:37Z", "author": {"login": "kyotoYaho"}, "path": "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java", "diffHunk": "@@ -60,14 +60,15 @@ public BlockingReservoir(int minReportSize, int maxReportSize) {\n     }\n \n     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime) {\n-        this(minReportSize, maxReportSize, maxReportSize, MAX_QUEUE_SIZE);\n+        this(minReportSize, maxReportSize, maxReportTime, MAX_QUEUE_SIZE);\n     }\n \n     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime, int maxQueueSize) {\n         Preconditions.checkArgument(minReportSize > 0, \"minReportSize should be larger than 0\");\n         Preconditions.checkArgument(maxReportSize >= minReportSize,\n                 \"maxReportSize should not be less than minBatchSize\");\n         Preconditions.checkArgument(maxReportTime > 0, \"maxReportTime should be larger than 0\");\n+        Preconditions.checkArgument(maxQueueSize > 0, \"maxQueueSize should be larger than 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19bde8ef620a79570894fcf513aa317dca6de04d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0NTA3Nw==", "bodyText": "Good advice!", "url": "https://github.com/apache/kylin/pull/1334#discussion_r462945077", "createdAt": "2020-07-30T11:58:25Z", "author": {"login": "hit-lacus"}, "path": "core-metrics/src/main/java/org/apache/kylin/metrics/lib/impl/BlockingReservoir.java", "diffHunk": "@@ -60,14 +60,15 @@ public BlockingReservoir(int minReportSize, int maxReportSize) {\n     }\n \n     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime) {\n-        this(minReportSize, maxReportSize, maxReportSize, MAX_QUEUE_SIZE);\n+        this(minReportSize, maxReportSize, maxReportTime, MAX_QUEUE_SIZE);\n     }\n \n     public BlockingReservoir(int minReportSize, int maxReportSize, int maxReportTime, int maxQueueSize) {\n         Preconditions.checkArgument(minReportSize > 0, \"minReportSize should be larger than 0\");\n         Preconditions.checkArgument(maxReportSize >= minReportSize,\n                 \"maxReportSize should not be less than minBatchSize\");\n         Preconditions.checkArgument(maxReportTime > 0, \"maxReportTime should be larger than 0\");\n+        Preconditions.checkArgument(maxQueueSize > 0, \"maxQueueSize should be larger than 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjQxMA=="}, "originalCommit": {"oid": "19bde8ef620a79570894fcf513aa317dca6de04d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1648, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}