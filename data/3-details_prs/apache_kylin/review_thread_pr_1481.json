{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyODExMTUy", "number": 1481, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjozMjoyOFrOE62UCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1NDo1MFrOE9lTaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTQyNzMxOnYy", "diffSide": "RIGHT", "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjozMjoyOFrOH2KPaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjozMjoyOFrOH2KPaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1MjkzOQ==", "bodyText": "remove this blank line.", "url": "https://github.com/apache/kylin/pull/1481#discussion_r526552939", "createdAt": "2020-11-19T02:32:28Z", "author": {"login": "zzcclp"}, "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "diffHunk": "@@ -2803,10 +2822,15 @@ public boolean isSparkEngineEnabled() {\n         return Boolean.parseBoolean(getOptional(\"kylin.query.spark-engine.enabled\", \"true\"));\n     }\n \n-    public String getLogSparkPropertiesFile() {\n-        return getLogPropertyFile(\"kylin-parquet-log4j.properties\");\n+    public String getLogSparkDriverPropertiesFile() {\n+        return getLogPropertyFile(\"spark-driver-log4j.properties\");\n+    }\n+\n+    public String getLogSparkExecutorPropertiesFile() {\n+        return getLogPropertyFile(\"spark-executor-log4j.properties\");\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTU2NzgxOnYy", "diffSide": "RIGHT", "path": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzozNzo0OVrOH2Lfxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzozODo1M1rOH2Lgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3MzUxMQ==", "bodyText": "Before combine project with stepId, please check if it is vaild and remove any illegal character.", "url": "https://github.com/apache/kylin/pull/1481#discussion_r526573511", "createdAt": "2020-11-19T03:37:49Z", "author": {"login": "hit-lacus"}, "path": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "diffHunk": "@@ -160,17 +168,41 @@ public JobInstance get(@PathVariable String jobId) {\n      * @return\n      * @throws IOException\n      */\n+\n     @RequestMapping(value = \"/{jobId}/steps/{stepId}/output\", method = { RequestMethod.GET }, produces = {\n             \"application/json\" })\n     @ResponseBody\n     public Map<String, String> getStepOutput(@PathVariable String jobId, @PathVariable String stepId) {\n         Map<String, String> result = new HashMap<String, String>();\n         result.put(\"jobId\", jobId);\n         result.put(\"stepId\", String.valueOf(stepId));\n-        result.put(\"cmd_output\", jobService.getExecutableManager().getOutput(stepId).getVerboseMsg());\n+        result.put(\"cmd_output\", jobService.getJobOutput(jobId, stepId));\n         return result;\n     }\n \n+    /**\n+     * Download a job step output from hdfs\n+     * @param jobId\n+     * @param stepId\n+     * @param project\n+     * @param response\n+     * @return\n+     */\n+    @RequestMapping(value = \"/{job_id:.+}/steps/{step_id:.+}/log\", method = { RequestMethod.GET }, produces = { \"application/json\" })\n+    @ResponseBody\n+    public EnvelopeResponse<String> downloadLogFile(@PathVariable(\"job_id\") String jobId,\n+                                                    @PathVariable(\"step_id\") String stepId, @RequestParam(value = \"project\") String project,\n+                                                    HttpServletResponse response) throws IOException {\n+        checkRequiredArg(\"job_id\", jobId);\n+        checkRequiredArg(\"step_id\", stepId);\n+        checkRequiredArg(\"project\", project);\n+        String downloadFilename = String.format(Locale.ROOT, \"%s_%s.log\", project, stepId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3Mzc1MA==", "bodyText": "Please check report from LGTM or search \"HTTP Response Splitting\" for background.", "url": "https://github.com/apache/kylin/pull/1481#discussion_r526573750", "createdAt": "2020-11-19T03:38:53Z", "author": {"login": "hit-lacus"}, "path": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "diffHunk": "@@ -160,17 +168,41 @@ public JobInstance get(@PathVariable String jobId) {\n      * @return\n      * @throws IOException\n      */\n+\n     @RequestMapping(value = \"/{jobId}/steps/{stepId}/output\", method = { RequestMethod.GET }, produces = {\n             \"application/json\" })\n     @ResponseBody\n     public Map<String, String> getStepOutput(@PathVariable String jobId, @PathVariable String stepId) {\n         Map<String, String> result = new HashMap<String, String>();\n         result.put(\"jobId\", jobId);\n         result.put(\"stepId\", String.valueOf(stepId));\n-        result.put(\"cmd_output\", jobService.getExecutableManager().getOutput(stepId).getVerboseMsg());\n+        result.put(\"cmd_output\", jobService.getJobOutput(jobId, stepId));\n         return result;\n     }\n \n+    /**\n+     * Download a job step output from hdfs\n+     * @param jobId\n+     * @param stepId\n+     * @param project\n+     * @param response\n+     * @return\n+     */\n+    @RequestMapping(value = \"/{job_id:.+}/steps/{step_id:.+}/log\", method = { RequestMethod.GET }, produces = { \"application/json\" })\n+    @ResponseBody\n+    public EnvelopeResponse<String> downloadLogFile(@PathVariable(\"job_id\") String jobId,\n+                                                    @PathVariable(\"step_id\") String stepId, @RequestParam(value = \"project\") String project,\n+                                                    HttpServletResponse response) throws IOException {\n+        checkRequiredArg(\"job_id\", jobId);\n+        checkRequiredArg(\"step_id\", stepId);\n+        checkRequiredArg(\"project\", project);\n+        String downloadFilename = String.format(Locale.ROOT, \"%s_%s.log\", project, stepId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3MzUxMQ=="}, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTg0NTgwOnYy", "diffSide": "RIGHT", "path": "core-common/src/main/resources/kylin-defaults.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjowMzoyNVrOH2N9Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDo1MjowNlrOH25MVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMzc2Mg==", "bodyText": "kylin.engine.spark-conf or kylin.engine.spark-conf ?", "url": "https://github.com/apache/kylin/pull/1481#discussion_r526613762", "createdAt": "2020-11-19T06:03:25Z", "author": {"login": "hit-lacus"}, "path": "core-common/src/main/resources/kylin-defaults.properties", "diffHunk": "@@ -283,6 +287,7 @@ kylin.query.spark-conf.spark.serializer=org.apache.spark.serializer.JavaSerializ\n #kylin.query.spark-conf.spark.sql.shuffle.partitions=40\n #kylin.query.spark-conf.spark.yarn.jars=hdfs://localhost:9000/spark2_jars/*\n \n+kylin.storage.columnar.spark-conf.spark.executor.extraJavaOptions=-Dhdp.version=current -Dlog4j.configuration=spark-executor-log4j.properties -Dlog4j.debug -Dkylin.hdfs.working.dir=${kylin.env.hdfs-working-dir} -Dkylin.metadata.identifier=${kylin.metadata.url.identifier} -Dkylin.spark.category=sparder -Dkylin.spark.project=${job.project} -XX:MaxDirectMemorySize=896M", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMyMjE5OQ==", "bodyText": "Please replace 'kylin.storage.columnar' with 'kylin.query'.", "url": "https://github.com/apache/kylin/pull/1481#discussion_r527322199", "createdAt": "2020-11-20T00:52:06Z", "author": {"login": "zzcclp"}, "path": "core-common/src/main/resources/kylin-defaults.properties", "diffHunk": "@@ -283,6 +287,7 @@ kylin.query.spark-conf.spark.serializer=org.apache.spark.serializer.JavaSerializ\n #kylin.query.spark-conf.spark.sql.shuffle.partitions=40\n #kylin.query.spark-conf.spark.yarn.jars=hdfs://localhost:9000/spark2_jars/*\n \n+kylin.storage.columnar.spark-conf.spark.executor.extraJavaOptions=-Dhdp.version=current -Dlog4j.configuration=spark-executor-log4j.properties -Dlog4j.debug -Dkylin.hdfs.working.dir=${kylin.env.hdfs-working-dir} -Dkylin.metadata.identifier=${kylin.metadata.url.identifier} -Dkylin.spark.category=sparder -Dkylin.spark.project=${job.project} -XX:MaxDirectMemorySize=896M", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMzc2Mg=="}, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjE4OTkwOnYy", "diffSide": "RIGHT", "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODoxMDo0MVrOH2RF2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODoxMDo0MVrOH2RF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2NTE3Nw==", "bodyText": "What does kylin.log.spark-driver-properties-file means?", "url": "https://github.com/apache/kylin/pull/1481#discussion_r526665177", "createdAt": "2020-11-19T08:10:41Z", "author": {"login": "hit-lacus"}, "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "diffHunk": "@@ -258,6 +258,9 @@ final public void setProperty(String key, String value) {\n \n     final protected void reloadKylinConfig(Properties properties) {\n         this.properties = BCC.check(properties);\n+        setProperty(\"kylin.metadata.url.identifier\", getMetadataUrlPrefix());\n+        setProperty(\"kylin.log.spark-driver-properties-file\", getLogSparkDriverPropertiesFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzAxMTkzOnYy", "diffSide": "RIGHT", "path": "build/conf/spark-executor-log4j.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0NzoxN1rOH2_lzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0NzoxN1rOH2_lzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQyNzAyMw==", "bodyText": "SparkExecutorHdfsLogAppender or SparkExecutorHdfsAppender ?", "url": "https://github.com/apache/kylin/pull/1481#discussion_r527427023", "createdAt": "2020-11-20T05:47:17Z", "author": {"login": "hit-lacus"}, "path": "build/conf/spark-executor-log4j.properties", "diffHunk": "@@ -0,0 +1,46 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# It's called spark-executor-log4j.properties so that it won't distract users from the other more important log4j config file: kylin-server-log4j.properties\n+# enable this by -Dlog4j.configuration=spark-executor-log4j.properties\n+log4j.rootLogger=INFO,stderr,hdfs\n+\n+log4j.appender.stderr=org.apache.log4j.ConsoleAppender\n+log4j.appender.stderr.layout=org.apache.kylin.common.logging.SensitivePatternLayout\n+log4j.appender.stderr.target=System.err\n+#Don't add line number (%L) as it's too costly!\n+log4j.appender.stderr.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2} : %m%n\n+\n+\n+log4j.appender.hdfs=org.apache.kylin.engine.spark.common.logging.SparkExecutorHdfsLogAppender", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzAxNDk3OnYy", "diffSide": "RIGHT", "path": "build/conf/spark-executor-log4j.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0Nzo1OVrOH2_oRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTo0Nzo1OVrOH2_oRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQyNzY1NA==", "bodyText": "Should be org.apache.kylin.common.logging.SensitivePatternLayout .", "url": "https://github.com/apache/kylin/pull/1481#discussion_r527427654", "createdAt": "2020-11-20T05:47:59Z", "author": {"login": "hit-lacus"}, "path": "build/conf/spark-executor-log4j.properties", "diffHunk": "@@ -0,0 +1,46 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# It's called spark-executor-log4j.properties so that it won't distract users from the other more important log4j config file: kylin-server-log4j.properties\n+# enable this by -Dlog4j.configuration=spark-executor-log4j.properties\n+log4j.rootLogger=INFO,stderr,hdfs\n+\n+log4j.appender.stderr=org.apache.log4j.ConsoleAppender\n+log4j.appender.stderr.layout=org.apache.kylin.common.logging.SensitivePatternLayout\n+log4j.appender.stderr.target=System.err\n+#Don't add line number (%L) as it's too costly!\n+log4j.appender.stderr.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2} : %m%n\n+\n+\n+log4j.appender.hdfs=org.apache.kylin.engine.spark.common.logging.SparkExecutorHdfsLogAppender\n+\n+log4j.appender.hdfs.hdfsWorkingDir=${kylin.hdfs.working.dir}\n+log4j.appender.hdfs.metadataIdentifier=${kylin.metadata.identifier}\n+log4j.appender.hdfs.category=${kylin.spark.category}\n+log4j.appender.hdfs.identifier=${kylin.spark.identifier}\n+log4j.appender.hdfs.jobName=${kylin.spark.jobName}\n+log4j.appender.hdfs.project=${kylin.spark.project}\n+\n+log4j.appender.hdfs.rollingPeriod=5\n+log4j.appender.hdfs.logQueueCapacity=5000\n+#flushPeriod count as millis\n+log4j.appender.hdfs.flushInterval=5000\n+\n+log4j.appender.hdfs.layout=org.apache.kylin.engine.spark.common.logging.SensitivePatternLayout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzU4MjIwOnYy", "diffSide": "RIGHT", "path": "core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyNzozMFrOH3FSYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyNzozMFrOH3FSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyMDM1Mg==", "bodyText": "I can not understand here.", "url": "https://github.com/apache/kylin/pull/1481#discussion_r527520352", "createdAt": "2020-11-20T08:27:30Z", "author": {"login": "hit-lacus"}, "path": "core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java", "diffHunk": "@@ -587,7 +596,7 @@ private static boolean isRetryableException(String exceptionName) {\n \n     public final String getProject() {\n         if (project == null) {\n-            throw new IllegalStateException(\"project is not set for abstract executable \" + getId());\n+            logger.error(\"project is not set for abstract executable \" + getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e50ff5242e84d2537bd850eba31774596a6571"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDI1MzczOnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/SparkExecutorHdfsAppender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNToxODoyOFrOH3_niQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNToxODoyOFrOH3_niQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3NjA0MQ==", "bodyText": "Modify to new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault()) .", "url": "https://github.com/apache/kylin/pull/1481#discussion_r528476041", "createdAt": "2020-11-23T05:18:28Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/SparkExecutorHdfsAppender.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.common.logging;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.apache.spark.SparkEnv;\n+import org.apache.spark.deploy.yarn.YarnSparkHadoopUtil;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class SparkExecutorHdfsAppender extends AbstractHdfsLogAppender {\n+\n+    private static final long A_DAY_MILLIS = 24 * 60 * 60 * 1000L;\n+    private static final long A_HOUR_MILLIS = 60 * 60 * 1000L;\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f92f6f2c8ceb95971138ac489e5792ce84bf44e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDA5NzY4OnYy", "diffSide": "RIGHT", "path": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1NDo1MFrOH6WNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1NDo1MFrOH6WNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0MzQxOA==", "bodyText": "Totally useless comment!", "url": "https://github.com/apache/kylin/pull/1481#discussion_r530943418", "createdAt": "2020-11-26T10:54:50Z", "author": {"login": "hit-lacus"}, "path": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "diffHunk": "@@ -198,6 +201,22 @@ public JobInstance get(@PathVariable String jobId) {\n         return new EnvelopeResponse<>(ResponseCode.CODE_SUCCESS, \"\", \"\");\n     }\n \n+    /**\n+     * RPC Call\n+     *\n+     * @param sparkJobUpdateRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5490d236ee811971f2520852ef92fa84b06046"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1563, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}