{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzQ0ODU3", "number": 1485, "title": "KYLIN-4818 Support Cube Planner Phase One in Kylin 4", "bodyText": "Proposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue.\nTypes of changes\nWhat types of changes does your code introduce to Kylin?\nPut an x in the boxes that apply\n\n Bugfix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n Documentation Update (if none of the other choices apply)\n\nChecklist\nPut an x in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code.\n\n I have create an issue on Kylin's jira, and have described the bug/feature there in detail\n Commit messages in my PR start with the related jira ID, like \"KYLIN-0000 Make Kylin project open-source\"\n Compiling and unit tests pass locally with my changes\n I have added tests that prove my fix is effective or that my feature works\n If this change need a document change, I will prepare another pr against the document branch\n Any dependent changes have been merged\n\nFurther comments\nIf this is a relatively large or complex change, kick off the discussion at user@kylin or dev@kylin by explaining why you chose the solution you did and what alternatives you considered, etc...", "createdAt": "2020-11-23T13:48:46Z", "url": "https://github.com/apache/kylin/pull/1485", "merged": true, "mergeCommit": {"oid": "af8c8fee7c98d7fb4b3ccd594ed0e8b200ff3e64"}, "closed": true, "closedAt": "2021-01-04T06:04:52Z", "author": {"login": "hit-lacus"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfhQx8gBqjQwMzA2MzA0Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkw06mgBqjQwOTQzNjczNzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c7f54f0c8e2b1852a336eded00873147f164e3c", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/6c7f54f0c8e2b1852a336eded00873147f164e3c", "committedDate": "2020-11-23T13:47:56Z", "message": "KYLIN-4818 Calculate cuboid rowcount via HLL"}, "afterCommit": {"oid": "cad8705cdbe814e764e56cd96dd32dab7be32041", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/cad8705cdbe814e764e56cd96dd32dab7be32041", "committedDate": "2020-11-24T03:20:44Z", "message": "KYLIN-4818 Calculate cuboid rowcount via HLL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cad8705cdbe814e764e56cd96dd32dab7be32041", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/cad8705cdbe814e764e56cd96dd32dab7be32041", "committedDate": "2020-11-24T03:20:44Z", "message": "KYLIN-4818 Calculate cuboid rowcount via HLL"}, "afterCommit": {"oid": "e750fffe071444a4dad8c375b9419cbcb3564eec", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/e750fffe071444a4dad8c375b9419cbcb3564eec", "committedDate": "2020-11-24T06:11:42Z", "message": "KYLIN-4818 Calculate cuboid rowcount via HLL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6742f3a81475b351e2af86085cd5c4a22564286", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/b6742f3a81475b351e2af86085cd5c4a22564286", "committedDate": "2020-12-02T07:26:42Z", "message": "KYLIN-4818 Support Cube Planner Phase One in Kylin 4\n\n- Use Spark to calculate cuboid's HllCounter for the first segment\n- Re-enable Cube planner by default\n- Change default precision from 10 to 14 for HLLCounter"}, "afterCommit": {"oid": "909ba43fc31fd53d6e019924dc2fa63f5553b2aa", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/909ba43fc31fd53d6e019924dc2fa63f5553b2aa", "committedDate": "2020-12-03T10:38:03Z", "message": "KYLIN-4818 Persist metadata in SparkExecutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e2a587ecbbb28c3007305c8709c6fa8fb25c6e", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/d5e2a587ecbbb28c3007305c8709c6fa8fb25c6e", "committedDate": "2020-12-05T09:36:12Z", "message": "KYLIN-4818 Calculate cuboid rowcount via HLL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f04ca5156a2b72c2094ba7d8b4a433afa80c41", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/40f04ca5156a2b72c2094ba7d8b4a433afa80c41", "committedDate": "2020-12-05T09:36:12Z", "message": "KYLIN-4818 Support Cube Planner Phase One in Kylin 4\n\n- Use Spark to calculate cuboid's HllCounter for the first segment\n- Re-enable Cube planner by default\n- Change default precision from 10 to 14 for HLLCounter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3291a3553e7a866e8d05f47a7f4aad1ebf772c7d", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/3291a3553e7a866e8d05f47a7f4aad1ebf772c7d", "committedDate": "2020-12-05T09:36:12Z", "message": "KYLIN-4818 Persist metadata in SparkExecutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e13c8857700fd4d1c4e4daede6600562c62d494", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/2e13c8857700fd4d1c4e4daede6600562c62d494", "committedDate": "2020-12-07T13:30:43Z", "message": "KYLIN-4818 Performance profile for CuboidStatisticsJob"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "909ba43fc31fd53d6e019924dc2fa63f5553b2aa", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/909ba43fc31fd53d6e019924dc2fa63f5553b2aa", "committedDate": "2020-12-03T10:38:03Z", "message": "KYLIN-4818 Persist metadata in SparkExecutable"}, "afterCommit": {"oid": "2e13c8857700fd4d1c4e4daede6600562c62d494", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/2e13c8857700fd4d1c4e4daede6600562c62d494", "committedDate": "2020-12-07T13:30:43Z", "message": "KYLIN-4818 Performance profile for CuboidStatisticsJob"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzE2NDk0", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-546316494", "createdAt": "2020-12-07T16:27:21Z", "commit": {"oid": "2e13c8857700fd4d1c4e4daede6600562c62d494"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoyNzoyMVrOIAvI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoyNzoyMVrOIAvI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0MzIyNQ==", "bodyText": "If we have 10 thousand cuboid to be statistics, we will call Long.toString 10 thousand times and create 10 thousand String objects. Is it the cause of bad performance ?", "url": "https://github.com/apache/kylin/pull/1485#discussion_r537643225", "createdAt": "2020-12-07T16:27:21Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(String, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {\n+  private val info = mutable.Map[String, AggInfo]()\n+  private var allCuboidsBitSet: Array[Array[Integer]] = Array()\n+  private val hf: HashFunction = Hashing.murmur3_128\n+  private val rowHashCodesLong = new Array[Long](rkc)\n+  private var idx = 0\n+  private var meter1 = 0L\n+  private var meter2 = 0L\n+  private var startMills = 0L\n+  private var endMills = 0L\n+\n+\n+  def statisticsWithinPartition(rows: Iterator[Row]): Iterator[AggInfo] = {\n+    init()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition1-\" + System.currentTimeMillis())\n+    rows.foreach(update)\n+    printStat()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition2-\" + System.currentTimeMillis())\n+    info.valuesIterator\n+  }\n+\n+  def init(): Unit = {\n+    println(\"CuboidStatisticsJob-Init1-\" + System.currentTimeMillis())\n+    allCuboidsBitSet = getCuboidBitSet(ids, rkc)\n+    ids.foreach(i => info.put(i.toString, AggInfo(i.toString)))\n+    println(\"CuboidStatisticsJob-Init2-\" + System.currentTimeMillis())\n+  }\n+\n+  def update(r: Row): Unit = {\n+    idx += 1\n+    if (idx <= 5)\n+      println(r)\n+    updateCuboid(r)\n+  }\n+\n+  def updateCuboid(r: Row): Unit = {\n+    // generate hash for each row key column\n+    startMills = System.currentTimeMillis()\n+    var idx = 0\n+    while (idx < rkc) {\n+      val hc = hf.newHasher\n+      var colValue = r.get(idx).toString\n+      if (colValue == null) colValue = \"0\"\n+      // add column ordinal to the hash value to distinguish between (a,b) and (b,a)\n+      rowHashCodesLong(idx) = hc.putUnencodedChars(colValue).hash().padToLong() + idx\n+      idx += 1\n+    }\n+    endMills = System.currentTimeMillis()\n+    meter1 += (endMills - startMills)\n+\n+\n+    startMills = System.currentTimeMillis()\n+    // use the row key column hash to get a consolidated hash for each cuboid\n+    val n = allCuboidsBitSet.length\n+    idx = 0\n+    while (idx < n) {\n+      var value: Long = 0\n+      var position = 0\n+      while (position < allCuboidsBitSet(idx).length) {\n+        value += rowHashCodesLong(allCuboidsBitSet(idx)(position))\n+        position += 1\n+      }\n+      info(ids(idx).toString).cuboid.counter.addHashDirectly(value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e13c8857700fd4d1c4e4daede6600562c62d494"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/22e96c7ad1f845644aad66ceb904f1bdaa90bce8", "committedDate": "2020-12-08T02:58:02Z", "message": "KYLIN-4818 Reduce toString method call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTU4MjY5", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548158269", "createdAt": "2020-12-09T13:01:04Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowMTowNVrOICTc_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowMTowNVrOICTc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4Njc4MA==", "bodyText": "please add repartition operation : inputDs.rdd.repartition(inputDs.sparkSession.sparkContext.defaultParallelism)", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539286780", "createdAt": "2020-12-09T13:01:05Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTU5OTIw", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548159920", "createdAt": "2020-12-09T13:03:09Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowMzowOVrOICTiUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowMzowOVrOICTiUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4ODE0NQ==", "bodyText": "convert 'List' to 'Array': seg.getAllLayout.map(x => x.getId).toArray", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539288145", "createdAt": "2020-12-09T13:03:09Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTYxMDgw", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548161080", "createdAt": "2020-12-09T13:04:33Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowNDozM1rOICTl6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowNDozM1rOICTl6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4OTA2Ng==", "bodyText": "change ids: List[Long] to ids: Array[Long]", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539289066", "createdAt": "2020-12-09T13:04:33Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTYxNjgz", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548161683", "createdAt": "2020-12-09T13:05:18Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowNToxOFrOICTn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowNToxOFrOICTn7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4OTU4Mw==", "bodyText": "uses mutable.LongMap[AggInfo]() instead of mutable.Map[Long, AggInfo]() here", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539289583", "createdAt": "2020-12-09T13:05:18Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {\n+  private val info = mutable.Map[Long, AggInfo]()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTY1MTE2", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548165116", "createdAt": "2020-12-09T13:09:32Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowOTozMlrOICTy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzowOTozMlrOICTy0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5MjM2OA==", "bodyText": "some suggestion:\nval currCuboidBitSet = allCuboidsBitSet(idx)\nval currCuboidLength = currCuboidBitSet.length\nwhile (position < currCuboidLength) {\n         value += rowHashCodesLong(currCuboidBitSet(position))\n         position += 1\n}\n\nreduce the time of calling 'allCuboidsBitSet(idx)'", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539292368", "createdAt": "2020-12-09T13:09:32Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {\n+  private val info = mutable.Map[Long, AggInfo]()\n+  private var allCuboidsBitSet: Array[Array[Integer]] = Array()\n+  private val hf: HashFunction = Hashing.murmur3_128\n+  private val rowHashCodesLong = new Array[Long](rkc)\n+  private var idx = 0\n+  private var meter1 = 0L\n+  private var meter2 = 0L\n+  private var startMills = 0L\n+  private var endMills = 0L\n+\n+\n+  def statisticsWithinPartition(rows: Iterator[Row]): Iterator[AggInfo] = {\n+    init()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition1-\" + System.currentTimeMillis())\n+    rows.foreach(update)\n+    printStat()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition2-\" + System.currentTimeMillis())\n+    info.valuesIterator\n+  }\n+\n+  def init(): Unit = {\n+    println(\"CuboidStatisticsJob-Init1-\" + System.currentTimeMillis())\n+    allCuboidsBitSet = getCuboidBitSet(ids, rkc)\n+    ids.foreach(i => info.put(i, AggInfo(i)))\n+    println(\"CuboidStatisticsJob-Init2-\" + System.currentTimeMillis())\n+  }\n+\n+  def update(r: Row): Unit = {\n+    idx += 1\n+    if (idx <= 5)\n+      println(r)\n+    updateCuboid(r)\n+  }\n+\n+  def updateCuboid(r: Row): Unit = {\n+    // generate hash for each row key column\n+    startMills = System.currentTimeMillis()\n+    var idx = 0\n+    while (idx < rkc) {\n+      val hc = hf.newHasher\n+      var colValue = r.get(idx).toString\n+      if (colValue == null) colValue = \"0\"\n+      // add column ordinal to the hash value to distinguish between (a,b) and (b,a)\n+      rowHashCodesLong(idx) = hc.putUnencodedChars(colValue).hash().padToLong() + idx\n+      idx += 1\n+    }\n+    endMills = System.currentTimeMillis()\n+    meter1 += (endMills - startMills)\n+\n+\n+    startMills = System.currentTimeMillis()\n+    // use the row key column hash to get a consolidated hash for each cuboid\n+    val n = allCuboidsBitSet.length\n+    idx = 0\n+    while (idx < n) {\n+      var value: Long = 0\n+      var position = 0\n+      while (position < allCuboidsBitSet(idx).length) {\n+        value += rowHashCodesLong(allCuboidsBitSet(idx)(position))\n+        position += 1\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTY3NTYx", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548167561", "createdAt": "2020-12-09T13:12:32Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzoxMjozMlrOICT6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzoxMjozMlrOICT6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5NDMyNQ==", "bodyText": "uses cuboidIds: Array[Long] instead of cuboidIds: List[Long]", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539294325", "createdAt": "2020-12-09T13:12:32Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {\n+  private val info = mutable.Map[Long, AggInfo]()\n+  private var allCuboidsBitSet: Array[Array[Integer]] = Array()\n+  private val hf: HashFunction = Hashing.murmur3_128\n+  private val rowHashCodesLong = new Array[Long](rkc)\n+  private var idx = 0\n+  private var meter1 = 0L\n+  private var meter2 = 0L\n+  private var startMills = 0L\n+  private var endMills = 0L\n+\n+\n+  def statisticsWithinPartition(rows: Iterator[Row]): Iterator[AggInfo] = {\n+    init()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition1-\" + System.currentTimeMillis())\n+    rows.foreach(update)\n+    printStat()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition2-\" + System.currentTimeMillis())\n+    info.valuesIterator\n+  }\n+\n+  def init(): Unit = {\n+    println(\"CuboidStatisticsJob-Init1-\" + System.currentTimeMillis())\n+    allCuboidsBitSet = getCuboidBitSet(ids, rkc)\n+    ids.foreach(i => info.put(i, AggInfo(i)))\n+    println(\"CuboidStatisticsJob-Init2-\" + System.currentTimeMillis())\n+  }\n+\n+  def update(r: Row): Unit = {\n+    idx += 1\n+    if (idx <= 5)\n+      println(r)\n+    updateCuboid(r)\n+  }\n+\n+  def updateCuboid(r: Row): Unit = {\n+    // generate hash for each row key column\n+    startMills = System.currentTimeMillis()\n+    var idx = 0\n+    while (idx < rkc) {\n+      val hc = hf.newHasher\n+      var colValue = r.get(idx).toString\n+      if (colValue == null) colValue = \"0\"\n+      // add column ordinal to the hash value to distinguish between (a,b) and (b,a)\n+      rowHashCodesLong(idx) = hc.putUnencodedChars(colValue).hash().padToLong() + idx\n+      idx += 1\n+    }\n+    endMills = System.currentTimeMillis()\n+    meter1 += (endMills - startMills)\n+\n+\n+    startMills = System.currentTimeMillis()\n+    // use the row key column hash to get a consolidated hash for each cuboid\n+    val n = allCuboidsBitSet.length\n+    idx = 0\n+    while (idx < n) {\n+      var value: Long = 0\n+      var position = 0\n+      while (position < allCuboidsBitSet(idx).length) {\n+        value += rowHashCodesLong(allCuboidsBitSet(idx)(position))\n+        position += 1\n+      }\n+      info(ids(idx)).cuboid.counter.addHashDirectly(value)\n+      idx += 1\n+    }\n+    endMills = System.currentTimeMillis()\n+    meter2 += (endMills - startMills)\n+  }\n+\n+  def getCuboidBitSet(cuboidIds: List[Long], nRowKey: Int): Array[Array[Integer]] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzcxMTY2", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548771166", "createdAt": "2020-12-10T02:26:10Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjoyNjoxMFrOICyhzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjoyNjoxMFrOICyhzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5NTkxNw==", "bodyText": "If r.get(idx) == null, r.get(idx).toString will throw NPE, please change to :\nvar colValue = if (r.get(idx) == null) \"0\" else r.get(idx).toString", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539795917", "createdAt": "2020-12-10T02:26:10Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CuboidStatisticsJob.scala", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.engine.spark.job\n+\n+\n+import org.apache.kylin.engine.spark.metadata.SegmentInfo\n+import org.apache.kylin.measure.hllc.HLLCounter\n+import org.apache.kylin.shaded.com.google.common.hash.{HashFunction, Hashing}\n+import org.apache.spark.sql.{Dataset, Row}\n+\n+import scala.collection.mutable\n+\n+/**\n+ * Calculate HLLCounter for each cuboid, to serve Cube Planner (to calculate cost and benefit of each cuboid).\n+ */\n+object CuboidStatisticsJob {\n+\n+  /**\n+   * @param inputDs Part of FlatTable which contains all normal dimensions\n+   * @return Cuboid level statistics data\n+   */\n+  def statistics(inputDs: Dataset[Row], seg: SegmentInfo): Array[(Long, AggInfo)] = {\n+\n+    val rkc = seg.allColumns.count(c => c.rowKey)\n+    // maybe we should use sample operation to reduce cost later\n+    val res = inputDs.rdd\n+      .mapPartitions(new CuboidStatisticsJob(seg.getAllLayout.map(x => x.getId), rkc).statisticsWithinPartition)\n+    val l = res.map(a => (a.key, a)).reduceByKey((a, b) => a.merge(b)).collect()\n+    //    l.foreach(x => println(x._1 + \" >>><<< \" + x._2.cuboid.counter.getCountEstimate))\n+    l\n+  }\n+}\n+\n+class CuboidStatisticsJob(ids: List[Long], rkc: Int) extends Serializable {\n+  private val info = mutable.Map[Long, AggInfo]()\n+  private var allCuboidsBitSet: Array[Array[Integer]] = Array()\n+  private val hf: HashFunction = Hashing.murmur3_128\n+  private val rowHashCodesLong = new Array[Long](rkc)\n+  private var idx = 0\n+  private var meter1 = 0L\n+  private var meter2 = 0L\n+  private var startMills = 0L\n+  private var endMills = 0L\n+\n+\n+  def statisticsWithinPartition(rows: Iterator[Row]): Iterator[AggInfo] = {\n+    init()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition1-\" + System.currentTimeMillis())\n+    rows.foreach(update)\n+    printStat()\n+    println(\"CuboidStatisticsJob-statisticsWithinPartition2-\" + System.currentTimeMillis())\n+    info.valuesIterator\n+  }\n+\n+  def init(): Unit = {\n+    println(\"CuboidStatisticsJob-Init1-\" + System.currentTimeMillis())\n+    allCuboidsBitSet = getCuboidBitSet(ids, rkc)\n+    ids.foreach(i => info.put(i, AggInfo(i)))\n+    println(\"CuboidStatisticsJob-Init2-\" + System.currentTimeMillis())\n+  }\n+\n+  def update(r: Row): Unit = {\n+    idx += 1\n+    if (idx <= 5)\n+      println(r)\n+    updateCuboid(r)\n+  }\n+\n+  def updateCuboid(r: Row): Unit = {\n+    // generate hash for each row key column\n+    startMills = System.currentTimeMillis()\n+    var idx = 0\n+    while (idx < rkc) {\n+      val hc = hf.newHasher\n+      var colValue = r.get(idx).toString\n+      if (colValue == null) colValue = \"0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODIyNjE1", "url": "https://github.com/apache/kylin/pull/1485#pullrequestreview-548822615", "createdAt": "2020-12-10T05:09:49Z", "commit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowOTo0OVrOIC1zNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowOTo0OVrOIC1zNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTUyNA==", "bodyText": "What's the difference between '.seq' directory and '.json' directory? Do we need to delete which one after running job successfully?", "url": "https://github.com/apache/kylin/pull/1485#discussion_r539849524", "createdAt": "2020-12-10T05:09:49Z", "author": {"login": "zzcclp"}, "path": "core-cube/src/main/java/org/apache/kylin/cube/CubeSegment.java", "diffHunk": "@@ -530,11 +537,19 @@ public void setSnapshots(ConcurrentHashMap<String, String> snapshots) {\n     }\n \n     public String getStatisticsResourcePath() {\n-        return getStatisticsResourcePath(this.getCubeInstance().getName(), this.getUuid());\n+        return getStatisticsResourcePath(this.getCubeInstance().getName(), this.getUuid(), \".seq\");\n+    }\n+\n+    public String getPreciseStatisticsResourcePath() {\n+        return getStatisticsResourcePath(this.getCubeInstance().getName(), this.getUuid(), \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e96c7ad1f845644aad66ceb904f1bdaa90bce8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ebccc6c63bb02874d79d91cbae85877540881c4", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/4ebccc6c63bb02874d79d91cbae85877540881c4", "committedDate": "2020-12-10T10:31:30Z", "message": "KYLIN-4818 Refine CuboidStatisticsJob to improve performance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5338ae096dcf5150679f2ec32b82a9441500ee9b", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/5338ae096dcf5150679f2ec32b82a9441500ee9b", "committedDate": "2020-12-10T10:25:11Z", "message": "KYLIN-4818 Refine CuboidStatisticsJob to improve performance"}, "afterCommit": {"oid": "4ebccc6c63bb02874d79d91cbae85877540881c4", "author": {"user": {"login": "hit-lacus", "name": "Xiaoxiang Yu"}}, "url": "https://github.com/apache/kylin/commit/4ebccc6c63bb02874d79d91cbae85877540881c4", "committedDate": "2020-12-10T10:31:30Z", "message": "KYLIN-4818 Refine CuboidStatisticsJob to improve performance"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2753, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}