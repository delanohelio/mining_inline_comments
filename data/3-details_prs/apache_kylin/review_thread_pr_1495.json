{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzkyNTY4", "number": 1495, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo1ODoxN1rOFCSVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoyMzozOVrOFCTI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTQxODIwOnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/sql/KylinSparkEnv.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo1ODoxOFrOIBWWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowOToxNlrOIBeFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4NTY3Nw==", "bodyText": "Are you plan to delete KylinSparkEnv ?", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538285677", "createdAt": "2020-12-08T11:58:18Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/sql/KylinSparkEnv.scala", "diffHunk": "@@ -25,96 +25,27 @@ object KylinSparkEnv extends Logging {\n \t@volatile\n \tprivate var spark: SparkSession = _", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxMjQzMQ==", "bodyText": "Yeah, will raise another pr to do this, it needs to refactor some modules", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538412431", "createdAt": "2020-12-08T14:09:16Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/sql/KylinSparkEnv.scala", "diffHunk": "@@ -25,96 +25,27 @@ object KylinSparkEnv extends Logging {\n \t@volatile\n \tprivate var spark: SparkSession = _", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4NTY3Nw=="}, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTQ4MDY4OnYy", "diffSide": "RIGHT", "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoxMDoyOVrOIBW-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMjoyMVrOIBeSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5NTk0MQ==", "bodyText": "Why change from  defaultParallelism to getTotalCore ?", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538295941", "createdAt": "2020-12-08T12:10:29Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxNTc3Ng==", "bodyText": "Make it the same algorithm as the code of 'ResultPlan.collectInternal'.", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538415776", "createdAt": "2020-12-08T14:12:21Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5NTk0MQ=="}, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTUwMzc0OnYy", "diffSide": "LEFT", "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoxNDo0OVrOIBXM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxNDoxOFrOIBeb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5OTY0MA==", "bodyText": "Looks like the original code is wrong, if sparkContext.defaultParallelism is 1, partitionsNum will always be 1.", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538299640", "createdAt": "2020-12-08T12:14:49Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)\n     val kylinConfig = KylinConfig.getInstanceFromEnv\n     val partitionsNum = if (kylinConfig.getSparkSqlShufflePartitions != -1) {\n       kylinConfig.getSparkSqlShufflePartitions\n     } else {\n-      Math.min(QueryContextFacade.current().getSourceScanBytes / (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxODE1OA==", "bodyText": "Using 'Math.min' is right, it makes sure that the max partition number is not larger than the total cores.", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538418158", "createdAt": "2020-12-08T14:14:18Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)\n     val kylinConfig = KylinConfig.getInstanceFromEnv\n     val partitionsNum = if (kylinConfig.getSparkSqlShufflePartitions != -1) {\n       kylinConfig.getSparkSqlShufflePartitions\n     } else {\n-      Math.min(QueryContextFacade.current().getSourceScanBytes / (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5OTY0MA=="}, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTU1MDQwOnYy", "diffSide": "LEFT", "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoyMzozOVrOIBXqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxNjo0MVrOIBel5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNzE3NA==", "bodyText": "You remove * 2, is it correct ?", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538307174", "createdAt": "2020-12-08T12:23:39Z", "author": {"login": "hit-lacus"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)\n     val kylinConfig = KylinConfig.getInstanceFromEnv\n     val partitionsNum = if (kylinConfig.getSparkSqlShufflePartitions != -1) {\n       kylinConfig.getSparkSqlShufflePartitions\n     } else {\n-      Math.min(QueryContextFacade.current().getSourceScanBytes / (\n-        KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 * 2) + 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMDcxMQ==", "bodyText": "'* 2' doesn't make sense. If users want to use larger partition split size, they can increase the value of 'kylin.query.spark-engine.partition-split-size-mb' .", "url": "https://github.com/apache/kylin/pull/1495#discussion_r538420711", "createdAt": "2020-12-08T14:16:41Z", "author": {"login": "zzcclp"}, "path": "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala", "diffHunk": "@@ -17,25 +17,26 @@\n  */\n package org.apache.spark.sql.execution.datasource\n \n-import org.apache.kylin.common.{KylinConfig, QueryContext, QueryContextFacade}\n+import org.apache.kylin.common.{KylinConfig, QueryContextFacade}\n import org.apache.spark.internal.Logging\n import org.apache.spark.sql.SparkSession\n+import org.apache.spark.utils.SparderUtils\n \n trait ResetShufflePartition extends Logging {\n+  val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB\n \n   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {\n     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)\n-    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val defaultParallelism = SparderUtils.getTotalCore(sparkSession.sparkContext.getConf)\n     val kylinConfig = KylinConfig.getInstanceFromEnv\n     val partitionsNum = if (kylinConfig.getSparkSqlShufflePartitions != -1) {\n       kylinConfig.getSparkSqlShufflePartitions\n     } else {\n-      Math.min(QueryContextFacade.current().getSourceScanBytes / (\n-        KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 * 2) + 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNzE3NA=="}, "originalCommit": {"oid": "ed0649b140529bdfafea8cce846962b6ca9c3f73"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1570, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}