{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzI0NzUx", "number": 2134, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0Mjo0M1rOEddDlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxNToxMFrOEf7FuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzIwMjEyOnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0Mjo0M1rOHInmmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0Mjo0M1rOHInmmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTUxMw==", "bodyText": "move into constructor", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478799513", "createdAt": "2020-08-28T02:42:43Z", "author": {"login": "plijyfes"}, "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ccda9319c94283da9b47a195c1e31b121b4f4f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzIwODI3OnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0NjozM1rOHInqHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0NjozM1rOHInqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDQxNA==", "bodyText": "refactor", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478800414", "createdAt": "2020-08-28T02:46:33Z", "author": {"login": "plijyfes"}, "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = _hashCode;\r\n+\t\t\tif (result == 0) {\r\n+\t\t\t\tresult = this._methodName.hashCode();\r\n+\t\t\t\tif (_paramTypes != null)\r\n+\t\t\t\t\tresult += _paramTypes.length;\r\n+\t\t\t\t_hashCode = result;\r\n+\t\t\t}\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (obj instanceof CachedMethodInfo) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ccda9319c94283da9b47a195c1e31b121b4f4f"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzIxNTEyOnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo1MDo1NVrOHInuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo1MDo1NVrOHInuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMTQ2MQ==", "bodyText": "check concurrent", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478801461", "createdAt": "2020-08-28T02:50:55Z", "author": {"login": "plijyfes"}, "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = _hashCode;\r\n+\t\t\tif (result == 0) {\r\n+\t\t\t\tresult = this._methodName.hashCode();\r\n+\t\t\t\tif (_paramTypes != null)\r\n+\t\t\t\t\tresult += _paramTypes.length;\r\n+\t\t\t\t_hashCode = result;\r\n+\t\t\t}\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (obj instanceof CachedMethodInfo) {\r\n+\t\t\t\tif (!((CachedMethodInfo) obj).getMethodName().equals(this._methodName))\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\tClass<?>[] targetParamTypes = ((CachedMethodInfo) obj).getParamTypes();\r\n+\t\t\t\tint len =  _paramTypes != null ? _paramTypes.length : 0;\r\n+\t\t\t\tint len2 = targetParamTypes != null ? targetParamTypes.length : 0;\r\n+\t\t\t\tif (len != len2)\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\tfor (int j = 0; j < len; ++j) {\r\n+\t\t\t\t\tif (!Objects.equals(_paramTypes[j], targetParamTypes[j]))\r\n+\t\t\t\t\t\treturn false;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn true;\r\n+\t\t\t}\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\tif (clzMap != null) {\r\n+\t\t\tMethod method = clzMap.get(new CachedMethodInfo(methodName, paramTypes));\r\n+\t\t\tif (method != null)\r\n+\t\t\t\treturn method;\r\n+\t\t}\r\n+\t\treturn getMethod0(clazz, methodName, paramTypes, params);\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod0(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMethod matchingMethod = null;\r\n+\t\tif (paramTypes != null) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmatchingMethod = Util.getMethod(clazz, clazz.getMethod(methodName, paramTypes));\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t\t//throw new MethodNotFoundException(e);\r\n+\t\t\t\tint paramCount = 0;\r\n+\t\t\t\tif (params != null) {\r\n+\t\t\t\t\tparamCount = params.length;\r\n+\t\t\t\t}\r\n+\t\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\t\tfor (Method m : methods) {\r\n+\t\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tint paramCount = 0;\r\n+\t\t\tif (params != null) {\r\n+\t\t\t\tparamCount = params.length;\r\n+\t\t\t}\r\n+\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\tfor (Method m : methods) {\r\n+\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (matchingMethod != null) {\r\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\t\tif (clzMap == null) {\r\n+\t\t\t\tclzMap = new ConcurrentHashMap<>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ccda9319c94283da9b47a195c1e31b121b4f4f"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM3NTg2OnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNTozMFrOHJxjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNTozMFrOHJxjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMTA0Ng==", "bodyText": "Use other Lock other than synchorized", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r480011046", "createdAt": "2020-08-31T09:35:30Z", "author": {"login": "scribetw"}, "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,124 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = 17;\r\n+\t\t\tresult = 31 * result + this._methodName.hashCode();\r\n+\t\t\tresult = 31 * result + (_paramTypes != null ? _paramTypes.length : 0);\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (!(obj instanceof CachedMethodInfo))\r\n+\t\t\t\treturn false;\r\n+\t\t\tif (!((CachedMethodInfo) obj).getMethodName().equals(this._methodName))\r\n+\t\t\t\treturn false;\r\n+\t\t\tClass<?>[] targetParamTypes = ((CachedMethodInfo) obj).getParamTypes();\r\n+\t\t\tint len =  _paramTypes != null ? _paramTypes.length : 0;\r\n+\t\t\tint len2 = targetParamTypes != null ? targetParamTypes.length : 0;\r\n+\t\t\tif (len != len2)\r\n+\t\t\t\treturn false;\r\n+\t\t\tfor (int j = 0; j < len; ++j) {\r\n+\t\t\t\tif (!Objects.equals(_paramTypes[j], targetParamTypes[j]))\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\tif (clzMap != null) {\r\n+\t\t\tMethod method = clzMap.get(new CachedMethodInfo(methodName, paramTypes));\r\n+\t\t\tif (method != null)\r\n+\t\t\t\treturn method;\r\n+\t\t}\r\n+\t\treturn getMethod0(clazz, methodName, paramTypes, params);\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod0(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMethod matchingMethod = null;\r\n+\t\tif (paramTypes != null) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmatchingMethod = Util.getMethod(clazz, clazz.getMethod(methodName, paramTypes));\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t\t//throw new MethodNotFoundException(e);\r\n+\t\t\t\tint paramCount = 0;\r\n+\t\t\t\tif (params != null) {\r\n+\t\t\t\t\tparamCount = params.length;\r\n+\t\t\t\t}\r\n+\t\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\t\tfor (Method m : methods) {\r\n+\t\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tint paramCount = 0;\r\n+\t\t\tif (params != null) {\r\n+\t\t\t\tparamCount = params.length;\r\n+\t\t\t}\r\n+\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\tfor (Method m : methods) {\r\n+\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (matchingMethod != null) {\r\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bd8e2468eb9e353908ad9c5a1d4c012d2dfd93"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIwODAwOnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNjozNFrOHLl7aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNjozNFrOHLl7aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNzgwMw==", "bodyText": "cacheSize getSystem", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481917803", "createdAt": "2020-09-02T09:06:34Z", "author": {"login": "plijyfes"}, "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "diffHunk": "@@ -49,8 +49,9 @@\n             long.class, short.class, Void.TYPE };\r\n \r\n \t//for reflection cache\r\n+    private static final int DEFAULT_CAPACITY = 16;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc345abbf100c1c1ded98df3412bb213616144a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIxMzEwOnYy", "diffSide": "RIGHT", "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNzoyOVrOHLl-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNzoyOVrOHLl-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxODU5MA==", "bodyText": "one line", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481918590", "createdAt": "2020-09-02T09:07:29Z", "author": {"login": "plijyfes"}, "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "diffHunk": "@@ -560,11 +561,7 @@ public int compareTo(MatchResult o) {\n \t\tif (resultList != null && !resultList.isEmpty())\r\n \t\t\tresult = resultList.toArray(new Method[resultList.size()]);\r\n \r\n-\t\tMap<String, Method[]> classMap = SETTERS_METHODS_CACHE.get(cls);\r\n-\t\tif (classMap == null) {\r\n-\t\t\tclassMap = new ConcurrentHashMap<String, Method[]>();\r\n-\t\t\tSETTERS_METHODS_CACHE.put(cls, classMap);\r\n-\t\t}\r\n+\t\tMap<String, Method[]> classMap = SETTERS_METHODS_CACHE.computeIfAbsent(cls, k -> new ConcurrentHashMap<>());\r\n \t\tclassMap.put(propertyName, result);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc345abbf100c1c1ded98df3412bb213616144a0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIyNTkxOnYy", "diffSide": "RIGHT", "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowOTo0NFrOHLmGsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowOTo0NFrOHLmGsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyMDY4OQ==", "bodyText": "null value is invalid", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481920689", "createdAt": "2020-09-02T09:09:44Z", "author": {"login": "plijyfes"}, "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "diffHunk": "@@ -290,14 +290,16 @@ private void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String f\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n \t\t\tPair<Class, String> cachedKey = new Pair<Class, String>(tgtcls, fdname);\n-\t\t\tField fd = _injectedFieldCache.get(cachedKey);\n-\t\t\tif (fd == null) {\n-\t\t\t\tfd = Classes.getAnyField(tgtcls, fdname);\n-\t\t\t\t_injectedFieldCache.put(cachedKey, fd);\n-\t\t\t}\n-\t\t\tinjectField(arg, parmcls, fd);\n-\t\t} catch (NoSuchFieldException e) {\n-\t\t\t//ignore\n+\t\t\tField fd = _injectedFieldCache.computeIfAbsent(cachedKey, k -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Classes.getAnyField(tgtcls, fdname);\n+\t\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\t\t//ignore\n+\t\t\t\t}\n+\t\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc345abbf100c1c1ded98df3412bb213616144a0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTA5NDMyOnYy", "diffSide": "RIGHT", "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxNToxMFrOHMf7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxNToxMFrOHMf7hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2ODEwMA==", "bodyText": "private static final Field EMPTY = NotFound.class.getFields()[0];", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r482868100", "createdAt": "2020-09-03T10:15:10Z", "author": {"login": "scribetw"}, "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "diffHunk": "@@ -286,18 +292,28 @@ private void injectByName(Object arg, String fdname, boolean fieldOnly) {\n \t\t}\n \t}\n \n+\t/*\n+\t * Marker class used because null values are not permitted in a\n+\t * ConcurrentHashMap.\n+\t */\n+\tprivate static class NotFound {\n+\t\tpublic boolean empty;\n+\t}\n+\n \tprivate void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String fdname) {\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n \t\t\tPair<Class, String> cachedKey = new Pair<Class, String>(tgtcls, fdname);\n-\t\t\tField fd = _injectedFieldCache.get(cachedKey);\n-\t\t\tif (fd == null) {\n-\t\t\t\tfd = Classes.getAnyField(tgtcls, fdname);\n-\t\t\t\t_injectedFieldCache.put(cachedKey, fd);\n-\t\t\t}\n-\t\t\tinjectField(arg, parmcls, fd);\n-\t\t} catch (NoSuchFieldException e) {\n-\t\t\t//ignore\n+\t\t\tField fd = _injectedFieldCache.computeIfAbsent(cachedKey, k -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Classes.getAnyField(tgtcls, fdname);\n+\t\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\t\t//ignore\n+\t\t\t\t}\n+\t\t\t\treturn NotFound.class.getFields()[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c3686139cdcda192d45e0e3db9385562f5593a"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 554, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}