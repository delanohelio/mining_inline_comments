{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTEzNTE1", "number": 8273, "title": "add production and sandbox security", "bodyText": "Resolves #wso2/product-apim#1547", "createdAt": "2020-02-29T18:17:51Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8273", "merged": true, "mergeCommit": {"oid": "017267d4340d06e23554822f95e4ce2e803f4dfd"}, "closed": true, "closedAt": "2020-03-03T09:18:29Z", "author": {"login": "tharindu1st"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJIsbTABqjMwODQ5NDMzNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ-KIjgFqTM2Nzc4NDA4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20114e33e95ac7d014222fdc527369369b551548", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/20114e33e95ac7d014222fdc527369369b551548", "committedDate": "2020-02-29T09:27:48Z", "message": "add production and sandbox security"}, "afterCommit": {"oid": "83998c9946d84b910c51577aacadc6d3da63f502", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/83998c9946d84b910c51577aacadc6d3da63f502", "committedDate": "2020-02-29T18:18:57Z", "message": "add production and sandbox security"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83998c9946d84b910c51577aacadc6d3da63f502", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/83998c9946d84b910c51577aacadc6d3da63f502", "committedDate": "2020-02-29T18:18:57Z", "message": "add production and sandbox security"}, "afterCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a3e19272baa4e79b4319871fd5eaac532c0f2122", "committedDate": "2020-03-01T08:25:54Z", "message": "add production and sandbox security"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc5MTE5", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#pullrequestreview-366879119", "createdAt": "2020-03-01T19:06:42Z", "commit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOTowNjo0MlrOFwPo3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxNToyN1rOFw5dKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMjE5MQ==", "bodyText": "space required endpoint security word", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386132191", "createdAt": "2020-03-01T19:06:42Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1307,6 +1299,75 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n         }\n     }\n \n+    private void updateEndpointSecurity(API oldApi, API api) throws APIManagementException {\n+        try {\n+            if (api.isEndpointSecured() && StringUtils.isBlank(api.getEndpointUTPassword()) &&\n+                    !StringUtils.isBlank(oldApi.getEndpointUTPassword())) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Given endpointsecurity password is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNzMyMA==", "bodyText": "use string utils", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386817320", "createdAt": "2020-03-03T06:15:27Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/template/SecurityConfigContext.java", "diffHunk": "@@ -16,45 +16,171 @@\n \n package org.wso2.carbon.apimgt.impl.template;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n import org.apache.velocity.VelocityContext;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.api.model.APIProduct;\n+import org.wso2.carbon.apimgt.api.model.APIProductResource;\n+import org.wso2.carbon.apimgt.api.model.EndpointSecurity;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.apache.commons.codec.binary.Base64;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * Set the parameters for secured endpoints\n  */\n public class SecurityConfigContext extends ConfigContextDecorator {\n \n     private API api;\n+    private APIProduct apiProduct;\n+    private JSONObject productionEndpointSecurity;\n+    private JSONObject sandboxEndpointSecurity;\n+\n+    public SecurityConfigContext(ConfigContext context, API api) {\n \n-    public SecurityConfigContext(ConfigContext context,API api) {\n         super(context);\n         this.api = api;\n     }\n \n+    public SecurityConfigContext(ConfigContext context, APIProduct apiProduct) {\n+\n+        super(context);\n+        this.apiProduct = apiProduct;\n+    }\n+\n+    @Override\n+    public void validate() throws APITemplateException, APIManagementException {\n+\n+        super.validate();\n+        if (api != null) {\n+            JSONParser parser = new JSONParser();\n+            //check if endpoint config exists\n+            String config_json = api.getEndpointConfig();\n+\n+            if (config_json != null && !\"\".equals(config_json)) {\n+                try {\n+                    Object config = parser.parse(config_json);\n+                    JSONObject endpointConfig = (JSONObject) config;\n+                    if (endpointConfig.get(APIConstants.ENDPOINT_SECURITY) != null) {\n+                        JSONObject endpointSecurity = (JSONObject) endpointConfig.get(APIConstants.ENDPOINT_SECURITY);\n+                        if (endpointSecurity.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION) != null) {\n+                            productionEndpointSecurity =\n+                                    (JSONObject) endpointSecurity.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION);\n+                        }\n+                        if (endpointSecurity.get(APIConstants.ENDPOINT_SECURITY_SANDBOX) != null) {\n+                            sandboxEndpointSecurity =\n+                                    (JSONObject) endpointSecurity.get(APIConstants.ENDPOINT_SECURITY_SANDBOX);\n+                        }\n+                    }\n+                } catch (ParseException e) {\n+                    this.handleException(\"Unable to pass the endpoint JSON config\");\n+                }\n+            }\n+        }\n+    }\n+\n     public VelocityContext getContext() {\n+\n         VelocityContext context = super.getContext();\n+        boolean isSecureVaultEnabled = Boolean.parseBoolean(getApiManagerConfiguration().\n+                getFirstProperty(APIConstants.API_SECUREVAULT_ENABLE));\n+        if (api != null) {\n+            Map<String, EndpointSecurityModel> endpointSecurityModelMap = new HashMap<>();\n+            endpointSecurityModelMap.put(APIConstants.ENDPOINT_SECURITY_PRODUCTION, new EndpointSecurityModel());\n+            endpointSecurityModelMap.put(APIConstants.ENDPOINT_SECURITY_SANDBOX, new EndpointSecurityModel());\n+            String alias = api.getId().getProviderName() + \"--\" + api.getId().getApiName()\n+                    + api.getId().getVersion();\n \n-        String alias =  api.getId().getProviderName() + \"--\" + api.getId().getApiName()\n-                        + api.getId().getVersion();\n-        String unpw = api.getEndpointUTUsername() + \":\" + api.getEndpointUTPassword();\n+            if (api.isEndpointSecured()) {\n+                EndpointSecurityModel endpointSecurityModel = new EndpointSecurityModel();\n+                endpointSecurityModel.setEnabled(true);\n+                endpointSecurityModel.setUsername(api.getEndpointUTUsername());\n+                endpointSecurityModel.setPassword(api.getEndpointUTPassword());\n+                if (!api.isEndpointAuthDigest()) {\n+                    endpointSecurityModel.setType(APIConstants.ENDPOINT_SECURITY_TYPE_BASIC);\n+                } else {\n+                    endpointSecurityModel.setType(APIConstants.ENDPOINT_SECURITY_TYPE_DIGEST);\n+                }\n+                endpointSecurityModel.setAlias(alias);\n+                String unpw = api.getEndpointUTUsername() + \":\" + api.getEndpointUTPassword();\n+                endpointSecurityModel.setBase64EncodedPassword(new String(Base64.encodeBase64(unpw.getBytes())));\n+                endpointSecurityModelMap.put(APIConstants.ENDPOINT_SECURITY_PRODUCTION, endpointSecurityModel);\n+                endpointSecurityModelMap.put(APIConstants.ENDPOINT_SECURITY_SANDBOX, endpointSecurityModel);\n+            } else {\n+                if (api.getEndpointConfig() != null && !\"\".equals(api.getEndpointConfig())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzI1NTMx", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#pullrequestreview-367725531", "createdAt": "2020-03-03T06:19:59Z", "commit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoxOTo1OVrOFw5iNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoyMjowOVrOFw5kfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxODYxNA==", "bodyText": "put some context llike api name", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386818614", "createdAt": "2020-03-03T06:19:59Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1307,6 +1299,75 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n         }\n     }\n \n+    private void updateEndpointSecurity(API oldApi, API api) throws APIManagementException {\n+        try {\n+            if (api.isEndpointSecured() && StringUtils.isBlank(api.getEndpointUTPassword()) &&\n+                    !StringUtils.isBlank(oldApi.getEndpointUTPassword())) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Given endpointsecurity password is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxODk3Mw==", "bodyText": "add more context like api name", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386818973", "createdAt": "2020-03-03T06:21:18Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1307,6 +1299,75 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n         }\n     }\n \n+    private void updateEndpointSecurity(API oldApi, API api) throws APIManagementException {\n+        try {\n+            if (api.isEndpointSecured() && StringUtils.isBlank(api.getEndpointUTPassword()) &&\n+                    !StringUtils.isBlank(oldApi.getEndpointUTPassword())) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Given endpointsecurity password is empty\");\n+                }\n+                api.setEndpointUTUsername(oldApi.getEndpointUTUsername());\n+                api.setEndpointUTPassword(oldApi.getEndpointUTPassword());\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Using the previous username and password for endpoint security\");\n+                }\n+            } else {\n+                String endpointConfig = api.getEndpointConfig();\n+                String oldEndpointConfig = oldApi.getEndpointConfig();\n+                if (StringUtils.isNotEmpty(endpointConfig) && StringUtils.isNotEmpty(oldEndpointConfig)) {\n+                    JSONObject endpointConfigJson = (JSONObject) new JSONParser().parse(endpointConfig);\n+                    JSONObject oldEndpointConfigJson = (JSONObject) new JSONParser().parse(oldEndpointConfig);\n+                    if ((endpointConfigJson.get(APIConstants.ENDPOINT_SECURITY) != null) &&\n+                            (oldEndpointConfigJson.get(APIConstants.ENDPOINT_SECURITY) != null)) {\n+                        JSONObject endpointSecurityJson =\n+                                (JSONObject) endpointConfigJson.get(APIConstants.ENDPOINT_SECURITY);\n+                        JSONObject oldEndpointSecurityJson =\n+                                (JSONObject) oldEndpointConfigJson.get(APIConstants.ENDPOINT_SECURITY);\n+                        if (endpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION) != null) {\n+                            if (oldEndpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION) != null) {\n+                                EndpointSecurity endpointSecurity = new ObjectMapper().convertValue(\n+                                        endpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION),\n+                                        EndpointSecurity.class);\n+                                EndpointSecurity oldEndpointSecurity = new ObjectMapper().convertValue(\n+                                        oldEndpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_PRODUCTION),\n+                                        EndpointSecurity.class);\n+                                if (endpointSecurity.isEnabled() && oldEndpointSecurity.isEnabled() &&\n+                                        StringUtils.isBlank(endpointSecurity.getPassword())) {\n+                                    endpointSecurity.setUsername(oldEndpointSecurity.getUsername());\n+                                    endpointSecurity.setPassword(oldEndpointSecurity.getPassword());\n+                                }\n+                                endpointSecurityJson.replace(APIConstants.ENDPOINT_SECURITY_PRODUCTION, new JSONParser()\n+                                        .parse(new ObjectMapper().writeValueAsString(endpointSecurity)));\n+                            }\n+                        }\n+                        if (endpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_SANDBOX) != null) {\n+                            if (oldEndpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_SANDBOX) != null) {\n+                                EndpointSecurity endpointSecurity = new ObjectMapper()\n+                                        .convertValue(endpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_SANDBOX),\n+                                                EndpointSecurity.class);\n+                                EndpointSecurity oldEndpointSecurity = new ObjectMapper()\n+                                        .convertValue(oldEndpointSecurityJson.get(APIConstants.ENDPOINT_SECURITY_SANDBOX),\n+                                                EndpointSecurity.class);\n+                                if (endpointSecurity.isEnabled() && oldEndpointSecurity.isEnabled() &&\n+                                        StringUtils.isBlank(endpointSecurity.getPassword())) {\n+                                    endpointSecurity.setUsername(oldEndpointSecurity.getUsername());\n+                                    endpointSecurity.setPassword(oldEndpointSecurity.getPassword());\n+                                }\n+                                endpointSecurityJson.replace(APIConstants.ENDPOINT_SECURITY_SANDBOX,\n+                                        new JSONParser()\n+                                                .parse(new ObjectMapper().writeValueAsString(endpointSecurity)));\n+                            }\n+                            endpointConfigJson.replace(APIConstants.ENDPOINT_SECURITY,endpointSecurityJson);\n+                        }\n+                    }\n+                    api.setEndpointConfig(endpointConfigJson.toJSONString());\n+                }\n+            }\n+        } catch (ParseException | JsonProcessingException e) {\n+            throw new APIManagementException(\"Error while processing endpoint security\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTE2NQ==", "bodyText": "why not camel case variable types.", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386819165", "createdAt": "2020-03-03T06:22:02Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/template/SecurityConfigContext.java", "diffHunk": "@@ -16,45 +16,171 @@\n \n package org.wso2.carbon.apimgt.impl.template;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n import org.apache.velocity.VelocityContext;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.api.model.APIProduct;\n+import org.wso2.carbon.apimgt.api.model.APIProductResource;\n+import org.wso2.carbon.apimgt.api.model.EndpointSecurity;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.apache.commons.codec.binary.Base64;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * Set the parameters for secured endpoints\n  */\n public class SecurityConfigContext extends ConfigContextDecorator {\n \n     private API api;\n+    private APIProduct apiProduct;\n+    private JSONObject productionEndpointSecurity;\n+    private JSONObject sandboxEndpointSecurity;\n+\n+    public SecurityConfigContext(ConfigContext context, API api) {\n \n-    public SecurityConfigContext(ConfigContext context,API api) {\n         super(context);\n         this.api = api;\n     }\n \n+    public SecurityConfigContext(ConfigContext context, APIProduct apiProduct) {\n+\n+        super(context);\n+        this.apiProduct = apiProduct;\n+    }\n+\n+    @Override\n+    public void validate() throws APITemplateException, APIManagementException {\n+\n+        super.validate();\n+        if (api != null) {\n+            JSONParser parser = new JSONParser();\n+            //check if endpoint config exists\n+            String config_json = api.getEndpointConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTE5Ng==", "bodyText": "string utils", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386819196", "createdAt": "2020-03-03T06:22:09Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/template/SecurityConfigContext.java", "diffHunk": "@@ -16,45 +16,171 @@\n \n package org.wso2.carbon.apimgt.impl.template;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n import org.apache.velocity.VelocityContext;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.api.model.APIProduct;\n+import org.wso2.carbon.apimgt.api.model.APIProductResource;\n+import org.wso2.carbon.apimgt.api.model.EndpointSecurity;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.apache.commons.codec.binary.Base64;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * Set the parameters for secured endpoints\n  */\n public class SecurityConfigContext extends ConfigContextDecorator {\n \n     private API api;\n+    private APIProduct apiProduct;\n+    private JSONObject productionEndpointSecurity;\n+    private JSONObject sandboxEndpointSecurity;\n+\n+    public SecurityConfigContext(ConfigContext context, API api) {\n \n-    public SecurityConfigContext(ConfigContext context,API api) {\n         super(context);\n         this.api = api;\n     }\n \n+    public SecurityConfigContext(ConfigContext context, APIProduct apiProduct) {\n+\n+        super(context);\n+        this.apiProduct = apiProduct;\n+    }\n+\n+    @Override\n+    public void validate() throws APITemplateException, APIManagementException {\n+\n+        super.validate();\n+        if (api != null) {\n+            JSONParser parser = new JSONParser();\n+            //check if endpoint config exists\n+            String config_json = api.getEndpointConfig();\n+\n+            if (config_json != null && !\"\".equals(config_json)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3e19272baa4e79b4319871fd5eaac532c0f2122", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a3e19272baa4e79b4319871fd5eaac532c0f2122", "committedDate": "2020-03-01T08:25:54Z", "message": "add production and sandbox security"}, "afterCommit": {"oid": "2dd25bdfde36ae90a29291c15cf95bf9148b8d0b", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2dd25bdfde36ae90a29291c15cf95bf9148b8d0b", "committedDate": "2020-03-03T07:19:59Z", "message": "add production and sandbox security"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzQ2NzQ2", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#pullrequestreview-367746746", "createdAt": "2020-03-03T07:21:03Z", "commit": {"oid": "2dd25bdfde36ae90a29291c15cf95bf9148b8d0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoyMTowNFrOFw6k6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoyMTowNFrOFw6k6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNTY4OQ==", "bodyText": "can bring to the same line i think.", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#discussion_r386835689", "createdAt": "2020-03-03T07:21:04Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIProductResource.java", "diffHunk": "@@ -130,4 +133,15 @@ public void setEndpointConfig(String endpointConfig) {\n     public String getEndpointKey() {\n         return apiIdentifier.getApiName() + \"--v\" + apiIdentifier.getVersion();\n     }\n+\n+    public Map<String, EndpointSecurity> getEndpointSecurityMap() {\n+\n+        return endpointSecurityMap;\n+    }\n+\n+    public void setEndpointSecurityMap(\n+            Map<String, EndpointSecurity> endpointSecurityMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd25bdfde36ae90a29291c15cf95bf9148b8d0b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18eee9c886d24c5d1d13ab7390e5ff7d10ef486e", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/18eee9c886d24c5d1d13ab7390e5ff7d10ef486e", "committedDate": "2020-03-03T07:25:09Z", "message": "add production and sandbox security"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dd25bdfde36ae90a29291c15cf95bf9148b8d0b", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2dd25bdfde36ae90a29291c15cf95bf9148b8d0b", "committedDate": "2020-03-03T07:19:59Z", "message": "add production and sandbox security"}, "afterCommit": {"oid": "18eee9c886d24c5d1d13ab7390e5ff7d10ef486e", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/18eee9c886d24c5d1d13ab7390e5ff7d10ef486e", "committedDate": "2020-03-03T07:25:09Z", "message": "add production and sandbox security"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Nzg0MDgx", "url": "https://github.com/wso2/carbon-apimgt/pull/8273#pullrequestreview-367784081", "createdAt": "2020-03-03T08:36:35Z", "commit": {"oid": "18eee9c886d24c5d1d13ab7390e5ff7d10ef486e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}