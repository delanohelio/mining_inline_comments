{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTg2MDU3", "number": 8442, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MDozMVrOD4Vt8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1OTozM1rOECKpZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAyNjc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MDozMVrOGPHFYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjowNjozNVrOGPzlaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5Nzg5MA==", "bodyText": "this method is not formatted.", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418497890", "createdAt": "2020-05-01T10:50:31Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNjk4Nw==", "bodyText": "fixed in f5092a9", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419226987", "createdAt": "2020-05-04T06:06:35Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5Nzg5MA=="}, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAyODY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MTozMFrOGPHGcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MTozMFrOGPHGcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODE2MQ==", "bodyText": "formatting issue. this would be fixed once you format the whole method", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498161", "createdAt": "2020-05-01T10:51:30Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAyOTc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MjoxMVrOGPHHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjowNjoxNFrOGPzlEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODMzNQ==", "bodyText": "formatting issue. please format the whole method", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498335", "createdAt": "2020-05-01T10:52:11Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNjg5Ng==", "bodyText": "fixed in f5092a9", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419226896", "createdAt": "2020-05-04T06:06:14Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODMzNQ=="}, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAzMDI3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MjozOFrOGPHHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1MjozOFrOGPHHew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODQyNw==", "bodyText": "format the whole method", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498427", "createdAt": "2020-05-01T10:52:38Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+\n+                byte[] propertiesByte;\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n+                } else {\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n+                }\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAzMzY0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1NDo0MFrOGPHJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjowNzoyOFrOGPzmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODkxOA==", "bodyText": "why cast null to blob?", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498918", "createdAt": "2020-05-01T10:54:40Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setBlob(9, (Blob)null);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNzIwOQ==", "bodyText": "changed it to setNull (parameter index, value)", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419227209", "createdAt": "2020-05-04T06:07:28Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setBlob(9, (Blob)null);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODkxOA=="}, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAzMzk5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1NDo1MVrOGPHJmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1NDo1MVrOGPHJmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODk2OA==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498968", "createdAt": "2020-05-01T10:54:51Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setBlob(9, (Blob)null);\n+            }\n \n+            if(workflow.getProperties() != null) {\n+                byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n+            } else {\n+                //prepStmt.setNull(10, java.sql.Types.BLOB);\n+                prepStmt.setBlob(10, (Blob)null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDUxNTc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0MzowMVrOGPLm0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0MzowMVrOGPLm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MTk4NA==", "bodyText": "Please format all your code.", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418571984", "createdAt": "2020-05-01T14:43:01Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDUxODc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0NDowNVrOGPLowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0NDowNVrOGPLowQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MjQ4MQ==", "bodyText": "removed unwanted code", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418572481", "createdAt": "2020-05-01T14:44:05Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Execute the API state change workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+        }\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                super.execute(workflowDTO);\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in workflow-extensions.xml\";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+        }\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+        String externalWorkflowRef = workflowDTO.getExternalWorkflowReference();\n+        try {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n+            String apiName = workflow.getMetadata(\"ApiName\");\n+            String action = workflow.getMetadata(\"Action\");\n+            String providerName = workflow.getMetadata(\"ApiProvider\");\n+            String version = workflow.getMetadata(\"ApiVersion\");\n+            String invoker = workflow.getMetadata(\"Invoker\");\n+            String currentStatus = workflow.getMetadata(\"CurrentState\");\n+            int tenantId = workflowDTO.getTenantId();\n+            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDUyMTkzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0NTowN1rOGPLquQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0NTowN1rOGPLquQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3Mjk4NQ==", "bodyText": "remove unused variables.", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418572985", "createdAt": "2020-05-01T14:45:07Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import java.util.List;\n+\n+/**\n+ * Approval workflow for Application Creation.\n+ *\n+ */\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    /**\n+     * Execute the Application Creation workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTY2ODE4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzoyODoxMFrOGP1Nmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzoyODoxMFrOGP1Nmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1MzY1OA==", "bodyText": "Use \"try with resources\" whenever possible. We can do the same functionality with less amount of code.", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419253658", "createdAt": "2020-05-04T07:28:10Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14723,4 +14739,246 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDQyMzc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTozNDozMFrOGP8dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTozNDozMFrOGP8dow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MjQ1MQ==", "bodyText": "It's good to use try with resources", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419372451", "createdAt": "2020-05-04T11:34:30Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14723,4 +14739,246 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if (metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType Type of the workflow pending request\n+     * @param status       workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzYyNTE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMTo0OVrOGQapFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMTo0OVrOGQapFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2NjkwMQ==", "bodyText": "Use <verb>_<action> format.\nEG:\napim:api_workflow_view", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419866901", "createdAt": "2020-05-05T05:11:49Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2521,17 +2521,151 @@ paths:\n             $ref: '#/definitions/MonetizationUsagePublishInfo'\n \n ######################################################\n-  # The \"Workflow approval\" resource API\n-  ######################################################\n+# The \"Workflow Collection\" resource APIs\n+######################################################\n+  '/workflows':\n+\n+#---------------------------------------------------\n+# Retrieve a list of all workflow pending processes\n+#---------------------------------------------------\n+    get:\n+      x-scope: apim:api_workflow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzYyNjUyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMjo0NFrOGQap2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMjo0NFrOGQap2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2NzA5OQ==", "bodyText": "apim:api_workflow_view", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419867099", "createdAt": "2020-05-05T05:12:44Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2521,17 +2521,151 @@ paths:\n             $ref: '#/definitions/MonetizationUsagePublishInfo'\n \n ######################################################\n-  # The \"Workflow approval\" resource API\n-  ######################################################\n+# The \"Workflow Collection\" resource APIs\n+######################################################\n+  '/workflows':\n+\n+#---------------------------------------------------\n+# Retrieve a list of all workflow pending processes\n+#---------------------------------------------------\n+    get:\n+      x-scope: apim:api_workflow\n+      x-wso2-request: |\n+        GET https://localhost:9443/api/am/admin/v0.16/workflows\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" \\\"https://localhost:9443/api/am/admin/v0.16/workflows\\\"\"\n+      x-wso2-response: \"HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{\\n   \\\"previous\\\": \\\"\\\",\\n   \\\"list\\\":    [\\n            {\\n    \\\"WF_TYPE\\\": \\\"AM_APPLICATION_CREATION\\\",\\n         \\\"WF_STATUS\\\": \\\"APPROVED\\\",\\n         \\\"WF_CREATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_UPDATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_STATUS_DESC\\\": \\\"  Approve workflow request\\\"\\n   \\\"TENANT_ID\\\": \\\"-1234\\\",\\n  \\\"TENANT_DOMAIN\\\": \\\"carbon.super\\\",\\n  \\\"WF_EXTERNAL_REFERENCE\\\": \\\"5871244b-d6f3-466e-8995-8accd1e64303\\\",\\n  \\\"PAYLOAD\\\": \\\"7b2263616c6c4261636b55524c22\\\",\\n },\\n  {\\n         \\\"WF_ID\\\": \\\"\\\",\\n         \\\"WF_REFERENCE\\\": \\\"ABBA\\\",\\n           \\\"WF_TYPE\\\": \\\"AM_APPLICATION_CREATION\\\",\\n         \\\"WF_STATUS\\\": \\\"APPROVED\\\",\\n         \\\"WF_CREATED_TIME\\\": \\\"  2020-01-10 09:32:34.476\\\"\\n    \\\"WF_UPDATED_TIME\\\": \\\"  2020-03-12 09:34:34.476\\\"\\n    \\\"WF_STATUS_DESC\\\": \\\"  Approve workflow request\\\"\\n   \\\"TENANT_ID\\\": \\\"-1234\\\",\\n  \\\"TENANT_DOMAIN\\\": \\\"carbon.super\\\",\\n  \\\"WF_EXTERNAL_REFERENCE\\\": \\\"5871244b-d6f3-466e-8922-8accd1e64303\\\",\\n  \\\"PAYLOAD\\\": \\\"7b226170694e616d65223a2253616\\\",\\n }          \"\n+      summary: |\n+        Retrieve All pending workflow processes\n+      description: |\n+        This operation can be used to retrieve list of workflow pending processes.\n+      parameters:\n+\n+        - $ref: '#/parameters/limit'\n+        - $ref: '#/parameters/offset'\n+        - $ref: '#/parameters/Accept'\n+        - $ref: '#/parameters/If-None-Match'\n+        - name: workflowType\n+          in: query\n+          description: |\n+            We need to show the values of each workflow process separately .for that we use workflow type.\n+            Workflow type can be AM_APPLICATION_CREATION, AM_SUBSCRIPTION_CREATION,   AM_USER_SIGNUP, AM_APPLICATION_REGISTRATION_PRODUCTION, AM_APPLICATION_REGISTRATION_SANDBOX.\n+          required: false\n+          type: string\n+          enum:\n+            - AM_APPLICATION_CREATION\n+            - AM_SUBSCRIPTION_CREATION\n+            - AM_USER_SIGNUP\n+            - AM_APPLICATION_REGISTRATION_PRODUCTION\n+            - AM_APPLICATION_REGISTRATION_SANDBOX\n+            - AM_SUBSCRIPTION_DELETION\n+            - AM_APPLICATION_DELETION\n+            - AM_API_STATE\n+      tags:\n+        - Workflow (Collection)\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Workflow pendding process list returned.\n+          schema:\n+            $ref: '#/definitions/WorkflowList'\n+          headers:\n+            Content-Type:\n+              description: |\n+                The content type of the body.\n+              type: string\n+        404:\n+          description: |\n+            Not Found.\n+            Requested user does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+\n+        304:\n+          description: |\n+            Not Modified.\n+            Empty body because the client has already the latest version of the requested resource (Will be supported in future).\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        406:\n+          description: |\n+            Not Acceptable.\n+            The requested media type is not supported.\n+          schema:\n+            $ref: '#/definitions/Error'\n+  #----------------------------------------------------------------\n+  # Retrieve workflow requests according to the external reference\n+  #----------------------------------------------------------------\n+  '/workflows/{externalWorkflowRef}':\n+\n+    #-----------------------------------------------------\n+    # Retrieve the Details of a workflow pendding process\n+    #-----------------------------------------------------\n+    get:\n+      x-scope: apim:api_workflow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzYyNzI5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMzoyMFrOGQaqWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNToxMzoyMFrOGQaqWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2NzIyNQ==", "bodyText": "x-scope: apim:api_workflow_approve", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419867225", "createdAt": "2020-05-05T05:13:20Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2521,17 +2521,151 @@ paths:\n             $ref: '#/definitions/MonetizationUsagePublishInfo'\n \n ######################################################\n-  # The \"Workflow approval\" resource API\n-  ######################################################\n+# The \"Workflow Collection\" resource APIs\n+######################################################\n+  '/workflows':\n+\n+#---------------------------------------------------\n+# Retrieve a list of all workflow pending processes\n+#---------------------------------------------------\n+    get:\n+      x-scope: apim:api_workflow\n+      x-wso2-request: |\n+        GET https://localhost:9443/api/am/admin/v0.16/workflows\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" \\\"https://localhost:9443/api/am/admin/v0.16/workflows\\\"\"\n+      x-wso2-response: \"HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{\\n   \\\"previous\\\": \\\"\\\",\\n   \\\"list\\\":    [\\n            {\\n    \\\"WF_TYPE\\\": \\\"AM_APPLICATION_CREATION\\\",\\n         \\\"WF_STATUS\\\": \\\"APPROVED\\\",\\n         \\\"WF_CREATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_UPDATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_STATUS_DESC\\\": \\\"  Approve workflow request\\\"\\n   \\\"TENANT_ID\\\": \\\"-1234\\\",\\n  \\\"TENANT_DOMAIN\\\": \\\"carbon.super\\\",\\n  \\\"WF_EXTERNAL_REFERENCE\\\": \\\"5871244b-d6f3-466e-8995-8accd1e64303\\\",\\n  \\\"PAYLOAD\\\": \\\"7b2263616c6c4261636b55524c22\\\",\\n },\\n  {\\n         \\\"WF_ID\\\": \\\"\\\",\\n         \\\"WF_REFERENCE\\\": \\\"ABBA\\\",\\n           \\\"WF_TYPE\\\": \\\"AM_APPLICATION_CREATION\\\",\\n         \\\"WF_STATUS\\\": \\\"APPROVED\\\",\\n         \\\"WF_CREATED_TIME\\\": \\\"  2020-01-10 09:32:34.476\\\"\\n    \\\"WF_UPDATED_TIME\\\": \\\"  2020-03-12 09:34:34.476\\\"\\n    \\\"WF_STATUS_DESC\\\": \\\"  Approve workflow request\\\"\\n   \\\"TENANT_ID\\\": \\\"-1234\\\",\\n  \\\"TENANT_DOMAIN\\\": \\\"carbon.super\\\",\\n  \\\"WF_EXTERNAL_REFERENCE\\\": \\\"5871244b-d6f3-466e-8922-8accd1e64303\\\",\\n  \\\"PAYLOAD\\\": \\\"7b226170694e616d65223a2253616\\\",\\n }          \"\n+      summary: |\n+        Retrieve All pending workflow processes\n+      description: |\n+        This operation can be used to retrieve list of workflow pending processes.\n+      parameters:\n+\n+        - $ref: '#/parameters/limit'\n+        - $ref: '#/parameters/offset'\n+        - $ref: '#/parameters/Accept'\n+        - $ref: '#/parameters/If-None-Match'\n+        - name: workflowType\n+          in: query\n+          description: |\n+            We need to show the values of each workflow process separately .for that we use workflow type.\n+            Workflow type can be AM_APPLICATION_CREATION, AM_SUBSCRIPTION_CREATION,   AM_USER_SIGNUP, AM_APPLICATION_REGISTRATION_PRODUCTION, AM_APPLICATION_REGISTRATION_SANDBOX.\n+          required: false\n+          type: string\n+          enum:\n+            - AM_APPLICATION_CREATION\n+            - AM_SUBSCRIPTION_CREATION\n+            - AM_USER_SIGNUP\n+            - AM_APPLICATION_REGISTRATION_PRODUCTION\n+            - AM_APPLICATION_REGISTRATION_SANDBOX\n+            - AM_SUBSCRIPTION_DELETION\n+            - AM_APPLICATION_DELETION\n+            - AM_API_STATE\n+      tags:\n+        - Workflow (Collection)\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Workflow pendding process list returned.\n+          schema:\n+            $ref: '#/definitions/WorkflowList'\n+          headers:\n+            Content-Type:\n+              description: |\n+                The content type of the body.\n+              type: string\n+        404:\n+          description: |\n+            Not Found.\n+            Requested user does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+\n+        304:\n+          description: |\n+            Not Modified.\n+            Empty body because the client has already the latest version of the requested resource (Will be supported in future).\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        406:\n+          description: |\n+            Not Acceptable.\n+            The requested media type is not supported.\n+          schema:\n+            $ref: '#/definitions/Error'\n+  #----------------------------------------------------------------\n+  # Retrieve workflow requests according to the external reference\n+  #----------------------------------------------------------------\n+  '/workflows/{externalWorkflowRef}':\n+\n+    #-----------------------------------------------------\n+    # Retrieve the Details of a workflow pendding process\n+    #-----------------------------------------------------\n+    get:\n+      x-scope: apim:api_workflow\n+      x-wso2-curl: \"curl https://localhost:9443/api/am/admin/v0.16/workflows/c43a325c-260b-4302-81cb-768eafaa3aed\"\n+      x-wso2-curl-tenant: \"curl -k -H \\\"X-WSO2-Tenant:test.com\\\" https://localhost:9443/api/am/admin/v0.16/workflows/c43a325c-260b-4302-81cb-768eafaa3aed\"\n+      x-wso2-request: |\n+        GET https://localhost:9443/api/am/admin/v0.16/workflows/c43a325c-260b-4302-81cb-768eafaa3aed\n+      x-wso2-response: \"HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{\\n   \\\"previous\\\": \\\"\\\",\\n   \\\"list\\\":    [\\n            {\\n                 \\\"WF_TYPE\\\": \\\"AM_APPLICATION_CREATION\\\",\\n         \\\"WF_STATUS\\\": \\\"APPROVED\\\",\\n         \\\"WF_CREATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_UPDATED_TIME\\\": \\\"  2020-02-10 09:33:34.476\\\"\\n    \\\"WF_STATUS_DESC\\\": \\\"  Approve workflow request\\\"\\n   \\\"TENANT_ID\\\": \\\"-1234\\\",\\n  \\\"TENANT_DOMAIN\\\": \\\"carbon.super\\\",\\n  \\\"WF_EXTERNAL_REFERENCE\\\": \\\"5871244b-d6f3-466e-8995-8accd1e64303\\\",\\n  \\\"PAYLOAD\\\": \\\"7b2263616c6c4261636b55524c22\\\",\\n } \"\n+      summary: |\n+        Get details of a the pending workflow request according to the External Workflow Reference.\n+      description: |\n+        Using this operation, you can retrieve complete details of a pending workflow request that either belongs to application creation, application subscription, application registration, api state change, user self sign up.. You need to provide the External_Workflow_Reference of the workflow Request to retrive it.\n+\n+      parameters:\n+        - name: externalWorkflowRef\n+          in: path\n+          description: |\n+            from the externel workflow reference we decide what is the the pending request that the are requesting.\n+          required: true\n+          type: string\n+        - $ref: '#/parameters/If-None-Match'\n+      tags:\n+        - Workflows (Individual)\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Requested Workflow Pending is returned\n+          schema:\n+            $ref: '#/definitions/WorkflowInfo'\n+\n+        304:\n+          description: |\n+            Not Modified.\n+            Empty body because the client has already the latest version of the requested resource.\n+        404:\n+          description: |\n+            Not Found.\n+            Requested workflow pendding process does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        406:\n+          description: |\n+            Not Acceptable.\n+            The requested media type is not supported\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+######################################################\n+# The \"Workflow approval\" resource API\n+######################################################\n   /workflows/update-workflow-status:\n \n-    #-------------------------------------------------------------------\n-    # Resume the workflow by approving or rejecting the workflow request\n-    #-------------------------------------------------------------------\n+#-------------------------------------------------------------------\n+# Resume the workflow by approving or rejecting the workflow request\n+#-------------------------------------------------------------------\n     post:\n       x-scope: apim:api_workflow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA3MDQ2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1OTozM1rOGedMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1OTozM1rOGedMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4ODgxOA==", "bodyText": "lets use camelcase", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r434588818", "createdAt": "2020-06-03T13:59:33Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+/**\n+ * Approval workflow for Application Creation.\n+ */\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    /**\n+     * Execute the Application Creation workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String message = \"Approve application \" + application.getName() + \" creation request from application creator -\"\n+                + appWorkFlowDTO.getUserName() + \" with throttling tier - \" + application.getTier();\n+        workflowDTO.setWorkflowDescription(message);\n+        workflowDTO.setProperties(\"ApplicationName\", application.getName());\n+        workflowDTO.setProperties(\"UserName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setProperties(\"ApplicationTier\", application.getTier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1abdefa19221e04be9175dc92a619efc4a5492"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2755, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}