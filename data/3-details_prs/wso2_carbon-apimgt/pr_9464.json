{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTU2NTMw", "number": 9464, "title": "Restructuring functionalities to Import an API/API Product with new schemas with relevant DTOs for APICTL", "bodyText": "Purpose\nFixes: wso2/product-apim-tooling#324\nFixes: wso2/product-apim-tooling#158\nGoals\nRestructure the code segments related to importing an API/API Product by introducing new schemas via reading required DTOs.\nApproach\n\nCreated Publisher REST API resources to import an API/API Product. The resources are as follows.\n\nPOST apis/import\nPOST api-products/import\n\n\nThe old implementations of importing APIs and API Products have been modified to read DTOs from the importing files, instead of models.\nThe new structure introduced in [1] has been further modified with the below changes.\n\nThe \u201cMeta-information\u201d folder was renamed as \u201cDefinitions\u201d.\nBrought the api.yaml to the root level.\nWhen exporting documents, currently the document name will be the name of the individual document directory. (Example, Doc1 in [1] is the document name of the documentation related to that directory). The document directory name has been further validated and replaced the unwanted characters before exporting it as the directory name for the safe side.\n\n\u2514\u2500\u2500 PizzaShackAPI-1.0.0\n    \u251c\u2500\u2500 api.yaml\n    \u251c\u2500\u2500 Client-certificates\n    \u2502   \u251c\u2500\u2500 Alias1.crt\n    \u2502   \u251c\u2500\u2500 Alias2.crt\n    \u2502   \u2514\u2500\u2500 client_certificates.yaml\n    \u251c\u2500\u2500 Docs\n    \u2502   \u251c\u2500\u2500 Doc1\n    \u2502   \u2502   \u251c\u2500\u2500 mydoc.pdf\n    \u2502   \u2502   \u2514\u2500\u2500 document.yaml\n    \u2502   \u251c\u2500\u2500 Doc2\n    \u2502   \u2502   \u251c\u2500\u2500 Doc2\n    \u2502   \u2502   \u2514\u2500\u2500 document.yaml\n    \u2502   \u251c\u2500\u2500 Doc3\n    \u2502   \u2502   \u251c\u2500\u2500 Doc3\n    \u2502   \u2502   \u2514\u2500\u2500 document.yaml\n    \u2502   \u2514\u2500\u2500 Doc4\n    \u2502       \u2514\u2500\u2500 document.yaml\n    \u251c\u2500\u2500 Endpoint-certificates\n    \u2502   \u251c\u2500\u2500 Alias3.crt\n    \u2502   \u251c\u2500\u2500 Alias4.crt\n    \u2502   \u2514\u2500\u2500 endpoint_certificates.yaml\n    \u251c\u2500\u2500 Image\n    \u2502   \u2514\u2500\u2500 icon.png\n    \u251c\u2500\u2500 Definitions\n    \u2502   \u2514\u2500\u2500 swagger.yaml\n    \u2514\u2500\u2500 Sequences\n        \u251c\u2500\u2500 fault-sequence\n        \u2502   \u2514\u2500\u2500 debug_json_fault.xml\n        \u251c\u2500\u2500 in-sequence\n        \u2502   \u2514\u2500\u2500 Custom\n        \u2502       \u2514\u2500\u2500 sample-n-sequence.xml\n        \u2514\u2500\u2500 out-sequence\n                   \u2514\u2500\u2500 log_out_message.xml\n\n\nA known issue of requiring the thumbnail name to be \u201cicon\u201d when importing a thumbnail image along with the API project has been fixed\nFixed exception handling during the import according to [2].\n\nUser stories\nThe users can use the newly introduced Publisher REST API resources to import an API/API Product with the new schema structure.\nDocumentation\nDocumentation changes need to be done according to the structure changes.\nRelated PRs\n#9406\nTest environment\n\nJDK 1.8.0_251\nUbuntu 20.04.1 LTS\n\n[1] #9406\n[2] https://github.com/wso2/carbon-apimgt/wiki/Exception-handling-in-REST-APIs", "createdAt": "2020-12-03T07:00:22Z", "url": "https://github.com/wso2/carbon-apimgt/pull/9464", "merged": true, "mergeCommit": {"oid": "a3d42a556d2ab57b82ac546e1a1761031b83137b"}, "closed": true, "closedAt": "2020-12-04T07:06:16Z", "author": {"login": "wasuradananjith"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiT0yhgH2gAyNTMxNTU2NTMwOjNmN2NkMGE3ODQzNjc3NWMxYTgwMDVhY2Q3YjYxZjg1YTZkZTI4MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd02dUuAFqTU3OTEwOTkwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f7cd0a78436775c1a8005acd7b61f85a6de2823", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3f7cd0a78436775c1a8005acd7b61f85a6de2823", "committedDate": "2020-12-02T19:36:31Z", "message": "Import APIs with relevant DTOs from APICTL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14529b92cbe5b5f9b9b14542fc267aae6c26e6f4", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/14529b92cbe5b5f9b9b14542fc267aae6c26e6f4", "committedDate": "2020-12-02T19:36:31Z", "message": "Add import function to importexport service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00b135102819c06699c0d1a4b0e685bd47a3e9de", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/00b135102819c06699c0d1a4b0e685bd47a3e9de", "committedDate": "2020-12-02T19:36:31Z", "message": "Fix thumbnail export failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a5acab466d36768b6a50f081ad5bb099773e840", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6a5acab466d36768b6a50f081ad5bb099773e840", "committedDate": "2020-12-02T19:36:31Z", "message": "Improve error handling when importing an API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e874fb170da852fedd6417af6220c364ff5f42", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/25e874fb170da852fedd6417af6220c364ff5f42", "committedDate": "2020-12-02T19:36:31Z", "message": "Import API Products with relevant DTOs from APICTL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd77f8c8805497de12979bee47650aa82535064e", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/dd77f8c8805497de12979bee47650aa82535064e", "committedDate": "2020-12-02T19:36:31Z", "message": "Remove swagger from GraphQL API export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa99e6df89e3ec3f1bbafd74cf499192717271a2", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fa99e6df89e3ec3f1bbafd74cf499192717271a2", "committedDate": "2020-12-02T19:36:31Z", "message": "Rename the directory Meta-Information to Definitions in API/API Product export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8840f14c9e400ce6a1d29ccd90b07e5a92b7e54", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b8840f14c9e400ce6a1d29ccd90b07e5a92b7e54", "committedDate": "2020-12-02T19:36:31Z", "message": "Replace unwanted characters in doc directory name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435be42773bfad0c9861843a4ca88350aff1f383", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/435be42773bfad0c9861843a4ca88350aff1f383", "committedDate": "2020-12-02T19:36:31Z", "message": "Remove the necessity of having the thumbnail name as 'icon' during import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c2510b8bb9020486fc730ccd71630e7051e0e01", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8c2510b8bb9020486fc730ccd71630e7051e0e01", "committedDate": "2020-12-02T19:36:31Z", "message": "Improve exceptions in import and preprocess endpoint security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec069c0eefb240cdc00f0ff8faecb7208eb9ed8", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/cec069c0eefb240cdc00f0ff8faecb7208eb9ed8", "committedDate": "2020-12-03T03:01:34Z", "message": "Fix provider issues identified from APICTL integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "author": {"user": {"login": "wasuradananjith", "name": "Wasura Wattearachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "committedDate": "2020-12-03T03:15:35Z", "message": "Restructure exception messages during import/export"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODM0Mjgw", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#pullrequestreview-543834280", "createdAt": "2020-12-03T10:55:17Z", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo1NToxN1rOH-Tx_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo1NToxN1rOH-Tx_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5Nzg1NQ==", "bodyText": "Do we need to pass token scopes to interface", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r535097855", "createdAt": "2020-12-03T10:55:17Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API\n+     * @@return Imported API\n+     */\n+    public API importAPI(InputStream fileInputStream, Boolean preserveProvider, Boolean overwrite, String[] tokenScopes)\n+            throws APIManagementException;\n+\n+    /**\n+     * Used to import an API Product artifact.\n+     *\n+     * @param fileInputStream     Input stream from the REST request\n+     *                            (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider    User choice to keep or replace the API Product provider\n+     * @param importAPIs          Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs       Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @@return Imported API Product\n+     */\n+    public APIProduct importAPIProduct(InputStream fileInputStream, Boolean preserveProvider,\n+            Boolean overwriteAPIProduct, Boolean overwriteAPIs, Boolean importAPIs, String[] tokenScopes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjQ1NjYz", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#pullrequestreview-544645663", "createdAt": "2020-12-04T04:16:42Z", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MTA4MzU2", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#pullrequestreview-579108356", "createdAt": "2021-01-29T10:06:12Z", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowNjoxMlrOIcdQTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowNjoxMlrOIcdQTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDM0OA==", "bodyText": "Wrong exception is mentioned here", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566710348", "createdAt": "2021-01-29T10:06:12Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MTA5MDMz", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#pullrequestreview-579109033", "createdAt": "2021-01-29T10:07:06Z", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowNzowNlrOIcdSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowNzowNlrOIcdSPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDg0Ng==", "bodyText": "Missing values in the java docs. Please add.", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566710846", "createdAt": "2021-01-29T10:07:06Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API\n+     * @@return Imported API\n+     */\n+    public API importAPI(InputStream fileInputStream, Boolean preserveProvider, Boolean overwrite, String[] tokenScopes)\n+            throws APIManagementException;\n+\n+    /**\n+     * Used to import an API Product artifact.\n+     *\n+     * @param fileInputStream     Input stream from the REST request\n+     *                            (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider    User choice to keep or replace the API Product provider\n+     * @param importAPIs          Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs       Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @@return Imported API Product\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MTA5OTAy", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#pullrequestreview-579109902", "createdAt": "2021-01-29T10:08:12Z", "commit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowODoxMlrOIcdVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMDowODoxMlrOIcdVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMTU4MQ==", "bodyText": "Missing @param and @throws", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566711581", "createdAt": "2021-01-29T10:08:12Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApiProductsApiServiceImpl.java", "diffHunk": "@@ -726,77 +676,65 @@ public Response apiProductsGet(Integer limit, Integer offset, String query, Stri\n         return null;\n     }\n \n-    @Override public Response apiProductsPost(APIProductDTO body, MessageContext messageContext) {\n-        String provider = null;\n-        try {\n-            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n-            String username = RestApiCommonUtil.getLoggedInUsername();\n-            // if not add product\n-            provider = body.getProvider();\n-            String context = body.getContext();\n-            if (!StringUtils.isBlank(provider) && !provider.equals(username)) {\n-                if (!APIUtil.hasPermission(username, Permissions.APIM_ADMIN)) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"User \" + username + \" does not have admin permission (\"\n-                                + Permissions.APIM_ADMIN + \") hence provider (\" + provider\n-                                + \") overridden with current user (\" + username + \")\");\n-                    }\n-                    provider = username;\n-                }\n-            } else {\n-                // Set username in case provider is null or empty\n-                provider = username;\n-            }\n-\n-            List<String> tiersFromDTO = body.getPolicies();\n-            Set<Tier> definedTiers = apiProvider.getTiers();\n-            List<String> invalidTiers = RestApiUtil.getInvalidTierNames(definedTiers, tiersFromDTO);\n-            if (!invalidTiers.isEmpty()) {\n-                RestApiUtil.handleBadRequest(\n-                        \"Specified tier(s) \" + Arrays.toString(invalidTiers.toArray()) + \" are invalid\", log);\n-            }\n-            if (body.getAdditionalProperties() != null) {\n-                String errorMessage = RestApiPublisherUtils\n-                        .validateAdditionalProperties(body.getAdditionalProperties());\n-                if (!errorMessage.isEmpty()) {\n-                    RestApiUtil.handleBadRequest(errorMessage, log);\n-                }\n-            }\n-            if (body.getVisibility() == null) {\n-                //set the default visibility to PUBLIC\n-                body.setVisibility(VisibilityEnum.PUBLIC);\n-            }\n+    /**\n+     * Import an API Product by uploading an archive file. All relevant API Product data will be included upon the creation of\n+     * the API Product. Depending on the choice of the user, provider of the imported API Product will be preserved or modified.\n+     *\n+     * @param fileInputStream       UploadedInputStream input stream from the REST request\n+     * @param fileDetail            File details as Attachment\n+     * @param preserveProvider      User choice to keep or replace the API Product provider\n+     * @param importAPIs            Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct   Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs         Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @return API Product import response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}