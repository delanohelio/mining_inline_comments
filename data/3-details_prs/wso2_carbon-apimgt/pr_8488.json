{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NTA2NzU3", "number": 8488, "title": "Adding feature for subscription tier update in an existing subscription", "bodyText": "Issue\nresolves wso2/product-apim#5246\nMethodology\nUse Case\nProvide capability to change subscription tier without having to delete the subscription and resubscribing to the same API.\nChanges Implemented\nREST API Changes\n\n\nAdded a new field to Subscription Resource\nrequestedThrottlingPolicy:\ntype: string\nexample: Unlimited\n\n\nAdded PUT HTTP method to '/subscriptions/{subscriptionId}' endpoint\n\n\n\"PUT https://localhost:9443/api/am/store/v1/subscriptions/5b65808c-cdf2-43e1-a695-de63e3ad0ae9\\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\n\\n{\\n    \"throttlingPolicy\": \"Gold\",\\n  \"requestedThrottlingPolicy\": \"Unlimited\",\\n    \"apiId\": \"c43a325c-260b-4302-81cb-768eafaa3aed\",\\n    \"applicationId\": \"c30f3a6e-ffa4-4ae7-afce-224d1f820524\"\\n    \"status\": \"UNBLOCKED\"\\n}\"\nDatabase Changes\n\nAdded a new column, TIER_ID_PENDING to AM_SUBSCRIPTIONS table. This is to store the requested tier without losing the details regarding the already subscribed tier.\n\nWorkflow Changes\n\nAdded a new workflow extension\n\n<SubscriptionUpdate executor=\"org.wso2.carbon.apimgt.impl.workflow.SubscriptionUpdateSimpleWorkflowExecutor\"/> <!--SubscriptionUpdate executor=\"org.wso2.carbon.apimgt.impl.workflow.SubscriptionUpdateWSWorkflowExecutor\"> <Property name=\"serviceEndpoint\">http://localhost:9765/services/SubscriptionApprovalWorkFlowProcess/</Property> <Property name=\"username\">admin</Property> <Property name=\"password\">admin</Property> <Property name=\"callbackURL\">https://localhost:8243/services/WorkflowCallbackService</Property> </SubscriptionUpdate-->\nImpl Changes\nAdded a new subscription status TIER_UPDATE_PENDING, this is to the state where previous state is UNBLOCKED and then a subscription tier update has been triggered and currently in the approval process but not yet approved. Subscription which is in this state is also in UNBLOCKED state for the current existing tier. So users can use the  same previous subscription tier just as before without having to wait for new tier approval.\nUI Changes\n\nAll the Subscription states.\n\n\n\nSubscription which is in UNBLOCKED state can be edited.\n\n\n\n\nSubscription which is in TIER_UPDATE_PENDING can be edited, which means we are requesting another new tier. Here, we are showing previous tier as well as the requested tier.\n\n\n\nSubscription which is in BLOCKED state can\u2019t be edited for tier.\n\n\n\nSubscription which is in ON_HOLD state can\u2019t be edited for tier.\n\n\n\nSubscription which is in REJECTED state can\u2019t be edited for tier.\n\n\n\nWorkflows Extension details can be edited by using the carbon console.", "createdAt": "2020-05-12T06:06:20Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8488", "merged": true, "mergeCommit": {"oid": "82a2acab22f91b599e63964fe3e19cf1b1a84388"}, "closed": true, "closedAt": "2020-05-25T04:19:11Z", "author": {"login": "CrowleyRajapakse"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgjyPqgBqjMzMjczNDM4NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckoL1UgFqTQxNzQ0Nzc3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ca37ac17a517b093d0bdde9a1430f156c0923ed", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1ca37ac17a517b093d0bdde9a1430f156c0923ed", "committedDate": "2020-05-12T05:44:28Z", "message": "adding subscription tier update in an existing subscription"}, "afterCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "committedDate": "2020-05-12T12:52:37Z", "message": "adding subscription tier update in an existing subscription"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5NTM0", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-411179534", "createdAt": "2020-05-13T18:13:43Z", "commit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzo0M1rOGU9wgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzo0M1rOGU9wgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjU0Ng==", "bodyText": "remove newline", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424636546", "createdAt": "2020-05-13T18:13:43Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionUpdateSimpleWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.api.model.APIProduct;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class SubscriptionUpdateSimpleWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionUpdateSimpleWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method executes subscription update simple workflow and return workflow response back to the caller\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response back to the caller\n+     * @throws WorkflowException Thrown when the workflow execution was not fully performed\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+        WorkflowResponse workflowResponse = complete(workflowDTO);\n+        super.publishEvents(workflowDTO);\n+\n+        return workflowResponse;\n+    }\n+\n+    /**\n+     * This method is responsible for updating monetization logic and returns the execute method.\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response to the caller by returning the execute() method\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse monetizeSubscription(WorkflowDTO workflowDTO, API api) throws WorkflowException {\n+        // implementation is not provided in this version\n+        return execute(workflowDTO);\n+    }\n+\n+    @Override\n+    public WorkflowResponse monetizeSubscription(WorkflowDTO workflowDTO, APIProduct apiProduct) throws WorkflowException {\n+        // implementation is not provided in this version\n+        return execute(workflowDTO);\n+    }\n+\n+    /**\n+     * This method completes subscription update simple workflow and return workflow response back to the caller\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response back to the caller\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+        SubscriptionWorkflowDTO subscriptionWorkflowDTO = (SubscriptionWorkflowDTO)workflowDTO;\n+        try {\n+            if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.APPROVED) {\n+                apiMgtDAO.updateSubscriptionStatusAndTier(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED, subscriptionWorkflowDTO.getRequestedTierName());\n+            } else if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.CREATED ||\n+                    subscriptionWorkflowDTO.getStatus() == WorkflowStatus.REGISTERED) {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.TIER_UPDATE_PENDING);\n+            } else if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.REJECTED) {\n+                apiMgtDAO.updateSubscriptionStatusAndTier(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED, subscriptionWorkflowDTO.getTierName());\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTgwMDg0", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-411180084", "createdAt": "2020-05-13T18:14:27Z", "commit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDoyN1rOGU9yIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDoyN1rOGU9yIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjk2MA==", "bodyText": "remove unwanted newlines", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424636960", "createdAt": "2020-05-13T18:14:27Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionUpdateWSWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+*  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*/\n+\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.axiom.om.util.AXIOMUtil;\n+import org.apache.axis2.AxisFault;\n+import org.apache.axis2.Constants;\n+import org.apache.axis2.addressing.EndpointReference;\n+import org.apache.axis2.client.Options;\n+import org.apache.axis2.client.ServiceClient;\n+import org.apache.axis2.transport.http.HTTPConstants;\n+import org.apache.axis2.transport.http.HttpTransportProperties;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SubscriptionUpdateWSWorkflowExecutor extends WorkflowExecutor {\n+    private static final Log log = LogFactory.getLog(SubscriptionUpdateWSWorkflowExecutor.class);\n+    private String serviceEndpoint;\n+    private String username;\n+    private char[] password;\n+    private String contentType;\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method is used to execute the workflow without giving a workflow response back to the caller to execute\n+     * some other task after completing the workflow\n+     *\n+     * @param workflowDTO - The WorkflowDTO which contains workflow contextual information related to the workflow.\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        try {\n+            String action = WorkflowConstants.UPDATE_SUBSCRIPTION_WS_ACTION;\n+            ServiceClient client = getClient(action);\n+            String payload = \"<wor:SubscriptionApprovalWorkFlowProcessRequest \" +\n+                    \"         xmlns:wor=\\\"http://workflow.subscription.apimgt.carbon.wso2.org\\\">\\n\" +\n+                    \"         <wor:apiName>$1</wor:apiName>\\n\" +\n+                    \"         <wor:apiVersion>$2</wor:apiVersion>\\n\" +\n+                    \"         <wor:apiContext>$3</wor:apiContext>\\n\" +\n+                    \"         <wor:apiProvider>$4</wor:apiProvider>\\n\" +\n+                    \"         <wor:subscriber>$5</wor:subscriber>\\n\" +\n+                    \"         <wor:applicationName>$6</wor:applicationName>\\n\" +\n+                    \"         <wor:tierName>$7</wor:tierName>\\n\" +\n+                    \"         <wor:workflowExternalRef>$8</wor:workflowExternalRef>\\n\" +\n+                    \"         <wor:callBackURL>$9</wor:callBackURL>\\n\" +\n+                    \"      </wor:SubscriptionApprovalWorkFlowProcessRequest>\";\n+\n+            SubscriptionWorkflowDTO subsWorkflowDTO = (SubscriptionWorkflowDTO) workflowDTO;\n+            String callBackURL = subsWorkflowDTO.getCallbackUrl();\n+\n+            payload = payload.replace(\"$1\", subsWorkflowDTO.getApiName());\n+            payload = payload.replace(\"$2\", subsWorkflowDTO.getApiVersion());\n+            payload = payload.replace(\"$3\", subsWorkflowDTO.getApiContext());\n+            payload = payload.replace(\"$4\", subsWorkflowDTO.getApiProvider());\n+            payload = payload.replace(\"$5\", subsWorkflowDTO.getSubscriber());\n+            payload = payload.replace(\"$6\", subsWorkflowDTO.getApplicationName());\n+            payload = payload.replace(\"$7\", subsWorkflowDTO.getTierName());\n+            payload = payload.replace(\"$8\", subsWorkflowDTO.getExternalWorkflowReference());\n+            payload = payload.replace(\"$9\", callBackURL != null ? callBackURL : \"?\");\n+\n+            client.fireAndForget(AXIOMUtil.stringToOM(payload));\n+            super.execute(workflowDTO);\n+        } catch (AxisFault axisFault) {\n+            log.error(\"Error sending out message\", axisFault);\n+            throw new WorkflowException(\"Error sending out message\", axisFault);\n+        } catch (XMLStreamException e) {\n+            log.error(\"Error converting String to OMElement\", e);\n+            throw new WorkflowException(\"Error converting String to OMElement\", e);\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+        log.info(\"Subscription Update [Complete] Workflow Invoked. Workflow ID : \" + workflowDTO\n+                .getExternalWorkflowReference() + \"Workflow State : \" + workflowDTO.getStatus());\n+\n+        if (WorkflowStatus.APPROVED.equals(workflowDTO.getStatus())) {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            try {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(workflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED);\n+            } catch (APIManagementException e) {\n+                log.error(\"Could not complete subscription update workflow\", e);\n+                throw new WorkflowException(\"Could not complete subscription update workflow\", e);\n+            }\n+        } else if (WorkflowStatus.REJECTED.equals(workflowDTO.getStatus())) {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            try {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(workflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.REJECTED);\n+            } catch (APIManagementException e) {\n+                log.error(\"Could not complete subscription update workflow\", e);\n+                throw new WorkflowException(\"Could not complete subscription update workflow\", e);\n+            }\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public void cleanUpPendingTask(String workflowExtRef) throws WorkflowException {\n+        String errorMsg = null;\n+        super.cleanUpPendingTask(workflowExtRef);\n+        try {\n+            String action = WorkflowConstants.DELETE_SUBSCRIPTION_WS_ACTION;\n+            ServiceClient client = getClient(action);\n+            String payload = \"<wor:CancelSubscriptionApprovalWorkflowProcessRequest \" +\n+                    \"           xmlns:wor=\\\"http://workflow.subscription.apimgt.carbon.wso2.org\\\">\\n\" +\n+                    \"           <wor:workflowExtRef>\" + workflowExtRef + \"</wor:workflowExtRef>\\n\" +\n+                    \"        </wor:CancelSubscriptionApprovalWorkflowProcessRequest>\";\n+\n+            client.fireAndForget(AXIOMUtil.stringToOM(payload));\n+        } catch (AxisFault axisFault) {\n+            errorMsg = \"Error sending out cancel pending subscription approval process message. cause: \" + axisFault\n+                    .getMessage();\n+            throw new WorkflowException(errorMsg, axisFault);\n+        } catch (XMLStreamException e) {\n+            errorMsg = \"Error converting subscription cleanup String to OMElement. cause: \" + e.getMessage();\n+            throw new WorkflowException(errorMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves configured ServiceClient for communication with external services\n+     *\n+     * @param action web service action to use\n+     * @return configured service client\n+     * @throws AxisFault\n+     */\n+    public ServiceClient getClient(String action) throws AxisFault {\n+        ServiceClient client = new ServiceClient(\n+                ServiceReferenceHolder.getInstance().getContextService().getClientConfigContext(), null);\n+        Options options = new Options();\n+        options.setAction(action);\n+        options.setTo(new EndpointReference(serviceEndpoint));\n+\n+        if (contentType != null) {\n+            options.setProperty(Constants.Configuration.MESSAGE_TYPE, contentType);\n+        } else {\n+            options.setProperty(Constants.Configuration.MESSAGE_TYPE, HTTPConstants.MEDIA_TYPE_TEXT_XML);\n+        }\n+\n+        HttpTransportProperties.Authenticator auth = new HttpTransportProperties.Authenticator();\n+\n+        // Assumes authentication is required if username and password is given\n+        if (username != null && !username.isEmpty() && password != null && password.length != 0) {\n+            auth.setUsername(username);\n+            auth.setPassword(String.valueOf(password));\n+            auth.setPreemptiveAuthentication(true);\n+            List<String> authSchemes = new ArrayList<String>();\n+            authSchemes.add(HttpTransportProperties.Authenticator.BASIC);\n+            auth.setAuthSchemes(authSchemes);\n+\n+            if (contentType == null) {\n+                options.setProperty(Constants.Configuration.MESSAGE_TYPE, HTTPConstants.MEDIA_TYPE_TEXT_XML);\n+            }\n+            options.setProperty(HTTPConstants.AUTHENTICATE, auth);\n+            options.setManageSession(true);\n+        }\n+        client.setOptions(options);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 200}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTgwMzkw", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-411180390", "createdAt": "2020-05-13T18:14:52Z", "commit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDo1MlrOGU9zEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDo1MlrOGU9zEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzIwMQ==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424637201", "createdAt": "2020-05-13T18:14:52Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/WorkflowExecutorFactory.java", "diffHunk": "@@ -113,6 +113,9 @@ public WorkflowDTO createWorkflowDTO(String wfType) {\n         }else if(WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION.equals(wfType)){\n             workflowDTO = new SubscriptionWorkflowDTO();\n             workflowDTO.setWorkflowType(wfType);\n+        }else if(WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE.equals(wfType)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc4NTcw", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-411178570", "createdAt": "2020-05-13T18:12:24Z", "commit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMjoyNFrOGU9tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNzo0MVrOGU95tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Ng==", "bodyText": "formatting", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424635776", "createdAt": "2020-05-13T18:12:24Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -466,11 +468,25 @@\n             \"   API_ID = ? \" +\n             \"   AND APPLICATION_ID = ?\";\n \n+    public static final String RETRIEVE_SUBSCRIPTION_ID_SQL =\n+            \" SELECT \" +\n+                    \"   SUBSCRIPTION_ID \" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION \" +\n+                    \" WHERE \" +\n+                    \"   UUID = ? \";\n+\n     public static final String ADD_SUBSCRIPTION_SQL =\n             \" INSERT INTO \" +\n             \"   AM_SUBSCRIPTION (TIER_ID,API_ID,APPLICATION_ID,SUB_STATUS,SUBS_CREATE_STATE,CREATED_BY,CREATED_TIME, \" +\n-                    \"UPDATED_TIME, UUID) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\";\n+                    \"UPDATED_TIME, UUID, TIER_ID_PENDING) \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzODkwMA==", "bodyText": "use exceptionCodes", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424638900", "createdAt": "2020-05-13T18:17:41Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/SubscriptionsApiServiceImpl.java", "diffHunk": "@@ -244,6 +244,107 @@ public Response subscriptionsPost(SubscriptionDTO body, String xWSO2Tenant, Mess\n         return null;\n     }\n \n+    /**\n+     * Update already created subscriptions with the details specified in the body parameter\n+     *\n+     * @param body        new subscription details\n+     * @return newly added subscription as a SubscriptionDTO if successful\n+     */\n+    @Override\n+    public Response subscriptionsSubscriptionIdPut(SubscriptionDTO body, String subscriptionId, String xWSO2Tenant, MessageContext messageContext) {\n+        String username = RestApiUtil.getLoggedInUsername();\n+        String tenantDomain = RestApiUtil.getRequestedTenantDomain(xWSO2Tenant);\n+        APIConsumer apiConsumer;\n+\n+        try {\n+            apiConsumer = RestApiUtil.getConsumer(username);\n+            String applicationId = body.getApplicationId();\n+            String currentThrottlingPolicy = body.getThrottlingPolicy();\n+            String requestedThrottlingPolicy = body.getRequestedThrottlingPolicy();\n+\n+            //Check whether the subscription status is not empty and also not blocked\n+            if (body.getStatus() != null) {\n+                if (body.getStatus().value() == \"BLOCKED\" || body.getStatus().value() == \"ON_HOLD\"\n+                        || body.getStatus().value() == \"REJECTED\") {\n+                    RestApiUtil.handleBadRequest(\n+                            \"Cannot update subscriptions with provided status\", log);\n+                    return null;\n+                }\n+            } else {\n+                RestApiUtil.handleBadRequest(\n+                        \"Request must contain status of the subscription\", log);\n+                return null;\n+            }\n+\n+            //check whether user is permitted to access the API. If the API does not exist,\n+            // this will throw a APIMgtResourceNotFoundException\n+            if (body.getApiId() != null) {\n+                if (!RestAPIStoreUtils.isUserAccessAllowedForAPIByUUID(body.getApiId(), tenantDomain)) {\n+                    RestApiUtil.handleAuthorizationFailure(RestApiConstants.RESOURCE_API, body.getApiId(), log);\n+                }\n+            }  else {\n+                RestApiUtil.handleBadRequest(\n+                        \"Request must contain either apiIdentifier or apiProductIdentifier and the relevant type\", log);\n+                return null;\n+            }\n+\n+            Application application = apiConsumer.getApplicationByUUID(applicationId);\n+            if (application == null) {\n+                //required application not found\n+                RestApiUtil.handleResourceNotFoundError(RestApiConstants.RESOURCE_APPLICATION, applicationId, log);\n+                return null;\n+            }\n+\n+            if (!RestAPIStoreUtils.isUserAccessAllowedForApplication(application)) {\n+                //application access failure occurred\n+                RestApiUtil.handleAuthorizationFailure(RestApiConstants.RESOURCE_APPLICATION, applicationId, log);\n+            }\n+\n+            ApiTypeWrapper apiTypeWrapper = apiConsumer.getAPIorAPIProductByUUID(body.getApiId(), tenantDomain);\n+\n+            //Validation for allowed throttling tiers and Tenant based validation for subscription. If failed this will\n+            //  throw an APIMgtAuthorizationFailedException with the reason as the message\n+            RestAPIStoreUtils.checkSubscriptionAllowed(apiTypeWrapper, body.getThrottlingPolicy());\n+\n+            apiTypeWrapper.setTier(body.getThrottlingPolicy());\n+\n+            SubscriptionResponse subscriptionResponse = apiConsumer\n+                    .updateSubscription(apiTypeWrapper, username, application.getId(), subscriptionId,\n+                            currentThrottlingPolicy, requestedThrottlingPolicy);\n+            SubscribedAPI addedSubscribedAPI = apiConsumer\n+                    .getSubscriptionByUUID(subscriptionResponse.getSubscriptionUUID());\n+            SubscriptionDTO addedSubscriptionDTO = SubscriptionMappingUtil.fromSubscriptionToDTO(addedSubscribedAPI);\n+            WorkflowResponse workflowResponse = subscriptionResponse.getWorkflowResponse();\n+            if (workflowResponse instanceof HttpWorkflowResponse) {\n+                String payload = workflowResponse.getJSONPayload();\n+                addedSubscriptionDTO.setRedirectionParams(payload);\n+            }\n+\n+            return Response.ok(new URI(RestApiConstants.RESOURCE_PATH_SUBSCRIPTIONS + \"/\" +\n+                    addedSubscribedAPI.getUUID())).entity(addedSubscriptionDTO).build();\n+\n+        } catch (APIMgtAuthorizationFailedException e) {\n+            //this occurs when the api:application:tier mapping is not allowed. The reason for the message is taken from\n+            // the message of the exception e\n+            RestApiUtil.handleAuthorizationFailure(e.getMessage(), e, log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTg0MTk4", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-411184198", "createdAt": "2020-05-13T18:19:58Z", "commit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxOTo1OFrOGU9_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxOTo1OFrOGU9_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MDMwNA==", "bodyText": "Add to other database types", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424640304", "createdAt": "2020-05-13T18:19:58Z", "author": {"login": "tharindu1st"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql", "diffHunk": "@@ -1341,6 +1342,7 @@ CREATE TABLE IF NOT EXISTS AM_API_PRODUCT_MAPPING (\n CREATE TABLE IF NOT EXISTS AM_SUBSCRIPTION (\n     SUBSCRIPTION_ID INTEGER AUTO_INCREMENT,\n     TIER_ID VARCHAR(50),\n+    TIER_ID_PENDING VARCHAR(50),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "committedDate": "2020-05-12T12:52:37Z", "message": "adding subscription tier update in an existing subscription"}, "afterCommit": {"oid": "252d2c422442265d215b03f8905c33e4eb7755f9", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/252d2c422442265d215b03f8905c33e4eb7755f9", "committedDate": "2020-05-14T02:21:35Z", "message": "adding subscription tier update in an existing subscription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "committedDate": "2020-05-18T09:59:06Z", "message": "adding subscription tier update in an existing subscription"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "252d2c422442265d215b03f8905c33e4eb7755f9", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/252d2c422442265d215b03f8905c33e4eb7755f9", "committedDate": "2020-05-14T02:21:35Z", "message": "adding subscription tier update in an existing subscription"}, "afterCommit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "committedDate": "2020-05-18T09:59:06Z", "message": "adding subscription tier update in an existing subscription"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDM5MjY4", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-417439268", "createdAt": "2020-05-25T03:30:47Z", "commit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzozMDo0N1rOGZz5cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzozMDo0N1rOGZz5cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxNzg3NQ==", "bodyText": "Make sure this key value is a unique value for each. If the key is duplicated, there can be unpredictable issues.", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r429717875", "createdAt": "2020-05-25T03:30:47Z", "author": {"login": "chanaka3d"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Applications/Details/SubscriptionTableData.jsx", "diffHunk": "@@ -158,9 +238,103 @@ class SubscriptionTableData extends React.Component {\n                 <TableCell>{apiInfo.lifeCycleStatus}</TableCell>\n                 <TableCell>{throttlingPolicy}</TableCell>\n                 <TableCell>{status}</TableCell>\n-\n-                <TableCell>\n-                    <div>\n+                <TableCell>                   \n+                        <IconButton aria-label='Edit' onClick={this.handleRequestOpenEditMenu}>\n+                            <Icon>edit</Icon>\n+                        </IconButton>\n+                        <Dialog open={openMenuEdit} transition={Slide}>\n+                            <DialogTitle>Update Subscription</DialogTitle>\n+                            <DialogContent>\n+                                <DialogContentText>\n+                                    <FormattedMessage\n+                                        id='Applications.Details.SubscriptionTableData.update.throttling.policy'\n+                                        defaultMessage='Current Subscription Tier : '\n+                                    />\n+                                        {throttlingPolicy}\n+                                    <div>\n+                                        {   (status === 'BLOCKED')\n+                                            ? (\n+                                                <FormattedMessage\n+                                                    id='Applications.Details.SubscriptionTableData.update.throttling.policy.blocked'\n+                                                    defaultMessage='Subscription is in BLOCKED state. You need to unblock the subscription inorder to edit the tier'\n+                                                />\n+                                            )\n+                                             : (status === 'ON_HOLD')\n+                                            ? (\n+                                                <FormattedMessage\n+                                                    id='Applications.Details.SubscriptionTableData.update.throttling.policy.blocked'\n+                                                    defaultMessage='Subscription is currently ON_HOLD state. You need to get approval to the subscription before editing the tier'\n+                                                />\n+                                            )\n+                                             : (status === 'REJECTED')\n+                                            ? (\n+                                                <FormattedMessage\n+                                                    id='Applications.Details.SubscriptionTableData.update.throttling.policy.blocked'\n+                                                    defaultMessage='Subscription is currently REJECTED state. You need to get approval to the subscription before editing the tier'\n+                                                />\n+                                            )\n+                                             :(   \n+                                                <div>\n+                                                    <TextField\n+                                                        required\n+                                                        fullWidth\n+                                                        id='outlined-select-currency'\n+                                                        select\n+                                                        label={(\n+                                                            <FormattedMessage\n+                                                                defaultMessage='Throttling Tier'\n+                                                                id='Applications.Details.SubscriptionTableData.update.throttling.policy.name'\n+                                                            />\n+                                                        )}\n+                                                        value={selectedTier}\n+                                                        name='throttlingPolicy'\n+                                                        onChange={e => this.setSelectedTier(e.target.value)}\n+                                                        helperText={(\n+                                                            <FormattedMessage\n+                                                                defaultMessage={`Assign a new Throttling policy tier to the existing subscription`}\n+                                                                id='Applications.Details.SubscriptionTableData.update.throttling.policy.helper'\n+                                                            />\n+                                                        )}\n+                                                        margin='normal'\n+                                                        variant='outlined'\n+                                                    >\n+                                                        {this.state.tiers.map((tier) => (\n+                                                            <MenuItem key={tier.value} value={tier.value}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDM5MzEz", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-417439313", "createdAt": "2020-05-25T03:31:03Z", "commit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDQ3Nzc3", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#pullrequestreview-417447777", "createdAt": "2020-05-25T04:16:29Z", "commit": {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}