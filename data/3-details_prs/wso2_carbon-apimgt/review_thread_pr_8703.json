{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjgzMDg1", "number": 8703, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDo0MVrOEEiKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NTozM1rOEEioCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg5NDk0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDo0MVrOGiNx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozMTozNlrOGi4mEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDUzNw==", "bodyText": "Why we have disabled this rule ??", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530537", "createdAt": "2020-06-11T04:04:41Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMjAxOA==", "bodyText": "it is disabled because to avoid \"Prop spreading is forbidden\" issue. I have created certain  props and const and pass them into ContentBase", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439232018", "createdAt": "2020-06-12T06:31:36Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDUzNw=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg5NTg1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNToxNVrOGiNycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNjozNlrOGiNzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDY3Mg==", "bodyText": "Should use theme.spacing", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530672", "createdAt": "2020-06-11T04:05:15Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDk2OA==", "bodyText": "Better to use box component for positioning things\n<Box mt={5} mr={2} >\n.\n.\n.\n</Box>", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530968", "createdAt": "2020-06-11T04:06:36Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDY3Mg=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg5NjMzOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNTozM1rOGiNytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNTozM1rOGiNytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDc0Mg==", "bodyText": "Why we have custom border styling here ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530742", "createdAt": "2020-06-11T04:05:33Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg5OTY2OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1OFrOGiN00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1OFrOGiN00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTI4Mw==", "bodyText": "use object destructuring", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531283", "createdAt": "2020-06-11T04:07:58Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkwMDI1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODoxN1rOGiN1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODoxN1rOGiN1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTM3Nw==", "bodyText": "Don't catch errors for just re-throwing it as-is", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531377", "createdAt": "2020-06-11T04:08:17Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkwMDUyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODozMVrOGiN1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNjoxOVrOGi4srA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTQyNw==", "bodyText": "log the error\nconsole.error", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531427", "createdAt": "2020-06-11T04:08:31Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTc1OQ==", "bodyText": "Docs\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531759", "createdAt": "2020-06-11T04:09:45Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTQyNw=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzcwOA==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439233708", "createdAt": "2020-06-12T06:36:19Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTQyNw=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkwMzg1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMDozN1rOGiN3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMDozN1rOGiN3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTk3OQ==", "bodyText": "Initialize default values when we declare the variable", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531979", "createdAt": "2020-06-11T04:10:37Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxMzA2OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxNjozOFrOGiN86Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxNjozOFrOGiN86Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzM1Mw==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533353", "createdAt": "2020-06-11T04:16:38Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "diffHunk": "@@ -49,6 +49,12 @@ import PolicyIcon from '@material-ui/icons/Policy';\n import ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\n import BlockIcon from '@material-ui/icons/Block';\n import AssignmentIcon from '@material-ui/icons/Assignment';\n+import ApplicationCreation from 'AppComponents/Workflow/ApplicationCreation';\n+import SubscriptionCreation from 'AppComponents/Workflow/SubscriptionCreation';\n+import RegistrationCreation from 'AppComponents/Workflow/RegistrationCreation';\n+import APIStateChange from 'AppComponents/Workflow/APIStateChange';\n+import UserCreation from 'AppComponents/Workflow/UserCreation';\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxNTA0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODowMFrOGiN-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODowMFrOGiN-EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzY0OA==", "bodyText": "why are we using custom border colours?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533648", "createdAt": "2020-06-11T04:18:00Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxNjE0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODo0NlrOGiN-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNjo0NVrOGi4tOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzgyMw==", "bodyText": "why we need to initialize the variable with an empty string??", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533823", "createdAt": "2020-06-11T04:18:46Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzg0OQ==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439233849", "createdAt": "2020-06-12T06:36:45Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzgyMw=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxNjcwOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOTowOVrOGiN_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNzo0NlrOGi4uqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzkxMQ==", "bodyText": "we can make promisedupdateWorkflow a const right?\nconst promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533911", "createdAt": "2020-06-11T04:19:09Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNDIxNg==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439234216", "createdAt": "2020-06-12T06:37:46Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzkxMQ=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxNzAzOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOToyMlrOGiN_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNjo1NFrOGi4tbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzk2MA==", "bodyText": "This should be chained as next then", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533960", "createdAt": "2020-06-11T04:19:22Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzkwMA==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439233900", "createdAt": "2020-06-12T06:36:54Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzk2MA=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxNzY3OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOTo1NVrOGiN_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOTo1NVrOGiN_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDA2Ng==", "bodyText": "Add internationalisation.", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534066", "createdAt": "2020-06-11T04:19:55Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxODkwOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0MlrOGiOAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0MlrOGiOAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDI0MQ==", "bodyText": "why do we need to declare a variable for this small span ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534241", "createdAt": "2020-06-11T04:20:42Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkxOTA1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0N1rOGiOAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0N1rOGiOAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDI2MQ==", "bodyText": "Change doc links to workflow links. These are still microgateway links", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534261", "createdAt": "2020-06-11T04:20:47Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyMDM3OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/ApplicationCreation.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMTo0MlrOGiOBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNzowOFrOGi4ttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDQ2NA==", "bodyText": "Please fix this in here and all the other repeating places", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534464", "createdAt": "2020-06-11T04:21:42Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/ApplicationCreation.jsx", "diffHunk": "@@ -0,0 +1,453 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+        textDecoration: 'none',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_APPLICATION_CREATION')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzk3Mw==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439233973", "createdAt": "2020-06-12T06:37:08Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/ApplicationCreation.jsx", "diffHunk": "@@ -0,0 +1,453 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+        textDecoration: 'none',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_APPLICATION_CREATION')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDQ2NA=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyNDM5OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNDozNlrOGiODyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozOTo1MFrOGi4xkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTExMg==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535112", "createdAt": "2020-06-11T04:24:36Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNDk2Mg==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439234962", "createdAt": "2020-06-12T06:39:50Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTExMg=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyNDYyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNDo0NlrOGiOD6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MDowM1rOGi4x2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE0Ng==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535146", "createdAt": "2020-06-11T04:24:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTAzNQ==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235035", "createdAt": "2020-06-12T06:40:03Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE0Ng=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyNDkxOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNDo1M1rOGiOEDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MDoxM1rOGi4yGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE4MA==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535180", "createdAt": "2020-06-11T04:24:53Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTA5OQ==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235099", "createdAt": "2020-06-12T06:40:13Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE4MA=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyNTQxOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNToxNlrOGiOEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MDozMFrOGi4ycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTI2NA==", "bodyText": "Add Internationalisation to the labels of coloumn props. Add to all places with static values.", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535264", "createdAt": "2020-06-11T04:25:16Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTE4Ng==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235186", "createdAt": "2020-06-12T06:40:30Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTI2NA=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk0NTM1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozODozM1rOGiOQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MTowMFrOGi4zMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODM0OA==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438538348", "createdAt": "2020-06-11T04:38:33Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+\n+    const columns = [\n+        ...columProps,\n+    ];\n+\n+    const options = {\n+        filterType: 'checkbox',\n+        selectableRows: 'none',\n+        filter: false,\n+        search: false,\n+        print: false,\n+        download: false,\n+        viewColumns: false,\n+        customToolbar: null,\n+        responsive: 'stacked',\n+        searchText,\n+    };\n+    if (data && data.length === 0) {\n+        return (\n+            <ContentBase\n+                {...pageProps}\n+                pageStyle='small'\n+            >\n+                <Card className={classes.root}>\n+                    <CardActionArea>\n+                        <CardContent>\n+                            <Typography gutterBottom variant='h5' component='h2'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.title.apistatechange'\n+                                    defaultMessage='API State Change'\n+                                />\n+\n+                            </Typography>\n+                            <Typography variant='body2' color='textSecondary' component='p'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.content.apistatechange'\n+                                    defaultMessage={'There are no workflow pending requests for API state change.'\n+                                    + 'It is possible to approve or reject workflow pending requests of '\n+                                    + 'API state change. Workflow Approval Executor need to be enabled to '\n+                                    + 'introduce this approve reject process into system'}\n+                                />\n+                            </Typography>\n+                        </CardContent>\n+                    </CardActionArea>\n+                    <CardActions>\n+                        {addButtonOverride || (\n+                            <EditComponent updateList={fetchData} {...addButtonProps} />\n+                        )}\n+                    </CardActions>\n+                </Card>\n+            </ContentBase>\n+        );\n+    }\n+    if (!data) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+\n+        );\n+    }\n+    return (\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTM3Nw==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235377", "createdAt": "2020-06-12T06:41:00Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+\n+    const columns = [\n+        ...columProps,\n+    ];\n+\n+    const options = {\n+        filterType: 'checkbox',\n+        selectableRows: 'none',\n+        filter: false,\n+        search: false,\n+        print: false,\n+        download: false,\n+        viewColumns: false,\n+        customToolbar: null,\n+        responsive: 'stacked',\n+        searchText,\n+    };\n+    if (data && data.length === 0) {\n+        return (\n+            <ContentBase\n+                {...pageProps}\n+                pageStyle='small'\n+            >\n+                <Card className={classes.root}>\n+                    <CardActionArea>\n+                        <CardContent>\n+                            <Typography gutterBottom variant='h5' component='h2'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.title.apistatechange'\n+                                    defaultMessage='API State Change'\n+                                />\n+\n+                            </Typography>\n+                            <Typography variant='body2' color='textSecondary' component='p'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.content.apistatechange'\n+                                    defaultMessage={'There are no workflow pending requests for API state change.'\n+                                    + 'It is possible to approve or reject workflow pending requests of '\n+                                    + 'API state change. Workflow Approval Executor need to be enabled to '\n+                                    + 'introduce this approve reject process into system'}\n+                                />\n+                            </Typography>\n+                        </CardContent>\n+                    </CardActionArea>\n+                    <CardActions>\n+                        {addButtonOverride || (\n+                            <EditComponent updateList={fetchData} {...addButtonProps} />\n+                        )}\n+                    </CardActions>\n+                </Card>\n+            </ContentBase>\n+        );\n+    }\n+    if (!data) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+\n+        );\n+    }\n+    return (\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODM0OA=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 403}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk0NTY1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozODo0N1rOGiOQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozODo0N1rOGiOQog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODQwMg==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438538402", "createdAt": "2020-06-11T04:38:47Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+\n+    const columns = [\n+        ...columProps,\n+    ];\n+\n+    const options = {\n+        filterType: 'checkbox',\n+        selectableRows: 'none',\n+        filter: false,\n+        search: false,\n+        print: false,\n+        download: false,\n+        viewColumns: false,\n+        customToolbar: null,\n+        responsive: 'stacked',\n+        searchText,\n+    };\n+    if (data && data.length === 0) {\n+        return (\n+            <ContentBase\n+                {...pageProps}\n+                pageStyle='small'\n+            >\n+                <Card className={classes.root}>\n+                    <CardActionArea>\n+                        <CardContent>\n+                            <Typography gutterBottom variant='h5' component='h2'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.title.apistatechange'\n+                                    defaultMessage='API State Change'\n+                                />\n+\n+                            </Typography>\n+                            <Typography variant='body2' color='textSecondary' component='p'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.content.apistatechange'\n+                                    defaultMessage={'There are no workflow pending requests for API state change.'\n+                                    + 'It is possible to approve or reject workflow pending requests of '\n+                                    + 'API state change. Workflow Approval Executor need to be enabled to '\n+                                    + 'introduce this approve reject process into system'}\n+                                />\n+                            </Typography>\n+                        </CardContent>\n+                    </CardActionArea>\n+                    <CardActions>\n+                        {addButtonOverride || (\n+                            <EditComponent updateList={fetchData} {...addButtonProps} />\n+                        )}\n+                    </CardActions>\n+                </Card>\n+            </ContentBase>\n+        );\n+    }\n+    if (!data) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+\n+        );\n+    }\n+    return (\n+\n+        <>\n+            <ContentBase {...pageProps}>\n+                {(searchActive || addButtonProps) && (\n+                    <AppBar className={classes.searchBar} position='static' color='default' elevation={0}>\n+                        <Toolbar>\n+                            <Grid container spacing={2} alignItems='center'>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2ODAyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1Mzo0NlrOGiOeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MToxN1rOGi4zlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTkxOQ==", "bodyText": "extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438541919", "createdAt": "2020-06-11T04:53:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTQ3Ng==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235476", "createdAt": "2020-06-12T06:41:17Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTkxOQ=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2OTI1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NDo0NlrOGiOfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MToyN1rOGi4z0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjExMg==", "bodyText": "You can remove these comments", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542112", "createdAt": "2020-06-11T04:54:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTUzNw==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235537", "createdAt": "2020-06-12T06:41:27Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjExMg=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2OTg5OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NTowNlrOGiOfeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MTo0NVrOGi40MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjIwMQ==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542201", "createdAt": "2020-06-11T04:55:06Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTYzMw==", "bodyText": "fixed with 54dd617", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r439235633", "createdAt": "2020-06-12T06:41:45Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjIwMQ=="}, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk3MDY1OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NTozM1rOGiOf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NTozM1rOGiOf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjMwOQ==", "bodyText": "extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542309", "createdAt": "2020-06-11T04:55:33Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 341}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}