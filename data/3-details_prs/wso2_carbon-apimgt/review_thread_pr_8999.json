{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTEzNjc5", "number": 8999, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1MjowMVrOEQG9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1NjowMVrOEQHEdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI2Nzc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1MjowMVrOG0F34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTozODowNlrOG0Hl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTM2MA==", "bodyText": "can we append the km name here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457275360", "createdAt": "2020-07-20T10:52:01Z", "author": {"login": "isharac"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzUyMA==", "bodyText": "Fixed in 83d8083", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303520", "createdAt": "2020-07-20T11:38:06Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTM2MA=="}, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI2ODcyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1MjoxNVrOG0F4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTozODoyMlrOG0HmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTUwMw==", "bodyText": "here as well", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457275503", "createdAt": "2020-07-20T10:52:15Z", "author": {"login": "isharac"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzY2NQ==", "bodyText": "Fixed in 83d8083", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303665", "createdAt": "2020-07-20T11:38:22Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTUwMw=="}, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI3OTY0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1NDo0OVrOG0F-xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTozODoyOFrOG0Hmxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzEyNA==", "bodyText": "can we append the username/any other info here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457277124", "createdAt": "2020-07-20T10:54:49Z", "author": {"login": "isharac"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzc1MA==", "bodyText": "Fixed in 83d8083", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303750", "createdAt": "2020-07-20T11:38:28Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzEyNA=="}, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI4NTAyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo1NjowMVrOG0GB3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTozODozNVrOG0HnJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzkxOA==", "bodyText": "we can use a constant for the error message and reuse in the exception", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457277918", "createdAt": "2020-07-20T10:56:01Z", "author": {"login": "isharac"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");\n+                String endUserToken = null;\n+                JWTInfoDto jwtInfoDto;\n+                try {\n+                    if (jwtGenerationEnabled) {\n+                        jwtInfoDto = GatewayUtils.generateJWTInfoDto(jwtValidationInfo, null,\n+                                apiKeyValidationInfoDTO, apiContext, apiVersion);\n+                        endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+                    }\n+                    return GatewayUtils.generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n+                            apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n+                } catch (ParseException e) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE, e);\n                 }\n-                return GatewayUtils\n-                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, api, null,\n-                                getApiLevelPolicy(),\n-                                endUserToken, true);\n-            } catch (ParseException e) {\n-                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n+            } else {\n+                log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzg0Nw==", "bodyText": "Fixed in 83d8083", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303847", "createdAt": "2020-07-20T11:38:35Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");\n+                String endUserToken = null;\n+                JWTInfoDto jwtInfoDto;\n+                try {\n+                    if (jwtGenerationEnabled) {\n+                        jwtInfoDto = GatewayUtils.generateJWTInfoDto(jwtValidationInfo, null,\n+                                apiKeyValidationInfoDTO, apiContext, apiVersion);\n+                        endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+                    }\n+                    return GatewayUtils.generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n+                            apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n+                } catch (ParseException e) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE, e);\n                 }\n-                return GatewayUtils\n-                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, api, null,\n-                                getApiLevelPolicy(),\n-                                endUserToken, true);\n-            } catch (ParseException e) {\n-                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n+            } else {\n+                log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzkxOA=="}, "originalCommit": {"oid": "3aae3648ba395d064389b0de14a20577e0a11b44"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3180, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}