{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1Nzk1ODA2", "number": 8198, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjo0MTo0OVrODgOOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo1Njo1M1rODhg3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTE0MDE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjo0MTo0OVrOFqUQFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjo0MTo0OVrOFqUQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNjMwOQ==", "bodyText": "Too much information about the underlying implementation is spilled over to the Authenticator. This makes the Authenticator fragile. In the case a different approach to represent JWT is chosen, Authenticator would have to be changed. Consider creating another layer of abstraction. You can either make JWTInfoDto an entity class by adding JWT related methods, or create a new class for handling JWT related stuff.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r379916309", "createdAt": "2020-02-16T16:41:49Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -16,6 +16,14 @@\n \n package org.wso2.carbon.apimgt.gateway.handlers.security.apikey;\n \n+import com.nimbusds.jose.JOSEObjectType;\n+import com.nimbusds.jose.JWSHeader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2be93857b2459d3e2ec17548834f1108ecfb6e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTE0MzE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/utils/GatewayUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjo0OTowMlrOFqURtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjo0OTowMlrOFqURtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNjcyNw==", "bodyText": "These methods too should go into a different entity class, rather than into a Util method. Now the GatewayUtil is coupled with the implementation of the JWT.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r379916727", "createdAt": "2020-02-16T16:49:02Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/utils/GatewayUtils.java", "diffHunk": "@@ -635,35 +660,12 @@ public static JSONObject validateAPISubscription(String apiContext, String apiVe\n     /**\n      * Verify the JWT token signature.\n      *\n-     * @param splitToken The JWT token which is split into [header, payload, signature]\n+     * @param jwt SignedJwt Token\n      * @param alias      public certificate keystore alias\n      * @return whether the signature is verified or or not\n      * @throws APISecurityException in case of signature verification failure\n      */\n-    public static boolean verifyTokenSignature(String[] splitToken, String alias) throws APISecurityException {\n-\n-        String signatureAlgorithm = null;\n-        // Retrieve signature algorithm from token header\n-        try {\n-            signatureAlgorithm = APIUtil.getSignatureAlgorithm(splitToken);\n-        } catch (APIManagementException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Token decryption failure when retrieving signature algorithm. Token: \" +\n-                        getMaskedToken(splitToken), e);\n-            }\n-            log.error(\"Invalid Api Key. Failed to decode the Api Key header.\");\n-            throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                    APISecurityConstants.API_AUTH_INVALID_CREDENTIALS_MESSAGE, e);\n-        }\n-\n-        if (StringUtils.isBlank(signatureAlgorithm)) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Signature algorithm not found in the token. Token: \" + getMaskedToken(splitToken));\n-            }\n-            log.error(\"Invalid JWT token. Signature algorithm not found in the token.\");\n-            throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n-                    APISecurityConstants.API_AUTH_INVALID_CREDENTIALS_MESSAGE);\n-        }\n+    public static boolean verifyTokenSignature(SignedJWT jwt, String alias) throws APISecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2be93857b2459d3e2ec17548834f1108ecfb6e"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTE3ODI2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNzo1ODoyNFrOFqUjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNzo1ODoyNFrOFqUjlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyMTMwMg==", "bodyText": "Improper use of exceptions. This is going to cause performance issues down the line. Better replace it with a logic that checks validity.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r379921302", "createdAt": "2020-02-16T17:58:24Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -398,26 +413,24 @@ private String removeApiKeyFromQueryParameters(String queryParam, String apiKey)\n      * @param payload The payload of the JWT token\n      * @return returns true if the JWT token is expired\n      */\n-    private static boolean isJwtTokenExpired(JSONObject payload) {\n-        //if exp claim not in the token, we treat it as infinite validity token.\n-        if (!payload.has(APIConstants.JwtTokenConstants.EXPIRY_TIME)) {\n-            return false;\n-        }\n-        // Check whether the token is expired or not.\n-        long issuedTime = payload.getLong(APIConstants.JwtTokenConstants.ISSUED_TIME) * 1000;\n-        long expiryTime = payload.getLong(APIConstants.JwtTokenConstants.EXPIRY_TIME) * 1000;\n-        long validityPeriod = expiryTime - issuedTime;\n-        long timestampSkew = OAuthServerConfiguration.getInstance().getTimeStampSkewInSeconds()*1000;\n-        long currentTime = System.currentTimeMillis();\n-\n-        //If the expiry time is not a never expiring value\n-        if (expiryTime != Long.MAX_VALUE && (currentTime - timestampSkew) > validityPeriod) {\n-            if ((currentTime - timestampSkew) > expiryTime) {\n+    private static boolean isJwtTokenExpired(JWTClaimsSet payload) {\n+\n+        int timestampSkew = (int) OAuthServerConfiguration.getInstance().getTimeStampSkewInSeconds();\n+\n+        DefaultJWTClaimsVerifier jwtClaimsSetVerifier = new DefaultJWTClaimsVerifier();\n+        jwtClaimsSetVerifier.setMaxClockSkew(timestampSkew);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3b7f99458049c82da26edbe566189da7f8f4b0"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjQ0NDY2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1MDo1NlrOFqgJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1MDo1NlrOFqgJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMTMyMA==", "bodyText": "Class name should be singular?", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r380111320", "createdAt": "2020-02-17T10:50:56Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -1958,4 +1958,24 @@ private ConfigParameters() {\n \n     public static final String DEFAULT_SCOPE_TYPE = \"OAUTH2\";\n     public static final String DEFAULT_BINDING_TYPE = \"DEFAULT\";\n+\n+    public static class TokenIssuers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48adc30f8ccb1bc67dcb679667e44d232627d5c3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjQ1OTYyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1NTo0N1rOFqgTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1NTo0N1rOFqgTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMzcxOQ==", "bodyText": "Better to log woth masked token to give more cality.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r380113719", "createdAt": "2020-02-17T10:55:47Z", "author": {"login": "harsha89"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -585,30 +641,39 @@ private void checkTokenWithTheScope(String resource, String resourceScope, JSONO\n      * @param tenantDomain   The tenant domain from which the token cache is retrieved\n      * @throws APISecurityException if the token is expired\n      */\n-    private void checkTokenExpiration(String tokenSignature, JSONObject payload, String tenantDomain) throws APISecurityException {\n-        // Check whether the token is expired or not.\n-        long issuedTime = payload.getLong(APIConstants.JwtTokenConstants.ISSUED_TIME) * 1000;\n-        long expiredTime = payload.getLong(APIConstants.JwtTokenConstants.EXPIRY_TIME) * 1000;\n-        long validityPeriod = expiredTime - issuedTime;\n-        long timestampSkew = OAuthServerConfiguration.getInstance().getTimeStampSkewInSeconds() * 1000;\n-        long currentTime = System.currentTimeMillis();\n-\n-        //If the validity period is not a never expiring value\n-        if (validityPeriod != Long.MAX_VALUE && (currentTime - timestampSkew) > validityPeriod) {\n-            if ((currentTime - timestampSkew) > expiredTime) {\n-                if (isGatewayTokenCacheEnabled) {\n-                    getGatewayTokenCache().remove(tokenSignature);\n-                    getGatewayJWTTokenCache().remove(tokenSignature);\n-                    getInvalidTokenCache().put(tokenSignature, tenantDomain);\n-                }\n-                log.error(\"JWT token is expired\");\n-                throw new APISecurityException(APISecurityConstants.API_AUTH_ACCESS_TOKEN_EXPIRED,\n-                        \"JWT token is expired\");\n+    private void checkTokenExpiration(String tokenSignature, JWTClaimsSet payload, String tenantDomain)\n+            throws APISecurityException {\n+\n+        long timestampSkew = OAuthServerConfiguration.getInstance().getTimeStampSkewInSeconds();\n+\n+        Date now = new Date();\n+        Date exp = payload.getExpirationTime();\n+        if (exp != null && !DateUtils.isAfter(exp, now, timestampSkew)) {\n+            if (isGatewayTokenCacheEnabled) {\n+                getGatewayTokenCache().remove(tokenSignature);\n+                getGatewayJWTTokenCache().remove(tokenSignature);\n+                getInvalidTokenCache().put(tokenSignature, tenantDomain);\n             }\n+            log.error(\"JWT token is expired\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48adc30f8ccb1bc67dcb679667e44d232627d5c3"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUzODE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNjozNlrOFqqfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNjozNlrOFqqfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MDYzOQ==", "bodyText": "120 limit exceeded.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r380280639", "createdAt": "2020-02-17T16:36:36Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java", "diffHunk": "@@ -1120,28 +1124,18 @@ private void setJWTConfiguration(OMElement omElement) {\n                 OMElement gatewayJWTGeneratorImplElement = gatewayJWTConfigurationElement\n                         .getFirstChildWithName(new QName(APIConstants.GATEWAY_JWT_GENERATOR_IMPL));\n                 jwtConfigurationDto.setGatewayJWTGeneratorImpl(gatewayJWTGeneratorImplElement.getText());\n-                OMElement gatewayJWTConfigurationsElement = gatewayJWTConfigurationElement\n-                        .getFirstChildWithName(new QName(APIConstants.GATEWAY_JWT_CONFIGURATION));\n-                if (gatewayJWTConfigurationsElement != null) {\n-                    OMElement claimsElement = gatewayJWTConfigurationsElement\n-                            .getFirstChildWithName(new QName(APIConstants.GATEWAY_JWT_GENERATOR_CLAIM_MAPPING));\n-                    if (claimsElement != null) {\n-                        Iterator claimElements =\n-                                claimsElement.getChildrenWithLocalName(APIConstants.GATEWAY_JWT_GENERATOR_CLAIM);\n-                        while (claimElements.hasNext()) {\n-                            OMElement claim = (OMElement) claimElements.next();\n-                            OMElement remoteClaimElement = claim.getFirstChildWithName(\n-                                    new QName(APIConstants.GATEWAY_JWT_GENERATOR_REMOTE_CLAIM));\n-                            OMElement localClaimElement = claim.getFirstChildWithName(\n-                                    new QName(APIConstants.GATEWAY_JWT_GENERATOR_LOCAL_CLAIM));\n-                            if (remoteClaimElement != null && localClaimElement != null) {\n-                                String remoteClaim = remoteClaimElement.getText();\n-                                String localClaim = localClaimElement.getText();\n-                                if (StringUtils.isNotEmpty(remoteClaim) &&\n-                                        StringUtils.isNotEmpty(localClaim)) {\n-                                    jwtConfigurationDto.getClaimConfigurations().add(new ClaimMappingDto(remoteClaim,\n-                                            localClaim));\n-                                }\n+                OMElement configurationElement =\n+                        gatewayJWTConfigurationElement.getFirstChildWithName(new QName(APIConstants.GATEWAY_JWT_CONFIGURATION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc4029a76c83f0292a2947d181041fe9823d588"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU0NTI4OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozOTowM1rOFqqjmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNToyODo0OFrOFq1gxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MTc1NQ==", "bodyText": "is jwks always open?", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r380281755", "createdAt": "2020-02-17T16:39:03Z", "author": {"login": "bhathiya"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2", "diffHunk": "@@ -146,6 +143,26 @@\n         </Environments>\n     </APIGateway>\n \n+    <TokenIssuers>\n+    {%- for issuer_1 in apim.jwt.issuer -%}\n+    <TokenIssuer issuer =\"{{issuer_1.name}}\">\n+    {% if issuer_1.jwks is defined %}\n+      <JWKSConfiguration>\n+        <URL>{{issuer_1.jwks.url}}</URL>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc4029a76c83f0292a2947d181041fe9823d588"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MTI1Mw==", "bodyText": "for most of the vendors endpoint was open", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r380461253", "createdAt": "2020-02-18T05:28:48Z", "author": {"login": "tharindu1st"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2", "diffHunk": "@@ -146,6 +143,26 @@\n         </Environments>\n     </APIGateway>\n \n+    <TokenIssuers>\n+    {%- for issuer_1 in apim.jwt.issuer -%}\n+    <TokenIssuer issuer =\"{{issuer_1.name}}\">\n+    {% if issuer_1.jwks is defined %}\n+      <JWKSConfiguration>\n+        <URL>{{issuer_1.jwks.url}}</URL>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MTc1NQ=="}, "originalCommit": {"oid": "ccc4029a76c83f0292a2947d181041fe9823d588"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDAzMzYxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/transformer/DefaultJWTTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozMToyMFrOFsMGDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoxNjo0NlrOFtgOrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3OTgyMg==", "bodyText": "Isn't this redundant?", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r381879822", "createdAt": "2020-02-20T09:31:20Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/transformer/DefaultJWTTransformer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.security.jwt.transformer;\n+\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.impl.dto.ClaimMappingDto;\n+import org.wso2.carbon.apimgt.impl.dto.JWTConfigurationDto;\n+import org.wso2.carbon.apimgt.impl.dto.TokenIssuerDto;\n+\n+import java.util.Map;\n+\n+\n+public class DefaultJWTTransformer implements JWTTransformer {\n+\n+    private JWTConfigurationDto jwtConfigurationDto;\n+\n+    public DefaultJWTTransformer(JWTConfigurationDto jwtConfigurationDto) {\n+\n+        this.jwtConfigurationDto = jwtConfigurationDto;\n+    }\n+\n+    @Override\n+    public JWTClaimsSet transform(JWTClaimsSet jwtClaimsSet) {\n+\n+        String issuer = jwtClaimsSet.getIssuer();\n+        TokenIssuerDto tokenIssuerDto = jwtConfigurationDto.getTokenIssuerDtoMap().get(issuer);\n+        if (tokenIssuerDto != null) {\n+            Map<String, ClaimMappingDto> claimConfigurations = tokenIssuerDto.getClaimConfigurations();\n+            JWTClaimsSet.Builder jwtBuilder = new JWTClaimsSet.Builder();\n+            for (Map.Entry<String, Object> claimEntry : jwtClaimsSet.getClaims().entrySet()) {\n+                ClaimMappingDto claimMappingDto = claimConfigurations.get(claimEntry.getKey());\n+                String claimKey = claimEntry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1ODI4Ng==", "bodyText": "no this was used to transform JWT from one form to another", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r383258286", "createdAt": "2020-02-24T13:16:46Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/transformer/DefaultJWTTransformer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.security.jwt.transformer;\n+\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.impl.dto.ClaimMappingDto;\n+import org.wso2.carbon.apimgt.impl.dto.JWTConfigurationDto;\n+import org.wso2.carbon.apimgt.impl.dto.TokenIssuerDto;\n+\n+import java.util.Map;\n+\n+\n+public class DefaultJWTTransformer implements JWTTransformer {\n+\n+    private JWTConfigurationDto jwtConfigurationDto;\n+\n+    public DefaultJWTTransformer(JWTConfigurationDto jwtConfigurationDto) {\n+\n+        this.jwtConfigurationDto = jwtConfigurationDto;\n+    }\n+\n+    @Override\n+    public JWTClaimsSet transform(JWTClaimsSet jwtClaimsSet) {\n+\n+        String issuer = jwtClaimsSet.getIssuer();\n+        TokenIssuerDto tokenIssuerDto = jwtConfigurationDto.getTokenIssuerDtoMap().get(issuer);\n+        if (tokenIssuerDto != null) {\n+            Map<String, ClaimMappingDto> claimConfigurations = tokenIssuerDto.getClaimConfigurations();\n+            JWTClaimsSet.Builder jwtBuilder = new JWTClaimsSet.Builder();\n+            for (Map.Entry<String, Object> claimEntry : jwtClaimsSet.getClaims().entrySet()) {\n+                ClaimMappingDto claimMappingDto = claimConfigurations.get(claimEntry.getKey());\n+                String claimKey = claimEntry.getKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3OTgyMg=="}, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDAzOTAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozMjo1MVrOFsMJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozMjo1MVrOFsMJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MDY1Mw==", "bodyText": "Pass the original exception while constructing the new one.", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r381880653", "createdAt": "2020-02-20T09:32:51Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -330,14 +342,18 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n             }\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Api Key signature verification failure. Api Key: \" + GatewayUtils.getMaskedToken(splitToken));\n+                log.debug(\"Api Key signature verification failure. Api Key: \" +\n+                        GatewayUtils.getMaskedToken(splitToken[0]));\n             }\n             log.error(\"Invalid Api Key. Signature verification failed.\");\n             throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n                     APISecurityConstants.API_AUTH_INVALID_CREDENTIALS_MESSAGE);\n \n         } catch (APISecurityException e) {\n             return new AuthenticationResponse(false, isMandatory, true, e.getErrorCode(), e.getMessage());\n+        } catch (ParseException e) {\n+            return new AuthenticationResponse(false, isMandatory, true, APISecurityConstants.API_AUTH_GENERAL_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDY3OTg2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo1Njo1M1rOFsSSjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjozODowN1rOFt6LYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4MTMyNg==", "bodyText": "Can you please elaborate how this method can be used to register multiple implementations?", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r381981326", "createdAt": "2020-02-20T12:56:53Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -353,5 +360,40 @@ protected void unsetMediationSecurityAdminService(MediationSecurityAdminService\n \n         ServiceReferenceHolder.getInstance().setMediationSecurityAdminService(null);\n     }\n+\n+    @Reference(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0OTIxNg==", "bodyText": "OK, understood how it works. We may not have to necessarily change the approach, but need to think about the following scenarios;\na. Can the component startup order affect the logic?\nb. How easy is for the developer to write an extension. Now they need to know certain things about OSGI as well.\nWe might not have to address these through code, but at least have to provide a good document around doing b .", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r382349216", "createdAt": "2020-02-21T01:17:49Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -353,5 +360,40 @@ protected void unsetMediationSecurityAdminService(MediationSecurityAdminService\n \n         ServiceReferenceHolder.getInstance().setMediationSecurityAdminService(null);\n     }\n+\n+    @Reference(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4MTMyNg=="}, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MzQyNg==", "bodyText": "as discussed this could be resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/8198#discussion_r383683426", "createdAt": "2020-02-25T06:38:07Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -353,5 +360,40 @@ protected void unsetMediationSecurityAdminService(MediationSecurityAdminService\n \n         ServiceReferenceHolder.getInstance().setMediationSecurityAdminService(null);\n     }\n+\n+    @Reference(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4MTMyNg=="}, "originalCommit": {"oid": "97af5d894aa3532dcebcbfa3b85b7624bcc44bde"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}