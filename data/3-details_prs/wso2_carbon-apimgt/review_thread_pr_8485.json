{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDgxMzk1", "number": 8485, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0NjoxNVrOD9P2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyOToxN1rOD9WnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ5NTA1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0NjoxNVrOGWoP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0NjoxNVrOGWoP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MTI3Mg==", "bodyText": "should never catch NPEs. Let's do a pre-check for null without catching an NPE.", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426381272", "createdAt": "2020-05-18T05:46:15Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -1193,16 +1194,21 @@ public String getOASDefinitionWithTierContentAwareProperty(String oasDefinition,\n      */\n     private boolean isDefaultGiven(String swaggerContent) throws APIManagementException {\n         Swagger swagger = getSwagger(swaggerContent);\n-        boolean isDefaultIsGiven = true;\n+        boolean isDefaultGiven = true;\n+        try {\n         Map<String, SecuritySchemeDefinition> securityDefinitions = swagger.getSecurityDefinitions();\n         if (securityDefinitions == null) {\n             securityDefinitions = new HashMap<>();\n         }\n         OAuth2Definition checkDefault = (OAuth2Definition) securityDefinitions.get(SWAGGER_SECURITY_SCHEMA_KEY);\n         if (checkDefault == null) {\n-            isDefaultIsGiven = false;\n+            isDefaultGiven = false;\n+        }\n+        return isDefaultGiven;\n+        } catch (NullPointerException e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0MTY3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMDo0N1rOGWorpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMDo0N1rOGWorpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODM5MA==", "bodyText": "StringUtils.isBlank checks string is empty and null both.", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426388390", "createdAt": "2020-05-18T06:10:47Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -1342,4 +1348,76 @@ public Swagger injectOtherResourceScopesToDefaultScheme(Swagger swagger) throws\n         swagger.setPaths(paths);\n         return swagger;\n     }\n+\n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param apiDefinition String\n+     * @param api           API\n+     * @param isBasepathExtractedFromSwagger boolean\n+     * @return URITemplate\n+     */\n+    @Override\n+    public API setExtensionsToAPI(String apiDefinition, API api , boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        Swagger swagger = getSwagger(apiDefinition);\n+        Map<String, Object> extensions = swagger.getVendorExtensions();\n+        if (extensions == null) {\n+            return api;\n+        }\n+\n+        //Setup Custom auth header for API\n+        String authHeader = OASParserUtil.getAuthorizationHeaderFromSwagger(extensions);\n+        if (authHeader != null) {\n+            api.setAuthorizationHeader(authHeader);\n+        }\n+        //Setup mutualSSL configuration\n+        String mutualSSL = OASParserUtil.getMutualSSLEnabledFromSwagger(extensions);\n+        if (mutualSSL != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0MjIwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMDo1OVrOGWor7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMDo1OVrOGWor7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODQ2MQ==", "bodyText": "StringUtils.isBlank checks string is empty and null both.", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426388461", "createdAt": "2020-05-18T06:10:59Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -1342,4 +1348,76 @@ public Swagger injectOtherResourceScopesToDefaultScheme(Swagger swagger) throws\n         swagger.setPaths(paths);\n         return swagger;\n     }\n+\n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param apiDefinition String\n+     * @param api           API\n+     * @param isBasepathExtractedFromSwagger boolean\n+     * @return URITemplate\n+     */\n+    @Override\n+    public API setExtensionsToAPI(String apiDefinition, API api , boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        Swagger swagger = getSwagger(apiDefinition);\n+        Map<String, Object> extensions = swagger.getVendorExtensions();\n+        if (extensions == null) {\n+            return api;\n+        }\n+\n+        //Setup Custom auth header for API\n+        String authHeader = OASParserUtil.getAuthorizationHeaderFromSwagger(extensions);\n+        if (authHeader != null) {\n+            api.setAuthorizationHeader(authHeader);\n+        }\n+        //Setup mutualSSL configuration\n+        String mutualSSL = OASParserUtil.getMutualSSLEnabledFromSwagger(extensions);\n+        if (mutualSSL != null) {\n+            String securityList = api.getApiSecurity();\n+            if (\"\".equals(securityList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0MjQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMTowOVrOGWosHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMTowOVrOGWosHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODUwOA==", "bodyText": "Formatting issue.", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426388508", "createdAt": "2020-05-18T06:11:09Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -1342,4 +1348,76 @@ public Swagger injectOtherResourceScopesToDefaultScheme(Swagger swagger) throws\n         swagger.setPaths(paths);\n         return swagger;\n     }\n+\n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param apiDefinition String\n+     * @param api           API\n+     * @param isBasepathExtractedFromSwagger boolean\n+     * @return URITemplate\n+     */\n+    @Override\n+    public API setExtensionsToAPI(String apiDefinition, API api , boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        Swagger swagger = getSwagger(apiDefinition);\n+        Map<String, Object> extensions = swagger.getVendorExtensions();\n+        if (extensions == null) {\n+            return api;\n+        }\n+\n+        //Setup Custom auth header for API\n+        String authHeader = OASParserUtil.getAuthorizationHeaderFromSwagger(extensions);\n+        if (authHeader != null) {\n+            api.setAuthorizationHeader(authHeader);\n+        }\n+        //Setup mutualSSL configuration\n+        String mutualSSL = OASParserUtil.getMutualSSLEnabledFromSwagger(extensions);\n+        if (mutualSSL != null) {\n+            String securityList = api.getApiSecurity();\n+            if (\"\".equals(securityList)) {\n+                securityList = APIConstants.DEFAULT_API_SECURITY_OAUTH2 ;\n+            }\n+            if (APIConstants.OPTIONAL.equals(mutualSSL)) {\n+                securityList = securityList + \",\" + APIConstants.API_SECURITY_MUTUAL_SSL;\n+            }\n+            else if (APIConstants.MANDATORY.equals(mutualSSL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0NTY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMjo0MFrOGWot_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMjo0MFrOGWot_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODk4OA==", "bodyText": "getTrottleTierFromSwagger has a typo", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426388988", "createdAt": "2020-05-18T06:12:40Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -1342,4 +1348,76 @@ public Swagger injectOtherResourceScopesToDefaultScheme(Swagger swagger) throws\n         swagger.setPaths(paths);\n         return swagger;\n     }\n+\n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param apiDefinition String\n+     * @param api           API\n+     * @param isBasepathExtractedFromSwagger boolean\n+     * @return URITemplate\n+     */\n+    @Override\n+    public API setExtensionsToAPI(String apiDefinition, API api , boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        Swagger swagger = getSwagger(apiDefinition);\n+        Map<String, Object> extensions = swagger.getVendorExtensions();\n+        if (extensions == null) {\n+            return api;\n+        }\n+\n+        //Setup Custom auth header for API\n+        String authHeader = OASParserUtil.getAuthorizationHeaderFromSwagger(extensions);\n+        if (authHeader != null) {\n+            api.setAuthorizationHeader(authHeader);\n+        }\n+        //Setup mutualSSL configuration\n+        String mutualSSL = OASParserUtil.getMutualSSLEnabledFromSwagger(extensions);\n+        if (mutualSSL != null) {\n+            String securityList = api.getApiSecurity();\n+            if (\"\".equals(securityList)) {\n+                securityList = APIConstants.DEFAULT_API_SECURITY_OAUTH2 ;\n+            }\n+            if (APIConstants.OPTIONAL.equals(mutualSSL)) {\n+                securityList = securityList + \",\" + APIConstants.API_SECURITY_MUTUAL_SSL;\n+            }\n+            else if (APIConstants.MANDATORY.equals(mutualSSL)) {\n+                securityList = securityList + \",\" + APIConstants.API_SECURITY_MUTUAL_SSL_MANDATORY;\n+            }\n+            api.setApiSecurity(securityList);\n+        }\n+        //Setup CORSConfigurations\n+        CORSConfiguration corsConfiguration = OASParserUtil.getCorsConfigFromSwagger(extensions);\n+        if (corsConfiguration != null) {\n+            api.setCorsConfiguration(corsConfiguration);\n+        }\n+        //Setup Response cache enabling\n+        boolean responseCacheEnable = OASParserUtil.getResponseCacheFromSwagger(extensions);\n+        if (responseCacheEnable) {\n+            api.setResponseCache(APIConstants.ENABLED);\n+        }\n+        //Setup cache timeOut\n+        int cacheTimeOut = OASParserUtil.getCacheTimeOutFromSwagger(extensions);\n+        if (cacheTimeOut != 0) {\n+            api.setCacheTimeout(cacheTimeOut);\n+        }\n+        //Setup Transports\n+        String transports = OASParserUtil.getTransportsFromSwagger(extensions);\n+        if (transports != null) {\n+            api.setTransports(transports);\n+        }\n+        //Setup Trottlingtiers\n+        String throttleTier = OASParserUtil.getTrottleTierFromSwagger(extensions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0ODI2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMzo0NlrOGWovaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxMzo0NlrOGWovaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4OTM1Mw==", "bodyText": "Don't ever catch NPEs. We need to have pre-checks for null before executing a code that does an NPE.", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426389353", "createdAt": "2020-05-18T06:13:46Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "diffHunk": "@@ -1259,12 +1260,17 @@ public String getOASDefinitionWithTierContentAwareProperty(String oasDefinition,\n      */\n     private boolean isDefaultGiven(String swaggerContent) throws APIManagementException {\n         OpenAPI openAPI = getOpenAPI(swaggerContent);\n-        boolean isDefaultIsGiven = true;\n-        SecurityScheme checkDefault = openAPI.getComponents().getSecuritySchemes().get(OPENAPI_SECURITY_SCHEMA_KEY);\n-        if (checkDefault == null) {\n-            isDefaultIsGiven = false;\n+        boolean isDefaultGiven = true;\n+        try {\n+            SecurityScheme checkDefault = openAPI.getComponents().getSecuritySchemes().get(OPENAPI_SECURITY_SCHEMA_KEY);\n+            if (checkDefault == null) {\n+                isDefaultGiven = false;\n+            }\n+            return isDefaultGiven;\n+        } catch (NullPointerException e) {\n+            isDefaultGiven = false;\n+            return isDefaultGiven;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTU0ODczOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxNDowM1rOGWovtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoxNDowM1rOGWovtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4OTQzMQ==", "bodyText": "Remove duplicated //", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426389431", "createdAt": "2020-05-18T06:14:03Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "diffHunk": "@@ -1456,4 +1462,75 @@ private OpenAPI injectOtherResourceScopesToDefaultScheme(OpenAPI openAPI) throws\n         return openAPI;\n     }\n \n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param apiDefinition String\n+     * @param api           API\n+     * @param isBasepathExtractedFromSwagger boolean\n+     * @return URITemplate\n+     */\n+    @Override\n+    public API setExtensionsToAPI(String apiDefinition, API api, boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        OpenAPI openAPI = getOpenAPI(apiDefinition);\n+        Map<String, Object> extensions = openAPI.getExtensions();\n+        if (extensions == null) {\n+            return api;\n+        }\n+\n+//        //Setup Custom auth header for API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36fe5d1f390e72ba7b33a655110ddfb36b8bd67f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjYwMTkzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyOToxN1rOGWzATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyOToxN1rOGWzATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NzUxNg==", "bodyText": "throttleTier", "url": "https://github.com/wso2/carbon-apimgt/pull/8485#discussion_r426557516", "createdAt": "2020-05-18T11:29:17Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -1226,4 +1228,176 @@ public static String preProcess(String swaggerContent) throws APIManagementExcep\n         String swaggerContentUpdated = apiDefinition.processOtherSchemeScopes(swaggerContent);\n         return swaggerContentUpdated;\n     }\n+\n+    /**\n+     * This method returns api that is attched with api extensions related to micro-gw\n+     *\n+     * @param swaggerContent String\n+     * @param api            API\n+     * @return URITemplate\n+     */\n+    public static API setExtensionsToAPI(String swaggerContent, API api, boolean isBasepathExtractedFromSwagger) throws APIManagementException {\n+        APIDefinition apiDefinition = getOASParser(swaggerContent);\n+        api = apiDefinition.setExtensionsToAPI(swaggerContent, api, isBasepathExtractedFromSwagger);\n+        return api;\n+    }\n+\n+    /**\n+     * This method returns extension of trottling tier related to micro-gw\n+     *\n+     * @param extensions Map<String, Object> extensions\n+     * @return String String\n+     * @throws APIManagementException throws if an error occurred\n+     */\n+    public static String getBasePathFromSwagger(Map<String, Object> extensions) throws APIManagementException {\n+        String basepath = null;\n+        ObjectMapper mapper = new ObjectMapper();\n+        if (extensions.containsKey(APIConstants.X_WSO2_BASEPATH)) {\n+            Object object = extensions.get(APIConstants.X_WSO2_BASEPATH).toString();\n+            basepath = mapper.convertValue(object, String.class);\n+        }\n+        return basepath;\n+    }\n+\n+    /**\n+     * This method returns extension of trottling tier related to micro-gw\n+     *\n+     * @param extensions Map<String, Object> extensions\n+     * @return String String\n+     * @throws APIManagementException throws if an error occurred\n+     */\n+    public static String getThrottleTierFromSwagger(Map<String, Object> extensions) throws APIManagementException {\n+        String trottleTier = null;\n+        ObjectMapper mapper = new ObjectMapper();\n+        if (extensions.containsKey(APIConstants.X_WSO2_THROTTLING_TIER)) {\n+            Object object = extensions.get(APIConstants.X_WSO2_THROTTLING_TIER).toString();\n+            trottleTier = mapper.convertValue(object, String.class);\n+        }\n+        return trottleTier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3326e1cdfab564cecd7fa544d40dd4399ff46f73"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3515, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}