{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Mjk5OTQ1", "number": 8828, "title": "Expose DB Oprations as a Webservice in Artifact synchronizer feature", "bodyText": "Related issue: wso2/product-apim#8246", "createdAt": "2020-06-24T15:56:22Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8828", "merged": true, "mergeCommit": {"oid": "b1a234a2002c900e9df972cfd060bc83e6f67737"}, "closed": true, "closedAt": "2020-07-06T17:46:42Z", "author": {"login": "Sarangan0219"}, "timelineItems": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuKfCYgH2gAyNDM5Mjk5OTQ1OjVkYjg3ODhmYTE4OWUxNzQ0Y2IxNTgzYzdmMThmNTA2ODM1NjM1ZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtFLeOgFqTU2MTU0NzQyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5db8788fa189e1744cb1583c7f18f506835635dc", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5db8788fa189e1744cb1583c7f18f506835635dc", "committedDate": "2020-06-23T19:19:33Z", "message": "exposing DB opeartions as web service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dfb31422cfe8e0226733f2ed53f65eca8df48e7", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5dfb31422cfe8e0226733f2ed53f65eca8df48e7", "committedDate": "2020-06-24T09:04:14Z", "message": "Added resources for NFS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceffa4b19e96c7179fe17c12692c36682a82d788", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/ceffa4b19e96c7179fe17c12692c36682a82d788", "committedDate": "2020-06-24T14:13:33Z", "message": "Refractor saving and retrieving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ddbff92955f3a1838bd6b2ddbd8bfe52362b70c", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9ddbff92955f3a1838bd6b2ddbd8bfe52362b70c", "committedDate": "2020-06-24T14:15:34Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bdba4b52a116ac713d2d520f1b975fa72e56db1", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0bdba4b52a116ac713d2d520f1b975fa72e56db1", "committedDate": "2020-06-24T14:17:17Z", "message": "remove unecessary exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3dc8a6b97f1e02ef6074cb2e6c31ac133cb5cc4", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a3dc8a6b97f1e02ef6074cb2e6c31ac133cb5cc4", "committedDate": "2020-06-24T14:18:33Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d294521f569cb4c35f11ce5f4058e3bd22c6c21e", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d294521f569cb4c35f11ce5f4058e3bd22c6c21e", "committedDate": "2020-06-24T15:53:45Z", "message": "add resources in dataservice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e35dc8e7bab44f6f0c3add14bec5d6c642fd82", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/54e35dc8e7bab44f6f0c3add14bec5d6c642fd82", "committedDate": "2020-06-24T17:20:39Z", "message": "add resource for isAPIPublished"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4eb0c1b4247e5b51eddd2cfd927332a668d5b42", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e4eb0c1b4247e5b51eddd2cfd927332a668d5b42", "committedDate": "2020-06-24T19:10:58Z", "message": "merge upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec3da288d6168a76a85004bf9e5d40991f7b1a5", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1ec3da288d6168a76a85004bf9e5d40991f7b1a5", "committedDate": "2020-06-24T19:13:38Z", "message": "add liecene header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/59d2b7e0f765ae6be9d02cbbc659450f0c115d71", "committedDate": "2020-06-25T04:28:13Z", "message": "edit parameter definitions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjUzMjg4", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-437653288", "createdAt": "2020-06-25T16:17:33Z", "commit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxNzozM1rOGpCENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjozMToyNVrOGpCn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3ODY0Nw==", "bodyText": "Formatting issues", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445678647", "createdAt": "2020-06-25T16:17:33Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3ODc5NQ==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445678795", "createdAt": "2020-06-25T16:17:46Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTAxOQ==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445679019", "createdAt": "2020-06-25T16:18:08Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX + System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTE1OQ==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445679159", "createdAt": "2020-06-25T16:18:20Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX + System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTg1Nw==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445679857", "createdAt": "2020-06-25T16:19:27Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX + System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            String responseString = EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+            JSONObject artifactObject = new JSONObject(responseString);\n+            JSONArray jArray = (JSONArray)artifactObject.get(\"list\");\n+            if (jArray != null) {\n+                for (int i = 0; i < jArray.length(); i++) {\n+                    gatewayRuntimeArtifactsArray.add(jArray.get(i).toString());\n+                }\n             }\n-            if (log.isDebugEnabled()){\n-                log.debug(\"Successfully retrieved Artifacts from DB\");\n+            return gatewayRuntimeArtifactsArray;\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MTI3OA==", "bodyText": "Better to do a null check before retrieving the entity", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445681278", "createdAt": "2020-06-25T16:21:37Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX + System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            String responseString = EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MjI2OQ==", "bodyText": "Can't we use the same line without exceeding the row width?", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445682269", "createdAt": "2020-06-25T16:23:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,93 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n-            }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction +\"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX + System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path  = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            String responseString = EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+            JSONObject artifactObject = new JSONObject(responseString);\n+            JSONArray jArray = (JSONArray)artifactObject.get(\"list\");\n+            if (jArray != null) {\n+                for (int i = 0; i < jArray.length(); i++) {\n+                    gatewayRuntimeArtifactsArray.add(jArray.get(i).toString());\n+                }\n             }\n-            if (log.isDebugEnabled()){\n-                log.debug(\"Successfully retrieved Artifacts from DB\");\n+            return gatewayRuntimeArtifactsArray;\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" ;\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n+        }\n+    }\n+\n+    private HttpResponse invokeService(String endpoint) throws IOException, ArtifactSynchronizerException {\n+        HttpGet method = new HttpGet(endpoint);\n+        URL synapseGetURL = new URL(endpoint);\n+        APIManagerConfiguration config = ServiceReferenceHolder.getInstance()\n+                .getAPIManagerConfigurationService().getAPIManagerConfiguration();\n+        String username = config.getFirstProperty(APIConstants.API_KEY_VALIDATOR_USERNAME);\n+        String password = config.getFirstProperty(APIConstants.API_KEY_VALIDATOR_PASSWORD);\n+        byte[] credentials = Base64.encodeBase64((username + \":\" + password).getBytes\n+                (APIConstants.DigestAuthConstants.CHARSET));\n+        int synapsePort = synapseGetURL .getPort();\n+        String synapseProtocol = synapseGetURL .getProtocol();\n+        method.setHeader(\"Authorization\", \"Basic \" + new String(credentials,\n+                APIConstants.DigestAuthConstants.CHARSET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4NjU1Ng==", "bodyText": "Can't we add this method to APIUtil and use it by both DBSaver and DBretriever?", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445686556", "createdAt": "2020-06-25T16:29:39Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBSaver.java", "diffHunk": "@@ -43,45 +59,122 @@ public void init() throws ArtifactSynchronizerException {\n     public void saveArtifact(String gatewayRuntimeArtifacts, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n \n-        try {\n-            JSONObject artifactObject = new JSONObject(gatewayRuntimeArtifacts);\n-            String apiId = (String) artifactObject.get(\"apiId\");\n-            String apiName = (String) artifactObject.get(\"name\");\n-            String version = (String) artifactObject.get(\"version\");\n-            String tenantDomain = (String) artifactObject.get(\"tenantDomain\");\n-\n-            byte[] gatewayRuntimeArtifactsAsBytes = gatewayRuntimeArtifacts.getBytes();\n-            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(gatewayRuntimeArtifactsAsBytes);\n-            if (!apiMgtDAO.isAPIDetailsExists(apiId)) {\n-                apiMgtDAO.addGatewayPublishedAPIDetails(apiId, apiName,\n-                        version, tenantDomain);\n-            }\n+        JSONObject artifactObject = new JSONObject(gatewayRuntimeArtifacts);\n+        String apiId = (String) artifactObject.get(\"apiId\");\n+        String apiName = (String) artifactObject.get(\"name\");\n+        String version = (String) artifactObject.get(\"version\");\n+        String tenantDomain = (String) artifactObject.get(\"tenantDomain\");\n+        byte[] bytesEncoded =  Base64.encodeBase64(gatewayRuntimeArtifacts.getBytes());\n+        String bytesEncodedAsString =  new String(bytesEncoded);\n \n-            String dbQuery;\n-            if (apiMgtDAO.isAPIArtifactExists(apiId, gatewayLabel)) {\n-                dbQuery = SQLConstants.UPDATE_API_ARTIFACT;\n-            } else {\n-                dbQuery = SQLConstants.ADD_GW_API_ARTIFACT;\n+        try {\n+            String baseUrl = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String synapsePost = baseUrl + APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS;\n+\n+            JSONObject revokeRequestPayload = new JSONObject();\n+            revokeRequestPayload.put(\"apiId\", apiId);\n+            revokeRequestPayload.put(\"apiName\", apiName);\n+            revokeRequestPayload.put(\"version\", version);\n+            revokeRequestPayload.put(\"tenantDomain\", tenantDomain);\n+            revokeRequestPayload.put(\"gatewayInstruction\", gatewayInstruction);\n+            revokeRequestPayload.put(\"bytesEncodedAsString\", bytesEncodedAsString);\n+            revokeRequestPayload.put(\"gatewayLabel\", URLEncoder.encode(gatewayLabel,\n+                    APIConstants.DigestAuthConstants.CHARSET));\n+            HttpResponse httpResponse = invokeService(synapsePost,revokeRequestPayload);\n+            if (HttpStatus.SC_OK != httpResponse.getStatusLine().getStatusCode()) {\n+                log.error(\"Retrieving artifacts is UnSuccessful. Internal Data Service returned HTTP Status \" +\n+                        \"code : \" + httpResponse.getStatusLine().getStatusCode() );\n+                throw new ArtifactSynchronizerException(\"Error while Saving Artifacts to DB\");\n             }\n-            apiMgtDAO.addGatewayPublishedAPIArtifacts(apiId, gatewayLabel,\n-                    byteArrayInputStream, gatewayRuntimeArtifactsAsBytes.length, gatewayInstruction, dbQuery);\n+        } catch (MalformedURLException e) {\n+            String msg = \"Error while constructing Synapse POST URL\";\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client\";\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n+        }\n+    }\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully saved Artifacts of \" + apiName);\n-            }\n-        } catch (APIManagementException e) {\n-            throw new ArtifactSynchronizerException(\"Error saving Artifacts to the DB\", e);\n+    private HttpResponse invokeService(String endpoint, JSONObject revokeRequestPayload) throws\n+            IOException {\n+        URL synapsePostURL = new URL(endpoint);\n+        APIManagerConfiguration config = ServiceReferenceHolder.getInstance()\n+                .getAPIManagerConfigurationService().getAPIManagerConfiguration();\n+        String username = config.getFirstProperty(APIConstants.API_KEY_VALIDATOR_USERNAME);\n+        String password = config.getFirstProperty(APIConstants.API_KEY_VALIDATOR_PASSWORD);\n+        byte[] credentials = Base64.encodeBase64((username + \":\" + password).getBytes\n+                (APIConstants.DigestAuthConstants.CHARSET));\n+        int synapsePort = synapsePostURL.getPort();\n+        String synapseProtocol = synapsePostURL.getProtocol();\n+        HttpClient httpClient = APIUtil.getHttpClient(synapsePort, synapseProtocol);\n+\n+        if (revokeRequestPayload != null) {\n+             HttpPost method = new HttpPost(endpoint);\n+             method.setHeader(\"Authorization\", \"Basic \" + new String(credentials,\n+                    APIConstants.DigestAuthConstants.CHARSET));\n+             StringEntity requestEntity = new StringEntity(revokeRequestPayload.toString());\n+             requestEntity.setContentType(APIConstants.APPLICATION_JSON_MEDIA_TYPE);\n+             method.setEntity(requestEntity);\n+             return executeHTTPRequest(method, httpClient);\n+\n+        } else {\n+             HttpGet method = new HttpGet(endpoint);\n+             method.setHeader(\"Authorization\", \"Basic \" + new String(credentials,\n+                    APIConstants.DigestAuthConstants.CHARSET));\n+             return executeHTTPRequest(method, httpClient);\n         }\n+    }\n \n+    private HttpResponse executeHTTPRequest(HttpRequestBase method, HttpClient httpClient ) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4NzgwMA==", "bodyText": "We should not use DAO outside of Impl component", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r445687800", "createdAt": "2020-06-25T16:31:25Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/GatewaySynapseArtifactsApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.wso2.carbon.apimgt.internal.service.impl;\n+\n+import com.google.common.io.ByteStreams;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.internal.service.*;\n+import org.wso2.carbon.apimgt.internal.service.dto.*;\n+\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import java.io.InputStream;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+\n+\n+public class GatewaySynapseArtifactsApiServiceImpl implements GatewaySynapseArtifactsApiService {\n+\n+    protected ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d2b7e0f765ae6be9d02cbbc659450f0c115d71"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0007abb08c126e094b757b72e03eba846516e404", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0007abb08c126e094b757b72e03eba846516e404", "committedDate": "2020-06-25T18:58:25Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d9528ef11995bb33199a1cfa237d56ef7126e7b", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9d9528ef11995bb33199a1cfa237d56ef7126e7b", "committedDate": "2020-06-25T19:05:25Z", "message": "resolve formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16f1ec29fedc0b09ac879a212b7c2f487058783", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c16f1ec29fedc0b09ac879a212b7c2f487058783", "committedDate": "2020-06-25T19:08:46Z", "message": "resolve formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d953b96659e219307dfca0117408f74490f2923b", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d953b96659e219307dfca0117408f74490f2923b", "committedDate": "2020-06-25T19:10:55Z", "message": "resolve formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "997829868f21b2e28987ca4475a3a650d1411d26", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/997829868f21b2e28987ca4475a3a650d1411d26", "committedDate": "2020-06-26T04:25:28Z", "message": "add comments in DB files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197c4407952f0b1ef1982ee330551667fb7d7b7c", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/197c4407952f0b1ef1982ee330551667fb7d7b7c", "committedDate": "2020-06-26T05:45:11Z", "message": "resolve H2 DB errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380732ae11e0e1a7965f375dedb2951e8cd9be3f", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/380732ae11e0e1a7965f375dedb2951e8cd9be3f", "committedDate": "2020-06-29T05:14:01Z", "message": "Merge upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ac0e05b94e15a601b30af61bd4cd15dde16ed3", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f8ac0e05b94e15a601b30af61bd4cd15dde16ed3", "committedDate": "2020-06-29T05:15:15Z", "message": "refractor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/61d0a02639ea99563dd3ec9c2197d33362be8aef", "committedDate": "2020-06-29T05:18:43Z", "message": "format the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2a598dd9719ab3dbfb0e2aaeb254fed017a9fd", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6b2a598dd9719ab3dbfb0e2aaeb254fed017a9fd", "committedDate": "2020-06-29T06:18:23Z", "message": "Merge remote-tracking branch 'upstream/master' into dataservice2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA4NjU5", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-439708659", "createdAt": "2020-06-30T06:35:50Z", "commit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNTo1MFrOGqtu7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNTo1MFrOGqtu7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MjY3MQ==", "bodyText": "Formatting issue.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r447442671", "createdAt": "2020-06-30T06:35:50Z", "author": {"login": "prasa7"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayStartupListener.java", "diffHunk": "@@ -57,24 +55,23 @@ public GatewayStartupListener() {\n \n     @Override\n     public void completingServerStartup() {\n-\n-        deployArtifactsAtStartup();\n+        startListener();\n     }\n \n-    private static void deployArtifactsAtStartup() {\n-\n+    private boolean  deployArtifactsAtStartup(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA4NzY1", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-439708765", "createdAt": "2020-06-30T06:36:03Z", "commit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjowM1rOGqtvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjowM1rOGqtvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0Mjc1OQ==", "bodyText": "Formatting issue.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r447442759", "createdAt": "2020-06-30T06:36:03Z", "author": {"login": "prasa7"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +53,76 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction + \"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            if (httpResponse.getEntity() != null ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA4OTEw", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-439708910", "createdAt": "2020-06-30T06:36:19Z", "commit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjoxOVrOGqtvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjoxOVrOGqtvrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0Mjg2Mg==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r447442862", "createdAt": "2020-06-30T06:36:19Z", "author": {"login": "prasa7"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +53,76 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction + \"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            if (httpResponse.getEntity() != null ){\n+                return EntityUtils.toString(httpResponse.getEntity(), APIConstants.DigestAuthConstants.CHARSET);\n+            } else {\n+                throw new ArtifactSynchronizerException(\"HTTP response is empty\");\n             }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client\";\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String baseURL = APIConstants.HTTPS_PROTOCOL_URL_PREFIX +\n+                    System.getProperty(APIConstants.KEYMANAGER_HOSTNAME) + \":\" +\n+                    System.getProperty(APIConstants.KEYMANAGER_PORT) + APIConstants.INTERNAL_WEB_APP_EP;\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            HttpResponse httpResponse = invokeService(endpoint);\n+            String responseString;\n+            if (httpResponse.getEntity() != null ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA5MDAz", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-439709003", "createdAt": "2020-06-30T06:36:29Z", "commit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjoyOVrOGqtv-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozNjoyOVrOGqtv-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MjkzOA==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r447442938", "createdAt": "2020-06-30T06:36:29Z", "author": {"login": "prasa7"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/GatewaySynapseArtifactsApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.wso2.carbon.apimgt.internal.service.impl;\n+\n+import com.google.common.io.ByteStreams;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.internal.service.GatewaySynapseArtifactsApiService;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseArtifactListDTO;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+\n+\n+\n+public class GatewaySynapseArtifactsApiServiceImpl implements GatewaySynapseArtifactsApiService {\n+\n+    protected ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+\n+    private SynapseArtifactListDTO synapseArtifactListDTOS = new SynapseArtifactListDTO();\n+\n+    public Response gatewaySynapseArtifactsGet(String gatewayLabel, MessageContext messageContext) throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try {\n+            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(gatewayLabel);\n+            for (ByteArrayInputStream byteStream :baip){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d0a02639ea99563dd3ec9c2197d33362be8aef"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49dff9067cb7a73042b9509252a42134433708f", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c49dff9067cb7a73042b9509252a42134433708f", "committedDate": "2020-06-30T06:56:09Z", "message": "resolve formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b73aa02e4dd3517bf51c8cddc6d5862cc5c7020", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8b73aa02e4dd3517bf51c8cddc6d5862cc5c7020", "committedDate": "2020-06-30T06:59:12Z", "message": "Merge remote-tracking branch 'upstream/master' into dataservice2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f4596c17bd00b3cca7f78731b93e631efdc1dc2", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1f4596c17bd00b3cca7f78731b93e631efdc1dc2", "committedDate": "2020-06-30T07:06:23Z", "message": "Add deleted file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85481f6982117165f23bb143d9fe0179bcd5284c", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/85481f6982117165f23bb143d9fe0179bcd5284c", "committedDate": "2020-06-30T11:57:26Z", "message": "remove HTTP call from artifact saver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4883643bd0bf98b114b139883b7a4f791aab5f", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2c4883643bd0bf98b114b139883b7a4f791aab5f", "committedDate": "2020-06-30T12:52:51Z", "message": "edit connection parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e1430d416c0a901378184b4fc71106de1b11d08", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9e1430d416c0a901378184b4fc71106de1b11d08", "committedDate": "2020-06-30T13:42:26Z", "message": "resolve runtime errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e6358767be9177a39b394da24c7dba8ab8b4ae", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/50e6358767be9177a39b394da24c7dba8ab8b4ae", "committedDate": "2020-06-30T13:46:34Z", "message": "Merge remote-tracking branch 'upstream/master' into dataservice2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4e7f6888999a2fbfaa10671e10b373cdb633a1", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4f4e7f6888999a2fbfaa10671e10b373cdb633a1", "committedDate": "2020-06-30T13:49:49Z", "message": "Add method description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418add1b177e9a65ffdd624330a508bc24ffc8fe", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/418add1b177e9a65ffdd624330a508bc24ffc8fe", "committedDate": "2020-06-30T13:51:05Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb2442b90d0dba1078e804b12872d187c592cea", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3eb2442b90d0dba1078e804b12872d187c592cea", "committedDate": "2020-06-30T22:58:53Z", "message": "Merge remote-tracking branch 'upstream/master' into dataservice2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1d7e91c2c6a5256b9f6044ba6769f8dcd5e4e6", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fa1d7e91c2c6a5256b9f6044ba6769f8dcd5e4e6", "committedDate": "2020-07-01T00:08:26Z", "message": "Adding a datasource for artifact synchronizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0995807c42bef57c0880810d9d843a589efd2a0c", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0995807c42bef57c0880810d9d843a589efd2a0c", "committedDate": "2020-07-01T00:13:02Z", "message": "Add datasource configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa469568f13eb4416283cfbd9b9905aa69c8d4e", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/baa469568f13eb4416283cfbd9b9905aa69c8d4e", "committedDate": "2020-07-01T00:16:31Z", "message": "delete unwanted files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5cf907a4fdb46cb9734278c1b8619e04cc1f4b27", "committedDate": "2020-07-01T01:22:59Z", "message": "Sepearte gatewayDB opeartions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDc0ODYy", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-441074862", "createdAt": "2020-07-01T17:42:21Z", "commit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0MjoyMVrOGrvfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0OTowOVrOGrvtYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDA0NA==", "bodyText": "can we bring it to config level", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448520044", "createdAt": "2020-07-01T17:42:21Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayStartupListener.java", "diffHunk": "@@ -99,4 +98,38 @@ public void invoke() {\n         }\n     }\n \n-}\n+\n+    public void startListener() {\n+        new Thread(this).start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        deployArtifactsInGateway();\n+    }\n+\n+    private void deployArtifactsInGateway() {\n+        long retryDuration = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDcxOA==", "bodyText": "need private constructot", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448520718", "createdAt": "2020-07-01T17:43:39Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMTQ2OQ==", "bodyText": "need to make autocommit false first in connection since it s an insert", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448521469", "createdAt": "2020-07-01T17:45:04Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMjIxNQ==", "bodyText": "fix all the places as above except GET", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448522215", "createdAt": "2020-07-01T17:46:26Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIName);\n+            statement.setString(3, version);\n+            statement.setString(4, tenantDomain);\n+            statement.executeUpdate();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMjk1Nw==", "bodyText": "make the query Select 1 and check if rs.next", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448522957", "createdAt": "2020-07-01T17:47:51Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIName);\n+            statement.setString(3, version);\n+            statement.setString(4, tenantDomain);\n+            statement.executeUpdate();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(query)) {\n+            statement.setBinaryStream(1, bais, streamLength);\n+            statement.setString(2, gatewayInstruction);\n+            statement.setString(3, APIId);\n+            statement.setString(4, gatewayLabel);\n+            statement.executeUpdate();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.GET_GATEWAY_PUBLISHED_API_DETAILS)) {\n+            statement.setString(1, APIId);\n+            ResultSet rs = statement.executeQuery();\n+            return rs.next();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to check API details status of API with ID \" + APIId, e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check whether the API artifact for given label exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.CHECK_ARTIFACT_EXISTS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMzQ0MQ==", "bodyText": "APIMgtDBUtil ->GatewayArtifactsMgtDBUtil", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448523441", "createdAt": "2020-07-01T17:48:51Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/GatewayArtifactsMgtDBUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIManagerDatabaseException;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+public class GatewayArtifactsMgtDBUtil {\n+\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDBUtil.class);\n+    private static volatile DataSource artifactSynchronizerDataSource = null;\n+    private static final String DATA_SOURCE_NAME = \"DataSourceName\";\n+\n+    /**\n+     * Initializes the data source\n+     *\n+     * @throws APIManagementException if an error occurs while loading DB configuration\n+     */\n+    public static void initialize() throws APIManagerDatabaseException {\n+        if (artifactSynchronizerDataSource != null) {\n+            return;\n+        }\n+\n+        synchronized (APIMgtDBUtil.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMzYxOA==", "bodyText": "do we need this", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r448523618", "createdAt": "2020-07-01T17:49:09Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/GatewayArtifactsMgtDBUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIManagerDatabaseException;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+public class GatewayArtifactsMgtDBUtil {\n+\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDBUtil.class);\n+    private static volatile DataSource artifactSynchronizerDataSource = null;\n+    private static final String DATA_SOURCE_NAME = \"DataSourceName\";\n+\n+    /**\n+     * Initializes the data source\n+     *\n+     * @throws APIManagementException if an error occurs while loading DB configuration\n+     */\n+    public static void initialize() throws APIManagerDatabaseException {\n+        if (artifactSynchronizerDataSource != null) {\n+            return;\n+        }\n+\n+        synchronized (APIMgtDBUtil.class) {\n+            if (artifactSynchronizerDataSource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Initializing data source\");\n+                }\n+                GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n+                        ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService()\n+                                .getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+                String artifactSynchronizerDataSourceName =\n+                        gatewayArtifactSynchronizerProperties.getArtifactSynchronizerDataSource();\n+\n+                if (artifactSynchronizerDataSourceName != null) {\n+                    try {\n+                        Context ctx = new InitialContext();\n+                        artifactSynchronizerDataSource = (DataSource) ctx.lookup(artifactSynchronizerDataSourceName);\n+                    } catch (NamingException e) {\n+                        throw new APIManagerDatabaseException(\"Error while looking up the data \" +\n+                                \"source: \" + artifactSynchronizerDataSourceName, e);\n+                    }\n+                } else {\n+                    log.error(\"AS\" + artifactSynchronizerDataSourceName + \" not defined in api-manager.xml.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility method to get a new database connection for gatewayRuntime artifacts\n+     *\n+     * @return Connection\n+     * @throws java.sql.SQLException if failed to get Connection\n+     */\n+    public static Connection getArtifactSynchronizerConnection() throws SQLException {\n+        if (artifactSynchronizerDataSource != null) {\n+            return artifactSynchronizerDataSource.getConnection();\n+        }\n+        throw new SQLException(\"Data source is not configured properly.\");\n+    }\n+\n+    /**\n+     * Utility method to close the connection streams.\n+     * @param preparedStatement PreparedStatement\n+     * @param connection Connection\n+     * @param resultSet ResultSet\n+     */\n+    public static void closeAllConnections(PreparedStatement preparedStatement, Connection connection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf907a4fdb46cb9734278c1b8619e04cc1f4b27"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d501401001c713712bb50c42b40aa2afa9326545", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d501401001c713712bb50c42b40aa2afa9326545", "committedDate": "2020-07-02T04:49:36Z", "message": "optimized Db opeartions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29be66533a9ac23c7f2f9c373d2bcbc0d95c8d56", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/29be66533a9ac23c7f2f9c373d2bcbc0d95c8d56", "committedDate": "2020-07-02T04:51:21Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3540ddaf35c95330c5411a866aaeb384dad47ee3", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3540ddaf35c95330c5411a866aaeb384dad47ee3", "committedDate": "2020-07-02T05:28:12Z", "message": "Add config for gateway deployment retry duration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6604c7cf1386950cd25886fffa21addbbc595804", "committedDate": "2020-07-02T05:38:50Z", "message": "modify sql query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd22237441b3f4612408e9272a9de8c9d986429", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5bd22237441b3f4612408e9272a9de8c9d986429", "committedDate": "2020-07-03T06:53:30Z", "message": "Point the default datasource as AM_DB"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTc3MjU3", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442177257", "createdAt": "2020-07-03T06:36:40Z", "commit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozNjo0MVrOGslS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzoxNDoyOFrOGsmLbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMTU2Ng==", "bodyText": "Any reason why this is in upper case? Uppercase specifically denotes constant names.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449401566", "createdAt": "2020-07-03T06:36:41Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwNDk4NQ==", "bodyText": "As a practice its a good idea to call commit on a connection that is returned from the pool before performing a SELECT operation. This ensures that any uncommitted data will not be returned by the DB. The pattern to be used therefore should be,\ntry (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\nconnection.setAutoCommit(false); connection.commit();\nPreparedStatement statement = connection.prepareStatement(\"SELECT ...\")) {\n\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449404985", "createdAt": "2020-07-03T06:45:59Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwNjkzNg==", "bodyText": "As a practice its a good idea to call commit on a connection that is returned from the pool before performing a SELECT operation. This ensures that any uncommitted data will not be returned by the DB. The pattern to be used therefore should be,\ntry (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\nconnection.setAutoCommit(false); connection.commit();\nPreparedStatement statement = connection.prepareStatement(\"SELECT ...\")) {\n\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449406936", "createdAt": "2020-07-03T06:51:18Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwNzE4OA==", "bodyText": "As a practice its a good idea to call commit on a connection that is returned from the pool before performing a SELECT operation. This ensures that any uncommitted data will not be returned by the DB. The pattern to be used therefore should be,\ntry (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\nconnection.setAutoCommit(false); connection.commit();\nPreparedStatement statement = connection.prepareStatement(\"SELECT ...\")) {\n\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449407188", "createdAt": "2020-07-03T06:51:52Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwNzUyMA==", "bodyText": "As a practice its a good idea to call commit on a connection that is returned from the pool before performing a SELECT operation. This ensures that any uncommitted data will not be returned by the DB. The pattern to be used therefore should be,\ntry (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\nconnection.setAutoCommit(false); connection.commit();\nPreparedStatement statement = connection.prepareStatement(\"SELECT ...\")) {\n\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449407520", "createdAt": "2020-07-03T06:52:41Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwOTIyOA==", "bodyText": "This should be a \"SELECT 1 .....\" style query since you are only interested in checking if rows exist and are not doing anything with the values of the columns.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449409228", "createdAt": "2020-07-03T06:57:11Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.GET_GATEWAY_PUBLISHED_API_DETAILS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMDA2Mg==", "bodyText": "No need for while loop, doing return rs.next() is sufficient.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449410062", "createdAt": "2020-07-03T06:59:18Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.GET_GATEWAY_PUBLISHED_API_DETAILS)) {\n+            statement.setString(1, APIId);\n+            ResultSet rs = statement.executeQuery();\n+            return rs.next();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to check API details status of API with ID \" + APIId, e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check whether the API artifact for given label exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws APIManagementException {\n+\n+        boolean isExist = false;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.CHECK_ARTIFACT_EXISTS)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMDQzNw==", "bodyText": "As a practice its a good idea to call commit on a connection that is returned from the pool before performing a SELECT operation. This ensures that any uncommitted data will not be returned by the DB. The pattern to be used therefore should be,\ntry (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\nconnection.setAutoCommit(false); connection.commit();\nPreparedStatement statement = connection.prepareStatement(\"SELECT ...\")) {\n\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449410437", "createdAt": "2020-07-03T07:00:22Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO INSTANCE = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new GatewayArtifactsMgtDAO();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.GET_GATEWAY_PUBLISHED_API_DETAILS)) {\n+            statement.setString(1, APIId);\n+            ResultSet rs = statement.executeQuery();\n+            return rs.next();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to check API details status of API with ID \" + APIId, e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check whether the API artifact for given label exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws APIManagementException {\n+\n+        boolean isExist = false;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxNjA0NA==", "bodyText": "Instead of synchronizing the entire class(which leads to locking all methods of the class), it would be better to move this block into a private synchronized method. It would then look like,\npublic static void initialize() throws APIManagerDatabaseException {\n        if (artifactSynchronizerDataSource != null) {\n            return;\n        }\n\n        InitDataSource();\n}\n\nprivate static void InitDataSource() synchronized {\n    .............\n}\n\nThis would ensure that only callers of the initialize() method will have the potential of having to wait in a concurrent scenario, but callers of the getArtifactSynchronizerConnection() method will not be affected by this.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449416044", "createdAt": "2020-07-03T07:14:28Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/GatewayArtifactsMgtDBUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIManagerDatabaseException;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+public class GatewayArtifactsMgtDBUtil {\n+\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDBUtil.class);\n+    private static volatile DataSource artifactSynchronizerDataSource = null;\n+\n+    /**\n+     * Initializes the data source\n+     *\n+     * @throws APIManagementException if an error occurs while loading DB configuration\n+     */\n+    public static void initialize() throws APIManagerDatabaseException {\n+        if (artifactSynchronizerDataSource != null) {\n+            return;\n+        }\n+\n+        synchronized (GatewayArtifactsMgtDBUtil.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6604c7cf1386950cd25886fffa21addbbc595804"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjIwMTAy", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442220102", "createdAt": "2020-07-03T07:58:02Z", "commit": {"oid": "5bd22237441b3f4612408e9272a9de8c9d986429"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo1ODowMlrOGsnZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo1ODowMlrOGsnZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzNTkxNw==", "bodyText": "did we add the new table to multi_dc scripts as well?", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449435917", "createdAt": "2020-07-03T07:58:02Z", "author": {"login": "bhathiya"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql", "diffHunk": "@@ -2913,6 +2913,8 @@ CREATE TABLE AM_KEY_MANAGER (\n )\n  /\n \n+-- AM_GW_PUBLISHED_API_DETAILS & AM_GW_API_ARTIFACTS are independent tables for Artifact synchronizer feature which --\n+-- should not have any referential integrity constraints with other tables in AM database--\n CREATE TABLE IF NOT EXISTS AM_GW_PUBLISHED_API_DETAILS (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd22237441b3f4612408e9272a9de8c9d986429"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjIwNDY3", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442220467", "createdAt": "2020-07-03T07:58:34Z", "commit": {"oid": "5bd22237441b3f4612408e9272a9de8c9d986429"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo1ODozNFrOGsnaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo1ODozNFrOGsnaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzNjIzMA==", "bodyText": "password must be a char[]", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r449436230", "createdAt": "2020-07-03T07:58:34Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -44,39 +56,76 @@ public void init() throws ArtifactSynchronizerException {\n     @Override\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n-\n-        String gatewayRuntimeArtifacts;\n+        CloseableHttpResponse httpResponse = null;\n         try {\n-            ByteArrayInputStream byteStream =\n-                    apiMgtDAO.getGatewayPublishedAPIArtifacts(APIId, gatewayLabel, gatewayInstruction);\n-            byte[] bytes = ByteStreams.toByteArray(byteStream);\n-            gatewayRuntimeArtifacts = new String(bytes);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Successfully retrieved Artifact of \" + APIId);\n+            String baseURL = eventHubConfigurationDto.getServiceUrl();\n+            String endcodedgatewayLabel= URLEncoder.encode(gatewayLabel, APIConstants.DigestAuthConstants.CHARSET);\n+            String path = APIConstants.GatewayArtifactSynchronizer.SYNAPSE_ARTIFACTS + \"?apiId=\" + APIId +\n+                    \"&gatewayInstruction=\" + gatewayInstruction + \"&gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            httpResponse = invokeService(endpoint);\n+            String gatewayRuntimeArtifact = null;\n+            if (httpResponse.getEntity() != null ) {\n+                gatewayRuntimeArtifact = EntityUtils.toString(httpResponse.getEntity(),\n+                        APIConstants.DigestAuthConstants.CHARSET);\n+                httpResponse.close();\n+            } else {\n+                throw new ArtifactSynchronizerException(\"HTTP response is empty\");\n             }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact belongs to  \" + APIId + \" from DB\", e);\n+            return gatewayRuntimeArtifact;\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client\";\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifacts;\n     }\n \n     @Override\n     public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n         List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        CloseableHttpResponse httpResponse = null;\n         try {\n-            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n-            for (ByteArrayInputStream byteStream :baip){\n-                byte[] bytes = ByteStreams.toByteArray(byteStream);\n-                String  gatewayRuntimeArtifacts = new String(bytes);\n-                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            String endcodedgatewayLabel= URLEncoder.encode(label, APIConstants.DigestAuthConstants.CHARSET);\n+            String path = APIConstants.GatewayArtifactSynchronizer.GATEAY_SYNAPSE_ARTIFACTS\n+                    + \"?gatewayLabel=\"+ endcodedgatewayLabel;\n+            String endpoint = baseURL + path;\n+            httpResponse = invokeService(endpoint);\n+            String responseString;\n+            if (httpResponse.getEntity() != null ) {\n+                responseString = EntityUtils.toString(httpResponse.getEntity(),\n+                        APIConstants.DigestAuthConstants.CHARSET);\n+                httpResponse.close();\n+            } else {\n+                throw new ArtifactSynchronizerException(\"HTTP response is empty\");\n             }\n-            if (log.isDebugEnabled()){\n-                log.debug(\"Successfully retrieved Artifacts from DB\");\n+            JSONObject artifactObject = new JSONObject(responseString);\n+            JSONArray jArray = (JSONArray)artifactObject.get(\"list\");\n+            if (jArray != null) {\n+                for (int i = 0; i < jArray.length(); i++) {\n+                    gatewayRuntimeArtifactsArray.add(jArray.get(i).toString());\n+                }\n             }\n-        } catch (APIManagementException | IOException e) {\n-            throw new ArtifactSynchronizerException(\"Error retrieving Artifact from DB\", e);\n+            return gatewayRuntimeArtifactsArray;\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client\";\n+            log.error(msg, e);\n+            throw new ArtifactSynchronizerException(msg, e);\n         }\n-        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    private CloseableHttpResponse invokeService(String endpoint) throws IOException {\n+        HttpGet method = new HttpGet(endpoint);\n+        URL url = new URL(endpoint);\n+        String username = eventHubConfigurationDto.getUsername();\n+        String password = eventHubConfigurationDto.getPassword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd22237441b3f4612408e9272a9de8c9d986429"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab832307b308f4cee423710218258ee6b0ed015", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/dab832307b308f4cee423710218258ee6b0ed015", "committedDate": "2020-07-03T08:34:14Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63b7ade3ca6bc3c58a5128aa3c1a9c8bd31e264", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e63b7ade3ca6bc3c58a5128aa3c1a9c8bd31e264", "committedDate": "2020-07-03T11:06:17Z", "message": "Commit all changes before accessing DB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d56c93e6b56670cfa563cf362dadd389407373", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/95d56c93e6b56670cfa563cf362dadd389407373", "committedDate": "2020-07-05T16:32:48Z", "message": "change query name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODY2Mjk5", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442866299", "createdAt": "2020-07-06T08:19:02Z", "commit": {"oid": "95d56c93e6b56670cfa563cf362dadd389407373"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoxOTowMlrOGtNY4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoxOTowMlrOGtNY4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1ODQ2NQ==", "bodyText": "Resultset closing missed", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r450058465", "createdAt": "2020-07-06T08:19:02Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GatewayArtifactsMgtDAO {\n+    private static final Log log = LogFactory.getLog(GatewayArtifactsMgtDAO.class);\n+    private static GatewayArtifactsMgtDAO gatewayArtifactsMgtDAO = null;\n+\n+    /**\n+     * Private constructor\n+     */\n+    private GatewayArtifactsMgtDAO () {\n+    }\n+\n+    /**\n+     * Method to get the instance of the GatewayArtifactsMgtDAO.\n+     *\n+     * @return {@link GatewayArtifactsMgtDAO} instance\n+     */\n+    public static GatewayArtifactsMgtDAO getInstance() {\n+        if (gatewayArtifactsMgtDAO == null) {\n+            gatewayArtifactsMgtDAO = new GatewayArtifactsMgtDAO();\n+        }\n+        return gatewayArtifactsMgtDAO;\n+    }\n+\n+    /**\n+     * Add details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param APIName      - Name of the API\n+     * @param version      - Version of the API\n+     * @param tenantDomain - Tenant domain of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.ADD_GW_PUBLISHED_API_DETAILS)) {\n+                    statement.setString(1, APIId);\n+                    statement.setString(2, APIName);\n+                    statement.setString(3, version);\n+                    statement.setString(4, tenantDomain);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add API details for \" + APIName, e);\n+        }\n+    }\n+\n+    /**\n+     * Add or update details of the APIs published in the Gateway\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Published gateway's label\n+     * @param bais         - Byte array Input stream of the serializide gatewayAPIDTO\n+     * @param streamLength - Length of the stream\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+            int streamLength, String gatewayInstruction, String query)\n+            throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n+            connection.setAutoCommit(false);\n+                try (PreparedStatement statement = connection.prepareStatement(query)) {\n+                    statement.setBinaryStream(1, bais, streamLength);\n+                    statement.setString(2, gatewayInstruction);\n+                    statement.setString(3, APIId);\n+                    statement.setString(4, gatewayLabel);\n+                    statement.executeUpdate();\n+                }\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to add artifacts for \" + APIId, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the blob of the API\n+     *\n+     * @param APIId        - UUID of the API\n+     * @param gatewayLabel - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public String getGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel,\n+            String gatewayInstruction)\n+            throws APIManagementException {\n+\n+        String gatewayRuntimeArtifacts = null;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_ARTIFACT)) {\n+            connection.setAutoCommit(false);\n+            connection.commit();\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            statement.setString(3, gatewayInstruction);\n+            ResultSet rs = statement.executeQuery();\n+            if (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    gatewayRuntimeArtifacts = IOUtils.toString(inputStream, APIConstants.DigestAuthConstants.CHARSET);\n+                } catch (IOException  e){\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \" + APIId, e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts of API with ID \" + APIId, e);\n+        }\n+        return gatewayRuntimeArtifacts;\n+    }\n+\n+    /**\n+     * Retrieve the list of blobs of the APIs for a given label\n+     *\n+     * @param label - Gateway label of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public List<String> getAllGatewayPublishedAPIArtifacts(String label)\n+            throws APIManagementException {\n+\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_ALL_API_ARTIFACT)) {\n+            connection.setAutoCommit(false);\n+            connection.commit();\n+            statement.setString(1, label);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                try (InputStream inputStream = rs.getBinaryStream(1)) {\n+                    String gatewayRuntimeArtifacts = IOUtils.toString(inputStream,\n+                            APIConstants.DigestAuthConstants.CHARSET);\n+                    gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+                } catch (IOException  e) {\n+                    handleException(\"Error in generating gatewayRuntimeArtifacts \", e);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to get artifacts \" , e);\n+        }\n+        return gatewayRuntimeArtifactsArray;\n+    }\n+\n+    /**\n+     * Check whether the API is published in any of the Gateways\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIPublishedInAnyGateway(String APIId) throws APIManagementException {\n+\n+        int count = 0;\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.GET_PUBLISHED_GATEWAYS_FOR_API)) {\n+            connection.setAutoCommit(false);\n+            connection.commit();\n+            statement.setString(1, APIId);\n+            statement.setString(2, APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+            ResultSet rs = statement.executeQuery();\n+            while (rs.next()) {\n+                count = rs.getInt(\"COUNT\");\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed check whether API is published in any gateway \" + APIId, e);\n+        }\n+        return count != 0;\n+    }\n+\n+    /**\n+     * Check whether the API details exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIDetailsExists(String APIId) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection\n+                        .prepareStatement(SQLConstants.CHECK_API_EXISTS)) {\n+            connection.setAutoCommit(false);\n+            connection.commit();\n+            statement.setString(1, APIId);\n+            ResultSet rs = statement.executeQuery();\n+            return rs.next();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to check API details status of API with ID \" + APIId, e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check whether the API artifact for given label exists in the db\n+     *\n+     * @param APIId - UUID of the API\n+     * @throws APIManagementException if an error occurs\n+     */\n+    public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws APIManagementException {\n+\n+        try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection();\n+                PreparedStatement statement = connection.prepareStatement(SQLConstants.CHECK_ARTIFACT_EXISTS)) {\n+            connection.setAutoCommit(false);\n+            connection.commit();\n+            statement.setString(1, APIId);\n+            statement.setString(2, gatewayLabel);\n+            ResultSet rs = statement.executeQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d56c93e6b56670cfa563cf362dadd389407373"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODY2OTQ5", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442866949", "createdAt": "2020-07-06T08:19:57Z", "commit": {"oid": "95d56c93e6b56670cfa563cf362dadd389407373"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f5e812a1df57c239ccebc5b7f566ca525443b7", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a0f5e812a1df57c239ccebc5b7f566ca525443b7", "committedDate": "2020-07-06T08:29:57Z", "message": "closing resultsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23f36ec5655e7ca2a6e9df4aee5673d94d3c167", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c23f36ec5655e7ca2a6e9df4aee5673d94d3c167", "committedDate": "2020-07-06T08:33:16Z", "message": "Merge upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/686f3a550b65e231198479099a58630a224583ff", "committedDate": "2020-07-06T08:36:34Z", "message": "Add description in db scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTE3Njgz", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442917683", "createdAt": "2020-07-06T09:29:28Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTIyNDg0", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442922484", "createdAt": "2020-07-06T09:36:12Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTI5NDc4", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-442929478", "createdAt": "2020-07-06T09:45:57Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg4NTgy", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549788582", "createdAt": "2020-12-11T04:09:55Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDowOTo1NlrOIDoR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDowOTo1NlrOIDoR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjU3OQ==", "bodyText": "I think we can have this declaration in single line.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540676579", "createdAt": "2020-12-11T04:09:56Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayStartupListener.java", "diffHunk": "@@ -99,4 +102,40 @@ public void invoke() {\n         }\n     }\n \n-}\n+\n+    public void startListener() {\n+        new Thread(this).start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        deployArtifactsInGateway();\n+    }\n+\n+    private void deployArtifactsInGateway() {\n+\n+        long retryDuration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg4Njgz", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549788683", "createdAt": "2020-12-11T04:10:13Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDoxM1rOIDoSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDoxM1rOIDoSUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjY4OQ==", "bodyText": "new line in the end of file", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540676689", "createdAt": "2020-12-11T04:10:13Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayStartupListener.java", "diffHunk": "@@ -99,4 +102,40 @@ public void invoke() {\n         }\n     }\n \n-}\n+\n+    public void startListener() {\n+        new Thread(this).start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        deployArtifactsInGateway();\n+    }\n+\n+    private void deployArtifactsInGateway() {\n+\n+        long retryDuration =\n+                gatewayArtifactSynchronizerProperties.getRetryDuartion();\n+        double reconnectionProgressionFactor = 2.0;\n+        long maxReconnectDuration = 1000 * 60 * 60; // 1 hour\n+\n+        while (true) {\n+            boolean isArtifactsDeployed = deployArtifactsAtStartup();\n+            if (isArtifactsDeployed) {\n+                log.info(\"Synapse Artifacts deployed Successfully in the Gateway\");\n+                break;\n+            } else {\n+                retryDuration = (long) (retryDuration * reconnectionProgressionFactor);\n+                if (retryDuration > maxReconnectDuration) {\n+                    retryDuration = maxReconnectDuration;\n+                }\n+                log.error(\"Unable to deploy synapse artifacts at gateway. Next retry in \" + (retryDuration / 1000)\n+                        + \" seconds\");\n+                try {\n+                    Thread.sleep(retryDuration);\n+                } catch (InterruptedException ignore) {\n+                }\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg5NDcy", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549789472", "createdAt": "2020-12-11T04:12:51Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMjo1MVrOIDoVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMjo1MVrOIDoVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NzUzMw==", "bodyText": "new line in the EOF.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540677533", "createdAt": "2020-12-11T04:12:51Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBSaver.java", "diffHunk": "@@ -96,4 +101,4 @@ public String getName() {\n \n         return APIConstants.GatewayArtifactSynchronizer.DB_SAVER_NAME;\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg5NzI1", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549789725", "createdAt": "2020-12-11T04:13:46Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMzo0NlrOIDoWnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMzo0NlrOIDoWnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3Nzc4OQ==", "bodyText": "Can we get rid of these additional new lines in the middle", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540677789", "createdAt": "2020-12-11T04:13:46Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseArtifactsApi.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.SynapseArtifactsApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.SynapseArtifactsApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.inject.Inject;\n+\n+import io.swagger.annotations.*;\n+import java.io.InputStream;\n+\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+\n+import java.util.Map;\n+import java.util.List;\n+import javax.validation.constraints.*;\n+@Path(\"/synapse-artifacts\")\n+\n+@Api(description = \"the synapse-artifacts API\")\n+\n+@Produces({ \"application/json\" })\n+\n+\n+public class SynapseArtifactsApi  {\n+\n+  @Context MessageContext securityContext;\n+\n+SynapseArtifactsApiService delegate = new SynapseArtifactsApiServiceImpl();\n+\n+\n+    @GET\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg5OTI0", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549789924", "createdAt": "2020-12-11T04:14:24Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNDoyNVrOIDoXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNDoyNVrOIDoXYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3Nzk4Nw==", "bodyText": "remove additional new lines", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540677987", "createdAt": "2020-12-11T04:14:25Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/dto/SynapseArtifactDTO.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package org.wso2.carbon.apimgt.internal.service.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+\n+import javax.xml.bind.annotation.*;\n+import org.wso2.carbon.apimgt.rest.api.util.annotations.Scope;\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwMTM3", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790137", "createdAt": "2020-12-11T04:15:08Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNTowOFrOIDoYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNTowOFrOIDoYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3ODI0NQ==", "bodyText": "Import the exact Class rather than using wildcard.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540678245", "createdAt": "2020-12-11T04:15:08Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/GatewaySynapseArtifactsApi.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseArtifactListDTO;\n+import org.wso2.carbon.apimgt.internal.service.GatewaySynapseArtifactsApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.GatewaySynapseArtifactsApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwMjEw", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790210", "createdAt": "2020-12-11T04:15:22Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNToyMlrOIDoYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNToyMlrOIDoYpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3ODMxMQ==", "bodyText": "Import the exact Class rather than using wildcard.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540678311", "createdAt": "2020-12-11T04:15:22Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/GatewaySynapseArtifactsApiService.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwMjQ5", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790249", "createdAt": "2020-12-11T04:15:33Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNTozM1rOIDoYzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNTozM1rOIDoYzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3ODM0OQ==", "bodyText": "Import the exact Class rather than using wildcard.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540678349", "createdAt": "2020-12-11T04:15:33Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseArtifactsApi.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.SynapseArtifactsApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.SynapseArtifactsApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwNzA2", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790706", "createdAt": "2020-12-11T04:17:07Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzowN1rOIDoavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzowN1rOIDoavA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3ODg0NA==", "bodyText": "remove additional new line", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540678844", "createdAt": "2020-12-11T04:17:07Z", "author": {"login": "VirajSalaka"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/GatewaySynapseArtifactsApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.wso2.carbon.apimgt.internal.service.impl;\n+\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.dao.GatewayArtifactsMgtDAO;\n+import org.wso2.carbon.apimgt.internal.service.GatewaySynapseArtifactsApiService;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseArtifactListDTO;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwODM2", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790836", "createdAt": "2020-12-11T04:17:32Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzozMlrOIDobYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzozMlrOIDobYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3OTAwOQ==", "bodyText": "new line", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540679009", "createdAt": "2020-12-11T04:17:32Z", "author": {"login": "VirajSalaka"}, "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/package.json.lerna_backup", "diffHunk": "@@ -111,4 +111,4 @@\n         \"webpack-cli\": \"^3.3.2\",\n         \"worker-loader\": \"^2.0.0\"\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzkwODc1", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-549790875", "createdAt": "2020-12-11T04:17:43Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzo0M1rOIDobig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxNzo0M1rOIDobig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3OTA1MA==", "bodyText": "new line", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r540679050", "createdAt": "2020-12-11T04:17:43Z", "author": {"login": "VirajSalaka"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/package.json.lerna_backup", "diffHunk": "@@ -110,4 +110,4 @@\n         \"webpack-bundle-analyzer\": \"^3.2.0\",\n         \"webpack-cli\": \"^3.3.2\"\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTQ3NDI5", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#pullrequestreview-561547429", "createdAt": "2021-01-05T06:45:53Z", "commit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0NTo1M1rOIOL1tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0NTo1M1rOIOL1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NDk1MA==", "bodyText": "Rather than using wild card import. use the exact classes.", "url": "https://github.com/wso2/carbon-apimgt/pull/8828#discussion_r551744950", "createdAt": "2021-01-05T06:45:53Z", "author": {"login": "RAVEENSR"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseArtifactsApiService.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686f3a550b65e231198479099a58630a224583ff"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}