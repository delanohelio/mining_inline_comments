{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTg4MDUx", "number": 8547, "title": "Simplifying Complex Customizations of DTOs related to Application and Subscription Throtttling Policy admin REST APIs", "bodyText": "Purpose\nThe admin v0.16 REST APIs requires the request bodies of several Application and Subscription Throttling Policy related APIs to have the polymorphic formats which is complex. This PR simplifies several complex customizations of DTOs to remove the polymorphic request bodies of Application and Subscription Throttling Policy related APIs.\nApproach\nCurrently, the defaultLimit property of the request bodies is having the following formats.\nFor RequestCountLimit\n\n\"defaultLimit\": {\n    \"type\": \"RequestCountLimit\",\n    \"timeUnit\": \"min\",\n    \"unitTime\": 1,\n    \"requestCount\": 1\n}\n\nFor BandwidthLimit\n\n\"defaultLimit\": {\n    \"type\": \"BandwidthLimit\",\n    \"timeUnit\": \"min\",\n    \"unitTime\": 1,\n    \"dataUnit\": \"KB\",\n    \"dataAmount\": 2\n}\n\nThe defaultLimit property format has been changed to the following.\nFor RequestCountLimit\n\n\"defaultLimit\": {\n    \"requestCount\": {\n        \"type\": \"REQUESTCOUNTLIMIT\",\n        \"timeUnit\": \"min\",\n        \"unitTime\": 1,\n        \"requestCount\": 10\t\n    }\n}\n\nFor BandwidthLimit\n\n\"defaultLimit\": {\n    \"bandwidth\": {\n        \"type\": \"BANDWIDTHLIMIT\",\n        \"timeUnit\": \"min\",\n        \"unitTime\": 1,\n        \"dataUnit\": \"KB\",\n        \"dataAmount\": 2\n    }\n}\n\nRelated: wso2/product-apim#8115", "createdAt": "2020-05-21T07:04:34Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8547", "merged": true, "mergeCommit": {"oid": "cce21f9dd23e31d2e6a9f93e2c19d0cc4b6936f2"}, "closed": true, "closedAt": "2020-05-21T08:37:42Z", "author": {"login": "hisanhunais"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjXkGqgH2gAyNDIxMTg4MDUxOjJhYjUwOWJjYjQ3NzljNGNmNWEyNTEwNzVhM2IyNGFiMmRmNDQ5NDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjZgYxAFqTQxNTk3MzE5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ab509bcb4779c4cf5a251075a3b24ab2df44940", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2ab509bcb4779c4cf5a251075a3b24ab2df44940", "committedDate": "2020-05-21T06:20:41Z", "message": "Introduce ThrottleLimitType DTO for throttling policies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTQ5OTIy", "url": "https://github.com/wso2/carbon-apimgt/pull/8547#pullrequestreview-415949922", "createdAt": "2020-05-21T07:56:15Z", "commit": {"oid": "2ab509bcb4779c4cf5a251075a3b24ab2df44940"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1NjoxNVrOGYpu3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1NjoyM1rOGYpvDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMjc1MA==", "bodyText": "We shouldn't do both log and throw.. Let's remove logging here.", "url": "https://github.com/wso2/carbon-apimgt/pull/8547#discussion_r428502750", "createdAt": "2020-05-21T07:56:15Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/mappings/throttling/CommonThrottleMappingUtil.java", "diffHunk": "@@ -205,33 +205,65 @@ public static ThrottleConditionDTO fromConditionToDTO(Condition condition)   //.\n      * @return Derived Quota policy object from DTO\n      * @throws UnsupportedThrottleLimitTypeException\n      */\n-    public static QuotaPolicy fromDTOToQuotaPolicy(ThrottleLimitDTO dto) throws UnsupportedThrottleLimitTypeException {\n+    public static QuotaPolicy fromDTOToQuotaPolicy(ThrottleLimitTypeDTO dto)\n+            throws UnsupportedThrottleLimitTypeException {\n+\n+        ThrottleLimitDTO throttleLimit = getThrottleLimitType(dto);\n         QuotaPolicy quotaPolicy = new QuotaPolicy();\n-        quotaPolicy.setLimit(fromDTOToLimit(dto));\n-        quotaPolicy.setType(mapQuotaPolicyTypeFromDTOToModel(dto.getType()));\n+        quotaPolicy.setLimit(fromDTOToLimit(throttleLimit));\n+        quotaPolicy.setType(mapQuotaPolicyTypeFromDTOToModel(throttleLimit.getType()));\n         return quotaPolicy;\n     }\n \n     /**\n-     * Converts a Quota Policy object into a Throttle Limit DTO object\n+     * Obtain Throttle Limit DTO object from Throttle Limit Type object\n+     *\n+     * @param dto Throttle Policy Default limit DTO object\n+     * @return Throttle Limit DTO object\n+     * @throws UnsupportedThrottleLimitTypeException\n+     */\n+    public static ThrottleLimitDTO getThrottleLimitType(ThrottleLimitTypeDTO dto)\n+            throws UnsupportedThrottleLimitTypeException {\n+\n+        if (dto.getBandwidth() != null && dto.getRequestCount() != null) {\n+            String msg = \"Throttle limit types \" + dto.getBandwidth().getClass().getName() + \" and \" +\n+                    dto.getRequestCount().getClass().getName() + \" cannot be specified at once\";\n+            log.error(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab509bcb4779c4cf5a251075a3b24ab2df44940"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMjc5OA==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8547#discussion_r428502798", "createdAt": "2020-05-21T07:56:23Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/mappings/throttling/CommonThrottleMappingUtil.java", "diffHunk": "@@ -205,33 +205,65 @@ public static ThrottleConditionDTO fromConditionToDTO(Condition condition)   //.\n      * @return Derived Quota policy object from DTO\n      * @throws UnsupportedThrottleLimitTypeException\n      */\n-    public static QuotaPolicy fromDTOToQuotaPolicy(ThrottleLimitDTO dto) throws UnsupportedThrottleLimitTypeException {\n+    public static QuotaPolicy fromDTOToQuotaPolicy(ThrottleLimitTypeDTO dto)\n+            throws UnsupportedThrottleLimitTypeException {\n+\n+        ThrottleLimitDTO throttleLimit = getThrottleLimitType(dto);\n         QuotaPolicy quotaPolicy = new QuotaPolicy();\n-        quotaPolicy.setLimit(fromDTOToLimit(dto));\n-        quotaPolicy.setType(mapQuotaPolicyTypeFromDTOToModel(dto.getType()));\n+        quotaPolicy.setLimit(fromDTOToLimit(throttleLimit));\n+        quotaPolicy.setType(mapQuotaPolicyTypeFromDTOToModel(throttleLimit.getType()));\n         return quotaPolicy;\n     }\n \n     /**\n-     * Converts a Quota Policy object into a Throttle Limit DTO object\n+     * Obtain Throttle Limit DTO object from Throttle Limit Type object\n+     *\n+     * @param dto Throttle Policy Default limit DTO object\n+     * @return Throttle Limit DTO object\n+     * @throws UnsupportedThrottleLimitTypeException\n+     */\n+    public static ThrottleLimitDTO getThrottleLimitType(ThrottleLimitTypeDTO dto)\n+            throws UnsupportedThrottleLimitTypeException {\n+\n+        if (dto.getBandwidth() != null && dto.getRequestCount() != null) {\n+            String msg = \"Throttle limit types \" + dto.getBandwidth().getClass().getName() + \" and \" +\n+                    dto.getRequestCount().getClass().getName() + \" cannot be specified at once\";\n+            log.error(msg);\n+            throw new UnsupportedThrottleLimitTypeException(msg);\n+        } else if (dto.getBandwidth() != null) {\n+            return dto.getBandwidth();\n+        } else if (dto.getRequestCount() != null) {\n+            return dto.getRequestCount();\n+        } else {\n+            String msg = \"A Throttle limit type has not been specified\";\n+            log.error(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab509bcb4779c4cf5a251075a3b24ab2df44940"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64691a3e9c34c8a8d29932b1002bb81469cb6954", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/64691a3e9c34c8a8d29932b1002bb81469cb6954", "committedDate": "2020-05-21T08:28:49Z", "message": "Remove error logs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "188324224658095effba106673dfabfa2649c816", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/188324224658095effba106673dfabfa2649c816", "committedDate": "2020-05-21T08:21:14Z", "message": "Remove error logs"}, "afterCommit": {"oid": "64691a3e9c34c8a8d29932b1002bb81469cb6954", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/64691a3e9c34c8a8d29932b1002bb81469cb6954", "committedDate": "2020-05-21T08:28:49Z", "message": "Remove error logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTczMTk0", "url": "https://github.com/wso2/carbon-apimgt/pull/8547#pullrequestreview-415973194", "createdAt": "2020-05-21T08:36:26Z", "commit": {"oid": "64691a3e9c34c8a8d29932b1002bb81469cb6954"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2775, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}