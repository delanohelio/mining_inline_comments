{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTQ1NDMz", "number": 9408, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0MDoxNFrOE7x7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNTozNlrOE79qrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTE5NjA5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0MDoxNFrOH3m6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0MDoxNFrOH3m6tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTM0OA==", "bodyText": "We might not need this setup method as we are doing the static mocking within the test method.", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528071348", "createdAt": "2020-11-21T04:40:14Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"apiname\";\n+    private final String API_VERSION = \"1.0.0\";\n+    private final String DEFAULT_API_VERSION = \"_default_1.0.0\";\n+    private final String SUBSCRIBER = \"subscriber\";\n+    private final String RESOURCE = \"/test\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final String HTTP_VERB = \"GET\";\n+    private final String APPLICATION_NAME = \"foo_PRODUCTION\";\n+    private final String APPLICATION_ID = \"1\";\n+    private final String SCOPES = \"subscriber\";\n+    private final String ACCESS_TOKEN = \"ca19a540f544777860e44e75f605d927\";\n+    private final String TIER = \"unlimited\";\n+\n+    @Before\n+    public void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcffbcd1d9f467e4a94875d2f2c192ccb4e0eb67"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTE5ODM4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0Mzo1NVrOH3m7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0Mzo1NVrOH3m7vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTYxMg==", "bodyText": "Let's change this message to \"Scope validation fails for API \" + API_NAME", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528071612", "createdAt": "2020-11-21T04:43:55Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"apiname\";\n+    private final String API_VERSION = \"1.0.0\";\n+    private final String DEFAULT_API_VERSION = \"_default_1.0.0\";\n+    private final String SUBSCRIBER = \"subscriber\";\n+    private final String RESOURCE = \"/test\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final String HTTP_VERB = \"GET\";\n+    private final String APPLICATION_NAME = \"foo_PRODUCTION\";\n+    private final String APPLICATION_ID = \"1\";\n+    private final String SCOPES = \"subscriber\";\n+    private final String ACCESS_TOKEN = \"ca19a540f544777860e44e75f605d927\";\n+    private final String TIER = \"unlimited\";\n+\n+    @Before\n+    public void setup() throws Exception {\n+        System.setProperty(CARBON_HOME, \"\");\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        PowerMockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+    }\n+\n+    @Test\n+    public void testValidateScopes() throws APIKeyMgtException {\n+\n+        API api = new API();\n+        api.setApiId(1);\n+        api.setApiProvider(USER_NAME);\n+        api.setApiName(API_NAME);\n+        api.setApiVersion(API_VERSION);\n+        api.setContext(API_CONTEXT);\n+        URLMapping urlMapping = new URLMapping();\n+        urlMapping.addScope(SCOPES);\n+        urlMapping.setHttpMethod(HTTP_VERB);\n+        urlMapping.setUrlPattern(RESOURCE);\n+        api.addResource(urlMapping);\n+\n+        Map<String, API> apiMap = new HashMap<>();\n+        String key = API_CONTEXT + \":\" + API_VERSION;\n+        apiMap.put(key, api);\n+\n+        APIKeyValidationInfoDTO dto = new APIKeyValidationInfoDTO();\n+        dto.setSubscriber(SUBSCRIBER);\n+        dto.setApplicationName(APPLICATION_NAME);\n+        dto.setApplicationId(APPLICATION_ID);\n+        dto.setApplicationTier(TIER);\n+        Set<String> scopeSet = new HashSet<>();\n+        scopeSet.add(SCOPES);\n+        dto.setScopes(scopeSet);\n+        dto.setSubscriberTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+        dto.setUserType(APIConstants.ACCESS_TOKEN_USER_TYPE_APPLICATION);\n+\n+        // TokenValidationContext for not default API\n+        TokenValidationContext param1 = new TokenValidationContext();\n+        param1.setValidationInfoDTO(dto);\n+        param1.setContext(API_CONTEXT);\n+        param1.setVersion(API_VERSION);\n+        param1.setAccessToken(ACCESS_TOKEN);\n+        param1.setMatchingResource(RESOURCE);\n+        param1.setHttpVerb(HTTP_VERB);\n+\n+        // TokenValidationContext for default API version\n+        TokenValidationContext param2 = new TokenValidationContext();\n+        param2.setValidationInfoDTO(dto);\n+        param2.setContext(API_CONTEXT);\n+        param2.setVersion(DEFAULT_API_VERSION);\n+        param2.setAccessToken(ACCESS_TOKEN);\n+        param2.setMatchingResource(RESOURCE);\n+        param2.setHttpVerb(HTTP_VERB);\n+\n+\n+        SubscriptionDataHolder subscriptionDataHolder = Mockito.mock(SubscriptionDataHolder.class);\n+        SubscriptionDataStore tenantSubscriptionStore = Mockito.mock(SubscriptionDataStore.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+\n+        PowerMockito.mockStatic(SubscriptionDataHolder.class);\n+        Mockito.when(SubscriptionDataHolder.getInstance()).thenReturn(subscriptionDataHolder);\n+\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        Mockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        Mockito.when(privilegedCarbonContext.getTenantDomain()).thenReturn(TENANT_DOMAIN);\n+\n+        Mockito.when(subscriptionDataHolder.getTenantSubscriptionStore(eq(TENANT_DOMAIN))).thenReturn(tenantSubscriptionStore);\n+        Mockito.when(tenantSubscriptionStore.getApiByContextAndVersion(eq(API_CONTEXT), eq(API_VERSION))).thenReturn(api);\n+\n+\n+        DefaultKeyValidationHandler defaultKeyValidationHandler = new DefaultKeyValidationHandler();\n+\n+        boolean isScopeValidated = defaultKeyValidationHandler.validateScopes(param1);\n+        boolean isScopeValidated_default = defaultKeyValidationHandler.validateScopes(param2);\n+\n+        Assert.assertTrue(\"Scope validation fails for NOT default API!\", isScopeValidated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcffbcd1d9f467e4a94875d2f2c192ccb4e0eb67"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTE5ODU2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0NDoxNlrOH3m70g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0NDoxNlrOH3m70g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTYzNA==", "bodyText": "Let's change this message to \"Scope validation fails for default API \" + API_NAME", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528071634", "createdAt": "2020-11-21T04:44:16Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"apiname\";\n+    private final String API_VERSION = \"1.0.0\";\n+    private final String DEFAULT_API_VERSION = \"_default_1.0.0\";\n+    private final String SUBSCRIBER = \"subscriber\";\n+    private final String RESOURCE = \"/test\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final String HTTP_VERB = \"GET\";\n+    private final String APPLICATION_NAME = \"foo_PRODUCTION\";\n+    private final String APPLICATION_ID = \"1\";\n+    private final String SCOPES = \"subscriber\";\n+    private final String ACCESS_TOKEN = \"ca19a540f544777860e44e75f605d927\";\n+    private final String TIER = \"unlimited\";\n+\n+    @Before\n+    public void setup() throws Exception {\n+        System.setProperty(CARBON_HOME, \"\");\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        PowerMockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+    }\n+\n+    @Test\n+    public void testValidateScopes() throws APIKeyMgtException {\n+\n+        API api = new API();\n+        api.setApiId(1);\n+        api.setApiProvider(USER_NAME);\n+        api.setApiName(API_NAME);\n+        api.setApiVersion(API_VERSION);\n+        api.setContext(API_CONTEXT);\n+        URLMapping urlMapping = new URLMapping();\n+        urlMapping.addScope(SCOPES);\n+        urlMapping.setHttpMethod(HTTP_VERB);\n+        urlMapping.setUrlPattern(RESOURCE);\n+        api.addResource(urlMapping);\n+\n+        Map<String, API> apiMap = new HashMap<>();\n+        String key = API_CONTEXT + \":\" + API_VERSION;\n+        apiMap.put(key, api);\n+\n+        APIKeyValidationInfoDTO dto = new APIKeyValidationInfoDTO();\n+        dto.setSubscriber(SUBSCRIBER);\n+        dto.setApplicationName(APPLICATION_NAME);\n+        dto.setApplicationId(APPLICATION_ID);\n+        dto.setApplicationTier(TIER);\n+        Set<String> scopeSet = new HashSet<>();\n+        scopeSet.add(SCOPES);\n+        dto.setScopes(scopeSet);\n+        dto.setSubscriberTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+        dto.setUserType(APIConstants.ACCESS_TOKEN_USER_TYPE_APPLICATION);\n+\n+        // TokenValidationContext for not default API\n+        TokenValidationContext param1 = new TokenValidationContext();\n+        param1.setValidationInfoDTO(dto);\n+        param1.setContext(API_CONTEXT);\n+        param1.setVersion(API_VERSION);\n+        param1.setAccessToken(ACCESS_TOKEN);\n+        param1.setMatchingResource(RESOURCE);\n+        param1.setHttpVerb(HTTP_VERB);\n+\n+        // TokenValidationContext for default API version\n+        TokenValidationContext param2 = new TokenValidationContext();\n+        param2.setValidationInfoDTO(dto);\n+        param2.setContext(API_CONTEXT);\n+        param2.setVersion(DEFAULT_API_VERSION);\n+        param2.setAccessToken(ACCESS_TOKEN);\n+        param2.setMatchingResource(RESOURCE);\n+        param2.setHttpVerb(HTTP_VERB);\n+\n+\n+        SubscriptionDataHolder subscriptionDataHolder = Mockito.mock(SubscriptionDataHolder.class);\n+        SubscriptionDataStore tenantSubscriptionStore = Mockito.mock(SubscriptionDataStore.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+\n+        PowerMockito.mockStatic(SubscriptionDataHolder.class);\n+        Mockito.when(SubscriptionDataHolder.getInstance()).thenReturn(subscriptionDataHolder);\n+\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        Mockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        Mockito.when(privilegedCarbonContext.getTenantDomain()).thenReturn(TENANT_DOMAIN);\n+\n+        Mockito.when(subscriptionDataHolder.getTenantSubscriptionStore(eq(TENANT_DOMAIN))).thenReturn(tenantSubscriptionStore);\n+        Mockito.when(tenantSubscriptionStore.getApiByContextAndVersion(eq(API_CONTEXT), eq(API_VERSION))).thenReturn(api);\n+\n+\n+        DefaultKeyValidationHandler defaultKeyValidationHandler = new DefaultKeyValidationHandler();\n+\n+        boolean isScopeValidated = defaultKeyValidationHandler.validateScopes(param1);\n+        boolean isScopeValidated_default = defaultKeyValidationHandler.validateScopes(param2);\n+\n+        Assert.assertTrue(\"Scope validation fails for NOT default API!\", isScopeValidated);\n+        Assert.assertTrue(\"Scope validation fails for default API!\", isScopeValidated_default);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcffbcd1d9f467e4a94875d2f2c192ccb4e0eb67"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTE5OTkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0NToyOVrOH3m8Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0NToyOVrOH3m8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTc4Mw==", "bodyText": "Let's remove the blank lines in line numbers 127 and 142.", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528071783", "createdAt": "2020-11-21T04:45:29Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"apiname\";\n+    private final String API_VERSION = \"1.0.0\";\n+    private final String DEFAULT_API_VERSION = \"_default_1.0.0\";\n+    private final String SUBSCRIBER = \"subscriber\";\n+    private final String RESOURCE = \"/test\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final String HTTP_VERB = \"GET\";\n+    private final String APPLICATION_NAME = \"foo_PRODUCTION\";\n+    private final String APPLICATION_ID = \"1\";\n+    private final String SCOPES = \"subscriber\";\n+    private final String ACCESS_TOKEN = \"ca19a540f544777860e44e75f605d927\";\n+    private final String TIER = \"unlimited\";\n+\n+    @Before\n+    public void setup() throws Exception {\n+        System.setProperty(CARBON_HOME, \"\");\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        PowerMockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+    }\n+\n+    @Test\n+    public void testValidateScopes() throws APIKeyMgtException {\n+\n+        API api = new API();\n+        api.setApiId(1);\n+        api.setApiProvider(USER_NAME);\n+        api.setApiName(API_NAME);\n+        api.setApiVersion(API_VERSION);\n+        api.setContext(API_CONTEXT);\n+        URLMapping urlMapping = new URLMapping();\n+        urlMapping.addScope(SCOPES);\n+        urlMapping.setHttpMethod(HTTP_VERB);\n+        urlMapping.setUrlPattern(RESOURCE);\n+        api.addResource(urlMapping);\n+\n+        Map<String, API> apiMap = new HashMap<>();\n+        String key = API_CONTEXT + \":\" + API_VERSION;\n+        apiMap.put(key, api);\n+\n+        APIKeyValidationInfoDTO dto = new APIKeyValidationInfoDTO();\n+        dto.setSubscriber(SUBSCRIBER);\n+        dto.setApplicationName(APPLICATION_NAME);\n+        dto.setApplicationId(APPLICATION_ID);\n+        dto.setApplicationTier(TIER);\n+        Set<String> scopeSet = new HashSet<>();\n+        scopeSet.add(SCOPES);\n+        dto.setScopes(scopeSet);\n+        dto.setSubscriberTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+        dto.setUserType(APIConstants.ACCESS_TOKEN_USER_TYPE_APPLICATION);\n+\n+        // TokenValidationContext for not default API\n+        TokenValidationContext param1 = new TokenValidationContext();\n+        param1.setValidationInfoDTO(dto);\n+        param1.setContext(API_CONTEXT);\n+        param1.setVersion(API_VERSION);\n+        param1.setAccessToken(ACCESS_TOKEN);\n+        param1.setMatchingResource(RESOURCE);\n+        param1.setHttpVerb(HTTP_VERB);\n+\n+        // TokenValidationContext for default API version\n+        TokenValidationContext param2 = new TokenValidationContext();\n+        param2.setValidationInfoDTO(dto);\n+        param2.setContext(API_CONTEXT);\n+        param2.setVersion(DEFAULT_API_VERSION);\n+        param2.setAccessToken(ACCESS_TOKEN);\n+        param2.setMatchingResource(RESOURCE);\n+        param2.setHttpVerb(HTTP_VERB);\n+\n+\n+        SubscriptionDataHolder subscriptionDataHolder = Mockito.mock(SubscriptionDataHolder.class);\n+        SubscriptionDataStore tenantSubscriptionStore = Mockito.mock(SubscriptionDataStore.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+\n+        PowerMockito.mockStatic(SubscriptionDataHolder.class);\n+        Mockito.when(SubscriptionDataHolder.getInstance()).thenReturn(subscriptionDataHolder);\n+\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        Mockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        Mockito.when(privilegedCarbonContext.getTenantDomain()).thenReturn(TENANT_DOMAIN);\n+\n+        Mockito.when(subscriptionDataHolder.getTenantSubscriptionStore(eq(TENANT_DOMAIN))).thenReturn(tenantSubscriptionStore);\n+        Mockito.when(tenantSubscriptionStore.getApiByContextAndVersion(eq(API_CONTEXT), eq(API_VERSION))).thenReturn(api);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcffbcd1d9f467e4a94875d2f2c192ccb4e0eb67"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExNTY3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyMzoxOFrOH32kUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyMzoxOFrOH32kUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNzc2MQ==", "bodyText": "Let's format the file. This line length is greater than 120 characters.", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528327761", "createdAt": "2020-11-22T12:23:18Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"test_api\";\n+    private final String DEFAULT_API_NAME = \"default_api\";\n+    private final String API_VERSION = \"1.0.0\";\n+    private final String DEFAULT_API_VERSION = \"_default_1.0.0\";\n+    private final String SUBSCRIBER = \"subscriber\";\n+    private final String RESOURCE = \"/test\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final String HTTP_VERB = \"GET\";\n+    private final String APPLICATION_NAME = \"foo_PRODUCTION\";\n+    private final String APPLICATION_ID = \"1\";\n+    private final String SCOPES = \"subscriber\";\n+    private final String ACCESS_TOKEN = \"ca19a540f544777860e44e75f605d927\";\n+    private final String TIER = \"unlimited\";\n+    private PrivilegedCarbonContext privilegedCarbonContext;\n+    private SubscriptionDataHolder subscriptionDataHolder;\n+    private SubscriptionDataStore tenantSubscriptionStore;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        System.setProperty(CARBON_HOME, \"\");\n+        privilegedCarbonContext = Mockito.mock(PrivilegedCarbonContext.class);\n+        subscriptionDataHolder = Mockito.mock(SubscriptionDataHolder.class);\n+        tenantSubscriptionStore = Mockito.mock(SubscriptionDataStore.class);\n+        PowerMockito.mockStatic(PrivilegedCarbonContext.class);\n+        PowerMockito.mockStatic(SubscriptionDataHolder.class);\n+        PowerMockito.when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+    }\n+\n+    @Test\n+    public void testValidateScopes() throws APIKeyMgtException {\n+\n+        API api = new API();\n+        api.setApiId(1);\n+        api.setApiProvider(USER_NAME);\n+        api.setApiName(API_NAME);\n+        api.setApiVersion(API_VERSION);\n+        api.setContext(API_CONTEXT);\n+        URLMapping urlMapping = new URLMapping();\n+        urlMapping.addScope(SCOPES);\n+        urlMapping.setHttpMethod(HTTP_VERB);\n+        urlMapping.setUrlPattern(RESOURCE);\n+        api.addResource(urlMapping);\n+\n+        Map<String, API> apiMap = new HashMap<>();\n+        String key = API_CONTEXT + \":\" + API_VERSION;\n+        apiMap.put(key, api);\n+\n+        APIKeyValidationInfoDTO dto = new APIKeyValidationInfoDTO();\n+        dto.setSubscriber(SUBSCRIBER);\n+        dto.setApplicationName(APPLICATION_NAME);\n+        dto.setApplicationId(APPLICATION_ID);\n+        dto.setApplicationTier(TIER);\n+        Set<String> scopeSet = new HashSet<>();\n+        scopeSet.add(SCOPES);\n+        dto.setScopes(scopeSet);\n+        dto.setSubscriberTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+        dto.setUserType(APIConstants.ACCESS_TOKEN_USER_TYPE_APPLICATION);\n+\n+        // TokenValidationContext for non default API\n+        TokenValidationContext param1 = new TokenValidationContext();\n+        param1.setValidationInfoDTO(dto);\n+        param1.setContext(API_CONTEXT);\n+        param1.setVersion(API_VERSION);\n+        param1.setAccessToken(ACCESS_TOKEN);\n+        param1.setMatchingResource(RESOURCE);\n+        param1.setHttpVerb(HTTP_VERB);\n+\n+        // TokenValidationContext for default API version\n+        TokenValidationContext param2 = new TokenValidationContext();\n+        param2.setValidationInfoDTO(dto);\n+        param2.setContext(API_CONTEXT);\n+        param2.setVersion(DEFAULT_API_VERSION);\n+        param2.setAccessToken(ACCESS_TOKEN);\n+        param2.setMatchingResource(RESOURCE);\n+        param2.setHttpVerb(HTTP_VERB);\n+\n+        Mockito.when(SubscriptionDataHolder.getInstance()).thenReturn(subscriptionDataHolder);\n+        Mockito.when(privilegedCarbonContext.getTenantDomain()).thenReturn(TENANT_DOMAIN);\n+        Mockito.when(subscriptionDataHolder.getTenantSubscriptionStore(eq(TENANT_DOMAIN))).thenReturn(tenantSubscriptionStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5669ec75f903a84960a0ebdb19ad6f956168f1"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExNzkxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNTozNlrOH32lXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNTozNlrOH32lXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODAyOA==", "bodyText": "I think we don't need another API Name for the default API because this is the same API we are testing the 2 scenarios against. Let's use API_NAME instead.", "url": "https://github.com/wso2/carbon-apimgt/pull/9408#discussion_r528328028", "createdAt": "2020-11-22T12:25:36Z", "author": {"login": "tharikaGitHub"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/test/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandlerTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ *\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.keymgt.handlers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.APIKeyValidationInfoDTO;\n+import org.wso2.carbon.apimgt.keymgt.APIKeyMgtException;\n+import org.wso2.carbon.apimgt.keymgt.SubscriptionDataHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.service.TokenValidationContext;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.wso2.carbon.base.CarbonBaseConstants.CARBON_HOME;\n+\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({DefaultKeyValidationHandler.class, TokenValidationContext.class, APIKeyValidationInfoDTO.class,\n+        SubscriptionDataStore.class, SubscriptionDataHolder.class, PrivilegedCarbonContext.class})\n+\n+public class DefaultKeyValidationHandlerTest extends DefaultKeyValidationHandler {\n+\n+    private final String USER_NAME = \"admin\";\n+    private final String API_CONTEXT = \"/apicontext/1.0.0\";\n+    private final String API_NAME = \"test_api\";\n+    private final String DEFAULT_API_NAME = \"default_api\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5669ec75f903a84960a0ebdb19ad6f956168f1"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2951, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}