{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NTI0NTU0", "number": 9491, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTozNzoxNlrOFD0uPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjozODo0NlrOFExh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTUzODU0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTozNzoxNlrOIDp5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTo1Nzo0OFrOIDqTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMzA0MA==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/9491#discussion_r540703040", "createdAt": "2020-12-11T05:37:16Z", "author": {"login": "mushthaq33"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4311,6 +4336,11 @@ private APIDTO getAPIByID(String apiId) {\n             String tenantDomain = RestApiCommonUtil.getLoggedInUserTenantDomain();\n             APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n             API api = apiProvider.getAPIbyUUID(apiId, tenantDomain);\n+            APIRevision apiRevision = ApiMgtDAO.getInstance().checkAPIUUIDIsARevisionUUID(apiId);\n+            if (apiRevision != null && !StringUtils.isEmpty(apiRevision.getApiUUID()) ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61ab4b74fdde8f4457c035b4bfe2d157892bc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwOTY5MA==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9491#discussion_r540709690", "createdAt": "2020-12-11T05:57:48Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4311,6 +4336,11 @@ private APIDTO getAPIByID(String apiId) {\n             String tenantDomain = RestApiCommonUtil.getLoggedInUserTenantDomain();\n             APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n             API api = apiProvider.getAPIbyUUID(apiId, tenantDomain);\n+            APIRevision apiRevision = ApiMgtDAO.getInstance().checkAPIUUIDIsARevisionUUID(apiId);\n+            if (apiRevision != null && !StringUtils.isEmpty(apiRevision.getApiUUID()) ){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMzA0MA=="}, "originalCommit": {"oid": "3af61ab4b74fdde8f4457c035b4bfe2d157892bc"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTUwMTM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjozODo0NlrOIE9hRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoyNjo0OVrOIE_XqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3MzE1Nw==", "bodyText": "need to have space before \"in\"", "url": "https://github.com/wso2/carbon-apimgt/pull/9491#discussion_r542073157", "createdAt": "2020-12-14T02:38:46Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15700,4 +15704,29 @@ public APIRevision getRevisionByRevisionUUID(String revisionUUID) throws APIMana\n         }\n         return revisionList;\n     }\n+\n+    /**\n+     * Get a provided api uuid is in the revision db table\n+     *\n+     * @return String apiUUID\n+     * @throws APIManagementException if an error occurs while checking revision table\n+     */\n+    public APIRevision checkAPIUUIDIsARevisionUUID(String apiUUID) throws APIManagementException {\n+        APIRevision apiRevision = new APIRevision();\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement statement = connection\n+                     .prepareStatement(SQLConstants.APIRevisionSqlConstants.GET_REVISION_APIID_BY_REVISION_UUID)) {\n+            statement.setString(1, apiUUID);\n+            try (ResultSet rs = statement.executeQuery()) {\n+                while (rs.next()) {\n+                    apiRevision.setApiUUID(rs.getString(1));\n+                    apiRevision.setId(rs.getInt(2));\n+                    apiRevision.setRevisionUUID(apiUUID);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to search UUID: \" + apiUUID + \"in the revision db table\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25993bbbc6781dab65c567cab2dea5bc8aa181d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMzQ2NA==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9491#discussion_r542103464", "createdAt": "2020-12-14T04:26:49Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15700,4 +15704,29 @@ public APIRevision getRevisionByRevisionUUID(String revisionUUID) throws APIMana\n         }\n         return revisionList;\n     }\n+\n+    /**\n+     * Get a provided api uuid is in the revision db table\n+     *\n+     * @return String apiUUID\n+     * @throws APIManagementException if an error occurs while checking revision table\n+     */\n+    public APIRevision checkAPIUUIDIsARevisionUUID(String apiUUID) throws APIManagementException {\n+        APIRevision apiRevision = new APIRevision();\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement statement = connection\n+                     .prepareStatement(SQLConstants.APIRevisionSqlConstants.GET_REVISION_APIID_BY_REVISION_UUID)) {\n+            statement.setString(1, apiUUID);\n+            try (ResultSet rs = statement.executeQuery()) {\n+                while (rs.next()) {\n+                    apiRevision.setApiUUID(rs.getString(1));\n+                    apiRevision.setId(rs.getInt(2));\n+                    apiRevision.setRevisionUUID(apiUUID);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to search UUID: \" + apiUUID + \"in the revision db table\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3MzE1Nw=="}, "originalCommit": {"oid": "a25993bbbc6781dab65c567cab2dea5bc8aa181d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2924, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}