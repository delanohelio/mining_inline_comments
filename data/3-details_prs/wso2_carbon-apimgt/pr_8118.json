{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzU3Mzcw", "number": 8118, "title": "Fine-grained access control for GraphQL APIs", "bodyText": "This pull request contains the feature to add fine-grained access control for GraphQL APIs through a static query analyzer. Here, a role-specific depth limitation and a complexity limitation is enforced when invoking a given GrpahQL API. Backend REST APIs and the devportal part is completed. Please note that this PR does not include the UI for the publisher.\nGiven below are some screenshots showing how the API invoker's request is blocked if a malicious query is detected:\nScenario 1:\n[ Query Depth Exceeded ]\n\nScenario 2:\n[ Query Complexity Exceeded ]\n\nIssue : Enable GraphQL API management to perform Static/Dynamic analysis on queries", "createdAt": "2020-01-29T03:58:38Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8118", "merged": true, "mergeCommit": {"oid": "23c93a808b75c28e5bf577b0e0c83803c5db055b"}, "closed": true, "closedAt": "2020-06-11T09:45:27Z", "author": {"login": "ashera96"}, "timelineItems": {"totalCount": 101, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL73a_gH2gAyMzY4MzU3MzcwOmM0NzJlYTlhNWY5NGYxZjVmZmZkNDUzMzI3NGZiOWY0MGI0MjU5NmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL73a_gH2gAyMzY4MzU3MzcwOmM0NzJlYTlhNWY5NGYxZjVmZmZkNDUzMzI3NGZiOWY0MGI0MjU5NmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "committedDate": "2020-03-09T11:04:11Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d9b3cfebcf2fda29d1e27106d683ef665b91c44", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6d9b3cfebcf2fda29d1e27106d683ef665b91c44", "committedDate": "2019-10-30T08:49:25Z", "message": "Changed the graphql orbit version under pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8299ebfc5bedac0d949e50fc7cc0a2acf1b451cf", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8299ebfc5bedac0d949e50fc7cc0a2acf1b451cf", "committedDate": "2019-10-31T10:46:55Z", "message": "Added query depth limiting code to the GraphQLAPIHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ee1e8a5b77523d3b5fd80fa59d9b5343f00450", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/25ee1e8a5b77523d3b5fd80fa59d9b5343f00450", "committedDate": "2019-11-08T06:03:00Z", "message": "Created a new handler for GraphQL APIs to manage the security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b63f715cd458d328ac107d6144149bcf8c37f9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c8b63f715cd458d328ac107d6144149bcf8c37f9", "committedDate": "2019-11-14T08:33:38Z", "message": "Changes made to GraphQLSecurityHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d3d00674fe6a5b9062190d1bcdfdfca6fcd723", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c7d3d00674fe6a5b9062190d1bcdfdfca6fcd723", "committedDate": "2019-11-14T08:44:22Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf96d6ecadab9ebbd6c253146cfa2aa9db882ca", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2cf96d6ecadab9ebbd6c253146cfa2aa9db882ca", "committedDate": "2019-11-15T04:41:34Z", "message": "Encoded policy retrieval from the local entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9baa9a2c29db5a52cc09ed74ed39ead17511f68c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9baa9a2c29db5a52cc09ed74ed39ead17511f68c", "committedDate": "2019-11-18T05:06:51Z", "message": "Completed reading the base64 encoded policy from the GraphQLSecurityHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c701d4d8422d3546d983a13d9570761b4c845e", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/57c701d4d8422d3546d983a13d9570761b4c845e", "committedDate": "2019-11-27T06:13:34Z", "message": "Changes made to depth analysis related code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777bf00b340513f92bce5cb284eb9c1d12893632", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/777bf00b340513f92bce5cb284eb9c1d12893632", "committedDate": "2019-11-27T06:18:16Z", "message": "Started working on the UIs for the query analysis section in Publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2251e88255d52f98517c69bf3ca05e9b5c57e8e3", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2251e88255d52f98517c69bf3ca05e9b5c57e8e3", "committedDate": "2019-12-09T04:14:01Z", "message": "Created seperate components for depth and complexity analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e19a92bf75c9672cd295d6de8237f0d913ae0aa", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5e19a92bf75c9672cd295d6de8237f0d913ae0aa", "committedDate": "2019-12-10T06:48:58Z", "message": "Changed made to GraphQLSecurityHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6025a7eb34c7109c4d64c0ca7a1a2e8e63570840", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6025a7eb34c7109c4d64c0ca7a1a2e8e63570840", "committedDate": "2019-12-10T06:50:01Z", "message": "Started working on the DepthAnalysis related UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85df887d693c5329bbb7ebe5d456676c1d229927", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/85df887d693c5329bbb7ebe5d456676c1d229927", "committedDate": "2019-12-10T07:04:27Z", "message": "Fixed an error in GraphQLSecurityHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0731f3f7ff434965966418c028344ca19ff28ac", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c0731f3f7ff434965966418c028344ca19ff28ac", "committedDate": "2019-12-10T07:08:44Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545a99ed4854f96902c422ac642de9516e7c4a0f", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/545a99ed4854f96902c422ac642de9516e7c4a0f", "committedDate": "2019-12-10T08:51:22Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de6bb3b0094cb2c9c6c932fa106e9b7f7b29811", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4de6bb3b0094cb2c9c6c932fa106e9b7f7b29811", "committedDate": "2019-12-10T09:56:25Z", "message": "Changes made to GraphQLAPIHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e9a57d8b6e28f273cb1a169ec3405dc373e702", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b0e9a57d8b6e28f273cb1a169ec3405dc373e702", "committedDate": "2019-12-12T04:32:03Z", "message": "Changes made to query analysis feature in the publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a891c7b01a3ddc4859a364af9fbbbdcfb322475c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a891c7b01a3ddc4859a364af9fbbbdcfb322475c", "committedDate": "2019-12-12T04:34:26Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44431c82e6c88c2bcb877b6edc20af6436146c2f", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/44431c82e6c88c2bcb877b6edc20af6436146c2f", "committedDate": "2019-12-12T09:55:54Z", "message": "Added the pop-up to get the default depth limitation value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0644c9d0be383c3edda0dee2eda04537cc57e50", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b0644c9d0be383c3edda0dee2eda04537cc57e50", "committedDate": "2019-12-17T08:11:07Z", "message": "Validation for input field which captures the default depth limitation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ab8f6e53eb91e3b41a264a1d01110b60a6f536", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/55ab8f6e53eb91e3b41a264a1d01110b60a6f536", "committedDate": "2019-12-18T06:53:57Z", "message": "Downgraded the version of swagger-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83647bef44559f5a11044bdfba70f7ceb1aa9ae4", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/83647bef44559f5a11044bdfba70f7ceb1aa9ae4", "committedDate": "2019-12-18T06:57:10Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9676677d8b67bc434fc83fe37878f84515db2933", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9676677d8b67bc434fc83fe37878f84515db2933", "committedDate": "2019-12-19T11:08:53Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b002bc411b47ea1c22c0793bff571be4b22676f9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b002bc411b47ea1c22c0793bff571be4b22676f9", "committedDate": "2019-12-22T16:46:10Z", "message": "Started working on the client pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b52286473b1a2260b300a05692b4740acf15a5", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/85b52286473b1a2260b300a05692b4740acf15a5", "committedDate": "2019-12-22T16:47:33Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13fc20067ff8c600306657b591373f96681069ec", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/13fc20067ff8c600306657b591373f96681069ec", "committedDate": "2019-12-23T02:49:52Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5395c884ce5ee3adaa95ca7a847cccadcd7ab825", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5395c884ce5ee3adaa95ca7a847cccadcd7ab825", "committedDate": "2019-12-23T12:10:15Z", "message": "Completed adding the client pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2af27d0062b7c6460577c6586224a09fbf46886", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c2af27d0062b7c6460577c6586224a09fbf46886", "committedDate": "2019-12-23T18:06:44Z", "message": "Completed the complexity related section within GraphQLSecurityHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a694784395bd9371fde42c488f5f2a306e834b", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c1a694784395bd9371fde42c488f5f2a306e834b", "committedDate": "2019-12-24T13:54:16Z", "message": "Validation of default depth limitation input field added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ec6b49bf3e7b6bd4c23b75df184f3c3f4f9147", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/86ec6b49bf3e7b6bd4c23b75df184f3c3f4f9147", "committedDate": "2020-01-09T12:48:53Z", "message": "Added the database tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adb35b70a9d1900b1b20d1a785a6141555a0fdba", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/adb35b70a9d1900b1b20d1a785a6141555a0fdba", "committedDate": "2020-01-09T13:03:53Z", "message": "Started working on the swagger definitions in the publisher-api.yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d619549fe64e5a52e6330595bfd3a2bd7ec937d0", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d619549fe64e5a52e6330595bfd3a2bd7ec937d0", "committedDate": "2020-01-09T13:04:27Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2668c3be5116b3e8c14fb993ab00bd9906a4d933", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2668c3be5116b3e8c14fb993ab00bd9906a4d933", "committedDate": "2020-01-14T11:23:49Z", "message": "Created the swagger definitions for basic get and post for depth and complexity sections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a11e95d5d2a984374d943791156c5b4e4b53234", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7a11e95d5d2a984374d943791156c5b4e4b53234", "committedDate": "2020-01-15T05:40:06Z", "message": "Changed the definition of GraphQLQueryComplexityInfo and added a GraphQLCustomComplexityInfo defintion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a9cbbf08c08de85bc32be5b71dad3de3f6941d", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/67a9cbbf08c08de85bc32be5b71dad3de3f6941d", "committedDate": "2020-01-16T07:07:28Z", "message": "Added comments to describe the methods which were generated through publisher-api.yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3eff60841bfe3a7f9f1e41b9f019c581237f815", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b3eff60841bfe3a7f9f1e41b9f019c581237f815", "committedDate": "2020-01-16T07:57:06Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf2f8733aa186bad789577378a47bc5c410e68f", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0bf2f8733aa186bad789577378a47bc5c410e68f", "committedDate": "2020-01-17T19:35:47Z", "message": "Changed the type of apiId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd8175792ca69c002e002d5705289c1aaf3ce18", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1cd8175792ca69c002e002d5705289c1aaf3ce18", "committedDate": "2020-01-17T19:38:02Z", "message": "Created models for complexity and depth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05cad0a438118916cad581e5ce02cc949127e1d9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/05cad0a438118916cad581e5ce02cc949127e1d9", "committedDate": "2020-01-17T19:40:27Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971f7db60407008664679dd38d1f98791785f795", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/971f7db60407008664679dd38d1f98791785f795", "committedDate": "2020-01-18T18:28:27Z", "message": "Added a GraphqlQueryAnalysisMappingUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922eec3e8b9c38ce1e91b6e6a092bc08115c7875", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/922eec3e8b9c38ce1e91b6e6a092bc08115c7875", "committedDate": "2020-01-18T18:29:59Z", "message": "Changes in ApiMgtDAO.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbd62ae6e8d4a5e1ce8dee89bf8ce9e1ca67179c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fbd62ae6e8d4a5e1ce8dee89bf8ce9e1ca67179c", "committedDate": "2020-01-18T18:35:26Z", "message": "Changes in GraphqlQueryAnalysisMappingUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1beb2ac4b68239d2a2a0de05eb418ffb1bd01f66", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1beb2ac4b68239d2a2a0de05eb418ffb1bd01f66", "committedDate": "2020-01-18T18:38:25Z", "message": "Added queries into SQLConstants.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd386f3d63877f2741cc91ee40b839377da99f97", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/dd386f3d63877f2741cc91ee40b839377da99f97", "committedDate": "2020-01-18T19:17:46Z", "message": "Completed get and post of graphql complexity related APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c71b4637ab83400fc5c2d625dacafb4cac0d539", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5c71b4637ab83400fc5c2d625dacafb4cac0d539", "committedDate": "2020-01-19T09:49:05Z", "message": "Removed the apiId from the definitions of GraphQLDepthInfo and GraphQLComplexityInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08fb3598d68e037acc0dd019ec30a0397fa9c74", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c08fb3598d68e037acc0dd019ec30a0397fa9c74", "committedDate": "2020-01-19T10:32:27Z", "message": "Removed the api id from depth and complexity DTOs and the apidocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f1bcc53386fe34b4a0286cf41f0ef338a2c429", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/13f1bcc53386fe34b4a0286cf41f0ef338a2c429", "committedDate": "2020-01-19T10:33:30Z", "message": "Altered the methods in GraphqlQueryAnalysisMappingUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae8fcca52c6a926c45e9145e780de6657737d26", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6ae8fcca52c6a926c45e9145e780de6657737d26", "committedDate": "2020-01-19T10:39:21Z", "message": "Removed the apiId form the complexity and depth related models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126cf4b4440582d26a3db5952822cf783fd82d24", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/126cf4b4440582d26a3db5952822cf783fd82d24", "committedDate": "2020-01-19T10:41:13Z", "message": "Changes made to ApiMgtDAO.java and to some related queries under SQLConstants.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac25c79fcb8d4c3450951e6d0d062d7d32bb2cee", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/ac25c79fcb8d4c3450951e6d0d062d7d32bb2cee", "committedDate": "2020-01-20T16:12:56Z", "message": "Added OAuth2Security to swagger definitions and fixed typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea8c619531b99bbb12f99cb4d872353fecebc82", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9ea8c619531b99bbb12f99cb4d872353fecebc82", "committedDate": "2020-01-20T16:33:06Z", "message": "Changed the GraphqlDepthInfo model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56cac61cdac986cc17d3ff729bc688e779e2adac", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/56cac61cdac986cc17d3ff729bc688e779e2adac", "committedDate": "2020-01-20T16:41:40Z", "message": "Added the check for graphql APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34bbfbb563c46c459d3856ae2c5d2907105621f9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/34bbfbb563c46c459d3856ae2c5d2907105621f9", "committedDate": "2020-01-21T14:22:26Z", "message": "Started working on the depth section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4728b731f9b9b6d5995bd117d47004bd27655d9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e4728b731f9b9b6d5995bd117d47004bd27655d9", "committedDate": "2020-01-21T15:32:42Z", "message": "Changes in role-depth mapping section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde39cc58b2f422b07c9a12a7cf3cc79596ce579", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/cde39cc58b2f422b07c9a12a7cf3cc79596ce579", "committedDate": "2020-01-22T05:56:25Z", "message": "Fixed typos within SQLCostants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a093aeda5b37d647b5e8f32d26c48a8bd277eb3c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a093aeda5b37d647b5e8f32d26c48a8bd277eb3c", "committedDate": "2020-01-22T11:37:59Z", "message": "Added basic query analysis details to execute at API creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e15f6ceeb10c61f5951161f45bee508a8cabbe", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/45e15f6ceeb10c61f5951161f45bee508a8cabbe", "committedDate": "2020-01-23T05:37:13Z", "message": "Added functionality to retrieve a GraphqlPolicyDefinition object at the time of local entry creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62787fca5c0ce4332f064bd08eb54c8992ce9bd7", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/62787fca5c0ce4332f064bd08eb54c8992ce9bd7", "committedDate": "2020-01-24T04:52:44Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebed5b2261d4c4813697e220b9f4cd809a77fac", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/cebed5b2261d4c4813697e220b9f4cd809a77fac", "committedDate": "2020-01-24T10:15:52Z", "message": "Started working on the json object creation at the time of API publishing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9093dfb89bfcaa818f01652c01514dceb1439052", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9093dfb89bfcaa818f01652c01514dceb1439052", "committedDate": "2020-01-25T08:47:38Z", "message": "Changes in GraphQLSchemaDefinition.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd63e31ef2d98b8afad2818d90a455f761e5bbb1", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/dd63e31ef2d98b8afad2818d90a455f761e5bbb1", "committedDate": "2020-01-25T11:17:44Z", "message": "changes in CustomComplexityCalculator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16746bf84d16faa0d18e503d5b0d0760f550ac46", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/16746bf84d16faa0d18e503d5b0d0760f550ac46", "committedDate": "2020-01-25T15:44:21Z", "message": "Added definitions for role-depth mapping get, put and delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aaa2e37373dcc9da92f7d17c4ab6330516a86dd", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5aaa2e37373dcc9da92f7d17c4ab6330516a86dd", "committedDate": "2020-01-25T15:46:44Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "541e929d2bce7e5826a1214570da4aa1ac164e14", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/541e929d2bce7e5826a1214570da4aa1ac164e14", "committedDate": "2020-01-26T05:59:41Z", "message": "Completed individual role-depth mapping get, update and delete resource APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caad50e77cc4972cb931f44afbafc5e0e0a9fba3", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/caad50e77cc4972cb931f44afbafc5e0e0a9fba3", "committedDate": "2020-01-26T16:50:21Z", "message": "Completed depth and complexity enable/disable rest apis along with the implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a843e08df7787760c1ad3703611679ac3e8693", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/00a843e08df7787760c1ad3703611679ac3e8693", "committedDate": "2020-01-27T04:12:29Z", "message": "Changes in backend REST APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4447a376c42fee44e49de2a244512a8ae9ef6ef", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e4447a376c42fee44e49de2a244512a8ae9ef6ef", "committedDate": "2020-01-27T05:34:42Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f8552d29aadadb04d1334f0c6087e0166600aa", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/13f8552d29aadadb04d1334f0c6087e0166600aa", "committedDate": "2020-01-27T18:12:51Z", "message": "Changes made to fix test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6732d0563330f22a2004e0336ef9f902a79f768f", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6732d0563330f22a2004e0336ef9f902a79f768f", "committedDate": "2020-01-28T11:54:55Z", "message": "Issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c112550783a772b4139b82082ff812a4cc3d99f5", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c112550783a772b4139b82082ff812a4cc3d99f5", "committedDate": "2020-01-28T21:11:19Z", "message": "Interim changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3302f3919f8ecf269b4aac7a17020768aff1cbe", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a3302f3919f8ecf269b4aac7a17020768aff1cbe", "committedDate": "2020-01-28T22:14:25Z", "message": "Removed Publisher UI code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be63f1579612da56a6384b2d56e76ba43842c2ae", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/be63f1579612da56a6384b2d56e76ba43842c2ae", "committedDate": "2020-01-28T23:09:41Z", "message": "DAO file changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5367424d6391a44980d303ba62e6d8bc87973a92", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5367424d6391a44980d303ba62e6d8bc87973a92", "committedDate": "2020-01-29T01:34:10Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fbabdddccd7cd17e2c2682061cfdbc3d3279bb7", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9fbabdddccd7cd17e2c2682061cfdbc3d3279bb7", "committedDate": "2020-01-29T03:50:52Z", "message": "Changed the package-lock.json differences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec62d01dcbaa4f818f7af2367301d7af243a6fc4", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/ec62d01dcbaa4f818f7af2367301d7af243a6fc4", "committedDate": "2020-02-04T07:28:00Z", "message": "Added primitive types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1c15712a59f4e287be19489738276ce0b9275e", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8c1c15712a59f4e287be19489738276ce0b9275e", "committedDate": "2020-02-04T14:11:46Z", "message": "Changes in FieldComplexityCalculatorImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070a0ab71952289edd0060dfb80b00470fafb47c", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/070a0ab71952289edd0060dfb80b00470fafb47c", "committedDate": "2020-02-04T14:13:35Z", "message": "Exception code added for APIs which are not GraphQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66dbc67fa0aa0a560d0acc55647975d18e438621", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/66dbc67fa0aa0a560d0acc55647975d18e438621", "committedDate": "2020-02-04T15:08:55Z", "message": "Issue fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b09879684bb97e799a0bb80fc37e6ea3472ab2", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/50b09879684bb97e799a0bb80fc37e6ea3472ab2", "committedDate": "2020-02-04T15:20:35Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0c66a3729ec9dfb8c66923ee8b3f572d84eafa6", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e0c66a3729ec9dfb8c66923ee8b3f572d84eafa6", "committedDate": "2020-02-04T17:48:54Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1203ada7e23a19a5de9376afe9513bcf4faa9bc9", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1203ada7e23a19a5de9376afe9513bcf4faa9bc9", "committedDate": "2020-02-05T08:00:25Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5654a7a928ca0bfa6a11cfa5f3e5442a91e4a2bc", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5654a7a928ca0bfa6a11cfa5f3e5442a91e4a2bc", "committedDate": "2020-02-05T08:43:06Z", "message": "Changes in ApisApiServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ca8c27681d9ef559c963f407abb71ebd99f8db", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a4ca8c27681d9ef559c963f407abb71ebd99f8db", "committedDate": "2020-02-05T08:48:40Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc4b7e70c0fb103307ee134b463e49d827765a6", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4bc4b7e70c0fb103307ee134b463e49d827765a6", "committedDate": "2020-02-05T09:04:39Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "512c820396f6c2fedf13798e38d669dde4232d95", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/512c820396f6c2fedf13798e38d669dde4232d95", "committedDate": "2020-02-05T12:34:18Z", "message": "Changes in the Handler code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b85ee1dcb4570fc572f247eab1ac58c980899b", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/61b85ee1dcb4570fc572f247eab1ac58c980899b", "committedDate": "2020-02-05T16:08:57Z", "message": "Code refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50bc1eff35476fbc5e95edb2eee9443aa9a46c60", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/50bc1eff35476fbc5e95edb2eee9443aa9a46c60", "committedDate": "2020-02-05T16:09:52Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6350401de242648f2dc44957416f85dd430ed222", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6350401de242648f2dc44957416f85dd430ed222", "committedDate": "2020-02-06T10:04:04Z", "message": "Changes in backend REST API definitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e017fb54a1ccd23d2837be5f3e3e8f4628060336", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e017fb54a1ccd23d2837be5f3e3e8f4628060336", "committedDate": "2020-02-06T13:35:32Z", "message": "Added backend REST API to retrieve the list of types and fields from the schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295a9079ed84ce09dd49f211d4f9f4682cfc6e04", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/295a9079ed84ce09dd49f211d4f9f4682cfc6e04", "committedDate": "2020-02-06T15:17:01Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0097bf206e03ca258f781d534b37acef0897f8c5", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0097bf206e03ca258f781d534b37acef0897f8c5", "committedDate": "2020-02-06T15:21:25Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9632aa571de7e357f93cd8291d230817ae9566a8", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9632aa571de7e357f93cd8291d230817ae9566a8", "committedDate": "2020-02-07T09:50:21Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53", "author": {"user": {"login": "ashera96", "name": "Ashera Silva"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9fda90e955847d20552638e1df45e7dd9cec7f53", "committedDate": "2020-02-09T04:59:34Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTc5NzY1", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356579765", "createdAt": "2020-02-11T11:21:59Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyMTo1OVrOFoFYZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyMTo1OVrOFoFYZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NTUyNg==", "bodyText": "Java doc should say what the return value means.", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377575526", "createdAt": "2020-02-11T11:21:59Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTgxOTYx", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356581961", "createdAt": "2020-02-11T11:25:58Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNTo1OFrOFoFfOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNTo1OFrOFoFfOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzI3Mw==", "bodyText": "method names should be verbs. how about analyseQueryDepth?", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577273", "createdAt": "2020-02-11T11:25:58Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTgyMjM5", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356582239", "createdAt": "2020-02-11T11:26:27Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNjoyN1rOFoFgGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNjoyN1rOFoFgGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzQ5OQ==", "bodyText": "same here.", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577499", "createdAt": "2020-02-11T11:26:27Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryComplexityAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTgyMzIy", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356582322", "createdAt": "2020-02-11T11:26:35Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNjozNVrOFoFgWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyNjozNVrOFoFgWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzU2Mw==", "bodyText": "same here.", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577563", "createdAt": "2020-02-11T11:26:35Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTgzMzcy", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356583372", "createdAt": "2020-02-11T11:28:21Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyODoyMVrOFoFjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToyODoyMVrOFoFjrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3ODQxMw==", "bodyText": "please create constants for strings like these.", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377578413", "createdAt": "2020-02-11T11:28:21Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryComplexityAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        FieldComplexityCalculator fieldComplexityCalculator = new FieldComplexityCalculatorImpl(messageContext);\n+        int maxQueryComplexity = getMaxQueryComplexity(policyDefinition);\n+\n+        if (maxQueryComplexity > 0) {\n+            MaxQueryComplexityInstrumentation maxQueryComplexityInstrumentation =\n+                    new MaxQueryComplexityInstrumentation(maxQueryComplexity, fieldComplexityCalculator);\n+            GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryComplexityInstrumentation).build();\n+\n+            try {\n+                ExecutionResult executionResult = runtime.execute(payload);\n+                List<GraphQLError> errors = executionResult.getErrors();\n+                if (errors.size() > 0) {\n+                    List<String> errorList = new ArrayList<>();\n+                    for (GraphQLError error : errors) {\n+                        errorList.add(error.getMessage());\n+                    }\n+\n+                    // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                    ListIterator<String> iterator = errorList.listIterator();\n+                    while (iterator.hasNext()) {\n+                        if (iterator.next().contains(\"non-nullable\")) {\n+                            iterator.remove();\n+                        }\n+                    }\n+\n+                    if (errorList.size() == 0) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Maximum query complexity was not exceeded\");\n+                        }\n+                        return true;\n+                    } else {\n+                        log.error(errorList);\n+                        errorList.clear();\n+                        errorList.add(\"maximum query complexity exceeded\");\n+                    }\n+\n+                    handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX, messageContext,\n+                            APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX_MESSAGE, errorList.toString());\n+                    return false;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Maximum query complexity was not exceeded\");\n+                }\n+                return true;\n+            } catch (Exception e) {\n+                log.error(e.getMessage(), e);\n+            }\n+        } else {\n+            return true; // No complexity limitation check\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query complexity value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int getMaxQueryComplexity(JSONObject policyDefinition) {\n+        Object complexityObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_COMPLEXITY);\n+        boolean complexityCheckEnabled = Boolean.parseBoolean(((JSONObject) complexityObject).get(\"enabled\").toString());\n+        if (complexityCheckEnabled) {\n+            Object maxQueryComplexity = ((JSONObject) complexityObject).get(\"max_query_complexity\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 290}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTg2MTcw", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356586170", "createdAt": "2020-02-11T11:33:24Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozMzoyNFrOFoFsow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozMzoyNFrOFoFsow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDcwNw==", "bodyText": "are we handling connection rollback inside this?", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377580707", "createdAt": "2020-02-11T11:33:24Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14234,6 +14254,368 @@ public String getAuditApiId(APIIdentifier apiIdentifier) throws APIManagementExc\n         return auditUuid;\n     }\n \n+    /**\n+     * Add complexity and depth as disabled at API creation\n+     *\n+     * @param apiIdentifier APIIdentifier object to retrieve API ID\n+     * @throws APIManagementException\n+     */\n+    public void addQueryAnalysisInfo(APIIdentifier apiIdentifier) throws APIManagementException {\n+        String query = SQLConstants.ADD_INITIAL_QUERY_ANALYSIS_SQL;\n+        try (Connection conn = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps = conn.prepareStatement(query)) {\n+            conn.setAutoCommit(false);\n+            int apiId = getAPIID(apiIdentifier, conn);\n+            ps.setInt(1, apiId);\n+            ps.setBoolean(2, false);\n+            ps.setBoolean(3, false);\n+            ps.setInt(4, 0);\n+            ps.executeUpdate();\n+            conn.commit();\n+        } catch (SQLException ex) {\n+            handleException(\"Error while adding query analysis info: \", ex);\n+        }\n+    }\n+\n+    /**\n+     * Update complexity details\n+     *\n+     * @param apiIdentifier         APIIdentifier object to retrieve API ID\n+     * @param graphqlComplexityInfo GraphqlComplexityDetails object\n+     * @throws APIManagementException\n+     */\n+    public void updateComplexityDetails(APIIdentifier apiIdentifier, GraphqlComplexityInfo graphqlComplexityInfo)\n+            throws APIManagementException {\n+        String checkEntry = SQLConstants.GET_COMPLEXITY_DETAILS_SQL;\n+        String addCustomComplexityDetails = SQLConstants.ADD_CUSTOM_COMPLEXITY_DETAILS_SQL;\n+        String updateCustomComplexityDetails = SQLConstants.UPDATE_CUSTOM_COMPLEXITY_DETAILS_SQL;\n+        try (Connection conn = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps1 = conn.prepareStatement(checkEntry)) {\n+            conn.setAutoCommit(false);\n+            int apiId = getAPIID(apiIdentifier, conn);\n+            ps1.setInt(1, apiId);\n+            try (ResultSet rs = ps1.executeQuery()) {\n+                if (rs.next()) {\n+                    if (rs.getInt(\"MAX_COMPLEXITY\") == 0) {\n+                        // Update query analysis table entries and add query complexity table entries\n+                        updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n+                        try (PreparedStatement ps2 = conn.prepareStatement(addCustomComplexityDetails)) {\n+                            for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n+                                UUID uuid = UUID.randomUUID();\n+                                String randomUUIDString = uuid.toString();\n+                                ps2.setString(1, randomUUIDString);\n+                                ps2.setInt(2, apiId);\n+                                ps2.setString(3, customComplexity.getType());\n+                                ps2.setString(4, customComplexity.getField());\n+                                ps2.setInt(5, customComplexity.getComplexityValue());\n+                                ps2.executeUpdate();\n+                            }\n+                        } catch (SQLException e) {\n+                            handleException(\"Error while adding custom complexity details: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTkwNTc4", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#pullrequestreview-356590578", "createdAt": "2020-02-11T11:41:37Z", "commit": {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3028, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}