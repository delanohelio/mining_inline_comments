{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODQxNTEy", "number": 8708, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoyMjo1M1rOEEjkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyOTo1OFrOEGLj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjEyNTcwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoyMjo1M1rOGiP_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMTowMzo0OVrOIiQe5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2Njc2MQ==", "bodyText": "Is 'Saved' required?", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r438566761", "createdAt": "2020-06-11T06:22:53Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -432,6 +436,38 @@ public void deleteBotDataEmailList(String uuid) throws APIManagementException, S\n         apiMgtDAO.deleteBotDataEmailList(uuid);\n     }\n \n+    /**\n+     * Retrieve all bot detected data\n+     *\n+     * @return list of bot detected data\n+     * @throws APIManagementException\n+     */\n+    public List<BotDetectionData> retrieveSavedBotData() throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10781849ee24870749260d48395d02731f1c628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5MjU1MQ==", "bodyText": "Fixed with a053882", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r572792551", "createdAt": "2021-02-09T11:03:49Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -432,6 +436,38 @@ public void deleteBotDataEmailList(String uuid) throws APIManagementException, S\n         apiMgtDAO.deleteBotDataEmailList(uuid);\n     }\n \n+    /**\n+     * Retrieve all bot detected data\n+     *\n+     * @return list of bot detected data\n+     * @throws APIManagementException\n+     */\n+    public List<BotDetectionData> retrieveSavedBotData() throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2Njc2MQ=="}, "originalCommit": {"oid": "f10781849ee24870749260d48395d02731f1c628"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjI0OTAzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoxMjowNVrOGiRM1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMTowNjo1MlrOIiQmwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NjU4Mg==", "bodyText": "\"Bot detection data is not accessible\"", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r438586582", "createdAt": "2020-06-11T07:12:05Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -325,7 +325,11 @@\n             \"Key Manager is not enabled in the system\"),\n     KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required application properties are missing\", 400,\n             \"Required application properties are missing\"),\n-    KEY_MAPPING_ALREADY_EXIST(901408, \"Application already Registered\", 409, \"Application already Registered\");\n+    KEY_MAPPING_ALREADY_EXIST(901408, \"Application already Registered\", 409, \"Application already Registered\"),\n+\n+    //Analytics related codes\n+    ANALYTICS_NOT_ENABLED(901500, \"Analytics Not Enabled\", 404,\n+            \"Analytics should be enabled to view Bot Detected Data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10781849ee24870749260d48395d02731f1c628"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5NDU2MQ==", "bodyText": "Fixed with a053882", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r572794561", "createdAt": "2021-02-09T11:06:52Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -325,7 +325,11 @@\n             \"Key Manager is not enabled in the system\"),\n     KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required application properties are missing\", 400,\n             \"Required application properties are missing\"),\n-    KEY_MAPPING_ALREADY_EXIST(901408, \"Application already Registered\", 409, \"Application already Registered\");\n+    KEY_MAPPING_ALREADY_EXIST(901408, \"Application already Registered\", 409, \"Application already Registered\"),\n+\n+    //Analytics related codes\n+    ANALYTICS_NOT_ENABLED(901500, \"Analytics Not Enabled\", 404,\n+            \"Analytics should be enabled to view Bot Detected Data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NjU4Mg=="}, "originalCommit": {"oid": "f10781849ee24870749260d48395d02731f1c628"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE2MzQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyOTo1OFrOGk0X2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMTowMTowNlrOIiQYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTk5Mg==", "bodyText": "Shall we use APIUtil.getSecuredDocumentBuilder() because, to avoid XXE attacks. (If the bot payload contains any entity tags, the secured doc builder avoids processing them.", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r441259992", "createdAt": "2020-06-17T03:29:58Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -431,6 +451,75 @@ public void deleteBotDataEmailList(String uuid) throws APIManagementException, S\n         apiMgtDAO.deleteBotDataEmailList(uuid);\n     }\n \n+    /**\n+     * Retrieve all bot detected data\n+     *\n+     * @return list of bot detected data\n+     * @throws APIManagementException\n+     */\n+    public List<BotDetectionData> retrieveBotDetectionData() throws APIManagementException {\n+\n+        List<BotDetectionData> botDetectionDatalist = new ArrayList<>();\n+        String appName = AlertMgtConstants.APIM_ALERT_BOT_DETECTION_APP;\n+        String query = SQLConstants.BotDataConstants.GET_BOT_DETECTED_DATA;\n+\n+        JSONObject botDataJsonObject = APIUtil.executeQueryOnStreamProcessor(appName, query);\n+        if (botDataJsonObject != null) {\n+            JSONArray botDataJsonArray = (JSONArray) botDataJsonObject.get(\"records\");\n+            if (botDataJsonArray != null && botDataJsonArray.size() != 0) {\n+                for (Object botData : botDataJsonArray) {\n+                    JSONArray values = (JSONArray) botData;\n+                    BotDetectionData botDetectionData = new BotDetectionData();\n+                    botDetectionData.setCurrentTime((Long) values.get(0));\n+                    botDetectionData.setMessageID((String) values.get(1));\n+                    botDetectionData.setApiMethod((String) values.get(2));\n+                    botDetectionData.setHeaderSet((String) values.get(3));\n+                    botDetectionData.setMessageBody(extractBotDetectionDataContent((String) values.get(4)));\n+                    botDetectionData.setClientIp((String) values.get(5));\n+                    botDetectionDatalist.add(botDetectionData);\n+                }\n+            }\n+        }\n+        return botDetectionDatalist;\n+    }\n+\n+    /**\n+     * Extract content of the bot detection data\n+     *\n+     * @param messageBody message body of bot detection data\n+     * @return extracted content\n+     */\n+    public String extractBotDetectionDataContent(String messageBody) {\n+\n+        String content = \"\";\n+        try {\n+            //Parser that produces DOM object trees from XML content\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985c042c4d3ba6a36bbc9a5d9038ac1e7d411c6e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5MDg5NQ==", "bodyText": "Fixed with ffc1f63", "url": "https://github.com/wso2/carbon-apimgt/pull/8708#discussion_r572790895", "createdAt": "2021-02-09T11:01:06Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -431,6 +451,75 @@ public void deleteBotDataEmailList(String uuid) throws APIManagementException, S\n         apiMgtDAO.deleteBotDataEmailList(uuid);\n     }\n \n+    /**\n+     * Retrieve all bot detected data\n+     *\n+     * @return list of bot detected data\n+     * @throws APIManagementException\n+     */\n+    public List<BotDetectionData> retrieveBotDetectionData() throws APIManagementException {\n+\n+        List<BotDetectionData> botDetectionDatalist = new ArrayList<>();\n+        String appName = AlertMgtConstants.APIM_ALERT_BOT_DETECTION_APP;\n+        String query = SQLConstants.BotDataConstants.GET_BOT_DETECTED_DATA;\n+\n+        JSONObject botDataJsonObject = APIUtil.executeQueryOnStreamProcessor(appName, query);\n+        if (botDataJsonObject != null) {\n+            JSONArray botDataJsonArray = (JSONArray) botDataJsonObject.get(\"records\");\n+            if (botDataJsonArray != null && botDataJsonArray.size() != 0) {\n+                for (Object botData : botDataJsonArray) {\n+                    JSONArray values = (JSONArray) botData;\n+                    BotDetectionData botDetectionData = new BotDetectionData();\n+                    botDetectionData.setCurrentTime((Long) values.get(0));\n+                    botDetectionData.setMessageID((String) values.get(1));\n+                    botDetectionData.setApiMethod((String) values.get(2));\n+                    botDetectionData.setHeaderSet((String) values.get(3));\n+                    botDetectionData.setMessageBody(extractBotDetectionDataContent((String) values.get(4)));\n+                    botDetectionData.setClientIp((String) values.get(5));\n+                    botDetectionDatalist.add(botDetectionData);\n+                }\n+            }\n+        }\n+        return botDetectionDatalist;\n+    }\n+\n+    /**\n+     * Extract content of the bot detection data\n+     *\n+     * @param messageBody message body of bot detection data\n+     * @return extracted content\n+     */\n+    public String extractBotDetectionDataContent(String messageBody) {\n+\n+        String content = \"\";\n+        try {\n+            //Parser that produces DOM object trees from XML content\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTk5Mg=="}, "originalCommit": {"oid": "985c042c4d3ba6a36bbc9a5d9038ac1e7d411c6e"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3245, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}