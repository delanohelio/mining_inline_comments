{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTM4NjIx", "number": 8784, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowMzozOFrOEI01Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDowNTowNVrOFIA_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njg5Njc4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowMzozOFrOGpBfmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxOTo0NVrOGpKYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTI3Mg==", "bodyText": "We should not access DAO layer outside impl. Even in gateway profile, we might not have access to db.", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445669272", "createdAt": "2020-06-25T16:03:38Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDgxMw==", "bodyText": "79c1b54", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445814813", "createdAt": "2020-06-25T20:19:45Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTI3Mg=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njg5ODQ1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowNDowNlrOGpBgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxOTozMVrOGpKXsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTU1Ng==", "bodyText": "use the artifact retriever to get the gateway API Id", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445669556", "createdAt": "2020-06-25T16:04:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDcwNA==", "bodyText": "79c1b54", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445814704", "createdAt": "2020-06-25T20:19:31Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTU1Ng=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkxMDg5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowNzoyMFrOGpBosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowNToxMVrOGtxoQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MTYwMg==", "bodyText": "What will happen if the artifact status is \"remove\"? We have to check for that before retrieving the artifacts", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445671602", "createdAt": "2020-06-25T16:07:20Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjIyNA==", "bodyText": "This call will only fetch the API Artifacts which have the artifact status of \"publish\" .  https://github.com/wso2/carbon-apimgt/blob/master/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java#L70", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r450652224", "createdAt": "2020-07-07T07:05:11Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MTYwMg=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkxODc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowOToxMlrOGpBtng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowMToyNVrOGpDvlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3Mjg2Mg==", "bodyText": "Shall we add this details to the response? It is good to know which endpoints were not added.", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445672862", "createdAt": "2020-06-25T16:09:12Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNjEzMg==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445706132", "createdAt": "2020-06-25T17:01:25Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3Mjg2Mg=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyMTMxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowOTo0NFrOGpBvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowMToxN1rOGpDvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzI1Nw==", "bodyText": "Better to have this detail in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445673257", "createdAt": "2020-06-25T16:09:44Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNjA1NQ==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445706055", "createdAt": "2020-06-25T17:01:17Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzI1Nw=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyMjg2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMDowNlrOGpBwIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowMDoyMlrOGpDtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzUwNA==", "bodyText": "Better to have this detail in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445673504", "createdAt": "2020-06-25T16:10:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Local Entries\", localEntryArray);\n+                }\n+\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                    JSONArray sequencesArray = new JSONArray();\n+                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n+                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNTU1MA==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445705550", "createdAt": "2020-06-25T17:00:22Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Local Entries\", localEntryArray);\n+                }\n+\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                    JSONArray sequencesArray = new JSONArray();\n+                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n+                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzUwNA=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyNjQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMDo1OVrOGpBybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMDo1OVrOGpBybA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDA5Mg==", "bodyText": "we have to handle the errors too. If there was an error, need that details in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674092", "createdAt": "2020-06-25T16:10:59Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Local Entries\", localEntryArray);\n+                }\n+\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                    JSONArray sequencesArray = new JSONArray();\n+                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n+                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Sequences\", sequencesArray);\n+                }\n+            } catch (EndpointAdminException e) {\n+                log.error(\"Error in fetching deployed Endpoints from Synapse Configuration.\" , e);\n+            } catch (AxisFault axisFault) {\n+                log.error(\"Error in fetching deployed artifacts from Synapse Configuration.\" , axisFault);\n+            }\n+\n             responseObj.put(\"Definition\", definition);\n             String responseStringObj = String.valueOf(responseObj);\n             return Response.ok().entity(responseStringObj).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyNzg5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMToxOVrOGpBzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1NTowNlrOGpDg9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMxMA==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674310", "createdAt": "2020-06-25T16:11:19Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response endPointsGet(String apiName, String label, String apiId, Message\n         JSONObject responseObj = new JSONObject();\n         JSONArray endPointArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null) {\n+            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                        (gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n-                    endPointArray.put(gatewayEndpoint.getContent());\n+                    try {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjM5MA==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445702390", "createdAt": "2020-06-25T16:55:06Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response endPointsGet(String apiName, String label, String apiId, Message\n         JSONObject responseObj = new JSONObject();\n         JSONArray endPointArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null) {\n+            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                        (gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n-                    endPointArray.put(gatewayEndpoint.getContent());\n+                    try {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMxMA=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyODQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMToyN1rOGpBzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1NTowM1rOGpDg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDQxMw==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674413", "createdAt": "2020-06-25T16:11:27Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java", "diffHunk": "@@ -39,8 +46,19 @@ public Response localEntryGet(String apiName, String label, String apiId, Messag\n         JSONArray localEntryArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n             if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                LocalEntryServiceProxy localEntryServiceProxy = new\n+                        LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n-                    localEntryArray.put(localEntry.getContent());\n+                    try {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjM1NA==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445702354", "createdAt": "2020-06-25T16:55:03Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java", "diffHunk": "@@ -39,8 +46,19 @@ public Response localEntryGet(String apiName, String label, String apiId, Messag\n         JSONArray localEntryArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n             if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                LocalEntryServiceProxy localEntryServiceProxy = new\n+                        LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n-                    localEntryArray.put(localEntry.getContent());\n+                    try {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDQxMw=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyOTI2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMTozN1rOGpB0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1NTowMFrOGpDgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDUzMQ==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674531", "createdAt": "2020-06-25T16:11:37Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response sequenceGet(String apiName, String label, String apiId, MessageC\n         JSONObject responseObj = new JSONObject();\n         JSONArray sequencesArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n+            if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                        new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                    sequencesArray.put(sequence.getContent());\n+                    try {\n+                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjMyMA==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445702320", "createdAt": "2020-06-25T16:55:00Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response sequenceGet(String apiName, String label, String apiId, MessageC\n         JSONObject responseObj = new JSONObject();\n         JSONArray sequencesArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n+            if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                        new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                    sequencesArray.put(sequence.getContent());\n+                    try {\n+                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDUzMQ=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkzMTUxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMjowNlrOGpB1kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1NDo0MVrOGpDf7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDg5Nw==", "bodyText": "add a meaningful tenant domain", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674897", "createdAt": "2020-06-25T16:12:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml", "diffHunk": "@@ -203,9 +203,9 @@ paths:\n       security:\n         - OAuth2Security:\n             - apim:api_publish\n-      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test\\\"\"\n       x-wso2-request: |\n-        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMjEyNA==", "bodyText": "2bef8ac", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445702124", "createdAt": "2020-06-25T16:54:41Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml", "diffHunk": "@@ -203,9 +203,9 @@ paths:\n       security:\n         - OAuth2Security:\n             - apim:api_publish\n-      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test\\\"\"\n       x-wso2-request: |\n-        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDg5Nw=="}, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQ4MDkxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1ODoyN1rOIJtjsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxNjozMlrOIOf51w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDUxNQ==", "bodyText": "formatting issues", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547054515", "createdAt": "2020-12-22T03:58:27Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,25 +18,112 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain,\n+            MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MzY4Nw==", "bodyText": "Fixed in the latest version https://github.com/wso2/carbon-apimgt/blob/master/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java#L54", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r552073687", "createdAt": "2021-01-05T17:16:32Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,25 +18,112 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain,\n+            MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDUxNQ=="}, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQ4OTQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseAttributesApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDowNDoxNFrOIJtowg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxNDowNlrOIOf0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NTgxMA==", "bodyText": "extra line spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547055810", "createdAt": "2020-12-22T04:04:14Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseAttributesApi.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseAttributesDTO;\n+import org.wso2.carbon.apimgt.internal.service.SynapseAttributesApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.SynapseAttributesApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.inject.Inject;\n+\n+import io.swagger.annotations.*;\n+import java.io.InputStream;\n+\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+\n+import java.util.Map;\n+import java.util.List;\n+import javax.validation.constraints.*;\n+@Path(\"/synapse-attributes\")\n+\n+@Api(description = \"the synapse-attributes API\")\n+\n+@Produces({ \"application/json\" })\n+\n+\n+public class SynapseAttributesApi  {\n+\n+  @Context MessageContext securityContext;\n+\n+SynapseAttributesApiService delegate = new SynapseAttributesApiServiceImpl();\n+\n+\n+    @GET\n+    \n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MjIzMQ==", "bodyText": "That is an Auto-generated File. We don't need to modify anything there.", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r552072231", "createdAt": "2021-01-05T17:14:06Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseAttributesApi.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseAttributesDTO;\n+import org.wso2.carbon.apimgt.internal.service.SynapseAttributesApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.SynapseAttributesApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.inject.Inject;\n+\n+import io.swagger.annotations.*;\n+import java.io.InputStream;\n+\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+\n+import java.util.Map;\n+import java.util.List;\n+import javax.validation.constraints.*;\n+@Path(\"/synapse-attributes\")\n+\n+@Api(description = \"the synapse-attributes API\")\n+\n+@Produces({ \"application/json\" })\n+\n+\n+public class SynapseAttributesApi  {\n+\n+  @Context MessageContext securityContext;\n+\n+SynapseAttributesApiService delegate = new SynapseAttributesApiServiceImpl();\n+\n+\n+    @GET\n+    \n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NTgxMA=="}, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQ5MDkyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDowNTowNVrOIJtplA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxOToyMVrOIOgA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjAyMA==", "bodyText": "Extra added line spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547056020", "createdAt": "2020-12-22T04:05:05Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -246,9 +246,70 @@ public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws API\n         return false;\n     }\n \n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3NTUxOA==", "bodyText": "Fixed 8254a1c", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r552075518", "createdAt": "2021-01-05T17:19:21Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -246,9 +246,70 @@ public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws API\n         return false;\n     }\n \n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjAyMA=="}, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3285, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}