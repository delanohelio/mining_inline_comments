{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4OTI3OTIx", "number": 8815, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMjo0NlrOEIm5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMzozNVrOEIm6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDYxNDE1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMjo0NlrOGorAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMjo0NlrOGorAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwMDgzNQ==", "bodyText": "Please fix the typo", "url": "https://github.com/wso2/carbon-apimgt/pull/8815#discussion_r445300835", "createdAt": "2020-06-25T04:32:46Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -219,78 +205,99 @@ private String getSchemaExample(Model model, Map<String, Model> definitions, Has\n     }\n \n     /**\n-     *Sets default script\n+     * Sets default script\n      *\n      * @param genCode String builder\n      */\n-    private void setDefaultGeneratedResponse(StringBuilder genCode) {\n-        genCode.append(\"/* mc.setProperty('CONTENT_TYPE', 'application/json');\\n\\t\" +\n-                \"mc.setPayloadJSON('{ \\\"data\\\" : \\\"sample JSON\\\"}');*/\\n\" +\n-                \"/*Uncomment the above comment block to send a sample response.*/\");\n+    private void setDefaultGeneratedResponse(StringBuilder genCode, String responseCode) {\n+        genCode.append(\"\\n/*if (!responses[\").append(responseCode).append(\"]) {\\n\").append(\"  responses[\")\n+                .append(responseCode).append(\"] = [];\\n\").append(\"}\\n\").append(\"responses[\")\n+                .append(responseCode).append(\"][\\\"application/(json or xml)\\\"] = {}/<>*/\\n\");\n     }\n \n     /**\n-     * Generates string for variables in Payload Generation\n+     * Generates string for initializing response code arrays and payload variables\n      *\n      * @param responseCode response Entry Code\n      * @param example generated Example Json/Xml\n      * @param type  mediaType (Json/Xml)\n+     * @param initialized response code array\n      * @return generatedString\n      */\n-    private String getGeneratedResponseVar(String responseCode, String example, String type) {\n-        return \"\\nvar response\" + responseCode + type + \" = \"+ example+\"\\n\\n\";\n-    }\n-\n-    /**\n-     * Generates string for methods in Payload Generation\n-     *\n-     * @param responseCode response Entry Code\n-     * @param type mediaType (Json/Xml)\n-     * @return manualCode\n-     */\n-    private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"  mc.setProperty('HTTP_SC', \\\"\" + responseCode + \"\\\");\\n\" +\n-                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"  mc.setPayload\" + type.toUpperCase() + \"(response\" + responseCode + type + \");\";\n+    private String getGenRespPayloads(String responseCode, String example, String type, boolean initialized) {\n+        StringBuilder genRespPayload = new StringBuilder();\n+        if (!initialized) {\n+            genRespPayload.append(\"\\nif (!responses[\").append(responseCode).append(\"]) {\").append(\"\\n responses [\")\n+                    .append(responseCode).append(\"] = [];\").append(\"\\n}\");\n+        }\n+        genRespPayload.append(\"\\nresponses[\").append(responseCode).append(\"][\\\"application/\").append(type)\n+                .append(\"\\\"] = \\n\").append(example).append(\"\\n\");\n+        return genRespPayload.toString();\n     }\n \n     /**\n-     * Generates conditions for setting response code of mock payloads\n+     * Generates variables for setting accept-header type and response code specified by user\n+     * and sets generated payloads and minimum response code in case specified response code is null\n      *\n-     * @param responseCode response code of payload\n-     * @param getGeneratedSetResponseString string returned from \"getGeneratedSetResponse\"\n-     * @return if condition with \"getGeneratedSetResponse\" included\n+     * @param minResponseCode minimum response code\n+     * @param payloadVariables generated payloads\n+     * @return script with mock payloads and conditions to handle not implemented\n      */\n-    private String getGeneratedConditionsForResponseCodes(String responseCode, String getGeneratedSetResponseString) {\n-        return \"if (responseCode == \" + responseCode + \") {\\n\\n\" +\n-                getGeneratedSetResponseString +\n-                \"\\n\\n} else \";\n+    private String getMandatoryScriptSection(int minResponseCode, StringBuilder payloadVariables) {\n+        return \"var accept = \\\"\\\\\\\"\\\"+mc.getProperty('AcceptHeader')+\\\"\\\\\\\"\\\";\" +\n+                \"\\nvar responseCode = mc.getProperty('query.param.responseCode');\" +\n+                \"\\nvar responses = [];\\n\" +\n+                payloadVariables +\n+                \"\\nresponses[501] = [];\" +\n+                \"\\nresponses[501][\\\"application/json\\\"] = {\" +\n+                \"\\n\\\"code\\\" : 501,\" +\n+                \"\\n\\\"description\\\" : \\\"Not Implemented\\\"\" +\n+                \"}\\n\" +\n+                \"responses[501][\\\"application/xml\\\"] = <response><code>501</code><description>Not Implemented</description></response>;\\n\\n\" +\n+                \"if (responseCode == null) {\\n\" +\n+                \" responseCode = \" + minResponseCode + \";\\n\" +   //assign lowest code\n+                \"}\\n\\n\" +\n+                \"if (!responses[responseCode]) {\\n\" +\n+                \" responseCode = 501;\\n\" +\n+                \"}\\n\\n\" +\n+                \"if (accept == null || !responses[responseCode][accept]) {\\n\";\n     }\n \n     /**\n-     * Generates Mock payload and set response for 501 response and null response code\n-     * also includes getGeneratedIFsforCodes string of all included response codes\n+     * Conditions for setting responses at end of inline script of each resource\n      *\n-     * @param minResponseCode minimum response code\n-     * @param minResponseType type of minimum response code (json/xml)\n-     * @param responseSectionString String of IF conditions of all response codes\n-     * @return response section string with IF conditions and responses\n+     * @param hasJsonPayload contains JSON payload\n+     * @param hasXmlPayload contains XML payload\n+     * @return response section that sets response code and type\n      */\n-    private String getGeneratedSetResponseForCodes(int minResponseCode, String minResponseType, String responseSectionString) {\n-        return \"\\nvar response501json = {\\n\" +\n-                \"\\\"code\\\" : 501,\" +\n-                \"\\n\\\"description\\\" : \" + \"\\\"Not Implemented\\\"\\n\" +\n-                \"}\\n\\n\" +\n-                \"var responseCode = mc.getProperty('query.param.responseCode');\\n\\n\" +\n-                responseSectionString +\n-                \" if (responseCode == null) {\\n\\n\" +\n-                \"  mc.setProperty('HTTP_SC', \\\"\" + minResponseCode + \"\\\");\\n\" +\n-                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + minResponseType + \"');\\n\" +\n-                \"  mc.setPayload\" + minResponseType.toUpperCase() + \"(response\" + minResponseCode + minResponseType + \");\\n\\n\" +\n-                \"} else {\\n\\n\" +\n-                \"  mc.setProperty('CONTENT_TYPE', 'application/json');\\n\" +\n-                \"  mc.setPayloadJSON(response501json);\\n\\n\" +\n-                \"}\";\n+    private String getResponseCondtionsSection(boolean hasJsonPayload, boolean hasXmlPayload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e271974fa89639d75af8d006387afd46f30f1160"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDYxNTI2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMzozNVrOGorBHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMzozNVrOGorBHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwMTAyMQ==", "bodyText": "Please use full names. getGeneratedResponsPayloads or the one that you meant to say.", "url": "https://github.com/wso2/carbon-apimgt/pull/8815#discussion_r445301021", "createdAt": "2020-06-25T04:33:35Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "diffHunk": "@@ -257,82 +246,102 @@ private String getJsonExample(Schema model, Map<String, Schema> definitions) {\n      */\n     private String getXmlExample(Schema model, Map<String, Schema> definitions) {\n         Example example = ExampleBuilder.fromSchema(model, definitions);\n-        return new XmlExampleSerializer().serialize(example);\n+        String rawXmlExample = new XmlExampleSerializer().serialize(example);\n+        return rawXmlExample.replace(\"<?xml version='1.1' encoding='UTF-8'?>\", \"\");\n     }\n \n     /**\n-     *Sets default script\n+     *Sets default script for response codes without defined payloads\n      *\n      * @param genCode String builder\n      */\n-    private void setDefaultGeneratedResponse(StringBuilder genCode) {\n-        genCode.append(\"/* mc.setProperty('CONTENT_TYPE', 'application/json');\\n\\t\" +\n-                \"mc.setPayloadJSON('{ \\\"data\\\" : \\\"sample JSON\\\"}');*/\\n\" +\n-                \"/*Uncomment the above comment block to send a sample response.*/\");\n+    private void setDefaultGeneratedResponse(StringBuilder genCode, String responseCode) {\n+        genCode.append(\"\\n/*if (!responses[\").append(responseCode).append(\"]) {\\n\").append(\"  responses[\")\n+                .append(responseCode).append(\"] = [];\\n\").append(\"}\\n\").append(\"responses[\")\n+                .append(responseCode).append(\"][\\\"application/(json or xml)\\\"] = {}/<>*/\\n\");\n     }\n \n     /**\n-     * Generates string for variables in Payload Generation\n+     * Generates string for initializing response code arrays and payload variables\n      *\n      * @param responseCode response Entry Code\n      * @param example generated Example Json/Xml\n      * @param type  mediaType (Json/Xml)\n+     * @param initialized response code array\n      * @return generatedString\n      */\n-    private String getGeneratedResponseVar(String responseCode, String example, String type) {\n-        return \"\\nvar response\" + responseCode + type + \" = \" + example + \"\\n\\n\";\n-    }\n-\n-    /**\n-     * Generates string for methods in Payload Generation\n-     *\n-     * @param responseCode response Entry Code\n-     * @param type mediaType (Json/Xml)\n-     * @return manualCode\n-     */\n-    private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"  mc.setProperty('HTTP_SC', \\\"\" + responseCode + \"\\\");\\n\" +\n-                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"  mc.setPayload\" + type.toUpperCase() + \"(response\" + responseCode + type + \");\";\n+    private String getGenRespPayloads(String responseCode, String example, String type, boolean initialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e271974fa89639d75af8d006387afd46f30f1160"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3199, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}