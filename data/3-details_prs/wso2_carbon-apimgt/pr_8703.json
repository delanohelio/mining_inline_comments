{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjgzMDg1", "number": 8703, "title": "Approval / Reject UI for workflow pending requests in admin dashboard", "bodyText": "Added approval /reject UI for workflow pending  requests  such as\napplication creation, subscription creation, application registration, API state change, and user creation.", "createdAt": "2020-06-10T20:29:18Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8703", "merged": true, "mergeCommit": {"oid": "feabfe9049e770bb3e0503ca1eb92232ce4d1e88"}, "closed": true, "closedAt": "2020-06-11T04:22:10Z", "author": {"login": "SahanHerath"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcctWo2gH2gAyNDMyNjgzMDg1OjRhOTYyYmE5Nzk2YThmMzdjZmZlNThiZTNmYWFiZDU3OWNkMGI4ZTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqG8bSAFqTQyODU5MTU0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4a962ba9796a8f37cffe58be3faabd579cd0b8e5", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4a962ba9796a8f37cffe58be3faabd579cd0b8e5", "committedDate": "2020-04-30T13:46:25Z", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dfc973fab0f5ed7aacb4455608bab0e95bd749d", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3dfc973fab0f5ed7aacb4455608bab0e95bd749d", "committedDate": "2020-04-30T13:46:25Z", "message": "Reformatted workflowExecutors for ApprovalWorkflowExecutor and two rest APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c289f8b8e4da3633c47e5538b4454713a577bc30", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c289f8b8e4da3633c47e5538b4454713a577bc30", "committedDate": "2020-04-30T13:46:25Z", "message": "Added database changes to the sql files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2540ac54343366961eb912ea4c712a43a6b210e8", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2540ac54343366961eb912ea4c712a43a6b210e8", "committedDate": "2020-04-30T13:46:25Z", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d00804549826db34192db57858ef5c6750d600", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/01d00804549826db34192db57858ef5c6750d600", "committedDate": "2020-04-30T13:46:26Z", "message": "Changes in the workflow executors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f5c6995cf9d322c8f7b2621e246b6ddcc5b071", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d1f5c6995cf9d322c8f7b2621e246b6ddcc5b071", "committedDate": "2020-04-30T13:46:27Z", "message": "Changes in add workflow entry ApiMgtDAO.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3eedd94476a015c149657d832466f531f7c1844", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b3eedd94476a015c149657d832466f531f7c1844", "committedDate": "2020-04-30T13:46:27Z", "message": "Reformatted the approval workflow executor and rest APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f03a928c3dec8de467cac06014248fba50f60114", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f03a928c3dec8de467cac06014248fba50f60114", "committedDate": "2020-04-30T13:46:27Z", "message": "Changed the licence header in Approval Workflow Executor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23f8ca2232215e6147e9528ef47ac862dbe6500", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f23f8ca2232215e6147e9528ef47ac862dbe6500", "committedDate": "2020-04-30T13:46:27Z", "message": "Change the licence header of Workflow.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2f0630b3746347d79af1fb694f53dda75ecc766", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c2f0630b3746347d79af1fb694f53dda75ecc766", "committedDate": "2020-04-30T13:46:28Z", "message": "Reformtted the previous commits and removed unwanted files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734944008602fa2c5e8f175c05f4913eeb250fb1", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/734944008602fa2c5e8f175c05f4913eeb250fb1", "committedDate": "2020-04-30T13:46:28Z", "message": "Changed the admin-api.yaml and beans.xml in org.wso2.carbon.apimgt.rest.api.admin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2924473cc81368ac674a2968fea53be524720cc5", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2924473cc81368ac674a2968fea53be524720cc5", "committedDate": "2020-05-04T06:48:28Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa10ad6c286419d78be9ce8602bbb2d512808baf", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fa10ad6c286419d78be9ce8602bbb2d512808baf", "committedDate": "2020-05-06T05:56:42Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b7d928c7524d63a8537a1706a4b1ea3b814576", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/42b7d928c7524d63a8537a1706a4b1ea3b814576", "committedDate": "2020-05-14T07:06:06Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234bf006e2faafacae0741a6c4b451c5971c636f", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/234bf006e2faafacae0741a6c4b451c5971c636f", "committedDate": "2020-05-18T09:59:32Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp\n\n\u0001 Conflicts:\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c4cf2323cd2a04bd9216026d861821c9fa8255", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/14c4cf2323cd2a04bd9216026d861821c9fa8255", "committedDate": "2020-05-19T10:43:41Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c32e041d9f8ba5faa887e736ba14a6446bb90df", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6c32e041d9f8ba5faa887e736ba14a6446bb90df", "committedDate": "2020-05-21T06:43:53Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb169b8eccbfa4f98398de636ed68091ad9ad93b", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fb169b8eccbfa4f98398de636ed68091ad9ad93b", "committedDate": "2020-06-01T10:12:41Z", "message": "Added UI for approve and reject in Admin dashboard for Approval Workflow Executor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c88f7a965d909e5a1235731ddf062937dd7a257", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7c88f7a965d909e5a1235731ddf062937dd7a257", "committedDate": "2020-06-04T17:47:38Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp\n\n\u0001 Conflicts:\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/workflowextensions/default-workflow-extensions.xml\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/WorkflowsApi.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/WorkflowsApiService.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/data/api.js\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/workflowextensions/default-workflow-extensions.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8a57c0f68e28eb7003552e54bb2c492c153f62", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9d8a57c0f68e28eb7003552e54bb2c492c153f62", "committedDate": "2020-06-10T11:57:23Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp\n\n\u0001 Conflicts:\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/data/api.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49c70d5403458e1467ee877a5393aa48394a210", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c49c70d5403458e1467ee877a5393aa48394a210", "committedDate": "2020-06-10T15:53:30Z", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin_portal_revamp\n\n\u0001 Conflicts:\n\u0001\tfeatures/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad1c7af2407b742d75e746cbce5102d8a24d2a0", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6ad1c7af2407b742d75e746cbce5102d8a24d2a0", "committedDate": "2020-06-10T20:02:17Z", "message": "Added UI for Approval/reject process of workflow pending request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b514fc170d35ba00c054e3faaa6d59c37baa01", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/67b514fc170d35ba00c054e3faaa6d59c37baa01", "committedDate": "2020-06-10T20:08:24Z", "message": "WorkflowsApiServiceImpl changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851", "author": {"user": {"login": "SahanHerath", "name": "Sahan Herath"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e4c0ed6111997681e15279f913058e7574954851", "committedDate": "2020-06-10T20:44:38Z", "message": "Removed some unwanted files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc3NzYw", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428577760", "createdAt": "2020-06-11T04:04:41Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDo0MVrOGiNx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDo0MVrOGiNx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDUzNw==", "bodyText": "Why we have disabled this rule ??", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530537", "createdAt": "2020-06-11T04:04:41Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc3OTE2", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428577916", "createdAt": "2020-06-11T04:05:15Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNToxNVrOGiNycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNToxNVrOGiNycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDY3Mg==", "bodyText": "Should use theme.spacing", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530672", "createdAt": "2020-06-11T04:05:15Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc3OTk1", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428577995", "createdAt": "2020-06-11T04:05:33Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNTozM1rOGiNytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNTozM1rOGiNytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDc0Mg==", "bodyText": "Why we have custom border styling here ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438530742", "createdAt": "2020-06-11T04:05:33Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc4NjE5", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428578619", "createdAt": "2020-06-11T04:07:58Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1OFrOGiN00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1OFrOGiN00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTI4Mw==", "bodyText": "use object destructuring", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531283", "createdAt": "2020-06-11T04:07:58Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc4NzI0", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428578724", "createdAt": "2020-06-11T04:08:16Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODoxN1rOGiN1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODoxN1rOGiN1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTM3Nw==", "bodyText": "Don't catch errors for just re-throwing it as-is", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531377", "createdAt": "2020-06-11T04:08:17Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc4Nzkw", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428578790", "createdAt": "2020-06-11T04:08:31Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODozMVrOGiN1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowODozMVrOGiN1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTQyNw==", "bodyText": "log the error\nconsole.error", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531427", "createdAt": "2020-06-11T04:08:31Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc5NDUw", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428579450", "createdAt": "2020-06-11T04:10:37Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMDozN1rOGiN3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMDozN1rOGiN3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTk3OQ==", "bodyText": "Initialize default values when we declare the variable", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438531979", "createdAt": "2020-06-11T04:10:37Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgxNjUz", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428581653", "createdAt": "2020-06-11T04:18:46Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODo0NlrOGiN-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODo0NlrOGiN-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzgyMw==", "bodyText": "why we need to initialize the variable with an empty string??", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533823", "createdAt": "2020-06-11T04:18:46Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgxODE5", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428581819", "createdAt": "2020-06-11T04:19:22Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOToyMlrOGiN_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOToyMlrOGiN_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzk2MA==", "bodyText": "This should be chained as next then", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533960", "createdAt": "2020-06-11T04:19:22Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgyMTcy", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428582172", "createdAt": "2020-06-11T04:20:42Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0MlrOGiOAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMDo0MlrOGiOAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDI0MQ==", "bodyText": "why do we need to declare a variable for this small span ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534241", "createdAt": "2020-06-11T04:20:42Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 329}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgyNDMx", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428582431", "createdAt": "2020-06-11T04:21:42Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMTo0MlrOGiOBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMTo0MlrOGiOBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDQ2NA==", "bodyText": "Please fix this in here and all the other repeating places", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534464", "createdAt": "2020-06-11T04:21:42Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/ApplicationCreation.jsx", "diffHunk": "@@ -0,0 +1,453 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+        textDecoration: 'none',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_APPLICATION_CREATION')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgyNTM0", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428582534", "createdAt": "2020-06-11T04:22:03Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgxMTE3", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428581117", "createdAt": "2020-06-11T04:16:38Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxNjozOFrOGiN86Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozODo0N1rOGiOQog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzM1Mw==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533353", "createdAt": "2020-06-11T04:16:38Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "diffHunk": "@@ -49,6 +49,12 @@ import PolicyIcon from '@material-ui/icons/Policy';\n import ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\n import BlockIcon from '@material-ui/icons/Block';\n import AssignmentIcon from '@material-ui/icons/Assignment';\n+import ApplicationCreation from 'AppComponents/Workflow/ApplicationCreation';\n+import SubscriptionCreation from 'AppComponents/Workflow/SubscriptionCreation';\n+import RegistrationCreation from 'AppComponents/Workflow/RegistrationCreation';\n+import APIStateChange from 'AppComponents/Workflow/APIStateChange';\n+import UserCreation from 'AppComponents/Workflow/UserCreation';\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzY0OA==", "bodyText": "why are we using custom border colours?", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533648", "createdAt": "2020-06-11T04:18:00Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzkxMQ==", "bodyText": "we can make promisedupdateWorkflow a const right?\nconst promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438533911", "createdAt": "2020-06-11T04:19:09Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDA2Ng==", "bodyText": "Add internationalisation.", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534066", "createdAt": "2020-06-11T04:19:55Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDI2MQ==", "bodyText": "Change doc links to workflow links. These are still microgateway links", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438534261", "createdAt": "2020-06-11T04:20:47Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTExMg==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535112", "createdAt": "2020-06-11T04:24:36Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE0Ng==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535146", "createdAt": "2020-06-11T04:24:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTE4MA==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535180", "createdAt": "2020-06-11T04:24:53Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTI2NA==", "bodyText": "Add Internationalisation to the labels of coloumn props. Add to all places with static values.", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438535264", "createdAt": "2020-06-11T04:25:16Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODM0OA==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438538348", "createdAt": "2020-06-11T04:38:33Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+\n+    const columns = [\n+        ...columProps,\n+    ];\n+\n+    const options = {\n+        filterType: 'checkbox',\n+        selectableRows: 'none',\n+        filter: false,\n+        search: false,\n+        print: false,\n+        download: false,\n+        viewColumns: false,\n+        customToolbar: null,\n+        responsive: 'stacked',\n+        searchText,\n+    };\n+    if (data && data.length === 0) {\n+        return (\n+            <ContentBase\n+                {...pageProps}\n+                pageStyle='small'\n+            >\n+                <Card className={classes.root}>\n+                    <CardActionArea>\n+                        <CardContent>\n+                            <Typography gutterBottom variant='h5' component='h2'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.title.apistatechange'\n+                                    defaultMessage='API State Change'\n+                                />\n+\n+                            </Typography>\n+                            <Typography variant='body2' color='textSecondary' component='p'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.content.apistatechange'\n+                                    defaultMessage={'There are no workflow pending requests for API state change.'\n+                                    + 'It is possible to approve or reject workflow pending requests of '\n+                                    + 'API state change. Workflow Approval Executor need to be enabled to '\n+                                    + 'introduce this approve reject process into system'}\n+                                />\n+                            </Typography>\n+                        </CardContent>\n+                    </CardActionArea>\n+                    <CardActions>\n+                        {addButtonOverride || (\n+                            <EditComponent updateList={fetchData} {...addButtonProps} />\n+                        )}\n+                    </CardActions>\n+                </Card>\n+            </ContentBase>\n+        );\n+    }\n+    if (!data) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+\n+        );\n+    }\n+    return (\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODQwMg==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438538402", "createdAt": "2020-06-11T04:38:47Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+\n+    const columns = [\n+        ...columProps,\n+    ];\n+\n+    const options = {\n+        filterType: 'checkbox',\n+        selectableRows: 'none',\n+        filter: false,\n+        search: false,\n+        print: false,\n+        download: false,\n+        viewColumns: false,\n+        customToolbar: null,\n+        responsive: 'stacked',\n+        searchText,\n+    };\n+    if (data && data.length === 0) {\n+        return (\n+            <ContentBase\n+                {...pageProps}\n+                pageStyle='small'\n+            >\n+                <Card className={classes.root}>\n+                    <CardActionArea>\n+                        <CardContent>\n+                            <Typography gutterBottom variant='h5' component='h2'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.title.apistatechange'\n+                                    defaultMessage='API State Change'\n+                                />\n+\n+                            </Typography>\n+                            <Typography variant='body2' color='textSecondary' component='p'>\n+                                <FormattedMessage\n+                                    id='Workflow.APIStateChange.List.empty.content.apistatechange'\n+                                    defaultMessage={'There are no workflow pending requests for API state change.'\n+                                    + 'It is possible to approve or reject workflow pending requests of '\n+                                    + 'API state change. Workflow Approval Executor need to be enabled to '\n+                                    + 'introduce this approve reject process into system'}\n+                                />\n+                            </Typography>\n+                        </CardContent>\n+                    </CardActionArea>\n+                    <CardActions>\n+                        {addButtonOverride || (\n+                            <EditComponent updateList={fetchData} {...addButtonProps} />\n+                        )}\n+                    </CardActions>\n+                </Card>\n+            </ContentBase>\n+        );\n+    }\n+    if (!data) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+\n+        );\n+    }\n+    return (\n+\n+        <>\n+            <ContentBase {...pageProps}>\n+                {(searchActive || addButtonProps) && (\n+                    <AppBar className={classes.searchBar} position='static' color='default' elevation={0}>\n+                        <Toolbar>\n+                            <Grid container spacing={2} alignItems='center'>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 410}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTkxNTQ3", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#pullrequestreview-428591547", "createdAt": "2020-06-11T04:53:46Z", "commit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1Mzo0NlrOGiOeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1NTozM1rOGiOf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTkxOQ==", "bodyText": "extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438541919", "createdAt": "2020-06-11T04:53:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjExMg==", "bodyText": "You can remove these comments", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542112", "createdAt": "2020-06-11T04:54:46Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjIwMQ==", "bodyText": "Add Internationalisation to the labels of coloumn props", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542201", "createdAt": "2020-06-11T04:55:06Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MjMwOQ==", "bodyText": "extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8703#discussion_r438542309", "createdAt": "2020-06-11T04:55:33Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Workflow/APIStateChange.jsx", "diffHunk": "@@ -0,0 +1,471 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, useIntl } from 'react-intl';\n+import AppBar from '@material-ui/core/AppBar';\n+import Toolbar from '@material-ui/core/Toolbar';\n+import Typography from '@material-ui/core/Typography';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import IconButton from '@material-ui/core/IconButton';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SearchIcon from '@material-ui/icons/Search';\n+import RefreshIcon from '@material-ui/icons/Refresh';\n+import Card from '@material-ui/core/Card';\n+import CardActionArea from '@material-ui/core/CardActionArea';\n+import CardActions from '@material-ui/core/CardActions';\n+import CardContent from '@material-ui/core/CardContent';\n+import MUIDataTable from 'mui-datatables';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+import Alert from 'AppComponents/Shared/Alert';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import API from 'AppData/api';\n+import Button from '@material-ui/core/Button';\n+import * as dayjs from 'dayjs';\n+import relativeTime from 'dayjs/plugin/relativeTime';\n+import localizedFormat from 'dayjs/plugin/localizedFormat';\n+import CheckIcon from '@material-ui/icons/Check';\n+import ClearIcon from '@material-ui/icons/Clear';\n+import Box from '@material-ui/core/Box';\n+\n+const useStyles = makeStyles((theme) => ({\n+    searchBar: {\n+        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n+    },\n+    searchInput: {\n+        fontSize: theme.typography.fontSize,\n+    },\n+    block: {\n+        display: 'block',\n+    },\n+    contentWrapper: {\n+        margin: '40px 16px',\n+    },\n+    button: {\n+        borderColor: 'rgba(255, 255, 255, 0.7)',\n+    },\n+    approveButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.success.light,\n+    },\n+    rejectButton: {\n+        textDecoration: 'none',\n+        backgroundColor: theme.palette.error.light,\n+    },\n+}));\n+\n+/**\n+ * Render a list\n+ * @param {JSON} props props passed from parent\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function ListLabels() {\n+    const intl = useIntl();\n+    const [data, setData] = useState(null);\n+    const restApi = new API();\n+\n+    /**\n+     * API call to get Detected Data\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .workflowsGet('AM_API_STATE')\n+            .then((result) => {\n+                const workflowlist = result.body.list;\n+                return (workflowlist);\n+            })\n+            .catch((error) => {\n+                throw (error);\n+            });\n+    }\n+\n+    const fetchData = () => {\n+    // Fetch data from backend\n+        setData(null);\n+        const promiseAPICall = apiCall();\n+        promiseAPICall.then((LocalData) => {\n+            setData(LocalData);\n+        })\n+            .catch((e) => {\n+                Alert.error(e);\n+            });\n+    };\n+\n+    useEffect(() => {\n+        fetchData();\n+    }, []);\n+\n+\n+    const updateStatus = (referenceId, value) => {\n+        const body = {};\n+        body.status = value;\n+        body.attributes = {};\n+        body.description = 'Approve workflow request.';\n+\n+        let promisedupdateWorkflow = '';\n+        promisedupdateWorkflow = restApi.updateWorkflow(referenceId, body);\n+        return promisedupdateWorkflow\n+            .then(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Workflow.ApplicationCreation.update.success'\n+                        defaultMessage='workflow status is updated successfully'\n+                    />\n+                );\n+            })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    response.body.description = 'Unable to complete API state change approve/reject process';\n+                    throw (response.body.description);\n+                }\n+                return null;\n+            })\n+            .finally(() => {\n+                fetchData();\n+            });\n+    };\n+\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                        + 'learn/api-microgateway/grouping-apis-with-labels/#grouping-apis-with-microgateway-labels'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Workflow.APIStatechange.help.link.one'\n+                                    defaultMessage='Create a API State change workflow request'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        /*\n+        pageStyle='half' center part of the screen.\n+        pageStyle='full' = Take the full content area.\n+        pageStyle='paperLess' = Avoid from displaying background paper. ( For dashbord we need this )\n+        */\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Workflow.APIStateChange.title.apistatechange',\n+            defaultMessage: 'API State Change - Approval Tasks',\n+        }),\n+    };\n+\n+    const classes = useStyles();\n+    const [searchText, setSearchText] = useState('');\n+\n+    const columProps = [\n+        {\n+            name: 'description',\n+            label: 'Description',\n+            options: {\n+                sort: false,\n+                display: false,\n+            },\n+        },\n+        {\n+            name: 'api',\n+            label: 'API',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.apiName}\n+                            -\n+                            {properties.apiVersion}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'requestState',\n+            label: 'Request State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.action}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'currentState',\n+            label: 'Current State',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    return (\n+                        <div>\n+                            {properties.currentState}\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'apiProvider',\n+            label: 'Created by',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { properties } = dataRow;\n+                    const { createdTime } = dataRow;\n+                    dayjs.extend(relativeTime);\n+                    const time = dayjs(createdTime).fromNow();\n+                    dayjs.extend(localizedFormat);\n+                    const format = dayjs(createdTime).format('LLL');\n+                    return (\n+                        <div>\n+                            {properties.apiProvider}\n+                            <br />\n+                            <Tooltip title={format}>\n+                                <Typography color='textSecondary'>\n+                                    {time}\n+                                </Typography>\n+                            </Tooltip>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+        {\n+            name: 'action',\n+            label: 'Actions',\n+            options: {\n+                sort: false,\n+                customBodyRender: (value, tableMeta) => {\n+                    const dataRow = data[tableMeta.rowIndex];\n+                    const { referenceId } = dataRow;\n+                    return (\n+                        <div>\n+                            <Box component='span' m={1}>\n+                                <Button\n+                                    className={classes.approveButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'APPROVED')}\n+                                >\n+                                    <CheckIcon />\n+                                    Approve\n+                                </Button>\n+                                &nbsp;&nbsp;\n+                                <Button\n+                                    className={classes.rejectButton}\n+                                    variant='contained'\n+                                    size='small'\n+                                    onClick={() => updateStatus(referenceId, 'REJECTED')}\n+                                >\n+                                    <ClearIcon />\n+                                    Reject\n+                                </Button>\n+                            </Box>\n+                        </div>\n+                    );\n+                },\n+            },\n+        },\n+    ];\n+\n+    const addButtonProps = {};\n+    const addButtonOverride = null;\n+    const noDataMessage = (\n+        <FormattedMessage\n+            id='AdminPages.Addons.ListBase.nodata.message'\n+            defaultMessage='No items yet'\n+        />\n+    );\n+\n+    const EditComponent = (() => <span />);\n+\n+    const searchActive = true;\n+    const searchPlaceholder = intl.formatMessage({\n+        id: 'Workflow.apistatechange.search.default',\n+        defaultMessage: 'Search by workflow request description',\n+    });\n+\n+    const filterData = (event) => {\n+        setSearchText(event.target.value);\n+    };\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0ed6111997681e15279f913058e7574954851"}, "originalPosition": 341}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}