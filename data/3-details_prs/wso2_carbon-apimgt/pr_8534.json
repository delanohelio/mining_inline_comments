{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTk3NDEx", "number": 8534, "title": "Add endpoint registry api tests", "bodyText": "", "createdAt": "2020-05-19T09:34:45Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8534", "merged": true, "mergeCommit": {"oid": "5afaece134766078be52ccb9793d22bfee6819ca"}, "closed": true, "closedAt": "2020-05-21T05:05:25Z", "author": {"login": "ChamodDamitha"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcizuOEgBqjMzNTE2MTg2MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBF934AFqTQ3MjU1MzgwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15a32773fbdbd31a2aed4cf306f1d00caf0694e4", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/15a32773fbdbd31a2aed4cf306f1d00caf0694e4", "committedDate": "2020-05-19T06:46:44Z", "message": "Add endpoint registry api tests"}, "afterCommit": {"oid": "aee3b5064350ee9b68b477ab76d46f232bd0ef67", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/aee3b5064350ee9b68b477ab76d46f232bd0ef67", "committedDate": "2020-05-19T12:34:52Z", "message": "Add endpoint registry api tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aee3b5064350ee9b68b477ab76d46f232bd0ef67", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/aee3b5064350ee9b68b477ab76d46f232bd0ef67", "committedDate": "2020-05-19T12:34:52Z", "message": "Add endpoint registry api tests"}, "afterCommit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "committedDate": "2020-05-19T13:09:14Z", "message": "Add endpoint registry api tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTY0MDk1", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-414964095", "createdAt": "2020-05-20T03:16:02Z", "commit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxNjowMlrOGX52Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxNjowMlrOGX52Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODI0Ng==", "bodyText": "shall we verify whether an expected method was called or something since we cannot assert?", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718246", "createdAt": "2020-05-20T03:16:02Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTY0MTk2", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-414964196", "createdAt": "2020-05-20T03:16:28Z", "commit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxNjoyOFrOGX52ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxNjoyOFrOGX52ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODMzMA==", "bodyText": "let's use Mockito verify", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718330", "createdAt": "2020-05-20T03:16:28Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistry(\"abc1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTY0NzU4", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-414964758", "createdAt": "2020-05-20T03:18:29Z", "commit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxODoyOVrOGX54cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxODoyOVrOGX54cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODc2OA==", "bodyText": "why fully qualified name here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718768", "createdAt": "2020-05-20T03:18:29Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistry(\"abc1\");\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryByUUID() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n+                .thenReturn(endpointRegistryInfo);\n+        EndpointRegistryInfo endpointRegistryInfoResponse\n+                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n+\n+        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistries() throws APIManagementException {\n+        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n+\n+        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n+        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo1.setMode(\"ReadOnly\");\n+        endpointRegistryInfo1.setOwner(\"admin\");\n+        endpointRegistryInfo1.setRegistryId(1);\n+        endpointRegistryInfo1.setType(\"wso2\");\n+        endpointRegistryInfo1.setUuid(\"abc1\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo1);\n+\n+        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n+        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo2.setMode(\"ReadWrite\");\n+        endpointRegistryInfo2.setOwner(\"admin\");\n+        endpointRegistryInfo2.setRegistryId(1);\n+        endpointRegistryInfo2.setType(\"etcd\");\n+        endpointRegistryInfo2.setUuid(\"abc2\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_ID))\n+                .thenReturn(endpointRegistryInfoList);\n+\n+        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n+                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_DOMAIN);\n+\n+        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n+            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n+                .thenReturn(endpointRegistryEntry);\n+\n+        EndpointRegistryEntry endpointRegistryEntryResponse =\n+                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n+\n+        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntries() throws APIManagementException {\n+        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n+        endpointRegistryEntry1.setEntryId(\"abc1\");\n+        endpointRegistryEntry1.setName(\"Entry 1\");\n+        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry1.setRegistryId(1);\n+        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry1.setServiceType(\"REST\");\n+        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+        endpointRegistryEntryList.add(endpointRegistryEntry1);\n+\n+        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n+        endpointRegistryEntry2.setEntryId(\"abc2\");\n+        endpointRegistryEntry2.setName(\"Entry 2\");\n+        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry2.setRegistryId(1);\n+        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntry2.setServiceType(\"REST\");\n+        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+        endpointRegistryEntryList.add(endpointRegistryEntry2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n+                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n+\n+        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n+                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n+                        \"ASC\", 25, 0, registryUUID);\n+\n+        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n+            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void addEndpointRegistryEntry() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n+                .thenReturn(endpointRegistryEntry.getEntryId());\n+\n+        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n+\n+        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistryEntry() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n+        endpointRegistryEntryOld.setEntryId(\"abc1\");\n+        endpointRegistryEntryOld.setName(\"Entry 1\");\n+        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntryOld.setRegistryId(1);\n+        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntryOld.setServiceType(\"REST\");\n+        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n+        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n+        endpointRegistryEntryNew.setEntryId(\"abc1\");\n+        endpointRegistryEntryNew.setName(\"Entry 2\");\n+        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n+        endpointRegistryEntryNew.setRegistryId(1);\n+        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntryNew.setServiceType(\"REST\");\n+        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n+        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n+                .thenReturn(endpointRegistryEntryOld);\n+        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n+                .thenReturn(false);\n+\n+        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n+        endpointRegistryEntryOld.setEntryId(\"abc1\");\n+        endpointRegistryEntryOld.setName(\"Entry 1\");\n+        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntryOld.setRegistryId(1);\n+        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntryOld.setServiceType(\"REST\");\n+        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n+        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n+        endpointRegistryEntryNew.setEntryId(\"abc1\");\n+        endpointRegistryEntryNew.setName(\"Entry 2\");\n+        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n+        endpointRegistryEntryNew.setRegistryId(1);\n+        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntryNew.setServiceType(\"REST\");\n+        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n+        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n+                .thenReturn(endpointRegistryEntryOld);\n+        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistryEntry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistryEntry(\"entry1\");\n+    }\n+\n+    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n+        org.junit.Assert.assertEquals(expected.getUuid(), actual.getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c"}, "originalPosition": 340}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTYzOTQ1", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-415163945", "createdAt": "2020-05-20T09:40:54Z", "commit": {"oid": "8aad6c2009f4840cedef91797b02feb0a640fa4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MDo1NFrOGYDkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MDo1NFrOGYDkZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzQ3OA==", "bodyText": "Missing license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427877478", "createdAt": "2020-05-20T09:40:54Z", "author": {"login": "vithu30"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.wso2.carbon.apimgt.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aad6c2009f4840cedef91797b02feb0a640fa4e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "committedDate": "2020-05-20T10:43:39Z", "message": "Add null responses in endpoint registry resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4414acdeb42f5d7c16e84ab9683ac43aa26f5f", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1a4414acdeb42f5d7c16e84ab9683ac43aa26f5f", "committedDate": "2020-05-20T10:43:39Z", "message": "Add endpoint registry api tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d364384427215eb7e8b7967a963c15a347ed88", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/39d364384427215eb7e8b7967a963c15a347ed88", "committedDate": "2020-05-20T16:34:42Z", "message": "Fix endpoint registry test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8aad6c2009f4840cedef91797b02feb0a640fa4e", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8aad6c2009f4840cedef91797b02feb0a640fa4e", "committedDate": "2020-05-20T07:42:31Z", "message": "Fix endpoint registry test cases"}, "afterCommit": {"oid": "39d364384427215eb7e8b7967a963c15a347ed88", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/39d364384427215eb7e8b7967a963c15a347ed88", "committedDate": "2020-05-20T16:34:42Z", "message": "Fix endpoint registry test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a431d519af8eaed5c8ddaf15464bc8c9a59e3c7", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9a431d519af8eaed5c8ddaf15464bc8c9a59e3c7", "committedDate": "2020-05-20T16:46:49Z", "message": "Update getEndpointDefinition test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a", "author": {"user": {"login": "ChamodDamitha", "name": "Chamod Damitha Samarajeewa"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/67cac589c70906af1910a77d49866fb2ec64747a", "committedDate": "2020-05-20T19:58:12Z", "message": "Remove unwanted databse call when updating endpoint registry entry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODc4NjAz", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-415878603", "createdAt": "2020-05-21T04:58:48Z", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTQ5NjE5", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-472549619", "createdAt": "2020-08-21T14:42:55Z", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0Mjo1NlrOHEwASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0Mjo1NlrOHEwASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0Mjg1Ng==", "bodyText": "Add class level doc comments describing what this class does", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474742856", "createdAt": "2020-08-21T14:42:56Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTUwMTEw", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-472550110", "createdAt": "2020-08-21T14:43:32Z", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0MzozMlrOHEwBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0MzozMlrOHEwBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzIxOA==", "bodyText": "Add doc comment describing what is tested in this test", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474743218", "createdAt": "2020-08-21T14:43:32Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTUwMjYy", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-472550262", "createdAt": "2020-08-21T14:43:45Z", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0Mzo0NVrOHEwCGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0Mzo0NVrOHEwCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzMyMw==", "bodyText": "Add doc comment describing what is tested in this test", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474743323", "createdAt": "2020-08-21T14:43:45Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTUzODA1", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#pullrequestreview-472553805", "createdAt": "2020-08-21T14:48:16Z", "commit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0ODoxNlrOHEwMwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0ODoxNlrOHEwMwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjA1MA==", "bodyText": "Would have been good if test method name following the naming convention. i.e. \"testGetEndpointRegistryEntries\". This should be considered for all the test methods in this PR", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474746050", "createdAt": "2020-08-21T14:48:16Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+        Mockito.verify(apiMgtDAO).updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        final String REGISTRY_UUID = \"abc1\";\n+        endpointRegistry.deleteEndpointRegistry(REGISTRY_UUID);\n+        Mockito.verify(apiMgtDAO).deleteEndpointRegistry(REGISTRY_UUID);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryByUUID() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n+                .thenReturn(endpointRegistryInfo);\n+        EndpointRegistryInfo endpointRegistryInfoResponse\n+                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n+\n+        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistries() throws APIManagementException {\n+        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n+\n+        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n+        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo1.setMode(\"ReadOnly\");\n+        endpointRegistryInfo1.setOwner(\"admin\");\n+        endpointRegistryInfo1.setRegistryId(1);\n+        endpointRegistryInfo1.setType(\"wso2\");\n+        endpointRegistryInfo1.setUuid(\"abc1\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo1);\n+\n+        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n+        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo2.setMode(\"ReadWrite\");\n+        endpointRegistryInfo2.setOwner(\"admin\");\n+        endpointRegistryInfo2.setRegistryId(1);\n+        endpointRegistryInfo2.setType(\"etcd\");\n+        endpointRegistryInfo2.setUuid(\"abc2\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_ID))\n+                .thenReturn(endpointRegistryInfoList);\n+\n+        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n+                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_DOMAIN);\n+\n+        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n+            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n+                .thenReturn(endpointRegistryEntry);\n+\n+        EndpointRegistryEntry endpointRegistryEntryResponse =\n+                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n+\n+        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntries() throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cac589c70906af1910a77d49866fb2ec64747a"}, "originalPosition": 223}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2767, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}