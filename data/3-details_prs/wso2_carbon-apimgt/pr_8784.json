{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTM4NjIx", "number": 8784, "title": "Validating synapse artifacts from synapse configuration in gateway RestAPI", "bodyText": "Related issue: wso2/product-apim#8246\nHere after fetching the corresponding synapse artifacts from DB, It has been validated with the deployed synapse artifacts in synapse configuration and return to the restAPI call.", "createdAt": "2020-06-18T15:05:51Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8784", "merged": true, "mergeCommit": {"oid": "135227e6d77fcd4a33b4caa253b9c8574cc539e4"}, "closed": true, "closedAt": "2020-07-13T05:35:56Z", "author": {"login": "Sarangan0219"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsfIaqAH2gAyNDM2NTM4NjIxOmEzNjYxYTJkYWY3YjE0YTFmNGIzYmM3MmJmODA5YzBjYmUzN2FhNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoifbDAFqTU1NjgwMjU4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a3661a2daf7b14a1f4b3bc72bf809c0cbe37aa56", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a3661a2daf7b14a1f4b3bc72bf809c0cbe37aa56", "committedDate": "2020-06-18T14:15:00Z", "message": "restAPI changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04087ac5ee09709069dd9327f67ee34b5eeab3be", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/04087ac5ee09709069dd9327f67ee34b5eeab3be", "committedDate": "2020-06-18T14:16:38Z", "message": "remove newlines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7efc5d8081a1a209e457275977bd2dea2d65e8f", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b7efc5d8081a1a209e457275977bd2dea2d65e8f", "committedDate": "2020-06-18T14:24:00Z", "message": "handle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996441b02a18e8ceedb36216f72a4e45c4734dfd", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/996441b02a18e8ceedb36216f72a4e45c4734dfd", "committedDate": "2020-06-18T15:02:47Z", "message": "Validate getAPIArtifact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6725e049ff0bb0cdf7dbd1131c0e9c335f0fa911", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6725e049ff0bb0cdf7dbd1131c0e9c335f0fa911", "committedDate": "2020-06-18T15:05:07Z", "message": "formatted the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75212045edcd0d071ea160c50ce5e9e1a0739f06", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/75212045edcd0d071ea160c50ce5e9e1a0739f06", "committedDate": "2020-06-22T07:12:11Z", "message": "Exposing details from inmemory artifacts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b548db98e547ea8c2f8c472c5bb343986a79d4b", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0b548db98e547ea8c2f8c472c5bb343986a79d4b", "committedDate": "2020-06-22T15:22:40Z", "message": "getting artifacts sepeartely"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ef33741f7a72199bf67bf9911cc4a84060687b", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/53ef33741f7a72199bf67bf9911cc4a84060687b", "committedDate": "2020-06-22T15:24:45Z", "message": "refine imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2528166aa928ae3b636c418b9b5d35f7fce7be5", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e2528166aa928ae3b636c418b9b5d35f7fce7be5", "committedDate": "2020-06-22T17:39:08Z", "message": "added vaidations for RESTAPI implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561dbe3ec9099c5ea2c9d752ab809eb999f83424", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/561dbe3ec9099c5ea2c9d752ab809eb999f83424", "committedDate": "2020-06-22T17:59:16Z", "message": "return list instead of string from endpointServiceproxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad14286faad11f58c66398ad1d15f0138186706", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1ad14286faad11f58c66398ad1d15f0138186706", "committedDate": "2020-06-25T07:10:41Z", "message": "Change parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a1562425a0031c8cdf8d2534f344db9910a9d8db", "committedDate": "2020-06-25T07:11:37Z", "message": "add DB opeartions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b329b919e4ecfccbc8d71b765f63afa37609fb", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/30b329b919e4ecfccbc8d71b765f63afa37609fb", "committedDate": "2020-06-25T07:12:43Z", "message": "Merge remote-tracking branch 'upstream/master' into gatewayRESTAPI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjQxNDE5", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#pullrequestreview-437641419", "createdAt": "2020-06-25T16:03:38Z", "commit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowMzozOFrOGpBfmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMjowNlrOGpB1kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTI3Mg==", "bodyText": "We should not access DAO layer outside impl. Even in gateway profile, we might not have access to db.", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445669272", "createdAt": "2020-06-25T16:03:38Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2OTU1Ng==", "bodyText": "use the artifact retriever to get the gateway API Id", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445669556", "createdAt": "2020-06-25T16:04:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MTYwMg==", "bodyText": "What will happen if the artifact status is \"remove\"? We have to check for that before retrieving the artifacts", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445671602", "createdAt": "2020-06-25T16:07:20Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3Mjg2Mg==", "bodyText": "Shall we add this details to the response? It is good to know which endpoints were not added.", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445672862", "createdAt": "2020-06-25T16:09:12Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzI1Nw==", "bodyText": "Better to have this detail in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445673257", "createdAt": "2020-06-25T16:09:44Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzUwNA==", "bodyText": "Better to have this detail in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445673504", "createdAt": "2020-06-25T16:10:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Local Entries\", localEntryArray);\n+                }\n+\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                    JSONArray sequencesArray = new JSONArray();\n+                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n+                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDA5Mg==", "bodyText": "we have to handle the errors too. If there was an error, need that details in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674092", "createdAt": "2020-06-25T16:10:59Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,24 +18,101 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+\n+    private ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;\n+        }\n+        String apiId = null;\n+        String label = null;\n+        try {\n+            apiId = apiMgtDAO.getGatewayAPIId(apiName,version,tenantDomain);\n+            label = apiMgtDAO.getGatewayAPILabel(apiId);\n+        } catch (APIManagementException e) {\n+            log.error(e);\n+        }\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n-        String definition;\n+        String definition = null;\n         JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n-            definition = gatewayAPIDTO.getApiDefinition();\n+            try {\n+                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                    JSONArray endPointArray = new JSONArray();\n+                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                            (gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Endpoints\", endPointArray);\n+                }\n+\n+                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                    JSONArray localEntryArray = new JSONArray();\n+                    LocalEntryServiceProxy localEntryServiceProxy = new\n+                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Local Entries\", localEntryArray);\n+                }\n+\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                    JSONArray sequencesArray = new JSONArray();\n+                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n+                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n+                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");\n+                        }\n+                    }\n+                    responseObj.put(\"Sequences\", sequencesArray);\n+                }\n+            } catch (EndpointAdminException e) {\n+                log.error(\"Error in fetching deployed Endpoints from Synapse Configuration.\" , e);\n+            } catch (AxisFault axisFault) {\n+                log.error(\"Error in fetching deployed artifacts from Synapse Configuration.\" , axisFault);\n+            }\n+\n             responseObj.put(\"Definition\", definition);\n             String responseStringObj = String.valueOf(responseObj);\n             return Response.ok().entity(responseStringObj).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDMxMA==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674310", "createdAt": "2020-06-25T16:11:19Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response endPointsGet(String apiName, String label, String apiId, Message\n         JSONObject responseObj = new JSONObject();\n         JSONArray endPointArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null) {\n+            if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null ) {\n+                EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n+                        (gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n-                    endPointArray.put(gatewayEndpoint.getContent());\n+                    try {\n+                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n+                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n+                        } else {\n+                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDQxMw==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674413", "createdAt": "2020-06-25T16:11:27Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java", "diffHunk": "@@ -39,8 +46,19 @@ public Response localEntryGet(String apiName, String label, String apiId, Messag\n         JSONArray localEntryArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n             if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n+                LocalEntryServiceProxy localEntryServiceProxy = new\n+                        LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n-                    localEntryArray.put(localEntry.getContent());\n+                    try {\n+                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n+                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n+                        } else {\n+                            log.error(localEntry.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDUzMQ==", "bodyText": "better to have this in the response", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674531", "createdAt": "2020-06-25T16:11:37Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "diffHunk": "@@ -38,9 +44,19 @@ public Response sequenceGet(String apiName, String label, String apiId, MessageC\n         JSONObject responseObj = new JSONObject();\n         JSONArray sequencesArray = new JSONArray();\n         if (gatewayAPIDTO != null) {\n-            if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n+            if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                SequenceAdminServiceProxy sequenceAdminServiceProxy =\n+                        new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n                 for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                    sequencesArray.put(sequence.getContent());\n+                    try {\n+                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n+                        } else {\n+                            log.error(sequence.getName() + \" was not deployed in the gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDg5Nw==", "bodyText": "add a meaningful tenant domain", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r445674897", "createdAt": "2020-06-25T16:12:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml", "diffHunk": "@@ -203,9 +203,9 @@ paths:\n       security:\n         - OAuth2Security:\n             - apim:api_publish\n-      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test\\\"\"\n       x-wso2-request: |\n-        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1562425a0031c8cdf8d2534f344db9910a9d8db"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bef8ac27b023cef0271216e1b2942bc739efacc", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2bef8ac27b023cef0271216e1b2942bc739efacc", "committedDate": "2020-06-25T16:53:11Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0712a208818f9e91dae73f39aeda9b50ba9a5ac", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a0712a208818f9e91dae73f39aeda9b50ba9a5ac", "committedDate": "2020-06-25T17:43:59Z", "message": "edit individual synapse artifacts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c1b54ed87ee44cc8828ac3065a843208a9967e", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/79c1b54ed87ee44cc8828ac3065a843208a9967e", "committedDate": "2020-06-25T20:18:22Z", "message": "add webservice for RESTAPI calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c765d7416c9e1d0f09f8fc67b744a699f2b1e9f", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7c765d7416c9e1d0f09f8fc67b744a699f2b1e9f", "committedDate": "2020-06-26T10:07:06Z", "message": "refractor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24dfd6a57a7defae99737ab424e11582068aeac4", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/24dfd6a57a7defae99737ab424e11582068aeac4", "committedDate": "2020-07-07T04:11:35Z", "message": "Refractor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4bfdd1bb0369edbe724b7e4d0c34f18b47807dd", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/b4bfdd1bb0369edbe724b7e4d0c34f18b47807dd", "committedDate": "2020-07-07T06:58:54Z", "message": "Adding HTTP request for gateway"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDUyMTMz", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#pullrequestreview-444052133", "createdAt": "2020-07-07T16:21:34Z", "commit": {"oid": "b4bfdd1bb0369edbe724b7e4d0c34f18b47807dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/926eee0a013c9b54f892e107fe21bef97801eb3d", "committedDate": "2020-07-10T11:07:47Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTc1OTE2", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#pullrequestreview-446975916", "createdAt": "2020-07-13T04:36:46Z", "commit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODAyNTg5", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#pullrequestreview-556802589", "createdAt": "2020-12-22T03:53:30Z", "commit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1ODoyN1rOIJtjsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDowNTowNVrOIJtplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDUxNQ==", "bodyText": "formatting issues", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547054515", "createdAt": "2020-12-22T03:58:27Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/ApiArtifactApiServiceImpl.java", "diffHunk": "@@ -18,25 +18,112 @@\n \n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n+import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.ApiArtifactApiService;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.endpoint.EndpointAdminException;\n+\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class ApiArtifactApiServiceImpl implements ApiArtifactApiService {\n \n-    public Response apiArtifactGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    private static final Log log = LogFactory.getLog(ApiArtifactApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n+\n+    @Override\n+    public Response apiArtifactGet(String apiName, String version , String tenantDomain,\n+            MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NTgxMA==", "bodyText": "extra line spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547055810", "createdAt": "2020-12-22T04:04:14Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/gen/java/org/wso2/carbon/apimgt/internal/service/SynapseAttributesApi.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.wso2.carbon.apimgt.internal.service;\n+\n+import org.wso2.carbon.apimgt.internal.service.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SynapseAttributesDTO;\n+import org.wso2.carbon.apimgt.internal.service.SynapseAttributesApiService;\n+import org.wso2.carbon.apimgt.internal.service.impl.SynapseAttributesApiServiceImpl;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import javax.ws.rs.*;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.inject.Inject;\n+\n+import io.swagger.annotations.*;\n+import java.io.InputStream;\n+\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+\n+import java.util.Map;\n+import java.util.List;\n+import javax.validation.constraints.*;\n+@Path(\"/synapse-attributes\")\n+\n+@Api(description = \"the synapse-attributes API\")\n+\n+@Produces({ \"application/json\" })\n+\n+\n+public class SynapseAttributesApi  {\n+\n+  @Context MessageContext securityContext;\n+\n+SynapseAttributesApiService delegate = new SynapseAttributesApiServiceImpl();\n+\n+\n+    @GET\n+    \n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjAyMA==", "bodyText": "Extra added line spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8784#discussion_r547056020", "createdAt": "2020-12-22T04:05:05Z", "author": {"login": "chashikajw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -246,9 +246,70 @@ public boolean isAPIArtifactExists(String APIId, String gatewayLabel) throws API\n         return false;\n     }\n \n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926eee0a013c9b54f892e107fe21bef97801eb3d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}