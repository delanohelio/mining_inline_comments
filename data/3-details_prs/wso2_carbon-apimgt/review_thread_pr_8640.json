{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTg1MzQz", "number": 8640, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1MFrOELO3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxOToxOVrOELO4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEzMjY1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/SettingsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1MVrOGsuknA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNTozMTowOVrOGtJS5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MzU2NA==", "bodyText": "Shall we catch the specific Exception here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8640#discussion_r449553564", "createdAt": "2020-07-03T12:17:51Z", "author": {"login": "vithu30"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/SettingsApiServiceImpl.java", "diffHunk": "@@ -92,4 +93,23 @@ public Response settingsScopesScopeGet(String username, String scopeName, Messag\n         }\n         return Response.ok().entity(scopeSettingsDTO).build();\n     }\n+\n+    /**\n+     * Get all scopes and respective roles\n+     *\n+     * @return Role-Scope list\n+     */\n+    @Override\n+    public Response settingsScopesGet(MessageContext messageContext) {\n+        try {\n+            Map<String, String> roleScopeMapping = APIUtil.getRESTAPIScopesForTenant(MultitenantUtils\n+                    .getTenantDomain(RestApiUtil.getLoggedInUsername()));\n+            ScopeListDTO scopeListDTO = SettingsMappingUtil.fromScopeListToScopeListDTO(roleScopeMapping);\n+            return Response.ok().entity(scopeListDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfef475ff8177fa377f2d5edcc6e65f8294785f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5MTM5Nw==", "bodyText": "PR has been reverted", "url": "https://github.com/wso2/carbon-apimgt/pull/8640#discussion_r449991397", "createdAt": "2020-07-06T05:31:09Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/SettingsApiServiceImpl.java", "diffHunk": "@@ -92,4 +93,23 @@ public Response settingsScopesScopeGet(String username, String scopeName, Messag\n         }\n         return Response.ok().entity(scopeSettingsDTO).build();\n     }\n+\n+    /**\n+     * Get all scopes and respective roles\n+     *\n+     * @return Role-Scope list\n+     */\n+    @Override\n+    public Response settingsScopesGet(MessageContext messageContext) {\n+        try {\n+            Map<String, String> roleScopeMapping = APIUtil.getRESTAPIScopesForTenant(MultitenantUtils\n+                    .getTenantDomain(RestApiUtil.getLoggedInUsername()));\n+            ScopeListDTO scopeListDTO = SettingsMappingUtil.fromScopeListToScopeListDTO(roleScopeMapping);\n+            return Response.ok().entity(scopeListDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MzU2NA=="}, "originalCommit": {"oid": "ddfef475ff8177fa377f2d5edcc6e65f8294785f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEzNjQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/mappings/SettingsMappingUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxOToxOVrOGsum2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNTozMToxNFrOGtJS_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NDEzNw==", "bodyText": "Shall we format this line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8640#discussion_r449554137", "createdAt": "2020-07-03T12:19:19Z", "author": {"login": "vithu30"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/mappings/SettingsMappingUtil.java", "diffHunk": "@@ -136,4 +137,33 @@ private static SettingsKeyManagerConfigurationDTO fromKeyManagerConfigurationToS\n         }\n         return authorizedScopes;\n     }\n+\n+    /**\n+     * Convert list of API Scope to ScopeListDTO\n+     *\n+     * @param roleScopeMapping Map of a Role Scope  Mapping\n+     * @return ScopeListDTO list containing role scope mapping data\n+     */\n+    public static ScopeListDTO fromScopeListToScopeListDTO(Map<String, String>  roleScopeMapping) {\n+        ScopeListDTO scopeListDTO = new ScopeListDTO();\n+        scopeListDTO.setList(fromRoleScopeMapToRoleScopeDTOList(roleScopeMapping));\n+        return scopeListDTO;\n+    }\n+\n+    /**\n+     * Converts api role-scope mapping to RoleScopeDTO List.\n+     *\n+     * @param roleScopeMapping Map of a Role Scope  Mapping\n+     * @return RoleScopeDTO list\n+     */\n+    private static List<ScopeDTO>  fromRoleScopeMapToRoleScopeDTOList(Map<String, String>  roleScopeMapping) {\n+        List<ScopeDTO> scopeDTOs = new ArrayList<>(roleScopeMapping.size());\n+        for (Map.Entry<String, String>  mapping : roleScopeMapping.entrySet()) {\n+            ScopeDTO roleScopeDTO = new ScopeDTO();\n+                roleScopeDTO.setScope(mapping.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfef475ff8177fa377f2d5edcc6e65f8294785f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5MTQyMw==", "bodyText": "PR has been reverted", "url": "https://github.com/wso2/carbon-apimgt/pull/8640#discussion_r449991423", "createdAt": "2020-07-06T05:31:14Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/mappings/SettingsMappingUtil.java", "diffHunk": "@@ -136,4 +137,33 @@ private static SettingsKeyManagerConfigurationDTO fromKeyManagerConfigurationToS\n         }\n         return authorizedScopes;\n     }\n+\n+    /**\n+     * Convert list of API Scope to ScopeListDTO\n+     *\n+     * @param roleScopeMapping Map of a Role Scope  Mapping\n+     * @return ScopeListDTO list containing role scope mapping data\n+     */\n+    public static ScopeListDTO fromScopeListToScopeListDTO(Map<String, String>  roleScopeMapping) {\n+        ScopeListDTO scopeListDTO = new ScopeListDTO();\n+        scopeListDTO.setList(fromRoleScopeMapToRoleScopeDTOList(roleScopeMapping));\n+        return scopeListDTO;\n+    }\n+\n+    /**\n+     * Converts api role-scope mapping to RoleScopeDTO List.\n+     *\n+     * @param roleScopeMapping Map of a Role Scope  Mapping\n+     * @return RoleScopeDTO list\n+     */\n+    private static List<ScopeDTO>  fromRoleScopeMapToRoleScopeDTOList(Map<String, String>  roleScopeMapping) {\n+        List<ScopeDTO> scopeDTOs = new ArrayList<>(roleScopeMapping.size());\n+        for (Map.Entry<String, String>  mapping : roleScopeMapping.entrySet()) {\n+            ScopeDTO roleScopeDTO = new ScopeDTO();\n+                roleScopeDTO.setScope(mapping.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NDEzNw=="}, "originalCommit": {"oid": "ddfef475ff8177fa377f2d5edcc6e65f8294785f"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3325, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}