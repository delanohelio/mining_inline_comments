{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODc3MTky", "number": 8717, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOToxMDo0OFrOEEmr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDo1NFrOEEnsUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjYzNTc3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/DeploymentEnvironments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOToxMDo0OFrOGiVB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozNDoyNFrOGiV0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0OTMyOA==", "bodyText": "Add the license header.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438649328", "createdAt": "2020-06-11T09:10:48Z", "author": {"login": "pubudu538"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/DeploymentEnvironments.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6282d453a2e11a7b28c49312364dc6c48fcc991"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjI3NQ==", "bodyText": "added", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438662275", "createdAt": "2020-06-11T09:34:24Z", "author": {"login": "Shehanir"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/DeploymentEnvironments.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0OTMyOA=="}, "originalCommit": {"oid": "d6282d453a2e11a7b28c49312364dc6c48fcc991"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc3MjA3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1MjoyM1rOGiWagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1MjoyM1rOGiWagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjAwMQ==", "bodyText": "This has to be otherway \"\".equals(oauthSecurityName) to avoid NPE", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438672001", "createdAt": "2020-06-11T09:52:23Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.containermgt;\n+\n+import io.swagger.models.SwaggerVersion;\n+import io.swagger.parser.OpenAPIParser;\n+import io.swagger.v3.core.util.Json;\n+import io.swagger.v3.oas.models.Components;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.security.*;\n+import io.swagger.v3.parser.core.models.SwaggerParseResult;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIDefinition;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.definitions.OAS3Parser;\n+import org.wso2.carbon.apimgt.impl.definitions.OASParserUtil;\n+\n+import java.util.*;\n+\n+/**\n+ * This class extends the OAS3Parser class in order to override its method\n+ * \"getOASDefinitionForPrivateJetMode\".\n+ */\n+public class SwaggerCreator {\n+\n+    private static final Log log = LogFactory.getLog(SwaggerCreator.class);\n+    private static final String OPENAPI_SECURITY_SCHEMA_KEY = \"default\";\n+    private boolean securityOauth2 = false;\n+    private boolean securityBasicAuth = false;\n+    private String basicSecurityName;\n+    private String jwtSecurityName;\n+    private String oauthSecurityName;\n+\n+    public SwaggerCreator(String basicSecurityName, String jwtSecurityName, String oauthSecurityName) {\n+\n+        this.basicSecurityName = basicSecurityName;\n+        this.jwtSecurityName = jwtSecurityName;\n+        this.oauthSecurityName = oauthSecurityName;\n+    }\n+\n+    public boolean isSecurityOauth2() {\n+        return securityOauth2;\n+    }\n+\n+    public boolean isSecurityBasicAuth() {\n+        return securityBasicAuth;\n+    }\n+\n+    /**\n+     * This method returns the swagger definition of an api\n+     * which suits for k8s_apim_operator\n+     *\n+     * @param api               API\n+     * @param oasDefinition     Open API definition\n+     * @return OAS definition\n+     * @throws APIManagementException throws if an error occurred\n+     * @throws ParseException         throws if the oasDefinition is not in json format\n+     */\n+\n+    public String getOASDefinitionForPrivateJetMode(API api, String oasDefinition)\n+            throws APIManagementException, ParseException {\n+\n+        APIDefinition oasParser = OASParserUtil.getOASParser(oasDefinition);\n+        String apiDefinition = oasParser.getOASDefinitionForPublisher(api, oasDefinition);\n+\n+        OASParserUtil.SwaggerVersion swaggerVersion = OASParserUtil.getSwaggerVersion(apiDefinition);\n+        if (swaggerVersion == OASParserUtil.SwaggerVersion.SWAGGER) {\n+            //parsing swagger 2.0 to openAPI 3.0.1\n+            OpenAPIParser openAPIParser = new OpenAPIParser();\n+            SwaggerParseResult swaggerParseResult = openAPIParser.readContents(apiDefinition, null, null);\n+            if (CollectionUtils.isNotEmpty(swaggerParseResult.getMessages())) {\n+                log.debug(\"Errors found when parsing OAS definition\");\n+            }\n+            OpenAPI openAPI = swaggerParseResult.getOpenAPI();\n+            apiDefinition = Json.pretty(openAPI);\n+        }\n+\n+        //get Json object from parsed openAPI definition\n+        JSONParser jsonParser = new JSONParser();\n+        JSONObject apiDefinitionJsonObject = (JSONObject) jsonParser.parse(apiDefinition);\n+\n+        /**\n+         * Removing the \"security\" key from the JSONObject\n+         */\n+        apiDefinitionJsonObject.remove(ContainerBasedConstants.SECURITY);\n+        ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.COMPONENTS))\n+                .get(ContainerBasedConstants.SECURITY_SCHEMES)).remove(ContainerBasedConstants.DEFAULT);\n+        Set<String> paths = ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).keySet();\n+        Iterator iterator = paths.iterator();\n+\n+        /**\n+         * Removing the \"security\" attribute from each RESTAPI verb of each path in the swagger\n+         */\n+        while (iterator.hasNext()) {\n+            String path = (String) iterator.next();\n+            Set verbs = ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS))\n+                    .get(path)).keySet();\n+            Iterator verbIterator = verbs.iterator();\n+            while (verbIterator.hasNext()) {\n+                String verb = (String) verbIterator.next();\n+                ((JSONObject) ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).\n+                        get(path)).get(verb)).remove(ContainerBasedConstants.SECURITY);\n+            }\n+        }\n+\n+        String securityType = api.getApiSecurity()\n+                .replace(ContainerBasedConstants.OAUTH_BASICAUTH_APIKEY_MANDATORY, \"\");\n+        Boolean securityTypeOauth2 = isAPISecurityTypeOauth2(securityType);\n+        Boolean securityTypeBasicAuth = isAPISecurityBasicAuth(securityType);\n+\n+        if (securityTypeBasicAuth && !securityTypeOauth2 && !basicSecurityName.equals(\"\")) {\n+\n+            SecurityRequirement basicOauthSecurityReq = referBasicAuthInSwagger(basicSecurityName);\n+            List<SecurityRequirement> basicAuth = new ArrayList<SecurityRequirement>();\n+            basicAuth.add(basicOauthSecurityReq);\n+            apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, basicAuth);\n+        } else if (securityTypeOauth2 && !securityTypeBasicAuth) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {\n+\n+                SecurityRequirement oauth2SecurityReq = referOauth2InSwagger(oauthSecurityName, jwtSecurityName);\n+                List<SecurityRequirement> oauth2 = new ArrayList<SecurityRequirement>();\n+                oauth2.add(oauth2SecurityReq);\n+                apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, oauth2);\n+            }\n+        } else if (securityTypeBasicAuth && securityTypeOauth2) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !basicSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc3OTI3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDo0M1rOGiWfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDo0M1rOGiWfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MzI1NQ==", "bodyText": "Possible NPE. equal has be otherway.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438673255", "createdAt": "2020-06-11T09:54:43Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.containermgt;\n+\n+import io.swagger.models.SwaggerVersion;\n+import io.swagger.parser.OpenAPIParser;\n+import io.swagger.v3.core.util.Json;\n+import io.swagger.v3.oas.models.Components;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.security.*;\n+import io.swagger.v3.parser.core.models.SwaggerParseResult;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIDefinition;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.definitions.OAS3Parser;\n+import org.wso2.carbon.apimgt.impl.definitions.OASParserUtil;\n+\n+import java.util.*;\n+\n+/**\n+ * This class extends the OAS3Parser class in order to override its method\n+ * \"getOASDefinitionForPrivateJetMode\".\n+ */\n+public class SwaggerCreator {\n+\n+    private static final Log log = LogFactory.getLog(SwaggerCreator.class);\n+    private static final String OPENAPI_SECURITY_SCHEMA_KEY = \"default\";\n+    private boolean securityOauth2 = false;\n+    private boolean securityBasicAuth = false;\n+    private String basicSecurityName;\n+    private String jwtSecurityName;\n+    private String oauthSecurityName;\n+\n+    public SwaggerCreator(String basicSecurityName, String jwtSecurityName, String oauthSecurityName) {\n+\n+        this.basicSecurityName = basicSecurityName;\n+        this.jwtSecurityName = jwtSecurityName;\n+        this.oauthSecurityName = oauthSecurityName;\n+    }\n+\n+    public boolean isSecurityOauth2() {\n+        return securityOauth2;\n+    }\n+\n+    public boolean isSecurityBasicAuth() {\n+        return securityBasicAuth;\n+    }\n+\n+    /**\n+     * This method returns the swagger definition of an api\n+     * which suits for k8s_apim_operator\n+     *\n+     * @param api               API\n+     * @param oasDefinition     Open API definition\n+     * @return OAS definition\n+     * @throws APIManagementException throws if an error occurred\n+     * @throws ParseException         throws if the oasDefinition is not in json format\n+     */\n+\n+    public String getOASDefinitionForPrivateJetMode(API api, String oasDefinition)\n+            throws APIManagementException, ParseException {\n+\n+        APIDefinition oasParser = OASParserUtil.getOASParser(oasDefinition);\n+        String apiDefinition = oasParser.getOASDefinitionForPublisher(api, oasDefinition);\n+\n+        OASParserUtil.SwaggerVersion swaggerVersion = OASParserUtil.getSwaggerVersion(apiDefinition);\n+        if (swaggerVersion == OASParserUtil.SwaggerVersion.SWAGGER) {\n+            //parsing swagger 2.0 to openAPI 3.0.1\n+            OpenAPIParser openAPIParser = new OpenAPIParser();\n+            SwaggerParseResult swaggerParseResult = openAPIParser.readContents(apiDefinition, null, null);\n+            if (CollectionUtils.isNotEmpty(swaggerParseResult.getMessages())) {\n+                log.debug(\"Errors found when parsing OAS definition\");\n+            }\n+            OpenAPI openAPI = swaggerParseResult.getOpenAPI();\n+            apiDefinition = Json.pretty(openAPI);\n+        }\n+\n+        //get Json object from parsed openAPI definition\n+        JSONParser jsonParser = new JSONParser();\n+        JSONObject apiDefinitionJsonObject = (JSONObject) jsonParser.parse(apiDefinition);\n+\n+        /**\n+         * Removing the \"security\" key from the JSONObject\n+         */\n+        apiDefinitionJsonObject.remove(ContainerBasedConstants.SECURITY);\n+        ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.COMPONENTS))\n+                .get(ContainerBasedConstants.SECURITY_SCHEMES)).remove(ContainerBasedConstants.DEFAULT);\n+        Set<String> paths = ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).keySet();\n+        Iterator iterator = paths.iterator();\n+\n+        /**\n+         * Removing the \"security\" attribute from each RESTAPI verb of each path in the swagger\n+         */\n+        while (iterator.hasNext()) {\n+            String path = (String) iterator.next();\n+            Set verbs = ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS))\n+                    .get(path)).keySet();\n+            Iterator verbIterator = verbs.iterator();\n+            while (verbIterator.hasNext()) {\n+                String verb = (String) verbIterator.next();\n+                ((JSONObject) ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).\n+                        get(path)).get(verb)).remove(ContainerBasedConstants.SECURITY);\n+            }\n+        }\n+\n+        String securityType = api.getApiSecurity()\n+                .replace(ContainerBasedConstants.OAUTH_BASICAUTH_APIKEY_MANDATORY, \"\");\n+        Boolean securityTypeOauth2 = isAPISecurityTypeOauth2(securityType);\n+        Boolean securityTypeBasicAuth = isAPISecurityBasicAuth(securityType);\n+\n+        if (securityTypeBasicAuth && !securityTypeOauth2 && !basicSecurityName.equals(\"\")) {\n+\n+            SecurityRequirement basicOauthSecurityReq = referBasicAuthInSwagger(basicSecurityName);\n+            List<SecurityRequirement> basicAuth = new ArrayList<SecurityRequirement>();\n+            basicAuth.add(basicOauthSecurityReq);\n+            apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, basicAuth);\n+        } else if (securityTypeOauth2 && !securityTypeBasicAuth) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc4ODg0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/APICustomResourceDefinitionSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo0OFrOGiWl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo0OFrOGiWl2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDkwNQ==", "bodyText": "Why we have commented these. If not needed,  let's remove these", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438674905", "createdAt": "2020-06-11T09:57:48Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/APICustomResourceDefinitionSpec.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.containermgt.k8scrd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(using = JsonDeserializer.None.class)\n+\n+public class APICustomResourceDefinitionSpec implements KubernetesResource {\n+\n+    private String mode;\n+    private String updateTimeStamp;\n+    private int replicas;\n+    private Definition definition;\n+    private boolean override;\n+//    private String version;\n+\n+    public String getUpdateTimeStamp() {\n+        return updateTimeStamp;\n+    }\n+\n+    public void setUpdateTimeStamp(String updateTimeStamp) {\n+        this.updateTimeStamp = updateTimeStamp;\n+    }\n+\n+    public boolean isOverride() {\n+        return override;\n+    }\n+\n+    public void setOverride(boolean override) {\n+        this.override = override;\n+    }\n+\n+    public Definition getDefinition() {\n+        return definition;\n+    }\n+\n+    public void setDefinition(Definition definition) {\n+        this.definition = definition;\n+    }\n+\n+    public int getReplicas() {\n+        return replicas;\n+    }\n+\n+    public void setReplicas(int replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    public String getMode() {\n+        return mode;\n+    }\n+\n+    public void setMode(String mode) {\n+        this.mode = mode;\n+    }\n+\n+//    public String getVersion() { return version; }\n+//\n+//    public void setVersion(String version) { this.version = version; }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc5MTM5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/DoneableAPICustomResourceDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNFrOGiWnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNFrOGiWnbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NTMxMQ==", "bodyText": "Add a new line. There are multiple places. Please check.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438675311", "createdAt": "2020-06-11T09:58:34Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/DoneableAPICustomResourceDefinition.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.containermgt.k8scrd;\n+\n+import io.fabric8.kubernetes.api.builder.Function;\n+import io.fabric8.kubernetes.client.CustomResourceDoneable;\n+\n+public class DoneableAPICustomResourceDefinition extends CustomResourceDoneable<APICustomResourceDefinition> {\n+\n+    public DoneableAPICustomResourceDefinition(APICustomResourceDefinition resource, Function function) {\n+        super(resource, function);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc5OTQzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDozNVrOGiWsJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDozNVrOGiWsJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjUxOA==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438676518", "createdAt": "2020-06-11T10:00:35Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java", "diffHunk": "@@ -1064,6 +1094,18 @@ public static APIDTO fromAPItoDTO(API model) throws APIManagementException {\n         }\n         dto.setCategories(categoryNameList);\n         dto.setKeyManagers(model.getKeyManagers());\n+\n+        if(model.getDeploymentEnvironments() != null && !model.getDeploymentEnvironments().isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjgwMDgzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/DeploymentsMappingUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDo1NFrOGiWs7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDo1NFrOGiWs7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjcxOQ==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438676719", "createdAt": "2020-06-11T10:00:54Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/DeploymentsMappingUtil.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.publisher.v1.utils.mappings;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIMRegistryService;\n+import org.wso2.carbon.apimgt.impl.APIMRegistryServiceImpl;\n+import org.wso2.carbon.apimgt.impl.containermgt.ContainerBasedConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentClusterInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentListDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentsDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.apimgt.impl.utils.APIUtil.handleException;\n+\n+public class DeploymentsMappingUtil {\n+\n+    private static final Log log = LogFactory.getLog(DeploymentsMappingUtil.class);\n+    public static final String SUPER_TENANT_DOMAIN_NAME = \"carbon.super\";\n+\n+    /**\n+     * This method feeds data into DeploymentsDTO list from tenant-conf.json/ api-manager.xml\n+     *\n+     * @return DeploymentsDTO list. List of Deployments\n+     * @throws APIManagementException\n+     */\n+    public DeploymentListDTO fromTenantConftoDTO() throws APIManagementException {\n+\n+        DeploymentListDTO deploymentListDTO = new DeploymentListDTO();\n+        List<DeploymentsDTO> deploymentsList = new ArrayList<DeploymentsDTO>();\n+\n+        //Get cloud environments from tenant-conf.json file\n+        //Get tenant domain to access tenant conf\n+        APIMRegistryService apimRegistryService = new APIMRegistryServiceImpl();\n+        String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+        //read tenant-conf.json and get details\n+        if (SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)){\n+            //get details from deployment.toml\n+            JSONArray containerMgtInfo = APIUtil.getClusterInfoFromAPIMConfig();\n+            if(!containerMgtInfo.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3251, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}