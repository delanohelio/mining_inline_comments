{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTUyNTQz", "number": 8509, "title": "Resolving URL and Remote references.", "bodyText": "Purpose.\n\nWhen creating an API resource containing External file/ URL references , they do not get resolved.\nResolves wso2/product-apim#4464\n\nGoals\n\nResolve remote references to files.\nSupport resolving URL references\n\nDescription:\n\nIf there are external ref files for a given open API definition, those files have to be uploaded along with the master definition as an archive.\nThe extracted archive is processed and the open API definition is flattened by resolving the external references via the corresponding version of the OpenAPI Parsers.\nWe are maintaining a naming convention for the master swagger file where it should contains the name of swagger.yaml or swagger.json", "createdAt": "2020-05-14T17:44:27Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8509", "merged": true, "mergeCommit": {"oid": "3ec2b3f532f20160a917f37a0c400a24ae70bc26"}, "closed": true, "closedAt": "2020-06-03T07:23:09Z", "author": {"login": "Sarangan0219"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchQ7nlgH2gAyNDE4MTUyNTQzOmY0YzVhZGM5MGJiZmM1MGZiMzlhMzI2MDY0NDQxZTc1NTMyMmRiNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnjt3NAFqTQyMzI2MDUxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f4c5adc90bbfc50fb39a326064441e755322db61", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f4c5adc90bbfc50fb39a326064441e755322db61", "committedDate": "2020-05-14T17:29:11Z", "message": "resolve remote references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2e8af16e325e84d8647045ffa0bfb609a0dd29a", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f2e8af16e325e84d8647045ffa0bfb609a0dd29a", "committedDate": "2020-05-14T17:29:57Z", "message": "add archive prompting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/bc1d27edb426a7c6d0ba680a953203333264690c", "committedDate": "2020-05-14T17:32:38Z", "message": "remove newline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDUzMzI4", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412053328", "createdAt": "2020-05-14T17:56:48Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzo1Njo0OFrOGVn-1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzo1Njo0OFrOGVn-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyODM0Mw==", "bodyText": "Shall we omit '/' from the file name?", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425328343", "createdAt": "2020-05-14T17:56:48Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -178,6 +178,14 @@\n     public static final String GOVERNANCE_COMPONENT_REGISTRY_LOCATION = \"/repository/components/org.wso2.carbon\" +\n             \".governance\";\n \n+    // registry location for OpenAPI files\n+    public static final String OPENAPI_ARCHIVES_TEMP_FOLDER = \"OPENAPI-archives\";\n+    public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n+    public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n+    public static final String CHARSET = \"UTF-8\";\n+    public static final String OPENAPI_MASTER_JSON = \"/swagger.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg0MTQ3", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412084147", "createdAt": "2020-05-14T18:38:55Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozODo1NVrOGVpcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODozODo1NVrOGVpcBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MjE5OQ==", "bodyText": "Line width has to be 120", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425352199", "createdAt": "2020-05-14T18:38:55Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg2MzU5", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412086359", "createdAt": "2020-05-14T18:41:52Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MTo1MlrOGVpi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MTo1MlrOGVpi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzk2Mg==", "bodyText": "Add error message into exeception", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425353962", "createdAt": "2020-05-14T18:41:52Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg3NjU2", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412087656", "createdAt": "2020-05-14T18:43:38Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MzozOFrOGVpnCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0MzozOFrOGVpnCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTAxNg==", "bodyText": "variable names should be in camelCase ie: archive_directory, master_swagger", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425355016", "createdAt": "2020-05-14T18:43:38Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg5ODAx", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412089801", "createdAt": "2020-05-14T18:46:38Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NjozOFrOGVptpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NjozOFrOGVptpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NjcwOA==", "bodyText": "Shouldn't we break the loop at this point?", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425356708", "createdAt": "2020-05-14T18:46:38Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDkwMTEy", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412090112", "createdAt": "2020-05-14T18:47:05Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NzowNVrOGVpuow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NzowNVrOGVpuow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Njk2Mw==", "bodyText": "Exception message", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425356963", "createdAt": "2020-05-14T18:47:05Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTAzODEx", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412103811", "createdAt": "2020-05-14T19:05:59Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTowNTo1OVrOGVqYrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTowNTo1OVrOGVqYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NzcyNg==", "bodyText": "Catch IOException at relevant places and throw APIManagementException with corresponding error message", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425367726", "createdAt": "2020-05-14T19:05:59Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTMwNTE2", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412130516", "createdAt": "2020-05-14T19:45:30Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NTozMVrOGVropg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NTozMVrOGVropg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODE5OA==", "bodyText": "Shall we use IOUtils to handle file reads?", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425388198", "createdAt": "2020-05-14T19:45:31Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTMxOTA2", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412131906", "createdAt": "2020-05-14T19:47:33Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NzozM1rOGVrs0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NzozM1rOGVrs0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTI2NA==", "bodyText": "Const.equals(variable) -> SwaggerVersion.OPEN_API.equals(version)", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425389264", "createdAt": "2020-05-14T19:47:33Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();\n+        String content = new String(data, APIConstants.CHARSET);\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (version.equals(SwaggerVersion.OPEN_API)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTMyMDM0", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412132034", "createdAt": "2020-05-14T19:47:45Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0Nzo0NVrOGVrtPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0Nzo0NVrOGVrtPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTM3Mw==", "bodyText": "Const.equals(variable)", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425389373", "createdAt": "2020-05-14T19:47:45Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();\n+        String content = new String(data, APIConstants.CHARSET);\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (version.equals(SwaggerVersion.OPEN_API)) {\n+            String filePath = master_swagger.getAbsolutePath();\n+            OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n+            ParseOptions options = new ParseOptions();\n+            options.setResolve(true);\n+            OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n+            openAPIContent = SerializerUtils.toYamlString(openAPI);\n+        } else if (version.equals(SwaggerVersion.SWAGGER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzM5NTc5", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412339579", "createdAt": "2020-05-15T04:29:32Z", "commit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDoyOTozMlrOGV2G0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDoyOTozMlrOGV2G0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1OTc2MQ==", "bodyText": "Its not a good practice to use * import. Shall we import by class?", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425559761", "createdAt": "2020-05-15T04:29:32Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -82,25 +87,17 @@\n import org.wso2.carbon.apimgt.api.model.Scope;\n import org.wso2.carbon.apimgt.api.model.URITemplate;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIFileUtil;\n import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.registry.api.Registry;\n import org.wso2.carbon.registry.api.RegistryException;\n import org.wso2.carbon.registry.api.Resource;\n import org.wso2.carbon.registry.core.session.UserRegistry;\n \n-import java.io.IOException;\n+import java.io.*;\n import java.net.URL;\n import java.nio.charset.Charset;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "committedDate": "2020-05-15T05:03:18Z", "message": "edit requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d8d2129d1d2a4806b067848a2811e868233de2", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/94d8d2129d1d2a4806b067848a2811e868233de2", "committedDate": "2020-05-15T05:19:45Z", "message": "Add specific imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/820c7527e677d3fa54fab4de58c6b346e224f69e", "committedDate": "2020-05-15T06:49:00Z", "message": "add error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDg4MjY0", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412488264", "createdAt": "2020-05-15T09:25:50Z", "commit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNTo1MVrOGV9WZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNTo1MVrOGV9WZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODQzNg==", "bodyText": "probably you can use existing Constance from the Charset class.", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425678436", "createdAt": "2020-05-15T09:25:51Z", "author": {"login": "ruks"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -178,6 +178,14 @@\n     public static final String GOVERNANCE_COMPONENT_REGISTRY_LOCATION = \"/repository/components/org.wso2.carbon\" +\n             \".governance\";\n \n+    // registry location for OpenAPI files\n+    public static final String OPENAPI_ARCHIVES_TEMP_FOLDER = \"OPENAPI-archives\";\n+    public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n+    public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n+    public static final String CHARSET = \"UTF-8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDg4Njky", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412488692", "createdAt": "2020-05-15T09:26:25Z", "commit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNjoyNVrOGV9Xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOToyNjoyNVrOGV9Xtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODc3NQ==", "bodyText": "you can exit the loop once you identify the archiveDirectory.", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425678775", "createdAt": "2020-05-15T09:26:25Z", "author": {"login": "ruks"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archiveDirectory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archiveDirectory = file.getAbsoluteFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTE0MzIw", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-412514320", "createdAt": "2020-05-15T10:03:58Z", "commit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowMzo1OFrOGV-l_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowOTowOVrOGV-wEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5ODgxMg==", "bodyText": "can we define another method named \"validateAPIDefinitionByPath\" on respective OAS parsers? Then you can call it from here.\nif so you can simply return openAPIV3Parser.validateAPIDefinitionByPath(path, returnJsonContent) here.\nin respective parsers, you have to implement validateAPIDefinitionByPath function with following specific logic to parser the file path. In there you can set the correct OAS model(OpenAPI or Swagger) to the APIDefinitionValidationResponse.\nWith that simply you can reduce the unnecessary content parsing in multiple places.", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425698812", "createdAt": "2020-05-15T10:03:58Z", "author": {"login": "ruks"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archiveDirectory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archiveDirectory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archiveDirectory == null) {\n+            throw new APIManagementException(\"Could not find an archive in the given ZIP file.\");\n+        }\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            throw new APIManagementException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n+        }\n+        String content;\n+        try {\n+            InputStream masterInputStream = new FileInputStream(masterSwagger);\n+            content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n+        } catch (IOException e) {\n+            throw new APIManagementException(\"Error reading master swagger file\");\n+        }\n+        String openAPIContent = \"\";\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n+            OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n+            ParseOptions options = new ParseOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTM5NA==", "bodyText": "you can simply list only the required file.\nex:\nFilenameFilter filter = (dir, name) -> name.equalsIgnoreCase(\"swagger.json\") || \nname.equalsIgnoreCase(\"swagger.yaml\")\nFile f = new File(path);\nf.list(filter); // should have yaml to json file.", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425701394", "createdAt": "2020-05-15T10:09:09Z", "author": {"login": "ruks"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9ded714b1b9db9c1e33fa3fef5239858920580f9", "committedDate": "2020-05-17T10:34:33Z", "message": "handle exceptions and add method logic for finding master swagger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2faddad17acc148a83e2fef262d10561c73b98ad", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2faddad17acc148a83e2fef262d10561c73b98ad", "committedDate": "2020-05-17T10:37:41Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c1f91c03cb4cf11ea50ec1f3629a0689ef5131", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/73c1f91c03cb4cf11ea50ec1f3629a0689ef5131", "committedDate": "2020-05-17T10:39:17Z", "message": "Refine imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a160b3a81eab5c23c8384ff4e6b320c91c58be2", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7a160b3a81eab5c23c8384ff4e6b320c91c58be2", "committedDate": "2020-05-24T05:59:25Z", "message": "remove nested file searching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473ad7eae45b815473df06eaa24b6000121c8857", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/473ad7eae45b815473df06eaa24b6000121c8857", "committedDate": "2020-05-24T06:05:40Z", "message": "Merge remote-tracking branch 'upstream/master' into remoteRef"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aae78f41ddbaeb34046aabe5e439420303267331", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/aae78f41ddbaeb34046aabe5e439420303267331", "committedDate": "2020-05-24T06:17:40Z", "message": "resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTUxODc4", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-420151878", "createdAt": "2020-05-28T14:15:48Z", "commit": {"oid": "aae78f41ddbaeb34046aabe5e439420303267331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjYwNTE0", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#pullrequestreview-423260514", "createdAt": "2020-06-03T06:45:54Z", "commit": {"oid": "aae78f41ddbaeb34046aabe5e439420303267331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2742, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}