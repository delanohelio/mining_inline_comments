{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjAwNDYy", "number": 8563, "title": "Support for In Memory Subscription validation", "bodyText": "This PR provides the support for In Memory Subscription Validation in the gateway.\nNew REST APIs are introduced to load meta data from the db.\nEx:\n/apis\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/apis' -kv -header 'X-WSO2-Tenant: abc.com'\n{\"count\":1,\"list\":[{\"apiId\":1,\"provider\":\"adminfoo@abc.com\",\"name\":null,\"version\":\"1.0.0\",\"context\":\"/t/abc.com/pizzashack/1.0.0\",\"policy\":null,\"urlMaping\":[]}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/apis?vesion=1.0.0&context=/t/abc.com/pizzashack/1.0.0' -kv\n{\"count\":1,\"list\":[{\"apiId\":1,\"provider\":\"adminfoo@abc.com\",\"name\":null,\"version\":\"1.0.0\",\"context\":\"/t/abc.com/pizzashack/1.0.0\",\"policy\":null,\"urlMaping\":[]}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/apis\u2019\n{\"count\":2,\"list\":[{\"id\":3,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"Unlimited\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]},{\"id\":4,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"10PerMin\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]}],\"pagination\":null}\n/subscriptions\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscriptions'\n{\"count\":1,\"list\":[{\"subscriptionId\":1,\"policyId\":\"Unlimited\",\"apiId\":1,\"appId\":4,\"subscriptionState\":\"UNBLOCKED\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscriptions?apiId=1&appId=4' -kv\n{\"count\":1,\"list\":[{\"subscriptionId\":1,\"policyId\":\"Unlimited\",\"apiId\":1,\"appId\":4,\"subscriptionState\":\"UNBLOCKED\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscriptions' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":1,\"list\":[{\"subscriptionId\":1,\"policyId\":\"Unlimited\",\"apiId\":1,\"appId\":4,\"subscriptionState\":\"UNBLOCKED\"}],\"pagination\":null}\n/applictaions\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/applications\u2019\n{\"count\":2,\"list\":[{\"id\":3,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"Unlimited\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]},{\"id\":4,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"10PerMin\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/applications?appId=4' -kv\n{\"count\":1,\"list\":[{\"id\":4,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"10PerMin\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/applications' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":2,\"list\":[{\"id\":3,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"Unlimited\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]},{\"id\":4,\"name\":null,\"subName\":\"adminfoo@abc.com\",\"policy\":\"10PerMin\",\"tokenType\":\"JWT\",\"groupIds\":[],\"attributes\":[]}],\"pagination\":null}\n/subscription-policies\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscription-policies'\n{\"count\":10,\"list\":[{\"id\":1,\"tenantId\":-1234,\"name\":\"Gold\",\"quotaType\":\"requestCount\"},{\"id\":2,\"tenantId\":-1234,\"name\":\"Silver\",\"quotaType\":\"requestCount\"},{\"id\":3,\"tenantId\":-1234,\"name\":\"Bronze\",\"quotaType\":\"requestCount\"},{\"id\":4,\"tenantId\":-1234,\"name\":\"Unauthenticated\",\"quotaType\":\"requestCount\"},{\"id\":5,\"tenantId\":-1234,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"},{\"id\":6,\"tenantId\":1,\"name\":\"Gold\",\"quotaType\":\"requestCount\"},{\"id\":7,\"tenantId\":1,\"name\":\"Silver\",\"quotaType\":\"requestCount\"},{\"id\":8,\"tenantId\":1,\"name\":\"Bronze\",\"quotaType\":\"requestCount\"},{\"id\":9,\"tenantId\":1,\"name\":\"Unauthenticated\",\"quotaType\":\"requestCount\"},{\"id\":10,\"tenantId\":1,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscription-policies?policyName=Unauthenticated' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":1,\"list\":[{\"id\":9,\"tenantId\":1,\"name\":\"Unauthenticated\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/subscription-policies' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":5,\"list\":[{\"id\":6,\"tenantId\":1,\"name\":\"Gold\",\"quotaType\":\"requestCount\"},{\"id\":7,\"tenantId\":1,\"name\":\"Silver\",\"quotaType\":\"requestCount\"},{\"id\":8,\"tenantId\":1,\"name\":\"Bronze\",\"quotaType\":\"requestCount\"},{\"id\":9,\"tenantId\":1,\"name\":\"Unauthenticated\",\"quotaType\":\"requestCount\"},{\"id\":10,\"tenantId\":1,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\n/application-policies\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-policies'\n{\"count\":8,\"list\":[{\"id\":1,\"tenantId\":-1234,\"name\":\"50PerMin\",\"quotaType\":\"requestCount\"},{\"id\":2,\"tenantId\":-1234,\"name\":\"20PerMin\",\"quotaType\":\"requestCount\"},{\"id\":3,\"tenantId\":-1234,\"name\":\"10PerMin\",\"quotaType\":\"requestCount\"},{\"id\":4,\"tenantId\":-1234,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"},{\"id\":5,\"tenantId\":1,\"name\":\"50PerMin\",\"quotaType\":\"requestCount\"},{\"id\":6,\"tenantId\":1,\"name\":\"20PerMin\",\"quotaType\":\"requestCount\"},{\"id\":7,\"tenantId\":1,\"name\":\"10PerMin\",\"quotaType\":\"requestCount\"},{\"id\":8,\"tenantId\":1,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-policies?policyName=50PerMin' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":1,\"list\":[{\"id\":5,\"tenantId\":1,\"name\":\"50PerMin\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-policies' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":4,\"list\":[{\"id\":5,\"tenantId\":1,\"name\":\"50PerMin\",\"quotaType\":\"requestCount\"},{\"id\":6,\"tenantId\":1,\"name\":\"20PerMin\",\"quotaType\":\"requestCount\"},{\"id\":7,\"tenantId\":1,\"name\":\"10PerMin\",\"quotaType\":\"requestCount\"},{\"id\":8,\"tenantId\":1,\"name\":\"Unlimited\",\"quotaType\":\"requestCount\"}],\"pagination\":null}\n/application-key-mappings\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-key-mappings' -kv --header 'X-WSO2-Tenant: abc.com'\n{\"count\":1,\"list\":[{\"applicationId\":3,\"consumerKey\":\"43Ehg6ZSFASUsMdSSuD4XfzLnDoa\",\"keyType\":\"SANDBOX\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-key-mappings' -k\n{\"count\":2,\"list\":[{\"applicationId\":2,\"consumerKey\":\"qKH901QpbwsUeaBekqhpGIrJqU4a\",\"keyType\":\"PRODUCTION\"},{\"applicationId\":3,\"consumerKey\":\"43Ehg6ZSFASUsMdSSuD4XfzLnDoa\",\"keyType\":\"SANDBOX\"}],\"pagination\":null}\ncurl --location  --request GET 'https://localhost:9443/internal/data/v1/application-key-mappings?consumerKey=qKH901QpbwsUeaBekqhpGIrJqU4a' -k\n{\"count\":1,\"list\":[{\"applicationId\":2,\"consumerKey\":\"qKH901QpbwsUeaBekqhpGIrJqU4a\",\"keyType\":\"PRODUCTION\"}],\"pagination\":null}\n//TODO\n\nAdd a composite API which can be used to retrieve all the data required for subscription validation at once for a given request to the gateway.\nMaintain a state to track whether the initial data loading is done,\nAdd scopes to API resources.\nRetrieve group Ids, attributes in the Application Resource.", "createdAt": "2020-05-25T07:49:01Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8563", "merged": true, "mergeCommit": {"oid": "712aa76dc27abd3dfcc77461f2eef1f0435c4422"}, "closed": true, "closedAt": "2020-06-05T00:17:16Z", "author": {"login": "isharac"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckrc0UgFqTQxNzUzMTcxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn3UdJgFqTQyNDExNDgxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMxNzE4", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-417531718", "createdAt": "2020-05-25T08:04:45Z", "commit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDo0NVrOGZ4Z1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDo0NVrOGZ4Z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <Enabled>{{apim.key_manager.inmemory_sub_validation.enable}}</Enabled>\n          \n          \n            \n                        <Enabled>{{apim.key_manager.inmemory_subscription_validation.enabled}}</Enabled>", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429791701", "createdAt": "2020-05-25T08:04:45Z", "author": {"login": "bhathiya"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2", "diffHunk": "@@ -363,6 +363,14 @@\n        {% if apim.jwt.expiry_time is defined %}\n         <JWTExpiryTime>{{apim.jwt.expiry_time}}</JWTExpiryTime>\n        {% endif %}\n+        {% if apim.key_manager.inmemory_sub_validation is defined %}\n+        <InMemorySubscriptionValidation>\n+            <Enabled>{{apim.key_manager.inmemory_sub_validation.enable}}</Enabled>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMyMzc4", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-417532378", "createdAt": "2020-05-25T08:05:48Z", "commit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNTo0OVrOGZ4b9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNTo0OVrOGZ4b9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjI0NA==", "bodyText": "do we need the commented code?", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792244", "createdAt": "2020-05-25T08:05:49Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.api.model.subscription.CachableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    //    private Map<String, Policy> policyMap;\n+//    private Map<String, APIPolicy> apiPolicyMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    private Map<String, Subscriber> subscriberMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private int tenantId = MultitenantConstants.SUPER_TENANT_ID;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(int tenantId) {\n+\n+        this.tenantId = tenantId;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+//        this.policyMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+//        this.apiPolicyMap = new ConcurrentHashMap<>();\n+        this.subscriptionMap = new ConcurrentHashMap<>();\n+        this.subscriberMap = new ConcurrentHashMap<>();\n+        initializeLoadingTasks();\n+    }\n+\n+    @Override\n+    public SubscriptionDataStore getInstance(int tenantId) {\n+\n+        return new SubscriptionDataStoreImpl(tenantId);\n+    }\n+\n+    @Override\n+    public Application getApplicationById(int appId) {\n+\n+        return applicationMap.get(appId);\n+    }\n+\n+    @Override\n+    public ApplicationKeyMapping getKeyMappingByKey(String key) {\n+\n+        return applicationKeyMappingMap.get(key);\n+    }\n+\n+    @Override\n+    public API getApiByContextAndVersion(String context, String version) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public SubscriptionPolicy getSubscriptionPolicyByName(String policyName, int tenantId) {\n+\n+        String key = InMemorySubscriptionValidationConstants.POLICY_TYPE.SUBSCRIPTION +\n+                SubscriptionDataStoreUtil.getPolicyCacheKey(policyName, tenantId);\n+        return subscriptionPolicyMap.get(key);\n+    }\n+\n+    @Override\n+    public ApplicationPolicy getApplicationPolicyByName(String policyName, int tenantId) {\n+\n+        String key = InMemorySubscriptionValidationConstants.POLICY_TYPE.APPLICATION +\n+                SubscriptionDataStoreUtil.getPolicyCacheKey(policyName, tenantId);\n+        return appPolicyMap.get(key);\n+    }\n+\n+    @Override\n+    public Subscription getSubscriptionById(int appId, int apiId) {\n+\n+        return subscriptionMap.get(SubscriptionDataStoreUtil.getSubscriptionCacheKey(appId, apiId));\n+    }\n+\n+    public void initializeLoadingTasks() {\n+\n+        Runnable apiTask = new PopulateTask<String, API>(apiMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllApis. \");\n+                        return new SubscriptionDataLoaderImpl().loadAllApis(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading APIs \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(apiTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable subscriptionLoadingTask = new PopulateTask<String, Subscription>(subscriptionMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllSubscriptions.\");\n+                        return new SubscriptionDataLoaderImpl().loadAllSubscriptions(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading Subscriptions \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(subscriptionLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable applicationLoadingTask = new PopulateTask<Integer, Application>(applicationMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllApplications.\");\n+                        return new SubscriptionDataLoaderImpl().loadAllApplications(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading Applications \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(applicationLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable keyMappingsTask =\n+                new PopulateTask<String, ApplicationKeyMapping>(applicationKeyMappingMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllKeyMappings.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllKeyMappings(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading ApplicationKeyMapping \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(keyMappingsTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable subPolicyLoadingTask =\n+                new PopulateTask<String, SubscriptionPolicy>(subscriptionPolicyMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllSubscriptionPolicies.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllSubscriptionPolicies(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading Subscription Policies \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(subPolicyLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable appPolicyLoadingTask =\n+                new PopulateTask<String, ApplicationPolicy>(appPolicyMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllAppPolicies.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllAppPolicies(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading Application Policies \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(appPolicyLoadingTask, 0, TimeUnit.SECONDS);\n+//todo load subscribers\n+//        Runnable apiPolicyLoadingTask = //todo validate from local cache\n+//                new PeriodicPopulateTask<String, APIPolicy>(apiPolicyMap,\n+//                        () -> {\n+//                            try {\n+//                                log.debug(\"Calling loadAllApiPolicies.\");\n+//                                return dataLoader.loadAllApiPolicies();\n+//                            } catch (APIManagementException e) {\n+//                                log.error(\"Exception while loading Api Policies\");\n+//                            }\n+//                            return null;\n+//                        });\n+//\n+//        executorService.scheduleAtFixedRate(apiPolicyLoadingTask, 0,\n+//                this.mapBasedSubscriptionStoreConfig.getPolicyLoadingFrequency(), TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMyNjAz", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-417532603", "createdAt": "2020-05-25T08:06:12Z", "commit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNjoxMlrOGZ4cqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNjoxMlrOGZ4cqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjQyNQ==", "bodyText": "can you please clean up the code?", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792425", "createdAt": "2020-05-25T08:06:12Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.api.model.subscription.CachableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    //    private Map<String, Policy> policyMap;\n+//    private Map<String, APIPolicy> apiPolicyMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    private Map<String, Subscriber> subscriberMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private int tenantId = MultitenantConstants.SUPER_TENANT_ID;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(int tenantId) {\n+\n+        this.tenantId = tenantId;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+//        this.policyMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+//        this.apiPolicyMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTM1NzU3", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-417535757", "createdAt": "2020-05-25T08:11:27Z", "commit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTI5Nzky", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-417529792", "createdAt": "2020-05-25T08:01:35Z", "commit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowMTozNVrOGZ4T-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxMzoxMlrOGZ4ppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDIwMg==", "bodyText": "SUBSCRIPTION_LOAD_SQL -> GET_ALL_SUBSCRIPTIONS", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429790202", "createdAt": "2020-05-25T08:01:35Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/InMemorySubscriptionValidationConstants.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.api;\n+\n+public class InMemorySubscriptionValidationConstants {\n+\n+    public static final String APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \";\n+\n+    public static final String SUBSCRIPTION_LOAD_SQL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDgwOA==", "bodyText": "same goes here", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429790808", "createdAt": "2020-05-25T08:02:52Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/InMemorySubscriptionValidationConstants.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.api;\n+\n+public class InMemorySubscriptionValidationConstants {\n+\n+    public static final String APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \";\n+\n+    public static final String SUBSCRIPTION_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   SUBSCRIPTION_ID AS SUB_ID,\" +\n+                    \"   TIER_ID AS TIER,\" +\n+                    \"   API_ID AS API_ID,\" +\n+                    \"   APPLICATION_ID AS APP_ID,\" +\n+                    \"   SUB_STATUS AS STATUS\" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION\";\n+\n+    public static final String GET_SUBSCRIPTION_SQL =\n+            \"SELECT \" +\n+                    \"   SUBSCRIPTION_ID AS SUB_ID,\" +\n+                    \"   TIER_ID AS TIER,\" +\n+                    \"   API_ID AS API_ID,\" +\n+                    \"   APPLICATION_ID AS APP_ID,\" +\n+                    \"   SUB_STATUS AS STATUS\" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION\" +\n+                    \" WHERE \" +\n+                    \"   SUBSCRIPTION_ID = ? \";\n+\n+    public static final String SUBSCRIPTION_POLICY_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   POLICY_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   RATE_LIMIT_COUNT,\" +\n+                    \"   RATE_LIMIT_TIME_UNIT,\" +\n+                    \"   QUOTA_TYPE,\" +\n+                    \"   STOP_ON_QUOTA_REACH, \" +\n+                    \"   TENANT_ID \" +\n+                    \"FROM \" +\n+                    \"   AM_POLICY_SUBSCRIPTION\";\n+\n+    public static final String APPLICATION_POLICY_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   POLICY_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   QUOTA_TYPE,\" +\n+                    \"   TENANT_ID \" +\n+                    \"FROM \" +\n+                    \"   AM_POLICY_APPLICATION\";\n+\n+    public static final String APIS_LOAD_SQL =\n+            \"SELECT \" +\n+                    \" API_ID,\" +\n+                    \" API_PROVIDER,\" +\n+                    \" API_NAME,\" +\n+                    \" API_TIER,\" +\n+                    \" API_VERSION,\" +\n+                    \" CONTEXT \" +\n+                    \" FROM \" +\n+                    \"   AM_API\";\n+\n+    public static final String AM_KEY_MAPPINGS =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\";\n+\n+    public static final String AM_KEY_MAPPING =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE \" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\" +\n+                    \" WHERE \" +\n+                    \"APPLICATION_ID = ? \" +\n+                    \"AND KEY_TYPE = ? \";\n+\n+    public static final String AM_KEY_MAPPING_BY_CONSUMERKAY =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE \" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\" +\n+                    \" WHERE \" +\n+                    \"CONSUMER_KEY = ? \";\n+\n+    public static final String TENANT_APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \" +\n+                    \"   AND SUB.TENANT_ID = ?\";\n+\n+    public static final String GET_APPLICATION_BY_ID_SQL =\n+            \" SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   APPLICATION_TIER,\" +\n+                    \"   TOKEN_TYPE,\" +\n+                    \"   SUBSCRIBER_ID,\" +\n+                    \"   GROUP_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION\" +\n+                    \" WHERE \" +\n+                    \"   APPLICATION_ID = ? \";\n+\n+    public static final String TENANT_SUBSCRIPTION_LOAD_SQL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjExOQ==", "bodyText": "Do we need this", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792119", "createdAt": "2020-05-25T08:05:35Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -631,6 +634,15 @@ private Permissions() {\n     public static final String API_KEY_VALIDATOR_APPLICATION_ACCESS_TOKEN_VALIDATION_PERIOD = API_KEY_VALIDATOR\n             + \"ApplicationTokenDefaultValidityPeriod\";\n \n+    public static class ApiKeyValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTc1MA==", "bodyText": "Shall we make Integer-> String and bring key as context:version", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429795750", "createdAt": "2020-05-25T08:13:12Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/SubscriptionValidationDAO.java", "diffHunk": "@@ -0,0 +1,639 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.model.subscription.API;\n+import org.wso2.carbon.apimgt.api.model.subscription.Application;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Policy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Subscription;\n+import org.wso2.carbon.apimgt.api.model.subscription.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class SubscriptionValidationDAO {\n+\n+    private static Log log = LogFactory.getLog(SubscriptionValidationDAO.class);\n+\n+    /*\n+     * This method can be used to retrieve all the APIs in the database\n+     *\n+     * @return {@link Map<Integer, API>}\n+     * */\n+    public static Map<Integer, API> getAllApis() {\n+\n+        Map<Integer, API> apiMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d87038d375f4b2c817907e3c69d5f75ee78df9"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c32e685f9512b166d74105452585b0168ff44b09", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c32e685f9512b166d74105452585b0168ff44b09", "committedDate": "2020-05-25T08:35:10Z", "message": "Update features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2\n\nCo-authored-by: Bhathiya Jayasekara <bhathiya@wso2.com>"}, "afterCommit": {"oid": "d883f06d099e5fe84ed5a62fe9333140e668629f", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d883f06d099e5fe84ed5a62fe9333140e668629f", "committedDate": "2020-05-25T12:26:16Z", "message": "refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzQ5NzE2", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-421749716", "createdAt": "2020-06-01T10:42:44Z", "commit": {"oid": "739701366d9eca725312c083611da577ad77b526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0Mjo0NFrOGdGMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0Mjo0NFrOGdGMDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MzI3Nw==", "bodyText": "Do we have to make this a static field?", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433163277", "createdAt": "2020-06-01T10:42:44Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -0,0 +1,497 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.util.EntityUtils;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.SubscriptionValidationConfig;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.keymgt.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataLoader;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.exception.DataLoadingException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SubscriptionDataLoaderImpl implements SubscriptionDataLoader {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataLoaderImpl.class);\n+    private static SubscriptionValidationConfig subscriptionValidationConfig;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739701366d9eca725312c083611da577ad77b526"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzUwNzc1", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-421750775", "createdAt": "2020-06-01T10:44:42Z", "commit": {"oid": "739701366d9eca725312c083611da577ad77b526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0NDo0MlrOGdGPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0NDo0MlrOGdGPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2NDA5NQ==", "bodyText": "If subscriptionValidationConfig is static then you would get a warning here saying \"The static field  should be accessed in a static way\"", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433164095", "createdAt": "2020-06-01T10:44:42Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -0,0 +1,497 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.util.EntityUtils;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.SubscriptionValidationConfig;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.keymgt.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataLoader;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.exception.DataLoadingException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SubscriptionDataLoaderImpl implements SubscriptionDataLoader {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataLoaderImpl.class);\n+    private static SubscriptionValidationConfig subscriptionValidationConfig;\n+\n+    public static final int retrievalTimeoutInSeconds = 15;\n+    public static final int retrievalRetries = 15;\n+    public static final String UTF8 = \"UTF-8\";\n+\n+    public SubscriptionDataLoaderImpl() {\n+\n+        this.subscriptionValidationConfig = ServiceReferenceHolder.getInstance()\n+                .getAPIManagerConfigurationService().getAPIManagerConfiguration()\n+                .getSubscriptionValidationConfig();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739701366d9eca725312c083611da577ad77b526"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41c1d104511d69e4860b5b76093a8b5f757d34c4", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/41c1d104511d69e4860b5b76093a8b5f757d34c4", "committedDate": "2020-06-02T04:53:49Z", "message": "in-Memory subscription validation support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786cf722b75bf12a24d6a8e30b8436ae70c885d9", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/786cf722b75bf12a24d6a8e30b8436ae70c885d9", "committedDate": "2020-06-02T04:53:49Z", "message": "fix review commets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa01312af4fef0a9e3a65676c5186e02191cc00", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/bfa01312af4fef0a9e3a65676c5186e02191cc00", "committedDate": "2020-06-02T04:53:49Z", "message": "refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c8bccfff9d2c80422c39b96b006e713edf1c69", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f8c8bccfff9d2c80422c39b96b006e713edf1c69", "committedDate": "2020-06-02T04:53:49Z", "message": "add url mapping rest APIs and some code refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03aa9a18241916f1bcf944c9c3d4487a23018cac", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/03aa9a18241916f1bcf944c9c3d4487a23018cac", "committedDate": "2020-06-02T04:53:49Z", "message": "suggested changes in the code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "committedDate": "2020-06-02T04:58:41Z", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c406c323a1d2ede864ce9a2530e35494c2e7d3fc", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c406c323a1d2ede864ce9a2530e35494c2e7d3fc", "committedDate": "2020-06-02T01:25:02Z", "message": "suggested changes in the code review"}, "afterCommit": {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "committedDate": "2020-06-02T04:58:41Z", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzgxMzk2", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-422381396", "createdAt": "2020-06-02T06:39:41Z", "commit": {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjozOTo0MVrOGdkAJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjozOTo0MVrOGdkAJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1MTc0OQ==", "bodyText": "shall we keep the existing subscription validation logic and remove it once the in-memory validation is there", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433651749", "createdAt": "2020-06-02T06:39:41Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandler.java", "diffHunk": "@@ -261,4 +261,10 @@ public boolean validateScopes(TokenValidationContext validationContext) throws A\n         }\n         return true;\n     }\n+\n+    public boolean validateSubscription(TokenValidationContext tokenValidationContext)\n+            throws APIKeyMgtException {\n+        //todo validate using inmemory store\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "committedDate": "2020-06-02T06:45:06Z", "message": "remove dummy method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDc2NTY1", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-422476565", "createdAt": "2020-06-02T08:56:38Z", "commit": {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1NjozOFrOGdobFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1NjozOFrOGdobFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNDE4Mw==", "bodyText": "Seems like the enabled property is not set here", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433724183", "createdAt": "2020-06-02T08:56:38Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/SubscriptionValidationConfig.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl;\n+\n+public class SubscriptionValidationConfig {\n+\n+    private boolean enabled;\n+    private String serviceURL;\n+    private String username;\n+    private String password;\n+\n+    private SubscriptionValidationConfig() {\n+\n+    }\n+\n+    public String getServiceURL() {\n+\n+        return serviceURL;\n+    }\n+\n+    public String getUsername() {\n+\n+        return username;\n+    }\n+\n+    public String getPassword() {\n+\n+        return password;\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+\n+        this.enabled = enabled;\n+    }\n+\n+    public static class Builder {\n+\n+        private boolean enabled;\n+        private String serviceURL;\n+        private String username;\n+        private String password;\n+\n+        public Builder serviceURL(String serviceURL) {\n+\n+            this.serviceURL = serviceURL;\n+            return this;\n+        }\n+\n+        public Builder username(String username) {\n+\n+            this.username = username;\n+            return this;\n+        }\n+\n+        public Builder password(String password) {\n+\n+            this.password = password;\n+            return this;\n+        }\n+\n+        public Builder(boolean enabled) {\n+\n+            this.enabled = enabled;\n+        }\n+\n+        public SubscriptionValidationConfig build() {\n+\n+            SubscriptionValidationConfig subscriptionValidationConfig = new SubscriptionValidationConfig();\n+            subscriptionValidationConfig.serviceURL = serviceURL;\n+            subscriptionValidationConfig.username = username;\n+            subscriptionValidationConfig.password = password;\n+            return subscriptionValidationConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDkwNjE1", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-422490615", "createdAt": "2020-06-02T09:14:21Z", "commit": {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToxNDoyMVrOGdpEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToxNDoyMVrOGdpEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczNDgyNQ==", "bodyText": "here we are retrieving using the tenant id . but we set the map using the tenant domain. need to use same way", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433734825", "createdAt": "2020-06-02T09:14:21Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/SubscriptionDataHolder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt;\n+\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.impl.SubscriptionDataStoreImpl;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/*\n+ * This class holds tenant wise subscription data stores\n+ * */\n+public class SubscriptionDataHolder {\n+\n+    private Map<String, SubscriptionDataStore> subscriptionStore =\n+            new ConcurrentHashMap<>();\n+    private static SubscriptionDataHolder instance = new SubscriptionDataHolder();\n+\n+    public static SubscriptionDataHolder getInstance() {\n+\n+        return instance;\n+    }\n+\n+    public void registerTenantSubscriptionStore(String tenantDomain) {\n+\n+        SubscriptionDataStore tenantStore = subscriptionStore.get(tenantDomain);\n+        if (tenantStore == null) {\n+            tenantStore = new SubscriptionDataStoreImpl(tenantDomain);\n+        }\n+        subscriptionStore.put(tenantDomain, tenantStore);\n+    }\n+\n+    public void unregisterTenantSubscriptionStore(int tenantId) {\n+\n+        subscriptionStore.remove(tenantId);\n+    }\n+\n+    public SubscriptionDataStore getTenantSubscriptionStore(int tenantId) {\n+\n+        return subscriptionStore.get(tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "434bdb7d78df4fc883cdcb60f54d760f838b8ed5", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/434bdb7d78df4fc883cdcb60f54d760f838b8ed5", "committedDate": "2020-06-02T09:34:39Z", "message": "fix tenantId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd1d72754dc1a306d7f7de2d9d48cf0b9e2d2e9", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4cd1d72754dc1a306d7f7de2d9d48cf0b9e2d2e9", "committedDate": "2020-06-02T09:46:06Z", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/webapp/WEB-INF/beans.xml\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/swagger.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b1e5975e502b4d358c1415e71a432161d6a52c", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/19b1e5975e502b4d358c1415e71a432161d6a52c", "committedDate": "2020-06-02T10:04:47Z", "message": "fix tenantId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dcd9353206267148980d99c80ccb84f9adaa724", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5dcd9353206267148980d99c80ccb84f9adaa724", "committedDate": "2020-06-03T00:31:40Z", "message": "Merge remote-tracking branch 'origin/master' into ishara-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d7ea678c1fea53e16536217059123471dc21e3", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f6d7ea678c1fea53e16536217059123471dc21e3", "committedDate": "2020-06-03T02:11:10Z", "message": "fix at response reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a618c7522e2b6e83312264e0b451eb9d65b0b94b", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a618c7522e2b6e83312264e0b451eb9d65b0b94b", "committedDate": "2020-06-03T04:48:29Z", "message": "fix at response reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46624521490978c77cfdce2bafd455b8a2e67f20", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/46624521490978c77cfdce2bafd455b8a2e67f20", "committedDate": "2020-06-03T05:10:21Z", "message": "add enabled property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "committedDate": "2020-06-03T05:36:39Z", "message": "add missing class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjgxMzM4", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-423281338", "createdAt": "2020-06-03T07:21:13Z", "commit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyMToxM1rOGePKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyMToxM1rOGePKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1ODg0Mg==", "bodyText": "missed to implement", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434358842", "createdAt": "2020-06-03T07:21:13Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.subscription.CacheableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+    public enum POLICY_TYPE {\n+        SUBSCRIPTION,\n+        APPLICATION\n+    }\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private String tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(String tenantDomain) {\n+\n+        this.tenantDomain = tenantDomain;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+        this.subscriptionMap = new ConcurrentHashMap<>();\n+        initializeLoadingTasks();\n+    }\n+\n+    @Override\n+    public Application getApplicationById(int appId) {\n+\n+        return applicationMap.get(appId);\n+    }\n+\n+    @Override\n+    public ApplicationKeyMapping getKeyMappingByKey(String key) {\n+\n+        return applicationKeyMappingMap.get(key);\n+    }\n+\n+    @Override\n+    public API getApiByContextAndVersion(String context, String version) {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTkxNDQ0", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-423591444", "createdAt": "2020-06-03T14:08:43Z", "commit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowODo0M1rOGednqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowODo0M1rOGednqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTc1NA==", "bodyText": "rateLimitCount,rateLimitTimeUnit,stopOnQuotaReach are not set", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434595754", "createdAt": "2020-06-03T14:08:43Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/utils/SubscriptionValidationDataUtil.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.internal.service.utils;\n+\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.subscription.API;\n+import org.wso2.carbon.apimgt.api.model.subscription.Application;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Subscription;\n+import org.wso2.carbon.apimgt.api.model.subscription.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.internal.service.dto.APIDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.APIListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationAttributeDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationKeyMappingDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationKeyMappingListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationPolicyDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationPolicyListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.GroupIdDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionPolicyDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionPolicyListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.URLMappingDTO;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SubscriptionValidationDataUtil {\n+\n+    public static APIDTO fromAPItoDTO(API model) throws APIManagementException {\n+\n+        APIDTO apidto = null;\n+        if (model != null) {\n+            apidto = new APIDTO();\n+            apidto.setApiId(model.getApiId());\n+            apidto.setVersion(model.getVersion());\n+            apidto.setContext(model.getContext());\n+            apidto.setPolicy(model.getPolicy());\n+            apidto.setProvider(model.getProvider());\n+            List<URLMapping> urlMappings = model.getAllResources();\n+            List<URLMappingDTO> urlMappingsDTO = new ArrayList<>();\n+            for (URLMapping urlMapping : urlMappings) {\n+                URLMappingDTO urlMappingDTO = new URLMappingDTO();\n+                urlMappingDTO.setAuthScheme(urlMapping.getAuthScheme());\n+                urlMappingDTO.setHttpMethod(urlMapping.getHttpMethod());\n+                urlMappingDTO.setThrottlingPolicy(urlMapping.getThrottlingPolicy());\n+                urlMappingsDTO.add(urlMappingDTO);\n+            }\n+            apidto.setUrlMaping(urlMappingsDTO);\n+        }\n+        return apidto;\n+    }\n+\n+    public static APIListDTO fromAPIToAPIListDTO(API model) throws APIManagementException {\n+\n+        APIListDTO apiListdto = new APIListDTO();\n+        if (model != null) {\n+            APIDTO apidto = new APIDTO();\n+            apidto.setApiId(model.getApiId());\n+            apidto.setVersion(model.getVersion());\n+            apidto.setContext(model.getContext());\n+            apidto.setPolicy(model.getPolicy());\n+            apidto.setProvider(model.getProvider());\n+            List<URLMapping> urlMappings = model.getAllResources();\n+            List<URLMappingDTO> urlMappingsDTO = new ArrayList<>();\n+            for (URLMapping urlMapping : urlMappings) {\n+                URLMappingDTO urlMappingDTO = new URLMappingDTO();\n+                urlMappingDTO.setAuthScheme(urlMapping.getAuthScheme());\n+                urlMappingDTO.setHttpMethod(urlMapping.getHttpMethod());\n+                urlMappingDTO.setThrottlingPolicy(urlMapping.getThrottlingPolicy());\n+                urlMappingsDTO.add(urlMappingDTO);\n+            }\n+            apidto.setUrlMaping(urlMappingsDTO);\n+            apiListdto.setCount(1);\n+            apiListdto.getList().add(apidto);\n+        } else {\n+            apiListdto.setCount(0);\n+        }\n+        return apiListdto;\n+    }\n+\n+    public static APIListDTO fromAPIListToAPIListDTO(List<API> apiList) throws APIManagementException {\n+\n+        APIListDTO apiListDTO = new APIListDTO();\n+        apiListDTO.getList();\n+\n+        if (apiList != null) {\n+            for (API api : apiList) {\n+                apiListDTO.getList().add(fromAPItoDTO(api));\n+            }\n+            apiListDTO.setCount(apiList.size());\n+        } else {\n+            apiListDTO.setCount(0);\n+        }\n+\n+        return apiListDTO;\n+    }\n+\n+    public static ApplicationListDTO fromApplicationToApplicationListDTO(List<Application> model) {\n+\n+        ApplicationListDTO applicationListDTO = new ApplicationListDTO();\n+        if (model != null) {\n+            for (Application appModel : model) {\n+                ApplicationDTO applicationDTO = new ApplicationDTO();\n+                applicationDTO.setId(appModel.getId());\n+                applicationDTO.setName(appModel.getName());\n+                applicationDTO.setPolicy(appModel.getPolicy());\n+                applicationDTO.setSubName(appModel.getSubName());\n+                applicationDTO.setTokenType(appModel.getTokenType());\n+\n+                Set<String> groupIds = appModel.getGroupIds();\n+                for (String grp : groupIds) {\n+                    GroupIdDTO groupIdDTO = new GroupIdDTO();\n+                    groupIdDTO.setApplicationId(appModel.getId());\n+                    groupIdDTO.setGroupId(grp);\n+                    applicationDTO.getGroupIds().add(groupIdDTO);\n+                }\n+\n+                Map<String, String> attributes = appModel.getAttributesMap();\n+                for (String attrib : attributes.keySet()) {\n+                    ApplicationAttributeDTO applicationAttributeDTO = new ApplicationAttributeDTO();\n+                    applicationAttributeDTO.setName(attrib);\n+                    applicationAttributeDTO.setValue(attributes.get(attrib));\n+                    applicationDTO.getAttributes().add(applicationAttributeDTO);\n+                }\n+                applicationListDTO.getList().add(applicationDTO);\n+            }\n+            applicationListDTO.setCount(model.size());\n+\n+        } else {\n+            applicationListDTO.setCount(0);\n+        }\n+        return applicationListDTO;\n+    }\n+\n+    public static SubscriptionListDTO fromSubscriptionToSubscriptionListDTO(List<Subscription> model) {\n+\n+        SubscriptionListDTO subscriptionListDTO = new SubscriptionListDTO();\n+        if (model != null) {\n+            for (Subscription subsModel : model) {\n+                SubscriptionDTO subscriptionDTO = new SubscriptionDTO();\n+                subscriptionDTO.setApiId(subsModel.getApiId());\n+                subscriptionDTO.setAppId(subsModel.getAppId());\n+                subscriptionDTO.setSubscriptionId(subsModel.getSubscriptionId());\n+                subscriptionDTO.setPolicyId(subsModel.getPolicyId());\n+                subscriptionDTO.setSubscriptionState(subsModel.getSubscriptionState());\n+\n+                subscriptionListDTO.getList().add(subscriptionDTO);\n+\n+            }\n+            subscriptionListDTO.setCount(model.size());\n+\n+        } else {\n+            subscriptionListDTO.setCount(0);\n+        }\n+        return subscriptionListDTO;\n+    }\n+\n+    public static SubscriptionPolicyListDTO fromSubscriptionPolicyToSubscriptionPolicyListDTO(\n+            List<SubscriptionPolicy> model) {\n+\n+        SubscriptionPolicyListDTO subscriptionPolicyListDTO = new SubscriptionPolicyListDTO();\n+        if (model != null) {\n+            for (SubscriptionPolicy subscriptionPolicyModel : model) {\n+                SubscriptionPolicyDTO subscriptionPolicyDTO = new SubscriptionPolicyDTO();\n+                subscriptionPolicyDTO.setId(subscriptionPolicyModel.getId());\n+                subscriptionPolicyDTO.setName(subscriptionPolicyModel.getName());\n+                subscriptionPolicyDTO.setQuotaType(subscriptionPolicyModel.getQuotaType());\n+                subscriptionPolicyDTO.setTenantId(subscriptionPolicyModel.getTenantId());\n+\n+                subscriptionPolicyListDTO.getList().add(subscriptionPolicyDTO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjI0OTA2", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-423624906", "createdAt": "2020-06-03T14:42:03Z", "commit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0MjowM1rOGefKNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0MjowM1rOGefKNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMDk4MA==", "bodyText": "Shall we include the resource and the scope as well", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434620980", "createdAt": "2020-06-03T14:42:03Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml", "diffHunk": "@@ -290,3 +571,201 @@ definitions:\n         type: string\n       configuration:\n         type: object\n+  #-----------------------------------------------------\n+  # The Application Attribute resource\n+  #-----------------------------------------------------\n+  ApplicationAttribute:\n+    title: Application attributes\n+    properties:\n+      applicationId:\n+        type: integer\n+        description: application ID of the attribute associated with\n+        example: \"1\"\n+      name:\n+        type: string\n+        description: name of the attribute\n+      value:\n+        type: string\n+        description: the value of the attribute\n+      tenant:\n+        type: string\n+        description: tenant domain\n+        example: \"wso2.com\"\n+\n+  #-----------------------------------------------------\n+  # The Subscription List resource\n+  #-----------------------------------------------------\n+  SubscriptionList:\n+    title: Application List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of Subscriptions returned.\n+        example: 1\n+      list:\n+        type: array\n+        items:\n+          $ref: '#/definitions/Subscription'\n+      pagination:\n+        $ref: '#/definitions/Pagination'\n+  #-----------------------------------------------------\n+  # The Subscription resource\n+  #-----------------------------------------------------\n+  Subscription:\n+    properties:\n+      subscriptionId:\n+        type: integer\n+      policyId:\n+        type: string\n+      apiId:\n+        type: integer\n+      appId:\n+        type: integer\n+      subscriptionState:\n+        type: string\n+  #-----------------------------------------------------\n+  # The ApplicationKeyMapping List resource\n+  #-----------------------------------------------------\n+  ApplicationKeyMappingList:\n+    title: ApplicationKeyMapping List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of ApplicationKeyMappings returned.\n+        example: 1\n+      list:\n+        type: array\n+        items:\n+          $ref: '#/definitions/ApplicationKeyMapping'\n+      pagination:\n+        $ref: '#/definitions/Pagination'\n+  #-----------------------------------------------------\n+  # The Application Key Mapping resource\n+  #-----------------------------------------------------\n+  ApplicationKeyMapping:\n+    properties:\n+      applicationId:\n+        type: integer\n+      consumerKey:\n+        type: string\n+      keyType:\n+        type: string\n+\n+  #---------------------  --------------------------------\n+  # The Throttle Policy resource\n+  #-----------------------------------------------------\n+  Policy:\n+    properties:\n+      id:\n+        type: integer\n+      tenantId:\n+        type: integer\n+      name:\n+        type: string\n+      quotaType:\n+        type: string\n+  #-----------------------------------------------------\n+  # The SubscriptionPolicy List resource\n+  #-----------------------------------------------------\n+  SubscriptionPolicyList:\n+    title: SubscriptionPolicy List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of SubscriptionPolices returned.\n+        example: 1\n+      list:\n+        type: array\n+        items:\n+          $ref: '#/definitions/SubscriptionPolicy'\n+      pagination:\n+        $ref: '#/definitions/Pagination'\n+  #-----------------------------------------------------\n+  # The Subscription Level Policy resource\n+  #-----------------------------------------------------\n+  SubscriptionPolicy:\n+    allOf:\n+    - $ref: '#/definitions/Policy'\n+    properties:\n+      rateLimitCount:\n+        type: integer\n+      rateLimitTimeUnit:\n+        type: string\n+      stopOnQuotaReach:\n+        type: boolean\n+  #-----------------------------------------------------\n+  # The ApplicationKeyMapping List resource\n+  #-----------------------------------------------------\n+  ApplicationPolicyList:\n+    title: ApplicationPolicy List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of ApplicationPolicies returned.\n+        example: 1\n+      list:\n+        type: array\n+        items:\n+          $ref: '#/definitions/ApplicationPolicy'\n+      pagination:\n+        $ref: '#/definitions/Pagination'\n+  #-----------------------------------------------------\n+  # The Application Level Policy resource\n+  #-----------------------------------------------------\n+  ApplicationPolicy:\n+    allOf:\n+    - $ref: '#/definitions/Policy'\n+\n+  #-----------------------------------------------------\n+  # The Throttle Policy Condition resource\n+  #-----------------------------------------------------\n+  Condition:\n+    properties:\n+      conditionType:\n+        type: string\n+      name:\n+        type: string\n+      value:\n+        type: string\n+      isInverted:\n+        type: boolean\n+  #-----------------------------------------------------\n+  # The URL Mapping resource\n+  #-----------------------------------------------------\n+  URLMapping:\n+    properties:\n+      authScheme:\n+        type: string\n+      throttlingPolicy:\n+        type: string\n+      httpMethod:\n+        type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a"}, "originalPosition": 558}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5006856fb97952943ad19f8a78f371935b7cd9ca", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5006856fb97952943ad19f8a78f371935b7cd9ca", "committedDate": "2020-06-03T17:01:52Z", "message": "add api-policies API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0b3dc1f995348de9c414c29deb2575c32e54b1e", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f0b3dc1f995348de9c414c29deb2575c32e54b1e", "committedDate": "2020-06-04T01:04:33Z", "message": "add url pattern to api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTE0Mjcz", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-424114273", "createdAt": "2020-06-04T05:34:37Z", "commit": {"oid": "f0b3dc1f995348de9c414c29deb2575c32e54b1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTE0ODE1", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#pullrequestreview-424114815", "createdAt": "2020-06-04T05:36:15Z", "commit": {"oid": "f0b3dc1f995348de9c414c29deb2575c32e54b1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2793, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}