{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTAwNjIz", "number": 8145, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NTo1NlrODdEacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTowMTozMVrODdNkXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODA3NjAzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/common/MutualSSLCertificateHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NTo1NlrOFldZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjozMDozM1rOFls_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg==", "bodyText": "don't we need \"\\n\" after BEGIN_CERTIFICATE_STRING?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374823422", "createdAt": "2020-02-04T17:45:56Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/common/MutualSSLCertificateHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.common;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.core.axis2.Axis2MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.apache.synapse.transport.nhttp.NhttpConstants;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+\n+import java.util.Map;\n+\n+import javax.security.cert.X509Certificate;\n+\n+public class MutualSSLCertificateHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(MutualSSLCertificateHandler.class);\n+\n+    @Override\n+    public boolean handleRequest(MessageContext messageContext) {\n+\n+        X509Certificate certificateFromMessageContext = null;\n+        org.apache.axis2.context.MessageContext axis2MsgContext =\n+                ((Axis2MessageContext) messageContext).getAxis2MessageContext();\n+        Map headers = (Map) (axis2MsgContext)\n+                .getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+\n+        Object sslCertObject = axis2MsgContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        if (sslCertObject != null) {\n+            X509Certificate[] x509Certificates = (X509Certificate[]) sslCertObject;\n+            if (x509Certificates.length > 0) {\n+                certificateFromMessageContext = x509Certificates[0];\n+            }\n+        }\n+        if (certificateFromMessageContext != null) {\n+            if (!headers.containsKey(Utils.getClientCertificateHeader())) {\n+                try {\n+                    byte[] base64Encoded = Base64.encodeBase64(certificateFromMessageContext.getEncoded());\n+                    String base64EncodedString =\n+                            APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING.concat(new String(base64Encoded)).concat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3NDkwMg==", "bodyText": "this was handle in APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375074902", "createdAt": "2020-02-05T06:13:21Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/common/MutualSSLCertificateHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.common;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.core.axis2.Axis2MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.apache.synapse.transport.nhttp.NhttpConstants;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+\n+import java.util.Map;\n+\n+import javax.security.cert.X509Certificate;\n+\n+public class MutualSSLCertificateHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(MutualSSLCertificateHandler.class);\n+\n+    @Override\n+    public boolean handleRequest(MessageContext messageContext) {\n+\n+        X509Certificate certificateFromMessageContext = null;\n+        org.apache.axis2.context.MessageContext axis2MsgContext =\n+                ((Axis2MessageContext) messageContext).getAxis2MessageContext();\n+        Map headers = (Map) (axis2MsgContext)\n+                .getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+\n+        Object sslCertObject = axis2MsgContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        if (sslCertObject != null) {\n+            X509Certificate[] x509Certificates = (X509Certificate[]) sslCertObject;\n+            if (x509Certificates.length > 0) {\n+                certificateFromMessageContext = x509Certificates[0];\n+            }\n+        }\n+        if (certificateFromMessageContext != null) {\n+            if (!headers.containsKey(Utils.getClientCertificateHeader())) {\n+                try {\n+                    byte[] base64Encoded = Base64.encodeBase64(certificateFromMessageContext.getEncoded());\n+                    String base64EncodedString =\n+                            APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING.concat(new String(base64Encoded)).concat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg=="}, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3ODg2Nw==", "bodyText": "shall we follow one approach for both for consistency?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375078867", "createdAt": "2020-02-05T06:30:33Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/common/MutualSSLCertificateHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.common;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.core.axis2.Axis2MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.apache.synapse.transport.nhttp.NhttpConstants;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+\n+import java.util.Map;\n+\n+import javax.security.cert.X509Certificate;\n+\n+public class MutualSSLCertificateHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(MutualSSLCertificateHandler.class);\n+\n+    @Override\n+    public boolean handleRequest(MessageContext messageContext) {\n+\n+        X509Certificate certificateFromMessageContext = null;\n+        org.apache.axis2.context.MessageContext axis2MsgContext =\n+                ((Axis2MessageContext) messageContext).getAxis2MessageContext();\n+        Map headers = (Map) (axis2MsgContext)\n+                .getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+\n+        Object sslCertObject = axis2MsgContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        if (sslCertObject != null) {\n+            X509Certificate[] x509Certificates = (X509Certificate[]) sslCertObject;\n+            if (x509Certificates.length > 0) {\n+                certificateFromMessageContext = x509Certificates[0];\n+            }\n+        }\n+        if (certificateFromMessageContext != null) {\n+            if (!headers.containsKey(Utils.getClientCertificateHeader())) {\n+                try {\n+                    byte[] base64Encoded = Base64.encodeBase64(certificateFromMessageContext.getEncoded());\n+                    String base64EncodedString =\n+                            APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING.concat(new String(base64Encoded)).concat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg=="}, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODExMDE3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo1NzoxMFrOFldv2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowMjozM1rOFld6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyOTAxNw==", "bodyText": "shall we swap if and else, and negate the condition?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374829017", "createdAt": "2020-02-04T17:57:10Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMTgxOQ==", "bodyText": "and I think we can move this to above L265.", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374831819", "createdAt": "2020-02-04T18:02:33Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyOTAxNw=="}, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODEzNDEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowNDo0N1rOFld_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowNDo0N1rOFld_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMjk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.error(\"Error while Convert into X509Certificate\", e);\n          \n          \n            \n                                log.error(\"Error while converting the certificate to X509Certificate\", e);", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374832968", "createdAt": "2020-02-04T18:04:47Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE0NDExOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowODowNVrOFleFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODowODowNVrOFleFhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNDU2Ng==", "bodyText": "shall we put a debug log for the else case?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374834566", "createdAt": "2020-02-04T18:08:05Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE1Nzc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxMjoxOFrOFleN1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxMjoxOFrOFleN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNjY5Mw==", "bodyText": "can't System.getProperty(\"javax.net.ssl.trustStorePassword\") be null?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374836693", "createdAt": "2020-02-04T18:12:18Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+/**\n+ * This class used to load new certificate file into Memory\n+ */\n+public class CertificateReLoader implements Runnable {\n+\n+    private static final Log log = LogFactory.getLog(CertificateReLoader.class);\n+    private static char[] TRUST_STORE_PASSWORD = System.getProperty(\"javax.net.ssl.trustStorePassword\").toCharArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE2MDUxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxMzoxMFrOFlePiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxMzoxMFrOFlePiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNzEzMQ==", "bodyText": "formatting error", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374837131", "createdAt": "2020-02-04T18:13:10Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoaderUtil.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Utility to start CertificateReLoader\n+ */\n+public class CertificateReLoaderUtil {\n+\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+    private CertificateReLoaderUtil() {\n+\n+    }\n+\n+    private static long lastUpdatedTimeStamp;\n+\n+    public static void startCertificateReLoader() {\n+\n+        CertificateReLoader certificateReLoader = new CertificateReLoader();\n+            executor.scheduleAtFixedRate(certificateReLoader, 60, getCertificateReLoaderInterval(), TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE3NjI2OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxNzo1N1rOFleZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxNzo1N1rOFleZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTYyNQ==", "bodyText": "shall we change this to enable to match with apimgt.mutual_ssl.enable_client_validation?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374839625", "createdAt": "2020-02-04T18:17:57Z", "author": {"login": "bhathiya"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml", "diffHunk": "@@ -760,5 +760,11 @@\n     <JWTAuthentication>\n         <EnableSubscriptionValidationViaKeyManager>false</EnableSubscriptionValidationViaKeyManager>\n     </JWTAuthentication>\n-\n+    <CertificateReLoaderConfiguration>\n+        <Period>10</Period>\n+    </CertificateReLoaderConfiguration>\n+    <MutualSSL>\n+        <ClientCertificateHeader>X-WSO2-CLIENT-CERTIFICATE</ClientCertificateHeader>\n+        <DisableClientCertificateValidation>false</DisableClientCertificateValidation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODE3ODE2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxODoyOFrOFleaZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxODoyOFrOFleaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTkxMA==", "bodyText": "shall we change this to enable to match with apimgt.mutual_ssl.enable_client_validation?", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374839910", "createdAt": "2020-02-04T18:18:28Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }\n+            } catch (APIManagementException e) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                        \"Error while Convert into X509Certificate\", e);\n+            }\n+        } else {\n+            return certificateFromMessageContext;\n+        }\n+    }\n+\n+    private boolean isClientCertificateValidationDisable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU1ODcyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0Njo1NlrOFlrrvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0Njo1NlrOFlrrvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzM0MQ==", "bodyText": "Client Certificate Validation disabled. Hence returning client certificate from header\"", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057341", "createdAt": "2020-02-05T04:46:56Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU1OTQ2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0NzozMFrOFlrsKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0NzozMFrOFlrsKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzQ0OQ==", "bodyText": "Error while converting ...", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057449", "createdAt": "2020-02-05T04:47:30Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }\n+            } catch (APIManagementException e) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                        \"Error while Convert into X509Certificate\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU2MDUyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0ODoyOFrOFlrs2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDo0ODoyOFrOFlrs2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzYyNg==", "bodyText": "Unable to find the certificate", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057626", "createdAt": "2020-02-05T04:48:28Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+/**\n+ * This class used to load new certificate file into Memory\n+ */\n+public class CertificateReLoader implements Runnable {\n+\n+    private static final Log log = LogFactory.getLog(CertificateReLoader.class);\n+    private static char[] TRUST_STORE_PASSWORD = System.getProperty(\"javax.net.ssl.trustStorePassword\").toCharArray();\n+    private static String TRUST_STORE = System.getProperty(\"javax.net.ssl.trustStore\");\n+\n+    @Override\n+    public void run() {\n+\n+        File trustStoreFile = new File(TRUST_STORE);\n+        FileInputStream localTrustStoreStream;\n+        try {\n+            long lastUpdatedTimeStamp = CertificateReLoaderUtil.getLastUpdatedTimeStamp();\n+            long lastModified = trustStoreFile.lastModified();\n+            if (lastUpdatedTimeStamp != lastModified) {\n+                CertificateReLoaderUtil.setLastUpdatedTimeStamp(lastModified);\n+                localTrustStoreStream = new FileInputStream(trustStoreFile);\n+                KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+                trustStore.load(localTrustStoreStream, TRUST_STORE_PASSWORD);\n+                ServiceReferenceHolder.getInstance().setTrustStore(trustStore);\n+            }\n+\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException e) {\n+            log.error(\"Certificate Couldn't find\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU3NTk4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTowMTozMVrOFlr2Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTowMTozMVrOFlr2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTk5OA==", "bodyText": "Exists", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375059998", "createdAt": "2020-02-05T05:01:31Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -10087,4 +10097,37 @@ public static boolean isDefaultApplicationCreationDisabledForTenant(int tenantId\n         }\n         return state;\n     }\n+\n+    /**\n+     * Validate Certificate exist in TrustStore\n+     * @param certificate\n+     * @return true if certificate exist in truststore\n+     * @throws APIManagementException\n+     */\n+    public static boolean isCertificateExistInTrustStore(X509Certificate certificate) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}