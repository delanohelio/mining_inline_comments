{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMDM0Mjk1", "number": 9002, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozOToyMlrOEQ4uEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDo0ODozNlrOEoW5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQxOTY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozOToyMlrOG1Sb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0NzowNFrOG2iW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTc0Ng==", "bodyText": "All exceptions should be thrown in this scenario", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r458529746", "createdAt": "2020-07-22T04:39:22Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;\n+\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfigurationServiceImpl;\n+import org.wso2.carbon.apimgt.impl.dao.GatewayArtifactsMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+public class GatewayArtifactsMgtDAOTest {\n+    public static GatewayArtifactsMgtDAO gatewayArtifactsMgtDAO;\n+    String apiUUID = \"1236233\";\n+    String apiName = \"testAddGatewayPublishedAPIDetails\";\n+    String version = \"1.0.0\";\n+    String label = \"Production and Sandbox\";\n+    ByteArrayInputStream anyInputStream = new ByteArrayInputStream(\"test data\".getBytes());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        String dbConfigPath = System.getProperty(\"APIManagerDBConfigurationPath\");\n+        APIManagerConfiguration config = new APIManagerConfiguration();\n+        initializeDatabase(dbConfigPath);\n+        config.load(dbConfigPath);\n+        ServiceReferenceHolder.getInstance().setAPIManagerConfigurationService(new APIManagerConfigurationServiceImpl\n+                (config));\n+        ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties().\n+                setArtifactSynchronizerDataSource(\"java:/comp/env/jdbc/WSO2AM_DB\");\n+        GatewayArtifactsMgtDBUtil.initialize();\n+        gatewayArtifactsMgtDAO = GatewayArtifactsMgtDAO.getInstance();\n+    }\n+\n+\n+    private static void initializeDatabase(String configFilePath) {\n+\n+        InputStream in;\n+        try {\n+            in = FileUtils.openInputStream(new File(configFilePath));\n+            StAXOMBuilder builder = new StAXOMBuilder(in);\n+            String dataSource = builder.getDocumentElement().getFirstChildWithName(new QName(\"DataSourceName\")).\n+                    getText();\n+            OMElement databaseElement = builder.getDocumentElement().getFirstChildWithName(new QName(\"Database\"));\n+            String databaseURL = databaseElement.getFirstChildWithName(new QName(\"URL\")).getText();\n+            String databaseUser = databaseElement.getFirstChildWithName(new QName(\"Username\")).getText();\n+            String databasePass = databaseElement.getFirstChildWithName(new QName(\"Password\")).getText();\n+            String databaseDriver = databaseElement.getFirstChildWithName(new QName(\"Driver\")).getText();\n+\n+            BasicDataSource basicDataSource = new BasicDataSource();\n+            basicDataSource.setDriverClassName(databaseDriver);\n+            basicDataSource.setUrl(databaseURL);\n+            basicDataSource.setUsername(databaseUser);\n+            basicDataSource.setPassword(databasePass);\n+\n+            // Create initial context\n+            System.setProperty(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"org.apache.naming.java.javaURLContextFactory\");\n+            System.setProperty(Context.URL_PKG_PREFIXES,\n+                    \"org.apache.naming\");\n+            try {\n+                InitialContext.doLookup(\"java:/comp/env/jdbc/WSO2AM_DB\");\n+            } catch (NamingException e) {\n+                InitialContext ic = new InitialContext();\n+                ic.createSubcontext(\"java:\");\n+                ic.createSubcontext(\"java:/comp\");\n+                ic.createSubcontext(\"java:/comp/env\");\n+                ic.createSubcontext(\"java:/comp/env/jdbc\");\n+\n+                ic.bind(\"java:/comp/env/jdbc/WSO2AM_DB\", basicDataSource);\n+            }\n+        } catch (XMLStreamException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTIxOA==", "bodyText": "ca3a992", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r459839218", "createdAt": "2020-07-24T03:47:04Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;\n+\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfigurationServiceImpl;\n+import org.wso2.carbon.apimgt.impl.dao.GatewayArtifactsMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+public class GatewayArtifactsMgtDAOTest {\n+    public static GatewayArtifactsMgtDAO gatewayArtifactsMgtDAO;\n+    String apiUUID = \"1236233\";\n+    String apiName = \"testAddGatewayPublishedAPIDetails\";\n+    String version = \"1.0.0\";\n+    String label = \"Production and Sandbox\";\n+    ByteArrayInputStream anyInputStream = new ByteArrayInputStream(\"test data\".getBytes());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        String dbConfigPath = System.getProperty(\"APIManagerDBConfigurationPath\");\n+        APIManagerConfiguration config = new APIManagerConfiguration();\n+        initializeDatabase(dbConfigPath);\n+        config.load(dbConfigPath);\n+        ServiceReferenceHolder.getInstance().setAPIManagerConfigurationService(new APIManagerConfigurationServiceImpl\n+                (config));\n+        ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties().\n+                setArtifactSynchronizerDataSource(\"java:/comp/env/jdbc/WSO2AM_DB\");\n+        GatewayArtifactsMgtDBUtil.initialize();\n+        gatewayArtifactsMgtDAO = GatewayArtifactsMgtDAO.getInstance();\n+    }\n+\n+\n+    private static void initializeDatabase(String configFilePath) {\n+\n+        InputStream in;\n+        try {\n+            in = FileUtils.openInputStream(new File(configFilePath));\n+            StAXOMBuilder builder = new StAXOMBuilder(in);\n+            String dataSource = builder.getDocumentElement().getFirstChildWithName(new QName(\"DataSourceName\")).\n+                    getText();\n+            OMElement databaseElement = builder.getDocumentElement().getFirstChildWithName(new QName(\"Database\"));\n+            String databaseURL = databaseElement.getFirstChildWithName(new QName(\"URL\")).getText();\n+            String databaseUser = databaseElement.getFirstChildWithName(new QName(\"Username\")).getText();\n+            String databasePass = databaseElement.getFirstChildWithName(new QName(\"Password\")).getText();\n+            String databaseDriver = databaseElement.getFirstChildWithName(new QName(\"Driver\")).getText();\n+\n+            BasicDataSource basicDataSource = new BasicDataSource();\n+            basicDataSource.setDriverClassName(databaseDriver);\n+            basicDataSource.setUrl(databaseURL);\n+            basicDataSource.setUsername(databaseUser);\n+            basicDataSource.setPassword(databasePass);\n+\n+            // Create initial context\n+            System.setProperty(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"org.apache.naming.java.javaURLContextFactory\");\n+            System.setProperty(Context.URL_PKG_PREFIXES,\n+                    \"org.apache.naming\");\n+            try {\n+                InitialContext.doLookup(\"java:/comp/env/jdbc/WSO2AM_DB\");\n+            } catch (NamingException e) {\n+                InitialContext ic = new InitialContext();\n+                ic.createSubcontext(\"java:\");\n+                ic.createSubcontext(\"java:/comp\");\n+                ic.createSubcontext(\"java:/comp/env\");\n+                ic.createSubcontext(\"java:/comp/env/jdbc\");\n+\n+                ic.bind(\"java:/comp/env/jdbc/WSO2AM_DB\", basicDataSource);\n+            }\n+        } catch (XMLStreamException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTc0Ng=="}, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQzNTQxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo0ODo1NFrOG1SlHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0Nzo1OVrOG2iXiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMjEyNA==", "bodyText": "It would be preferential to have an integration test for covering the overall scenario since this a DB specific logic. This will allow this scenario to be covered correctly when run in Test grid with different DBs configured.", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r458532124", "createdAt": "2020-07-22T04:48:54Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;\n+\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfigurationServiceImpl;\n+import org.wso2.carbon.apimgt.impl.dao.GatewayArtifactsMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTM2OA==", "bodyText": "Will add the integration tests \ud83d\udc4d", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r459839368", "createdAt": "2020-07-24T03:47:59Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;\n+\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfigurationServiceImpl;\n+import org.wso2.carbon.apimgt.impl.dao.GatewayArtifactsMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.factory.KeyManagerHolder;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMjEyNA=="}, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQ0Njc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1NTo1MlrOG1SrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDowMTo0NFrOG2D-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzgwNA==", "bodyText": "Even though the function signature has been changed to return a boolean, no action is being done by checking the return type at call time.", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r458533804", "createdAt": "2020-07-22T04:55:52Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -49,9 +49,10 @@ public static GatewayArtifactsMgtDAO getInstance() {\n      * @param tenantDomain - Tenant domain of the API\n      * @throws APIManagementException if an error occurs\n      */\n-    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+    public boolean addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MTUyMw==", "bodyText": "We are checking the return flag in the test method https://github.com/wso2/carbon-apimgt/pull/9002/files#diff-5d5216ef9cc19eb82608ade2690638cdR106", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r459341523", "createdAt": "2020-07-23T10:01:44Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -49,9 +49,10 @@ public static GatewayArtifactsMgtDAO getInstance() {\n      * @param tenantDomain - Tenant domain of the API\n      * @throws APIManagementException if an error occurs\n      */\n-    public void addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)\n+    public boolean addGatewayPublishedAPIDetails(String APIId, String APIName, String version, String tenantDomain)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzgwNA=="}, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQ0NzEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1NjowNVrOG1Sr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDowMjowOVrOG2D_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzg2MQ==", "bodyText": "Even though the function signature has been changed to return a boolean, no action is being done by checking the return type at call time.", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r458533861", "createdAt": "2020-07-22T04:56:05Z", "author": {"login": "uvindra"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -77,23 +79,25 @@ public void addGatewayPublishedAPIDetails(String APIId, String APIName, String v\n      * @param streamLength - Length of the stream\n      * @throws APIManagementException if an error occurs\n      */\n-    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+    public boolean addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MTcxMQ==", "bodyText": "We are checking the return flag in the test method https://github.com/wso2/carbon-apimgt/pull/9002/files#diff-5d5216ef9cc19eb82608ade2690638cdR113", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r459341711", "createdAt": "2020-07-23T10:02:09Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java", "diffHunk": "@@ -77,23 +79,25 @@ public void addGatewayPublishedAPIDetails(String APIId, String APIName, String v\n      * @param streamLength - Length of the stream\n      * @throws APIManagementException if an error occurs\n      */\n-    public void addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,\n+    public boolean addGatewayPublishedAPIArtifacts(String APIId, String gatewayLabel, ByteArrayInputStream bais,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzg2MQ=="}, "originalCommit": {"oid": "a0ff086dcfd86c48b81e5da401f609052484712c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzUzNjY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDo0ODozNlrOHZZfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozOTo1N1rOIOgwLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM5NDA3Mg==", "bodyText": "Missing licence headers", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r496394072", "createdAt": "2020-09-29T04:48:36Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca3a99296eb9ea796869ee228c7e76f0e38123a7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4NzU5OQ==", "bodyText": "89302c9", "url": "https://github.com/wso2/carbon-apimgt/pull/9002#discussion_r552087599", "createdAt": "2021-01-05T17:39:57Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.wso2.carbon.apimgt.impl.dao.test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM5NDA3Mg=="}, "originalCommit": {"oid": "ca3a99296eb9ea796869ee228c7e76f0e38123a7"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3185, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}