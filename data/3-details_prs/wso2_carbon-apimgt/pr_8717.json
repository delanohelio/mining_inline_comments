{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODc3MTky", "number": 8717, "title": "[Feature]: PrivateJet mode for Microgateways", "bodyText": "This feature provides the support of deploying an API to a selected cloud cluster (ex Kubernetes)\n\nCorresponding cluster configurations can be added to the deployment.toml file or tenant-conf.json file as follows.\n\nDeployment.toml\n\n[[ContainerMgtClusterConfig]]\ntype=\"Kubernetes\"\nclusterId=\"docker-desktop\"\ndisplayName=\"docker-desktop-display\"\nproperties.Replicas=1\nproperties.IngressURL=\"mgw.ingress.wso2.com\"\nproperties.MasterURL=\"https://kubernetes.docker.internal:6443\"\nproperties.SAToken=\"\"\nproperties.Namespace=\"default\"\n\ntenant-conf.json\n\n\"ContainerMgt\": [\n{\n\"Type\": \"Kubernetes\",\n\"ContainerMgtInfo\": [\n{\n\"ClusterId\": \"\",\n\"DisplayName\": \"\",\n\"Properties\": {\n\"MasterURL\": \"\",\n\"IngressURL\": \"\",\n\"SAToken\": \"\",\n\"Namespace\": \"default\",\n\"Replicas\": 1,\n\"BasicSecurityCustomResourceName\": \"\",\n\"OauthSecurityCustomResourceName\": \"\",\n\"JWTSecurityCustomResourceName\": \"\" } }  ]  }  ],\n\n\n\nCan select set of clusters we need to deploy an API from the defined set by choosing the clusters from Environment tab in publisher.\n\n\nWhen publishing the API, it will be deployed to the selected clusters", "createdAt": "2020-06-11T06:53:30Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8717", "merged": true, "mergeCommit": {"oid": "4b47cff61f613f3cebbaaa675dca7003b5c51962"}, "closed": true, "closedAt": "2020-06-11T14:37:27Z", "author": {"login": "Shehanir"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqKdR6ABqjM0MzMxOTUwMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqPMm_gFqTQyODk3MzIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71d525b66ae1d7d66774b8341cffabe31cea0646", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/71d525b66ae1d7d66774b8341cffabe31cea0646", "committedDate": "2020-06-11T06:41:39Z", "message": "removing unwanted commited files  and formatting files"}, "afterCommit": {"oid": "d6282d453a2e11a7b28c49312364dc6c48fcc991", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/d6282d453a2e11a7b28c49312364dc6c48fcc991", "committedDate": "2020-06-11T08:56:37Z", "message": "removing unwanted commited files  and formatting files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzMwNzY3", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428730767", "createdAt": "2020-06-11T09:10:48Z", "commit": {"oid": "d6282d453a2e11a7b28c49312364dc6c48fcc991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOToxMDo0OFrOGiVB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOToxMDo0OFrOGiVB8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0OTMyOA==", "bodyText": "Add the license header.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438649328", "createdAt": "2020-06-11T09:10:48Z", "author": {"login": "pubudu538"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/DeploymentEnvironments.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6282d453a2e11a7b28c49312364dc6c48fcc991"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzYwNzUw", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428760750", "createdAt": "2020-06-11T09:52:22Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1MjoyM1rOGiWagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1MjoyM1rOGiWagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjAwMQ==", "bodyText": "This has to be otherway \"\".equals(oauthSecurityName) to avoid NPE", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438672001", "createdAt": "2020-06-11T09:52:23Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.containermgt;\n+\n+import io.swagger.models.SwaggerVersion;\n+import io.swagger.parser.OpenAPIParser;\n+import io.swagger.v3.core.util.Json;\n+import io.swagger.v3.oas.models.Components;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.security.*;\n+import io.swagger.v3.parser.core.models.SwaggerParseResult;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIDefinition;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.definitions.OAS3Parser;\n+import org.wso2.carbon.apimgt.impl.definitions.OASParserUtil;\n+\n+import java.util.*;\n+\n+/**\n+ * This class extends the OAS3Parser class in order to override its method\n+ * \"getOASDefinitionForPrivateJetMode\".\n+ */\n+public class SwaggerCreator {\n+\n+    private static final Log log = LogFactory.getLog(SwaggerCreator.class);\n+    private static final String OPENAPI_SECURITY_SCHEMA_KEY = \"default\";\n+    private boolean securityOauth2 = false;\n+    private boolean securityBasicAuth = false;\n+    private String basicSecurityName;\n+    private String jwtSecurityName;\n+    private String oauthSecurityName;\n+\n+    public SwaggerCreator(String basicSecurityName, String jwtSecurityName, String oauthSecurityName) {\n+\n+        this.basicSecurityName = basicSecurityName;\n+        this.jwtSecurityName = jwtSecurityName;\n+        this.oauthSecurityName = oauthSecurityName;\n+    }\n+\n+    public boolean isSecurityOauth2() {\n+        return securityOauth2;\n+    }\n+\n+    public boolean isSecurityBasicAuth() {\n+        return securityBasicAuth;\n+    }\n+\n+    /**\n+     * This method returns the swagger definition of an api\n+     * which suits for k8s_apim_operator\n+     *\n+     * @param api               API\n+     * @param oasDefinition     Open API definition\n+     * @return OAS definition\n+     * @throws APIManagementException throws if an error occurred\n+     * @throws ParseException         throws if the oasDefinition is not in json format\n+     */\n+\n+    public String getOASDefinitionForPrivateJetMode(API api, String oasDefinition)\n+            throws APIManagementException, ParseException {\n+\n+        APIDefinition oasParser = OASParserUtil.getOASParser(oasDefinition);\n+        String apiDefinition = oasParser.getOASDefinitionForPublisher(api, oasDefinition);\n+\n+        OASParserUtil.SwaggerVersion swaggerVersion = OASParserUtil.getSwaggerVersion(apiDefinition);\n+        if (swaggerVersion == OASParserUtil.SwaggerVersion.SWAGGER) {\n+            //parsing swagger 2.0 to openAPI 3.0.1\n+            OpenAPIParser openAPIParser = new OpenAPIParser();\n+            SwaggerParseResult swaggerParseResult = openAPIParser.readContents(apiDefinition, null, null);\n+            if (CollectionUtils.isNotEmpty(swaggerParseResult.getMessages())) {\n+                log.debug(\"Errors found when parsing OAS definition\");\n+            }\n+            OpenAPI openAPI = swaggerParseResult.getOpenAPI();\n+            apiDefinition = Json.pretty(openAPI);\n+        }\n+\n+        //get Json object from parsed openAPI definition\n+        JSONParser jsonParser = new JSONParser();\n+        JSONObject apiDefinitionJsonObject = (JSONObject) jsonParser.parse(apiDefinition);\n+\n+        /**\n+         * Removing the \"security\" key from the JSONObject\n+         */\n+        apiDefinitionJsonObject.remove(ContainerBasedConstants.SECURITY);\n+        ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.COMPONENTS))\n+                .get(ContainerBasedConstants.SECURITY_SCHEMES)).remove(ContainerBasedConstants.DEFAULT);\n+        Set<String> paths = ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).keySet();\n+        Iterator iterator = paths.iterator();\n+\n+        /**\n+         * Removing the \"security\" attribute from each RESTAPI verb of each path in the swagger\n+         */\n+        while (iterator.hasNext()) {\n+            String path = (String) iterator.next();\n+            Set verbs = ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS))\n+                    .get(path)).keySet();\n+            Iterator verbIterator = verbs.iterator();\n+            while (verbIterator.hasNext()) {\n+                String verb = (String) verbIterator.next();\n+                ((JSONObject) ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).\n+                        get(path)).get(verb)).remove(ContainerBasedConstants.SECURITY);\n+            }\n+        }\n+\n+        String securityType = api.getApiSecurity()\n+                .replace(ContainerBasedConstants.OAUTH_BASICAUTH_APIKEY_MANDATORY, \"\");\n+        Boolean securityTypeOauth2 = isAPISecurityTypeOauth2(securityType);\n+        Boolean securityTypeBasicAuth = isAPISecurityBasicAuth(securityType);\n+\n+        if (securityTypeBasicAuth && !securityTypeOauth2 && !basicSecurityName.equals(\"\")) {\n+\n+            SecurityRequirement basicOauthSecurityReq = referBasicAuthInSwagger(basicSecurityName);\n+            List<SecurityRequirement> basicAuth = new ArrayList<SecurityRequirement>();\n+            basicAuth.add(basicOauthSecurityReq);\n+            apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, basicAuth);\n+        } else if (securityTypeOauth2 && !securityTypeBasicAuth) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {\n+\n+                SecurityRequirement oauth2SecurityReq = referOauth2InSwagger(oauthSecurityName, jwtSecurityName);\n+                List<SecurityRequirement> oauth2 = new ArrayList<SecurityRequirement>();\n+                oauth2.add(oauth2SecurityReq);\n+                apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, oauth2);\n+            }\n+        } else if (securityTypeBasicAuth && securityTypeOauth2) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !basicSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzYyNDM3", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428762437", "createdAt": "2020-06-11T09:54:43Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDo0M1rOGiWfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDo0M1rOGiWfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MzI1NQ==", "bodyText": "Possible NPE. equal has be otherway.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438673255", "createdAt": "2020-06-11T09:54:43Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/SwaggerCreator.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.containermgt;\n+\n+import io.swagger.models.SwaggerVersion;\n+import io.swagger.parser.OpenAPIParser;\n+import io.swagger.v3.core.util.Json;\n+import io.swagger.v3.oas.models.Components;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.security.*;\n+import io.swagger.v3.parser.core.models.SwaggerParseResult;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIDefinition;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.definitions.OAS3Parser;\n+import org.wso2.carbon.apimgt.impl.definitions.OASParserUtil;\n+\n+import java.util.*;\n+\n+/**\n+ * This class extends the OAS3Parser class in order to override its method\n+ * \"getOASDefinitionForPrivateJetMode\".\n+ */\n+public class SwaggerCreator {\n+\n+    private static final Log log = LogFactory.getLog(SwaggerCreator.class);\n+    private static final String OPENAPI_SECURITY_SCHEMA_KEY = \"default\";\n+    private boolean securityOauth2 = false;\n+    private boolean securityBasicAuth = false;\n+    private String basicSecurityName;\n+    private String jwtSecurityName;\n+    private String oauthSecurityName;\n+\n+    public SwaggerCreator(String basicSecurityName, String jwtSecurityName, String oauthSecurityName) {\n+\n+        this.basicSecurityName = basicSecurityName;\n+        this.jwtSecurityName = jwtSecurityName;\n+        this.oauthSecurityName = oauthSecurityName;\n+    }\n+\n+    public boolean isSecurityOauth2() {\n+        return securityOauth2;\n+    }\n+\n+    public boolean isSecurityBasicAuth() {\n+        return securityBasicAuth;\n+    }\n+\n+    /**\n+     * This method returns the swagger definition of an api\n+     * which suits for k8s_apim_operator\n+     *\n+     * @param api               API\n+     * @param oasDefinition     Open API definition\n+     * @return OAS definition\n+     * @throws APIManagementException throws if an error occurred\n+     * @throws ParseException         throws if the oasDefinition is not in json format\n+     */\n+\n+    public String getOASDefinitionForPrivateJetMode(API api, String oasDefinition)\n+            throws APIManagementException, ParseException {\n+\n+        APIDefinition oasParser = OASParserUtil.getOASParser(oasDefinition);\n+        String apiDefinition = oasParser.getOASDefinitionForPublisher(api, oasDefinition);\n+\n+        OASParserUtil.SwaggerVersion swaggerVersion = OASParserUtil.getSwaggerVersion(apiDefinition);\n+        if (swaggerVersion == OASParserUtil.SwaggerVersion.SWAGGER) {\n+            //parsing swagger 2.0 to openAPI 3.0.1\n+            OpenAPIParser openAPIParser = new OpenAPIParser();\n+            SwaggerParseResult swaggerParseResult = openAPIParser.readContents(apiDefinition, null, null);\n+            if (CollectionUtils.isNotEmpty(swaggerParseResult.getMessages())) {\n+                log.debug(\"Errors found when parsing OAS definition\");\n+            }\n+            OpenAPI openAPI = swaggerParseResult.getOpenAPI();\n+            apiDefinition = Json.pretty(openAPI);\n+        }\n+\n+        //get Json object from parsed openAPI definition\n+        JSONParser jsonParser = new JSONParser();\n+        JSONObject apiDefinitionJsonObject = (JSONObject) jsonParser.parse(apiDefinition);\n+\n+        /**\n+         * Removing the \"security\" key from the JSONObject\n+         */\n+        apiDefinitionJsonObject.remove(ContainerBasedConstants.SECURITY);\n+        ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.COMPONENTS))\n+                .get(ContainerBasedConstants.SECURITY_SCHEMES)).remove(ContainerBasedConstants.DEFAULT);\n+        Set<String> paths = ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).keySet();\n+        Iterator iterator = paths.iterator();\n+\n+        /**\n+         * Removing the \"security\" attribute from each RESTAPI verb of each path in the swagger\n+         */\n+        while (iterator.hasNext()) {\n+            String path = (String) iterator.next();\n+            Set verbs = ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS))\n+                    .get(path)).keySet();\n+            Iterator verbIterator = verbs.iterator();\n+            while (verbIterator.hasNext()) {\n+                String verb = (String) verbIterator.next();\n+                ((JSONObject) ((JSONObject) ((JSONObject) apiDefinitionJsonObject.get(ContainerBasedConstants.PATHS)).\n+                        get(path)).get(verb)).remove(ContainerBasedConstants.SECURITY);\n+            }\n+        }\n+\n+        String securityType = api.getApiSecurity()\n+                .replace(ContainerBasedConstants.OAUTH_BASICAUTH_APIKEY_MANDATORY, \"\");\n+        Boolean securityTypeOauth2 = isAPISecurityTypeOauth2(securityType);\n+        Boolean securityTypeBasicAuth = isAPISecurityBasicAuth(securityType);\n+\n+        if (securityTypeBasicAuth && !securityTypeOauth2 && !basicSecurityName.equals(\"\")) {\n+\n+            SecurityRequirement basicOauthSecurityReq = referBasicAuthInSwagger(basicSecurityName);\n+            List<SecurityRequirement> basicAuth = new ArrayList<SecurityRequirement>();\n+            basicAuth.add(basicOauthSecurityReq);\n+            apiDefinitionJsonObject.put(ContainerBasedConstants.SECURITY, basicAuth);\n+        } else if (securityTypeOauth2 && !securityTypeBasicAuth) {\n+\n+            if (!oauthSecurityName.equals(\"\") || !jwtSecurityName.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzY0NjQ3", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428764647", "createdAt": "2020-06-11T09:57:48Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo0OFrOGiWl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo0OFrOGiWl2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDkwNQ==", "bodyText": "Why we have commented these. If not needed,  let's remove these", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438674905", "createdAt": "2020-06-11T09:57:48Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/APICustomResourceDefinitionSpec.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.containermgt.k8scrd;\n+\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+\n+@JsonDeserialize(using = JsonDeserializer.None.class)\n+\n+public class APICustomResourceDefinitionSpec implements KubernetesResource {\n+\n+    private String mode;\n+    private String updateTimeStamp;\n+    private int replicas;\n+    private Definition definition;\n+    private boolean override;\n+//    private String version;\n+\n+    public String getUpdateTimeStamp() {\n+        return updateTimeStamp;\n+    }\n+\n+    public void setUpdateTimeStamp(String updateTimeStamp) {\n+        this.updateTimeStamp = updateTimeStamp;\n+    }\n+\n+    public boolean isOverride() {\n+        return override;\n+    }\n+\n+    public void setOverride(boolean override) {\n+        this.override = override;\n+    }\n+\n+    public Definition getDefinition() {\n+        return definition;\n+    }\n+\n+    public void setDefinition(Definition definition) {\n+        this.definition = definition;\n+    }\n+\n+    public int getReplicas() {\n+        return replicas;\n+    }\n+\n+    public void setReplicas(int replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    public String getMode() {\n+        return mode;\n+    }\n+\n+    public void setMode(String mode) {\n+        this.mode = mode;\n+    }\n+\n+//    public String getVersion() { return version; }\n+//\n+//    public void setVersion(String version) { this.version = version; }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzY1MTU2", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428765156", "createdAt": "2020-06-11T09:58:34Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNFrOGiWnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNFrOGiWnbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NTMxMQ==", "bodyText": "Add a new line. There are multiple places. Please check.", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438675311", "createdAt": "2020-06-11T09:58:34Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/containermgt/k8scrd/DoneableAPICustomResourceDefinition.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.containermgt.k8scrd;\n+\n+import io.fabric8.kubernetes.api.builder.Function;\n+import io.fabric8.kubernetes.client.CustomResourceDoneable;\n+\n+public class DoneableAPICustomResourceDefinition extends CustomResourceDoneable<APICustomResourceDefinition> {\n+\n+    public DoneableAPICustomResourceDefinition(APICustomResourceDefinition resource, Function function) {\n+        super(resource, function);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzY2NjQx", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428766641", "createdAt": "2020-06-11T10:00:35Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDozNVrOGiWsJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDozNVrOGiWsJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjUxOA==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438676518", "createdAt": "2020-06-11T10:00:35Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java", "diffHunk": "@@ -1064,6 +1094,18 @@ public static APIDTO fromAPItoDTO(API model) throws APIManagementException {\n         }\n         dto.setCategories(categoryNameList);\n         dto.setKeyManagers(model.getKeyManagers());\n+\n+        if(model.getDeploymentEnvironments() != null && !model.getDeploymentEnvironments().isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzY2ODYw", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428766860", "createdAt": "2020-06-11T10:00:53Z", "commit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDo1NFrOGiWs7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDo1NFrOGiWs7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjcxOQ==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#discussion_r438676719", "createdAt": "2020-06-11T10:00:54Z", "author": {"login": "dinusha92"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/DeploymentsMappingUtil.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.publisher.v1.utils.mappings;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIMRegistryService;\n+import org.wso2.carbon.apimgt.impl.APIMRegistryServiceImpl;\n+import org.wso2.carbon.apimgt.impl.containermgt.ContainerBasedConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentClusterInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentListDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.DeploymentsDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.apimgt.impl.utils.APIUtil.handleException;\n+\n+public class DeploymentsMappingUtil {\n+\n+    private static final Log log = LogFactory.getLog(DeploymentsMappingUtil.class);\n+    public static final String SUPER_TENANT_DOMAIN_NAME = \"carbon.super\";\n+\n+    /**\n+     * This method feeds data into DeploymentsDTO list from tenant-conf.json/ api-manager.xml\n+     *\n+     * @return DeploymentsDTO list. List of Deployments\n+     * @throws APIManagementException\n+     */\n+    public DeploymentListDTO fromTenantConftoDTO() throws APIManagementException {\n+\n+        DeploymentListDTO deploymentListDTO = new DeploymentListDTO();\n+        List<DeploymentsDTO> deploymentsList = new ArrayList<DeploymentsDTO>();\n+\n+        //Get cloud environments from tenant-conf.json file\n+        //Get tenant domain to access tenant conf\n+        APIMRegistryService apimRegistryService = new APIMRegistryServiceImpl();\n+        String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+        //read tenant-conf.json and get details\n+        if (SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)){\n+            //get details from deployment.toml\n+            JSONArray containerMgtInfo = APIUtil.getClusterInfoFromAPIMConfig();\n+            if(!containerMgtInfo.isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f9b79266596277228fc9c69c290df339aee1a"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27de02588a7abf11b099d3f91b8afa6f43bcd133", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/27de02588a7abf11b099d3f91b8afa6f43bcd133", "committedDate": "2020-06-11T10:18:21Z", "message": "adding requseted changes"}, "afterCommit": {"oid": "895b405bdc5b82d1aad30360796d530df6e7bf5a", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/895b405bdc5b82d1aad30360796d530df6e7bf5a", "committedDate": "2020-06-11T12:12:45Z", "message": "resolving merge conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "895b405bdc5b82d1aad30360796d530df6e7bf5a", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/895b405bdc5b82d1aad30360796d530df6e7bf5a", "committedDate": "2020-06-11T12:12:45Z", "message": "resolving merge conflicts"}, "afterCommit": {"oid": "13f475c086b3a3594ae5329fc078d7a8abfc8857", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/13f475c086b3a3594ae5329fc078d7a8abfc8857", "committedDate": "2020-06-11T12:55:16Z", "message": "resolving conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13f475c086b3a3594ae5329fc078d7a8abfc8857", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/13f475c086b3a3594ae5329fc078d7a8abfc8857", "committedDate": "2020-06-11T12:55:16Z", "message": "resolving conflicts"}, "afterCommit": {"oid": "5580a50c9b81bf2e037f123a2bb25137f2b54474", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/5580a50c9b81bf2e037f123a2bb25137f2b54474", "committedDate": "2020-06-11T14:00:57Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65ad2e6ad2f913865169525b0d7f34ad66ab46c1", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/65ad2e6ad2f913865169525b0d7f34ad66ab46c1", "committedDate": "2020-06-11T14:02:54Z", "message": "Private Jet Mode classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a4b8f6700b7b508c7f31783ab2386123ab716e0", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/2a4b8f6700b7b508c7f31783ab2386123ab716e0", "committedDate": "2020-06-11T14:02:55Z", "message": "Implementing private jet mode methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba4e8a5a69cdbabb9d88276165b81f27c3fd01a", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/cba4e8a5a69cdbabb9d88276165b81f27c3fd01a", "committedDate": "2020-06-11T14:02:55Z", "message": "Implementing the UI part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "501798d487c1bab1d4126e346244d71cf0a85cb1", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/501798d487c1bab1d4126e346244d71cf0a85cb1", "committedDate": "2020-06-11T14:02:55Z", "message": "Implementing the UI part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9636de335adf4a31be7e51ff780abd86dcbd05", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1b9636de335adf4a31be7e51ff780abd86dcbd05", "committedDate": "2020-06-11T14:02:55Z", "message": "Implementing the UI part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c8d90d0494d3002a915bbf6158921ddbdaa7bf", "author": {"user": {"login": "SachithKasthuriarachchi", "name": "Sachith Kasthuriarachchi"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d5c8d90d0494d3002a915bbf6158921ddbdaa7bf", "committedDate": "2020-06-11T14:02:55Z", "message": "Updating the pom to include jars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361f0bc30a8c7bae1a899092e7125a1b6485dfad", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/361f0bc30a8c7bae1a899092e7125a1b6485dfad", "committedDate": "2020-06-11T14:02:55Z", "message": "correcting cluster info retrival path with DTOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ccf9ce448511f8389fb43d37751ece5b0d860de", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/6ccf9ce448511f8389fb43d37751ece5b0d860de", "committedDate": "2020-06-11T14:02:55Z", "message": "adding temp changes for private jet mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97053e49562b908c7a18d351f4c1adf7f2143331", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/97053e49562b908c7a18d351f4c1adf7f2143331", "committedDate": "2020-06-11T14:02:55Z", "message": "adding swagger converter to convert swagger 2 to 3.0.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5cb411d66fe58431b5c20ac063ac6ed3eef0c65", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/f5cb411d66fe58431b5c20ac063ac6ed3eef0c65", "committedDate": "2020-06-11T14:02:55Z", "message": "adding feasibility to run in local k8s clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e737bc17e9307aaa978f7f78ade45ebceea5d90c", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/e737bc17e9307aaa978f7f78ade45ebceea5d90c", "committedDate": "2020-06-11T14:04:29Z", "message": "adding osgi bundling of kubernetes dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03966178f08e09442e028ac3514e666d9db460ea", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/03966178f08e09442e028ac3514e666d9db460ea", "committedDate": "2020-06-11T14:04:29Z", "message": "adding changes to tenant-conf and publisher-yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295b8ba0bd937301bd727c77af4b089a62b45ac7", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/295b8ba0bd937301bd727c77af4b089a62b45ac7", "committedDate": "2020-06-11T14:04:29Z", "message": "Rest API design(/get and post) for APIM private jet mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ab314cb4086da55771417d511262daf3bec93a1", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/0ab314cb4086da55771417d511262daf3bec93a1", "committedDate": "2020-06-11T14:04:29Z", "message": "doc chnages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fe58e8015a68b0023442febf0bf94dcf70b93c", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d9fe58e8015a68b0023442febf0bf94dcf70b93c", "committedDate": "2020-06-11T14:04:29Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0181c7e5b4ea1833c17d9b94478e5dec0c19d8a", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d0181c7e5b4ea1833c17d9b94478e5dec0c19d8a", "committedDate": "2020-06-11T14:04:29Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea4ea2c964803b37079cd4f214517ec84643a28", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/dea4ea2c964803b37079cd4f214517ec84643a28", "committedDate": "2020-06-11T14:04:29Z", "message": "adding modified files after resetting head"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f732b96cdd7c2d53285303837d0b5822b9b064", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/27f732b96cdd7c2d53285303837d0b5822b9b064", "committedDate": "2020-06-11T14:04:30Z", "message": "changes added to support with new api operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d24aaa71b512d1b2ffeecd1b0abd1c88f6db8b", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/32d24aaa71b512d1b2ffeecd1b0abd1c88f6db8b", "committedDate": "2020-06-11T14:04:30Z", "message": "refactoring APIs and adding API to get pods health status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ac42e38119e790c4760e76ef3ba4a583841561", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/51ac42e38119e790c4760e76ef3ba4a583841561", "committedDate": "2020-06-11T14:04:30Z", "message": "adding docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2bc16fb6fe00afe3d810b4acace1bf2b36c30f", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fe2bc16fb6fe00afe3d810b4acace1bf2b36c30f", "committedDate": "2020-06-11T14:04:30Z", "message": "resolving eslint errors and update project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f76ea1ca896801790a25affc3848155c7a9d901", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/8f76ea1ca896801790a25affc3848155c7a9d901", "committedDate": "2020-06-11T14:04:30Z", "message": "configuration revamping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4b18fafc6d32b337310d3fd575a307cb8ac384", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/8f4b18fafc6d32b337310d3fd575a307cb8ac384", "committedDate": "2020-06-11T14:04:31Z", "message": "adding devportal support and requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb0fd2899138847346c31f60e53328a71b73d25f", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/bb0fd2899138847346c31f60e53328a71b73d25f", "committedDate": "2020-06-11T14:04:31Z", "message": "adding docs changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9406e4260115eb5429052a1f548a52a9aee6ccf", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/a9406e4260115eb5429052a1f548a52a9aee6ccf", "committedDate": "2020-06-11T14:04:31Z", "message": "removing unwanted commited files  and formatting files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5eca89c1ed2d5a55fd22eb6f0cdf7482f0241ac", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/d5eca89c1ed2d5a55fd22eb6f0cdf7482f0241ac", "committedDate": "2020-06-11T14:04:31Z", "message": "adding license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19289f8b9b58fca76b685ab3a3f0890c0c552f7", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/d19289f8b9b58fca76b685ab3a3f0890c0c552f7", "committedDate": "2020-06-11T14:04:31Z", "message": "adding requseted changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17171bf681d9a37e7140b3b9ba116db08c88e4f", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/e17171bf681d9a37e7140b3b9ba116db08c88e4f", "committedDate": "2020-06-11T14:09:54Z", "message": "resolving merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1314b8b7ac9ab611fa00d228247e446e548335", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/8c1314b8b7ac9ab611fa00d228247e446e548335", "committedDate": "2020-06-11T14:09:54Z", "message": "resolving merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e2888675b9e789a70a983c06361546e867c871a", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/5e2888675b9e789a70a983c06361546e867c871a", "committedDate": "2020-06-11T14:09:54Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "133afc8536fde502a6dde7ff450a39954d76ec64", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/133afc8536fde502a6dde7ff450a39954d76ec64", "committedDate": "2020-06-11T14:09:54Z", "message": "resolving conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5580a50c9b81bf2e037f123a2bb25137f2b54474", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/5580a50c9b81bf2e037f123a2bb25137f2b54474", "committedDate": "2020-06-11T14:00:57Z", "message": "resolving conflicts"}, "afterCommit": {"oid": "133afc8536fde502a6dde7ff450a39954d76ec64", "author": {"user": null}, "url": "https://github.com/wso2/carbon-apimgt/commit/133afc8536fde502a6dde7ff450a39954d76ec64", "committedDate": "2020-06-11T14:09:54Z", "message": "resolving conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1147dca48dfa9b92eb6d5e893d4df07bd0513b", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/ad1147dca48dfa9b92eb6d5e893d4df07bd0513b", "committedDate": "2020-06-11T14:27:57Z", "message": "Delete api#am#admin.war"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ae15b0b8dbfd3259aefce6eeb87a7026b29bb1", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/77ae15b0b8dbfd3259aefce6eeb87a7026b29bb1", "committedDate": "2020-06-11T14:28:40Z", "message": "Delete api#am#store.war"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70024bed99adafdf38b742af7d7a39ea693a2ca", "author": {"user": {"login": "Shehanir", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/d70024bed99adafdf38b742af7d7a39ea693a2ca", "committedDate": "2020-06-11T14:29:08Z", "message": "Delete WSO2AM_DB.mv.db"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTczMjE4", "url": "https://github.com/wso2/carbon-apimgt/pull/8717#pullrequestreview-428973218", "createdAt": "2020-06-11T14:33:15Z", "commit": {"oid": "d70024bed99adafdf38b742af7d7a39ea693a2ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2630, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}