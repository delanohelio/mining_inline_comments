{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzcyMDA1", "number": 8927, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo0MDo0NVrOEL7C4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo0NjoyNVrOEL7F3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTM3MTg0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/TenantThemeApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo0MDo0NVrOGtu3bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNTo1MVrOGuGS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNjk1Nw==", "bodyText": "Shall we propagate the \"e\" object as well? Otherwise, the stacktrace will be swallowed.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new APIManagementException(e.getMessage(),\n          \n          \n            \n                                ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_FAILED, tenantDomain, e.getMessage()));\n          \n          \n            \n                        throw new APIManagementException(e.getMessage(), e,\n          \n          \n            \n                                ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_FAILED, tenantDomain, e.getMessage()));", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450606957", "createdAt": "2020-07-07T04:40:45Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/TenantThemeApiServiceImpl.java", "diffHunk": "@@ -16,43 +16,98 @@\n  */\n package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.apimgt.api.APIManagementException;\n \n import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.ExceptionCodes;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.TenantThemeApiService;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.utils.RestApiAdminUtils;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.InputStream;\n \n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n public class TenantThemeApiServiceImpl implements TenantThemeApiService {\n \n     private static final Log log = LogFactory.getLog(TenantThemeApiServiceImpl.class);\n+    private static final String TENANT_THEMES_EXPORT_DIR_PREFIX = \"exported-tenant-themes\";\n \n     /**\n-     * Import an Tenant Theme for a particular tenant by uploading an archive file.\n+     * Import a Tenant Theme for a particular tenant by uploading an archive file.\n      *\n      * @param fileInputStream content relevant to the tenant theme\n      * @param fileDetail      file details as Attachment\n+     * @param messageContext\n      * @return Theme import response\n+     * @throws APIManagementException if an error occurs when importing a tenant theme\n      */\n     @Override\n-    public Response tenantThemeImportPost(InputStream fileInputStream, Attachment fileDetail,\n-                                          MessageContext messageContext) {\n+    public Response importTenantTheme(InputStream fileInputStream, Attachment fileDetail, MessageContext messageContext)\n+            throws APIManagementException {\n \n         String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+        if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+            String errorMessage = \"Super Tenant \" + MultitenantConstants.SUPER_TENANT_DOMAIN_NAME +\n+                    \" is not allowed to import a tenant theme\";\n+            throw new APIManagementException(errorMessage,\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_NOT_ALLOWED,\n+                            MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+        }\n+\n         try {\n-            RestApiAdminUtils.deployTenantTheme(fileInputStream, tenantDomain);\n+            RestApiAdminUtils.importTenantTheme(fileInputStream, tenantDomain);\n             return Response.status(Response.Status.OK).entity(\"Theme imported successfully\").build();\n-        } catch (APIManagementException e) {\n-            String errorMessage = \"Error while importing tenant theme for tenant \" + tenantDomain;\n-            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        } catch (IOException e) {\n+            throw new APIManagementException(e.getMessage(),\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_FAILED, tenantDomain, e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzA2Ng==", "bodyText": "Please fix this in other places as well.", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450607066", "createdAt": "2020-07-07T04:41:12Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/TenantThemeApiServiceImpl.java", "diffHunk": "@@ -16,43 +16,98 @@\n  */\n package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.apimgt.api.APIManagementException;\n \n import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.ExceptionCodes;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.TenantThemeApiService;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.utils.RestApiAdminUtils;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.InputStream;\n \n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n public class TenantThemeApiServiceImpl implements TenantThemeApiService {\n \n     private static final Log log = LogFactory.getLog(TenantThemeApiServiceImpl.class);\n+    private static final String TENANT_THEMES_EXPORT_DIR_PREFIX = \"exported-tenant-themes\";\n \n     /**\n-     * Import an Tenant Theme for a particular tenant by uploading an archive file.\n+     * Import a Tenant Theme for a particular tenant by uploading an archive file.\n      *\n      * @param fileInputStream content relevant to the tenant theme\n      * @param fileDetail      file details as Attachment\n+     * @param messageContext\n      * @return Theme import response\n+     * @throws APIManagementException if an error occurs when importing a tenant theme\n      */\n     @Override\n-    public Response tenantThemeImportPost(InputStream fileInputStream, Attachment fileDetail,\n-                                          MessageContext messageContext) {\n+    public Response importTenantTheme(InputStream fileInputStream, Attachment fileDetail, MessageContext messageContext)\n+            throws APIManagementException {\n \n         String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+        if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+            String errorMessage = \"Super Tenant \" + MultitenantConstants.SUPER_TENANT_DOMAIN_NAME +\n+                    \" is not allowed to import a tenant theme\";\n+            throw new APIManagementException(errorMessage,\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_NOT_ALLOWED,\n+                            MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+        }\n+\n         try {\n-            RestApiAdminUtils.deployTenantTheme(fileInputStream, tenantDomain);\n+            RestApiAdminUtils.importTenantTheme(fileInputStream, tenantDomain);\n             return Response.status(Response.Status.OK).entity(\"Theme imported successfully\").build();\n-        } catch (APIManagementException e) {\n-            String errorMessage = \"Error while importing tenant theme for tenant \" + tenantDomain;\n-            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        } catch (IOException e) {\n+            throw new APIManagementException(e.getMessage(),\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_FAILED, tenantDomain, e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNjk1Nw=="}, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MDgzMA==", "bodyText": "Fixed with 5c1474f", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450990830", "createdAt": "2020-07-07T16:25:51Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/TenantThemeApiServiceImpl.java", "diffHunk": "@@ -16,43 +16,98 @@\n  */\n package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.apimgt.api.APIManagementException;\n \n import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.ExceptionCodes;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.TenantThemeApiService;\n import org.wso2.carbon.apimgt.rest.api.admin.v1.utils.RestApiAdminUtils;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.InputStream;\n \n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n public class TenantThemeApiServiceImpl implements TenantThemeApiService {\n \n     private static final Log log = LogFactory.getLog(TenantThemeApiServiceImpl.class);\n+    private static final String TENANT_THEMES_EXPORT_DIR_PREFIX = \"exported-tenant-themes\";\n \n     /**\n-     * Import an Tenant Theme for a particular tenant by uploading an archive file.\n+     * Import a Tenant Theme for a particular tenant by uploading an archive file.\n      *\n      * @param fileInputStream content relevant to the tenant theme\n      * @param fileDetail      file details as Attachment\n+     * @param messageContext\n      * @return Theme import response\n+     * @throws APIManagementException if an error occurs when importing a tenant theme\n      */\n     @Override\n-    public Response tenantThemeImportPost(InputStream fileInputStream, Attachment fileDetail,\n-                                          MessageContext messageContext) {\n+    public Response importTenantTheme(InputStream fileInputStream, Attachment fileDetail, MessageContext messageContext)\n+            throws APIManagementException {\n \n         String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+        if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+            String errorMessage = \"Super Tenant \" + MultitenantConstants.SUPER_TENANT_DOMAIN_NAME +\n+                    \" is not allowed to import a tenant theme\";\n+            throw new APIManagementException(errorMessage,\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_NOT_ALLOWED,\n+                            MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+        }\n+\n         try {\n-            RestApiAdminUtils.deployTenantTheme(fileInputStream, tenantDomain);\n+            RestApiAdminUtils.importTenantTheme(fileInputStream, tenantDomain);\n             return Response.status(Response.Status.OK).entity(\"Theme imported successfully\").build();\n-        } catch (APIManagementException e) {\n-            String errorMessage = \"Error while importing tenant theme for tenant \" + tenantDomain;\n-            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        } catch (IOException e) {\n+            throw new APIManagementException(e.getMessage(),\n+                    ExceptionCodes.from(ExceptionCodes.TENANT_THEME_IMPORT_FAILED, tenantDomain, e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNjk1Nw=="}, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTM3Nzk5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo0NTowOFrOGtu7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNToxMlrOGuGRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzkxMA==", "bodyText": "Did we test this with larger files around several MBs?\nFor the safe-side we can retrieve the theme from the Database without resetting and reusing the stream.", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450607910", "createdAt": "2020-07-07T04:45:08Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -156,35 +164,62 @@ public static String constructMissingThrottleObjectErrorMessage(Enum<?> typeEnum\n     }\n \n     /**\n-     * Extract the content of the provided tenant theme archive\n+     * Import the content of the provided tenant theme archive to the file system and the database\n      *\n-     * @param themeFile    content relevant to the tenant theme\n-     * @param tenantDomain tenant to which the theme is imported\n-     * @throws APIManagementException if an error occurs while importing tenant theme\n+     * @param themeContentInputStream content relevant to the tenant theme\n+     * @param tenantDomain            tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing the tenant theme\n+     * @throws IOException            if an error occurs while performing file or directory related operations\n      */\n-    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+    public static void importTenantTheme(InputStream themeContentInputStream, String tenantDomain)\n+            throws APIManagementException, IOException {\n \n         ZipInputStream zipInputStream = null;\n         byte[] buffer = new byte[1024];\n+        InputStream existingTenantTheme = null;\n+        ByteArrayInputStream themeContent = null;\n+        File tenantThemeDirectory;\n+        File backupDirectory = null;\n \n-        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n-                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n-                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n \n         try {\n-            //create output directory if it does not exist\n-            File folder = new File(outputFolder);\n-            if (!folder.exists()) {\n-                if (!folder.mkdirs()) {\n+            //convert InputStream to ByteArrayInputStream to be able to read the tenant theme content twice\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            IOUtils.copy(themeContentInputStream, baos);\n+            byte[] bytes = baos.toByteArray();\n+            themeContent = new ByteArrayInputStream(bytes);\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            //add or update the tenant theme in the database\n+            if (apiAdmin.isTenantThemeExist(tenantId)) {\n+                existingTenantTheme = apiAdmin.getTenantTheme(tenantId);\n+                apiAdmin.updateTenantTheme(tenantId, themeContent);\n+            } else {\n+                apiAdmin.addTenantTheme(tenantId, themeContent);\n+            }\n+            //reset the InputStream to the initial position since it was completely read when adding to the database\n+            themeContent.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MDQ0Mg==", "bodyText": "Fixed with b2a2a0d", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450990442", "createdAt": "2020-07-07T16:25:12Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -156,35 +164,62 @@ public static String constructMissingThrottleObjectErrorMessage(Enum<?> typeEnum\n     }\n \n     /**\n-     * Extract the content of the provided tenant theme archive\n+     * Import the content of the provided tenant theme archive to the file system and the database\n      *\n-     * @param themeFile    content relevant to the tenant theme\n-     * @param tenantDomain tenant to which the theme is imported\n-     * @throws APIManagementException if an error occurs while importing tenant theme\n+     * @param themeContentInputStream content relevant to the tenant theme\n+     * @param tenantDomain            tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing the tenant theme\n+     * @throws IOException            if an error occurs while performing file or directory related operations\n      */\n-    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+    public static void importTenantTheme(InputStream themeContentInputStream, String tenantDomain)\n+            throws APIManagementException, IOException {\n \n         ZipInputStream zipInputStream = null;\n         byte[] buffer = new byte[1024];\n+        InputStream existingTenantTheme = null;\n+        ByteArrayInputStream themeContent = null;\n+        File tenantThemeDirectory;\n+        File backupDirectory = null;\n \n-        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n-                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n-                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n \n         try {\n-            //create output directory if it does not exist\n-            File folder = new File(outputFolder);\n-            if (!folder.exists()) {\n-                if (!folder.mkdirs()) {\n+            //convert InputStream to ByteArrayInputStream to be able to read the tenant theme content twice\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            IOUtils.copy(themeContentInputStream, baos);\n+            byte[] bytes = baos.toByteArray();\n+            themeContent = new ByteArrayInputStream(bytes);\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            //add or update the tenant theme in the database\n+            if (apiAdmin.isTenantThemeExist(tenantId)) {\n+                existingTenantTheme = apiAdmin.getTenantTheme(tenantId);\n+                apiAdmin.updateTenantTheme(tenantId, themeContent);\n+            } else {\n+                apiAdmin.addTenantTheme(tenantId, themeContent);\n+            }\n+            //reset the InputStream to the initial position since it was completely read when adding to the database\n+            themeContent.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzkxMA=="}, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTM3OTQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo0NjoyNVrOGtu8Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNToyOTowNVrOGvCLjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODE1NQ==", "bodyText": "Were we able to test with around 11MB? is this config working properly?", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450608155", "createdAt": "2020-07-07T04:46:25Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "diffHunk": "@@ -57,6 +57,8 @@\n         <jaxrs:properties>\n             <!-- This is added to catch interceptor level exceptions in GlobalThrowableMapper. -->\n             <entry key=\"map.cxf.interceptor.fault\" value=\"true\" />\n+            <!-- This is added to restrict the size of attachments sent through the requests. -->\n+            <entry key=\"attachment-max-size\" value=\"10485760\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4ODUzOA==", "bodyText": "Yes. It gives a \"HTTP/1.1 413 (Payload Too Large)\" code.", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r450988538", "createdAt": "2020-07-07T16:22:02Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "diffHunk": "@@ -57,6 +57,8 @@\n         <jaxrs:properties>\n             <!-- This is added to catch interceptor level exceptions in GlobalThrowableMapper. -->\n             <entry key=\"map.cxf.interceptor.fault\" value=\"true\" />\n+            <!-- This is added to restrict the size of attachments sent through the requests. -->\n+            <entry key=\"attachment-max-size\" value=\"10485760\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODE1NQ=="}, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk3MTk4MQ==", "bodyText": "I think we need to have this in all REST APIs, lets do it in a separate PR.", "url": "https://github.com/wso2/carbon-apimgt/pull/8927#discussion_r451971981", "createdAt": "2020-07-09T05:29:05Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "diffHunk": "@@ -57,6 +57,8 @@\n         <jaxrs:properties>\n             <!-- This is added to catch interceptor level exceptions in GlobalThrowableMapper. -->\n             <entry key=\"map.cxf.interceptor.fault\" value=\"true\" />\n+            <!-- This is added to restrict the size of attachments sent through the requests. -->\n+            <entry key=\"attachment-max-size\" value=\"10485760\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODE1NQ=="}, "originalCommit": {"oid": "c50817bed7c88a3de4fd5df672104223201738ac"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}