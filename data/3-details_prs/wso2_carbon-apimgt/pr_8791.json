{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDU5MDI3", "number": 8791, "title": "Revamping admin REST API bot detection alerts subscription resources", "bodyText": "Purpose\nThe admin v0.16 REST API has the following resources which handles the bot detection alerts subscriptions.\n\n\n\nFunctionality\nResource\nOperation\n\n\n\n\nRetrieve the list of subscriptions for bot detection alerts\nbotData/getEmailList\nGET\n\n\nSubscribe for bot detection alerts\nbotData/addEmail\nPOST\n\n\nUnsubscribe from bot detection alerts\nbotData/deleteEmail\nDELETE\n\n\n\nThis PR will revamp the following resources as described in the Approach Section\nCloses: wso2/product-apim#8400\nApproach\nThe admin v1 REST API has the alert-subscriptions resource which manages the admin alert subscriptions. This PR will revamp the bot detection alert subscriptions as operations of a sub-resource(bot-detection) of the alert-subscriptions resource. The resources will be revamped as follows.\n\n\n\nFunctionality\nResource\nOperation\n\n\n\n\nRetrieve the list of subscriptions for bot detection alerts\nalert-subscriptions/bot-detection\nGET\n\n\nSubscribe for bot detection alerts\nalert-subscriptions/bot-detection\nPOST\n\n\nUnsubscribe from bot detection alerts\nalert-subscriptions/bot-detection/{uuid}\nDELETE\n\n\n\n\nAdded resources mentioned above with their respective operations to admin-api.yaml.\nIntroduced new Schemas as BotDetectionAlertSubscriptionList and BotDetectionAlertSubscription to represent the Bot Detection Alert Subscription DTO.\nUsed the existing Impl and DAO methods for the implementations of the resource functionalities.\nAdded new Impl and DAO methods to get Bot Detection Alert Subscription by uuid and email to handle validations such as resource already exists in POST operations and resource not found in DELETE operation.\nUsed the existing BotDetectionMappingUtil.java class to convert Bot Detection Alert Subscription model objects to Bot Detection Alert Subscription DTOs.\n\nUser Stories\n\nScenario 1 - Subscribing to Bot Detection Alerts by providing email\n\n\nRequest\n\n curl -k -X POST -H \"Authorization: Bearer fe3d14ff-2429-3869-adb0-1aa573ca88e4\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v1/alert-subscriptions/bot-detection -d '{\"email\":xyz@abc.com\"}'\n\n\nResponse\n\n{\n    \"uuid\": \"f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0\",\n    \"email\": \"xyz@abc.com\"\n}\n\n\nScenario 2 - Subscribing to Bot Detection Alerts by providing an already subscribed email\n\n\nRequest\n\ncurl -k -X POST -H \"Authorization: Bearer fe3d14ff-2429-3869-adb0-1aa573ca88e4\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v1/alert-subscriptions/bot-detection -d '{\"email\":\"xyz@abc.com\"}'\n\n\nResponse\n\n{\n    \"code\": 409,\n    \"message\": \"Resource Already Exists\",\n    \"description\": \"Email: xyz@abc.com has already been subscribed for bot detection alerts\",\n    \"moreInfo\": \"\",\n    \"error\": []\n}\n\n\nCarbon console\n\nERROR - AlertSubscriptionsApiServiceImpl Email: abc.com has already been subscribed for bot detection alerts\n\n\nScenario 3 - Retrieving Bot Detection Alerts Subscriptions\n\n\nRequest\n\ncurl -k -X GET -H \"Authorization: Bearer fe3d14ff-2429-3869-adb0-1aa573ca88e4\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v1/alert-subscriptions/bot-detection\n\n\nResponse\n\n{\n    \"count\": 2,\n    \"list\": [\n        {\n            \"uuid\": \"bee64f26-39ac-424f-9833-89a7c7c75a16\",\n            \"email\": \"pqr@abc.com\"\n        },\n        {\n            \"uuid\": \"f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0\",\n            \"email\": \"xyz@abc.com\"\n        }\n    ]\n}\n\n\nScenario 4 - Unsubscribing from Bot Detection Alerts by providing a uuid\n\n\nRequest\n\ncurl -k -X DELETE -H \"Authorization: Bearer fe3d14ff-2429-3869-adb0-1aa573ca88e4\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v1/alert-subscriptions/bot-detection/f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0\n\n\nScenario 5 - Unsubscribing from Bot Detection Alerts by providing a non-existing uuid\n\n\nRequest\n\ncurl -k -X DELETE -H \"Authorization: Bearer fe3d14ff-2429-3869-adb0-1aa573ca88e4\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v1/alert-subscriptions/bot-detection/f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0\n\n\nResponse\n\n{\n    \"code\":404,\n    \"message\":\"Not Found\",\n    \"description\":\"Bot detection alert subscription with uuid: f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0 does not exist.\",\n    \"moreInfo\":\"\",\n    \"error\":[]\n}\n\n\nCarbon console\n\nERROR - AlertSubscriptionsApiServiceImpl Bot detection alert subscription with uuid: f5b9fb4d-b4f9-46ee-a407-d99dc4ce92a0 does not exist.\n\nTest Environment\nJDK 1.8.0_241\nUbuntu 18.04.4 LTS", "createdAt": "2020-06-19T11:53:41Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8791", "merged": true, "mergeCommit": {"oid": "49af2f9f2b2d1cd5390ecb3c7b0aa1ba1870ca10"}, "closed": true, "closedAt": "2020-06-30T08:53:39Z", "author": {"login": "hisanhunais"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuUIeAgFqTQzNjM1OTEzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvWjq-gFqTU2NjAxOTczNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzU5MTM1", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-436359135", "createdAt": "2020-06-24T06:31:01Z", "commit": {"oid": "46921b6774123914975873fcc68578215d62e5c3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozMTowMVrOGoEr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozMzowMlrOGoEu7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Mjk4OQ==", "bodyText": "SQLException should not be coming upto REST API level. Shall we check why it is coming here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r444672989", "createdAt": "2020-06-24T06:31:01Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/AlertSubscriptionsApiServiceImpl.java", "diffHunk": "@@ -138,6 +163,88 @@ public Response getSubscribedAlertTypes(MessageContext messageContext) {\n         return Response.status(Response.Status.OK).build();\n     }\n \n+    /**\n+     * Retrieve a list of bot detection alert subscriptions\n+     *\n+     * @param messageContext\n+     * @return list of bot detection alert subscriptions\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response getBotDetectionAlertSubscriptions(MessageContext messageContext) throws APIManagementException {\n+\n+        List<BotDetectionData> botDetectionDataList = new APIAdminImpl().retrieveSavedBotDataEmailList();\n+        BotDetectionAlertSubscriptionListDTO listDTO =\n+                BotDetectionMappingUtil.fromAlertSubscriptionListToListDTO(botDetectionDataList);\n+        return Response.ok().entity(listDTO).build();\n+    }\n+\n+    /**\n+     * Subscribe for bot detection alerts\n+     *\n+     * @param body           email to be registered for the subscription\n+     * @param messageContext\n+     * @return alert subscription DTO containin the uuid of the subscription and the registered email\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response subscribeForBotDetectionAlerts(BotDetectionAlertSubscriptionDTO body, MessageContext messageContext)\n+            throws APIManagementException {\n+\n+        String email = body.getEmail();\n+        if (StringUtils.isBlank(email)) {\n+            String propertyName = AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD;\n+            throw new APIManagementException(propertyName + \" property value of payload cannot be blank\",\n+                    ExceptionCodes.from(ExceptionCodes.BLANK_PROPERTY_VALUE, propertyName));\n+        }\n+\n+        try {\n+            APIAdminImpl apiAdmin = new APIAdminImpl();\n+            BotDetectionData alertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            if (alertSubscription != null) {\n+                RestApiUtil.handleResourceAlreadyExistsError(\n+                        \"Email: \" + email + \" has already been subscribed for bot detection alerts\", log);\n+            }\n+            apiAdmin.addBotDataEmailConfiguration(email);\n+            BotDetectionData newAlertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            BotDetectionAlertSubscriptionDTO alertSubscriptionDTO =\n+                    BotDetectionMappingUtil.fromAlertSubscriptionToDTO(newAlertSubscription);\n+            return Response.ok(alertSubscriptionDTO).build();\n+        } catch (APIManagementException | SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46921b6774123914975873fcc68578215d62e5c3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MzYzOA==", "bodyText": "Also, you don't need to catch APIManagementException, just let it pass. It will give a 500 anyway.\nhttps://github.com/wso2/carbon-apimgt/wiki/Exception-handling-in-REST-APIs", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r444673638", "createdAt": "2020-06-24T06:32:39Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/AlertSubscriptionsApiServiceImpl.java", "diffHunk": "@@ -138,6 +163,88 @@ public Response getSubscribedAlertTypes(MessageContext messageContext) {\n         return Response.status(Response.Status.OK).build();\n     }\n \n+    /**\n+     * Retrieve a list of bot detection alert subscriptions\n+     *\n+     * @param messageContext\n+     * @return list of bot detection alert subscriptions\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response getBotDetectionAlertSubscriptions(MessageContext messageContext) throws APIManagementException {\n+\n+        List<BotDetectionData> botDetectionDataList = new APIAdminImpl().retrieveSavedBotDataEmailList();\n+        BotDetectionAlertSubscriptionListDTO listDTO =\n+                BotDetectionMappingUtil.fromAlertSubscriptionListToListDTO(botDetectionDataList);\n+        return Response.ok().entity(listDTO).build();\n+    }\n+\n+    /**\n+     * Subscribe for bot detection alerts\n+     *\n+     * @param body           email to be registered for the subscription\n+     * @param messageContext\n+     * @return alert subscription DTO containin the uuid of the subscription and the registered email\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response subscribeForBotDetectionAlerts(BotDetectionAlertSubscriptionDTO body, MessageContext messageContext)\n+            throws APIManagementException {\n+\n+        String email = body.getEmail();\n+        if (StringUtils.isBlank(email)) {\n+            String propertyName = AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD;\n+            throw new APIManagementException(propertyName + \" property value of payload cannot be blank\",\n+                    ExceptionCodes.from(ExceptionCodes.BLANK_PROPERTY_VALUE, propertyName));\n+        }\n+\n+        try {\n+            APIAdminImpl apiAdmin = new APIAdminImpl();\n+            BotDetectionData alertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            if (alertSubscription != null) {\n+                RestApiUtil.handleResourceAlreadyExistsError(\n+                        \"Email: \" + email + \" has already been subscribed for bot detection alerts\", log);\n+            }\n+            apiAdmin.addBotDataEmailConfiguration(email);\n+            BotDetectionData newAlertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            BotDetectionAlertSubscriptionDTO alertSubscriptionDTO =\n+                    BotDetectionMappingUtil.fromAlertSubscriptionToDTO(newAlertSubscription);\n+            return Response.ok(alertSubscriptionDTO).build();\n+        } catch (APIManagementException | SQLException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Mjk4OQ=="}, "originalCommit": {"oid": "46921b6774123914975873fcc68578215d62e5c3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Mzc3Mg==", "bodyText": "Same as above", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r444673772", "createdAt": "2020-06-24T06:33:02Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/AlertSubscriptionsApiServiceImpl.java", "diffHunk": "@@ -138,6 +163,88 @@ public Response getSubscribedAlertTypes(MessageContext messageContext) {\n         return Response.status(Response.Status.OK).build();\n     }\n \n+    /**\n+     * Retrieve a list of bot detection alert subscriptions\n+     *\n+     * @param messageContext\n+     * @return list of bot detection alert subscriptions\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response getBotDetectionAlertSubscriptions(MessageContext messageContext) throws APIManagementException {\n+\n+        List<BotDetectionData> botDetectionDataList = new APIAdminImpl().retrieveSavedBotDataEmailList();\n+        BotDetectionAlertSubscriptionListDTO listDTO =\n+                BotDetectionMappingUtil.fromAlertSubscriptionListToListDTO(botDetectionDataList);\n+        return Response.ok().entity(listDTO).build();\n+    }\n+\n+    /**\n+     * Subscribe for bot detection alerts\n+     *\n+     * @param body           email to be registered for the subscription\n+     * @param messageContext\n+     * @return alert subscription DTO containin the uuid of the subscription and the registered email\n+     * @throws APIManagementException\n+     */\n+    @Override\n+    public Response subscribeForBotDetectionAlerts(BotDetectionAlertSubscriptionDTO body, MessageContext messageContext)\n+            throws APIManagementException {\n+\n+        String email = body.getEmail();\n+        if (StringUtils.isBlank(email)) {\n+            String propertyName = AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD;\n+            throw new APIManagementException(propertyName + \" property value of payload cannot be blank\",\n+                    ExceptionCodes.from(ExceptionCodes.BLANK_PROPERTY_VALUE, propertyName));\n+        }\n+\n+        try {\n+            APIAdminImpl apiAdmin = new APIAdminImpl();\n+            BotDetectionData alertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            if (alertSubscription != null) {\n+                RestApiUtil.handleResourceAlreadyExistsError(\n+                        \"Email: \" + email + \" has already been subscribed for bot detection alerts\", log);\n+            }\n+            apiAdmin.addBotDataEmailConfiguration(email);\n+            BotDetectionData newAlertSubscription =\n+                    apiAdmin.getBotDetectionAlertSubscription(AlertMgtConstants.BOT_DETECTION_EMAIL_FIELD, email);\n+            BotDetectionAlertSubscriptionDTO alertSubscriptionDTO =\n+                    BotDetectionMappingUtil.fromAlertSubscriptionToDTO(newAlertSubscription);\n+            return Response.ok(alertSubscriptionDTO).build();\n+        } catch (APIManagementException | SQLException e) {\n+            String errorMessage = \"Error when subscribing for bot detection alerts with email: \" + email;\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Unsubscribe from bot detection alerts\n+     *\n+     * @param uuid           uuid of the subscription\n+     * @param messageContext\n+     * @return 200 OK response if the subscription is deleted successfully\n+     */\n+    @Override\n+    public Response unsubscribeFromBotDetectionAlerts(String uuid, MessageContext messageContext) {\n+\n+        try {\n+            APIAdminImpl apiAdmin = new APIAdminImpl();\n+            BotDetectionData alertSubscription = apiAdmin.getBotDetectionAlertSubscription(\"uuid\", uuid);\n+            if (alertSubscription == null) {\n+                RestApiUtil.handleResourceNotFoundError(\n+                        \"Bot detection alert subscription with uuid: \" + uuid + \" does not exist.\", log);\n+            }\n+            apiAdmin.deleteBotDataEmailList(uuid);\n+            return Response.ok().build();\n+        } catch (APIManagementException | SQLException e) {\n+            String errorMessage = \"Error when deleting bot detection alert subscription with uuid: \" + uuid;\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46921b6774123914975873fcc68578215d62e5c3"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfee7fe8340bf75953f7980979101a28a13a8a4", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/bbfee7fe8340bf75953f7980979101a28a13a8a4", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection subscription related resource definitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76d01edc334f0dd1cf9dd29c5ee82f6a6a3f173", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a76d01edc334f0dd1cf9dd29c5ee82f6a6a3f173", "committedDate": "2020-06-28T04:44:51Z", "message": "Commit generated changes after building modified admin-api.yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df01f64f9a33fa644f00029242dab70aadbe4e40", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/df01f64f9a33fa644f00029242dab70aadbe4e40", "committedDate": "2020-06-28T04:44:51Z", "message": "Modify bot detection alert subscription related schema names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8977c0db58e8cb0830438fef2dc55286eb5c7c", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/cb8977c0db58e8cb0830438fef2dc55286eb5c7c", "committedDate": "2020-06-28T04:44:51Z", "message": "Add Impl and DAO functionality related to the revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6ec27e951e7cbc4e573853027688ab018a9afb4", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c6ec27e951e7cbc4e573853027688ab018a9afb4", "committedDate": "2020-06-28T04:44:51Z", "message": "Implement the resource functionality related to the revamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f5f79f68e9ebeabb186858c78929792549bd87", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/39f5f79f68e9ebeabb186858c78929792549bd87", "committedDate": "2020-06-28T04:44:51Z", "message": "Change the scope of bot detection alert subscription resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4e31cb654ed8cc4b1161906e7031e7a195a13b", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5e4e31cb654ed8cc4b1161906e7031e7a195a13b", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection alert subscription related ApiMgtDao codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23a1e3c861b17b1f2b541c6c01f8387d782555f", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f23a1e3c861b17b1f2b541c6c01f8387d782555f", "committedDate": "2020-06-28T04:44:51Z", "message": "Add methods to APIAdmin Interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23053f72cf15e0ba2bcafd70c6c89b84e1c0a1d0", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/23053f72cf15e0ba2bcafd70c6c89b84e1c0a1d0", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection alert subscription related AdminImpl codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "949f33d19c6e0be36eef73b69b79e52830da914f", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/949f33d19c6e0be36eef73b69b79e52830da914f", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection subscription admin v0.16 REST layer codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "110c56498df5d7c1218d97b1dfda9e179aa6fee4", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/110c56498df5d7c1218d97b1dfda9e179aa6fee4", "committedDate": "2020-06-28T04:44:51Z", "message": "Add revamped changes to admin v1 REST layer codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a232e105ef4663f946a772aec3fef71d9f2eb7b4", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection data admin v1 REST API related codes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46921b6774123914975873fcc68578215d62e5c3", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/46921b6774123914975873fcc68578215d62e5c3", "committedDate": "2020-06-19T06:20:42Z", "message": "Change the scope of bot detection alert subscription resources"}, "afterCommit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a232e105ef4663f946a772aec3fef71d9f2eb7b4", "committedDate": "2020-06-28T04:44:51Z", "message": "Revamp bot detection data admin v1 REST API related codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODg3MjA3", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-438887207", "createdAt": "2020-06-29T05:01:25Z", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTowMToyNlrOGqE36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNTowMToyNlrOGqE36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MzIyNQ==", "bodyText": "extra space", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r446773225", "createdAt": "2020-06-29T05:01:26Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -425,38 +425,31 @@ public KeyManagerConfigurationDTO getKeyManagerConfigurationByName(String tenant\n         return keyManagerConfiguration;\n     }\n \n-    /**\n-     * configure email list to which the alert needs to be sent\n-     */\n-    public void addBotDataEmailConfiguration(String email) throws APIManagementException, SQLException {\n+    @Override\n+    public void addBotDetectionAlertSubscription(String email) throws APIManagementException {\n \n-        apiMgtDAO.addBotDataEmailConfiguration(email);\n+        apiMgtDAO.addBotDetectionAlertSubscription(email);\n     }\n \n-    /**\n-     * retrieve the configured email list\n-     */\n-    public List<BotDetectionData> retrieveSavedBotDataEmailList() throws APIManagementException {\n+    @Override\n+    public List<BotDetectionData> getBotDetectionAlertSubscriptions() throws APIManagementException {\n \n-        List<BotDetectionData> list;\n-        list = apiMgtDAO.retrieveSavedBotDataEmailList();\n-        return list;\n+        return apiMgtDAO.getBotDetectionAlertSubscriptions();\n     }\n \n-    /**\n-     * remove all configured email list\n-     */\n-    public void deleteBotDataEmailList(String uuid) throws APIManagementException, SQLException {\n+    @Override\n+    public void deleteBotDetectionAlertSubscription(String uuid) throws APIManagementException {\n \n-        apiMgtDAO.deleteBotDataEmailList(uuid);\n+        apiMgtDAO.deleteBotDetectionAlertSubscription(uuid);\n     }\n \n-    /**\n-     * Retrieve all bot detected data\n-     *\n-     * @return list of bot detected data\n-     * @throws APIManagementException\n-     */\n+    @Override\n+    public BotDetectionData getBotDetectionAlertSubscription(String field, String value) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODA3NzEw", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-439807710", "createdAt": "2020-06-30T08:53:17Z", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDA4Nzc1", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-566008775", "createdAt": "2021-01-12T07:50:04Z", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1MDowNFrOIR1Wtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1MDowNFrOIR1Wtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3MDg3MA==", "bodyText": "Add description for throws", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r555570870", "createdAt": "2021-01-12T07:50:04Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14588,69 +14588,86 @@ public void addBotDataEmailConfiguration(String email) throws SQLException, APIM\n             ps.execute();\n             connection.commit();\n         } catch (SQLException e) {\n-            connection.rollback();\n-            handleException(\"Error while save email list.\", e);\n-        } finally {\n-            APIMgtDBUtil.closeAllConnections(ps, connection, rs);\n+            handleException(\"Error while adding bot detection alert subscription\", e);\n         }\n     }\n \n     /**\n-     * retrieve email list which configured for BotDetectedData Api alert\n+     * Retrieve all bot detection alert subscriptions\n+     *\n+     * @throws APIManagementException if an error occurs when retrieving bot detection alert subscriptions\n      */\n-    public List<BotDetectionData> retrieveSavedBotDataEmailList()\n-            throws APIManagementException {\n+    public List<BotDetectionData> getBotDetectionAlertSubscriptions() throws APIManagementException {\n \n-        Connection conn = null;\n-        ResultSet resultSet = null;\n-        PreparedStatement ps = null;\n         List<BotDetectionData> list = new ArrayList<>();\n-\n-        try {\n-            String sqlQuery;\n-            conn = APIMgtDBUtil.getConnection();\n-            sqlQuery = SQLConstants.BotDataConstants.GET_SAVED_ALERT_EMAILS;\n-            ps = conn.prepareStatement(sqlQuery);\n-            resultSet = ps.executeQuery();\n+        String query = SQLConstants.BotDataConstants.GET_SAVED_ALERT_EMAILS;\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps = connection.prepareStatement(query)) {\n+            ResultSet resultSet = ps.executeQuery();\n             while (resultSet.next()) {\n                 BotDetectionData botDetectedData = new BotDetectionData();\n                 botDetectedData.setUuid(resultSet.getString(\"UUID\"));\n                 botDetectedData.setEmail(resultSet.getString(\"SUBSCRIBER_ADDRESS\"));\n                 list.add(botDetectedData);\n             }\n         } catch (SQLException e) {\n-            handleException(\"Failed to retrieve saved email types by tenant Name. \", e);\n-        } finally {\n-            APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n+            handleException(\"Error while retrieving bot detection alert subscriptions\", e);\n         }\n         return list;\n-\n     }\n \n     /**\n-     * Delete email list from the database by using the tenantDomain\n+     * Delete a bot detection alert subscription\n+     *\n+     * @param uuid uuid of the subscription\n+     * @throws APIManagementException if an error occurs when deleting a bot detection alert subscription\n      */\n-    public void deleteBotDataEmailList(String uuid) throws APIManagementException, SQLException {\n+    public void deleteBotDetectionAlertSubscription(String uuid) throws APIManagementException {\n \n-        Connection connection;\n-        PreparedStatement ps = null;\n-        ResultSet rs = null;\n-        connection = APIMgtDBUtil.getConnection();\n-        connection.setAutoCommit(false);\n-\n-        try {\n+        String query = SQLConstants.BotDataConstants.DELETE_EMAIL_BY_UUID;\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps = connection.prepareStatement(query)) {\n             connection.setAutoCommit(false);\n-            String deleteEmail = SQLConstants.BotDataConstants.DELETE_EMAIL_BY_UUID;\n-            ps = connection.prepareStatement(deleteEmail);\n             ps.setString(1, uuid);\n             ps.execute();\n             connection.commit();\n         } catch (SQLException e) {\n-            connection.rollback();\n-            handleException(\"Failed to delete alert email data.\", e);\n-        } finally {\n-            APIMgtDBUtil.closeAllConnections(ps, connection, rs);\n+            handleException(\"Error while deleting bot detection alert subscription\", e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve a bot detection alert subscription by querying a particular field (uuid or email)\n+     *\n+     * @param field field to be queried to obtain the bot detection alert subscription. Can be uuid or email\n+     * @param value value corresponding to the field (uuid or email value)\n+     * @return if subscription exist, returns the bot detection alert subscription, else returns a null object\n+     * @throws APIManagementException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDEwMjQw", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-566010240", "createdAt": "2021-01-12T07:52:43Z", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1Mjo0M1rOIR1b5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1Mjo0M1rOIR1b5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3MjE5Nw==", "bodyText": "Add a description or remove the line", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r555572197", "createdAt": "2021-01-12T07:52:43Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/AlertSubscriptionsApiServiceImpl.java", "diffHunk": "@@ -138,6 +163,78 @@ public Response getSubscribedAlertTypes(MessageContext messageContext) {\n         return Response.status(Response.Status.OK).build();\n     }\n \n+    /**\n+     * Retrieve a list of bot detection alert subscriptions\n+     *\n+     * @param messageContext\n+     * @return list of bot detection alert subscriptions\n+     * @throws APIManagementException if an error occurs when retrieving bot detection alert subscriptions\n+     */\n+    @Override\n+    public Response getBotDetectionAlertSubscriptions(MessageContext messageContext) throws APIManagementException {\n+\n+        APIAdmin apiAdmin = new APIAdminImpl();\n+        List<BotDetectionData> botDetectionDataList = apiAdmin.getBotDetectionAlertSubscriptions();\n+        BotDetectionAlertSubscriptionListDTO listDTO =\n+                BotDetectionMappingUtil.fromAlertSubscriptionListToListDTO(botDetectionDataList);\n+        return Response.ok().entity(listDTO).build();\n+    }\n+\n+    /**\n+     * Subscribe for bot detection alerts\n+     *\n+     * @param body           email to be registered for the subscription\n+     * @param messageContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MDE5NzM2", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#pullrequestreview-566019736", "createdAt": "2021-01-12T08:08:32Z", "commit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowODozMlrOIR15Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwODowODozMlrOIR15Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3OTcyMw==", "bodyText": "Needs to format. (add spaces in betwee param name and the description so that all the descriptions are aligned on same point). This should be formatted automatically wso2 code formatted. Fix at other places as well", "url": "https://github.com/wso2/carbon-apimgt/pull/8791#discussion_r555579723", "createdAt": "2021-01-12T08:08:32Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "diffHunk": "@@ -127,6 +128,47 @@ void addMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizationUs\n     void updateMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizationUsagePublishInfo)\n             throws APIManagementException;\n \n+    /**\n+     * Add a bot detection alert subscription\n+     *\n+     * @param email email to be registered for the subscription\n+     * @throws APIManagementException if an error occurs when adding a bot detection alert subscription\n+     */\n+    void addBotDetectionAlertSubscription(String email) throws APIManagementException;\n+\n+    /**\n+     * Delete a bot detection alert subscription\n+     *\n+     * @param uuid uuid of the subscription\n+     * @throws APIManagementException if an error occurs when deleting a bot detection alert subscription\n+     */\n+    void deleteBotDetectionAlertSubscription(String uuid) throws APIManagementException;\n+\n+    /**\n+     * Retrieve a bot detection alert subscription by querying a particular field (uuid or email)\n+     *\n+     * @param field field to be queried to obtain the bot detection alert subscription. Can be uuid or email\n+     * @param value value corresponding to the field (uuid or email value)\n+     * @return if a subscription exists, returns the bot detection alert subscription, else returns a null object\n+     * @throws APIManagementException if an error occurs when retrieving a bot detection alert subscription", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a232e105ef4663f946a772aec3fef71d9f2eb7b4"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2666, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}