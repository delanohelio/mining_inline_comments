{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1ODQzOTYy", "number": 9366, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTo1Mzo0NVrOFUb96w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTo1NDo1MVrOFUb_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2OTc0MDU5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTo1Mzo0NVrOIccyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDo1Mzo1OVrOIcnYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcwMjc5OA==", "bodyText": "No exception is thrown in this method. Please correct the java docs.", "url": "https://github.com/wso2/carbon-apimgt/pull/9366#discussion_r566702798", "createdAt": "2021-01-29T09:53:45Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "diffHunk": "@@ -639,4 +647,74 @@ public static void addClientCertificates(String pathToArchive, APIProvider apiPr\n             throw new APIImportExportException(errorMessage, e);\n         }\n     }\n+\n+    /**\n+     * Get the subscription level policy names of an API/API Product\n+     *\n+     * @param apiTypeWrapper API or API Product to be exported\n+     * @throws APIImportExportException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b233042c5d4522c8018234472d72cfdbf6d0a093"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NjMyMw==", "bodyText": "Fixed via eb9b718", "url": "https://github.com/wso2/carbon-apimgt/pull/9366#discussion_r566876323", "createdAt": "2021-01-29T14:53:59Z", "author": {"login": "wasuradananjith"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "diffHunk": "@@ -639,4 +647,74 @@ public static void addClientCertificates(String pathToArchive, APIProvider apiPr\n             throw new APIImportExportException(errorMessage, e);\n         }\n     }\n+\n+    /**\n+     * Get the subscription level policy names of an API/API Product\n+     *\n+     * @param apiTypeWrapper API or API Product to be exported\n+     * @throws APIImportExportException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcwMjc5OA=="}, "originalCommit": {"oid": "b233042c5d4522c8018234472d72cfdbf6d0a093"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2OTc0NDYyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTo1NDo1MVrOIcc1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDo1Mzo1M1rOIcnYbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcwMzQ1Mg==", "bodyText": "APIManagementException is thrown, replace the APIImportExportException with it in the java docs.", "url": "https://github.com/wso2/carbon-apimgt/pull/9366#discussion_r566703452", "createdAt": "2021-01-29T09:54:51Z", "author": {"login": "npamudika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "diffHunk": "@@ -639,4 +647,74 @@ public static void addClientCertificates(String pathToArchive, APIProvider apiPr\n             throw new APIImportExportException(errorMessage, e);\n         }\n     }\n+\n+    /**\n+     * Get the subscription level policy names of an API/API Product\n+     *\n+     * @param apiTypeWrapper API or API Product to be exported\n+     * @throws APIImportExportException\n+     */\n+    public static Set<String> getAvailableTierNames(ApiTypeWrapper apiTypeWrapper) {\n+        Set<String> tiers = new LinkedHashSet<String>();\n+        Set<Tier> tiersFromApi;\n+        if (!apiTypeWrapper.isAPIProduct()) {\n+            tiersFromApi = apiTypeWrapper.getApi().getAvailableTiers();\n+        } else {\n+            tiersFromApi = apiTypeWrapper.getApiProduct().getAvailableTiers();\n+        }\n+        for (Tier tier : tiersFromApi) {\n+            tiers.add(tier.getName());\n+        }\n+        return tiers;\n+    }\n+\n+    /**\n+     * Set the subscription level tiers of an API/API Product by validating with the tiers available in the environment\n+     *\n+     * @param apiJsonContent JSON content of API or API Product to be imported\n+     * @param apiProvider    API Provider\n+     * @throws APIImportExportException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b233042c5d4522c8018234472d72cfdbf6d0a093"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NjI2OQ==", "bodyText": "Fixed via eb9b718", "url": "https://github.com/wso2/carbon-apimgt/pull/9366#discussion_r566876269", "createdAt": "2021-01-29T14:53:53Z", "author": {"login": "wasuradananjith"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/utils/APIAndAPIProductCommonUtil.java", "diffHunk": "@@ -639,4 +647,74 @@ public static void addClientCertificates(String pathToArchive, APIProvider apiPr\n             throw new APIImportExportException(errorMessage, e);\n         }\n     }\n+\n+    /**\n+     * Get the subscription level policy names of an API/API Product\n+     *\n+     * @param apiTypeWrapper API or API Product to be exported\n+     * @throws APIImportExportException\n+     */\n+    public static Set<String> getAvailableTierNames(ApiTypeWrapper apiTypeWrapper) {\n+        Set<String> tiers = new LinkedHashSet<String>();\n+        Set<Tier> tiersFromApi;\n+        if (!apiTypeWrapper.isAPIProduct()) {\n+            tiersFromApi = apiTypeWrapper.getApi().getAvailableTiers();\n+        } else {\n+            tiersFromApi = apiTypeWrapper.getApiProduct().getAvailableTiers();\n+        }\n+        for (Tier tier : tiersFromApi) {\n+            tiers.add(tier.getName());\n+        }\n+        return tiers;\n+    }\n+\n+    /**\n+     * Set the subscription level tiers of an API/API Product by validating with the tiers available in the environment\n+     *\n+     * @param apiJsonContent JSON content of API or API Product to be imported\n+     * @param apiProvider    API Provider\n+     * @throws APIImportExportException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcwMzQ1Mg=="}, "originalCommit": {"oid": "b233042c5d4522c8018234472d72cfdbf6d0a093"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2990, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}