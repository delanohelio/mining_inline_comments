{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzkxOTg1", "number": 9470, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzoxMzo1NVrOFBRbQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDo0ODoyNlrOFBmHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODc4NDAxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIRevision.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzoxMzo1NlrOH_9MsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTo1Njo0NVrOIADy2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNTAwOQ==", "bodyText": "Licence header missing", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536825009", "createdAt": "2020-12-05T17:13:56Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIRevision.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzMzA4MQ==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536933081", "createdAt": "2020-12-06T01:56:45Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIRevision.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNTAwOQ=="}, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODgxOTM3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzozODozOFrOH_9cNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTo1NzowMlrOIADzCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyODk4Mg==", "bodyText": "caching an Exception?", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536828982", "createdAt": "2020-12-05T17:38:38Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4632,13 +4637,26 @@ public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n      */\n     @Override\n     public Response createAPIRevision(String apiId, APIRevisionDTO apIRevisionDTO, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            APIRevision apiRevision = new APIRevision();\n+            apiRevision.setApiUUID(apiId);\n+            apiRevision.setDescription(apIRevisionDTO.getDescription());\n+            //adding the api revision\n+            String revisionId = apiProvider.addAPIRevision(apiRevision);\n+\n+            //Retrieve the newly added APIRevision to send in the response payload\n+            APIRevision createdApiRevision = apiProvider.getAPIRevision(revisionId);\n+            APIRevisionDTO createdApiRevisionDTO = APIMappingUtil.fromAPIRevisiontoDTO(createdApiRevision);\n+            //This URI used to set the location header of the POST response\n+            URI createdApiUri = new URI(RestApiConstants.RESOURCE_PATH_APIS + \"/\" + createdApiRevisionDTO.getApiInfo().getId() + \"/\" + RestApiConstants.RESOURCE_PATH_REVISIONS + \"/\" + createdApiRevisionDTO.getId());\n+            return Response.created(createdApiUri).entity(createdApiRevisionDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyOTEyMA==", "bodyText": "Just throw the APIManagement exception to the outer layer.\nhttps://github.com/wso2/carbon-apimgt/wiki/Exception-handling-in-REST-APIs", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536829120", "createdAt": "2020-12-05T17:39:33Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4632,13 +4637,26 @@ public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n      */\n     @Override\n     public Response createAPIRevision(String apiId, APIRevisionDTO apIRevisionDTO, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            APIRevision apiRevision = new APIRevision();\n+            apiRevision.setApiUUID(apiId);\n+            apiRevision.setDescription(apIRevisionDTO.getDescription());\n+            //adding the api revision\n+            String revisionId = apiProvider.addAPIRevision(apiRevision);\n+\n+            //Retrieve the newly added APIRevision to send in the response payload\n+            APIRevision createdApiRevision = apiProvider.getAPIRevision(revisionId);\n+            APIRevisionDTO createdApiRevisionDTO = APIMappingUtil.fromAPIRevisiontoDTO(createdApiRevision);\n+            //This URI used to set the location header of the POST response\n+            URI createdApiUri = new URI(RestApiConstants.RESOURCE_PATH_APIS + \"/\" + createdApiRevisionDTO.getApiInfo().getId() + \"/\" + RestApiConstants.RESOURCE_PATH_REVISIONS + \"/\" + createdApiRevisionDTO.getId());\n+            return Response.created(createdApiUri).entity(createdApiRevisionDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyODk4Mg=="}, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzMzEzMA==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536933130", "createdAt": "2020-12-06T01:57:02Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4632,13 +4637,26 @@ public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n      */\n     @Override\n     public Response createAPIRevision(String apiId, APIRevisionDTO apIRevisionDTO, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            APIRevision apiRevision = new APIRevision();\n+            apiRevision.setApiUUID(apiId);\n+            apiRevision.setDescription(apIRevisionDTO.getDescription());\n+            //adding the api revision\n+            String revisionId = apiProvider.addAPIRevision(apiRevision);\n+\n+            //Retrieve the newly added APIRevision to send in the response payload\n+            APIRevision createdApiRevision = apiProvider.getAPIRevision(revisionId);\n+            APIRevisionDTO createdApiRevisionDTO = APIMappingUtil.fromAPIRevisiontoDTO(createdApiRevision);\n+            //This URI used to set the location header of the POST response\n+            URI createdApiUri = new URI(RestApiConstants.RESOURCE_PATH_APIS + \"/\" + createdApiRevisionDTO.getApiInfo().getId() + \"/\" + RestApiConstants.RESOURCE_PATH_REVISIONS + \"/\" + createdApiRevisionDTO.getId());\n+            return Response.created(createdApiUri).entity(createdApiRevisionDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyODk4Mg=="}, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODgyMTg3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzo0MDoyNlrOH_9dSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTo1Nzo0MVrOIADzfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyOTI1Ng==", "bodyText": "Why catching a generic Exception", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536829256", "createdAt": "2020-12-05T17:40:26Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4613,13 +4615,16 @@ public static ApiEndpointValidationResponseDTO sendHttpHEADRequest(String urlVal\n      */\n     @Override\n     public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            List<APIRevision> apiRevisions = apiProvider.getAPIRevisions(apiId);\n+            APIRevisionListDTO apiRevisionListDTO = APIMappingUtil.fromListAPIRevisiontoDTO(apiRevisions);\n+            return Response.ok().entity(apiRevisionListDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzMzI0NQ==", "bodyText": "changed to APIManagementException, resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536933245", "createdAt": "2020-12-06T01:57:41Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4613,13 +4615,16 @@ public static ApiEndpointValidationResponseDTO sendHttpHEADRequest(String urlVal\n      */\n     @Override\n     public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            List<APIRevision> apiRevisions = apiProvider.getAPIRevisions(apiId);\n+            APIRevisionListDTO apiRevisionListDTO = APIMappingUtil.fromListAPIRevisiontoDTO(apiRevisions);\n+            return Response.ok().entity(apiRevisionListDTO).build();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyOTI1Ng=="}, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODgyMzM0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1.common/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/common/mappings/APIMappingUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNzo0MToyOVrOH_9d6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTo1Nzo1NVrOIADzkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyOTQxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int count = 0;\n          \n          \n            \n                    for (APIRevision apiRevision: apiRevisionList) {\n          \n          \n            \n                        count++;\n          \n          \n            \n                        apiRevisionDTOS.add(fromAPIRevisiontoDTO(apiRevision));\n          \n          \n            \n                    }\n          \n          \n            \n                    apiRevisionListDTO.setCount(count);\n          \n          \n            \n                    for (APIRevision apiRevision: apiRevisionList) {\n          \n          \n            \n                        apiRevisionDTOS.add(fromAPIRevisiontoDTO(apiRevision));\n          \n          \n            \n                    }\n          \n          \n            \n                    apiRevisionListDTO.setCount(apiRevisionList.size());", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536829417", "createdAt": "2020-12-05T17:41:29Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1.common/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/common/mappings/APIMappingUtil.java", "diffHunk": "@@ -2749,4 +2753,28 @@ private static JSONObject handleEndpointSecurity(API api, JSONObject endpointSec\n         }\n         return endpointSecurityElement;\n     }\n+\n+    public static APIRevisionDTO fromAPIRevisiontoDTO(APIRevision model) throws APIManagementException {\n+        APIRevisionDTO apiRevisionDTO = new APIRevisionDTO();\n+        apiRevisionDTO.setId(model.getId());\n+        apiRevisionDTO.setUuid(model.getRevisionUUID());\n+        apiRevisionDTO.setDescription(model.getDescription());\n+        APIRevisionAPIInfoDTO apiRevisionAPIInfoDTO = new APIRevisionAPIInfoDTO();\n+        apiRevisionAPIInfoDTO.setId(model.getApiUUID());\n+        apiRevisionDTO.setApiInfo(apiRevisionAPIInfoDTO);\n+        return  apiRevisionDTO;\n+    }\n+\n+    public static APIRevisionListDTO fromListAPIRevisiontoDTO(List<APIRevision> apiRevisionList) throws APIManagementException {\n+        APIRevisionListDTO apiRevisionListDTO = new APIRevisionListDTO();\n+        List<APIRevisionDTO> apiRevisionDTOS = new ArrayList<>();\n+        int count = 0;\n+        for (APIRevision apiRevision: apiRevisionList) {\n+            count++;\n+            apiRevisionDTOS.add(fromAPIRevisiontoDTO(apiRevision));\n+        }\n+        apiRevisionListDTO.setCount(count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzMzI2NA==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r536933264", "createdAt": "2020-12-06T01:57:55Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1.common/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/common/mappings/APIMappingUtil.java", "diffHunk": "@@ -2749,4 +2753,28 @@ private static JSONObject handleEndpointSecurity(API api, JSONObject endpointSec\n         }\n         return endpointSecurityElement;\n     }\n+\n+    public static APIRevisionDTO fromAPIRevisiontoDTO(APIRevision model) throws APIManagementException {\n+        APIRevisionDTO apiRevisionDTO = new APIRevisionDTO();\n+        apiRevisionDTO.setId(model.getId());\n+        apiRevisionDTO.setUuid(model.getRevisionUUID());\n+        apiRevisionDTO.setDescription(model.getDescription());\n+        APIRevisionAPIInfoDTO apiRevisionAPIInfoDTO = new APIRevisionAPIInfoDTO();\n+        apiRevisionAPIInfoDTO.setId(model.getApiUUID());\n+        apiRevisionDTO.setApiInfo(apiRevisionAPIInfoDTO);\n+        return  apiRevisionDTO;\n+    }\n+\n+    public static APIRevisionListDTO fromListAPIRevisiontoDTO(List<APIRevision> apiRevisionList) throws APIManagementException {\n+        APIRevisionListDTO apiRevisionListDTO = new APIRevisionListDTO();\n+        List<APIRevisionDTO> apiRevisionDTOS = new ArrayList<>();\n+        int count = 0;\n+        for (APIRevision apiRevision: apiRevisionList) {\n+            count++;\n+            apiRevisionDTOS.add(fromAPIRevisiontoDTO(apiRevision));\n+        }\n+        apiRevisionListDTO.setCount(count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyOTQxNw=="}, "originalCommit": {"oid": "29ab3eb1d88e3da1ecd98f2dcfd82ece08f323ad"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjA3MzQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDowMzoxMFrOIAVDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDo0NDozMFrOIAVxVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNTg4MQ==", "bodyText": "Don't we need somekind of validation before adding", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r537215881", "createdAt": "2020-12-07T04:03:10Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4632,13 +4637,30 @@ public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n      */\n     @Override\n     public Response createAPIRevision(String apiId, APIRevisionDTO apIRevisionDTO, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            APIRevision apiRevision = new APIRevision();\n+            apiRevision.setApiUUID(apiId);\n+            apiRevision.setDescription(apIRevisionDTO.getDescription());\n+            //adding the api revision\n+            String revisionId = apiProvider.addAPIRevision(apiRevision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b808bf4623ba5fd19b9d5159a41c57b18ca088a0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNzYwNw==", "bodyText": "added an api requested resource check inside the createAPIRevisionRegistryArtifacts method, resolved.", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r537227607", "createdAt": "2020-12-07T04:44:30Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java", "diffHunk": "@@ -4632,13 +4637,30 @@ public Response getAPIRevisions(String apiId, MessageContext messageContext) {\n      */\n     @Override\n     public Response createAPIRevision(String apiId, APIRevisionDTO apIRevisionDTO, MessageContext messageContext) {\n-        // remove errorObject and add implementation code!\n-        ErrorDTO errorObject = new ErrorDTO();\n-        Response.Status status = Response.Status.NOT_IMPLEMENTED;\n-        errorObject.setCode((long) status.getStatusCode());\n-        errorObject.setMessage(status.toString());\n-        errorObject.setDescription(\"The requested resource has not been implemented\");\n-        return Response.status(status).entity(errorObject).build();\n+        try {\n+            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n+            APIRevision apiRevision = new APIRevision();\n+            apiRevision.setApiUUID(apiId);\n+            apiRevision.setDescription(apIRevisionDTO.getDescription());\n+            //adding the api revision\n+            String revisionId = apiProvider.addAPIRevision(apiRevision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNTg4MQ=="}, "originalCommit": {"oid": "b808bf4623ba5fd19b9d5159a41c57b18ca088a0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjE3NDI0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDo0ODoyNlrOIAV2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNToxNjoxNFrOIAWVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyODgwNQ==", "bodyText": "Shall we separate out the Dao layer accessing code from the registry accessing code. this way it would be easy to extract the registry code later", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r537228805", "createdAt": "2020-12-07T04:48:26Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8979,4 +8982,110 @@ private void deleteScopes(Set<String> scopes, int tenantId) throws APIManagement\n             }\n         }\n     }\n+\n+    /**\n+     * Adds a new APIRevision to an existing API\n+     *\n+     * @param apiRevision APIRevision\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public String addAPIRevision(APIRevision apiRevision) throws APIManagementException {\n+        int revisionId = apiMgtDAO.getMostRecentRevisionId(apiRevision.getApiUUID()) + 1;\n+        apiRevision.setId(revisionId);\n+        String revisionUUID = createAPIRevisionRegistryArtifacts(apiRevision.getApiUUID(), revisionId);\n+        if (StringUtils.isEmpty(revisionUUID)) {\n+            String errorMessage = \"Failed to retrieve revision uuid\";\n+            log.error(errorMessage);\n+            throw new APIManagementException(errorMessage);\n+        }\n+        apiRevision.setRevisionUUID(revisionUUID);\n+        apiMgtDAO.addAPIRevision(apiRevision);\n+        return revisionUUID;\n+    }\n+\n+    /**\n+     * Get a Revision related to provided and revision UUID\n+     *\n+     * @param revisionUUID API Revision UUID\n+     * @return API Revision\n+     * @throws APIManagementException if failed to get the related API revision\n+     */\n+    @Override\n+    public APIRevision getAPIRevision(String revisionUUID) throws APIManagementException {\n+        return apiMgtDAO.getRevisionByRevisionUUID(revisionUUID);\n+    }\n+\n+    /**\n+     * Copy Api registry artifacts to the revision registry location\n+     *\n+     * @param apiUUID API UUID\n+     * @param revisionId Revision ID\n+     * @throws APIManagementException if failed to copy API registry artifacts\n+     */\n+    protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revisionId) throws APIManagementException {\n+        String revisionUUID = null;\n+        APIIdentifier apiId = APIUtil.getAPIIdentifierFromUUID(apiUUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950bbd07461f1efdd81aea961a73981a5e161f00"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzNjg1OQ==", "bodyText": "separated the Dao and registry code, resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9470#discussion_r537236859", "createdAt": "2020-12-07T05:16:14Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8979,4 +8982,110 @@ private void deleteScopes(Set<String> scopes, int tenantId) throws APIManagement\n             }\n         }\n     }\n+\n+    /**\n+     * Adds a new APIRevision to an existing API\n+     *\n+     * @param apiRevision APIRevision\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public String addAPIRevision(APIRevision apiRevision) throws APIManagementException {\n+        int revisionId = apiMgtDAO.getMostRecentRevisionId(apiRevision.getApiUUID()) + 1;\n+        apiRevision.setId(revisionId);\n+        String revisionUUID = createAPIRevisionRegistryArtifacts(apiRevision.getApiUUID(), revisionId);\n+        if (StringUtils.isEmpty(revisionUUID)) {\n+            String errorMessage = \"Failed to retrieve revision uuid\";\n+            log.error(errorMessage);\n+            throw new APIManagementException(errorMessage);\n+        }\n+        apiRevision.setRevisionUUID(revisionUUID);\n+        apiMgtDAO.addAPIRevision(apiRevision);\n+        return revisionUUID;\n+    }\n+\n+    /**\n+     * Get a Revision related to provided and revision UUID\n+     *\n+     * @param revisionUUID API Revision UUID\n+     * @return API Revision\n+     * @throws APIManagementException if failed to get the related API revision\n+     */\n+    @Override\n+    public APIRevision getAPIRevision(String revisionUUID) throws APIManagementException {\n+        return apiMgtDAO.getRevisionByRevisionUUID(revisionUUID);\n+    }\n+\n+    /**\n+     * Copy Api registry artifacts to the revision registry location\n+     *\n+     * @param apiUUID API UUID\n+     * @param revisionId Revision ID\n+     * @throws APIManagementException if failed to copy API registry artifacts\n+     */\n+    protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revisionId) throws APIManagementException {\n+        String revisionUUID = null;\n+        APIIdentifier apiId = APIUtil.getAPIIdentifierFromUUID(apiUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyODgwNQ=="}, "originalCommit": {"oid": "950bbd07461f1efdd81aea961a73981a5e161f00"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2977, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}