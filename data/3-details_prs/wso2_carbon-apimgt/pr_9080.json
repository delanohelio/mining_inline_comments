{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzQ4MDcy", "number": 9080, "title": "improve caching method", "bodyText": "", "createdAt": "2020-07-29T10:36:16Z", "url": "https://github.com/wso2/carbon-apimgt/pull/9080", "merged": true, "mergeCommit": {"oid": "30d9493190c96fd9a4688a19b92d2f813ac8aead"}, "closed": true, "closedAt": "2020-07-29T14:05:31Z", "author": {"login": "tharindu1st"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5opnAgFqTQ1NzQwMjMyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5qpZuAFqTQ1NzQ5NjE0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDAyMzIz", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457402323", "createdAt": "2020-07-29T10:41:25Z", "commit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0MToyNVrOG4y0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0MToyNVrOG4y0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNjEwNQ==", "bodyText": "we don't need this as well right? I think that will be handled in SignedJWT.parse()", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#discussion_r462206105", "createdAt": "2020-07-29T10:41:25Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/WebsocketInboundHandler.java", "diffHunk": "@@ -259,20 +263,19 @@ private boolean validateOAuthHeader(FullHttpRequest req) throws APISecurityExcep\n \n                 //Initial guess of a JWT token using the presence of a DOT.\n \n-                SignedJWT signedJWT = null;\n+                SignedJWTInfo signedJWTInfo = null;\n                 String keyManager = null;\n                 if (StringUtils.isNotEmpty(apiKey) && apiKey.contains(APIConstants.DOT)) {\n                     try {\n                         // Check if the header part is decoded\n-                        Base64.getUrlDecoder().decode(apiKey.split(\"\\\\.\")[0]);\n                         if (StringUtils.countMatches(apiKey, APIConstants.DOT) != 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDA2MDkx", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457406091", "createdAt": "2020-07-29T10:47:21Z", "commit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0NzoyMVrOG4y_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0NzoyMVrOG4y_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwODk0NQ==", "bodyText": "This part should go into SignedJWTInfo. So SignedJWTInfo has a constructor which accepts a string constructor. Inside it the the signedJWT is created. Then while calling to SignedJWTInfo.getClaimSet method, the getClaimSet method of the signedJWT is called and resulting claims are cached at the SignedJWTInfo layer. getClaimSet is not called prematurely but only when it's needed. And the ClaimSet is saved for subsequent calls.", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#discussion_r462208945", "createdAt": "2020-07-29T10:47:21Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/WebsocketInboundHandler.java", "diffHunk": "@@ -585,4 +588,28 @@ private void removeTokenFromQuery(Map<String, List<String>> parameters) {\n         // remove trailing '?' or '&' from the built string\n         uri = queryBuilder.substring(0, queryBuilder.length() - 1);\n     }\n+    private SignedJWTInfo getSignedJwtInfo(String accessToken) throws ParseException {\n+\n+        String signature = accessToken.split(\"\\\\.\")[2];\n+        SignedJWTInfo signedJWTInfo = new SignedJWTInfo();\n+        Cache gatewaySignedJWTParseCache = CacheProvider.getGatewaySignedJWTParseCache();\n+        if (gatewaySignedJWTParseCache != null) {\n+            Object cachedEntry = gatewaySignedJWTParseCache.get(signature);\n+            if (cachedEntry != null) {\n+                signedJWTInfo = (SignedJWTInfo) cachedEntry;\n+            } else {\n+                SignedJWT signedJWT = SignedJWT.parse(accessToken);\n+                signedJWTInfo.setSignedJWT(signedJWT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDA2NTkx", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457406591", "createdAt": "2020-07-29T10:48:13Z", "commit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0ODoxM1rOG4zBNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0ODoxM1rOG4zBNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwOTMzNA==", "bodyText": "Repeating block. Better move this to SignedJWTInfo class as mentioned in the previous comment.", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#discussion_r462209334", "createdAt": "2020-07-29T10:48:13Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/WebsocketInboundHandler.java", "diffHunk": "@@ -585,4 +588,28 @@ private void removeTokenFromQuery(Map<String, List<String>> parameters) {\n         // remove trailing '?' or '&' from the built string\n         uri = queryBuilder.substring(0, queryBuilder.length() - 1);\n     }\n+    private SignedJWTInfo getSignedJwtInfo(String accessToken) throws ParseException {\n+\n+        String signature = accessToken.split(\"\\\\.\")[2];\n+        SignedJWTInfo signedJWTInfo = new SignedJWTInfo();\n+        Cache gatewaySignedJWTParseCache = CacheProvider.getGatewaySignedJWTParseCache();\n+        if (gatewaySignedJWTParseCache != null) {\n+            Object cachedEntry = gatewaySignedJWTParseCache.get(signature);\n+            if (cachedEntry != null) {\n+                signedJWTInfo = (SignedJWTInfo) cachedEntry;\n+            } else {\n+                SignedJWT signedJWT = SignedJWT.parse(accessToken);\n+                signedJWTInfo.setSignedJWT(signedJWT);\n+                signedJWTInfo.setJwtClaimsSet(signedJWT.getJWTClaimsSet());\n+                signedJWTInfo.setToken(accessToken);\n+                gatewaySignedJWTParseCache.put(signature, signedJWTInfo);\n+            }\n+        } else {\n+            SignedJWT signedJWT = SignedJWT.parse(accessToken);\n+            signedJWTInfo.setSignedJWT(signedJWT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDEzNTI3", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457413527", "createdAt": "2020-07-29T10:59:20Z", "commit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo1OToyMVrOG4zWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo1OToyMVrOG4zWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNDcyMg==", "bodyText": "Change this to check for stored jwtClaimsSet and compute if absent.", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#discussion_r462214722", "createdAt": "2020-07-29T10:59:21Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/jwt/SignedJWTInfo.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.jwt;\n+\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.SignedJWT;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * JWT internal Representation\n+ */\n+public class SignedJWTInfo implements Serializable {\n+\n+    private String token;\n+    private SignedJWT signedJWT;\n+    private JWTClaimsSet jwtClaimsSet;\n+\n+    public SignedJWT getSignedJWT() {\n+\n+        return signedJWT;\n+    }\n+\n+    public void setSignedJWT(SignedJWT signedJWT) {\n+\n+        this.signedJWT = signedJWT;\n+    }\n+\n+    public JWTClaimsSet getJwtClaimsSet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d71caf500528ae16361925fc429828d8f70093", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/49d71caf500528ae16361925fc429828d8f70093", "committedDate": "2020-07-29T11:36:25Z", "message": "improve caching method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/8c7b0f9e6f6a72d67a29d98c16baa28e95d000d2", "committedDate": "2020-07-29T10:35:30Z", "message": "improve caching method"}, "afterCommit": {"oid": "49d71caf500528ae16361925fc429828d8f70093", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/49d71caf500528ae16361925fc429828d8f70093", "committedDate": "2020-07-29T11:36:25Z", "message": "improve caching method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDQwMjY5", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457440269", "createdAt": "2020-07-29T11:42:37Z", "commit": {"oid": "49d71caf500528ae16361925fc429828d8f70093"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d45daf0610f936e8b57f77ce0e918cf8e4ee7b0", "author": {"user": {"login": "tharindu1st", "name": "Tharindu Dasun Dharmarathna"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5d45daf0610f936e8b57f77ce0e918cf8e4ee7b0", "committedDate": "2020-07-29T11:53:15Z", "message": "remove invalid test cases due to caching mechanism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDk2MTQx", "url": "https://github.com/wso2/carbon-apimgt/pull/9080#pullrequestreview-457496141", "createdAt": "2020-07-29T13:01:00Z", "commit": {"oid": "5d45daf0610f936e8b57f77ce0e918cf8e4ee7b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}