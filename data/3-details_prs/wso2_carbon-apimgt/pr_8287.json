{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzc0MTM4", "number": 8287, "title": "GraphQL TryOut Console for Developer Portal", "bodyText": "", "createdAt": "2020-03-02T13:08:11Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8287", "merged": true, "mergeCommit": {"oid": "ff74d1e96a9fd60c96da6bf260973eb96bb0d094"}, "closed": true, "closedAt": "2020-03-03T13:36:47Z", "author": {"login": "rasika1995"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJvuLvgFqTM2NzI4NzM4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKCZpggFqTM2Nzk3OTA1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Mjg3Mzg2", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367287386", "createdAt": "2020-03-02T15:27:18Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyNzoxOFrOFwjscA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NzoxM1rOFwkfqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDc4NA==", "bodyText": "Add license header.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386460784", "createdAt": "2020-03-02T15:27:18Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx", "diffHunk": "@@ -0,0 +1,102 @@\n+import React, { useState, useContext } from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MTcwMA==", "bodyText": "Shall we fix any eslit issues found in the components?  We also need to enable other components and fix them as well.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386461700", "createdAt": "2020-03-02T15:28:41Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/.eslintignore", "diffHunk": "@@ -9,6 +9,7 @@ source/src/app/data/*\n /source/src/app/components/Apis/Details/Comments/*\n /source/src/app/components/Apis/Details/Credentials/*\n /source/src/app/components/Apis/Details/Documents/*\n+/source/src/app/components/Apis/Details/GraphQLConsole/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MjE3Mw==", "bodyText": "License header missing.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386462173", "createdAt": "2020-03-02T15:29:23Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MjQxNw==", "bodyText": "Remove unnecessary empty lines in this file.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386462417", "createdAt": "2020-03-02T15:29:45Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, {\n+    useState, useEffect, useContext, useRef,\n+} from 'react';\n+import GraphiQL from 'graphiql';\n+import fetch from 'isomorphic-fetch';\n+import 'graphiql/graphiql.css';\n+import './explorer.css';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage } from 'react-intl';\n+import GraphiQLExplorer from 'graphiql-explorer';\n+import Api from 'AppData/api';\n+import Box from '@material-ui/core/Box';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const { buildSchema } = require('graphql');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTE0Mg==", "bodyText": "Missing license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386465142", "createdAt": "2020-03-02T15:33:54Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTQ3Ng==", "bodyText": "Exceeds 120 character limit.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386465476", "createdAt": "2020-03-02T15:34:28Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NzAxMw==", "bodyText": "I think skType1 and skType2 are redundant declarations. We can remove them or, define as constants.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386467013", "createdAt": "2020-03-02T15:36:45Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2Nzk0Mw==", "bodyText": "Are we modifying the props here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386467943", "createdAt": "2020-03-02T15:38:31Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTYwOQ==", "bodyText": "The same variable is passed through props as well. Use a different name.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386469609", "createdAt": "2020-03-02T15:40:58Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MDI3OA==", "bodyText": "Use object destruction method.\nconst { value } = event.target;", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386470278", "createdAt": "2020-03-02T15:41:57Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;\n+            let keyType;\n+\n+            setSelectedApplication(event.target.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MDU2NA==", "bodyText": "Here as well... Redundant declaration.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386470564", "createdAt": "2020-03-02T15:42:25Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;\n+            let keyType;\n+\n+            setSelectedApplication(event.target.value);\n+\n+            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n+                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n+                const sKType1 = 'SANDBOX';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjA5Ng==", "bodyText": "Use proper id for FormattedMessages.\nApis.Details.GraphQLConsole.GraphQLAuthentication.api.console.require.access.token", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386472096", "createdAt": "2020-03-02T15:44:40Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;\n+            let keyType;\n+\n+            setSelectedApplication(event.target.value);\n+\n+            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n+                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n+                const sKType1 = 'SANDBOX';\n+                setSelectedKeyType(sKType1);\n+                keyType = 'SANDBOX';\n+            } else {\n+                keyType = selectedKeyType;\n+            }\n+\n+            promiseApp\n+                .then((application) => {\n+                    return application.getKeys();\n+                })\n+                .then((appKeys) => {\n+                    if (appKeys.get(keyType)) {\n+                        ({ accessToken } = appKeys.get(keyType).token);\n+                    }\n+                    setAccessTocken(accessToken);\n+                    SetKeys(appKeys);\n+                });\n+        } else {\n+            let accessToken;\n+            setSelectedKeyType(event.target.value);\n+\n+            if (keys.get(event.target.value)) {\n+                ({ accessToken } = keys.get(event.target.value).token);\n+            }\n+            setAccessTocken(accessToken);\n+        }\n+    };\n+\n+\n+    /**\n+     * Set the environment and URLs for selected environment name\n+     * @param {*} event\n+     */\n+    const handleEnvironemtChange = (event) => {\n+        setSelectedEnvironment(event.target.value);\n+        const urls = environmentObject.find((elm) => event.target.value === elm.environmentName).URLs;\n+        setURLss(urls);\n+    };\n+\n+\n+    /**\n+     * Handle onClick of shown access token\n+     */\n+    const handleClickShowToken = () => {\n+        setShowToken(!showToken);\n+    };\n+\n+\n+    /**\n+     * Load the access token for selected key type\n+     * @param {*} event\n+     */\n+    const handleaccessTockenChanges = (event) => {\n+        setAccessTocken(event.target.value);\n+    };\n+\n+    /**\n+     * Set the security scheme type for selected security scheme type\n+     * @param {*} event\n+     */\n+    const handlesecuritySchemeType = (event) => {\n+        setSecuritySchemeType(event.target.value);\n+    };\n+\n+\n+    return (\n+        <>\n+            <Grid container className={classes.grid}>\n+                {!isPrototypedAPI && !user && (\n+                    <Grid item md={6}>\n+                        <Paper className={classes.userNotificationPaper}>\n+                            <Typography variant='h5' component='h3'>\n+                                <Icon>warning</Icon>\n+                                {' '}\n+                                <FormattedMessage id='notice' defaultMessage='Notice' />\n+                            </Typography>\n+                            <Typography component='p'>\n+                                <FormattedMessage\n+                                    id='api.console.require.access.token'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjUyMw==", "bodyText": "Fix in the other places as well.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386472523", "createdAt": "2020-03-02T15:45:18Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;\n+            let keyType;\n+\n+            setSelectedApplication(event.target.value);\n+\n+            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n+                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n+                const sKType1 = 'SANDBOX';\n+                setSelectedKeyType(sKType1);\n+                keyType = 'SANDBOX';\n+            } else {\n+                keyType = selectedKeyType;\n+            }\n+\n+            promiseApp\n+                .then((application) => {\n+                    return application.getKeys();\n+                })\n+                .then((appKeys) => {\n+                    if (appKeys.get(keyType)) {\n+                        ({ accessToken } = appKeys.get(keyType).token);\n+                    }\n+                    setAccessTocken(accessToken);\n+                    SetKeys(appKeys);\n+                });\n+        } else {\n+            let accessToken;\n+            setSelectedKeyType(event.target.value);\n+\n+            if (keys.get(event.target.value)) {\n+                ({ accessToken } = keys.get(event.target.value).token);\n+            }\n+            setAccessTocken(accessToken);\n+        }\n+    };\n+\n+\n+    /**\n+     * Set the environment and URLs for selected environment name\n+     * @param {*} event\n+     */\n+    const handleEnvironemtChange = (event) => {\n+        setSelectedEnvironment(event.target.value);\n+        const urls = environmentObject.find((elm) => event.target.value === elm.environmentName).URLs;\n+        setURLss(urls);\n+    };\n+\n+\n+    /**\n+     * Handle onClick of shown access token\n+     */\n+    const handleClickShowToken = () => {\n+        setShowToken(!showToken);\n+    };\n+\n+\n+    /**\n+     * Load the access token for selected key type\n+     * @param {*} event\n+     */\n+    const handleaccessTockenChanges = (event) => {\n+        setAccessTocken(event.target.value);\n+    };\n+\n+    /**\n+     * Set the security scheme type for selected security scheme type\n+     * @param {*} event\n+     */\n+    const handlesecuritySchemeType = (event) => {\n+        setSecuritySchemeType(event.target.value);\n+    };\n+\n+\n+    return (\n+        <>\n+            <Grid container className={classes.grid}>\n+                {!isPrototypedAPI && !user && (\n+                    <Grid item md={6}>\n+                        <Paper className={classes.userNotificationPaper}>\n+                            <Typography variant='h5' component='h3'>\n+                                <Icon>warning</Icon>\n+                                {' '}\n+                                <FormattedMessage id='notice' defaultMessage='Notice' />\n+                            </Typography>\n+                            <Typography component='p'>\n+                                <FormattedMessage\n+                                    id='api.console.require.access.token'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjA5Ng=="}, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Mzg5Ng==", "bodyText": "Keep } else { in a single line.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386473896", "createdAt": "2020-03-02T15:47:13Z", "author": {"login": "menakaj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/index.jsx", "diffHunk": "@@ -52,6 +53,16 @@ const LoadableSwitch = withRouter((props) => {\n     const path = '/apis/';\n     const { advertised } = api.advertiseInfo;\n     const redirectURL = path + apiUuid + '/overview';\n+\n+\n+    let tryoutRoute;\n+    if (api.type === 'GRAPHQL') {\n+        tryoutRoute = <Route path='/apis/:apiUuid/test' component={GraphQLConsole} />\n+    }\n+    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Mzk4ODY1", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367398865", "createdAt": "2020-03-02T17:48:29Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0ODoyOVrOFwpB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0ODoyOVrOFwpB5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0ODE5Ng==", "bodyText": "remove commented code", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386548196", "createdAt": "2020-03-02T17:48:29Z", "author": {"login": "pahans"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, {\n+    useState, useEffect, useContext, useRef,\n+} from 'react';\n+import GraphiQL from 'graphiql';\n+import fetch from 'isomorphic-fetch';\n+import 'graphiql/graphiql.css';\n+import './explorer.css';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage } from 'react-intl';\n+import GraphiQLExplorer from 'graphiql-explorer';\n+import Api from 'AppData/api';\n+import Box from '@material-ui/core/Box';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const { buildSchema } = require('graphql');\n+\n+\n+export default function GraphQLUI(props) {\n+    const { accessToken, authorizationHeader, URLss } = props;\n+\n+    const { api } = useContext(ApiContext);\n+    const [schema, setSchema] = useState(null);\n+    const [query, setQuery] = useState('');\n+    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n+    const graphiqlEl = useRef(null);\n+\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+        promiseGraphQL\n+            .then((res) => {\n+                const graphqlSchemaObj = buildSchema(res.data);\n+                setSchema(graphqlSchemaObj);\n+            });\n+    }, []);\n+\n+\n+    const parameters = {};\n+\n+    const handleToggleExplorer = () => {\n+        const newExplorerIsOpen = !isExplorerOpen;\n+        parameters.isExplorerOpen = newExplorerIsOpen;\n+        setIsExplorerOpen(newExplorerIsOpen);\n+    };\n+\n+    /**\n+     *\n+     * @param {*} graphQLParams\n+     */\n+    function graphQLFetcher(graphQLParams) {\n+        let token;\n+        if (authorizationHeader === 'apikey') {\n+            token = accessToken;\n+        } else {\n+            token = 'Bearer ' + accessToken;\n+        }\n+        return fetch((URLss.https), {\n+            method: 'post',\n+            headers: {\n+                Accept: 'application/json',\n+                'Content-Type': 'application/json',\n+                [authorizationHeader]: token,\n+            },\n+            body: JSON.stringify(graphQLParams),\n+        }).then((response) => response.json());\n+    }\n+\n+    if ({ schema } === null) {\n+        return <Progress />;\n+    } else {\n+        return (\n+            <>\n+                <Box width='30%' m={1}>\n+                    <TextField\n+\n+                        label={(\n+                            <FormattedMessage\n+                                defaultMessage='Gateway URLs'\n+                                id='Apis.Details.GraphQLConsole.GraphQLUI.URLs'\n+                            />\n+                        )}\n+                        value={URLss.https}\n+                        name='selectedURL'\n+                        fullWidth\n+                        margin='normal'\n+                        variant='outlined'\n+                        InputProps={URLss.https}\n+                    />\n+                </Box>\n+\n+                <div styles={{ width: '100%' }}>\n+                    <Box display='flex'>\n+                        <Box display='flex'>\n+                            <GraphiQLExplorer\n+                                schema={schema}\n+                                query={query}\n+                                onEdit={setQuery}\n+                                explorerIsOpen={isExplorerOpen}\n+                                onToggleExplorer={handleToggleExplorer}\n+                            // onRunOperation={operationName =>\n+                            //     this._graphiql.handleRunQuery(operationName)\n+                            // }\n+                            />\n+                        </Box>\n+                        <Box display='flex' height='800px' flexGrow={1}>\n+                            <GraphiQL\n+                                ref={graphiqlEl}\n+                                fetcher={(graphQLFetcher)}\n+                                schema={schema}\n+                                query={query}\n+                                // variables={variables}\n+                                onEditQuery={setQuery}\n+                                // onEditVariables={onEditVariables}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Mzk5MDcx", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367399071", "createdAt": "2020-03-02T17:48:47Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0ODo0N1rOFwpCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0ODo0N1rOFwpCgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0ODM1NQ==", "bodyText": "Remove commented code", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386548355", "createdAt": "2020-03-02T17:48:47Z", "author": {"login": "pahans"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, {\n+    useState, useEffect, useContext, useRef,\n+} from 'react';\n+import GraphiQL from 'graphiql';\n+import fetch from 'isomorphic-fetch';\n+import 'graphiql/graphiql.css';\n+import './explorer.css';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage } from 'react-intl';\n+import GraphiQLExplorer from 'graphiql-explorer';\n+import Api from 'AppData/api';\n+import Box from '@material-ui/core/Box';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const { buildSchema } = require('graphql');\n+\n+\n+export default function GraphQLUI(props) {\n+    const { accessToken, authorizationHeader, URLss } = props;\n+\n+    const { api } = useContext(ApiContext);\n+    const [schema, setSchema] = useState(null);\n+    const [query, setQuery] = useState('');\n+    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n+    const graphiqlEl = useRef(null);\n+\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+        promiseGraphQL\n+            .then((res) => {\n+                const graphqlSchemaObj = buildSchema(res.data);\n+                setSchema(graphqlSchemaObj);\n+            });\n+    }, []);\n+\n+\n+    const parameters = {};\n+\n+    const handleToggleExplorer = () => {\n+        const newExplorerIsOpen = !isExplorerOpen;\n+        parameters.isExplorerOpen = newExplorerIsOpen;\n+        setIsExplorerOpen(newExplorerIsOpen);\n+    };\n+\n+    /**\n+     *\n+     * @param {*} graphQLParams\n+     */\n+    function graphQLFetcher(graphQLParams) {\n+        let token;\n+        if (authorizationHeader === 'apikey') {\n+            token = accessToken;\n+        } else {\n+            token = 'Bearer ' + accessToken;\n+        }\n+        return fetch((URLss.https), {\n+            method: 'post',\n+            headers: {\n+                Accept: 'application/json',\n+                'Content-Type': 'application/json',\n+                [authorizationHeader]: token,\n+            },\n+            body: JSON.stringify(graphQLParams),\n+        }).then((response) => response.json());\n+    }\n+\n+    if ({ schema } === null) {\n+        return <Progress />;\n+    } else {\n+        return (\n+            <>\n+                <Box width='30%' m={1}>\n+                    <TextField\n+\n+                        label={(\n+                            <FormattedMessage\n+                                defaultMessage='Gateway URLs'\n+                                id='Apis.Details.GraphQLConsole.GraphQLUI.URLs'\n+                            />\n+                        )}\n+                        value={URLss.https}\n+                        name='selectedURL'\n+                        fullWidth\n+                        margin='normal'\n+                        variant='outlined'\n+                        InputProps={URLss.https}\n+                    />\n+                </Box>\n+\n+                <div styles={{ width: '100%' }}>\n+                    <Box display='flex'>\n+                        <Box display='flex'>\n+                            <GraphiQLExplorer\n+                                schema={schema}\n+                                query={query}\n+                                onEdit={setQuery}\n+                                explorerIsOpen={isExplorerOpen}\n+                                onToggleExplorer={handleToggleExplorer}\n+                            // onRunOperation={operationName =>\n+                            //     this._graphiql.handleRunQuery(operationName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDAwMDM5", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367400039", "createdAt": "2020-03-02T17:50:08Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDowOVrOFwpFbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDowOVrOFwpFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTEwMg==", "bodyText": "setURLss or setURLs?", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386549102", "createdAt": "2020-03-02T17:50:09Z", "author": {"login": "pahans"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx", "diffHunk": "@@ -0,0 +1,102 @@\n+import React, { useState, useContext } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import GraphQLAuthentication from './GraphQLAuthentication';\n+import GraphQLUI from './GraphQLUI';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        // height: theme.spacing(120),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+}));\n+\n+\n+export default function GraphQLConsole() {\n+    const classes = useStyles();\n+    const { api } = useContext(ApiContext);\n+    const environmentObject = api.endpointURLs;\n+    const [URLss, setURLss] = useState(environmentObject[0].URLs);\n+    const [accessToken, setAccessTocken] = useState('');\n+    const [securitySchemeType, setSecuritySchemeType] = useState('OAUTH');\n+    const environments = api.endpointURLs.map((endpoint) => { return endpoint.environmentName; });\n+    const [selectedEnvironment, setSelectedEnvironment] = useState(environments[0]);\n+    const [notFound, setFound] = useState(false);\n+\n+\n+    if (api == null) {\n+        return <Progress />;\n+    }\n+    if (notFound) {\n+        return 'API Not found !';\n+    }\n+    let isApiKeyEnabled = false;\n+    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n+    let prefix = 'Bearer';\n+\n+    if (api && api.securityScheme) {\n+        isApiKeyEnabled = api.securityScheme.includes('api_key');\n+        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n+            authorizationHeader = 'apikey';\n+            prefix = '';\n+        }\n+    }\n+\n+    return (\n+        <>\n+            <Typography variant='h4' className={classes.titleSub}>\n+                <FormattedMessage id='Apis.Details.GraphQLConsole.GraphQLConsole.title' defaultMessage='Try Out' />\n+            </Typography>\n+            <Paper className={classes.root}>\n+                <GraphQLAuthentication\n+                    api={api}\n+                    accessToken={accessToken}\n+                    setAccessTocken={setAccessTocken}\n+                    authorizationHeader={authorizationHeader}\n+                    securitySchemeType={securitySchemeType}\n+                    setSecuritySchemeType={setSecuritySchemeType}\n+                    prefix={prefix}\n+                    isApiKeyEnabled={isApiKeyEnabled}\n+                    selectedEnvironment={selectedEnvironment}\n+                    setSelectedEnvironment={setSelectedEnvironment}\n+                    environments={environments}\n+                    setURLss={setURLss}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDAwNDQ3", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367400447", "createdAt": "2020-03-02T17:50:39Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDo0MFrOFwpGww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDo0MFrOFwpGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTQ0Mw==", "bodyText": "Remove commented code", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386549443", "createdAt": "2020-03-02T17:50:40Z", "author": {"login": "pahans"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx", "diffHunk": "@@ -0,0 +1,102 @@\n+import React, { useState, useContext } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import GraphQLAuthentication from './GraphQLAuthentication';\n+import GraphQLUI from './GraphQLUI';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        // height: theme.spacing(120),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDAyMjI2", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367402226", "createdAt": "2020-03-02T17:53:12Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MzoxM1rOFwpMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MzoxM1rOFwpMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU1MDgwMw==", "bodyText": "render function is too lengthy and harder to read IMO. suggestion: break this into smaller functions.", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386550803", "createdAt": "2020-03-02T17:53:13Z", "author": {"login": "pahans"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx", "diffHunk": "@@ -0,0 +1,392 @@\n+import React, { useState, useEffect } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import AuthManager from 'AppData/AuthManager';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import Grid from '@material-ui/core/Grid';\n+import Box from '@material-ui/core/Box';\n+import Icon from '@material-ui/core/Icon';\n+import TextField from '@material-ui/core/TextField';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import InputAdornment from '@material-ui/core/InputAdornment';\n+import IconButton from '@material-ui/core/IconButton';\n+import {\n+    Radio, RadioGroup, FormControlLabel, FormControl,\n+} from '@material-ui/core';\n+import { makeStyles } from '@material-ui/core/styles';\n+import SelectAppPanel from '../ApiConsole/SelectAppPanel';\n+import Application from '../../../../data/Application';\n+import Api from '../../../../data/api';\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        height: theme.spacing(100),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+    grid: {\n+        marginTop: theme.spacing(4),\n+        marginBottom: theme.spacing(4),\n+        paddingRight: theme.spacing(2),\n+        justifyContent: 'center',\n+    },\n+    userNotificationPaper: {\n+        padding: theme.spacing(2),\n+    },\n+    centerItems: {\n+        margin: 'auto',\n+    },\n+    inputAdornmentStart: {\n+        minWidth: theme.spacing(18),\n+    },\n+}));\n+\n+\n+/**\n+ *\n+ * @param {*} props\n+ */\n+export default function GraphQLAuthentication(props) {\n+    const classes = useStyles();\n+\n+    const {\n+        api,\n+        accessToken,\n+        setAccessTocken,\n+        authorizationHeader,\n+        securitySchemeType,\n+        setSecuritySchemeType,\n+        prefix,\n+        isApiKeyEnabled,\n+        selectedEnvironment,\n+        setSelectedEnvironment,\n+        environments,\n+        setURLss,\n+        environmentObject,\n+        setFound,\n+    } = props;\n+\n+    const user = AuthManager.getUser();\n+    const [showToken, setShowToken] = useState(false);\n+    const [subscriptions, setSubscriptions] = useState(null);\n+    const [selectedApplication, setSelectedApplication] = useState();\n+    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n+    const [keys, SetKeys] = useState();\n+    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+\n+        promiseGraphQL\n+            .then(() => {\n+                if (user != null) {\n+                    return apiClient.getSubscriptions(apiID);\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .then((subscriptionsResponse) => {\n+                if (subscriptionsResponse != null) { //\n+                    const subs = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED');\n+                    if (subs && subs.length > 0) {\n+                        const sApplication = subs[0].applicationId;\n+                        setSelectedApplication(sApplication);\n+                        const promiseApp = Application.get(sApplication);\n+                        promiseApp\n+                            .then((application) => {\n+                                return application.getKeys();\n+                            })\n+                            .then((appKeys) => {\n+                                if (appKeys.get('SANDBOX')) {\n+                                    const sKType1 = 'SANDBOX';\n+                                    setSelectedKeyType(sKType1);\n+                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n+                                } else if (appKeys.get('PRODUCTION')) {\n+                                    const sKType2 = 'PRODUCTION';\n+                                    setSelectedKeyType(sKType2);\n+                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n+                                }\n+                                SetKeys(appKeys);\n+                            });\n+                    }\n+                    setSubscriptions(subs);\n+                }\n+            })\n+            .catch((error) => {\n+                if (process.env.NODE_ENV !== 'production') {\n+                    console.error(error);\n+                }\n+                const { status } = error;\n+                if (status === 404) {\n+                    setFound(true);\n+                }\n+            });\n+    }, []);\n+\n+\n+    /**\n+     *\n+     * @param {React.SyntheticEvent} event\n+     */\n+    const handleChanges = (event) => {\n+        if (event.target.name === 'selectedApplication') {\n+            const promiseApp = Application.get(event.target.value);\n+            let accessToken;\n+            let keyType;\n+\n+            setSelectedApplication(event.target.value);\n+\n+            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n+                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n+                const sKType1 = 'SANDBOX';\n+                setSelectedKeyType(sKType1);\n+                keyType = 'SANDBOX';\n+            } else {\n+                keyType = selectedKeyType;\n+            }\n+\n+            promiseApp\n+                .then((application) => {\n+                    return application.getKeys();\n+                })\n+                .then((appKeys) => {\n+                    if (appKeys.get(keyType)) {\n+                        ({ accessToken } = appKeys.get(keyType).token);\n+                    }\n+                    setAccessTocken(accessToken);\n+                    SetKeys(appKeys);\n+                });\n+        } else {\n+            let accessToken;\n+            setSelectedKeyType(event.target.value);\n+\n+            if (keys.get(event.target.value)) {\n+                ({ accessToken } = keys.get(event.target.value).token);\n+            }\n+            setAccessTocken(accessToken);\n+        }\n+    };\n+\n+\n+    /**\n+     * Set the environment and URLs for selected environment name\n+     * @param {*} event\n+     */\n+    const handleEnvironemtChange = (event) => {\n+        setSelectedEnvironment(event.target.value);\n+        const urls = environmentObject.find((elm) => event.target.value === elm.environmentName).URLs;\n+        setURLss(urls);\n+    };\n+\n+\n+    /**\n+     * Handle onClick of shown access token\n+     */\n+    const handleClickShowToken = () => {\n+        setShowToken(!showToken);\n+    };\n+\n+\n+    /**\n+     * Load the access token for selected key type\n+     * @param {*} event\n+     */\n+    const handleaccessTockenChanges = (event) => {\n+        setAccessTocken(event.target.value);\n+    };\n+\n+    /**\n+     * Set the security scheme type for selected security scheme type\n+     * @param {*} event\n+     */\n+    const handlesecuritySchemeType = (event) => {\n+        setSecuritySchemeType(event.target.value);\n+    };\n+\n+\n+    return (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjgxMjI1", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367681225", "createdAt": "2020-03-03T03:26:27Z", "commit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzoyNjoyN1rOFw3M1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzoyODoxNFrOFw3Oaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4MDM3Mg==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386780372", "createdAt": "2020-03-03T03:26:27Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx", "diffHunk": "@@ -0,0 +1,102 @@\n+import React, { useState, useContext } from 'react';\n+import Paper from '@material-ui/core/Paper';\n+import PropTypes from 'prop-types';\n+import Typography from '@material-ui/core/Typography';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import GraphQLAuthentication from './GraphQLAuthentication';\n+import GraphQLUI from './GraphQLUI';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const useStyles = makeStyles((theme) => ({\n+    paper: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+        // height: theme.spacing(120),\n+    },\n+    titleSub: {\n+        marginLeft: theme.spacing(2),\n+        paddingTop: theme.spacing(2),\n+        paddingBottom: theme.spacing(2),\n+    },\n+    root: {\n+        margin: theme.spacing(1),\n+        padding: theme.spacing(1),\n+    },\n+}));\n+\n+\n+export default function GraphQLConsole() {\n+    const classes = useStyles();\n+    const { api } = useContext(ApiContext);\n+    const environmentObject = api.endpointURLs;\n+    const [URLss, setURLss] = useState(environmentObject[0].URLs);\n+    const [accessToken, setAccessTocken] = useState('');\n+    const [securitySchemeType, setSecuritySchemeType] = useState('OAUTH');\n+    const environments = api.endpointURLs.map((endpoint) => { return endpoint.environmentName; });\n+    const [selectedEnvironment, setSelectedEnvironment] = useState(environments[0]);\n+    const [notFound, setFound] = useState(false);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4MDU1Ng==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386780556", "createdAt": "2020-03-03T03:27:12Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, {\n+    useState, useEffect, useContext, useRef,\n+} from 'react';\n+import GraphiQL from 'graphiql';\n+import fetch from 'isomorphic-fetch';\n+import 'graphiql/graphiql.css';\n+import './explorer.css';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage } from 'react-intl';\n+import GraphiQLExplorer from 'graphiql-explorer';\n+import Api from 'AppData/api';\n+import Box from '@material-ui/core/Box';\n+import { ApiContext } from '../ApiContext';\n+import Progress from '../../../Shared/Progress';\n+\n+\n+const { buildSchema } = require('graphql');\n+\n+\n+export default function GraphQLUI(props) {\n+    const { accessToken, authorizationHeader, URLss } = props;\n+\n+    const { api } = useContext(ApiContext);\n+    const [schema, setSchema] = useState(null);\n+    const [query, setQuery] = useState('');\n+    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n+    const graphiqlEl = useRef(null);\n+\n+\n+    useEffect(() => {\n+        const apiID = api.id;\n+        const apiClient = new Api();\n+        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n+        promiseGraphQL\n+            .then((res) => {\n+                const graphqlSchemaObj = buildSchema(res.data);\n+                setSchema(graphqlSchemaObj);\n+            });\n+    }, []);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4MDc0MQ==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386780741", "createdAt": "2020-03-03T03:28:03Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/GraphQLConsole/explorer.css", "diffHunk": "@@ -0,0 +1,6 @@\n+.graphiql-explorer-root {\n+    max-height: 750px;\n+    overflow-y: scroll;\n+}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4MDc3OQ==", "bodyText": "remove extra line", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#discussion_r386780779", "createdAt": "2020-03-03T03:28:14Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/index.jsx", "diffHunk": "@@ -52,6 +53,16 @@ const LoadableSwitch = withRouter((props) => {\n     const path = '/apis/';\n     const { advertised } = api.advertiseInfo;\n     const redirectURL = path + apiUuid + '/overview';\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cc969de2c1491840d2ef34d38b70d40443dc0a3", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6cc969de2c1491840d2ef34d38b70d40443dc0a3", "committedDate": "2020-03-02T12:36:36Z", "message": "Adding GraphQL TryOut Console"}, "afterCommit": {"oid": "9ae15e5d41b8891e391505983edca097ed50cdd7", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/9ae15e5d41b8891e391505983edca097ed50cdd7", "committedDate": "2020-03-03T09:15:41Z", "message": "GraphQL TryOut Console"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3ODM5ODUw", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367839850", "createdAt": "2020-03-03T09:56:57Z", "commit": {"oid": "9ae15e5d41b8891e391505983edca097ed50cdd7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7751e27ed2c15d827e1a1b6599e5261b091d0be2", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/7751e27ed2c15d827e1a1b6599e5261b091d0be2", "committedDate": "2020-03-03T12:16:10Z", "message": "add GraphQL Tryout console"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ddf293bd640b573a6ae2831b79902d30f85142", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/27ddf293bd640b573a6ae2831b79902d30f85142", "committedDate": "2020-03-03T12:16:11Z", "message": "GraphQL TryOut Console"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e9c1393ec0bea6a0a55ef00e480527a3350d728", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/1e9c1393ec0bea6a0a55ef00e480527a3350d728", "committedDate": "2020-03-03T12:16:12Z", "message": "GraphQL TryOut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTU3MjQ5", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367957249", "createdAt": "2020-03-03T13:01:05Z", "commit": {"oid": "ec5e4208fac46de141f4b6967b19c5139e1056e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d1ce6fecc4d435095687f9a2d04faab20ac3a2", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/70d1ce6fecc4d435095687f9a2d04faab20ac3a2", "committedDate": "2020-03-03T13:24:03Z", "message": "graphql tryout console for devloper portal"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec5e4208fac46de141f4b6967b19c5139e1056e5", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/ec5e4208fac46de141f4b6967b19c5139e1056e5", "committedDate": "2020-03-03T10:15:50Z", "message": "GraphQL TryOut"}, "afterCommit": {"oid": "70d1ce6fecc4d435095687f9a2d04faab20ac3a2", "author": {"user": {"login": "rasika1995", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/70d1ce6fecc4d435095687f9a2d04faab20ac3a2", "committedDate": "2020-03-03T13:24:03Z", "message": "graphql tryout console for devloper portal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTc5MDU0", "url": "https://github.com/wso2/carbon-apimgt/pull/8287#pullrequestreview-367979054", "createdAt": "2020-03-03T13:33:09Z", "commit": {"oid": "70d1ce6fecc4d435095687f9a2d04faab20ac3a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2952, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}