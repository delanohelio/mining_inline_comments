{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NjUyNjA3", "number": 9016, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1Mzo1MFrOERDmDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTozMTozM1rOFH6H7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzIwMTQzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1Mzo1MFrOG1jfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNjowNlrOG1oKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw==", "bodyText": "I think putting it this way would make each and every event handled in a different thread. And be started with a delay. Can we only start a task when an API is need to be deployed.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458809227", "createdAt": "2020-07-22T13:53:50Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -81,9 +84,18 @@ public void onMessage(Message message) {\n                              * timestamp - system time of the event published\n                              * event - event data\n                              */\n-                            handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),\n-                                    (Long) map.get(APIConstants.EVENT_TIMESTAMP),\n-                                    (String) map.get(APIConstants.EVENT_PAYLOAD));\n+\n+                            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n+                            final Runnable task = new Runnable() {\n+                                @Override\n+                                public void run() {\n+                                    handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d790b739bb69f607230509a18f052222948de5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTc4Nw==", "bodyText": "We can do the change like below:\n\nCreate a new ThreadScheduler at the JMSMessageListener with a fixed number of threads.\nWhile submitting the Task to the above Scheduler override the run method either with deploy or undeploy methods.\nUse no delay while submitting the task - we initially discussed about it, but in a later discussion changed the approach.\nNow the thread will be different from JMS event receiving thread. So do the waiting in the same thread by using a thread sleep and continue with the pulling and deployment.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458821787", "createdAt": "2020-07-22T14:10:43Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -81,9 +84,18 @@ public void onMessage(Message message) {\n                              * timestamp - system time of the event published\n                              * event - event data\n                              */\n-                            handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),\n-                                    (Long) map.get(APIConstants.EVENT_TIMESTAMP),\n-                                    (String) map.get(APIConstants.EVENT_PAYLOAD));\n+\n+                            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n+                            final Runnable task = new Runnable() {\n+                                @Override\n+                                public void run() {\n+                                    handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw=="}, "originalCommit": {"oid": "47d790b739bb69f607230509a18f052222948de5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTY1OQ==", "bodyText": "67da620", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458885659", "createdAt": "2020-07-22T15:36:06Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -81,9 +84,18 @@ public void onMessage(Message message) {\n                              * timestamp - system time of the event published\n                              * event - event data\n                              */\n-                            handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),\n-                                    (Long) map.get(APIConstants.EVENT_TIMESTAMP),\n-                                    (String) map.get(APIConstants.EVENT_PAYLOAD));\n+\n+                            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n+                            final Runnable task = new Runnable() {\n+                                @Override\n+                                public void run() {\n+                                    handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw=="}, "originalCommit": {"oid": "47d790b739bb69f607230509a18f052222948de5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDAzMjA4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1NzowMlrOG1roXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxMDo1N1rOG1sJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjU1OA==", "bodyText": "Make this a constant.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458942558", "createdAt": "2020-07-22T16:57:02Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -55,6 +58,7 @@\n     private InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n     GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n             .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDk0OQ==", "bodyText": "5e8ba54", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950949", "createdAt": "2020-07-22T17:10:57Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -55,6 +58,7 @@\n     private InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n     GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n             .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjU1OA=="}, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA0OTgwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowMTozMlrOG1rzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowMTozMlrOG1rzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NTM2OA==", "bodyText": "As a practice give a name to Threads in the thread pool. So use the override of newScheduledThreadPool which accepts a ThreadFactory, and use it to give a name.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458945368", "createdAt": "2020-07-22T17:01:32Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -55,6 +58,7 @@\n     private InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n     GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n             .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA1NjM0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowMzoyM1rOG1r3nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxMDo0M1rOG1sIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjQ2MQ==", "bodyText": "Log the exception here.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458946461", "createdAt": "2020-07-22T17:03:23Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -60,6 +64,11 @@ public void init() throws ArtifactSynchronizerException {\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n         CloseableHttpResponse httpResponse = null;\n+        try {\n+            Thread.sleep(gatewayArtifactSynchronizerProperties.getEventWaitingTime());\n+        } catch (InterruptedException e) {\n+            // Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDc5Nw==", "bodyText": "bb95666", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950797", "createdAt": "2020-07-22T17:10:43Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -60,6 +64,11 @@ public void init() throws ArtifactSynchronizerException {\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n         CloseableHttpResponse httpResponse = null;\n+        try {\n+            Thread.sleep(gatewayArtifactSynchronizerProperties.getEventWaitingTime());\n+        } catch (InterruptedException e) {\n+            // Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjQ2MQ=="}, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA2NDg4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowNTo0MVrOG1r9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxMDo0MFrOG1sIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Nzg1MA==", "bodyText": "Add a meaningful debug log correlating EventId, APIName and other useful details in the event.", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458947850", "createdAt": "2020-07-22T17:05:41Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,12 +114,24 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n+                Runnable task = null;\n                 if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 } else if (APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                }\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 }\n+                scheduler.schedule(task, 1, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDc3Ng==", "bodyText": "bb95666", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950776", "createdAt": "2020-07-22T17:10:40Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,12 +114,24 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n+                Runnable task = null;\n                 if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 } else if (APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                }\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 }\n+                scheduler.schedule(task, 1, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Nzg1MA=="}, "originalCommit": {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODM2NjUzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTozMTozM1rOIJjhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzo0NzozMVrOIONEzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MDE0OA==", "bodyText": "Don't we have to include context information in the error log? ie: API id", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r546890148", "createdAt": "2020-12-21T19:31:33Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,24 +114,39 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n         if ((APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)\n                 || APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType))\n                 && gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded),\n-                    DeployAPIInGatewayEvent.class);\n+            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded), DeployAPIInGatewayEvent.class);\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n-                try {\n-                    if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                        inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                        if (debugEnabled) {\n-                            log.debug(gatewayEvent.getEventId() + \" processed and deployed in gateway\");\n+                Runnable task = null;\n+                if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n+                    task = new Runnable() {\n+\n+                        @Override public void run() {\n+                            try {\n+                                inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                            } catch (ArtifactSynchronizerException e) {\n+                                log.error(\"Error in deploying artifacts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb95666b85e9ca2fe650f54b212bcdce5d06008f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2NTE5OA==", "bodyText": "Fixed 63c98e7", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r551765198", "createdAt": "2021-01-05T07:47:31Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,24 +114,39 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n         if ((APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)\n                 || APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType))\n                 && gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded),\n-                    DeployAPIInGatewayEvent.class);\n+            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded), DeployAPIInGatewayEvent.class);\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n-                try {\n-                    if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                        inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                        if (debugEnabled) {\n-                            log.debug(gatewayEvent.getEventId() + \" processed and deployed in gateway\");\n+                Runnable task = null;\n+                if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n+                    task = new Runnable() {\n+\n+                        @Override public void run() {\n+                            try {\n+                                inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                            } catch (ArtifactSynchronizerException e) {\n+                                log.error(\"Error in deploying artifacts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MDE0OA=="}, "originalCommit": {"oid": "bb95666b85e9ca2fe650f54b212bcdce5d06008f"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3197, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}