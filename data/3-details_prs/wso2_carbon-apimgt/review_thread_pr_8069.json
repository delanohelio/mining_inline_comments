{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzk3NDM5", "number": 8069, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOToyNjozNFrODdQy2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo1MToyNFrODilXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDEwNDU5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOToyNjozNFrOFlw1-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0OTo1NFrOGHyJdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTg4Mg==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r375141882", "createdAt": "2020-02-05T09:26:34Z", "author": {"login": "mushthaq33"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n                                  final long accessExp) {\n \n+        Iterable<Cache<?, ?>> availableCaches = Caching.getCacheManager(cacheManagerName).getCaches();\n+        for (Cache cache:availableCaches) {\n+            if(cache.getName().equalsIgnoreCase(getCacheName(cacheName))){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDgzOA==", "bodyText": "resolved by #8332", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r410814838", "createdAt": "2020-04-19T04:49:54Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n                                  final long accessExp) {\n \n+        Iterable<Cache<?, ?>> availableCaches = Caching.getCacheManager(cacheManagerName).getCaches();\n+        for (Cache cache:availableCaches) {\n+            if(cache.getName().equalsIgnoreCase(getCacheName(cacheName))){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTg4Mg=="}, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDEwNTUyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOToyNjo0N1rOFlw2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0ODo1MVrOGHyJJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MjAxMQ==", "bodyText": "Formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r375142011", "createdAt": "2020-02-05T09:26:47Z", "author": {"login": "mushthaq33"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n                                  final long accessExp) {\n \n+        Iterable<Cache<?, ?>> availableCaches = Caching.getCacheManager(cacheManagerName).getCaches();\n+        for (Cache cache:availableCaches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDc1Ng==", "bodyText": "resolved by #8332", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r410814756", "createdAt": "2020-04-19T04:48:51Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n                                  final long accessExp) {\n \n+        Iterable<Cache<?, ?>> availableCaches = Caching.getCacheManager(cacheManagerName).getCaches();\n+        for (Cache cache:availableCaches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MjAxMQ=="}, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQwMjQwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNjo0MDo0MVrOFmQmyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo1MDowNVrOGHyJjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2MjI4Mg==", "bodyText": "use braces to improve readability\nreturn (Boolean.parseBoolean(ServerConfiguration.getInstance().getFirstProperty(\"Cache.ForceLocalCache\"))\n&& !cacheName.startsWith(\"$local$.\")) ? \"$local$.\" + cacheName : cacheName;", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r375662282", "createdAt": "2020-02-06T06:40:41Z", "author": {"login": "isharac"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8224,6 +8231,11 @@ public static Cache getCache(final String cacheManagerName, final String cacheNa\n         return Caching.getCacheManager(cacheManagerName).getCache(cacheName);\n     }\n \n+    private static String getCacheName(String cacheName) {\n+        return Boolean.parseBoolean(ServerConfiguration.getInstance().getFirstProperty(\"Cache.ForceLocalCache\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDg2MA==", "bodyText": "resolved by #8332", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r410814860", "createdAt": "2020-04-19T04:50:05Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8224,6 +8231,11 @@ public static Cache getCache(final String cacheManagerName, final String cacheNa\n         return Caching.getCacheManager(cacheManagerName).getCache(cacheName);\n     }\n \n+    private static String getCacheName(String cacheName) {\n+        return Boolean.parseBoolean(ServerConfiguration.getInstance().getFirstProperty(\"Cache.ForceLocalCache\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2MjI4Mg=="}, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTkwMzg4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo1MToyNFrOFt6apQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzowNzo1N1rOF_d8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4NzMzMw==", "bodyText": "Do we need to synchronize this at the method level? If this method is abundantly used, then having the method synchronized would produce unnecessary contentions. If that's the case can we only wrap the object creation with a sync block?", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r383687333", "createdAt": "2020-02-25T06:51:24Z", "author": {"login": "jaadds"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5NTMwNQ==", "bodyText": "When starting up the server and caches are getting initialised and intermittently some threads try to access the caches simultaneously, so when two thread already inside this method and  trying to create the same cache if not present, then following kind of sample error occurs.\njavax.cache.CacheException: Cache $__local__$.gatewayUsernameCache already exists\nAs per my understanding only in startup time this method get's invoked which creates the relevant caches.", "url": "https://github.com/wso2/carbon-apimgt/pull/8069#discussion_r402095305", "createdAt": "2020-04-02T07:07:57Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -8202,9 +8202,16 @@ public static String getAnalyticsServerPassword() {\n      * @param accessExp        - Value of the ACCESSED Expiry Type\n      * @return - The cache object\n      */\n-    public static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,\n+    public synchronized static Cache getCache(final String cacheManagerName, final String cacheName, final long modifiedExp,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4NzMzMw=="}, "originalCommit": {"oid": "f6e25f95dbc2bd8cc9a58fd1fcd5ebf808f7a2f1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2896, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}