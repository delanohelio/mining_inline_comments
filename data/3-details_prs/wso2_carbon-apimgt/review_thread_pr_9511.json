{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTQ5NTg2", "number": 9511, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyMjo1N1rOFG_V6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNjowNlrOFG_Y0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODczNTc3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyMjo1N1rOIIQjFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDo0NzoyMFrOIIS-sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMDY0Ng==", "bodyText": "Is this line formatted?", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545530646", "createdAt": "2020-12-18T02:22:57Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3MDQ4MQ==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545570481", "createdAt": "2020-12-18T04:47:20Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMDY0Ng=="}, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODczOTY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNDo1MlrOIIQlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDo0Nzo1MFrOIIS_Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTIyNQ==", "bodyText": "lets put a if check here to check for swagger def in the returned api obj. if definition is there, no need to get the def again.", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531225", "createdAt": "2020-12-18T02:24:52Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3MDYwNg==", "bodyText": "resolved, moved to getRevisionAPI", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545570606", "createdAt": "2020-12-18T04:47:50Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTIyNQ=="}, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODc0MDY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNToxMlrOIIQl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDo0Nzo1N1rOIIS_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTM1Ng==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531356", "createdAt": "2020-12-18T02:25:12Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));\n+        Set<String> environments = new HashSet<>();\n+        for (APIRevisionDeployment apiRevisionDeployment : apiRevisionDeployments) {\n+            environments.add(apiRevisionDeployment.getDeployment());\n+        }\n+        api.setEnvironments(environments);\n+        try {\n+            builder = getAPITemplateBuilder(api);\n+        } catch (Exception e) {\n+            handleException(\"Error while publishing to Gateway \", e);\n+        }\n+        Map<String, String> failedEnvironment = gatewayManager.deployAPIRevisionToGateway(api, builder, tenantDomain);\n+        apiMgtDAO.addAPIRevisionDeployment(apiRevisionId, apiRevisionDeployments);\n+    }\n+\n+    @Override\n+    public APIRevisionDeployment getAPIRevisionDeployment(String name, String type) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByNameAndType(name,type);\n+    }\n+\n+    @Override\n+    public List<APIRevisionDeployment> getAPIRevisionDeploymentList(String revisionUUID) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByRevisionUUID(revisionUUID);\n+    }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void undeployAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3MDYyOQ==", "bodyText": "resolved, moved to getRevisionAPI", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545570629", "createdAt": "2020-12-18T04:47:57Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));\n+        Set<String> environments = new HashSet<>();\n+        for (APIRevisionDeployment apiRevisionDeployment : apiRevisionDeployments) {\n+            environments.add(apiRevisionDeployment.getDeployment());\n+        }\n+        api.setEnvironments(environments);\n+        try {\n+            builder = getAPITemplateBuilder(api);\n+        } catch (Exception e) {\n+            handleException(\"Error while publishing to Gateway \", e);\n+        }\n+        Map<String, String> failedEnvironment = gatewayManager.deployAPIRevisionToGateway(api, builder, tenantDomain);\n+        apiMgtDAO.addAPIRevisionDeployment(apiRevisionId, apiRevisionDeployments);\n+    }\n+\n+    @Override\n+    public APIRevisionDeployment getAPIRevisionDeployment(String name, String type) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByNameAndType(name,type);\n+    }\n+\n+    @Override\n+    public List<APIRevisionDeployment> getAPIRevisionDeploymentList(String revisionUUID) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByRevisionUUID(revisionUUID);\n+    }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void undeployAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTM1Ng=="}, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODc0MzIyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNjowNlrOIIQnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDo0ODoxMlrOIIS_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTY4OA==", "bodyText": "lets populate the swagger def from here . this would prevent unnecessary calls", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531688", "createdAt": "2020-12-18T02:26:06Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java", "diffHunk": "@@ -462,6 +462,55 @@ public API getAPI(APIIdentifier identifier) throws APIManagementException {\n         }\n     }\n \n+    public API getRevisionAPI(APIIdentifier identifier, APIRevision apiRevision) throws APIManagementException {\n+        String apiPath = APIUtil.getRevisionPath(apiRevision.getApiUUID(),apiRevision.getId()) + APIConstants.API_KEY;\n+        Registry registry;\n+        try {\n+            String apiTenantDomain = getTenantDomain(identifier);\n+            int apiTenantId = getTenantManager()\n+                    .getTenantId(apiTenantDomain);\n+            if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(apiTenantDomain)) {\n+                APIUtil.loadTenantRegistry(apiTenantId);\n+            }\n+\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) { //cross tenant scenario\n+                registry = getRegistryService().getGovernanceUserRegistry(\n+                        getTenantAwareUsername(APIUtil.replaceEmailDomainBack(identifier.getProviderName())), apiTenantId);\n+            } else {\n+                registry = this.registry;\n+            }\n+            GenericArtifactManager artifactManager = getAPIGenericArtifactManagerFromUtil(registry,\n+                    APIConstants.API_KEY);\n+            Resource apiResource = registry.get(apiPath);\n+            String artifactId = apiResource.getUUID();\n+            if (artifactId == null) {\n+                throw new APIManagementException(\"artifact id is null for : \" + apiPath);\n+            }\n+            GenericArtifact apiArtifact = artifactManager.getGenericArtifact(artifactId);\n+\n+            API api = APIUtil.getAPIForPublishing(apiArtifact, registry);\n+            APIUtil.updateAPIProductDependencies(api, registry);\n+\n+            //check for API visibility\n+            if (APIConstants.API_GLOBAL_VISIBILITY.equals(api.getVisibility())) { //global api\n+                return api;\n+            }\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) {\n+                throw new APIManagementException(\"User \" + username + \" does not have permission to view API : \"\n+                        + api.getId().getApiName());\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3MDY5NQ==", "bodyText": "resolved", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545570695", "createdAt": "2020-12-18T04:48:12Z", "author": {"login": "CrowleyRajapakse"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java", "diffHunk": "@@ -462,6 +462,55 @@ public API getAPI(APIIdentifier identifier) throws APIManagementException {\n         }\n     }\n \n+    public API getRevisionAPI(APIIdentifier identifier, APIRevision apiRevision) throws APIManagementException {\n+        String apiPath = APIUtil.getRevisionPath(apiRevision.getApiUUID(),apiRevision.getId()) + APIConstants.API_KEY;\n+        Registry registry;\n+        try {\n+            String apiTenantDomain = getTenantDomain(identifier);\n+            int apiTenantId = getTenantManager()\n+                    .getTenantId(apiTenantDomain);\n+            if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(apiTenantDomain)) {\n+                APIUtil.loadTenantRegistry(apiTenantId);\n+            }\n+\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) { //cross tenant scenario\n+                registry = getRegistryService().getGovernanceUserRegistry(\n+                        getTenantAwareUsername(APIUtil.replaceEmailDomainBack(identifier.getProviderName())), apiTenantId);\n+            } else {\n+                registry = this.registry;\n+            }\n+            GenericArtifactManager artifactManager = getAPIGenericArtifactManagerFromUtil(registry,\n+                    APIConstants.API_KEY);\n+            Resource apiResource = registry.get(apiPath);\n+            String artifactId = apiResource.getUUID();\n+            if (artifactId == null) {\n+                throw new APIManagementException(\"artifact id is null for : \" + apiPath);\n+            }\n+            GenericArtifact apiArtifact = artifactManager.getGenericArtifact(artifactId);\n+\n+            API api = APIUtil.getAPIForPublishing(apiArtifact, registry);\n+            APIUtil.updateAPIProductDependencies(api, registry);\n+\n+            //check for API visibility\n+            if (APIConstants.API_GLOBAL_VISIBILITY.equals(api.getVisibility())) { //global api\n+                return api;\n+            }\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) {\n+                throw new APIManagementException(\"User \" + username + \" does not have permission to view API : \"\n+                        + api.getId().getApiName());\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTY4OA=="}, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2933, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}