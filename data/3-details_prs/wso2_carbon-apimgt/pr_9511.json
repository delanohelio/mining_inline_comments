{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTQ5NTg2", "number": 9511, "title": "Adding revision-deploy and revision-deployment mapping implementation", "bodyText": "Issues\nwso2/product-apim#9406\nImplementation\nRevision Deploy to Gateway\nRetrieve revision-deployment mapping table data\nUndeploy Revision from Gateway\nRemoving deploy API to gateways from API save/update/lifecycle update/publish paths\nAdding revision id to API get response", "createdAt": "2020-12-15T10:38:17Z", "url": "https://github.com/wso2/carbon-apimgt/pull/9511", "merged": true, "mergeCommit": {"oid": "17664f1775eb540f6f6791b3aceecf6381a77946"}, "closed": true, "closedAt": "2020-12-18T06:16:54Z", "author": {"login": "CrowleyRajapakse"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmXx2_AH2gAyNTQwMTQ5NTg2OjU1MWU4MDA1Y2Y3M2JjMjM1NDdkYTEwMzYwZTA3YzIzY2E2MzUzNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnR8YMgFqTU1NTE5NDkxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "551e8005cf73bc23547da10360e07c23ca635342", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/551e8005cf73bc23547da10360e07c23ca635342", "committedDate": "2020-12-15T10:28:38Z", "message": "adding revision-deploy and revision-deployment mapping implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ed9f2065b948c187b1d854505ef37d2d21090b", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/a9ed9f2065b948c187b1d854505ef37d2d21090b", "committedDate": "2020-12-17T02:51:51Z", "message": "adding undeploy-revision and removing deploy from api save/publish path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5bbffed5bbad4f92929957983063633875daaee7", "committedDate": "2020-12-17T04:04:02Z", "message": "adding revision id to API get response"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f230152a1d596d2feee4026997c3bd67f9c8d371", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/f230152a1d596d2feee4026997c3bd67f9c8d371", "committedDate": "2020-12-16T09:53:29Z", "message": "adding undeploy-revision and removing deploy from api save/publish path"}, "afterCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/5bbffed5bbad4f92929957983063633875daaee7", "committedDate": "2020-12-17T04:04:02Z", "message": "adding revision id to API get response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTI5NzM4", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#pullrequestreview-555129738", "createdAt": "2020-12-18T02:22:57Z", "commit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyMjo1N1rOIIQjFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyMjo1N1rOIIQjFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMDY0Ng==", "bodyText": "Is this line formatted?", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545530646", "createdAt": "2020-12-18T02:22:57Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTMwMzYy", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#pullrequestreview-555130362", "createdAt": "2020-12-18T02:24:51Z", "commit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNDo1MlrOIIQlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNDo1MlrOIIQlWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTIyNQ==", "bodyText": "lets put a if check here to check for swagger def in the returned api obj. if definition is there, no need to get the def again.", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531225", "createdAt": "2020-12-18T02:24:52Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTMwNDc4", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#pullrequestreview-555130478", "createdAt": "2020-12-18T02:25:12Z", "commit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNToxMlrOIIQl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNToxMlrOIIQl3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTM1Ng==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531356", "createdAt": "2020-12-18T02:25:12Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -9090,4 +8976,86 @@ protected String createAPIRevisionRegistryArtifacts(String apiUUID, int revision\n     public List<APIRevision> getAPIRevisions(String apiUUID) throws APIManagementException {\n         return apiMgtDAO.getRevisionsListByAPIUUID(apiUUID);\n     }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void addAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APITemplateBuilder builder = null;\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));\n+        Set<String> environments = new HashSet<>();\n+        for (APIRevisionDeployment apiRevisionDeployment : apiRevisionDeployments) {\n+            environments.add(apiRevisionDeployment.getDeployment());\n+        }\n+        api.setEnvironments(environments);\n+        try {\n+            builder = getAPITemplateBuilder(api);\n+        } catch (Exception e) {\n+            handleException(\"Error while publishing to Gateway \", e);\n+        }\n+        Map<String, String> failedEnvironment = gatewayManager.deployAPIRevisionToGateway(api, builder, tenantDomain);\n+        apiMgtDAO.addAPIRevisionDeployment(apiRevisionId, apiRevisionDeployments);\n+    }\n+\n+    @Override\n+    public APIRevisionDeployment getAPIRevisionDeployment(String name, String type) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByNameAndType(name,type);\n+    }\n+\n+    @Override\n+    public List<APIRevisionDeployment> getAPIRevisionDeploymentList(String revisionUUID) throws APIManagementException {\n+         return apiMgtDAO.getAPIRevisionDeploymentByRevisionUUID(revisionUUID);\n+    }\n+\n+    /**\n+     * Adds a new APIRevisionDeployment to an existing API\n+     *\n+     * @param apiId API UUID\n+     * @param apiRevisionId API Revision UUID\n+     * @param apiRevisionDeployments List of APIRevisionDeployment objects\n+     * @throws APIManagementException if failed to add APIRevision\n+     */\n+    @Override\n+    public void undeployAPIRevisionDeployment(String apiId, String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments) throws APIManagementException {\n+        APIIdentifier apiIdentifier = APIUtil.getAPIIdentifierFromUUID(apiId);\n+        if (apiIdentifier == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API with API UUID: \"\n+                    + apiId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiId));\n+        }\n+        APIRevision apiRevision = apiMgtDAO.getRevisionByRevisionUUID(apiRevisionId);\n+        if (apiRevision == null) {\n+            throw new APIMgtResourceNotFoundException(\"Couldn't retrieve existing API Revision with Revision UUID: \"\n+                    + apiRevisionId, ExceptionCodes.from(ExceptionCodes.API_NOT_FOUND, apiRevisionId));\n+        }\n+        APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n+        APIIdentifier revisionApiIdentifier = getLightweightAPIByUUID(apiRevisionId, tenantDomain).getId();\n+        API api = getRevisionAPI(revisionApiIdentifier, apiRevision);\n+        api.setSwaggerDefinition(getOpenAPIDefinition(revisionApiIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 243}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTMwNzg1", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#pullrequestreview-555130785", "createdAt": "2020-12-18T02:26:06Z", "commit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNjowNlrOIIQnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoyNjowNlrOIIQnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTY4OA==", "bodyText": "lets populate the swagger def from here . this would prevent unnecessary calls", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#discussion_r545531688", "createdAt": "2020-12-18T02:26:06Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java", "diffHunk": "@@ -462,6 +462,55 @@ public API getAPI(APIIdentifier identifier) throws APIManagementException {\n         }\n     }\n \n+    public API getRevisionAPI(APIIdentifier identifier, APIRevision apiRevision) throws APIManagementException {\n+        String apiPath = APIUtil.getRevisionPath(apiRevision.getApiUUID(),apiRevision.getId()) + APIConstants.API_KEY;\n+        Registry registry;\n+        try {\n+            String apiTenantDomain = getTenantDomain(identifier);\n+            int apiTenantId = getTenantManager()\n+                    .getTenantId(apiTenantDomain);\n+            if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(apiTenantDomain)) {\n+                APIUtil.loadTenantRegistry(apiTenantId);\n+            }\n+\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) { //cross tenant scenario\n+                registry = getRegistryService().getGovernanceUserRegistry(\n+                        getTenantAwareUsername(APIUtil.replaceEmailDomainBack(identifier.getProviderName())), apiTenantId);\n+            } else {\n+                registry = this.registry;\n+            }\n+            GenericArtifactManager artifactManager = getAPIGenericArtifactManagerFromUtil(registry,\n+                    APIConstants.API_KEY);\n+            Resource apiResource = registry.get(apiPath);\n+            String artifactId = apiResource.getUUID();\n+            if (artifactId == null) {\n+                throw new APIManagementException(\"artifact id is null for : \" + apiPath);\n+            }\n+            GenericArtifact apiArtifact = artifactManager.getGenericArtifact(artifactId);\n+\n+            API api = APIUtil.getAPIForPublishing(apiArtifact, registry);\n+            APIUtil.updateAPIProductDependencies(api, registry);\n+\n+            //check for API visibility\n+            if (APIConstants.API_GLOBAL_VISIBILITY.equals(api.getVisibility())) { //global api\n+                return api;\n+            }\n+            if (this.tenantDomain == null || !this.tenantDomain.equals(apiTenantDomain)) {\n+                throw new APIManagementException(\"User \" + username + \" does not have permission to view API : \"\n+                        + api.getId().getApiName());\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbffed5bbad4f92929957983063633875daaee7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6322b22be4e8263b6f664f25f0179a1dea59755a", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6322b22be4e8263b6f664f25f0179a1dea59755a", "committedDate": "2020-12-18T04:46:10Z", "message": "adding requested changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c58ead4b17ee361eecf1344675e6358825e55347", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/c58ead4b17ee361eecf1344675e6358825e55347", "committedDate": "2020-12-18T04:42:01Z", "message": "adding requested changes"}, "afterCommit": {"oid": "6322b22be4e8263b6f664f25f0179a1dea59755a", "author": {"user": {"login": "CrowleyRajapakse", "name": "Crowley Rajapakse"}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6322b22be4e8263b6f664f25f0179a1dea59755a", "committedDate": "2020-12-18T04:46:10Z", "message": "adding requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTk0OTE4", "url": "https://github.com/wso2/carbon-apimgt/pull/9511#pullrequestreview-555194918", "createdAt": "2020-12-18T06:14:37Z", "commit": {"oid": "6322b22be4e8263b6f664f25f0179a1dea59755a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3046, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}