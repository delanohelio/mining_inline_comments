{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDI1OTY1", "number": 8427, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyMjoyM1rOD1Y0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzowNDoyOVrOEVsabA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzA3Nzk4OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyMjoyM1rOGKzfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1ODo1M1rOGLUR8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4MjU0MA==", "bodyText": "Shal we use !== here\nexample.\n12 != '12' // false\nThis evaluates to false", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413982540", "createdAt": "2020-04-23T17:22:23Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxOTc5Mw==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414519793", "createdAt": "2020-04-24T11:58:53Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4MjU0MA=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzEwMzA4OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyNzo1M1rOGKzuRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1ODo1OVrOGLUSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NjM3NQ==", "bodyText": "We already have @hapi for validation requirements , Shall we use its ip validation function ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413986375", "createdAt": "2020-04-23T17:27:53Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxOTg1OQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414519859", "createdAt": "2020-04-24T11:58:59Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NjM3NQ=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzEwNjM0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyODozMlrOGKzwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTowNVrOGLUSaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4Njg4Nw==", "bodyText": "Please use material ui theme spacing", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413986887", "createdAt": "2020-04-23T17:28:32Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"\n+      >\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema == \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidIP ? \"Invalid IP address\" : \"\"}\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter IP address\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxOTkxMg==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414519912", "createdAt": "2020-04-24T11:59:05Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"\n+      >\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema == \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidIP ? \"Invalid IP address\" : \"\"}\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter IP address\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4Njg4Nw=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzEwOTgzOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzoyOToyMVrOGKzyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OToxMFrOGLUSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NzQwOQ==", "bodyText": "Same here, Please use https://material-ui.com/customization/spacing/", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413987409", "createdAt": "2020-04-23T17:29:21Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"\n+      >\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema == \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidIP ? \"Invalid IP address\" : \"\"}\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter IP address\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n+                    size=\"small\"\n+                    color=\"primary\"\n+                    aria-label=\"add\"\n+                    onClick={addIpItem}\n+                  >\n+                    <AddIcon />\n+                  </Fab>\n+                </span>\n+              </Grid>\n+            </Grid>\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+              md={10}\n+              xs={10}\n+            >\n+              {ipList.length > 0 && (\n+                <List>\n+                  {ipList.map((ip, index) => (\n+                    <ListItem>\n+                      <ListItemText primary={ip} />\n+                      <ListItemSecondaryAction>\n+                        <Tooltip title=\"Delete task\" placement=\"top\">\n+                          <IconButton\n+                            edge=\"end\"\n+                            aria-label=\"delete\"\n+                            onClick={() => deleteIpItem(ip)}\n+                          >\n+                            <DeleteIcon />\n+                          </IconButton>\n+                        </Tooltip>\n+                      </ListItemSecondaryAction>\n+                    </ListItem>\n+                  ))}\n+                </List>\n+              )}\n+            </Grid>\n+          </Box>\n+        )}\n+\n+        {restrictSchema == \"referer\" && (\n+          <Box component=\"div\" id=\"refererPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"Referer\"\n+                  value={newReferer}\n+                  onChange={onRefererTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidReferer ? \"Invalid referer\" : \"\"}\n+                  error={invalidReferer}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter Referer\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxOTk0OQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414519949", "createdAt": "2020-04-24T11:59:10Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"\n+      >\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema == \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidIP ? \"Invalid IP address\" : \"\"}\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter IP address\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n+                    size=\"small\"\n+                    color=\"primary\"\n+                    aria-label=\"add\"\n+                    onClick={addIpItem}\n+                  >\n+                    <AddIcon />\n+                  </Fab>\n+                </span>\n+              </Grid>\n+            </Grid>\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+              md={10}\n+              xs={10}\n+            >\n+              {ipList.length > 0 && (\n+                <List>\n+                  {ipList.map((ip, index) => (\n+                    <ListItem>\n+                      <ListItemText primary={ip} />\n+                      <ListItemSecondaryAction>\n+                        <Tooltip title=\"Delete task\" placement=\"top\">\n+                          <IconButton\n+                            edge=\"end\"\n+                            aria-label=\"delete\"\n+                            onClick={() => deleteIpItem(ip)}\n+                          >\n+                            <DeleteIcon />\n+                          </IconButton>\n+                        </Tooltip>\n+                      </ListItemSecondaryAction>\n+                    </ListItem>\n+                  ))}\n+                </List>\n+              )}\n+            </Grid>\n+          </Box>\n+        )}\n+\n+        {restrictSchema == \"referer\" && (\n+          <Box component=\"div\" id=\"refererPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"Referer\"\n+                  value={newReferer}\n+                  onChange={onRefererTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={invalidReferer ? \"Invalid referer\" : \"\"}\n+                  error={invalidReferer}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder=\"Enter Referer\"\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    style={{ marginLeft: \"20px\", marginRight: \"20px\" }}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NzQwOQ=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzExNDkyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozMDozM1rOGKz1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OToyMVrOGLUTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4ODIyNw==", "bodyText": "This is an anti-pattern, We have created a lambda function and called a class instance method without using any event data ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413988227", "createdAt": "2020-04-23T17:30:33Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDA2OQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520069", "createdAt": "2020-04-24T11:59:21Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4ODIyNw=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzE0OTg0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozODo0OFrOGK0K8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OToyOFrOGLUTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzcxMg==", "bodyText": "Please add i18n support in this text and all the other places as well , For more info about wso2 i18n", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r413993712", "createdAt": "2020-04-23T17:38:48Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDEyNw==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520127", "createdAt": "2020-04-24T11:59:28Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzcxMg=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMxNDg0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0MDoxN1rOGLHVRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTozNVrOGLUTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzY1Mg==", "bodyText": "Shall we use theme.spacing here? e.g: theme.spacing(1)", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414307652", "createdAt": "2020-04-24T05:40:17Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDE4Mg==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520182", "createdAt": "2020-04-24T11:59:35Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzY1Mg=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMxNjQyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0MDo1MFrOGLHWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTo0MVrOGLUTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzg2OQ==", "bodyText": "use theme.spacing(3)", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414307869", "createdAt": "2020-04-24T05:40:50Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDIzNw==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520237", "createdAt": "2020-04-24T11:59:41Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzg2OQ=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMyMjk5OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0MzoxMVrOGLHZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTo0OVrOGLUT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwODc1Mg==", "bodyText": "shall we use === ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414308752", "createdAt": "2020-04-24T05:43:11Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDMxMQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520311", "createdAt": "2020-04-24T11:59:49Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwODc1Mg=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMyNjE4OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NDoyOVrOGLHbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTo1M1rOGLUUDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTIxMg==", "bodyText": "Don't use inline styling. Let's define styles at the top.", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414309212", "createdAt": "2020-04-24T05:44:29Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDMzMw==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520333", "createdAt": "2020-04-24T11:59:53Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTIxMg=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMyNzc2OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NTowOFrOGLHcQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1OTo1OFrOGLUUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTQ0MA==", "bodyText": "Don't use custom colors. The theme has pre-defined colors. Use them", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414309440", "createdAt": "2020-04-24T05:45:08Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDM4MA==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520380", "createdAt": "2020-04-24T11:59:58Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+\n+// Styles for Grid and Paper elements\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": \"8px\",\n+    width: \"100%\",\n+    padding: \"0px 10px\",\n+  },\n+});\n+\n+/**\n+ * Used to display IP restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer != null && newReferer != \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() == \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP != null && newIP != \"\") {\n+      const ipv4RegExp = new RegExp(\n+        [\n+          \"^((25[0-5]|2[0-4][0-9]|[01]?\",\n+          \"[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\",\n+          \"(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const ipv6RegExp = new RegExp(\n+        [\n+          \"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]\",\n+          \"{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:\",\n+          \"[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4})\",\n+          \"{1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\",\n+          \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]\",\n+          \"{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:\",\n+          \"[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:\",\n+          \"(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\",\n+          \":){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]\",\n+          \"|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:\",\n+          \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|\",\n+          \"(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/((1(1[0-9]|2[0-8]))\",\n+          \"|([0-9][0-9])|([0-9])))?$\",\n+        ].join(\"\")\n+      );\n+\n+      const validIP = ipv4RegExp.test(newIP) || ipv6RegExp.test(newIP);\n+      setInvalidIP(!validIP);\n+      if (validIP) {\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box\n+        border={1}\n+        borderRadius={5}\n+        style={{ margin: \"10px\" , padding: \"10px\"}}\n+        borderColor=\"grey.500\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTQ0MA=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMzMzE3OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NzowOVrOGLHfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMDowNVrOGLUUgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDIwNQ==", "bodyText": "Add i18n support", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414310205", "createdAt": "2020-04-24T05:47:09Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}\n+                              <b>2002:eb8::2</b> or <b>1001:ab8::/44</b>\n+                            </Typography>\n+                          </ListItem>\n+                        </List>\n+                      </CardContent>\n+                    </Card>\n+                  </Grid>\n+                )}\n+                {restrictSchema == \"referer\" && (\n+                  <Grid item md={5} xs={12}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of URLs allowed to restrict websites", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDQ0OQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520449", "createdAt": "2020-04-24T12:00:05Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}\n+                              <b>2002:eb8::2</b> or <b>1001:ab8::/44</b>\n+                            </Typography>\n+                          </ListItem>\n+                        </List>\n+                      </CardContent>\n+                    </Card>\n+                  </Grid>\n+                )}\n+                {restrictSchema == \"referer\" && (\n+                  <Grid item md={5} xs={12}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of URLs allowed to restrict websites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDIwNQ=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMzMzUwOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NzoyMlrOGLHfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMDoxMVrOGLUUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDI2Nw==", "bodyText": "Add i18n support", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414310267", "createdAt": "2020-04-24T05:47:22Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}\n+                              <b>2002:eb8::2</b> or <b>1001:ab8::/44</b>\n+                            </Typography>\n+                          </ListItem>\n+                        </List>\n+                      </CardContent>\n+                    </Card>\n+                  </Grid>\n+                )}\n+                {restrictSchema == \"referer\" && (\n+                  <Grid item md={5} xs={12}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of URLs allowed to restrict websites\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              A specific URL with an exact path: <b>www.example.com/path</b>\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Any URL in a single subdomain, using a wildcard asterisk (*):{\" \"}\n+                              <b>sub.example.com/*</b>\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Any subdomain or path URLs in a single domain, using wildcard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMDUwMg==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r414520502", "createdAt": "2020-04-24T12:00:11Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx", "diffHunk": "@@ -139,60 +178,141 @@ class ApiKeyManager extends React.Component {\n                         id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                     />\n                 </Typography>\n-                <FormGroup row className={classes.formGroup}>\n+              <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n+                <Grid item md={5} xs={12}>\n+                  <ApiKeyRestriction\n+                    updateNewIp={this.updateNewIp}\n+                    newIP={newIP}\n+                    updateIpList={this.updateIpList}\n+                    ipList={ipList}\n+                    restrictSchema={restrictSchema}\n+                    updateRestrictSchema={this.updateRestrictSchema}\n+                    refererList={refererList}\n+                    newReferer={newReferer}\n+                    updateNewReferer={this.updateNewReferer}\n+                    updateRefererList={this.updateRefererList}\n+                  />\n+                  <FormGroup row className={classes.formGroup}>\n                     <Grid container spacing={3}>\n-                        <Grid item xs={12} className={classes.gridWrapper}>\n-                            <div>\n-                                <Button\n-                                    variant='contained'\n-                                    color='primary'\n-                                    onClick={this.handleClickOpen}\n-                                >\n-                                    {'Generate Key'}\n-                                </Button>\n-                            </div>\n-                            <Typography component='div' variant='body2' className={classes.formLabel}>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n-                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n-                                />\n-                            </Typography>\n-\n-                        </Grid>\n+                      <Grid item xs={12} className={classes.gridWrapper}>\n+                        <div>\n+                          <Button\n+                            variant=\"contained\"\n+                            color=\"primary\"\n+                            onClick={this.handleClickOpen}\n+                          >\n+                            {\"Generate Key\"}\n+                          </Button>\n+                        </div>\n+                        <Typography\n+                          component=\"div\"\n+                          variant=\"body2\"\n+                          className={classes.formLabel}\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n+                            defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n+                          />\n+                        </Typography>\n+                      </Grid>\n                     </Grid>\n-                </FormGroup>\n-                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n-                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n-                        {'Generate API Key'}\n+                  </FormGroup>\n+                  <Dialog\n+                    open={open}\n+                    onClose={this.handleClose}\n+                    aria-labelledby=\"form-dialog-title\"\n+                  >\n+                    <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n+                      {\"Generate API Key\"}\n                     </DialogTitle>\n                     <DialogContent className={classes.dialogContent}>\n-                        <DialogContentText>\n-                            {!showToken && (\n-                                <ApiKey\n-                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n-                                    accessTokenRequest={accessTokenRequest}\n-                                />\n-                            )}\n-                            {showToken && <ViewToken token={apikey} />}\n-                        </DialogContentText>\n-                    </DialogContent>\n-                    <DialogActions>\n+                      <DialogContentText>\n                         {!showToken && (\n-                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n-                                <FormattedMessage\n-                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n-                                    defaultMessage='Generate'\n-                                />\n-                            </Button>\n+                          <ApiKey\n+                            updateAccessTokenRequest={this.updateAccessTokenRequest}\n+                            accessTokenRequest={accessTokenRequest}\n+                          />\n                         )}\n-                        <Button onClick={this.handleClose} color='primary' autoFocus>\n-                            <FormattedMessage\n-                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n-                                defaultMessage='Close'\n-                            />\n+                        {showToken && <ViewToken token={apikey} />}\n+                      </DialogContentText>\n+                    </DialogContent>\n+                    <DialogActions>\n+                      {!showToken && (\n+                        <Button\n+                          onClick={() => this.generateKeys(selectedApp, keyType)}\n+                          disabled={!accessTokenRequest.timeout}\n+                          color=\"primary\"\n+                        >\n+                          <FormattedMessage\n+                            id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n+                            defaultMessage=\"Generate\"\n+                          />\n                         </Button>\n+                      )}\n+                      <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n+                        <FormattedMessage\n+                          id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n+                          defaultMessage=\"Close\"\n+                        />\n+                      </Button>\n                     </DialogActions>\n-                </Dialog>\n+                  </Dialog>\n+                </Grid>\n+                {restrictSchema == \"ip\" && (\n+                  <Grid item md={5} xs={12} style={{ padding: \"20px\" }}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of IP Addresses allowed\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Specify one IPv4 or IPv6 or a subnet using CIDR notation\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Examples: <b>192.168.1.2</b>, <b>152.12.0.0/13</b>,{\" \"}\n+                              <b>2002:eb8::2</b> or <b>1001:ab8::/44</b>\n+                            </Typography>\n+                          </ListItem>\n+                        </List>\n+                      </CardContent>\n+                    </Card>\n+                  </Grid>\n+                )}\n+                {restrictSchema == \"referer\" && (\n+                  <Grid item md={5} xs={12}>\n+                    <Card>\n+                      <CardContent>\n+                        <Typography variant=\"h5\" component=\"h2\">\n+                          Examples of URLs allowed to restrict websites\n+                        </Typography>\n+                        <List>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              A specific URL with an exact path: <b>www.example.com/path</b>\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Any URL in a single subdomain, using a wildcard asterisk (*):{\" \"}\n+                              <b>sub.example.com/*</b>\n+                            </Typography>\n+                          </ListItem>\n+                          <ListItem>\n+                            <Typography variant=\"body1\" component=\"p\">\n+                              Any subdomain or path URLs in a single domain, using wildcard", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDI2Nw=="}, "originalCommit": {"oid": "2ccb4987a206ddbd1e33baa000e62c80d9f5da44"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDc3NzM0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxMDo0OVrOGL15Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNTo0ODoyMlrOGL2-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ==", "bodyText": "null check claim not available at none state", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415070515", "createdAt": "2020-04-25T14:10:49Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4MTI1OA==", "bodyText": "null can be type cast to String and it still will be null. So, do we need to check for null here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415081258", "createdAt": "2020-04-25T15:10:22Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ=="}, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI1Mg==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088252", "createdAt": "2020-04-25T15:48:22Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ=="}, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDc3ODk3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxMTozNVrOGL154Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNTowMjozNVrOGL2dpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDY4OQ==", "bodyText": "!= null and not empty", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415070689", "createdAt": "2020-04-25T14:11:35Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3OTg0Nw==", "bodyText": "StringUtils.isNotEmpty() method already checks for null. So, why do we need to check again?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415079847", "createdAt": "2020-04-25T15:02:35Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDY4OQ=="}, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDc4NDA4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxNDo1NVrOGL18Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNTo0ODoyOVrOGL2-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTI3MQ==", "bodyText": "null check and string", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415071271", "createdAt": "2020-04-25T14:14:55Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java", "diffHunk": "@@ -339,7 +339,17 @@ public Response applicationsApplicationIdApiKeysKeyTypeGeneratePost(\n                     } else {\n                         validityPeriod = -1;\n                     }\n-                    String apiKey = apiConsumer.generateApiKey(application, userName, (long) validityPeriod);\n+\n+                    String restrictedIP = null;\n+                    String restrictedReferer = null;\n+\n+                    if (body.getAdditionalProperties() != null) {\n+                        Map additionalProperties = (HashMap) body.getAdditionalProperties();\n+                        restrictedIP = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI1OA==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088258", "createdAt": "2020-04-25T15:48:29Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java", "diffHunk": "@@ -339,7 +339,17 @@ public Response applicationsApplicationIdApiKeysKeyTypeGeneratePost(\n                     } else {\n                         validityPeriod = -1;\n                     }\n-                    String apiKey = apiConsumer.generateApiKey(application, userName, (long) validityPeriod);\n+\n+                    String restrictedIP = null;\n+                    String restrictedReferer = null;\n+\n+                    if (body.getAdditionalProperties() != null) {\n+                        Map additionalProperties = (HashMap) body.getAdditionalProperties();\n+                        restrictedIP = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTI3MQ=="}, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDc4NTM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxNTo0NFrOGL18tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNTo0ODozNVrOGL2-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTQxMg==", "bodyText": "null check and set", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415071412", "createdAt": "2020-04-25T14:15:44Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java", "diffHunk": "@@ -86,6 +86,9 @@ private static String buildBody(JwtTokenInfoDTO jwtTokenInfoDTO) {\n         jwtClaimsSetBuilder.claim(\"application\", jwtTokenInfoDTO.getApplication());\n         jwtClaimsSetBuilder.claim(\"keytype\", jwtTokenInfoDTO.getKeyType());\n \n+        jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_IP, jwtTokenInfoDTO.getPermittedIP());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI4MA==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088280", "createdAt": "2020-04-25T15:48:35Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java", "diffHunk": "@@ -86,6 +86,9 @@ private static String buildBody(JwtTokenInfoDTO jwtTokenInfoDTO) {\n         jwtClaimsSetBuilder.claim(\"application\", jwtTokenInfoDTO.getApplication());\n         jwtClaimsSetBuilder.claim(\"keytype\", jwtTokenInfoDTO.getKeyType());\n \n+        jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_IP, jwtTokenInfoDTO.getPermittedIP());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTQxMg=="}, "originalCommit": {"oid": "680565ddc3d9653584a94bd170f390ef1882606d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQzNDY0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo0NzoxNlrOG8iOfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozODo0N1rOHIwv7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODUxMA==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r466128510", "createdAt": "2020-08-06T03:47:16Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0OTM1OQ==", "bodyText": "Fixed in #9250", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r478949359", "createdAt": "2020-08-28T08:38:47Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODUxMA=="}, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTgyODQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzowMzoxNVrOG8l3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozODo1NFrOHIwwYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODA2NA==", "bodyText": "can't we move this to the previous line? does it exceed 120 line length?", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r466188064", "createdAt": "2020-08-06T07:03:15Z", "author": {"login": "ruwiniwj"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+\n+        }\n+\n+        String permittedRefererList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER) != null) {\n+            permittedRefererList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedRefererList)) {\n+            // Validate http referer against the permitted referrers\n+            TreeMap<String, String> transportHeaderMap = (TreeMap<String, String>)\n+                    axis2MessageContext.getProperty\n+                            (org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+            if (transportHeaderMap != null) {\n+                String referer = transportHeaderMap.get(\"Referer\");\n+                if (StringUtils.isNotEmpty(referer)) {\n+                    for (String restrictedReferer : permittedRefererList.split(\",\")) {\n+                        String restrictedRefererRegExp = restrictedReferer.trim()\n+                                .replace(\"*\", \"[^ ]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0OTQ3Mg==", "bodyText": "Fixed in #9250", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r478949472", "createdAt": "2020-08-28T08:38:54Z", "author": {"login": "ChamodDamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+\n+        }\n+\n+        String permittedRefererList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER) != null) {\n+            permittedRefererList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedRefererList)) {\n+            // Validate http referer against the permitted referrers\n+            TreeMap<String, String> transportHeaderMap = (TreeMap<String, String>)\n+                    axis2MessageContext.getProperty\n+                            (org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+            if (transportHeaderMap != null) {\n+                String referer = transportHeaderMap.get(\"Referer\");\n+                if (StringUtils.isNotEmpty(referer)) {\n+                    for (String restrictedReferer : permittedRefererList.split(\",\")) {\n+                        String restrictedRefererRegExp = restrictedReferer.trim()\n+                                .replace(\"*\", \"[^ ]*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODA2NA=="}, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTgzMjEyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzowNDoyOVrOG8l5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozOTowMlrOHIww6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODY0OA==", "bodyText": "need to have a space before open curly and after close curly when writing conditions. Fix elsewhere as well.", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r466188648", "createdAt": "2020-08-06T07:04:29Z", "author": {"login": "ruwiniwj"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+import Typography from \"@material-ui/core/Typography\";\n+import Validation from 'AppData/Validation';\n+\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": theme.spacing(1),\n+    width: \"100%\",\n+    padding: theme.spacing(0, 1),\n+  },\n+  outterBox: {\n+    margin: theme.spacing(1),\n+    padding: theme.spacing(1),\n+    borderColor: theme.palette.text.secondary,\n+  },\n+  Fab: {\n+    marginLeft: theme.spacing(2),\n+    marginRight: theme.spacing(2),\n+  },\n+});\n+\n+/**\n+ * Used to display IP address and Http Referer restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    intl,\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() === \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer !== null && newReferer !== \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() === \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP !== null && newIP !== \"\") {\n+      if (Validation.ipAddress.validate(newIP).error) {\n+        setInvalidIP(true);\n+      } else {\n+        setInvalidIP(false);\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box border={1} borderRadius={5} className={classes.outterBox}>\n+        <Typography variant=\"h5\" component=\"h6\">\n+          Key Restrictions\n+        </Typography>\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema === \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={\n+                    invalidIP\n+                      ? intl.formatMessage({\n+                          defaultMessage: \"Invalid IP Address\",\n+                          id:\n+                            \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.validity.error\",\n+                        })\n+                      : \"\"\n+                  }\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder={intl.formatMessage({\n+                    defaultMessage: \"Enter IP Address\",\n+                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.ip\",\n+                  })}\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    className={classes.Fab}\n+                    size=\"small\"\n+                    color=\"primary\"\n+                    aria-label=\"add\"\n+                    onClick={addIpItem}\n+                  >\n+                    <AddIcon />\n+                  </Fab>\n+                </span>\n+              </Grid>\n+            </Grid>\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+              md={10}\n+              xs={10}\n+            >\n+              {ipList.length > 0 && (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0OTYwOA==", "bodyText": "Fixed in #9250", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r478949608", "createdAt": "2020-08-28T08:39:02Z", "author": {"login": "ChamodDamitha"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Shared/ApiKeyRestriction.jsx", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import React, { useState } from \"react\";\n+import { injectIntl } from \"react-intl\";\n+import PropTypes from \"prop-types\";\n+import { withStyles } from \"@material-ui/core/styles\";\n+import TextField from \"@material-ui/core/TextField\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import IconButton from \"@material-ui/core/IconButton\";\n+import DeleteIcon from \"@material-ui/icons/Delete\";\n+import Tooltip from \"@material-ui/core/Tooltip\";\n+import Grid from \"@material-ui/core/Grid\";\n+import Fab from \"@material-ui/core/Fab\";\n+import AddIcon from \"@material-ui/icons/Add\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import Box from \"@material-ui/core/Box\";\n+import Radio from \"@material-ui/core/Radio\";\n+import RadioGroup from \"@material-ui/core/RadioGroup\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import Button from \"@material-ui/core/Button\";\n+import Typography from \"@material-ui/core/Typography\";\n+import Validation from 'AppData/Validation';\n+\n+const styles = (theme) => ({\n+  FormControl: {\n+    \"margin-bottom\": theme.spacing(1),\n+    width: \"100%\",\n+    padding: theme.spacing(0, 1),\n+  },\n+  outterBox: {\n+    margin: theme.spacing(1),\n+    padding: theme.spacing(1),\n+    borderColor: theme.palette.text.secondary,\n+  },\n+  Fab: {\n+    marginLeft: theme.spacing(2),\n+    marginRight: theme.spacing(2),\n+  },\n+});\n+\n+/**\n+ * Used to display IP address and Http Referer restrictions in generate api key UI\n+ */\n+const apiKeyRestrictions = (props) => {\n+  const [invalidIP, setInvalidIP] = useState(false);\n+  const [invalidReferer, setInvalidReferer] = useState(false);\n+\n+  const {\n+    intl,\n+    classes,\n+    newIP,\n+    updateNewIp,\n+    ipList,\n+    updateIpList,\n+    restrictSchema,\n+    updateRestrictSchema,\n+    newReferer,\n+    updateNewReferer,\n+    refererList,\n+    updateRefererList,\n+  } = props;\n+\n+  const onRefererTextUpdate = (e) => {\n+    updateNewReferer(e.target.value.trim());\n+    if (e.target.value.trim() === \"\") {\n+      setInvalidReferer(false);\n+    }\n+  };\n+\n+  const addRefererItem = () => {\n+    if (newReferer !== null && newReferer !== \"\") {\n+      setInvalidReferer(false);\n+      refererList.push(newReferer.trim());\n+      updateRefererList(refererList);\n+      updateNewReferer(\"\");\n+    } else {\n+      setInvalidReferer(true);\n+    }\n+  };\n+\n+  const deleteRefererItem = (refererItem) => {\n+    refererList.splice(refererList.indexOf(refererItem), 1);\n+    updateRefererList(refererList);\n+  };\n+\n+  const onIpTextUpdate = (e) => {\n+    updateNewIp(e.target.value.trim());\n+    if (e.target.value.trim() === \"\") {\n+      setInvalidIP(false);\n+    }\n+  };\n+\n+  const addIpItem = () => {\n+    if (newIP !== null && newIP !== \"\") {\n+      if (Validation.ipAddress.validate(newIP).error) {\n+        setInvalidIP(true);\n+      } else {\n+        setInvalidIP(false);\n+        ipList.push(newIP);\n+        updateIpList(ipList);\n+        updateNewIp(\"\");\n+      }\n+    }\n+  };\n+\n+  const deleteIpItem = (ipItem) => {\n+    ipList.splice(ipList.indexOf(ipItem), 1);\n+    updateIpList(ipList);\n+  };\n+\n+  const onRestrictSchemaChange = (e) => {\n+    updateRestrictSchema(e.target.value);\n+    updateIpList([]);\n+    updateRefererList([]);\n+    updateNewIp(\"\");\n+    updateNewReferer(\"\");\n+    setInvalidIP(false);\n+    setInvalidReferer(false);\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      <Box border={1} borderRadius={5} className={classes.outterBox}>\n+        <Typography variant=\"h5\" component=\"h6\">\n+          Key Restrictions\n+        </Typography>\n+        <FormControl component=\"fieldset\">\n+          <RadioGroup\n+            aria-label=\"API Key Restrictions\"\n+            value={restrictSchema}\n+            row\n+            onChange={onRestrictSchemaChange}\n+          >\n+            <FormControlLabel\n+              value=\"none\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"None\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"ip\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"IP Addresses\"\n+              labelPlacement=\"end\"\n+            />\n+            <FormControlLabel\n+              value=\"referer\"\n+              control={<Radio color=\"primary\" />}\n+              label=\"HTTP Referrers (Web Sites)\"\n+              labelPlacement=\"end\"\n+            />\n+          </RadioGroup>\n+        </FormControl>\n+\n+        {restrictSchema === \"ip\" && (\n+          <Box component=\"div\" id=\"ipPanel\">\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+            >\n+              <Grid item md={10} xs={10}>\n+                <TextField\n+                  label=\"IP Address\"\n+                  value={newIP}\n+                  onChange={onIpTextUpdate}\n+                  className={classes.inputText}\n+                  helperText={\n+                    invalidIP\n+                      ? intl.formatMessage({\n+                          defaultMessage: \"Invalid IP Address\",\n+                          id:\n+                            \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.validity.error\",\n+                        })\n+                      : \"\"\n+                  }\n+                  error={invalidIP}\n+                  margin=\"dense\"\n+                  variant=\"outlined\"\n+                  placeholder={intl.formatMessage({\n+                    defaultMessage: \"Enter IP Address\",\n+                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.ip\",\n+                  })}\n+                  fullWidth\n+                />\n+              </Grid>\n+              <Grid item md={2} xs={2}>\n+                <span>\n+                  <Fab\n+                    className={classes.Fab}\n+                    size=\"small\"\n+                    color=\"primary\"\n+                    aria-label=\"add\"\n+                    onClick={addIpItem}\n+                  >\n+                    <AddIcon />\n+                  </Fab>\n+                </span>\n+              </Grid>\n+            </Grid>\n+            <Grid\n+              container\n+              direction=\"row\"\n+              spacing={0}\n+              justify=\"left\"\n+              alignItems=\"left\"\n+              md={10}\n+              xs={10}\n+            >\n+              {ipList.length > 0 && (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODY0OA=="}, "originalCommit": {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2"}, "originalPosition": 230}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2743, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}