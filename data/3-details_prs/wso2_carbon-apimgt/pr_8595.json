{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MzMyNzIy", "number": 8595, "title": "Introduce an admin REST API to import tenant theme", "bodyText": "Purpose\nThis PR will introduce an admin REST API to import tenant theme.\nApproach\n\nAdded a new resource /tenant-theme/import to admin-api.yaml which requires a zip archive containing theme configuration.\nIntroduced a new scope apim:tenant_theme_manage and assigned it to the /tenant-theme/import resource\nIntroduced a new method called *deplyTenantTheme in RestApiAdminUtils.java class which handles the tenant theme importing function.\n\nUser Stories\n\nScenario 1 : Normal Flow\n\n\nRequest\n\ncurl -k -F \"file=@sample-theme.zip\" -X POST -H \"Authorization: Bearer d886cb32-b9db-316a-a44e-0811eef76306\" https://localhost:9443/api/am/admin/v1/tenant-theme/import\n\n\nResponse\n\nTheme imported successfully\n\n\nScenario 2 : When zip archive contains an unsupported file\n\n\nRequest\n\ncurl -k -F \"file=@sample-theme-unsupported.zip\" -X POST -H \"Authorization: Bearer d886cb32-b9db-316a-a44e-0811eef76306\" https://localhost:9443/api/am/admin/v1/tenant-theme/import\n\n\nResponse\n\n{\"code\":500,\"message\":\"Internal server error\",\"description\":\"Error while importing tenant theme for tenant carbon.super\",\"moreInfo\":\"\",\"error\":[]}\n\n\nCarbon log snippet\n\n[2020-05-30 15:37:51,640] ERROR - APIUtil Unsupported file is uploaded with tenant theme by carbon.super : file name : apim/css/custom.cssd\n[2020-05-30 15:37:51,645] ERROR - TenantThemeApiServiceImpl Error while importing tenant theme for tenant carbon.super\norg.wso2.carbon.apimgt.api.APIManagementException: Unsupported file is uploaded with tenant theme by carbon.super : file name : apim/css/custom.cssd\n\nTest Environment\nJDK 1.8.0_241\nUbuntu 18.04.4 LTS\nFixes: wso2/product-apim#8114", "createdAt": "2020-05-28T08:31:54Z", "url": "https://github.com/wso2/carbon-apimgt/pull/8595", "merged": true, "mergeCommit": {"oid": "fb6441a2e30964334b45f4ddff9493536790eb08"}, "closed": true, "closedAt": "2020-05-31T09:15:31Z", "author": {"login": "hisanhunais"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclxo-XgFqTQyMDM0NjAxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvCcA0gFqTU2NTE0ODgzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzQ2MDEx", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#pullrequestreview-420346011", "createdAt": "2020-05-28T17:41:18Z", "commit": {"oid": "4e7d1bf45eb249cf907eb22382fc894a2570c423"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0MToxOFrOGb_4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0MToxOFrOGb_4iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTQwMw==", "bodyText": "tenant theme is the resource here. Hence shall we use tenant-theme/upload or import?", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432011403", "createdAt": "2020-05-28T17:41:18Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2965,6 +2966,64 @@ paths:\n           schema:\n             $ref: '#/definitions/Error'\n \n+######################################################\n+# The Tenant Theme resource APIs\n+######################################################\n+  /import/tenant-theme:\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e7d1bf45eb249cf907eb22382fc894a2570c423"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e7d1bf45eb249cf907eb22382fc894a2570c423", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/4e7d1bf45eb249cf907eb22382fc894a2570c423", "committedDate": "2020-05-28T07:46:04Z", "message": "Introduce an admin REST API to import tenant theme"}, "afterCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fb8159849c21f633958ff21963a55d40da2ca155", "committedDate": "2020-05-29T05:01:42Z", "message": "Change tenant theme import REST API resource name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODI0NzYx", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#pullrequestreview-420824761", "createdAt": "2020-05-29T10:12:24Z", "commit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDoxNjoxOFrOGcXCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTozMjoyM1rOGcZFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MDcxNw==", "bodyText": "add context information", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432390717", "createdAt": "2020-05-29T10:16:18Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MTI1Ng==", "bodyText": "context info", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432391256", "createdAt": "2020-05-29T10:17:31Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+\n+                }\n+                zipEntry = zipInputStream.getNextEntry();\n+            }\n+\n+            zipInputStream.closeEntry();\n+            zipInputStream.close();\n+\n+        } catch (IOException ex) {\n+            handleException(\"Failed to deploy tenant theme\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTExNw==", "bodyText": "remove new line", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432415117", "createdAt": "2020-05-29T11:10:58Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNjM3MA==", "bodyText": "check whether we can reuse org.wso2.carbon.apimgt.impl.utils.APIUtil.handleException;", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432416370", "createdAt": "2020-05-29T11:13:54Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+\n+                }\n+                zipEntry = zipInputStream.getNextEntry();\n+            }\n+\n+            zipInputStream.closeEntry();\n+            zipInputStream.close();\n+\n+        } catch (IOException ex) {\n+            handleException(\"Failed to deploy tenant theme\", ex);\n+        } finally {\n+            IOUtils.closeQuietly(zipInputStream);\n+            IOUtils.closeQuietly(themeFile);\n+        }\n+    }\n+\n+    private static void handleException(String msg) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNDI0MQ==", "bodyText": "Do we really have to provide the tenant domain name? Shouldn't we extract the tenant domain from the auth context? Unless an unauthorized tenant user can update the tenant theme of some other tenant domain.", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432424241", "createdAt": "2020-05-29T11:32:23Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2965,6 +2966,64 @@ paths:\n           schema:\n             $ref: '#/definitions/Error'\n \n+######################################################\n+# The Tenant Theme resource APIs\n+######################################################\n+  /tenant-theme/import:\n+\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:tenant_theme_manage\n+      consumes:\n+        - multipart/form-data\n+      x-wso2-curl: \"curl -k -F \\\"file=@exported.zip\\\" -X POST -H \\\"Authorization: Bearer\n+      ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" https://localhost:9443/api/am/admin/v1/tenant-theme/import?tenantDomain=abc\n+      .com\"\n+      x-wso2-request: |\n+        POST https://localhost:9443/api/am/admin/v1/tenant-theme/import\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\\nTenant Theme imported successfully.\"\n+      summary: Import a DevPortal Tenant Theme\n+      description: |\n+        This operation can be used to import a DevPortal tenant theme.\n+      parameters:\n+        - name: file\n+          in: formData\n+          description: |\n+            Zip archive consisting of tenant theme configuration\n+          required: true\n+          type: file\n+        - name: tenantDomain\n+          in: query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3122cb4fe8cd5ea4700e06d64a2a67c4f084fe84", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/3122cb4fe8cd5ea4700e06d64a2a67c4f084fe84", "committedDate": "2020-05-30T00:31:56Z", "message": "Introduce an admin REST API to import tenant theme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "909daac27dc7184ba96efef171897e3427e02e3d", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/909daac27dc7184ba96efef171897e3427e02e3d", "committedDate": "2020-05-30T00:31:57Z", "message": "Change tenant theme import REST API resource name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6ae0bc73c2aefce667fc3908529e7750aaa25d97", "committedDate": "2020-05-30T09:18:40Z", "message": "Fix review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb8159849c21f633958ff21963a55d40da2ca155", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/fb8159849c21f633958ff21963a55d40da2ca155", "committedDate": "2020-05-29T05:01:42Z", "message": "Change tenant theme import REST API resource name"}, "afterCommit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "author": {"user": {"login": "hisanhunais", "name": null}}, "url": "https://github.com/wso2/carbon-apimgt/commit/6ae0bc73c2aefce667fc3908529e7750aaa25d97", "committedDate": "2020-05-30T09:18:40Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc2MDE1", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#pullrequestreview-421476015", "createdAt": "2020-05-31T09:15:18Z", "commit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0OTQ1NDUx", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#pullrequestreview-564945451", "createdAt": "2021-01-11T02:30:04Z", "commit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwMjozMDowNFrOIQ9-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwMjozMDowNFrOIQ9-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2MzUwMQ==", "bodyText": "Shall we remove the empty lines. Please check other places as well.", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r554663501", "createdAt": "2021-01-11T02:30:04Z", "author": {"login": "vithu30"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -55,4 +73,89 @@ public static boolean isBlockConditionAccessibleToUser(String user, BlockConditi\n         return !StringUtils.isBlank(blockCondition.getTenantDomain()) && blockCondition.getTenantDomain()\n                 .equals(userTenantDomain);\n     }\n+\n+    /**\n+     * Extract the content of the provided tenant theme archive\n+     *\n+     * @param themeFile    content relevant to the tenant theme\n+     * @param tenantDomain tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing tenant theme\n+     */\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n+                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n+                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    APIUtil.handleException(\"Unable to create tenant theme directory at \" + outputFolder);\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MTQ4ODM0", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#pullrequestreview-565148834", "createdAt": "2021-01-11T08:41:47Z", "commit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODo0MTo0N1rOIRL1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODo0MTo0N1rOIRL1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MDY4NQ==", "bodyText": "shall we remove this extra line?", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r554890685", "createdAt": "2021-01-11T08:41:47Z", "author": {"login": "kavishkafernando"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -55,4 +73,89 @@ public static boolean isBlockConditionAccessibleToUser(String user, BlockConditi\n         return !StringUtils.isBlank(blockCondition.getTenantDomain()) && blockCondition.getTenantDomain()\n                 .equals(userTenantDomain);\n     }\n+\n+    /**\n+     * Extract the content of the provided tenant theme archive\n+     *\n+     * @param themeFile    content relevant to the tenant theme\n+     * @param tenantDomain tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing tenant theme\n+     */\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n+                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n+                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    APIUtil.handleException(\"Unable to create tenant theme directory at \" + outputFolder);\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    APIUtil.handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            APIUtil.handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2810, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}