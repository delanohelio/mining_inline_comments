{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjg0NTk5", "number": 8576, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0MjozOFrOD_wlPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozMzoyNFrOEAxX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTgyODQ2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0MjozOFrOGanFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0MTo0OFrOGarddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1NjU3NA==", "bodyText": "Format the code properly.", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r430556574", "createdAt": "2020-05-26T16:42:38Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -246,8 +244,50 @@ private String getGeneratedResponseVar(String responseCode, String example, Stri\n      * @return manualCode\n      */\n     private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"mc.setPayloadJSON(response\" + responseCode + type + \");\";\n+        return \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n+                \"  mc.setPayload\"+type.toUpperCase()+\"(response\" + responseCode + type + \");\";\n+    }\n+\n+    /**\n+     * Generates IF conditions for setting response code of mock payload\n+     *\n+     * @param responseCode response code of payload\n+     * @param getGeneratedSetResponseString string returned from \"getGeneratedSetResponse\"\n+     * @return if condition with \"getGeneratedSetResponse\" included\n+     */\n+    private String getGeneratedIFsforCodes(String responseCode, String getGeneratedSetResponseString){\n+        return \"if (responseCode == \"+responseCode+\") {\\n\\n\" +\n+                getGeneratedSetResponseString+\n+                \"\\n\\n} else \";\n+    }\n+\n+    /**\n+     * Generates Mock payload and set response for 501 response and null response code\n+     * also includes getGeneratedIFsforCodes string of all included response codes\n+     *\n+     * @param minResponseCode minimum response code\n+     * @param minResponseType type of minimum response code (json/xml)\n+     * @param responseSectionString String of IF conditions of all response codes\n+     * @return response section string with IF conditions and responses\n+     */\n+    private String getGeneratedSetResponseForCodes(int minResponseCode, String minResponseType, String responseSectionString){\n+        return \"\\nvar response501json = {\\n\" +\n+                \"\\\"code\\\" : 501,\" +\n+                \"\\n\\\"description\\\" : \"+\"\\\"Not Implemented\\\"\\n\"+\n+                \"}\\n\\n\" +\n+                \"var responseCode = mc.getProperty('query.param.responseCode');\\n\\n\" +\n+\n+                responseSectionString+\n+\n+                \" if (responseCode == null) {\\n\\n\"+\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\"+minResponseType+\"');\\n\"+\n+                \"  mc.setPayload\"+minResponseType.toUpperCase()+\"(response\"+minResponseCode+minResponseType+\");\\n\\n\"+\n+                \"} else \"+\n+\n+                \"{\\n\\n\"+\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/json');\\n\" +\n+                \"  mc.setPayloadJSON(response501json);\\n\\n\"+\n+                \"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b771537704591fc3d8db0457bea8afadc1dcab7"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyODIxMg==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r430628212", "createdAt": "2020-05-26T18:41:48Z", "author": {"login": "VinulaUthsara"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -246,8 +244,50 @@ private String getGeneratedResponseVar(String responseCode, String example, Stri\n      * @return manualCode\n      */\n     private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"mc.setPayloadJSON(response\" + responseCode + type + \");\";\n+        return \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n+                \"  mc.setPayload\"+type.toUpperCase()+\"(response\" + responseCode + type + \");\";\n+    }\n+\n+    /**\n+     * Generates IF conditions for setting response code of mock payload\n+     *\n+     * @param responseCode response code of payload\n+     * @param getGeneratedSetResponseString string returned from \"getGeneratedSetResponse\"\n+     * @return if condition with \"getGeneratedSetResponse\" included\n+     */\n+    private String getGeneratedIFsforCodes(String responseCode, String getGeneratedSetResponseString){\n+        return \"if (responseCode == \"+responseCode+\") {\\n\\n\" +\n+                getGeneratedSetResponseString+\n+                \"\\n\\n} else \";\n+    }\n+\n+    /**\n+     * Generates Mock payload and set response for 501 response and null response code\n+     * also includes getGeneratedIFsforCodes string of all included response codes\n+     *\n+     * @param minResponseCode minimum response code\n+     * @param minResponseType type of minimum response code (json/xml)\n+     * @param responseSectionString String of IF conditions of all response codes\n+     * @return response section string with IF conditions and responses\n+     */\n+    private String getGeneratedSetResponseForCodes(int minResponseCode, String minResponseType, String responseSectionString){\n+        return \"\\nvar response501json = {\\n\" +\n+                \"\\\"code\\\" : 501,\" +\n+                \"\\n\\\"description\\\" : \"+\"\\\"Not Implemented\\\"\\n\"+\n+                \"}\\n\\n\" +\n+                \"var responseCode = mc.getProperty('query.param.responseCode');\\n\\n\" +\n+\n+                responseSectionString+\n+\n+                \" if (responseCode == null) {\\n\\n\"+\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\"+minResponseType+\"');\\n\"+\n+                \"  mc.setPayload\"+minResponseType.toUpperCase()+\"(response\"+minResponseCode+minResponseType+\");\\n\\n\"+\n+                \"} else \"+\n+\n+                \"{\\n\\n\"+\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/json');\\n\" +\n+                \"  mc.setPayloadJSON(response501json);\\n\\n\"+\n+                \"}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1NjU3NA=="}, "originalCommit": {"oid": "1b771537704591fc3d8db0457bea8afadc1dcab7"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQzMTEzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyNzoyMVrOGcQROg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyNzoyMVrOGcQROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3OTg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"} else \" +\n          \n          \n            \n                            \"{\\n\\n\" +\n          \n          \n            \n                            \"} else {\\n\\n\" +", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432279866", "createdAt": "2020-05-29T06:27:21Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS3Parser.java", "diffHunk": "@@ -291,8 +285,49 @@ private String getGeneratedResponseVar(String responseCode, String example, Stri\n      * @return manualCode\n      */\n     private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"mc.setPayloadJSON(response\" + responseCode + type + \");\";\n+        return \"  mc.setProperty('HTTP_SC', \\\"\" + responseCode + \"\\\");\\n\" +\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n+                \"  mc.setPayload\" + type.toUpperCase() + \"(response\" + responseCode + type + \");\";\n+    }\n+\n+    /**\n+     * Generates IF conditions for setting response code of mock payload\n+     *\n+     * @param responseCode response code of payload\n+     * @param getGeneratedSetResponseString string returned from \"getGeneratedSetResponse\"\n+     * @return if condition with \"getGeneratedSetResponse\" included\n+     */\n+    private String getGeneratedIFsforCodes(String responseCode, String getGeneratedSetResponseString) {\n+        return \"if (responseCode == \" + responseCode + \") {\\n\\n\" +\n+                getGeneratedSetResponseString +\n+                \"\\n\\n} else \";\n+    }\n+\n+    /**\n+     * Generates Mock payload and set response for 501 response and null response code\n+     * also includes getGeneratedIFsforCodes string of all included response codes\n+     *\n+     * @param minResponseCode minimum response code\n+     * @param minResponseType type of minimum response code (json/xml)\n+     * @param responseSectionString String of IF conditions of all response codes\n+     * @return response section string with IF conditions and responses\n+     */\n+    private String getGeneratedSetResponseForCodes(int minResponseCode, String minResponseType, String responseSectionString) {\n+        return \"\\nvar response501json = {\\n\" +\n+                \"\\\"code\\\" : 501,\" +\n+                \"\\n\\\"description\\\" : \" + \"\\\"Not Implemented\\\"\\n\" +\n+                \"}\\n\\n\" +\n+                \"var responseCode = mc.getProperty('query.param.responseCode');\\n\\n\" +\n+                responseSectionString +\n+                \" if (responseCode == null) {\\n\\n\" +\n+                \"  mc.setProperty('HTTP_SC', \\\"\" + minResponseCode + \"\\\");\\n\" +\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + minResponseType + \"');\\n\" +\n+                \"  mc.setPayload\" + minResponseType.toUpperCase() + \"(response\" + minResponseCode + minResponseType + \");\\n\\n\" +\n+                \"} else \" +\n+                \"{\\n\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQzMjg4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyODoxMFrOGcQSXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyODoxMFrOGcQSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MDE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));\n          \n          \n            \n                                        responseSection.append(getGeneratedConditionsForResponseCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432280156", "createdAt": "2020-05-29T06:28:10Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -156,21 +157,19 @@ private void setOtherSchemes(List<String> otherSchemes) {\n                         if (applicationJson != null) {\n                             String jsonExample = Json.pretty(applicationJson);\n                             genCode.append(getGeneratedResponseVar(responseEntry, jsonExample, \"json\"));\n-                            if (responseCode == minResponseCode && !setPayloadResponse){\n-                                responseSection.append(getGeneratedSetResponse(responseEntry, \"json\"));\n-                                setPayloadResponse = true;\n-                                if (applicationXml != null) {\n-                                    responseSection.append(\"\\n\\n/*\").append(getGeneratedSetResponse(responseEntry, \"xml\")).append(\"*/\\n\\n\");\n-                                }\n+                            responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQzNTM3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyOToxN1rOGcQT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyOToxN1rOGcQT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MDU1Mw==", "bodyText": "Do we need these brackets?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            minResponseType = (\"json\");\n          \n          \n            \n                                            minResponseType = \"json\";", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432280553", "createdAt": "2020-05-29T06:29:17Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -156,21 +157,19 @@ private void setOtherSchemes(List<String> otherSchemes) {\n                         if (applicationJson != null) {\n                             String jsonExample = Json.pretty(applicationJson);\n                             genCode.append(getGeneratedResponseVar(responseEntry, jsonExample, \"json\"));\n-                            if (responseCode == minResponseCode && !setPayloadResponse){\n-                                responseSection.append(getGeneratedSetResponse(responseEntry, \"json\"));\n-                                setPayloadResponse = true;\n-                                if (applicationXml != null) {\n-                                    responseSection.append(\"\\n\\n/*\").append(getGeneratedSetResponse(responseEntry, \"xml\")).append(\"*/\\n\\n\");\n-                                }\n+                            responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));\n+                            if (responseCode == minResponseCode) {\n+                                minResponseType = (\"json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQzNTk4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyOTozM1rOGcQURA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyOTozM1rOGcQURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MDY0NA==", "bodyText": "Do we need brackets?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                minResponseType = (\"xml\");\n          \n          \n            \n                                                minResponseType = \"xml\";", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432280644", "createdAt": "2020-05-29T06:29:33Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -156,21 +157,19 @@ private void setOtherSchemes(List<String> otherSchemes) {\n                         if (applicationJson != null) {\n                             String jsonExample = Json.pretty(applicationJson);\n                             genCode.append(getGeneratedResponseVar(responseEntry, jsonExample, \"json\"));\n-                            if (responseCode == minResponseCode && !setPayloadResponse){\n-                                responseSection.append(getGeneratedSetResponse(responseEntry, \"json\"));\n-                                setPayloadResponse = true;\n-                                if (applicationXml != null) {\n-                                    responseSection.append(\"\\n\\n/*\").append(getGeneratedSetResponse(responseEntry, \"xml\")).append(\"*/\\n\\n\");\n-                                }\n+                            responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));\n+                            if (responseCode == minResponseCode) {\n+                                minResponseType = (\"json\");\n                             }\n+                            setPayloadResponse = true;\n                         }\n                         if (applicationXml != null) {\n                             String xmlExample = applicationXml.toString();\n                             genCode.append(getGeneratedResponseVar(responseEntry, xmlExample, \"xml\"));\n-                            if (responseCode == minResponseCode && !setPayloadResponse){\n+                            if (responseCode == minResponseCode && !setPayloadResponse) {\n                                 if (applicationJson == null) {\n-                                    responseSection.append(getGeneratedSetResponse(responseEntry, \"xml\"));\n-                                    setPayloadResponse = true;\n+                                    responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"xml\")));\n+                                    minResponseType = (\"xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQzOTc4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozMToyNFrOGcQWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozMToyNFrOGcQWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MTI2MA==", "bodyText": "This line seems to have too much functionality in a single line.. Shall we split it to a couple of lines?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));\n          \n          \n            \n            someMeaningfulName = getGeneratedSetResponse(responseEntry, \"json\")\n          \n          \n            \n            responseSection.append(getGeneratedIFsforCodes(responseEntry, someMeaningfulName));", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432281260", "createdAt": "2020-05-29T06:31:24Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -156,21 +157,19 @@ private void setOtherSchemes(List<String> otherSchemes) {\n                         if (applicationJson != null) {\n                             String jsonExample = Json.pretty(applicationJson);\n                             genCode.append(getGeneratedResponseVar(responseEntry, jsonExample, \"json\"));\n-                            if (responseCode == minResponseCode && !setPayloadResponse){\n-                                responseSection.append(getGeneratedSetResponse(responseEntry, \"json\"));\n-                                setPayloadResponse = true;\n-                                if (applicationXml != null) {\n-                                    responseSection.append(\"\\n\\n/*\").append(getGeneratedSetResponse(responseEntry, \"xml\")).append(\"*/\\n\\n\");\n-                                }\n+                            responseSection.append(getGeneratedIFsforCodes(responseEntry, getGeneratedSetResponse(responseEntry, \"json\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQ0MzcyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozMzoyNFrOGcQZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozMzoyNFrOGcQZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"} else \" +\n          \n          \n            \n                            \"{\\n\\n\" +\n          \n          \n            \n                            \"} else {\\n\\n\" +", "url": "https://github.com/wso2/carbon-apimgt/pull/8576#discussion_r432281910", "createdAt": "2020-05-29T06:33:24Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OAS2Parser.java", "diffHunk": "@@ -246,8 +244,49 @@ private String getGeneratedResponseVar(String responseCode, String example, Stri\n      * @return manualCode\n      */\n     private String getGeneratedSetResponse(String responseCode, String type) {\n-        return \"mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n-                \"mc.setPayloadJSON(response\" + responseCode + type + \");\";\n+        return \"  mc.setProperty('HTTP_SC', \\\"\" + responseCode + \"\\\");\\n\" +\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + type + \"');\\n\" +\n+                \"  mc.setPayload\" + type.toUpperCase() + \"(response\" + responseCode + type + \");\";\n+    }\n+\n+    /**\n+     * Generates IF conditions for setting response code of mock payload\n+     *\n+     * @param responseCode response code of payload\n+     * @param getGeneratedSetResponseString string returned from \"getGeneratedSetResponse\"\n+     * @return if condition with \"getGeneratedSetResponse\" included\n+     */\n+    private String getGeneratedIFsforCodes(String responseCode, String getGeneratedSetResponseString) {\n+        return \"if (responseCode == \" + responseCode + \") {\\n\\n\" +\n+                getGeneratedSetResponseString +\n+                \"\\n\\n} else \";\n+    }\n+\n+    /**\n+     * Generates Mock payload and set response for 501 response and null response code\n+     * also includes getGeneratedIFsforCodes string of all included response codes\n+     *\n+     * @param minResponseCode minimum response code\n+     * @param minResponseType type of minimum response code (json/xml)\n+     * @param responseSectionString String of IF conditions of all response codes\n+     * @return response section string with IF conditions and responses\n+     */\n+    private String getGeneratedSetResponseForCodes(int minResponseCode, String minResponseType, String responseSectionString) {\n+        return \"\\nvar response501json = {\\n\" +\n+                \"\\\"code\\\" : 501,\" +\n+                \"\\n\\\"description\\\" : \" + \"\\\"Not Implemented\\\"\\n\" +\n+                \"}\\n\\n\" +\n+                \"var responseCode = mc.getProperty('query.param.responseCode');\\n\\n\" +\n+                responseSectionString +\n+                \" if (responseCode == null) {\\n\\n\" +\n+                \"  mc.setProperty('HTTP_SC', \\\"\" + minResponseCode + \"\\\");\\n\" +\n+                \"  mc.setProperty('CONTENT_TYPE', 'application/\" + minResponseType + \"');\\n\" +\n+                \"  mc.setPayload\" + minResponseType.toUpperCase() + \"(response\" + minResponseCode + minResponseType + \");\\n\\n\" +\n+                \"} else \" +\n+                \"{\\n\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c4086918649517c883590bd697890c915a00eb"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3461, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}