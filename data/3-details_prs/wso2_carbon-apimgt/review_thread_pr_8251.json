{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTIxMjM5", "number": 8251, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo1Mjo0MFrODitZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODowNDo0N1rOELlPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzIxOTA0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo1Mjo0MFrOFuG02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzo0ODo0MVrOFuddjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MDY1MQ==", "bodyText": "Shall we make this a constant?", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r383890651", "createdAt": "2020-02-25T13:52:40Z", "author": {"login": "mushthaq33"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java", "diffHunk": "@@ -2282,6 +2281,23 @@ public void testUpdateAPI_InCreatedState() throws RegistryException, UserStoreEx\n \n \n         List<Documentation> documentationList = getDocumentationList();\n+        Documentation documentation = documentationList.get(1);\n+        Mockito.when(APIUtil.getAPIDocPath(api.getId())).thenReturn(documentation.getFilePath());\n+        APIProviderImplWrapper apiProviderImplWrapper = new APIProviderImplWrapper(apimgtDAO, null, null);\n+        Resource docResource = Mockito.mock(Resource.class);\n+        Mockito.when(docResource.getUUID()).thenReturn(documentation.getId());\n+        Mockito.when(apiProviderImplWrapper.registry.get(documentation.getFilePath())).thenReturn(docResource);\n+\n+        GenericArtifact docArtifact = Mockito.mock(GenericArtifact.class);\n+        Mockito.when(artifactManager.getGenericArtifact(documentation.getId())).thenReturn(docArtifact);\n+        Mockito.when(APIUtil.getDocumentation(docArtifact)).thenReturn(documentation);\n+        Mockito.when(docArtifact.getPath()).thenReturn(\"artifact/path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ac162ed3524cadebf35d38f9754f17c8e7f313"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2MTUxNw==", "bodyText": "fixed with f49c9d3", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r384261517", "createdAt": "2020-02-26T03:48:41Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java", "diffHunk": "@@ -2282,6 +2281,23 @@ public void testUpdateAPI_InCreatedState() throws RegistryException, UserStoreEx\n \n \n         List<Documentation> documentationList = getDocumentationList();\n+        Documentation documentation = documentationList.get(1);\n+        Mockito.when(APIUtil.getAPIDocPath(api.getId())).thenReturn(documentation.getFilePath());\n+        APIProviderImplWrapper apiProviderImplWrapper = new APIProviderImplWrapper(apimgtDAO, null, null);\n+        Resource docResource = Mockito.mock(Resource.class);\n+        Mockito.when(docResource.getUUID()).thenReturn(documentation.getId());\n+        Mockito.when(apiProviderImplWrapper.registry.get(documentation.getFilePath())).thenReturn(docResource);\n+\n+        GenericArtifact docArtifact = Mockito.mock(GenericArtifact.class);\n+        Mockito.when(artifactManager.getGenericArtifact(documentation.getId())).thenReturn(docArtifact);\n+        Mockito.when(APIUtil.getDocumentation(docArtifact)).thenReturn(documentation);\n+        Mockito.when(docArtifact.getPath()).thenReturn(\"artifact/path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MDY1MQ=="}, "originalCommit": {"oid": "e1ac162ed3524cadebf35d38f9754f17c8e7f313"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc5MTA0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODowMjowNVrOGtM2rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxMzo0NFrOGteBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTcwOA==", "bodyText": "Add context information to error logs", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450049708", "createdAt": "2020-07-06T08:02:05Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);\n+            }\n+        } catch (RegistryException e) {\n+            handleException(\"Failed to update visibility of documentation\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49c9d3f081876d70d326565a7a5ea85b31633df"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMDkyMw==", "bodyText": "Fixed with ec30343", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450330923", "createdAt": "2020-07-06T16:13:44Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);\n+            }\n+        } catch (RegistryException e) {\n+            handleException(\"Failed to update visibility of documentation\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTcwOA=="}, "originalCommit": {"oid": "f49c9d3f081876d70d326565a7a5ea85b31633df"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTc5ODgzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODowNDo0N1rOGtM7lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxMzo1MFrOGteBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MDk2Ng==", "bodyText": "This operation is not related to API creation right? This is related to doc visibility update. Please modify the error messages accrdingly.", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450050966", "createdAt": "2020-07-06T08:04:47Z", "author": {"login": "tgtshanika"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49c9d3f081876d70d326565a7a5ea85b31633df"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMDk4MQ==", "bodyText": "Fixed with ec30343", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450330981", "createdAt": "2020-07-06T16:13:50Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MDk2Ng=="}, "originalCommit": {"oid": "f49c9d3f081876d70d326565a7a5ea85b31633df"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}