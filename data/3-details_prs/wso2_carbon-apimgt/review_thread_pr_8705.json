{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODI3MDg2", "number": 8705, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0MjowNVrOEEigFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo1NTozMlrOFIBfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk1MDI4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0MjowNVrOGiOTjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozMDo1M1rOGiZRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTE0OQ==", "bodyText": "add serializableID here", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539149", "createdAt": "2020-06-11T04:42:05Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "diffHunk": "@@ -20,10 +20,12 @@\n \n package org.wso2.carbon.apimgt.api.gateway;\n \n+import java.io.Serializable;\n+\n /**\n  * This Contains the API Related data to deploy in Gateway.\n  */\n-public class GatewayAPIDTO {\n+public class GatewayAPIDTO implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36324a3c2472accfa6373e978630a996bd9b44a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxODg4Mw==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438718883", "createdAt": "2020-06-11T11:30:53Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "diffHunk": "@@ -20,10 +20,12 @@\n \n package org.wso2.carbon.apimgt.api.gateway;\n \n+import java.io.Serializable;\n+\n /**\n  * This Contains the API Related data to deploy in Gateway.\n  */\n-public class GatewayAPIDTO {\n+public class GatewayAPIDTO implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTE0OQ=="}, "originalCommit": {"oid": "c36324a3c2472accfa6373e978630a996bd9b44a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk1MDc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0MjoyN1rOGiOT4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0MjoyN1rOGiOT4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTIzNQ==", "bodyText": "do we need the gateway label inside this", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539235", "createdAt": "2020-06-11T04:42:27Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "diffHunk": "@@ -43,6 +45,7 @@\n     private String[] endpointEntriesToBeRemove;\n     private CredentialDto[] credentialsToBeAdd ;\n     private String[] credentialsToBeRemove;\n+    private String gatewayLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36324a3c2472accfa6373e978630a996bd9b44a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk1MTQ0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0Mjo1OVrOGiOUVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozMTowNlrOGiZSEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTM0OA==", "bodyText": "Licence header missing", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539348", "createdAt": "2020-06-11T04:42:59Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36324a3c2472accfa6373e978630a996bd9b44a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxODk5NQ==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438718995", "createdAt": "2020-06-11T11:31:06Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTM0OA=="}, "originalCommit": {"oid": "c36324a3c2472accfa6373e978630a996bd9b44a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjcyODc4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozOToxOFrOGiV-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozMToyOFrOGibAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NDg4NA==", "bodyText": "while(it.hasnext())", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438664884", "createdAt": "2020-06-11T09:39:18Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzMzMg==", "bodyText": "1cde7b5", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438747332", "createdAt": "2020-06-11T12:31:28Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NDg4NA=="}, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjczMDY3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozOTo1MFrOGiV_5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozODozOFrOGiZeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NTE5MA==", "bodyText": "null check for gatewayRuntimeArtifacts", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438665190", "createdAt": "2020-06-11T09:39:50Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjEzNg==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722136", "createdAt": "2020-06-11T11:38:38Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NTE5MA=="}, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc3NTI3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1MzoyMFrOGiWcjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyOTozN1rOGia9VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA==", "bodyText": "For undeploy, Do we need to retrieve any info", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438672524", "createdAt": "2020-06-11T09:53:20Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjQzNQ==", "bodyText": "Retrieving the DTO file which has details about removing sequences,localentries etc.", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722435", "createdAt": "2020-06-11T11:39:19Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA=="}, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NjQ1Mw==", "bodyText": "ok", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438746453", "createdAt": "2020-06-11T12:29:37Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA=="}, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc3NzM0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDowMVrOGiWeDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NDowMVrOGiWeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjkxMA==", "bodyText": "null check", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438672910", "createdAt": "2020-06-11T09:54:01Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever\n+                            .retrieveArtifact(apiId, gatewayLabel,\n+                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Retrieve artifacts from the storage\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return DTO Object that contains the information and artifacts of the API for the given label\n+     */\n+    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n+\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc4NjQ5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Njo1N1rOGiWkGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozOTozMFrOGiZfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDQ1OQ==", "bodyText": "setArtifactRetriever ->addArtifactRetriever", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438674459", "createdAt": "2020-06-11T09:56:57Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -396,5 +406,36 @@ protected void unsetGatewayJWTGenerator(AbstractAPIMgtGatewayJWTGenerator gatewa\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n+\n+    @Reference(\n+            name = \"gateway.artifact.retriever\",\n+            service = ArtifactRetriever.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetArtifactRetriever\")\n+    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjUwNQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722505", "createdAt": "2020-06-11T11:39:30Z", "author": {"login": "1akshitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -396,5 +406,36 @@ protected void unsetGatewayJWTGenerator(AbstractAPIMgtGatewayJWTGenerator gatewa\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n+\n+    @Reference(\n+            name = \"gateway.artifact.retriever\",\n+            service = ArtifactRetriever.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetArtifactRetriever\")\n+    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDQ1OQ=="}, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc4OTIxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo1NFrOGiWmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1Nzo1NFrOGiWmEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDk2Mw==", "bodyText": "unsetArtifactRetriever -> removeArtifactRetriever", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438674963", "createdAt": "2020-06-11T09:57:54Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -396,5 +406,36 @@ protected void unsetGatewayJWTGenerator(AbstractAPIMgtGatewayJWTGenerator gatewa\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n+\n+    @Reference(\n+            name = \"gateway.artifact.retriever\",\n+            service = ArtifactRetriever.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetArtifactRetriever\")\n+    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {\n+\n+        GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n+                ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n+                        .getGatewayArtifactSynchronizerProperties();\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()\n+                && gatewayArtifactSynchronizerProperties.getRetrieverName().equals(artifactRetriever.getName())) {\n+            ServiceReferenceHolder.getInstance().setArtifactRetriever(artifactRetriever);\n+\n+            try {\n+                ServiceReferenceHolder.getInstance().getArtifactRetriever().init();\n+            } catch (Exception e) {\n+                log.error(\"Error connecting with the Artifact retriever\");\n+                unsetArtifactRetriever(null);\n+            }\n+        }\n+    }\n+\n+    protected void unsetArtifactRetriever(ArtifactRetriever artifactRetriever) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc5MTY1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNlrOGiWnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1ODozNlrOGiWnkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NTM0Ng==", "bodyText": "move this into serverstartupfinalizer class", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438675346", "createdAt": "2020-06-11T09:58:36Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -95,6 +98,13 @@ protected void activate(ComponentContext context) {\n             APIManagerConfiguration apiManagerConfiguration =\n                     ServiceReferenceHolder.getInstance().getAPIManagerConfiguration();\n             String gatewayType = apiManagerConfiguration.getFirstProperty(APIConstants.API_GATEWAY_TYPE);\n+            GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n+                    ServiceReferenceHolder.getInstance()\n+                            .getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc5NzU4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDoxNlrOGiWrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowMDoxNlrOGiWrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjI2NQ==", "bodyText": "check where log.debug done", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438676265", "createdAt": "2020-06-11T10:00:16Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java", "diffHunk": "@@ -56,23 +61,23 @@\n \n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n+\n import java.util.*;\n \n public class APIGatewayManager {\n \n-\tprivate static final Log log = LogFactory.getLog(APIGatewayManager.class);\n-\n-\tprivate static APIGatewayManager instance;\n+    private static final Log log = LogFactory.getLog(APIGatewayManager.class);\n+    private boolean debugEnabled = log.isDebugEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e62769ade21b2544c56949a6d50909d2b06b3de"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU0MzI1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/ArtifactRetriever.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozNzowNFrOIJuGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowNDozOFrOIOhmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzMzNw==", "bodyText": "We don't use '-' (dash) as a separator", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063337", "createdAt": "2020-12-22T04:37:04Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/ArtifactRetriever.java", "diffHunk": "@@ -26,6 +28,16 @@\n     String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException;\n \n+    /**\n+     * This method is used to retrieve data from the storage\n+     *\n+     * @param gatewayLabel       - Label subscribed by the gateway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b6388bd9b98a8b6a4dfac2a172f688febb917e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTQ1Mg==", "bodyText": "ad587f2", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101452", "createdAt": "2021-01-05T18:04:38Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/ArtifactRetriever.java", "diffHunk": "@@ -26,6 +28,16 @@\n     String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException;\n \n+    /**\n+     * This method is used to retrieve data from the storage\n+     *\n+     * @param gatewayLabel       - Label subscribed by the gateway", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzMzNw=="}, "originalCommit": {"oid": "59b6388bd9b98a8b6a4dfac2a172f688febb917e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU0NDE2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozNzo0NFrOIJuGuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzo1ODozMlrOIOhaCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzQ4MA==", "bodyText": "No need of using log.isDebugEnabled() if no string concatenation takes place", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063480", "createdAt": "2020-12-22T04:37:44Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -40,6 +42,25 @@ public String retrieveArtifact(String APIId, String gatewayLabel, String gateway\n         return gatewayRuntimeArtifacts;\n     }\n \n+    @Override\n+    public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try {\n+            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n+            for (ByteArrayInputStream byteStream :baip){\n+                byte[] bytes = ByteStreams.toByteArray(byteStream);\n+                String  gatewayRuntimeArtifacts = new String(bytes);\n+                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            }\n+            if (log.isDebugEnabled()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b6388bd9b98a8b6a4dfac2a172f688febb917e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5ODMxMg==", "bodyText": "Removed in the latest version", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552098312", "createdAt": "2021-01-05T17:58:32Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -40,6 +42,25 @@ public String retrieveArtifact(String APIId, String gatewayLabel, String gateway\n         return gatewayRuntimeArtifacts;\n     }\n \n+    @Override\n+    public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try {\n+            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n+            for (ByteArrayInputStream byteStream :baip){\n+                byte[] bytes = ByteStreams.toByteArray(byteStream);\n+                String  gatewayRuntimeArtifacts = new String(bytes);\n+                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            }\n+            if (log.isDebugEnabled()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzQ4MA=="}, "originalCommit": {"oid": "59b6388bd9b98a8b6a4dfac2a172f688febb917e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU0Njc2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozOTowOVrOIJuIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzo1OTowNFrOIOhbFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzgyNw==", "bodyText": "Add java doc comments for methods", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063827", "createdAt": "2020-12-22T04:39:09Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15527,6 +15527,26 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n         return baip;\n     }\n \n+    public List<ByteArrayInputStream> getAllGatewayPublishedAPIArtifacts(String label) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c765a9223d6299ba14fed4fbe4681b5c8a0c7e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5ODU4Mw==", "bodyText": "Removed in the latest Version", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552098583", "createdAt": "2021-01-05T17:59:04Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15527,6 +15527,26 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n         return baip;\n     }\n \n+    public List<ByteArrayInputStream> getAllGatewayPublishedAPIArtifacts(String label) throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzgyNw=="}, "originalCommit": {"oid": "d6c765a9223d6299ba14fed4fbe4681b5c8a0c7e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU0ODc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo0MDo0OFrOIJuJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowNDozNVrOIOhmLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDE0MA==", "bodyText": "Need space after \"deploying\". i.e. \"deploying \"", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547064140", "createdAt": "2020-12-22T04:40:48Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTQyMg==", "bodyText": "ad587f2", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101422", "createdAt": "2021-01-05T18:04:35Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDE0MA=="}, "originalCommit": {"oid": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU1MjE2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo0MjozNVrOIJuLEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowNDozMlrOIOhmDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDU5Mg==", "bodyText": "The error stack trace is swallowed here. Don't we need to log it, since we do not throw the error?", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547064592", "createdAt": "2020-12-22T04:42:35Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTM5MQ==", "bodyText": "ad587f2", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101391", "createdAt": "2021-01-05T18:04:32Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDU5Mg=="}, "originalCommit": {"oid": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU2OTgyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo1MzozNFrOIJuU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowMDowOFrOIOhdRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzA5MA==", "bodyText": "Adding a - (dash) is not correct. This will duplicate dash when the java doc is auto rendered ad displayed in the IDE when hovered on method call.", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067090", "createdAt": "2020-12-22T04:53:34Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15530,7 +15530,7 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n     /**\n      * Retrieve the list of blobs of the APIs for a given label\n      *\n-     * @param gatewayLabel - Gateway label of the API\n+     * @param label - Gateway label of the API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87691087d7808a2ccc9a624d531b3f0b81bec9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5OTE0MQ==", "bodyText": "Removed in the latest version", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552099141", "createdAt": "2021-01-05T18:00:08Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15530,7 +15530,7 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n     /**\n      * Retrieve the list of blobs of the APIs for a given label\n      *\n-     * @param gatewayLabel - Gateway label of the API\n+     * @param label - Gateway label of the API", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzA5MA=="}, "originalCommit": {"oid": "b87691087d7808a2ccc9a624d531b3f0b81bec9f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU3MjA3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIGatewayManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo1NDo0OFrOIJuWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowNDoyOFrOIOhl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzQyMA==", "bodyText": "Additional space at the end after prodEnvironmentName ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067420", "createdAt": "2020-12-22T04:54:48Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIGatewayManagerTest.java", "diffHunk": "@@ -617,7 +624,7 @@ public void testRemovingRESTAPIWithOutSequenceFromGateway() throws AxisFault {\n         Map<String, String> failedEnvironmentsMap = gatewayManager\n                 .publishToGateway(api, apiTemplateBuilder, tenantDomain);\n         Assert.assertEquals(failedEnvironmentsMap.size(), 1);\n-        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName));\n+        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ee8e7d4c1e2ba3e72fb1a6c332146f242de599"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTM0NA==", "bodyText": "ad587f2", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101344", "createdAt": "2021-01-05T18:04:28Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIGatewayManagerTest.java", "diffHunk": "@@ -617,7 +624,7 @@ public void testRemovingRESTAPIWithOutSequenceFromGateway() throws AxisFault {\n         Map<String, String> failedEnvironmentsMap = gatewayManager\n                 .publishToGateway(api, apiTemplateBuilder, tenantDomain);\n         Assert.assertEquals(failedEnvironmentsMap.size(), 1);\n-        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName));\n+        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName ));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzQyMA=="}, "originalCommit": {"oid": "48ee8e7d4c1e2ba3e72fb1a6c332146f242de599"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU3MzIzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDo1NTozMlrOIJuWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODowMjo0NFrOIOhigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzU4OQ==", "bodyText": "Remove additional new lines", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067589", "createdAt": "2020-12-22T04:55:32Z", "author": {"login": "rmsamitha"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1406,7 +1406,13 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n \n                             //updated api contain what environments want to add\n                             Set<String> environmentsToPublish = new HashSet<String>(apiPublished.getEnvironments());\n-                            List<Label> labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            List<Label> labelsToPublish;\n+                            if (apiPublished.getGatewayLabels() != null ){\n+                                labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            } else {\n+                                labelsToPublish = new ArrayList<>();\n+                            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe6799365d65a9031c18380de74b5b00f039461"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMDQ4Mw==", "bodyText": "Fixed in the latest version", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552100483", "createdAt": "2021-01-05T18:02:44Z", "author": {"login": "Sarangan0219"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1406,7 +1406,13 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n \n                             //updated api contain what environments want to add\n                             Set<String> environmentsToPublish = new HashSet<String>(apiPublished.getEnvironments());\n-                            List<Label> labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            List<Label> labelsToPublish;\n+                            if (apiPublished.getGatewayLabels() != null ){\n+                                labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            } else {\n+                                labelsToPublish = new ArrayList<>();\n+                            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzU4OQ=="}, "originalCommit": {"oid": "dfe6799365d65a9031c18380de74b5b00f039461"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3365, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}