{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTQ5MDgy", "number": 8687, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyMzozNlrOEEJ95g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0Nzo0OVrOEE82xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzkzMDYyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyMzozNlrOGhmajQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyMzozNlrOGhmajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NTU4MQ==", "bodyText": "we don't  need to use lambda here right? component accept just component class/function.\ncomponent: SubscriptionThrottlingPolicies", "url": "https://github.com/wso2/carbon-apimgt/pull/8687#discussion_r437885581", "createdAt": "2020-06-10T06:23:36Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "diffHunk": "@@ -214,7 +215,7 @@ const RouteMenuMapping = (intl) => [\n                     defaultMessage: 'Subscription Policies',\n                 }),\n                 path: '/throttling/subscription',\n-                component: () => <DemoTable />,\n+                component: () => <SubscriptionThrottlingPolicies />,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df221366caecb2f8a4e39951b4d0b28f7cbafd2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzkzMjU3OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Throttling/Subscription/Delete.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyNDozMlrOGhmb0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyNDozMlrOGhmb0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NTkwNA==", "bodyText": "we don't need this prop validation right?", "url": "https://github.com/wso2/carbon-apimgt/pull/8687#discussion_r437885904", "createdAt": "2020-06-10T06:24:32Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Throttling/Subscription/Delete.jsx", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import DialogContentText from '@material-ui/core/DialogContentText';\n+import DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import { FormattedMessage } from 'react-intl';\n+import API from 'AppData/api';\n+\n+/**\n+ * Render delete dialog box.\n+ * @param {JSON} props component props.\n+ * @returns {JSX} Loading animation.\n+ */\n+function Delete(props) {\n+    const restApi = new API();\n+    const {\n+        dataRow, updateList,\n+    } = props;\n+\n+    const formSaveCallback = () => {\n+        const policyId = dataRow[6];\n+        const promiseAPICall = restApi\n+            .deleteSubscriptionPolicy(policyId)\n+            .then(() => {\n+                updateList();\n+                return (\n+                    <FormattedMessage\n+                        id='Throttling.Subscription.Policy.policy.delete.success'\n+                        defaultMessage='Subscription Rate Limiting Policy successfully deleted.'\n+                    />\n+                );\n+            })\n+            .catch(() => {\n+                return (\n+                    <FormattedMessage\n+                        id='Throttling.Subscription.Policy.policy.delete.error'\n+                        defaultMessage='Subscription Rate Limiting Policy could not be deleted.'\n+                    />\n+                );\n+            });\n+\n+        return (promiseAPICall);\n+    };\n+\n+    return (\n+        <FormDialogBase\n+            title='Delete Subscription Policy?'\n+            saveButtonText='Delete'\n+            icon={<DeleteForeverIcon />}\n+            formSaveCallback={formSaveCallback}\n+        >\n+            <DialogContentText>\n+                <FormattedMessage\n+                    id='Throttling.Subscription.Policy.policy.dialog.delete.error'\n+                    defaultMessage='Subscription Rate Limiting Policy will be deleted.'\n+                />\n+            </DialogContentText>\n+        </FormDialogBase>\n+    );\n+}\n+Delete.defaultProps = {\n+    dataRow: null,\n+};\n+\n+Delete.propTypes = {\n+    updateList: PropTypes.number.isRequired,\n+    dataRow: PropTypes.shape({\n+        id: PropTypes.string.isRequired,\n+        description: PropTypes.string.isRequired,\n+        label: PropTypes.string.isRequired,\n+    }),\n+    selectedPolicyName: PropTypes.shape({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df221366caecb2f8a4e39951b4d0b28f7cbafd2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjI2ODIyOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Throttling/Subscription/List.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0Nzo0OVrOGi49Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0Nzo0OVrOGi49Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNzg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map((obj) => {\n          \n          \n            \n                            .map(Object.values)", "url": "https://github.com/wso2/carbon-apimgt/pull/8687#discussion_r439237890", "createdAt": "2020-06-12T06:47:49Z", "author": {"login": "tmkasun"}, "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Throttling/Subscription/List.jsx", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React from 'react';\n+import { useIntl, FormattedMessage } from 'react-intl';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import Typography from '@material-ui/core/Typography';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import ListBase from 'AppComponents/AdminPages/Addons/ListBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import Delete from 'AppComponents/Throttling/Subscription/Delete';\n+import API from 'AppData/api';\n+import EditIcon from '@material-ui/icons/Edit';\n+import { Link as RouterLink } from 'react-router-dom';\n+import Button from '@material-ui/core/Button';\n+\n+/**\n+ * Render a list\n+ * @returns {JSX} Header AppBar components.\n+ */\n+export default function ListSubscriptionThrottlingPolicies() {\n+    const intl = useIntl();\n+    const restApi = new API();\n+\n+    const searchProps = {\n+        searchPlaceholder: intl.formatMessage({\n+            id: 'Throttling.Subscription.Policy..List.search.default',\n+            defaultMessage: 'Search by Subscription Policy name',\n+        }),\n+        active: true,\n+    };\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+            + 'learn/rate-limiting/adding-new-throttling-policies/#adding-a-new-subscription-level-throttling-tier'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Throttling.Subscription.Policy.List.help.link.one'\n+                                    defaultMessage='Creating a Subscription Rate Limiting Policy'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                + 'learn/rate-limiting/setting-throttling-limits/#subscription-level-throttling-api-publisher'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Throttling.Subscription.Policy.List.help.link.two'\n+                                    defaultMessage='Setting a Subscription Rate Limiting Policy as an API Publisher'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={Configurations.app.docUrl\n+                + 'learn/rate-limiting/setting-throttling-limits/#subscription-level-throttling-api-subscriber'}\n+                        >\n+                            <ListItemText primary={(\n+                                <FormattedMessage\n+                                    id='Throttling.Subscription.Policy.List.help.link.three'\n+                                    defaultMessage='Setting a Subscription Rate Limiting Policy as an API Subscriber'\n+                                />\n+                            )}\n+                            />\n+\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>),\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'Throttling.Subscription.Policy.search.default',\n+            defaultMessage: 'Subscription Rate Limiting Policies',\n+        }),\n+        EditTitle: intl.formatMessage({\n+            id: 'Throttling.Subscription.Policy.search.default',\n+            defaultMessage: 'Subscription Rate Limiting Policies',\n+        }),\n+    };\n+\n+    const columProps = [\n+        {\n+            name: 'name',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.name',\n+                defaultMessage: 'Name',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: true,\n+            },\n+        },\n+        {\n+            name: 'quotaPolicy',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.quota.policy',\n+                defaultMessage: 'Quota Policy',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: false,\n+            },\n+        },\n+        {\n+            name: 'quota',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.quota',\n+                defaultMessage: 'Quota',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: false,\n+            },\n+        },\n+        {\n+            name: 'unitTime',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.unit.time',\n+                defaultMessage: 'Unit Time',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: false,\n+            },\n+        },\n+        {\n+            name: 'rateLimit',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.rate.limit',\n+                defaultMessage: 'Rate Limit',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: false,\n+            },\n+        },\n+        {\n+            name: 'timeUnit',\n+            label: intl.formatMessage({\n+                id: 'Admin.Throttling.Subscription.Throttling.policy.table.header.time.unit',\n+                defaultMessage: 'Time Unit',\n+            }),\n+            options: {\n+                filter: true,\n+                sort: false,\n+            },\n+        },\n+        { // Id column has to be always the last.\n+            name: 'policyId',\n+            options: {\n+                display: false,\n+            },\n+        },\n+    ];\n+\n+    const emptyBoxProps = {\n+        content: (\n+            <Typography variant='body2' color='textSecondary' component='p'>\n+                <FormattedMessage\n+                    id='Throttling.Subsription.Policy.List.empty.content.subscription.policies'\n+                    defaultMessage={'Subscription-level throttling policies are applicable per access '\n+                    + 'token generated for an application.'}\n+                />\n+            </Typography>),\n+        title: (\n+            <Typography gutterBottom variant='h5' component='h2'>\n+                <FormattedMessage\n+                    id='Throttling.Subscription.Policy.List.empty.title.subscription.policies'\n+                    defaultMessage='Subscription Policies'\n+                />\n+\n+            </Typography>),\n+    };\n+\n+    const addButtonOverride = (\n+        <RouterLink to='/throttling/subscription/add'>\n+            <Button variant='contained' color='primary'>\n+                <FormattedMessage\n+                    id='Throttling.Subscription.Policy.List.addButtonProps.title'\n+                    defaultMessage='Add Policy'\n+                />\n+            </Button>\n+        </RouterLink>\n+    );\n+\n+    /**\n+     * Populate subscription policies\n+     * @returns {Promise} The list of subscription policies\n+     */\n+    function apiCall() {\n+        let subscriptionThrottlingvalues;\n+        return restApi.getSubscritionPolicyList().then((result) => {\n+            const subscriptionPolicies = result.body.list.map((obj) => {\n+                if (obj.defaultLimit.requestCount !== null) {\n+                    return {\n+                        policyName: obj.policyName,\n+                        quotaPolicy: 'Request Count',\n+                        quota: obj.defaultLimit.requestCount.requestCount,\n+                        unitTime: obj.defaultLimit.requestCount.unitTime + ' '\n+                        + obj.defaultLimit.requestCount.timeUnit,\n+                        rateLimit: (obj.rateLimitCount === 0) ? 'NA' : obj.rateLimitCount,\n+                        timeUnit: (obj.rateLimitCount === 0) ? 'NA' : obj.rateLimitTimeUnit,\n+                        policyId: obj.policyId,\n+                    };\n+                } else {\n+                    return {\n+                        policyName: obj.policyName,\n+                        quotaPolicy: 'Bandwidth Volume',\n+                        quota: obj.defaultLimit.bandwidth.dataAmount + ' '\n+                        + obj.defaultLimit.bandwidth.dataUnit,\n+                        unitTime: obj.defaultLimit.bandwidth.unitTime + ' '\n+                        + obj.defaultLimit.bandwidth.timeUnit,\n+                        rateLimit: (obj.rateLimitCount === 0) ? 'NA' : obj.rateLimitCount,\n+                        timeUnit: (obj.rateLimitCount === 0) ? 'NA' : obj.rateLimitTimeUnit,\n+                        policyId: obj.policyId,\n+                    };\n+                }\n+            });\n+\n+            subscriptionThrottlingvalues = subscriptionPolicies\n+                .filter((policy) => policy.policyName !== 'Unlimited')\n+                .map((obj) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f2bac317f2f4a922471ed2d8c572067036042b"}, "originalPosition": 267}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3349, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}