{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzODg4NjU2", "number": 8914, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxOTozMlrOELKsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoyMjozNVrOELKwUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQ1MDMyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxOTozMlrOGsoBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToxMTozMFrOGsppMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjI2NQ==", "bodyText": "this line doesn't needed", "url": "https://github.com/wso2/carbon-apimgt/pull/8914#discussion_r449446265", "createdAt": "2020-07-03T08:19:32Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "diffHunk": "@@ -965,5 +987,38 @@ private void addKeyManagerConfigsAsSystemProperties(String serviceUrl) {\n             log.error(\"Exception While resolving KeyManager Server URL or Port \" + e.getMessage(), e);\n         }\n     }\n+    \n+    @Override\n+    public Map<String, String> getUserClaims(String username, Map<String, Object> properties)\n+            throws APIManagementException {\n \n+        Map<String, String> map = new HashMap<String, String>();\n+        String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(username);\n+        UserInfoDTO userinfo = new UserInfoDTO();\n+        userinfo.setUsername(tenantAwareUserName);\n+        if (tenantAwareUserName.contains(APIConstants.DOMAIN_SEPARATOR)) {\n+            userinfo.setDomain(tenantAwareUserName.split(APIConstants.DOMAIN_SEPARATOR)[0]);\n+        }\n+        if (properties.containsKey(APIConstants.KeyManager.AUTH_CODE)) {\n+            userinfo.setAuthCode(properties.get(APIConstants.KeyManager.AUTH_CODE).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6082b1c73538a29b09bebca03aa010905245f7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MjgxNw==", "bodyText": "removed", "url": "https://github.com/wso2/carbon-apimgt/pull/8914#discussion_r449472817", "createdAt": "2020-07-03T09:11:30Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "diffHunk": "@@ -965,5 +987,38 @@ private void addKeyManagerConfigsAsSystemProperties(String serviceUrl) {\n             log.error(\"Exception While resolving KeyManager Server URL or Port \" + e.getMessage(), e);\n         }\n     }\n+    \n+    @Override\n+    public Map<String, String> getUserClaims(String username, Map<String, Object> properties)\n+            throws APIManagementException {\n \n+        Map<String, String> map = new HashMap<String, String>();\n+        String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(username);\n+        UserInfoDTO userinfo = new UserInfoDTO();\n+        userinfo.setUsername(tenantAwareUserName);\n+        if (tenantAwareUserName.contains(APIConstants.DOMAIN_SEPARATOR)) {\n+            userinfo.setDomain(tenantAwareUserName.split(APIConstants.DOMAIN_SEPARATOR)[0]);\n+        }\n+        if (properties.containsKey(APIConstants.KeyManager.AUTH_CODE)) {\n+            userinfo.setAuthCode(properties.get(APIConstants.KeyManager.AUTH_CODE).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjI2NQ=="}, "originalCommit": {"oid": "6e6082b1c73538a29b09bebca03aa010905245f7"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQ2MDAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/token/JWTGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoyMjozNVrOGsoHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToxMToyM1rOGspozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0Nzc1NQ==", "bodyText": "this one doesn't need since done in webapp", "url": "https://github.com/wso2/carbon-apimgt/pull/8914#discussion_r449447755", "createdAt": "2020-07-03T08:22:35Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/token/JWTGenerator.java", "diffHunk": "@@ -126,75 +130,43 @@\n     public Map<String, String> populateCustomClaims(TokenValidationContext validationContext)\n             throws APIManagementException {\n \n-        ClaimsRetriever claimsRetriever = getClaimsRetriever();\n-        if (claimsRetriever != null) {\n-            Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n-            Map<String, String> customClaims;\n-            //fix for https://github.com/wso2/product-apim/issues/4112\n-            String accessToken = validationContext.getAccessToken();\n-            String authCode = validationContext.getAuthorizationCode();\n-            if (accessToken != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByToken(new AuthorizationGrantCacheKey(accessToken));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else if (authCode != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByCode(new AuthorizationGrantCacheKey(authCode));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else {\n-                customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n-            }\n-            String username = validationContext.getValidationInfoDTO().getEndUserName();\n-            int tenantId = APIUtil.getTenantId(username);\n-\n-            customClaims = convertClaimMap(customClaimsWithMapping, username);\n-\n-            if (isNotEmpty(customClaims)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"The custom claims are retrieved from AuthorizationGrantCache for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Custom claims are not available in the AuthorizationGrantCache. Hence will be \" +\n-                            \"retrieved from the user store for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            }\n-            // If claims are not found in AuthorizationGrantCache, they will be retrieved from the userstore.\n+        Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n+        Map<String, String> customClaims;\n+        Map<String, Object> properties = new HashMap<String, Object>();\n \n-            try {\n+        String accessToken = validationContext.getAccessToken();\n+        String authCode = validationContext.getAuthorizationCode();\n+        if (accessToken != null) {\n+            properties.put(APIConstants.KeyManager.ACCESS_TOKEN, accessToken);\n+        } else if (authCode != null) {\n+            properties.put(APIConstants.KeyManager.AUTH_CODE, authCode);\n+        } else {\n+            customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n+        }\n+        String username = validationContext.getValidationInfoDTO().getEndUserName();\n+        int tenantId = APIUtil.getTenantId(username);\n \n-                if (tenantId != -1) {\n-                    UserStoreManager manager = ServiceReferenceHolder.getInstance().\n-                            getRealmService().getTenantUserRealm(tenantId).getUserStoreManager();\n+        customClaims = convertClaimMap(customClaimsWithMapping, username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6082b1c73538a29b09bebca03aa010905245f7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0OTQyMQ==", "bodyText": "i kept it to convert user attributes coming from validationContext.getUser().getUserAttributes()", "url": "https://github.com/wso2/carbon-apimgt/pull/8914#discussion_r449449421", "createdAt": "2020-07-03T08:26:03Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/token/JWTGenerator.java", "diffHunk": "@@ -126,75 +130,43 @@\n     public Map<String, String> populateCustomClaims(TokenValidationContext validationContext)\n             throws APIManagementException {\n \n-        ClaimsRetriever claimsRetriever = getClaimsRetriever();\n-        if (claimsRetriever != null) {\n-            Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n-            Map<String, String> customClaims;\n-            //fix for https://github.com/wso2/product-apim/issues/4112\n-            String accessToken = validationContext.getAccessToken();\n-            String authCode = validationContext.getAuthorizationCode();\n-            if (accessToken != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByToken(new AuthorizationGrantCacheKey(accessToken));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else if (authCode != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByCode(new AuthorizationGrantCacheKey(authCode));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else {\n-                customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n-            }\n-            String username = validationContext.getValidationInfoDTO().getEndUserName();\n-            int tenantId = APIUtil.getTenantId(username);\n-\n-            customClaims = convertClaimMap(customClaimsWithMapping, username);\n-\n-            if (isNotEmpty(customClaims)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"The custom claims are retrieved from AuthorizationGrantCache for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Custom claims are not available in the AuthorizationGrantCache. Hence will be \" +\n-                            \"retrieved from the user store for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            }\n-            // If claims are not found in AuthorizationGrantCache, they will be retrieved from the userstore.\n+        Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n+        Map<String, String> customClaims;\n+        Map<String, Object> properties = new HashMap<String, Object>();\n \n-            try {\n+        String accessToken = validationContext.getAccessToken();\n+        String authCode = validationContext.getAuthorizationCode();\n+        if (accessToken != null) {\n+            properties.put(APIConstants.KeyManager.ACCESS_TOKEN, accessToken);\n+        } else if (authCode != null) {\n+            properties.put(APIConstants.KeyManager.AUTH_CODE, authCode);\n+        } else {\n+            customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n+        }\n+        String username = validationContext.getValidationInfoDTO().getEndUserName();\n+        int tenantId = APIUtil.getTenantId(username);\n \n-                if (tenantId != -1) {\n-                    UserStoreManager manager = ServiceReferenceHolder.getInstance().\n-                            getRealmService().getTenantUserRealm(tenantId).getUserStoreManager();\n+        customClaims = convertClaimMap(customClaimsWithMapping, username);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0Nzc1NQ=="}, "originalCommit": {"oid": "6e6082b1c73538a29b09bebca03aa010905245f7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MjcxNg==", "bodyText": "removed", "url": "https://github.com/wso2/carbon-apimgt/pull/8914#discussion_r449472716", "createdAt": "2020-07-03T09:11:23Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/token/JWTGenerator.java", "diffHunk": "@@ -126,75 +130,43 @@\n     public Map<String, String> populateCustomClaims(TokenValidationContext validationContext)\n             throws APIManagementException {\n \n-        ClaimsRetriever claimsRetriever = getClaimsRetriever();\n-        if (claimsRetriever != null) {\n-            Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n-            Map<String, String> customClaims;\n-            //fix for https://github.com/wso2/product-apim/issues/4112\n-            String accessToken = validationContext.getAccessToken();\n-            String authCode = validationContext.getAuthorizationCode();\n-            if (accessToken != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByToken(new AuthorizationGrantCacheKey(accessToken));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else if (authCode != null) {\n-                AuthorizationGrantCacheEntry cacheEntry = AuthorizationGrantCache.getInstance()\n-                        .getValueFromCacheByCode(new AuthorizationGrantCacheKey(authCode));\n-                if (cacheEntry != null) {\n-                    customClaimsWithMapping.putAll(cacheEntry.getUserAttributes());\n-                }\n-            } else {\n-                customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n-            }\n-            String username = validationContext.getValidationInfoDTO().getEndUserName();\n-            int tenantId = APIUtil.getTenantId(username);\n-\n-            customClaims = convertClaimMap(customClaimsWithMapping, username);\n-\n-            if (isNotEmpty(customClaims)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"The custom claims are retrieved from AuthorizationGrantCache for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Custom claims are not available in the AuthorizationGrantCache. Hence will be \" +\n-                            \"retrieved from the user store for user : \" +\n-                            validationContext.getValidationInfoDTO().getEndUserName());\n-                }\n-            }\n-            // If claims are not found in AuthorizationGrantCache, they will be retrieved from the userstore.\n+        Map<ClaimMapping, String> customClaimsWithMapping = new HashMap<>();\n+        Map<String, String> customClaims;\n+        Map<String, Object> properties = new HashMap<String, Object>();\n \n-            try {\n+        String accessToken = validationContext.getAccessToken();\n+        String authCode = validationContext.getAuthorizationCode();\n+        if (accessToken != null) {\n+            properties.put(APIConstants.KeyManager.ACCESS_TOKEN, accessToken);\n+        } else if (authCode != null) {\n+            properties.put(APIConstants.KeyManager.AUTH_CODE, authCode);\n+        } else {\n+            customClaimsWithMapping.putAll(validationContext.getUser().getUserAttributes());\n+        }\n+        String username = validationContext.getValidationInfoDTO().getEndUserName();\n+        int tenantId = APIUtil.getTenantId(username);\n \n-                if (tenantId != -1) {\n-                    UserStoreManager manager = ServiceReferenceHolder.getInstance().\n-                            getRealmService().getTenantUserRealm(tenantId).getUserStoreManager();\n+        customClaims = convertClaimMap(customClaimsWithMapping, username);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0Nzc1NQ=="}, "originalCommit": {"oid": "6e6082b1c73538a29b09bebca03aa010905245f7"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3242, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}