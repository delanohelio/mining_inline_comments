{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTQyNTM0", "number": 8532, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowMjowMFrOEADkrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo1MTo1NFrOEBXsvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDkzOTk5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowMjowMFrOGbGCFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowMjozN1rOGbGDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MzU3NA==", "bodyText": "Make all messages present tense", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r431063574", "createdAt": "2020-05-27T12:02:00Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e54e39243ca1ba808cecc4ba7ad6ee436ac069"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2Mzg4OQ==", "bodyText": "@shaniR can you please review all the messages?", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r431063889", "createdAt": "2020-05-27T12:02:37Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MzU3NA=="}, "originalCommit": {"oid": "c0e54e39243ca1ba808cecc4ba7ad6ee436ac069"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODUxMzA3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo0NjoyNVrOGdJNRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo0NjoyNVrOGdJNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxMjc0MQ==", "bodyText": "please add java docs for all new methods.", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433212741", "createdAt": "2020-06-01T12:46:25Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "diffHunk": "@@ -209,4 +211,15 @@ void updateMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizatio\n      * @return Timestamp in long format\n      */\n     long getTimestamp(String date);\n+\n+    List<KeyManagerConfigurationDTO> getKeyManagerConfigurationsByTenant(String tenantDomain) throws APIManagementException;\n+    Map<String, List<KeyManagerConfigurationDTO>> getAllKeyManagerConfigurations() throws APIManagementException;\n+\n+    KeyManagerConfigurationDTO getKeyManagerConfigurationById(String tenantDomain, String id) throws APIManagementException;\n+    boolean isKeyManagerConfigurationExistById(String tenantDomain, String id) throws APIManagementException;\n+    KeyManagerConfigurationDTO addKeyManagerConfiguration(KeyManagerConfigurationDTO keyManagerConfigurationDTO) throws APIManagementException;\n+    KeyManagerConfigurationDTO updateKeyManagerConfiguration(KeyManagerConfigurationDTO keyManagerConfigurationDTO) throws APIManagementException;\n+    void deleteKeyManagerConfigurationById(String tenantDomain,String id) throws APIManagementException;\n+\n+    KeyManagerConfigurationDTO getKeyManagerConfigurationByName(String tenantDomain, String name) throws APIManagementException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU0MjMzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1Njo0NFrOGdJfhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1Njo0NFrOGdJfhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxNzQxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 boolean isStackTrace();\n          \n          \n            \n                 boolean printStackTrace();", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433217415", "createdAt": "2020-06-01T12:56:44Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ErrorHandler.java", "diffHunk": "@@ -49,4 +49,10 @@\n      * @return  error code.\n      */\n      int getHttpStatusCode();\n+\n+    /**\n+     *  Return true if stack trace to print;\n+     * @return\n+     */\n+     boolean isStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU0OTE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1ODo1NlrOGdJjsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1ODo1NlrOGdJjsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxODQ4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n          \n          \n            \n                KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exists\", 409, \"Key Manager Already Exists\"),", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433218482", "createdAt": "2020-06-01T12:58:56Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU0OTcxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1OTowN1rOGdJkBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1OTowN1rOGdJkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxODU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n          \n          \n            \n                KEY_MANAGER_NOT_FOUND(901403, \"Key Manager not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433218564", "createdAt": "2020-06-01T12:59:07Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1MzU0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDoxMlrOGdJmNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDoxMlrOGdJmNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n          \n          \n            \n                KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager doesn't support OAuth application generation\", 400,", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219126", "createdAt": "2020-06-01T13:00:12Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NDEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDoyN1rOGdJmpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDoyN1rOGdJmpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTIzOA==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219238", "createdAt": "2020-06-01T13:00:27Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NTcxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMTowMlrOGdJnvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMTowMlrOGdJnvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n          \n          \n            \n                KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key manager doesn't support token generation\", 400,", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219516", "createdAt": "2020-06-01T13:01:02Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NjI0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToxNFrOGdJoEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToxNFrOGdJoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTYwMA==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219600", "createdAt": "2020-06-01T13:01:14Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n+            \"Key Manager didn't support to generate Token \"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1Njk1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToyOVrOGdJoew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMToyOVrOGdJoew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTcwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager not enabled in the system\", 400,\n          \n          \n            \n                KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager is not enabled in the system\", 400,", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219707", "createdAt": "2020-06-01T13:01:29Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n+            \"Key Manager didn't support to generate Token \"),\n+    KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager not enabled in the system\", 400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NzQ1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMTozOFrOGdJoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMTozOFrOGdJoyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTc4NA==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433219784", "createdAt": "2020-06-01T13:01:38Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n+            \"Key Manager didn't support to generate Token \"),\n+    KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager not enabled in the system\", 400,\n+            \"Key Manager not enabled in the system\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1OTM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMjoxM1rOGdJp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMjoxM1rOGdJp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMDA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required Application Properties missing\", 400,\n          \n          \n            \n                        \"Required Application Properties missing\"),\n          \n          \n            \n                KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required application properties are missing\", 400,\n          \n          \n            \n                        \"Required application properties are missing\"),", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433220080", "createdAt": "2020-06-01T13:02:13Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n+            \"Key Manager didn't support to generate Token \"),\n+    KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager not enabled in the system\", 400,\n+            \"Key Manager not enabled in the system\"),\n+    KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required Application Properties missing\", 400,\n+            \"Required Application Properties missing\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU2MjQxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMzoxMFrOGdJrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMzoxMFrOGdJrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMDU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KEY_MAPPING_ALREADY_EXIST(901408, \"Application Already Registered\", 409, \"Application Already Registered\");\n          \n          \n            \n                KEY_MAPPING_ALREADY_EXIST(901408, \"Oauth application is already created\", 409, \"Oauth application is already created\");", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433220540", "createdAt": "2020-06-01T13:03:10Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/ExceptionCodes.java", "diffHunk": "@@ -307,13 +308,31 @@\n \n \n     // Tenant related\n-    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\");\n+    INVALID_TENANT(901300,\"Tenant Not Found\", 400, \"Tenant Not Found\"),\n+    // Key Manager Related\n+    INVALID_KEY_MANAGER_TYPE(901400, \"Key Manager Type not configured\", 400, \"Key Manager Type not configured\"),\n+    REQUIRED_KEY_MANAGER_CONFIGURATION_MISSING(901401,\"Required Key Manager configuration missing\",400,\"Missing \" +\n+            \"required configuration\"),\n+    KEY_MANAGER_ALREADY_EXIST(901402, \"Key Manager Already Exist\", 409, \"Key Manager Already Exist\"),\n+    KEY_MANAGER_NOT_FOUND(901403, \"Key Manager Not found\", 400, \"Key Manager not found\"), KEY_MANAGER_NAME_EMPTY(901404,\n+            \"Key Manager name cannot be empty\", 400,\n+            \"Key Manager name cannot be empty\"),\n+    KEY_MANAGER_NOT_SUPPORT_OAUTH_APP_CREATION(901404, \"Key Manager Didn't support to Generate Client Application\", 400,\n+            \"Key Manager Didn't support to Generate Client Application\"),\n+    KEY_MANAGER_NOT_SUPPORTED_TOKEN_GENERATION(901405, \"Key Manager didn't support to generate Token \", 400,\n+            \"Key Manager didn't support to generate Token \"),\n+    KEY_MANAGER_NOT_ENABLED(901406, \"Key Manager not enabled in the system\", 400,\n+            \"Key Manager not enabled in the system\"),\n+    KEY_MANAGER_MISSING_REQUIRED_PROPERTIES_IN_APPLICATION(901407, \"Required Application Properties missing\", 400,\n+            \"Required Application Properties missing\"),\n+    KEY_MAPPING_ALREADY_EXIST(901408, \"Application Already Registered\", 409, \"Application Already Registered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY3NTgzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODowMlrOGdKxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODowMlrOGdKxvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.error(\"Public key is not a RSA\");\n          \n          \n            \n                            log.error(\"Public key is not RSA\");", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433238460", "createdAt": "2020-06-01T13:38:02Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.security.cert.Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+\n+public class JWTUtil {\n+\n+    private static final Log log = LogFactory.getLog(JWTUtil.class);\n+\n+    public static String retrieveJWKSConfiguration(String jwksEndpoint) throws IOException {\n+\n+        URL url = new URL(jwksEndpoint);\n+        try (CloseableHttpClient httpClient = (CloseableHttpClient) APIUtil\n+                .getHttpClient(url.getPort(), url.getProtocol())) {\n+            HttpGet httpGet = new HttpGet(jwksEndpoint);\n+            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    HttpEntity entity = response.getEntity();\n+                    try (InputStream content = entity.getContent()) {\n+                        return IOUtils.toString(content);\n+                    }\n+                } else {\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param publicKey      public certificate\n+     * @return whether the signature is verified or or not\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, RSAPublicKey publicKey) {\n+\n+        JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+        if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                JWSAlgorithm.RS384.equals(algorithm))) {\n+            try {\n+                JWSVerifier jwsVerifier = new RSASSAVerifier(publicKey);\n+                return jwt.verify(jwsVerifier);\n+            } catch (JOSEException e) {\n+                log.error(\"Error while verifying JWT signature\", e);\n+                return false;\n+            }\n+        } else {\n+            log.error(\"Public key is not a RSA\");\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param alias      public certificate keystore alias\n+     * @return whether the signature is verified or or not\n+     * @throws APIManagementException in case of signature verification failure\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, String alias) throws APIManagementException {\n+\n+        Certificate publicCert = null;\n+        //Read the client-truststore.jks into a KeyStore\n+        try {\n+            publicCert = APIUtil.getCertificateFromTrustStore(alias);\n+        } catch (APIManagementException e) {\n+            throw new APIManagementException(\"Error retrieving certificate from truststore \",e);\n+        }\n+\n+        if (publicCert != null) {\n+            JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+            if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                    JWSAlgorithm.RS384.equals(algorithm))) {\n+                return verifyTokenSignature(jwt, (RSAPublicKey) publicCert.getPublicKey());\n+            } else {\n+                log.error(\"Public key is not a RSA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY3NjM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODoxM1rOGdKyEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODoxM1rOGdKyEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new APIManagementException(\"Public key is not a RSA\");\n          \n          \n            \n                            throw new APIManagementException(\"Public key is not RSA\");", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433238544", "createdAt": "2020-06-01T13:38:13Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.security.cert.Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+\n+public class JWTUtil {\n+\n+    private static final Log log = LogFactory.getLog(JWTUtil.class);\n+\n+    public static String retrieveJWKSConfiguration(String jwksEndpoint) throws IOException {\n+\n+        URL url = new URL(jwksEndpoint);\n+        try (CloseableHttpClient httpClient = (CloseableHttpClient) APIUtil\n+                .getHttpClient(url.getPort(), url.getProtocol())) {\n+            HttpGet httpGet = new HttpGet(jwksEndpoint);\n+            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    HttpEntity entity = response.getEntity();\n+                    try (InputStream content = entity.getContent()) {\n+                        return IOUtils.toString(content);\n+                    }\n+                } else {\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param publicKey      public certificate\n+     * @return whether the signature is verified or or not\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, RSAPublicKey publicKey) {\n+\n+        JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+        if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                JWSAlgorithm.RS384.equals(algorithm))) {\n+            try {\n+                JWSVerifier jwsVerifier = new RSASSAVerifier(publicKey);\n+                return jwt.verify(jwsVerifier);\n+            } catch (JOSEException e) {\n+                log.error(\"Error while verifying JWT signature\", e);\n+                return false;\n+            }\n+        } else {\n+            log.error(\"Public key is not a RSA\");\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param alias      public certificate keystore alias\n+     * @return whether the signature is verified or or not\n+     * @throws APIManagementException in case of signature verification failure\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, String alias) throws APIManagementException {\n+\n+        Certificate publicCert = null;\n+        //Read the client-truststore.jks into a KeyStore\n+        try {\n+            publicCert = APIUtil.getCertificateFromTrustStore(alias);\n+        } catch (APIManagementException e) {\n+            throw new APIManagementException(\"Error retrieving certificate from truststore \",e);\n+        }\n+\n+        if (publicCert != null) {\n+            JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+            if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                    JWSAlgorithm.RS384.equals(algorithm))) {\n+                return verifyTokenSignature(jwt, (RSAPublicKey) publicCert.getPublicKey());\n+            } else {\n+                log.error(\"Public key is not a RSA\");\n+                throw new APIManagementException(\"Public key is not a RSA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY4MDE3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozOToyNlrOGdK0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozOToyNlrOGdK0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzOTE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"Couldn't find a public certificate to verify signature with alias \" + alias);\n          \n          \n            \n                        throw new APIManagementException(\"Couldn't find a public certificate to verify signature with alias \");\n          \n          \n            \n                        log.error(\"Couldn't find a public certificate with alias \" + alias + \" to verify the signature\");\n          \n          \n            \n                        throw new APIManagementException(\"Couldn't find a public certificate with alias \" + alias + \" to verify the signature\");", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433239193", "createdAt": "2020-06-01T13:39:26Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/JWTUtil.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.wso2.carbon.apimgt.impl.utils;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.security.cert.Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+\n+public class JWTUtil {\n+\n+    private static final Log log = LogFactory.getLog(JWTUtil.class);\n+\n+    public static String retrieveJWKSConfiguration(String jwksEndpoint) throws IOException {\n+\n+        URL url = new URL(jwksEndpoint);\n+        try (CloseableHttpClient httpClient = (CloseableHttpClient) APIUtil\n+                .getHttpClient(url.getPort(), url.getProtocol())) {\n+            HttpGet httpGet = new HttpGet(jwksEndpoint);\n+            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    HttpEntity entity = response.getEntity();\n+                    try (InputStream content = entity.getContent()) {\n+                        return IOUtils.toString(content);\n+                    }\n+                } else {\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param publicKey      public certificate\n+     * @return whether the signature is verified or or not\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, RSAPublicKey publicKey) {\n+\n+        JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+        if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                JWSAlgorithm.RS384.equals(algorithm))) {\n+            try {\n+                JWSVerifier jwsVerifier = new RSASSAVerifier(publicKey);\n+                return jwt.verify(jwsVerifier);\n+            } catch (JOSEException e) {\n+                log.error(\"Error while verifying JWT signature\", e);\n+                return false;\n+            }\n+        } else {\n+            log.error(\"Public key is not a RSA\");\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Verify the JWT token signature.\n+     *\n+     * @param jwt SignedJwt Token\n+     * @param alias      public certificate keystore alias\n+     * @return whether the signature is verified or or not\n+     * @throws APIManagementException in case of signature verification failure\n+     */\n+    public static boolean verifyTokenSignature(SignedJWT jwt, String alias) throws APIManagementException {\n+\n+        Certificate publicCert = null;\n+        //Read the client-truststore.jks into a KeyStore\n+        try {\n+            publicCert = APIUtil.getCertificateFromTrustStore(alias);\n+        } catch (APIManagementException e) {\n+            throw new APIManagementException(\"Error retrieving certificate from truststore \",e);\n+        }\n+\n+        if (publicCert != null) {\n+            JWSAlgorithm algorithm = jwt.getHeader().getAlgorithm();\n+            if ((JWSAlgorithm.RS256.equals(algorithm) || JWSAlgorithm.RS512.equals(algorithm) ||\n+                    JWSAlgorithm.RS384.equals(algorithm))) {\n+                return verifyTokenSignature(jwt, (RSAPublicKey) publicCert.getPublicKey());\n+            } else {\n+                log.error(\"Public key is not a RSA\");\n+                throw new APIManagementException(\"Public key is not a RSA\");\n+            }\n+        } else {\n+            log.error(\"Couldn't find a public certificate to verify signature with alias \" + alias);\n+            throw new APIManagementException(\"Couldn't find a public certificate to verify signature with alias \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY5NDAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0MzoyNlrOGdK9eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0MzoyNlrOGdK9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MTQ2Ng==", "bodyText": "format the entire code", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433241466", "createdAt": "2020-06-01T13:43:26Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -742,6 +737,12 @@ public static API getAPIForPublishing(GovernanceArtifact artifact, Registry regi\n             api.setApiCategories(getAPICategoriesFromAPIGovernanceArtifact(artifact, tenantId));\n             //get endpoint config string from artifact, parse it as a json and set the environment list configured with\n             //non empty URLs to API object\n+            String keyManagers = artifact.getAttribute(APIConstants.API_OVERVIEW_KEY_MANAGERS);\n+            if (StringUtils.isNotEmpty(keyManagers)){\n+                api.setKeyManagers(new Gson().fromJson(keyManagers,List.class));\n+            }else{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODcxNDExOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/KeyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0OToxNFrOGdLJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0OToxNFrOGdLJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDY2OQ==", "bodyText": "add java docs", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433244669", "createdAt": "2020-06-01T13:49:14Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/KeyManager.java", "diffHunk": "@@ -318,42 +314,41 @@ default void detachResourceScopes(API api, Set<URITemplate> uriTemplates, String\n      * This method will be used to delete a Scope in the authorization server.\n      *\n      * @param scopeName    Scope name\n-     * @param tenantDomain tenant domain to delete the scope from\n      * @throws APIManagementException if an error occurs while deleting the scope\n      */\n-    void deleteScope(String scopeName, String tenantDomain) throws APIManagementException;\n+    void deleteScope(String scopeName) throws APIManagementException;\n \n     /**\n      * This method will be used to update a Scope in the authorization server.\n      *\n      * @param scope        Scope object\n-     * @param tenantDomain tenant domain to update the scope\n      * @throws APIManagementException if an error occurs while updating the scope\n      */\n-    void updateScope(Scope scope, String tenantDomain) throws APIManagementException;\n+    void updateScope(Scope scope) throws APIManagementException;\n \n     /**\n      * This method will be used to check whether the a Scope exists for the given scope name in the authorization\n      * server.\n      *\n      * @param scopeName    Scope Name\n-     * @param tenantDomain tenant Domain to check scope existence\n      * @return whether scope exists or not\n      * @throws APIManagementException if an error occurs while checking the existence of the scope\n      */\n-    boolean isScopeExists(String scopeName, String tenantDomain) throws APIManagementException;\n+    boolean isScopeExists(String scopeName) throws APIManagementException;\n \n     /**\n      * This method will be used to validate the scope set provided and populate the additional parameters for each\n      * Scope object. Default implementation will return the received scope set as it is.\n      *\n      * @param scopes       Scope List to validate\n-     * @param tenantDomain tenant domain\n      * @throws APIManagementException if an error occurs while validating and populating\n      */\n-    default void validateScopes(Set<Scope> scopes, String tenantDomain) throws APIManagementException {\n+    default void validateScopes(Set<Scope> scopes) throws APIManagementException {\n         // Doing nothing in default implementation. If KM supports validate scopes operation, override the\n         // implementation.\n     }\n \n+    public String getType();\n+\n+    public void setTenantDomain(String tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODcxNTM3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/KeyManagerConnectorConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0OTozNlrOGdLKvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0OTozNlrOGdLKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NDg2Mw==", "bodyText": "java docs.", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433244863", "createdAt": "2020-06-01T13:49:36Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/KeyManagerConnectorConfiguration.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import java.util.List;\n+\n+public interface KeyManagerConnectorConfiguration {\n+    public String getImplementation();\n+    public String getJWTValidator();\n+    public List<ConfigurationDto> getConnectionConfigurations();\n+    public List<ConfigurationDto> getApplicationConfigurations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODcyMzE3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo1MTo1NFrOGdLPnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo1MTo1NFrOGdLPnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0NjExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static final String KEY_MAPPING_UD = \"keyMappingId\";\n          \n          \n            \n                    public static final String KEY_MAPPING_ID = \"keyMappingId\";", "url": "https://github.com/wso2/carbon-apimgt/pull/8532#discussion_r433246111", "createdAt": "2020-06-01T13:51:54Z", "author": {"login": "bhathiya"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -1084,6 +1082,7 @@ private CORSHeaders() {\n         public static final String CLIENT_DETAILS = \"appDetails\";\n         public static final String CALLBACK_URL = \"callbackUrl\";\n         public static final String KEY_STATE = \"keyState\";\n+        public static final String KEY_MAPPING_UD = \"keyMappingId\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e13445f78fca4634ec1eb6c2ff1276ec7ab111"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3418, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}