{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzYxNzc1", "number": 8293, "reviewThreads": {"totalCount": 88, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjozNTozMlrODkh5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxODoyOFrOD3AnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjMwODQwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjozNTozMlrOFw5xxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjozNTozMlrOFw5xxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjU5OA==", "bodyText": "remove extra whitespace", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386822598", "createdAt": "2020-03-03T06:35:32Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "diffHunk": "@@ -200,4 +201,9 @@ void updateMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizatio\n      * @return Timestamp in long format\n      */\n     long getTimestamp(String date);\n+\n+    Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjMyODQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo0NzoxMlrOFw5-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo0NzoxMlrOFw5-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNTc3MA==", "bodyText": "format this section. { should be after () . need space between =", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386825770", "createdAt": "2020-03-03T06:47:12Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjMzNjQ2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1MTozMVrOFw6C_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxMDozMVrOFxpI3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzAwNg==", "bodyText": "format the method. lenght should be 120 characters", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386827006", "createdAt": "2020-03-03T06:51:31Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,21 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5ODU1Nw==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387598557", "createdAt": "2020-03-04T11:10:31Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,21 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzAwNg=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM4NjM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoxNzo0M1rOFw6hEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoxNzo0M1rOFw6hEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDcwNQ==", "bodyText": "better to cast to string instead of using toString() .", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386834705", "createdAt": "2020-03-03T07:17:43Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();\n+        properties=new JSONObject();\n+    }\n+\n+    public String getWorkflowReference() {\n+        return workflowReference;\n+    }\n+\n+    public void setWorkflowReference(String workflowReference) {\n+        this.workflowReference = workflowReference;\n+    }\n+\n+    public String getWorkflowType() {\n+        return workflowType;\n+    }\n+\n+    public void setWorkflowType(String workflowType) {\n+        this.workflowType = workflowType;\n+    }\n+\n+    public WorkflowStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(WorkflowStatus status) {\n+        this.status = status;\n+    }\n+\n+    public String getCreatedTime() {\n+        return createdTime;\n+    }\n+\n+    public void setCreatedTime(String createdTime) {\n+        this.createdTime = createdTime;\n+    }\n+\n+    public String getUpdatedTime() {\n+        return updatedTime;\n+    }\n+\n+    public void setUpdatedTime(String updatedTime) {\n+        this.updatedTime = updatedTime;\n+    }\n+\n+    public String getWorkflowDescription() {\n+        return workflowDescription;\n+    }\n+\n+    public void setWorkflowDescription(String workflowDescription) {\n+        this.workflowDescription = workflowDescription;\n+    }\n+\n+    public int getTenantId() {\n+        return tenantId;\n+    }\n+\n+    public void setTenantId(int tenantId) {\n+        this.tenantId = tenantId;\n+    }\n+\n+    public String getTenantDomain() {\n+        return tenantDomain;\n+    }\n+\n+    public void setTenantDomain(String tenantDomain) {\n+        this.tenantDomain = tenantDomain;\n+    }\n+\n+    public String getExternalWorkflowReference() {\n+        return externalWorkflowReference;\n+    }\n+\n+    public void setExternalWorkflowReference(String externalWorkflowReference) {\n+        this.externalWorkflowReference = externalWorkflowReference;\n+    }\n+\n+    public String getCallbackUrl() {\n+        return callbackUrl;\n+    }\n+\n+    public void setCallbackUrl(String callbackUrl) {\n+        this.callbackUrl = callbackUrl;\n+    }\n+\n+    public int getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    public void setWorkflowId(int workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    public String getWorkflowStatusDesc() {\n+        return workflowStatusDesc;\n+    }\n+\n+    public void setWorkflowStatusDesc(String workflowStatusDesc) {\n+        this.workflowStatusDesc = workflowStatusDesc;\n+    }\n+\n+    public String getMetadata(String key) {\n+        return metadata.get(key).toString();\n+    }\n+\n+    public void setMetadata(String key, String value) {\n+        metadata.put(key, value);\n+    }\n+\n+    public String getProperties(String key) {\n+        return properties.get(key).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM4NzI1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoxODowOVrOFw6hkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoxODowOVrOFw6hkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDgzNQ==", "bodyText": "better to cast to string instead of using toString()", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386834835", "createdAt": "2020-03-03T07:18:09Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();\n+        properties=new JSONObject();\n+    }\n+\n+    public String getWorkflowReference() {\n+        return workflowReference;\n+    }\n+\n+    public void setWorkflowReference(String workflowReference) {\n+        this.workflowReference = workflowReference;\n+    }\n+\n+    public String getWorkflowType() {\n+        return workflowType;\n+    }\n+\n+    public void setWorkflowType(String workflowType) {\n+        this.workflowType = workflowType;\n+    }\n+\n+    public WorkflowStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(WorkflowStatus status) {\n+        this.status = status;\n+    }\n+\n+    public String getCreatedTime() {\n+        return createdTime;\n+    }\n+\n+    public void setCreatedTime(String createdTime) {\n+        this.createdTime = createdTime;\n+    }\n+\n+    public String getUpdatedTime() {\n+        return updatedTime;\n+    }\n+\n+    public void setUpdatedTime(String updatedTime) {\n+        this.updatedTime = updatedTime;\n+    }\n+\n+    public String getWorkflowDescription() {\n+        return workflowDescription;\n+    }\n+\n+    public void setWorkflowDescription(String workflowDescription) {\n+        this.workflowDescription = workflowDescription;\n+    }\n+\n+    public int getTenantId() {\n+        return tenantId;\n+    }\n+\n+    public void setTenantId(int tenantId) {\n+        this.tenantId = tenantId;\n+    }\n+\n+    public String getTenantDomain() {\n+        return tenantDomain;\n+    }\n+\n+    public void setTenantDomain(String tenantDomain) {\n+        this.tenantDomain = tenantDomain;\n+    }\n+\n+    public String getExternalWorkflowReference() {\n+        return externalWorkflowReference;\n+    }\n+\n+    public void setExternalWorkflowReference(String externalWorkflowReference) {\n+        this.externalWorkflowReference = externalWorkflowReference;\n+    }\n+\n+    public String getCallbackUrl() {\n+        return callbackUrl;\n+    }\n+\n+    public void setCallbackUrl(String callbackUrl) {\n+        this.callbackUrl = callbackUrl;\n+    }\n+\n+    public int getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    public void setWorkflowId(int workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    public String getWorkflowStatusDesc() {\n+        return workflowStatusDesc;\n+    }\n+\n+    public void setWorkflowStatusDesc(String workflowStatusDesc) {\n+        this.workflowStatusDesc = workflowStatusDesc;\n+    }\n+\n+    public String getMetadata(String key) {\n+        return metadata.get(key).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUyOTcwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxNzozNlrOFw73aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxNzozNlrOFw73aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NjgwOQ==", "bodyText": "do a null check before converting to toJSONString(). otherwise if these properties are not set, NPE will be thrown", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386856809", "createdAt": "2020-03-03T08:17:36Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5936,10 +5933,17 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            byte[] byteData1 = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+            byte[] byteData2 = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUzMDkzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxODowMlrOFw74FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxMToxM1rOFxpKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Njk4MQ==", "bodyText": "add method description", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386856981", "createdAt": "2020-03-03T08:18:02Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5ODkxNA==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387598914", "createdAt": "2020-03-04T11:11:13Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Njk4MQ=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUzMTc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxODoyMFrOFw74jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxODoyMFrOFw74jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzEwMA==", "bodyText": "remove unnecessary white space", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857100", "createdAt": "2020-03-03T08:18:20Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUzNTc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoxOTo0MVrOFw76tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxMTozOFrOFxpLHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzY1Mw==", "bodyText": "format the method\nadd a self-explanatory method name (no idea what this EWR means)\nadd method description", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857653", "createdAt": "2020-03-03T08:19:41Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5OTEzMw==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387599133", "createdAt": "2020-03-04T11:11:38Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzY1Mw=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUzNjYwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMDowM1rOFw77OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMDowM1rOFw77OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Nzc4NA==", "bodyText": "remove all unnecessary white spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857784", "createdAt": "2020-03-03T08:20:03Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjUzOTc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMToxOFrOFw79NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMToxOFrOFw79NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1ODI5Mw==", "bodyText": "remove whitespace and format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386858293", "createdAt": "2020-03-03T08:21:18Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU0NTc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMzozMVrOFw8AsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMzozMVrOFw8AsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTE4NA==", "bodyText": "use a self descriptive variable names (ex: metadataBlob)", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859184", "createdAt": "2020-03-03T08:23:31Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU0NjgxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMzo1OVrOFw8BcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyMzo1OVrOFw8BcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTM3Nw==", "bodyText": "same here", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859377", "createdAt": "2020-03-03T08:23:59Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU0NzczOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNDoyNVrOFw8CEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNDoyNVrOFw8CEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTUzNw==", "bodyText": "add meaningful variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859537", "createdAt": "2020-03-03T08:24:25Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU0ODEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNDozNlrOFw8CTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNDozNlrOFw8CTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTU5OQ==", "bodyText": "add meaningful variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859599", "createdAt": "2020-03-03T08:24:36Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU0OTcxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNTowOVrOFw8DWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNTowOVrOFw8DWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTg2NQ==", "bodyText": "add meaningful variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859865", "createdAt": "2020-03-03T08:25:09Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU1MDA2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNToxNlrOFw8Dkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNToxNlrOFw8Dkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTkyMg==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859922", "createdAt": "2020-03-03T08:25:16Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU1MTY4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNTo1MVrOFw8Elw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1NToxMVrOGHws5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDE4Mw==", "bodyText": "format\n-add method description", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860183", "createdAt": "2020-03-03T08:25:51Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTE0Mw==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791143", "createdAt": "2020-04-19T01:55:11Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDE4Mw=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU1MjQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNjowN1rOFw8FDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNjowN1rOFw8FDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDMwMQ==", "bodyText": "remove spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860301", "createdAt": "2020-03-03T08:26:07Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU1Mjk1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNjoxOVrOFw8FVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyNjoxOVrOFw8FVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDM3Mw==", "bodyText": "add meaningful variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860373", "createdAt": "2020-03-03T08:26:19Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU1OTE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODoyODozM1rOFw8JUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1NTozN1rOGHwtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTM5NQ==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386861395", "createdAt": "2020-03-03T08:28:33Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTIwMw==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791203", "createdAt": "2020-04-19T01:55:37Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTM5NQ=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYyNTQ0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MDowNVrOFw8yYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxNTowN1rOFxpRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MTkwNA==", "bodyText": "format and add method description", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386871904", "createdAt": "2020-03-03T08:50:05Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMDgxMw==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387600813", "createdAt": "2020-03-04T11:15:07Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MTkwNA=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYzNzkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1Mzo0NlrOFw851A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1Mzo0NlrOFw851A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MzgxMg==", "bodyText": "lets rename to GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386873812", "createdAt": "2020-03-03T08:53:46Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+\n+    public static final String GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ? AND WF_STATUS = ? AND TENANT_DOMAIN = ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYzOTEzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1NDowOVrOFw86mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1NDowOVrOFw86mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDAxMA==", "bodyText": "not clear enough (meaning)", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874010", "createdAt": "2020-03-03T08:54:09Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjY0MDEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1NDoyOFrOFw87Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo0NzoyNFrOGD68fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDE2Mw==", "bodyText": "format and remove space", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874163", "createdAt": "2020-03-03T08:54:28Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java", "diffHunk": "@@ -56,7 +57,26 @@\n     private String externalWorkflowReference;\n \n     private String callbackUrl;\n-    \n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public WorkflowDTO(){\n+        metadata =new JSONObject();\n+        properties =new JSONObject();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NDY3MQ==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406764671", "createdAt": "2020-04-10T13:47:24Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java", "diffHunk": "@@ -56,7 +57,26 @@\n     private String externalWorkflowReference;\n \n     private String callbackUrl;\n-    \n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public WorkflowDTO(){\n+        metadata =new JSONObject();\n+        properties =new JSONObject();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDE2Mw=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjY0MTU4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1NDo1NVrOFw88NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxNDoyNVrOFxpQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDQyMQ==", "bodyText": "this is not needed", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874421", "createdAt": "2020-03-03T08:54:55Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final String RUNTIME_INSTANCE_RESOURCE_PATH = \"/runtime/process-instances\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMDQ5NA==", "bodyText": "fixed with 1be4d86", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387600494", "createdAt": "2020-03-04T11:14:25Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final String RUNTIME_INSTANCE_RESOURCE_PATH = \"/runtime/process-instances\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDQyMQ=="}, "originalCommit": {"oid": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ3MTY3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNjozNlrOGDx7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjozNzowNVrOGHxDEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ==", "bodyText": "Missing license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406616911", "createdAt": "2020-04-10T06:06:36Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTQzNg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791436", "createdAt": "2020-04-19T01:57:17Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjgxOA==", "bodyText": "changed year with 3719d98", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796818", "createdAt": "2020-04-19T02:37:05Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.wso2.carbon.apimgt.api.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4MDA0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxMjowNFrOGDyATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxMjowNFrOGDyATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODE5MA==", "bodyText": "seems like this method is still not formated. please format every new method you include. Ex: there is no space between '=', I can see some other issues as well", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618190", "createdAt": "2020-04-10T06:12:04Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,22 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n+\n+        if (workflow == null) {\n+            String msg=\"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n+            throw new APIMgtResourceNotFoundException(msg);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4MDI0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxMjoxNlrOGDyAdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxMjoxNlrOGDyAdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODIzMA==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618230", "createdAt": "2020-04-10T06:12:16Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,22 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4MDg4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxMjozOFrOGDyA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1OTowOVrOGHwvUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODMyMw==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618323", "createdAt": "2020-04-10T06:12:38Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5937,10 +5934,24 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            if(workflow.getMetadata()!=null){\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTc2Mg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791762", "createdAt": "2020-04-19T01:59:09Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5937,10 +5934,24 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            if(workflow.getMetadata()!=null){\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODMyMw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4NDc3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNDo1MlrOGDyC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1OTozNVrOGHwvZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODg0OQ==", "bodyText": "close the db connection once finished\nfinally {\nAPIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n}", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618849", "createdAt": "2020-04-10T06:14:52Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTc4Mw==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791783", "createdAt": "2020-04-19T01:59:35Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODg0OQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4NjIyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNTo0OFrOGDyDsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNTo0OFrOGDyDsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTA1OQ==", "bodyText": "add missing docs", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619059", "createdAt": "2020-04-10T06:15:48Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4NjkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNjoyMFrOGDyEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMDowOFrOGHwvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTE3MQ==", "bodyText": "add missing docs", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619171", "createdAt": "2020-04-10T06:16:20Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTg0Nw==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791847", "createdAt": "2020-04-19T02:00:08Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTE3MQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4NzU0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNjo0OVrOGDyEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMDoyOFrOGHwvzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTI2Mg==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619262", "createdAt": "2020-04-10T06:16:49Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTg4Nw==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791887", "createdAt": "2020-04-19T02:00:28Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTI2Mg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ4ODQ4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNzoyOFrOGDyFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxNzoyOFrOGDyFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTM5Nw==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619397", "createdAt": "2020-04-10T06:17:28Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MDA1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxODoxOFrOGDyF0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxODoxOFrOGDyF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTYwMw==", "bodyText": "EWR?? please use a readable parameters", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619603", "createdAt": "2020-04-10T06:18:18Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MTc0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTowMlrOGDyGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMTowN1rOGHwwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTgzOQ==", "bodyText": "remove unnecessary gaps between each statement", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619839", "createdAt": "2020-04-10T06:19:02Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjAwMQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792001", "createdAt": "2020-04-19T02:01:07Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTgzOQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MjQ1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTozM1rOGDyHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMTo1NFrOGHwwkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0OQ==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619949", "createdAt": "2020-04-10T06:19:33Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjA4Mg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792082", "createdAt": "2020-04-19T02:01:54Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0OQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MzA4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTo1N1rOGDyHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTo1N1rOGDyHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDAzNg==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620036", "createdAt": "2020-04-10T06:19:57Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MzQyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMDoxMlrOGDyHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMjoyMFrOGHwwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDA4Nw==", "bodyText": "format", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620087", "createdAt": "2020-04-10T06:20:12Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjEyOQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792129", "createdAt": "2020-04-19T02:02:20Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDA4Nw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5NDcwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMTowMFrOGDyIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMTowMFrOGDyIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDI5MA==", "bodyText": "don't use g as a variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620290", "createdAt": "2020-04-10T06:21:00Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5NjE5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMTo1N1rOGDyJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMTo1N1rOGDyJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDUyMA==", "bodyText": "add a space at the end of the message", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620520", "createdAt": "2020-04-10T06:21:57Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5Njk0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMjoyMFrOGDyJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMjoyMFrOGDyJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDYyMw==", "bodyText": "describe these", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620623", "createdAt": "2020-04-10T06:22:20Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5ODc5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMzoxOVrOGDyK3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyMzoxOVrOGDyK3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDg5Mg==", "bodyText": "format this whole method.  remove any unnecessary spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620892", "createdAt": "2020-04-10T06:23:19Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwMTU3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNDo0MVrOGDyMZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowMjo0MlrOGHww7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTI4Nw==", "bodyText": "format whole method and remove unnecessary spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621287", "createdAt": "2020-04-10T06:24:41Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjE3Mg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792172", "createdAt": "2020-04-19T02:02:42Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTI4Nw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwMzM5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNTo1MVrOGDyNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNTo1MVrOGDyNew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTU2Mw==", "bodyText": "put a meaningful names to the variables. don't use g, json, json1", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621563", "createdAt": "2020-04-10T06:25:51Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwNDA1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNjoxNFrOGDyN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNjoxNFrOGDyN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTY1MQ==", "bodyText": "use meaningful variable names", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621651", "createdAt": "2020-04-10T06:26:14Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json1 = g.fromJson(properties, JSONObject.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwNDg2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNjo0NlrOGDyOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNjo0NlrOGDyOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTc3MA==", "bodyText": "put a meaningful variable name", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621770", "createdAt": "2020-04-10T06:26:46Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,34 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwNTczOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNzoxNlrOGDyOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjozMzoxMlrOGHxA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ==", "bodyText": "Add license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621889", "createdAt": "2020-04-10T06:27:16Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjI0MQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792241", "createdAt": "2020-04-19T02:03:06Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjI3NQ==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796275", "createdAt": "2020-04-19T02:33:12Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwNjkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNzo1MFrOGDyPbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyNzo1MFrOGDyPbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjA2Mw==", "bodyText": "don't use wildcard import.", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622063", "createdAt": "2020-04-10T06:27:50Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwNzM3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyODowOFrOGDyPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNDo0M1rOGHwyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjE0MA==", "bodyText": "where is the class description???", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622140", "createdAt": "2020-04-10T06:28:08Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjQ3NA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792474", "createdAt": "2020-04-19T02:04:43Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjE0MA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUwODgwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyODo1MlrOGDyQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNToxMVrOGHwySw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjM1Mg==", "bodyText": "format the whole class and remove unnecessary spaces between statements", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622352", "createdAt": "2020-04-10T06:28:52Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjUyMw==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792523", "createdAt": "2020-04-19T02:05:11Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjM1Mg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUxMDQ5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyOTozMFrOGDyRbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyOTozMFrOGDyRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjU3Mg==", "bodyText": "lets put one debug log", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622572", "createdAt": "2020-04-10T06:29:30Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUxMjUxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMDo0NlrOGDySmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMDo0NlrOGDySmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjg3Mw==", "bodyText": "use simple s in 'State'", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622873", "createdAt": "2020-04-10T06:30:46Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUxNjA5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMzowNVrOGDyUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMzowNVrOGDyUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzM5Nw==", "bodyText": "this property is not needed. you don't have to set any . don't set any value", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623397", "createdAt": "2020-04-10T06:33:05Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUxNzM4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMzo0OVrOGDyVYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozMzo0OVrOGDyVYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzU4NA==", "bodyText": "Error message is not complete. see the end of the message", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623584", "createdAt": "2020-04-10T06:33:49Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUxODE1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozNDowN1rOGDyVvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozNDowN1rOGDyVvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzY3Ng==", "bodyText": "where is the payload??", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623676", "createdAt": "2020-04-10T06:34:07Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUyNDUwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozNzo1MVrOGDyZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozNzo1MVrOGDyZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNDYxNg==", "bodyText": "You don't have to set all this information as metadata. ClientId, ClientSecret, Scope, TokenAPI, workflowExternalRef, callBackURL are not needed. plz remove them", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406624616", "createdAt": "2020-04-10T06:37:51Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUyNTg0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozODozNVrOGDyaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozODozNVrOGDyaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNDgxMQ==", "bodyText": "rename the variable name. don't use 1", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406624811", "createdAt": "2020-04-10T06:38:35Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow process.\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+            log.debug(\"response: \" + workflowDTO.toString());\n+        }\n+\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+\n+        String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n+\n+        try {\n+            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUyNzUyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozOToxN1rOGDybBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjozOToxN1rOGDybBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTAyOA==", "bodyText": "use the previous apiMgtDAO instead of creating a new variable", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625028", "createdAt": "2020-04-10T06:39:17Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow process.\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+            log.debug(\"response: \" + workflowDTO.toString());\n+        }\n+\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+\n+        String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n+\n+        try {\n+            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO1.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n+\n+            String apiName = workflow.getMetadata(\"ApiName\");\n+            String action = workflow.getMetadata(\"Action\");\n+            String providerName = workflow.getMetadata(\"ApiProvider\");\n+            String version = workflow.getMetadata(\"ApiVersion\");\n+            String invoker = workflow.getMetadata(\"Invoker\");\n+            String currentStatus = workflow.getMetadata(\"CurrentState\");\n+\n+            int tenantId = workflowDTO.getTenantId();\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUyOTYxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MDoyNlrOGDycKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjozMzo0MlrOGHxBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ==", "bodyText": "license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625321", "createdAt": "2020-04-10T06:40:26Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjU4OA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792588", "createdAt": "2020-04-19T02:05:36Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjM0OA==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796348", "createdAt": "2020-04-19T02:33:42Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzMDIxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MDozOVrOGDyccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NzowNlrOGLHfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw==", "bodyText": "class description", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625393", "createdAt": "2020-04-10T06:40:39Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjYzMA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792630", "createdAt": "2020-04-19T02:05:58Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDE4OQ==", "bodyText": "formatting issue.", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310189", "createdAt": "2020-04-24T05:47:06Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzMDc4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MTowMFrOGDycyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MTowMFrOGDycyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTQ4MA==", "bodyText": "format whole class and remove spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625480", "createdAt": "2020-04-10T06:41:00Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzMTQ3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MTozMlrOGDydSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MTozMlrOGDydSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTYwOA==", "bodyText": "no need to set this", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625608", "createdAt": "2020-04-10T06:41:32Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzNDQ5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MzowNFrOGDye6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0MzowNFrOGDye6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjAyNw==", "bodyText": "you don't have to set any metadata. Only set them if you need to get it from the complete() method. seems like any of the above are not needed", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626027", "createdAt": "2020-04-10T06:43:04Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzNjE1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0Mzo0NFrOGDyfvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNjoxN1rOGHwy9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjIzOA==", "bodyText": "remove +", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626238", "createdAt": "2020-04-10T06:43:44Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * Application table\n+     *\n+     * @param workFlowDTO object\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        ApiMgtDAO dao = ApiMgtDAO.getInstance();\n+        try {\n+            if (dao.getApplicationById(Integer.parseInt(workFlowDTO.getWorkflowReference())) != null) {\n+\n+                super.complete(workFlowDTO);\n+                log.info(\"Application Creation [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                        .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+                String status = null;\n+                if (WorkflowStatus.CREATED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_CREATED;\n+                } else if (WorkflowStatus.REJECTED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_REJECTED;\n+                } else if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_APPROVED;\n+                }\n+\n+                try {\n+                    dao.updateApplicationStatus(Integer.parseInt(workFlowDTO.getWorkflowReference()), status);\n+                } catch (APIManagementException e) {\n+                    String msg = \"Error occurred when updating the status of the Application creation \" + \"process\";\n+                    log.error(msg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjY5NA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792694", "createdAt": "2020-04-19T02:06:17Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * Application table\n+     *\n+     * @param workFlowDTO object\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        ApiMgtDAO dao = ApiMgtDAO.getInstance();\n+        try {\n+            if (dao.getApplicationById(Integer.parseInt(workFlowDTO.getWorkflowReference())) != null) {\n+\n+                super.complete(workFlowDTO);\n+                log.info(\"Application Creation [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                        .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+                String status = null;\n+                if (WorkflowStatus.CREATED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_CREATED;\n+                } else if (WorkflowStatus.REJECTED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_REJECTED;\n+                } else if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_APPROVED;\n+                }\n+\n+                try {\n+                    dao.updateApplicationStatus(Integer.parseInt(workFlowDTO.getWorkflowReference()), status);\n+                } catch (APIManagementException e) {\n+                    String msg = \"Error occurred when updating the status of the Application creation \" + \"process\";\n+                    log.error(msg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjIzOA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzUzNzkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0NDo0MFrOGDygtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0OTowM1rOGLHh9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng==", "bodyText": "License header, class description and format the whole class", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626486", "createdAt": "2020-04-10T06:44:40Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjcwNA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792704", "createdAt": "2020-04-19T02:06:35Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQwMA==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796400", "createdAt": "2020-04-19T02:33:59Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDkwMA==", "bodyText": "your haven't formatted the class .", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310900", "createdAt": "2020-04-24T05:49:03Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0MDI1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0NTo0M1rOGDyh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0NTo0M1rOGDyh-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjgwOA==", "bodyText": "metadata and properties are not needed.", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626808", "createdAt": "2020-04-10T06:45:43Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application registration Workflow..\");\n+        }\n+\n+        ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n+        Application application = appRegDTO.getApplication();\n+        String callBackURL = appRegDTO.getCallbackUrl();\n+        String applicationCallbackUrl = application.getCallbackUrl();\n+        String applicationDescription = application.getDescription();\n+\n+        String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n+                \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n+        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n+        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0MTUyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0NjozNFrOGDyiuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNjo1N1rOGHwzLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzAwMA==", "bodyText": "remove 'TODO Auto-generated method stub' and add a valid comment", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627000", "createdAt": "2020-04-10T06:46:34Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application registration Workflow..\");\n+        }\n+\n+        ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n+        Application application = appRegDTO.getApplication();\n+        String callBackURL = appRegDTO.getCallbackUrl();\n+        String applicationCallbackUrl = application.getCallbackUrl();\n+        String applicationDescription = application.getDescription();\n+\n+        String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n+                \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n+        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n+        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * AM_APPLICATION_KEY_MAPPING table\n+     *\n+     * @param workFlowDTO\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workFlowDTO);\n+        log.info(\"Application Registration [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+        if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+            try {\n+                generateKeysForApplication((ApplicationRegistrationWorkflowDTO) workFlowDTO);\n+            } catch (APIManagementException e) {\n+                String msg = \"Error occurred when updating the status of the Application Registration process\";\n+                log.error(msg, e);\n+                throw new WorkflowException(msg, e);\n+            }\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        // TODO Auto-generated method stub\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjc0OA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792748", "createdAt": "2020-04-19T02:06:57Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application registration Workflow..\");\n+        }\n+\n+        ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n+        Application application = appRegDTO.getApplication();\n+        String callBackURL = appRegDTO.getCallbackUrl();\n+        String applicationCallbackUrl = application.getCallbackUrl();\n+        String applicationDescription = application.getDescription();\n+\n+        String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n+                \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n+        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n+        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * AM_APPLICATION_KEY_MAPPING table\n+     *\n+     * @param workFlowDTO\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workFlowDTO);\n+        log.info(\"Application Registration [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+        if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+            try {\n+                generateKeysForApplication((ApplicationRegistrationWorkflowDTO) workFlowDTO);\n+            } catch (APIManagementException e) {\n+                String msg = \"Error occurred when updating the status of the Application Registration process\";\n+                log.error(msg, e);\n+                throw new WorkflowException(msg, e);\n+            }\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        // TODO Auto-generated method stub\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzAwMA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0MzMzOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0Nzo0MFrOGDyjxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjowNzoxNVrOGHwzSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzI2OA==", "bodyText": "comment out this section", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627268", "createdAt": "2020-04-10T06:47:40Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/pom.xml", "diffHunk": "@@ -223,6 +223,14 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <groupId>org.wso2.maven.plugins</groupId>\n+                <artifactId>swagger2cxf-maven-plugin</artifactId>\n+                <version>1.0-SNAPSHOT</version>\n+                <configuration>\n+                    <inputSpec>${project.basedir}/src/main/resources/admin-api.yaml</inputSpec>\n+                </configuration>\n+            </plugin>\n         </plugins>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjc3OQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792779", "createdAt": "2020-04-19T02:07:15Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/pom.xml", "diffHunk": "@@ -223,6 +223,14 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <groupId>org.wso2.maven.plugins</groupId>\n+                <artifactId>swagger2cxf-maven-plugin</artifactId>\n+                <version>1.0-SNAPSHOT</version>\n+                <configuration>\n+                    <inputSpec>${project.basedir}/src/main/resources/admin-api.yaml</inputSpec>\n+                </configuration>\n+            </plugin>\n         </plugins>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzI2OA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0NDE3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0ODowOVrOGDykRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0ODo0OVrOGLHhlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA==", "bodyText": "missing license header, class description. Also format the class", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627398", "createdAt": "2020-04-10T06:48:09Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjg5NQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792895", "createdAt": "2020-04-19T02:08:05Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQ2OA==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796468", "createdAt": "2020-04-19T02:34:33Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDgwNQ==", "bodyText": "your haven't formatted the class .", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310805", "createdAt": "2020-04-24T05:48:49Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0NTIwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0ODozM1rOGDyk0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0ODozM1rOGDyk0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzUzNw==", "bodyText": "remove properties and metadata since they are not needed", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627537", "createdAt": "2020-04-10T06:48:33Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class SubscriptionCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionCreationApprovalWorkflowExecutor.class);\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method is used to execute the workflow without giving a workflow response back to the caller to execute\n+     * some other task after completing the workflow\n+     *\n+     * @param workflowDTO - The WorkflowDTO which contains workflow contextual information related to the workflow.\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Subscription Creation Webservice Workflow.. \");\n+        }\n+\n+        SubscriptionWorkflowDTO subsWorkflowDTO = (SubscriptionWorkflowDTO) workflowDTO;\n+        String callBackURL = subsWorkflowDTO.getCallbackUrl();\n+\n+        String message=\"Approve API [\"+ subsWorkflowDTO.getApiName()+\" - \"+subsWorkflowDTO.getApiVersion()+\n+                \"] subscription creation request from subscriber - \"+subsWorkflowDTO.getSubscriber()+\n+                \" for the application - \"+subsWorkflowDTO.getApplicationName();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"apiName\", subsWorkflowDTO.getApiName());\n+        workflowDTO.setMetadata(\"apiVersion\", subsWorkflowDTO.getApiVersion());\n+        workflowDTO.setMetadata(\"apiContext\", subsWorkflowDTO.getApiContext());\n+        workflowDTO.setMetadata(\"apiProvider\", subsWorkflowDTO.getApiProvider());\n+        workflowDTO.setMetadata(\"apiSubscriber\", subsWorkflowDTO.getSubscriber());\n+        workflowDTO.setMetadata(\"applicationName\", subsWorkflowDTO.getApplicationName());\n+        workflowDTO.setMetadata(\"TierName\", subsWorkflowDTO.getTierName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", subsWorkflowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Subscription Creation\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU0ODE4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo0OTo1N1rOGDymaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0ODozN1rOGLHhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ==", "bodyText": "missing license header, class description. Also format the class", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627945", "createdAt": "2020-04-10T06:49:57Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkzMg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792932", "createdAt": "2020-04-19T02:08:30Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQ5Mw==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796493", "createdAt": "2020-04-19T02:34:50Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDcxNQ==", "bodyText": "your haven't formatted the class .", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310715", "createdAt": "2020-04-24T05:48:37Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU1MDQ0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1MToyMFrOGDynvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1MToyMFrOGDynvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyODI4NA==", "bodyText": "metadata and properties are not needed", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406628284", "createdAt": "2020-04-10T06:51:20Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.UserRegistrationConfigDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.SelfSignUpUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.util.List;\n+\n+public class UserSignUpApprovalWorkflowExecutor extends UserSignUpWorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(UserSignUpWSWorkflowExecutor.class);\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_USER_SIGNUP;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException  {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing User SignUp Webservice Workflow for \" + workflowDTO.getWorkflowReference());\n+        }\n+\n+\n+        String callBackURL = workflowDTO.getCallbackUrl();\n+        String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(workflowDTO.getWorkflowReference());\n+\n+        String message=\"Approve APIStore signup request done by \"+tenantAwareUserName  +\" from the tenant domain \"+workflowDTO.getTenantDomain();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"TenantUserName\", tenantAwareUserName);\n+        workflowDTO.setMetadata(\"TenantDomain\", workflowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", workflowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"User Self Sign Up\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU1NjM5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NDozM1rOGDyrWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NDozM1rOGDyrWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTIwOA==", "bodyText": "why catch a NPE here? fromWorkflowsToInfoDTO() method is not throwing it either. please remove this", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629208", "createdAt": "2020-04-10T06:54:33Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU1NjcxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NDo0NVrOGDyrjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MDo0MVrOGLHkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg==", "bodyText": "format this whole method", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629262", "createdAt": "2020-04-10T06:54:45Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzAzOA==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793038", "createdAt": "2020-04-19T02:09:06Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTQ4NQ==", "bodyText": "your haven't formatted the method . see that there are no spaces between the '='", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414311485", "createdAt": "2020-04-24T05:50:41Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU1OTMxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NjoxNVrOGDytKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MToyNlrOGLHljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ==", "bodyText": "format whole method. remove unnecessary spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629675", "createdAt": "2020-04-10T06:56:15Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzIyOQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793229", "createdAt": "2020-04-19T02:10:32Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTgyMA==", "bodyText": "your haven't formatted the class .", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414311820", "createdAt": "2020-04-24T05:51:26Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU1OTU1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NjoyN1rOGDytWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NjoyN1rOGDytWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTcyMA==", "bodyText": "why???", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629720", "createdAt": "2020-04-10T06:56:27Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;\n+        offset = offset != null ? offset : RestApiConstants.PAGINATION_OFFSET_DEFAULT;\n+\n+\n+        String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+        WorkflowListDTO workflowListDTO;\n+        try {\n+            Workflow[] workflows;\n+            String status=\"CREATED\";\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n+\n+\n+            try {\n+                workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n+                WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n+                        workflows.length);\n+                return Response.ok().entity(workflowListDTO).build();\n+            }\n+            catch( NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU2MTMxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1NzoyNVrOGDyuYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjozNToyMFrOGHxCJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw==", "bodyText": "License header missing", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629987", "createdAt": "2020-04-10T06:57:25Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzMzMQ==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793331", "createdAt": "2020-04-19T02:11:12Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjU4MA==", "bodyText": "changed year with 68b7419", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796580", "createdAt": "2020-04-19T02:35:20Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU2MjcxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1Nzo1NFrOGDyvHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjoxMTozOFrOGHw1qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDE3NA==", "bodyText": "class description missing. also format the whole class", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406630174", "createdAt": "2020-04-10T06:57:54Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n+\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowListDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WorkflowMappingUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzM4Ng==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793386", "createdAt": "2020-04-19T02:11:38Z", "author": {"login": "SahanHerath"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n+\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowListDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WorkflowMappingUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDE3NA=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU2MzEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1ODowNlrOGDyvZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1ODowNlrOGDyvZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDI0Ng==", "bodyText": "remove unnecessary spaces", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406630246", "createdAt": "2020-04-10T06:58:06Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n+\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowListDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WorkflowMappingUtil {\n+\n+    private static Object WorkflowTypeEnum;\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU3MDUwOnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/workflowextensions/default-workflow-extensions.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzowMTo0OFrOGDyzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MjowNVrOGLHmlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTMyNg==", "bodyText": "lets add our new executors instead of *WSWorkflowExecutor comment it out", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406631326", "createdAt": "2020-04-10T07:01:48Z", "author": {"login": "chamilaadhi"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/workflowextensions/default-workflow-extensions.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<WorkFlowExtensions>\n+    <ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationSimpleWorkflowExecutor\"/>\n+    <!--ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationWSWorkflowExecutor\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mzc3Mg==", "bodyText": "fixed with e00fe40", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793772", "createdAt": "2020-04-19T02:14:15Z", "author": {"login": "SahanHerath"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/workflowextensions/default-workflow-extensions.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<WorkFlowExtensions>\n+    <ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationSimpleWorkflowExecutor\"/>\n+    <!--ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationWSWorkflowExecutor\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTMyNg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMjA4NQ==", "bodyText": "still WSWorkflowExecutor are here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414312085", "createdAt": "2020-04-24T05:52:05Z", "author": {"login": "chamilaadhi"}, "path": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/workflowextensions/default-workflow-extensions.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<WorkFlowExtensions>\n+    <ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationSimpleWorkflowExecutor\"/>\n+    <!--ApplicationCreation executor=\"org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationWSWorkflowExecutor\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTMyNg=="}, "originalCommit": {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMxMTg2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozOToxNFrOGLHTwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozOToxNFrOGLHTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzI2NQ==", "bodyText": "formatting issue", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307265", "createdAt": "2020-04-24T05:39:14Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,38 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3719d98f3d2faba218147e15535025aa6169e371"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMxMzA0OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozOTozOVrOGLHUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozOTozOVrOGLHUWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzQxOQ==", "bodyText": "add a description for each parameter", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307419", "createdAt": "2020-04-24T05:39:39Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,38 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3719d98f3d2faba218147e15535025aa6169e371"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMxNzI5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0MTowN1rOGLHWiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0MTowN1rOGLHWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzk3OQ==", "bodyText": "this method is not formatted", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307979", "createdAt": "2020-04-24T05:41:07Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14620,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3719d98f3d2faba218147e15535025aa6169e371"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTM0MTAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/workflowextensions/default-workflow-extensions.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MDoxN1rOGLHjog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MDoxN1rOGLHjog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTMzMA==", "bodyText": "remove WS commented stuff", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414311330", "createdAt": "2020-04-24T05:50:17Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/workflowextensions/default-workflow-extensions.xml", "diffHunk": "@@ -1,33 +1,38 @@\n <WorkFlowExtensions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3719d98f3d2faba218147e15535025aa6169e371"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDA4MjgwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxODoxMFrOGNB0zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxODoxMFrOGNB0zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNDU3NA==", "bodyText": "lets not format the yaml file.", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r416314574", "createdAt": "2020-04-28T04:18:10Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml", "diffHunk": "@@ -2677,19 +2811,19 @@ paths:\n           schema:\n             $ref: '#/definitions/Error'\n \n-######################################################\n-# The \"Category Collection\" resource API\n-######################################################\n+  ######################################################\n+  # The \"Category Collection\" resource API\n+  ######################################################", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b48a01776745e4804aee0554f67dde112e0ccdd"}, "originalPosition": 943}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDA4MzIyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxODoyOFrOGNB1Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDoxODoyOFrOGNB1Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMxNDY0Ng==", "bodyText": "any reason for adding these three? I think this is added because u formated the yaml", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r416314646", "createdAt": "2020-04-28T04:18:28Z", "author": {"login": "chamilaadhi"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml", "diffHunk": "@@ -23,6 +23,9 @@\n             <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.ExportApi\"/>\n             <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.ImportApi\"/>\n             <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.MonetizationApi\"/>\n+            <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.PoliciesApi\"/>\n+            <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.TenantInfoApi\"/>\n+            <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.ThrottlingApi\"/>\n             <bean class=\"org.wso2.carbon.apimgt.rest.api.admin.WorkflowsApi\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b48a01776745e4804aee0554f67dde112e0ccdd"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2815, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}