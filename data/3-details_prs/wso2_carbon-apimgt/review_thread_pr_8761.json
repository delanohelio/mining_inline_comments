{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDU4MDQ4", "number": 8761, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0MDo0MlrOEHbOTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0ODozMFrOEHbSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjIxNTE4OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0MDo0MlrOGmxuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo1OTo0NVrOGpUpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzc2Ng==", "bodyText": "shouldn't the subscription call happen if api.lifeCycleStatus.toLowerCase() !== 'prototyped') ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r443313766", "createdAt": "2020-06-22T04:40:42Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -124,39 +124,52 @@ function TryOutController(props) {\n         let keys;\n         let selectedKeyTypes = 'PRODUCTION';\n         let accessToken;\n-        const promiseSubscriptions = restApi.getSubscriptions(apiID);\n-        promiseSubscriptions.then((subscriptionsResponse) => {\n-            if (subscriptionsResponse !== null) {\n-                subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n-                || item.status === 'PROD_ONLY_BLOCKED');\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a06a03ff583356d6fa37765615c955b4610e4a0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MzA0MQ==", "bodyText": "fixed issues", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r445983041", "createdAt": "2020-06-26T05:59:45Z", "author": {"login": "hasuniea"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -124,39 +124,52 @@ function TryOutController(props) {\n         let keys;\n         let selectedKeyTypes = 'PRODUCTION';\n         let accessToken;\n-        const promiseSubscriptions = restApi.getSubscriptions(apiID);\n-        promiseSubscriptions.then((subscriptionsResponse) => {\n-            if (subscriptionsResponse !== null) {\n-                subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n-                || item.status === 'PROD_ONLY_BLOCKED');\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzc2Ng=="}, "originalCommit": {"oid": "5a06a03ff583356d6fa37765615c955b4610e4a0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjIyNTE0OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDo0ODozMFrOGmx0Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowMDowNVrOGpUprw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTI5NQ==", "bodyText": "shouldn't the subscription call happen if api.lifeCycleStatus.toLowerCase() !== 'prototyped') ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r443315295", "createdAt": "2020-06-22T04:48:30Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -169,77 +182,68 @@ function TryOutController(props) {\n                     }\n                     setSelectedKeyType(selectedKeyType, false);\n                 }\n-            } else {\n-                setSelectedApplication(newSelectedApplication);\n-                setSubscriptions(subscriptionsList);\n-                setKeys(keys);\n-                setSelectedEnvironment(selectedEnvironment, false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(accessToken);\n-                } else {\n-                    setSandboxAccessToken(accessToken);\n-                }\n-                setSelectedKeyType(selectedKeyType, false);\n-            }\n-        }).catch((error) => {\n-            if (process.env.NODE_ENV !== 'production') {\n-                console.error(error);\n-            }\n-            const { status } = error;\n-            if (status === 404) {\n-                setNotFound(true);\n-            }\n-        });\n-        const promisedKeyManagers = restApi.getKeyManagers();\n-        promisedKeyManagers\n-            .then((response) => {\n-                const responseKeyManagerList = [];\n-                response.body.list.map((item) => responseKeyManagerList.push(item));\n-                setKeyManagers(responseKeyManagerList);\n-            })\n-            .catch((error) => {\n+            }).catch((error) => {\n                 if (process.env.NODE_ENV !== 'production') {\n-                    console.log(error);\n+                    console.error(error);\n                 }\n                 const { status } = error;\n                 if (status === 404) {\n                     setNotFound(true);\n                 }\n             });\n+            const promisedKeyManagers = restApi.getKeyManagers();\n+            promisedKeyManagers\n+                .then((response) => {\n+                    const responseKeyManagerList = [];\n+                    response.body.list.map((item) => responseKeyManagerList.push(item));\n+                    setKeyManagers(responseKeyManagerList);\n+                })\n+                .catch((error) => {\n+                    if (process.env.NODE_ENV !== 'production') {\n+                        console.log(error);\n+                    }\n+                    const { status } = error;\n+                    if (status === 404) {\n+                        setNotFound(true);\n+                    }\n+                });\n+        }\n     }, []);\n \n \n     /**\n      * Generate access token\n      * */\n     function generateAccessToken() {\n-        setIsUpdating(true);\n-        const applicationPromise = Application.get(selectedApplication);\n-        applicationPromise\n-            .then((application) => application.generateToken(\n-                selectedKeyManager,\n-                selectedKeyType,\n-                3600,\n-                scopes,\n-            ))\n-            .then((response) => {\n-                console.log('token generated successfully ' + response);\n-                setShowToken(false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(response.accessToken);\n-                } else {\n-                    setSandboxAccessToken(response.accessToken);\n-                }\n-                setIsUpdating(false);\n-            })\n-            .catch((error) => {\n-                console.error(error);\n-                const { status } = error;\n-                if (status === 404) {\n-                    setNotFound(true);\n-                }\n-                setIsUpdating(false);\n-            });\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a06a03ff583356d6fa37765615c955b4610e4a0"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MzE1MQ==", "bodyText": "fixed issue.", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r445983151", "createdAt": "2020-06-26T06:00:05Z", "author": {"login": "hasuniea"}, "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -169,77 +182,68 @@ function TryOutController(props) {\n                     }\n                     setSelectedKeyType(selectedKeyType, false);\n                 }\n-            } else {\n-                setSelectedApplication(newSelectedApplication);\n-                setSubscriptions(subscriptionsList);\n-                setKeys(keys);\n-                setSelectedEnvironment(selectedEnvironment, false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(accessToken);\n-                } else {\n-                    setSandboxAccessToken(accessToken);\n-                }\n-                setSelectedKeyType(selectedKeyType, false);\n-            }\n-        }).catch((error) => {\n-            if (process.env.NODE_ENV !== 'production') {\n-                console.error(error);\n-            }\n-            const { status } = error;\n-            if (status === 404) {\n-                setNotFound(true);\n-            }\n-        });\n-        const promisedKeyManagers = restApi.getKeyManagers();\n-        promisedKeyManagers\n-            .then((response) => {\n-                const responseKeyManagerList = [];\n-                response.body.list.map((item) => responseKeyManagerList.push(item));\n-                setKeyManagers(responseKeyManagerList);\n-            })\n-            .catch((error) => {\n+            }).catch((error) => {\n                 if (process.env.NODE_ENV !== 'production') {\n-                    console.log(error);\n+                    console.error(error);\n                 }\n                 const { status } = error;\n                 if (status === 404) {\n                     setNotFound(true);\n                 }\n             });\n+            const promisedKeyManagers = restApi.getKeyManagers();\n+            promisedKeyManagers\n+                .then((response) => {\n+                    const responseKeyManagerList = [];\n+                    response.body.list.map((item) => responseKeyManagerList.push(item));\n+                    setKeyManagers(responseKeyManagerList);\n+                })\n+                .catch((error) => {\n+                    if (process.env.NODE_ENV !== 'production') {\n+                        console.log(error);\n+                    }\n+                    const { status } = error;\n+                    if (status === 404) {\n+                        setNotFound(true);\n+                    }\n+                });\n+        }\n     }, []);\n \n \n     /**\n      * Generate access token\n      * */\n     function generateAccessToken() {\n-        setIsUpdating(true);\n-        const applicationPromise = Application.get(selectedApplication);\n-        applicationPromise\n-            .then((application) => application.generateToken(\n-                selectedKeyManager,\n-                selectedKeyType,\n-                3600,\n-                scopes,\n-            ))\n-            .then((response) => {\n-                console.log('token generated successfully ' + response);\n-                setShowToken(false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(response.accessToken);\n-                } else {\n-                    setSandboxAccessToken(response.accessToken);\n-                }\n-                setIsUpdating(false);\n-            })\n-            .catch((error) => {\n-                console.error(error);\n-                const { status } = error;\n-                if (status === 404) {\n-                    setNotFound(true);\n-                }\n-                setIsUpdating(false);\n-            });\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTI5NQ=="}, "originalCommit": {"oid": "5a06a03ff583356d6fa37765615c955b4610e4a0"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3277, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}