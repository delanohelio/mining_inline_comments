{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NjM2MDc3", "number": 8475, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNTo0MFrOD75L2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo0MjowM1rOFNJ_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5NDk4OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/web.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNTo0MFrOGUf5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNTo0MFrOGUf5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzMzMg==", "bodyText": "Please fix the license header.", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r424147332", "createdAt": "2020-05-13T03:05:40Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ /*\n+  ~  * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e46c9cd49a64617db203ec5bbe135ab6db325b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5NTk1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNjoxNVrOGUf6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNjoxNVrOGUf6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzQ2NQ==", "bodyText": "Add license header", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r424147465", "createdAt": "2020-05-13T03:06:15Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/WEB-INF/beans.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e46c9cd49a64617db203ec5bbe135ab6db325b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5NjE2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/META-INF/webapp-classloading.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNjoyN1rOGUf6Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowNjoyN1rOGUf6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzQ5OA==", "bodyText": "Please fix the license header.", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r424147498", "createdAt": "2020-05-13T03:06:27Z", "author": {"login": "malinthaprasan"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/webapp/META-INF/webapp-classloading.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+\n+<!--\n+  ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e46c9cd49a64617db203ec5bbe135ab6db325b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MjAwNDkwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/.swagger-codegen-ignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwNDoxNzo0NVrOIQ_8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwNTozNzoxOVrOIhTW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY5NTY4Mg==", "bodyText": "is this an autogenerated file? if not don't we need a new line eof?", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r554695682", "createdAt": "2021-01-11T04:17:45Z", "author": {"login": "ruwiniwj"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/.swagger-codegen-ignore", "diffHunk": "@@ -0,0 +1,28 @@\n+# Swagger Codegen Ignore\n+# Generated by swagger-codegen https://github.com/swagger-api/swagger-codegen\n+\n+# Use this file to prevent files from being overwritten by the generator.\n+# The patterns follow closely to .gitignore or .dockerignore.\n+\n+# As an example, the C# client generator defines ApiClient.cs.\n+# You can make changes and tell Swagger Codgen to ignore just this file by uncommenting the following line:\n+#ApiClient.cs\n+\n+# You can match any string of characters against a directory, file or extension with a single asterisk (*):\n+#foo/*/qux\n+# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux\n+\n+# You can recursively match patterns against a directory, file or extension with a double asterisk (**):\n+#foo/**/qux\n+# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux\n+\n+# You can also negate patterns with an exclamation (!).\n+# For example, you can ignore all files in a docs folder with the file extension .md:\n+#docs/*.md\n+# Then explicitly reverse the ignore rule for a single file:\n+#!docs/README.md\n+\n+**/RestApplication.java\n+**/test/**\n+swagger.json\n+pom.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MTA3Nw==", "bodyText": "This file has been removed in the current master branch.\nhttps://github.com/wso2/carbon-apimgt/tree/master/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r571791077", "createdAt": "2021-02-08T05:37:19Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/.swagger-codegen-ignore", "diffHunk": "@@ -0,0 +1,28 @@\n+# Swagger Codegen Ignore\n+# Generated by swagger-codegen https://github.com/swagger-api/swagger-codegen\n+\n+# Use this file to prevent files from being overwritten by the generator.\n+# The patterns follow closely to .gitignore or .dockerignore.\n+\n+# As an example, the C# client generator defines ApiClient.cs.\n+# You can make changes and tell Swagger Codgen to ignore just this file by uncommenting the following line:\n+#ApiClient.cs\n+\n+# You can match any string of characters against a directory, file or extension with a single asterisk (*):\n+#foo/*/qux\n+# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux\n+\n+# You can recursively match patterns against a directory, file or extension with a double asterisk (**):\n+#foo/**/qux\n+# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux\n+\n+# You can also negate patterns with an exclamation (!).\n+# For example, you can ignore all files in a docs folder with the file extension .md:\n+#docs/*.md\n+# Then explicitly reverse the ignore rule for a single file:\n+#!docs/README.md\n+\n+**/RestApplication.java\n+**/test/**\n+swagger.json\n+pom.xml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY5NTY4Mg=="}, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Mjg2MDM1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/ApiCategoriesApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwNzozMTo0N1rOIRIq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwNTozODowNVrOIhTX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDgzODczOQ==", "bodyText": "Shall we change 'api' as 'API' and add a space next to ':'?\n\"No API category with the given category ID exists: \"", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r554838739", "createdAt": "2021-01-11T07:31:47Z", "author": {"login": "Meruja"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/ApiCategoriesApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.APIAdmin;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.APICategory;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.ApiCategoriesApiService;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.dto.APICategoryDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.dto.APICategoryListDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.utils.mappings.APICategoryMappingUtil;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+\n+public class ApiCategoriesApiServiceImpl implements ApiCategoriesApiService {\n+    private static final Log log = LogFactory.getLog(ApiCategoriesApiServiceImpl.class);\n+\n+    @Override\n+    public Response apiCategoriesGet(MessageContext messageContext) {\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+            List<APICategory> categoryList = apiAdmin.getAllAPICategoriesOfTenant(tenantID);\n+            APICategoryListDTO categoryListDTO = APICategoryMappingUtil.fromCategoryListToCategoryListDTO(categoryList);\n+            return Response.ok().entity(categoryListDTO).build();\n+        } catch (APIManagementException e) {\n+            String errorMessage = \"Error while retrieving API categories\";\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Response apiCategoriesPost(APICategoryDTO body, MessageContext messageContext) {\n+        APICategory apiCategory = null;\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String userName = RestApiUtil.getLoggedInUsername();\n+            apiCategory = APICategoryMappingUtil.fromCategoryDTOToCategory(body);\n+            APICategoryDTO categoryDTO = APICategoryMappingUtil.\n+                    fromCategoryToCategoryDTO(apiAdmin.addCategory(apiCategory, userName));\n+            URI location = new URI(RestApiConstants.RESOURCE_PATH_CATEGORY + \"/\" + categoryDTO.getId());\n+            return Response.created(location).entity(categoryDTO).build();\n+        } catch (APIManagementException | URISyntaxException e) {\n+            String errorMessage = \"Error while adding new API Category '\" + body.getName() + \"' - \" + e.getMessage();\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Response apiCategoriesApiCategoryIdPut(String apiCategoryId, APICategoryDTO body,\n+                                                  MessageContext messageContext) {\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String userName = RestApiUtil.getLoggedInUsername();\n+            String tenantDomain = MultitenantUtils.getTenantDomain(userName);\n+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+            APICategory apiCategoryToUpdate = APICategoryMappingUtil.fromCategoryDTOToCategory(body);\n+            APICategory apiCategoryOriginal = apiAdmin.getAPICategoryByID(apiCategoryId);\n+            if (apiCategoryOriginal == null) {\n+                String errorMsg = \"No api category with the given category ID exists :\" + apiCategoryId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MTM1Mw==", "bodyText": "Fixed with f704b66", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r571791353", "createdAt": "2021-02-08T05:38:05Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/ApiCategoriesApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.APIAdmin;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.APICategory;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.ApiCategoriesApiService;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.dto.APICategoryDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.dto.APICategoryListDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.utils.mappings.APICategoryMappingUtil;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+\n+public class ApiCategoriesApiServiceImpl implements ApiCategoriesApiService {\n+    private static final Log log = LogFactory.getLog(ApiCategoriesApiServiceImpl.class);\n+\n+    @Override\n+    public Response apiCategoriesGet(MessageContext messageContext) {\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+            List<APICategory> categoryList = apiAdmin.getAllAPICategoriesOfTenant(tenantID);\n+            APICategoryListDTO categoryListDTO = APICategoryMappingUtil.fromCategoryListToCategoryListDTO(categoryList);\n+            return Response.ok().entity(categoryListDTO).build();\n+        } catch (APIManagementException e) {\n+            String errorMessage = \"Error while retrieving API categories\";\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Response apiCategoriesPost(APICategoryDTO body, MessageContext messageContext) {\n+        APICategory apiCategory = null;\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String userName = RestApiUtil.getLoggedInUsername();\n+            apiCategory = APICategoryMappingUtil.fromCategoryDTOToCategory(body);\n+            APICategoryDTO categoryDTO = APICategoryMappingUtil.\n+                    fromCategoryToCategoryDTO(apiAdmin.addCategory(apiCategory, userName));\n+            URI location = new URI(RestApiConstants.RESOURCE_PATH_CATEGORY + \"/\" + categoryDTO.getId());\n+            return Response.created(location).entity(categoryDTO).build();\n+        } catch (APIManagementException | URISyntaxException e) {\n+            String errorMessage = \"Error while adding new API Category '\" + body.getName() + \"' - \" + e.getMessage();\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Response apiCategoriesApiCategoryIdPut(String apiCategoryId, APICategoryDTO body,\n+                                                  MessageContext messageContext) {\n+        try {\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            String userName = RestApiUtil.getLoggedInUsername();\n+            String tenantDomain = MultitenantUtils.getTenantDomain(userName);\n+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+            APICategory apiCategoryToUpdate = APICategoryMappingUtil.fromCategoryDTOToCategory(body);\n+            APICategory apiCategoryOriginal = apiAdmin.getAPICategoryByID(apiCategoryId);\n+            if (apiCategoryOriginal == null) {\n+                String errorMsg = \"No api category with the given category ID exists :\" + apiCategoryId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDgzODczOQ=="}, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MzM4MjE3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/LabelsApiServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTozODozN1rOIRNojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwNTozOTowN1rOIhTZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyMDA3OQ==", "bodyText": "Shall we remove the wildcard imports?", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r554920079", "createdAt": "2021-01-11T09:38:37Z", "author": {"login": "Chamindu36"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/LabelsApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.APIAdmin;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.Label;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MTY2OQ==", "bodyText": "Fixed with 5f80950", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r571791669", "createdAt": "2021-02-08T05:39:07Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/impl/LabelsApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.api.APIAdmin;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.Label;\n+import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.rest.api.admin.v1.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyMDA3OQ=="}, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MzM5NDAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/FileBasedApplicationImportExportManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo0MjowM1rOIRNvuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwNTozOToxNlrOIhTZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyMTkxNQ==", "bodyText": "Shall we remove the wildcard imports here?", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r554921915", "createdAt": "2021-01-11T09:42:03Z", "author": {"login": "Chamindu36"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/FileBasedApplicationImportExportManager.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIConsumer;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.api.model.SubscribedAPI;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MTcwNw==", "bodyText": "Fixed with 5f80950", "url": "https://github.com/wso2/carbon-apimgt/pull/8475#discussion_r571791707", "createdAt": "2021-02-08T05:39:16Z", "author": {"login": "hisanhunais"}, "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/FileBasedApplicationImportExportManager.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIConsumer;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.api.model.SubscribedAPI;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyMTkxNQ=="}, "originalCommit": {"oid": "c82bd24ad088b49fd41b963c1aa1c878339f6837"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}