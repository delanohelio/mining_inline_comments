{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODcwNTU1", "number": 8714, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzozMzoyNlrOEEktJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToyMzozMFrOEE_jrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjMxMTQxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzozMzoyNlrOGiR0dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzozMzoyNlrOGiR0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NjcyNA==", "bodyText": "remove unnecessary new lines", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r438596724", "createdAt": "2020-06-11T07:33:26Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e80367f868086ecccda279bcc9de96c270c3cb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjMxNjY5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzozNTowM1rOGiR3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzozNTowM1rOGiR3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NzU2Mg==", "bodyText": "Catching Exception class is  a bad practice.", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r438597562", "createdAt": "2020-06-11T07:35:03Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e80367f868086ecccda279bcc9de96c270c3cb"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY3NjA1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/FieldComplexityCalculatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxMTo1NVrOGi88eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxMTo1NVrOGi88eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwMzI5MA==", "bodyText": "After logging should we continue? shouln't we throw an excpetion?", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439303290", "createdAt": "2020-06-12T09:11:55Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/FieldComplexityCalculatorImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.FieldComplexityEnvironment;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.synapse.MessageContext;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+public class FieldComplexityCalculatorImpl implements FieldComplexityCalculator {\n+    private static final Log log = LogFactory.getLog(FieldComplexityCalculatorImpl.class);\n+    JSONParser jsonParser = new JSONParser();\n+    JSONObject policyDefinition;\n+\n+    public FieldComplexityCalculatorImpl(MessageContext messageContext) {\n+        try {\n+            String graphQLAccessControlPolicy = (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject jsonObject = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            policyDefinition = (JSONObject) jsonObject.get(APIConstants.QUERY_ANALYSIS_COMPLEXITY);\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY4MTU1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxMzozNFrOGi8_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxMzozNFrOGi8_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNDEzOQ==", "bodyText": "add javadoc comment for the class", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439304139", "createdAt": "2020-06-12T09:13:34Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY4MzM5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNDoxMFrOGi9A7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNDoxMFrOGi9A7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNDQzMQ==", "bodyText": "format code", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439304431", "createdAt": "2020-06-12T09:14:10Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5MTA3OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNjo0MVrOGi9FpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNjo0MVrOGi9FpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNTYzNw==", "bodyText": "remove newline", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439305637", "createdAt": "2020-06-12T09:16:41Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if the query depth does not exceed the maximum value or false, if query depth exceeds the maximum\n+     */\n+    private boolean analyseQueryDepth(MessageContext messageContext, String payload) {\n+        int maxQueryDepth = getMaxQueryDepth(messageContext);\n+\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5MTc1OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNjo1NFrOGi9GFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNjo1NFrOGi9GFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNTc1MA==", "bodyText": "remove newline", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439305750", "createdAt": "2020-06-12T09:16:54Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if the query depth does not exceed the maximum value or false, if query depth exceeds the maximum\n+     */\n+    private boolean analyseQueryDepth(MessageContext messageContext, String payload) {\n+        int maxQueryDepth = getMaxQueryDepth(messageContext);\n+\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5NjAwOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxODoyMFrOGi9IzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxODoyMFrOGi9IzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNjQ0NA==", "bodyText": "no need to check for isDebugEnabled here since there is no string concatenation", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439306444", "createdAt": "2020-06-12T09:18:20Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if the query depth does not exceed the maximum value or false, if query depth exceeds the maximum\n+     */\n+    private boolean analyseQueryDepth(MessageContext messageContext, String payload) {\n+        int maxQueryDepth = getMaxQueryDepth(messageContext);\n+\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if query complexity does not exceed the maximum or false, if query complexity exceeds the maximum\n+     */\n+    private boolean analyseQueryComplexity(MessageContext messageContext, String payload) {\n+        FieldComplexityCalculator fieldComplexityCalculator = new FieldComplexityCalculatorImpl(messageContext);\n+        int maxQueryComplexity = getMaxQueryComplexity(messageContext);\n+\n+        if (maxQueryComplexity > 0) {\n+            MaxQueryComplexityInstrumentation maxQueryComplexityInstrumentation =\n+                    new MaxQueryComplexityInstrumentation(maxQueryComplexity, fieldComplexityCalculator);\n+            GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryComplexityInstrumentation).build();\n+\n+            try {\n+                ExecutionResult executionResult = runtime.execute(payload);\n+                List<GraphQLError> errors = executionResult.getErrors();\n+                if (errors.size() > 0) {\n+                    List<String> errorList = new ArrayList<>();\n+                    for (GraphQLError error : errors) {\n+                        errorList.add(error.getMessage());\n+                    }\n+\n+                    // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                    ListIterator<String> iterator = errorList.listIterator();\n+                    while (iterator.hasNext()) {\n+                        if (iterator.next().contains(\"non-nullable\")) {\n+                            iterator.remove();\n+                        }\n+                    }\n+\n+                    if (errorList.size() == 0) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Maximum query complexity was not exceeded\");\n+                        }\n+                        return true;\n+                    } else {\n+                        log.error(errorList);\n+                        errorList.clear();\n+                        errorList.add(\"maximum query complexity exceeded\");\n+                    }\n+\n+                    handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX, messageContext,\n+                            APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX_MESSAGE, errorList.toString());\n+                    return false;\n+                }\n+                if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5ODI5OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxOTowMVrOGi9KNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxOTowMVrOGi9KNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNjgwNQ==", "bodyText": "Do not catch Exception", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439306805", "createdAt": "2020-06-12T09:19:01Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if the query depth does not exceed the maximum value or false, if query depth exceeds the maximum\n+     */\n+    private boolean analyseQueryDepth(MessageContext messageContext, String payload) {\n+        int maxQueryDepth = getMaxQueryDepth(messageContext);\n+\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if query complexity does not exceed the maximum or false, if query complexity exceeds the maximum\n+     */\n+    private boolean analyseQueryComplexity(MessageContext messageContext, String payload) {\n+        FieldComplexityCalculator fieldComplexityCalculator = new FieldComplexityCalculatorImpl(messageContext);\n+        int maxQueryComplexity = getMaxQueryComplexity(messageContext);\n+\n+        if (maxQueryComplexity > 0) {\n+            MaxQueryComplexityInstrumentation maxQueryComplexityInstrumentation =\n+                    new MaxQueryComplexityInstrumentation(maxQueryComplexity, fieldComplexityCalculator);\n+            GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryComplexityInstrumentation).build();\n+\n+            try {\n+                ExecutionResult executionResult = runtime.execute(payload);\n+                List<GraphQLError> errors = executionResult.getErrors();\n+                if (errors.size() > 0) {\n+                    List<String> errorList = new ArrayList<>();\n+                    for (GraphQLError error : errors) {\n+                        errorList.add(error.getMessage());\n+                    }\n+\n+                    // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                    ListIterator<String> iterator = errorList.listIterator();\n+                    while (iterator.hasNext()) {\n+                        if (iterator.next().contains(\"non-nullable\")) {\n+                            iterator.remove();\n+                        }\n+                    }\n+\n+                    if (errorList.size() == 0) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Maximum query complexity was not exceeded\");\n+                        }\n+                        return true;\n+                    } else {\n+                        log.error(errorList);\n+                        errorList.clear();\n+                        errorList.add(\"maximum query complexity exceeded\");\n+                    }\n+\n+                    handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX, messageContext,\n+                            APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX_MESSAGE, errorList.toString());\n+                    return false;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Maximum query complexity was not exceeded\");\n+                }\n+                return true;\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5OTUxOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxOToyNVrOGi9K9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxOToyNVrOGi9K9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNjk5OQ==", "bodyText": "Shouldn't we break the flow here by throwing an exception", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439306999", "createdAt": "2020-06-12T09:19:25Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param messageContext   message context of the request\n+     * @return maximum query depth value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int  getMaxQueryDepth(MessageContext messageContext) {\n+        Object maxQueryDepth = messageContext.getProperty(APIConstants.MAXIMUM_QUERY_DEPTH);\n+        if (maxQueryDepth != null) {\n+            return ((Integer) maxQueryDepth).intValue();\n+        } else {\n+            log.error(\"Maximum query depth was not allocated\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true, if the query is not blocked or false, if the query is blocked\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        try {\n+            if (analyseQueryDepth(messageContext, payload) &&\n+                    analyseQueryComplexity(messageContext, payload)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if the query depth does not exceed the maximum value or false, if query depth exceeds the maximum\n+     */\n+    private boolean analyseQueryDepth(MessageContext messageContext, String payload) {\n+        int maxQueryDepth = getMaxQueryDepth(messageContext);\n+\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @return true, if query complexity does not exceed the maximum or false, if query complexity exceeds the maximum\n+     */\n+    private boolean analyseQueryComplexity(MessageContext messageContext, String payload) {\n+        FieldComplexityCalculator fieldComplexityCalculator = new FieldComplexityCalculatorImpl(messageContext);\n+        int maxQueryComplexity = getMaxQueryComplexity(messageContext);\n+\n+        if (maxQueryComplexity > 0) {\n+            MaxQueryComplexityInstrumentation maxQueryComplexityInstrumentation =\n+                    new MaxQueryComplexityInstrumentation(maxQueryComplexity, fieldComplexityCalculator);\n+            GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryComplexityInstrumentation).build();\n+\n+            try {\n+                ExecutionResult executionResult = runtime.execute(payload);\n+                List<GraphQLError> errors = executionResult.getErrors();\n+                if (errors.size() > 0) {\n+                    List<String> errorList = new ArrayList<>();\n+                    for (GraphQLError error : errors) {\n+                        errorList.add(error.getMessage());\n+                    }\n+\n+                    // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                    ListIterator<String> iterator = errorList.listIterator();\n+                    while (iterator.hasNext()) {\n+                        if (iterator.next().contains(\"non-nullable\")) {\n+                            iterator.remove();\n+                        }\n+                    }\n+\n+                    if (errorList.size() == 0) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Maximum query complexity was not exceeded\");\n+                        }\n+                        return true;\n+                    } else {\n+                        log.error(errorList);\n+                        errorList.clear();\n+                        errorList.add(\"maximum query complexity exceeded\");\n+                    }\n+\n+                    handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX, messageContext,\n+                            APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX_MESSAGE, errorList.toString());\n+                    return false;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Maximum query complexity was not exceeded\");\n+                }\n+                return true;\n+            } catch (Exception e) {\n+                log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjcxMDg2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToyMzozMFrOGi9SSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToyMzozMFrOGi9SSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwODg3Mg==", "bodyText": "use java 8 try with resources", "url": "https://github.com/wso2/carbon-apimgt/pull/8714#discussion_r439308872", "createdAt": "2020-06-12T09:23:30Z", "author": {"login": "fazlan-nazeem"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -10467,7 +10482,26 @@ public void addSubscriptionPolicy(SubscriptionPolicy policy) throws APIManagemen\n                 handleException(\"Failed to add Subscription Policy: \" + policy, e);\n             }\n         } finally {\n-            APIMgtDBUtil.closeAllConnections(policyStatement, conn, null);\n+            APIMgtDBUtil.closeAllConnections(policyStatement, conn, rs);\n+        }\n+    }\n+\n+    private void addGraphQLQueryAnalysisInfo(Connection conn, int maxDepth, int maxComplexity, int policyId)\n+            throws APIManagementException {\n+\n+        PreparedStatement ps = null;\n+        try{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee113e266e4a149cd7232756a17356d9231da61"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3249, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}