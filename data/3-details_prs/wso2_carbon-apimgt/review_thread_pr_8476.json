{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDA4MjM1", "number": 8476, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoxNDoyMlrOD9Y3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMToxNlrOD9ZDAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njk3MjEyOnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoxNDoyMlrOGW2llg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNTowNlrOGXU6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxNjIxNA==", "bodyText": "can we remove it", "url": "https://github.com/wso2/carbon-apimgt/pull/8476#discussion_r426616214", "createdAt": "2020-05-18T13:14:22Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java", "diffHunk": "@@ -453,9 +453,34 @@ String addResourceFile(Identifier identifier, String resourcePath, ResourceFile\n      * @param tenantid   tenant id\n      * @return true if the scope key is already available\n      * @throws APIManagementException if failed to check the context availability\n+     * @deprecated Use isScopeKeyAssignedLocally() instead.\n      */\n+    @Deprecated\n     boolean isScopeKeyAssigned(APIIdentifier identifier, String scopeKey, int tenantid) throws APIManagementException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4474710cbddf77aa43df55d16896f759bccd78df"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyODc1NA==", "bodyText": "This was added back as deprecated as\nit seemed not a good practice to remove an API #8409 (comment)", "url": "https://github.com/wso2/carbon-apimgt/pull/8476#discussion_r426628754", "createdAt": "2020-05-18T13:33:06Z", "author": {"login": "dushaniw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java", "diffHunk": "@@ -453,9 +453,34 @@ String addResourceFile(Identifier identifier, String resourcePath, ResourceFile\n      * @param tenantid   tenant id\n      * @return true if the scope key is already available\n      * @throws APIManagementException if failed to check the context availability\n+     * @deprecated Use isScopeKeyAssignedLocally() instead.\n      */\n+    @Deprecated\n     boolean isScopeKeyAssigned(APIIdentifier identifier, String scopeKey, int tenantid) throws APIManagementException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxNjIxNA=="}, "originalCommit": {"oid": "4474710cbddf77aa43df55d16896f759bccd78df"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMzIxNQ==", "bodyText": "As the method is not used by any implementation other than internal carbon-apimgt methods, removed the method from interface. 99c8da5", "url": "https://github.com/wso2/carbon-apimgt/pull/8476#discussion_r427113215", "createdAt": "2020-05-19T08:15:06Z", "author": {"login": "dushaniw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java", "diffHunk": "@@ -453,9 +453,34 @@ String addResourceFile(Identifier identifier, String resourcePath, ResourceFile\n      * @param tenantid   tenant id\n      * @return true if the scope key is already available\n      * @throws APIManagementException if failed to check the context availability\n+     * @deprecated Use isScopeKeyAssignedLocally() instead.\n      */\n+    @Deprecated\n     boolean isScopeKeyAssigned(APIIdentifier identifier, String scopeKey, int tenantid) throws APIManagementException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxNjIxNA=="}, "originalCommit": {"oid": "4474710cbddf77aa43df55d16896f759bccd78df"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzAwMDk2OnYy", "diffSide": "RIGHT", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMToxNlrOGW23uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNToyNVrOGXU78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMDg1OQ==", "bodyText": "scopeName -> name", "url": "https://github.com/wso2/carbon-apimgt/pull/8476#discussion_r426620859", "createdAt": "2020-05-18T13:21:16Z", "author": {"login": "tharindu1st"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "diffHunk": "@@ -706,14 +762,553 @@ public AccessTokenInfo getAccessTokenByConsumerKey(String consumerKey) throws AP\n     }\n \n     @Override\n-    public Map<String, Set<Scope>> getScopesForAPIS(String apiIdsString) throws APIManagementException {\n+    public Map<String, Set<Scope>> getScopesForAPIS(String apiIdsString, String tenantDomain)\n+            throws APIManagementException {\n+\n+        Map<String, Set<Scope>> apiToScopeMapping = new HashMap<>();\n         ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n-        Map<String, Set<Scope>> scopes = apiMgtDAO.getScopesForAPIS(apiIdsString);\n-        return scopes;\n+        Map<String, Set<String>> apiToScopeKeyMapping = apiMgtDAO.getScopesForAPIS(apiIdsString);\n+        for (String apiId : apiToScopeKeyMapping.keySet()) {\n+            Set<Scope> apiScopes = new LinkedHashSet<>();\n+            Set<String> scopeKeys = apiToScopeKeyMapping.get(apiId);\n+            for (String scopeKey : scopeKeys) {\n+                Scope scope = getScopeByName(scopeKey, tenantDomain);\n+                apiScopes.add(scope);\n+            }\n+            apiToScopeMapping.put(apiId, apiScopes);\n+        }\n+        return apiToScopeMapping;\n+    }\n+\n+    /**\n+     * Get scope management service tenant URL for given KM endpoint.\n+     *\n+     * @return Scope Management Service host URL (Eg:https://localhost:9444/api/identity/oauth2/v1.0/scopes)\n+     * @throws APIManagementException If a malformed km endpoint is provided\n+     */\n+    private String getScopeManagementServiceEndpoint(String tenantDomain) throws APIManagementException {\n+\n+        String authServerURL = configuration.getParameter(APIConstants.AUTHSERVER_URL);\n+        if (StringUtils.isEmpty(authServerURL)) {\n+            throw new APIManagementException(\"API Key Validator Server URL cannot be empty or null\");\n+        }\n+        String scopeMgtTenantEndpoint = authServerURL.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0];\n+        if (StringUtils.isNoneEmpty(tenantDomain)) {\n+            scopeMgtTenantEndpoint += \"/t/\" + tenantDomain;\n+        }\n+        scopeMgtTenantEndpoint += APIConstants.KEY_MANAGER_OAUTH2_SCOPES_REST_API_BASE_PATH;\n+        return scopeMgtTenantEndpoint;\n+    }\n+\n+    /**\n+     * This method will be used to register a Scope in the authorization server.\n+     *\n+     * @param scope        Scope to register\n+     * @param tenantDomain tenant domain to add scope\n+     * @throws APIManagementException if there is an error while registering a new scope.\n+     */\n+    @Override\n+    public void registerScope(Scope scope, String tenantDomain) throws APIManagementException {\n+\n+        AccessTokenInfo accessToken = getAccessTokenForScopeMgt(tenantDomain);\n+        String scopeEndpoint = getScopeManagementServiceEndpoint(tenantDomain);\n+        String scopeKey = scope.getKey();\n+        try {\n+            HttpPost httpPost = new HttpPost(scopeEndpoint);\n+            httpPost.setHeader(HttpHeaders.AUTHORIZATION, getBearerAuthorizationHeader(accessToken));\n+            httpPost.setHeader(HttpHeaders.CONTENT_TYPE, APIConstants.APPLICATION_JSON_MEDIA_TYPE);\n+            ScopeDTO scopeDTO = new ScopeDTO();\n+            scopeDTO.setName(scopeKey);\n+            scopeDTO.setDisplayName(scope.getName());\n+            scopeDTO.setDescription(scope.getDescription());\n+            if (scope.getRoles() != null) {\n+                scopeDTO.setBindings(Arrays.asList(scope.getRoles().split(\",\")));\n+            }\n+            StringEntity payload = new StringEntity(new Gson().toJson(scopeDTO));\n+            httpPost.setEntity(payload);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invoking Scope Management REST API of KM: \" + scopeEndpoint + \" to register scope \"\n+                        + scopeKey);\n+            }\n+            try (CloseableHttpResponse httpResponse = kmHttpClient.execute(httpPost)) {\n+                int statusCode = httpResponse.getStatusLine().getStatusCode();\n+                if (statusCode != HttpStatus.SC_CREATED) {\n+                    String responseString = readHttpResponseAsString(httpResponse);\n+                    throw new APIManagementException(\"Error occurred while registering scope: \" + scopeKey + \" via \"\n+                            + scopeEndpoint + \". Error Status: \" + statusCode + \" . Error Response: \" + responseString);\n+                }\n+            }\n+        } catch (IOException e) {\n+            String errorMessage = \"Error occurred while registering scope: \" + scopeKey + \" via \" + scopeEndpoint;\n+            throw new APIManagementException(errorMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Read response body for HTTPResponse as a string.\n+     *\n+     * @param httpResponse HTTPResponse\n+     * @return Response Body String\n+     * @throws APIManagementException If an error occurs while reading the response\n+     */\n+    protected String readHttpResponseAsString(CloseableHttpResponse httpResponse) throws APIManagementException {\n+\n+        try {\n+            HttpEntity entity = httpResponse.getEntity();\n+            String responseString = entity != null ? EntityUtils.toString(entity, StandardCharsets.UTF_8) : null;\n+            //release all resources held by the responseHttpEntity\n+            EntityUtils.consume(entity);\n+            return responseString;\n+        } catch (IOException e) {\n+            String errorMessage = \"Error occurred while reading response body as string\";\n+            throw new APIManagementException(errorMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Get Basic Authorization header for KM admin credentials.\n+     *\n+     * @return Base64 encoded Basic Authorization header\n+     */\n+    protected String getBasicAuthorizationHeader() {\n+\n+        //Set Authorization Header of external store admin\n+        byte[] encodedAuth = Base64\n+                .encodeBase64((configuration.getParameter(APIConstants.KEY_MANAGER_USERNAME) + \":\"\n+                        + configuration.getParameter(APIConstants.KEY_MANAGER_PASSWORD))\n+                        .getBytes(StandardCharsets.ISO_8859_1));\n+        return APIConstants.AUTHORIZATION_HEADER_BASIC + StringUtils.SPACE + new String(encodedAuth);\n+    }\n+\n+    /**\n+     * Get access token with scope management scopes for the tenant using the KM Mgt OAuth Application.\n+     *\n+     * @param tenantDomain Tenant Domain\n+     * @return Access Token\n+     */\n+    private AccessTokenInfo getAccessTokenForScopeMgt(String tenantDomain) throws APIManagementException {\n+\n+        OAuthApplicationInfo oAuthApplication = getKeyManagerMgtApplication(tenantDomain);\n+        // Set scope management resource scopes\n+        oAuthApplication.addParameter(APIConstants.AccessTokenConstants.TOKEN_SCOPES,\n+                APIConstants.KEY_MANAGER_OAUTH2_SCOPES_REST_API_MGT_SCOPES);\n+        // Create access token request for the application\n+        AccessTokenRequest tokenRequest = ApplicationUtils.createAccessTokenRequest(oAuthApplication, null);\n+        // Get access token\n+        return getNewApplicationAccessToken(tokenRequest);\n+    }\n+\n+    /**\n+     * Construct Bearer Authorization header for AccessTokenInfo.\n+     *\n+     * @param accessTokenInfo Access Token\n+     * @return Bearer Authorization header\n+     */\n+    private String getBearerAuthorizationHeader(AccessTokenInfo accessTokenInfo) {\n+\n+        return APIConstants.AUTHORIZATION_BEARER + accessTokenInfo.getAccessToken();\n+    }\n+\n+    /**\n+     * This method will be used to retrieve details of a Scope in the authorization server.\n+     *\n+     * @param scopeName    Scope Name to retrieve\n+     * @param tenantDomain tenant domain to retrieve scope from\n+     * @return Scope object\n+     * @throws APIManagementException if an error while retrieving scope\n+     */\n+    @Override\n+    public Scope getScopeByName(String scopeName, String tenantDomain) throws APIManagementException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4474710cbddf77aa43df55d16896f759bccd78df"}, "originalPosition": 538}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMzQ1Nw==", "bodyText": "fixed c227ae1", "url": "https://github.com/wso2/carbon-apimgt/pull/8476#discussion_r427113457", "createdAt": "2020-05-19T08:15:25Z", "author": {"login": "dushaniw"}, "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "diffHunk": "@@ -706,14 +762,553 @@ public AccessTokenInfo getAccessTokenByConsumerKey(String consumerKey) throws AP\n     }\n \n     @Override\n-    public Map<String, Set<Scope>> getScopesForAPIS(String apiIdsString) throws APIManagementException {\n+    public Map<String, Set<Scope>> getScopesForAPIS(String apiIdsString, String tenantDomain)\n+            throws APIManagementException {\n+\n+        Map<String, Set<Scope>> apiToScopeMapping = new HashMap<>();\n         ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n-        Map<String, Set<Scope>> scopes = apiMgtDAO.getScopesForAPIS(apiIdsString);\n-        return scopes;\n+        Map<String, Set<String>> apiToScopeKeyMapping = apiMgtDAO.getScopesForAPIS(apiIdsString);\n+        for (String apiId : apiToScopeKeyMapping.keySet()) {\n+            Set<Scope> apiScopes = new LinkedHashSet<>();\n+            Set<String> scopeKeys = apiToScopeKeyMapping.get(apiId);\n+            for (String scopeKey : scopeKeys) {\n+                Scope scope = getScopeByName(scopeKey, tenantDomain);\n+                apiScopes.add(scope);\n+            }\n+            apiToScopeMapping.put(apiId, apiScopes);\n+        }\n+        return apiToScopeMapping;\n+    }\n+\n+    /**\n+     * Get scope management service tenant URL for given KM endpoint.\n+     *\n+     * @return Scope Management Service host URL (Eg:https://localhost:9444/api/identity/oauth2/v1.0/scopes)\n+     * @throws APIManagementException If a malformed km endpoint is provided\n+     */\n+    private String getScopeManagementServiceEndpoint(String tenantDomain) throws APIManagementException {\n+\n+        String authServerURL = configuration.getParameter(APIConstants.AUTHSERVER_URL);\n+        if (StringUtils.isEmpty(authServerURL)) {\n+            throw new APIManagementException(\"API Key Validator Server URL cannot be empty or null\");\n+        }\n+        String scopeMgtTenantEndpoint = authServerURL.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0];\n+        if (StringUtils.isNoneEmpty(tenantDomain)) {\n+            scopeMgtTenantEndpoint += \"/t/\" + tenantDomain;\n+        }\n+        scopeMgtTenantEndpoint += APIConstants.KEY_MANAGER_OAUTH2_SCOPES_REST_API_BASE_PATH;\n+        return scopeMgtTenantEndpoint;\n+    }\n+\n+    /**\n+     * This method will be used to register a Scope in the authorization server.\n+     *\n+     * @param scope        Scope to register\n+     * @param tenantDomain tenant domain to add scope\n+     * @throws APIManagementException if there is an error while registering a new scope.\n+     */\n+    @Override\n+    public void registerScope(Scope scope, String tenantDomain) throws APIManagementException {\n+\n+        AccessTokenInfo accessToken = getAccessTokenForScopeMgt(tenantDomain);\n+        String scopeEndpoint = getScopeManagementServiceEndpoint(tenantDomain);\n+        String scopeKey = scope.getKey();\n+        try {\n+            HttpPost httpPost = new HttpPost(scopeEndpoint);\n+            httpPost.setHeader(HttpHeaders.AUTHORIZATION, getBearerAuthorizationHeader(accessToken));\n+            httpPost.setHeader(HttpHeaders.CONTENT_TYPE, APIConstants.APPLICATION_JSON_MEDIA_TYPE);\n+            ScopeDTO scopeDTO = new ScopeDTO();\n+            scopeDTO.setName(scopeKey);\n+            scopeDTO.setDisplayName(scope.getName());\n+            scopeDTO.setDescription(scope.getDescription());\n+            if (scope.getRoles() != null) {\n+                scopeDTO.setBindings(Arrays.asList(scope.getRoles().split(\",\")));\n+            }\n+            StringEntity payload = new StringEntity(new Gson().toJson(scopeDTO));\n+            httpPost.setEntity(payload);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invoking Scope Management REST API of KM: \" + scopeEndpoint + \" to register scope \"\n+                        + scopeKey);\n+            }\n+            try (CloseableHttpResponse httpResponse = kmHttpClient.execute(httpPost)) {\n+                int statusCode = httpResponse.getStatusLine().getStatusCode();\n+                if (statusCode != HttpStatus.SC_CREATED) {\n+                    String responseString = readHttpResponseAsString(httpResponse);\n+                    throw new APIManagementException(\"Error occurred while registering scope: \" + scopeKey + \" via \"\n+                            + scopeEndpoint + \". Error Status: \" + statusCode + \" . Error Response: \" + responseString);\n+                }\n+            }\n+        } catch (IOException e) {\n+            String errorMessage = \"Error occurred while registering scope: \" + scopeKey + \" via \" + scopeEndpoint;\n+            throw new APIManagementException(errorMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Read response body for HTTPResponse as a string.\n+     *\n+     * @param httpResponse HTTPResponse\n+     * @return Response Body String\n+     * @throws APIManagementException If an error occurs while reading the response\n+     */\n+    protected String readHttpResponseAsString(CloseableHttpResponse httpResponse) throws APIManagementException {\n+\n+        try {\n+            HttpEntity entity = httpResponse.getEntity();\n+            String responseString = entity != null ? EntityUtils.toString(entity, StandardCharsets.UTF_8) : null;\n+            //release all resources held by the responseHttpEntity\n+            EntityUtils.consume(entity);\n+            return responseString;\n+        } catch (IOException e) {\n+            String errorMessage = \"Error occurred while reading response body as string\";\n+            throw new APIManagementException(errorMessage, e);\n+        }\n+    }\n+\n+    /**\n+     * Get Basic Authorization header for KM admin credentials.\n+     *\n+     * @return Base64 encoded Basic Authorization header\n+     */\n+    protected String getBasicAuthorizationHeader() {\n+\n+        //Set Authorization Header of external store admin\n+        byte[] encodedAuth = Base64\n+                .encodeBase64((configuration.getParameter(APIConstants.KEY_MANAGER_USERNAME) + \":\"\n+                        + configuration.getParameter(APIConstants.KEY_MANAGER_PASSWORD))\n+                        .getBytes(StandardCharsets.ISO_8859_1));\n+        return APIConstants.AUTHORIZATION_HEADER_BASIC + StringUtils.SPACE + new String(encodedAuth);\n+    }\n+\n+    /**\n+     * Get access token with scope management scopes for the tenant using the KM Mgt OAuth Application.\n+     *\n+     * @param tenantDomain Tenant Domain\n+     * @return Access Token\n+     */\n+    private AccessTokenInfo getAccessTokenForScopeMgt(String tenantDomain) throws APIManagementException {\n+\n+        OAuthApplicationInfo oAuthApplication = getKeyManagerMgtApplication(tenantDomain);\n+        // Set scope management resource scopes\n+        oAuthApplication.addParameter(APIConstants.AccessTokenConstants.TOKEN_SCOPES,\n+                APIConstants.KEY_MANAGER_OAUTH2_SCOPES_REST_API_MGT_SCOPES);\n+        // Create access token request for the application\n+        AccessTokenRequest tokenRequest = ApplicationUtils.createAccessTokenRequest(oAuthApplication, null);\n+        // Get access token\n+        return getNewApplicationAccessToken(tokenRequest);\n+    }\n+\n+    /**\n+     * Construct Bearer Authorization header for AccessTokenInfo.\n+     *\n+     * @param accessTokenInfo Access Token\n+     * @return Bearer Authorization header\n+     */\n+    private String getBearerAuthorizationHeader(AccessTokenInfo accessTokenInfo) {\n+\n+        return APIConstants.AUTHORIZATION_BEARER + accessTokenInfo.getAccessToken();\n+    }\n+\n+    /**\n+     * This method will be used to retrieve details of a Scope in the authorization server.\n+     *\n+     * @param scopeName    Scope Name to retrieve\n+     * @param tenantDomain tenant domain to retrieve scope from\n+     * @return Scope object\n+     * @throws APIManagementException if an error while retrieving scope\n+     */\n+    @Override\n+    public Scope getScopeByName(String scopeName, String tenantDomain) throws APIManagementException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMDg1OQ=="}, "originalCommit": {"oid": "4474710cbddf77aa43df55d16896f759bccd78df"}, "originalPosition": 538}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3503, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}