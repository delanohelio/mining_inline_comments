{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDIwMDEz", "number": 8676, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNDo1NlrOEDYdew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNDo1NlrOEDYdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTgxOTQ3OnYy", "diffSide": "RIGHT", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/components/KeyManager.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNDo1NlrOGgXfHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNDo1NlrOGgXfHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MjQxNQ==", "bodyText": "Shall we change this to, \"Key Managers for the API will be enabled\" ?", "url": "https://github.com/wso2/carbon-apimgt/pull/8676#discussion_r436592415", "createdAt": "2020-06-08T10:14:56Z", "author": {"login": "kavishkafernando"}, "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/components/KeyManager.jsx", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import PropTypes from 'prop-types';\n+import Grid from '@material-ui/core/Grid';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import HelpOutline from '@material-ui/icons/HelpOutline';\n+import { FormattedMessage } from 'react-intl';\n+import Typography from '@material-ui/core/Typography';\n+import ExpansionPanel from '@material-ui/core/ExpansionPanel';\n+import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\n+import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n+import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import Switch from '@material-ui/core/Switch';\n+import { isRestricted } from 'AppData/AuthManager';\n+import { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n+import Chip from '@material-ui/core/Chip';\n+import Select from '@material-ui/core/Select';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import API from 'AppData/api';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import Checkbox from '@material-ui/core/Checkbox';\n+\n+const useStyles = makeStyles((theme) => ({\n+    expansionPanel: {\n+        marginBottom: theme.spacing(3),\n+    },\n+    expansionPanelDetails: {\n+        flexDirection: 'column',\n+    },\n+    iconSpace: {\n+        marginLeft: theme.spacing(0.5),\n+    },\n+    actionSpace: {\n+        margin: '-7px auto',\n+    },\n+    subHeading: {\n+        fontSize: '1rem',\n+        fontWeight: 400,\n+        margin: 0,\n+        display: 'inline-flex',\n+        lineHeight: 1.5,\n+    },\n+}));\n+\n+/**\n+ *\n+ * KeyManager configuration\n+ * @param {*} props\n+ * @returns\n+ */\n+export default function KeyManager(props) {\n+    const [apiFromContext] = useAPI();\n+    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n+    const {\n+        configDispatcher,\n+        api: { keyManagers },\n+    } = props;\n+    const classes = useStyles();\n+    const handleChange = (event) => {\n+        configDispatcher({\n+            action: 'keymanagers',\n+            value: event.target.value,\n+        });\n+    };\n+    useEffect(() => {\n+        API.keyManagers().then((response) => setKeyManagersConfigured(response.body.list));\n+    }, []);\n+\n+    return (\n+        <ExpansionPanel className={classes.expansionPanel}>\n+            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n+                <Typography className={classes.subHeading} variant='h6'>\n+                    <FormattedMessage\n+                        id='Apis.Details.Configuration.components.KeyManager.configuration'\n+                        defaultMessage='Keymanager Configuration'\n+                    />\n+                    <Tooltip\n+                        title={(\n+                            <FormattedMessage\n+                                id='Apis.Details.Keymanager.components.Configuration.tooltip'\n+                                defaultMessage='If enabled, the KeyManagers for the API will be enabled.'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbba4d52867be4af7516a02d60748fb1c4ea9e48"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3345, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}