{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTg5Mjg3", "number": 1078, "title": "Do not ignore the baseline assignment when evaluating in PartitionMovementConstraint.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#931\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe current implementation of the PartitionMovementConstraint will ignore the baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\nThis change fixes this issue by prioritizing the baseline and the best possible assignments instead of just ignoring.\nThis reduces the chance of divergences between the baseline and the best possible assignments. Also, it reduces the possibility of bouncing partition assignments.\nTests\n\n The following tests are written for this issue:\n\nTestPartitionMovementConstraint.java\nI also profiled the rebalancer performance with the change.\nSimulate a cluster with 15 nodes. Then execute the following operations,\n\nadd 20 resources (128 partitions/3 replicas).\nremove 10 resources that are added first.\nrolling disable/reset/enable instances by zones (not delayed rebalance is not enabled or there won't be any change after all operations)\n\nThe final results,\n\n\nBefore change,\nPartition distribution:\tMax\t271.000000\tMin\t209.000000\tSTDEV\t23.880656\nMASTER distribution:\tMax\t87.000000\tMin\t79.000000\tSTDEV\t2.870208\nSLAVE distribution:\tMax\t184.000000\tMin\t128.000000\tSTDEV\t21.137869\nCapacity Usage Partition distribution:\tMax\t271.000000\tMin\t209.000000\tSTDEV\t23.880656\n\n\nAfter change,\nPartition distribution:\tMax\t259.000000\tMin\t252.000000\tSTDEV\t2.236068\nMASTER distribution:\tMax\t87.000000\tMin\t84.000000\tSTDEV\t0.899735\nSLAVE distribution:\tMax\t174.000000\tMin\t166.000000\tSTDEV\t2.716791\nCapacity Usage Partition distribution:\tMax\t259.000000\tMin\t252.000000\tSTDEV\t2.236068\nThere is an obvious enhancement.\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[ERROR] Failures:\n[ERROR]   TestNoThrottleDisabledPartitions.testDisablingTopStateReplicaByDisablingInstance:98 expected: but was:\n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\n[ERROR]   TestTaskRebalancerStopResume.testStopWorkflowInStoppingState:513 expected: but was:\n[ERROR]   TestWorkflowTimeout.testWorkflowTimeoutWhenWorkflowCompleted:116 expected: but was:\n[ERROR]   TestClusterVerifier.testResourceSubset:225 expected: but was:\n[INFO]\n[ERROR] Tests run: 1139, Failures: 5, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:23 h\n[INFO] Finished at: 2020-06-11T18:50:17-07:00\n[INFO] ------------------------------------------------------------------------\nRerun\n[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 136.49 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 02:23 min\n[INFO] Finished at: 2020-06-12T11:16:55-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-09T18:31:10Z", "url": "https://github.com/apache/helix/pull/1078", "merged": true, "mergeCommit": {"oid": "1e1c43f62f1a5bd0c7b73ecd8d448456da2b8208"}, "closed": true, "closedAt": "2020-06-22T23:58:07Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp0W_QgBqjM0MjgxODUxMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct5nT2AFqTQzNTM0NDc2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbbfacd9fb6774fc068d4eee09d47e36ed1dee05", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/cbbfacd9fb6774fc068d4eee09d47e36ed1dee05", "committedDate": "2020-06-09T18:03:52Z", "message": "Do not ignore the baseline assignment when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring"}, "afterCommit": {"oid": "2e6f3a06d611226750efa9296ebe4fdacfebfca4", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/2e6f3a06d611226750efa9296ebe4fdacfebfca4", "committedDate": "2020-06-10T07:15:44Z", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/769aee1d492f689e7636456b1c5e675af9b0930c", "committedDate": "2020-06-15T23:49:39Z", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e6f3a06d611226750efa9296ebe4fdacfebfca4", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/2e6f3a06d611226750efa9296ebe4fdacfebfca4", "committedDate": "2020-06-10T07:15:44Z", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information."}, "afterCommit": {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/769aee1d492f689e7636456b1c5e675af9b0930c", "committedDate": "2020-06-15T23:49:39Z", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDgzMTU2", "url": "https://github.com/apache/helix/pull/1078#pullrequestreview-431083156", "createdAt": "2020-06-16T00:40:16Z", "commit": {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDo0MDoxNlrOGkHUIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDo0MTo1NVrOGkHWAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTc2Mw==", "bodyText": "Maybe  block Comments here?", "url": "https://github.com/apache/helix/pull/1078#discussion_r440521763", "createdAt": "2020-06-16T00:40:16Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -40,31 +40,53 @@\n class PartitionMovementConstraint extends SoftConstraint {\n   private static final double MAX_SCORE = 1f;\n   private static final double MIN_SCORE = 0f;\n-  //TODO: these factors will be tuned based on user's preference\n-  // This factor indicates the default score that is evaluated if only partition allocation matches\n-  // (states are different).\n-  private static final double ALLOCATION_MATCH_FACTOR = 0.5;\n+  // The scale factor to adjust score when the proposed allocation partially matches the assignment\n+  // plan but will require a state transition (with partition movement).\n+  // TODO: these factors will be tuned based on user's preference\n+  private static final double STATE_TRANSITION_COST_FACTOR = 0.5;\n+  private static final double MOVEMENT_COST_FACTOR = 0.25;\n \n   PartitionMovementConstraint() {\n     super(MAX_SCORE, MIN_SCORE);\n   }\n \n+  /**\n+   * @return 1 if the proposed assignment completely matches the previous best possible assignment\n+   *         (or baseline assignment if the replica is newly added).\n+   *         STATE_TRANSITION_COST_FACTOR if the proposed assignment's allocation matches the\n+   *         previous Best Possible assignment (or baseline assignment if the replica is newly\n+   *         added) but state does not match.\n+   *         MOVEMENT_COST_FACTOR if the proposed assignment's allocation matches the baseline\n+   *         assignment only, but not matches the previous best possible assignment.\n+   *         0 if the proposed assignment is a pure random movement.\n+   */\n   @Override\n   protected double getAssignmentScore(AssignableNode node, AssignableReplica replica,\n       ClusterContext clusterContext) {\n-    // Prioritize the previous Best Possible assignment\n     Map<String, String> bestPossibleAssignment =\n         getStateMap(replica, clusterContext.getBestPossibleAssignment());\n-    if (!bestPossibleAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, bestPossibleAssignment);\n-    }\n-    // else, compare the baseline only if the best possible assignment does not contain the replica\n     Map<String, String> baselineAssignment =\n         getStateMap(replica, clusterContext.getBaselineAssignment());\n-    if (!baselineAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, baselineAssignment);\n+    String nodeName = node.getInstanceName();\n+    String state = replica.getReplicaState();\n+\n+    if (bestPossibleAssignment.isEmpty()) {\n+      // If bestPossibleAssignment of the replica is empty, indicating this is a new replica.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMjI0Mg==", "bodyText": "Maybe trailing Comments?", "url": "https://github.com/apache/helix/pull/1078#discussion_r440522242", "createdAt": "2020-06-16T00:41:55Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -77,15 +99,16 @@ protected double getAssignmentScore(AssignableNode node, AssignableReplica repli\n     return assignment.get(resourceName).getReplicaMap(new Partition(partitionName));\n   }\n \n-  private double calculateAssignmentScale(AssignableNode node, AssignableReplica replica,\n+  private double calculateAssignmentScore(String nodeName, String state,\n       Map<String, String> instanceToStateMap) {\n-    String instanceName = node.getInstanceName();\n-    if (!instanceToStateMap.containsKey(instanceName)) {\n-      return 0;\n-    } else {\n-      return (instanceToStateMap.get(instanceName).equals(replica.getReplicaState()) ? 1 :\n-          ALLOCATION_MATCH_FACTOR);\n+    if (instanceToStateMap.containsKey(nodeName)) {\n+      return state.equals(instanceToStateMap.get(nodeName)) ?\n+          // if state matches, no state transition required for the proposed assignment\n+          1 :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e8380d626a9821c465a7a6e16e66c4d5fe9f7054", "committedDate": "2020-06-17T18:25:27Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTM4MzM1", "url": "https://github.com/apache/helix/pull/1078#pullrequestreview-433538335", "createdAt": "2020-06-18T18:23:05Z", "commit": {"oid": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyMzowNVrOGl7GGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyMzowNVrOGl7GGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODcxNA==", "bodyText": "If I understand it correctly, when score == 0, should this be same as bestpossible is Empty()? Then score should be calculateAssignmentScore(nodeName, state, baselineAssignment);", "url": "https://github.com/apache/helix/pull/1078#discussion_r442418714", "createdAt": "2020-06-18T18:23:05Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -40,31 +40,53 @@\n class PartitionMovementConstraint extends SoftConstraint {\n   private static final double MAX_SCORE = 1f;\n   private static final double MIN_SCORE = 0f;\n-  //TODO: these factors will be tuned based on user's preference\n-  // This factor indicates the default score that is evaluated if only partition allocation matches\n-  // (states are different).\n-  private static final double ALLOCATION_MATCH_FACTOR = 0.5;\n+  // The scale factor to adjust score when the proposed allocation partially matches the assignment\n+  // plan but will require a state transition (with partition movement).\n+  // TODO: these factors will be tuned based on user's preference\n+  private static final double STATE_TRANSITION_COST_FACTOR = 0.5;\n+  private static final double MOVEMENT_COST_FACTOR = 0.25;\n \n   PartitionMovementConstraint() {\n     super(MAX_SCORE, MIN_SCORE);\n   }\n \n+  /**\n+   * @return 1 if the proposed assignment completely matches the previous best possible assignment\n+   *         (or baseline assignment if the replica is newly added).\n+   *         STATE_TRANSITION_COST_FACTOR if the proposed assignment's allocation matches the\n+   *         previous Best Possible assignment (or baseline assignment if the replica is newly\n+   *         added) but state does not match.\n+   *         MOVEMENT_COST_FACTOR if the proposed assignment's allocation matches the baseline\n+   *         assignment only, but not matches the previous best possible assignment.\n+   *         0 if the proposed assignment is a pure random movement.\n+   */\n   @Override\n   protected double getAssignmentScore(AssignableNode node, AssignableReplica replica,\n       ClusterContext clusterContext) {\n-    // Prioritize the previous Best Possible assignment\n     Map<String, String> bestPossibleAssignment =\n         getStateMap(replica, clusterContext.getBestPossibleAssignment());\n-    if (!bestPossibleAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, bestPossibleAssignment);\n-    }\n-    // else, compare the baseline only if the best possible assignment does not contain the replica\n     Map<String, String> baselineAssignment =\n         getStateMap(replica, clusterContext.getBaselineAssignment());\n-    if (!baselineAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, baselineAssignment);\n+    String nodeName = node.getInstanceName();\n+    String state = replica.getReplicaState();\n+\n+    if (bestPossibleAssignment.isEmpty()) {\n+      // If bestPossibleAssignment of the replica is empty, indicating this is a new replica.\n+      // Then the baseline is the only reference.\n+      return calculateAssignmentScore(nodeName, state, baselineAssignment);\n+    } else {\n+      // Else, for minimizing partition movements or state transitions, prioritize the proposed\n+      // assignment that matches the previous Best Possible assignment.\n+      double score = calculateAssignmentScore(nodeName, state, bestPossibleAssignment);\n+      // If no Best Possible assignment matches, check the baseline assignment.\n+      if (score == 0 && baselineAssignment.containsKey(nodeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzQ0NzYx", "url": "https://github.com/apache/helix/pull/1078#pullrequestreview-435344761", "createdAt": "2020-06-22T23:40:12Z", "commit": {"oid": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4474, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}