{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTE3NDI2", "number": 757, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNDozMlrODfR2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODozNVrODfux2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTI0ODM4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNDozMlrOFo4-ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1ODozN1rOFo8pDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMDgzNg==", "bodyText": "Why is this error? Should we make this an info log? And \"updating {} {}\" is not detailed enough.\nSay something like \"Successfully added metadata store realm {} to namespace {}!\"... and put it after the call so we know it succeeded.", "url": "https://github.com/apache/helix/pull/757#discussion_r378420836", "createdAt": "2020-02-12T18:04:32Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -84,6 +86,31 @@ public Response getAllMetadataStoreRealms() {\n     return JSONRepresentation(responseMap);\n   }\n \n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}\")\n+  public Response addMetadataStoreRealm(@PathParam(\"realm\") String realm) {\n+    try {\n+      LOG.error(\"updating {} {}\", _namespace, realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MDkwOA==", "bodyText": "It was left for me to debug. I've removed it before you finished the review. But somehow you still saw it.", "url": "https://github.com/apache/helix/pull/757#discussion_r378480908", "createdAt": "2020-02-12T19:58:37Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -84,6 +86,31 @@ public Response getAllMetadataStoreRealms() {\n     return JSONRepresentation(responseMap);\n   }\n \n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}\")\n+  public Response addMetadataStoreRealm(@PathParam(\"realm\") String realm) {\n+    try {\n+      LOG.error(\"updating {} {}\", _namespace, realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMDgzNg=="}, "originalCommit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjYwNDM4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzo0MTo1N1rOFpGKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzo1MTo1NlrOFpGRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzNjg5MQ==", "bodyText": "Why did we decide to make this a PathParam instead of a QueryParam? I think QueryParam would be easier to use and would minimize unnecessary confusion.", "url": "https://github.com/apache/helix/pull/757#discussion_r378636891", "createdAt": "2020-02-13T03:41:57Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -124,7 +148,34 @@ public Response getShardingKeys(@QueryParam(\"realm\") String realm) {\n     return JSONRepresentation(responseMap);\n   }\n \n-  private void getHelixNamespace() {\n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}/sharding-keys/{sharding-key: .+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzODc5NA==", "bodyText": "I actually take this back. I think this approach makes sense - the fact that sharding key strings contain \"/\"s threw me off. Resolving.", "url": "https://github.com/apache/helix/pull/757#discussion_r378638794", "createdAt": "2020-02-13T03:51:56Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -124,7 +148,34 @@ public Response getShardingKeys(@QueryParam(\"realm\") String realm) {\n     return JSONRepresentation(responseMap);\n   }\n \n-  private void getHelixNamespace() {\n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}/sharding-keys/{sharding-key: .+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzNjg5MQ=="}, "originalCommit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY2NjQxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMjo1OVrOFpjudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyMTowOFrOFpj9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTI3MQ==", "bodyText": "Nit: a good addition to this would be a TestHelper.verify() that checks that the deletion has completed.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121271", "createdAt": "2020-02-13T21:12:59Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -42,12 +42,16 @@\n \n   @BeforeClass\n   public void beforeClass() {\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNTExMA==", "bodyText": "This should be a must because I believe there would be a latency for write -> read. I will add them once we have write operations ready and enable the asserts", "url": "https://github.com/apache/helix/pull/757#discussion_r379125110", "createdAt": "2020-02-13T21:21:08Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -42,12 +42,16 @@\n \n   @BeforeClass\n   public void beforeClass() {\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTI3MQ=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY2Njg1OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzowNlrOFpjutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzowNlrOFpjutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTMzNA==", "bodyText": "Nit: a good addition to this would be a TestHelper.verify() that checks that the deletion has completed.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121334", "createdAt": "2020-02-13T21:13:06Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -42,12 +42,16 @@\n \n   @BeforeClass\n   public void beforeClass() {\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n     _zkRoutingDataReader = new ZkRoutingDataReader(DUMMY_NAMESPACE, ZK_ADDR, null);\n   }\n \n   @AfterClass\n   public void afterClass() {\n     _zkRoutingDataReader.close();\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY2ODQyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzo0MFrOFpjvxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNjoxNVrOFplfmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTYwNQ==", "bodyText": "Nit: could we avoid static imports and use them inline?", "url": "https://github.com/apache/helix/pull/757#discussion_r379121605", "createdAt": "2020-02-13T21:13:40Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMjYwNg==", "bodyText": "Since this is a test class, I am actually fine leaving it in either way if you think this improves readability.", "url": "https://github.com/apache/helix/pull/757#discussion_r379122606", "createdAt": "2020-02-13T21:15:55Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTYwNQ=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MDIzNA==", "bodyText": "I don't have strong preference. I will address this in next PR for read endpoints.", "url": "https://github.com/apache/helix/pull/757#discussion_r379150234", "createdAt": "2020-02-13T22:16:15Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTYwNQ=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY3MDUxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNDoyM1rOFpjxHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNDoyM1rOFpjxHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTk0OQ==", "bodyText": "Could add TestHelper.verify for making the test stable.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121949", "createdAt": "2020-02-13T21:14:23Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+\n \n public class TestMetadataStoreDirectoryAccessor extends AbstractTestClass {\n   /*\n    * The following are constants to be used for testing.\n    */\n+  private static final String TEST_NAMESPACE_URI_PREFIX = \"/namespaces/\" + TEST_NAMESPACE;\n+  private static final String NON_EXISTING_NAMESPACE_URI_PREFIX =\n+      \"/namespaces/not-existed-namespace/metadata-store-realms/\";\n   private static final String TEST_REALM_1 = \"testRealm1\";\n   private static final List<String> TEST_SHARDING_KEYS_1 =\n       Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n   private static final String TEST_REALM_2 = \"testRealm2\";\n   private static final List<String> TEST_SHARDING_KEYS_2 =\n       Arrays.asList(\"/sharding/key/1/d\", \"/sharding/key/1/e\", \"/sharding/key/1/f\");\n+  private static final String TEST_REALM_3 = \"testRealm3\";\n+  private static final String TEST_SHARDING_KEY = \"/sharding/key/1/x\";\n \n   // List of all ZK addresses, each of which corresponds to a namespace/routing ZK\n   private List<String> _zkList;\n+  private MetadataStoreDirectory _metadataStoreDirectory;\n \n   @BeforeClass\n-  public void beforeClass() {\n+  public void beforeClass() throws InvalidRoutingDataException {\n     _zkList = new ArrayList<>(ZK_SERVER_MAP.keySet());\n \n+    _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY3Nzc4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNzowNlrOFpj1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNToyMVrOFpleHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzE0MA==", "bodyText": "Probably a good idea to add a TestHelper.verify().", "url": "https://github.com/apache/helix/pull/757#discussion_r379123140", "createdAt": "2020-02-13T21:17:06Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +254,58 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n   public void afterClass() {\n+    _metadataStoreDirectory.close();\n     _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTg1Mg==", "bodyText": "deleteRecursively is a sync blocking call. Once deleteRecursively completes, the path is deleted.", "url": "https://github.com/apache/helix/pull/757#discussion_r379149852", "createdAt": "2020-02-13T22:15:21Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +254,58 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n   public void afterClass() {\n+    _metadataStoreDirectory.close();\n     _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzE0MA=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTk4ODQ2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODoyNlrOFpm49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODoyNlrOFpm49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MzEwOA==", "bodyText": "Should we do an Assert.assertTrue on the return value of verify()?", "url": "https://github.com/apache/helix/pull/757#discussion_r379173108", "createdAt": "2020-02-13T23:18:26Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +252,73 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n-  public void afterClass() {\n-    _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+  public void afterClass() throws Exception {\n+    _metadataStoreDirectory.close();\n+    deleteRoutingDataPath();\n+  }\n+\n+  private void deleteRoutingDataPath() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTk4ODcyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODozNVrOFpm5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODozNVrOFpm5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MzE1Nw==", "bodyText": "Should we do an Assert.assertTrue on the return value of verify()?", "url": "https://github.com/apache/helix/pull/757#discussion_r379173157", "createdAt": "2020-02-13T23:18:35Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -130,4 +133,18 @@ public void testGetRoutingDataMSRDChildEmptyValue() {\n               + \". Routing ZooKeeper address: \" + ZK_ADDR));\n     }\n   }\n+\n+  private void deleteRoutingDataPath() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1621, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}