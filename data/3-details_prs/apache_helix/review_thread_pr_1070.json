{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NTU4Mjg2", "number": 1070, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMjozODozMVrOEDNEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNDo1ODozN1rOEDNYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk1MzExOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMjozODozMVrOGgGxUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMDoyMFrOGgtCGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxODU0NA==", "bodyText": "Do we still need these constructors in old file? Or we can just leave the class purely extend what we have in zookeeper-api module?", "url": "https://github.com/apache/helix/pull/1070#discussion_r436318544", "createdAt": "2020-06-07T02:38:31Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java", "diffHunk": "@@ -55,33 +49,26 @@\n  * TODO Completely replace usage of the raw ZkClient within helix-core. Instead, using HelixZkClient. --JJ\n  */\n \n-public class ZkClient extends org.apache.helix.manager.zk.zookeeper.ZkClient implements HelixZkClient {\n-  private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n-\n-  public static final int DEFAULT_OPERATION_TIMEOUT = Integer.MAX_VALUE;\n-  public static final int DEFAULT_CONNECTION_TIMEOUT = 60 * 1000;\n-  public static final int DEFAULT_SESSION_TIMEOUT = 30 * 1000;\n-\n+@Deprecated\n+public class ZkClient extends org.apache.helix.zookeeper.impl.client.ZkClient {\n   /**\n-   *\n-   * @param zkConnection\n+   *  @param zkConnection\n    *            The Zookeeper connection\n    * @param connectionTimeout\n    *            The connection timeout in milli seconds\n-   * @param zkSerializer\n-   *            The Zookeeper data serializer\n    * @param operationRetryTimeout\n    *            Most operations are retried in cases like connection loss with the Zookeeper servers. During such failures, this\n    *            <code>operationRetryTimeout</code> decides the maximum amount of time, in milli seconds, each\n    *            operation is retried. A value lesser than 0 is considered as\n    *            \"retry forever until a connection has been reestablished\".\n+   * @param zkSerializer\n+   *            The Zookeeper data serializer\n    * @param monitorType\n    * @param monitorKey\n    * @param monitorInstanceName\n-   *            These 3 inputs are used to name JMX monitor bean name for this ZkClient.\n+   *            These 3 inputs are used to name JMX monitor bean name for this RealmAwareZkClient.\n    *            The JMX bean name will be: HelixZkClient.monitorType.monitorKey.monitorInstanceName.\n    * @param monitorRootPathOnly\n-   *            Should only stat of access to root path be reported to JMX bean or path-specific stat be reported too.\n    */\n   public ZkClient(IZkConnection zkConnection, int connectionTimeout, long operationRetryTimeout,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxODgyNQ==", "bodyText": "Don't you think we should keep all public constructors for backward-compatibility?", "url": "https://github.com/apache/helix/pull/1070#discussion_r436318825", "createdAt": "2020-06-07T02:45:10Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java", "diffHunk": "@@ -55,33 +49,26 @@\n  * TODO Completely replace usage of the raw ZkClient within helix-core. Instead, using HelixZkClient. --JJ\n  */\n \n-public class ZkClient extends org.apache.helix.manager.zk.zookeeper.ZkClient implements HelixZkClient {\n-  private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n-\n-  public static final int DEFAULT_OPERATION_TIMEOUT = Integer.MAX_VALUE;\n-  public static final int DEFAULT_CONNECTION_TIMEOUT = 60 * 1000;\n-  public static final int DEFAULT_SESSION_TIMEOUT = 30 * 1000;\n-\n+@Deprecated\n+public class ZkClient extends org.apache.helix.zookeeper.impl.client.ZkClient {\n   /**\n-   *\n-   * @param zkConnection\n+   *  @param zkConnection\n    *            The Zookeeper connection\n    * @param connectionTimeout\n    *            The connection timeout in milli seconds\n-   * @param zkSerializer\n-   *            The Zookeeper data serializer\n    * @param operationRetryTimeout\n    *            Most operations are retried in cases like connection loss with the Zookeeper servers. During such failures, this\n    *            <code>operationRetryTimeout</code> decides the maximum amount of time, in milli seconds, each\n    *            operation is retried. A value lesser than 0 is considered as\n    *            \"retry forever until a connection has been reestablished\".\n+   * @param zkSerializer\n+   *            The Zookeeper data serializer\n    * @param monitorType\n    * @param monitorKey\n    * @param monitorInstanceName\n-   *            These 3 inputs are used to name JMX monitor bean name for this ZkClient.\n+   *            These 3 inputs are used to name JMX monitor bean name for this RealmAwareZkClient.\n    *            The JMX bean name will be: HelixZkClient.monitorType.monitorKey.monitorInstanceName.\n    * @param monitorRootPathOnly\n-   *            Should only stat of access to root path be reported to JMX bean or path-specific stat be reported too.\n    */\n   public ZkClient(IZkConnection zkConnection, int connectionTimeout, long operationRetryTimeout,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxODU0NA=="}, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NTQzNQ==", "bodyText": "Oh. The move also involve some constructor change? Then I am OK for that.", "url": "https://github.com/apache/helix/pull/1070#discussion_r436945435", "createdAt": "2020-06-08T19:20:20Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java", "diffHunk": "@@ -55,33 +49,26 @@\n  * TODO Completely replace usage of the raw ZkClient within helix-core. Instead, using HelixZkClient. --JJ\n  */\n \n-public class ZkClient extends org.apache.helix.manager.zk.zookeeper.ZkClient implements HelixZkClient {\n-  private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n-\n-  public static final int DEFAULT_OPERATION_TIMEOUT = Integer.MAX_VALUE;\n-  public static final int DEFAULT_CONNECTION_TIMEOUT = 60 * 1000;\n-  public static final int DEFAULT_SESSION_TIMEOUT = 30 * 1000;\n-\n+@Deprecated\n+public class ZkClient extends org.apache.helix.zookeeper.impl.client.ZkClient {\n   /**\n-   *\n-   * @param zkConnection\n+   *  @param zkConnection\n    *            The Zookeeper connection\n    * @param connectionTimeout\n    *            The connection timeout in milli seconds\n-   * @param zkSerializer\n-   *            The Zookeeper data serializer\n    * @param operationRetryTimeout\n    *            Most operations are retried in cases like connection loss with the Zookeeper servers. During such failures, this\n    *            <code>operationRetryTimeout</code> decides the maximum amount of time, in milli seconds, each\n    *            operation is retried. A value lesser than 0 is considered as\n    *            \"retry forever until a connection has been reestablished\".\n+   * @param zkSerializer\n+   *            The Zookeeper data serializer\n    * @param monitorType\n    * @param monitorKey\n    * @param monitorInstanceName\n-   *            These 3 inputs are used to name JMX monitor bean name for this ZkClient.\n+   *            These 3 inputs are used to name JMX monitor bean name for this RealmAwareZkClient.\n    *            The JMX bean name will be: HelixZkClient.monitorType.monitorKey.monitorInstanceName.\n    * @param monitorRootPathOnly\n-   *            Should only stat of access to root path be reported to JMX bean or path-specific stat be reported too.\n    */\n   public ZkClient(IZkConnection zkConnection, int connectionTimeout, long operationRetryTimeout,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxODU0NA=="}, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODAwMjI0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNDo1NDowM1rOGgHJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToxOTo0NVrOGgHOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNDcwMQ==", "bodyText": "I think in the test we can just call Long.toHexString(sessionId).\nOtherwise, my concern is that this public API will be with the ZkClient forever... And it seems to an overkill to have such a public method in the ZkClient class.", "url": "https://github.com/apache/helix/pull/1070#discussion_r436324701", "createdAt": "2020-06-07T04:54:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2223,7 +2223,7 @@ private void validateCurrentThread() {\n    *\n    * @return String representation of session id in hexadecimal notation.\n    */\n-  private static String toHexSessionId(long sessionId) {\n+  public static String toHexSessionId(long sessionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNTk5NQ==", "bodyText": "I agree with this idea. I think it's a valid point to avoid introducing another public method for ZkClient.", "url": "https://github.com/apache/helix/pull/1070#discussion_r436325995", "createdAt": "2020-06-07T05:19:45Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2223,7 +2223,7 @@ private void validateCurrentThread() {\n    *\n    * @return String representation of session id in hexadecimal notation.\n    */\n-  private static String toHexSessionId(long sessionId) {\n+  public static String toHexSessionId(long sessionId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNDcwMQ=="}, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODAwNDA4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNDo1ODozN1rOGgHKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNjo0MFrOGgrDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNDkyOQ==", "bodyText": "Can we merge 2 helpers? Maybe not a good idea.\nBut when we have both TestHelper and ZkTestHelper in the Zookeeper module, they are kind of confusing. Maybe a pair of better names would help.", "url": "https://github.com/apache/helix/pull/1070#discussion_r436324929", "createdAt": "2020-06-07T04:58:37Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestHelper.java", "diffHunk": "@@ -0,0 +1,447 @@\n+package org.apache.helix.zookeeper.impl;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.zkclient.IZkChildListener;\n+import org.apache.helix.zookeeper.zkclient.IZkDataListener;\n+import org.apache.helix.zookeeper.zkclient.IZkStateListener;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.ZkConnection;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.ZooKeeper.States;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+\n+public class ZkTestHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjEyNw==", "bodyText": "On this point, I thought about it, but I decided to keep them separate because 1) It is less confusing - TestHelper solely provides methods around testing and TestNG, and ZkTestHelper provides methods related to ZK operations. 2) From the dev perspective, we get less confused (why are there 2 helpers in helix-core vs 1 helper in zookeeper-api?) and 3) it helps us keep the classes small.", "url": "https://github.com/apache/helix/pull/1070#discussion_r436326127", "createdAt": "2020-06-07T05:21:36Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestHelper.java", "diffHunk": "@@ -0,0 +1,447 @@\n+package org.apache.helix.zookeeper.impl;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.zkclient.IZkChildListener;\n+import org.apache.helix.zookeeper.zkclient.IZkDataListener;\n+import org.apache.helix.zookeeper.zkclient.IZkStateListener;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.ZkConnection;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.ZooKeeper.States;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+\n+public class ZkTestHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNDkyOQ=="}, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMzA4NQ==", "bodyText": "Sure, I didn't find any better name either...", "url": "https://github.com/apache/helix/pull/1070#discussion_r436913085", "createdAt": "2020-06-08T18:36:40Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestHelper.java", "diffHunk": "@@ -0,0 +1,447 @@\n+package org.apache.helix.zookeeper.impl;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.zkclient.IZkChildListener;\n+import org.apache.helix.zookeeper.zkclient.IZkDataListener;\n+import org.apache.helix.zookeeper.zkclient.IZkStateListener;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.ZkConnection;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.ZooKeeper.States;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+\n+public class ZkTestHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNDkyOQ=="}, "originalCommit": {"oid": "01f114ea8585d04e76452006b83a0f15a7150bf1"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1139, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}