{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMDI4MTE2", "number": 729, "title": "Implement Helix API for updating customized state", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n(#728 )\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCurrently, Helix only supports a single state for every partition. There're increasing requests from customers to have more than one state, which is defined in Helix state model, for their practical use. For example, they may want to have read/write state, quota state, version state, etc. Helix will introduce the concept of customized state, which allows customer to define the states they are interested.\nThis PR is to implement Helix API for customers to import their customized state. The customized state is adjacent to CURRENT_STATE as a separate znode. Under this znode, there are children znodes representing each individual customized state. And each customized state is categorized by resources.\nTests\n\n The following tests are written for this issue:\n\nTestCustomizedStateUpdate.java\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Tests run: 902, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3,610.949 s <<< FAILURE! - in TestSuite\n[ERROR] testWorkflowFailureJobThreshold(org.apache.helix.integration.task.TestJobFailureDependence)  Time elapsed: 300.01 s  <<< FAILURE!\norg.testng.internal.thread.ThreadTimeoutException: Method org.testng.internal.TestNGMethod.testWorkflowFailureJobThreshold() didn't finish within the time-out 300000\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestJobFailureDependence.testWorkflowFailureJobThreshold \u00bb ThreadTimeout Metho...\n[INFO]\n[ERROR] Tests run: 902, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:00 h\n[INFO] Finished at: 2020-02-06T09:58:26-08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project helix-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /home/mnzhang/helix/helix-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-06T17:43:25Z", "url": "https://github.com/apache/helix/pull/729", "merged": true, "mergeCommit": {"oid": "106b06951803d122131e8e2189776cb3a8b60dfd"}, "closed": true, "closedAt": "2020-02-26T18:05:56Z", "author": {"login": "zhangmeng916"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBv7MaABqjMwMTUxOTA2MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH78ozgH2gAyMzcyMDI4MTE2OmNmZGFhYTIyODhmNzAwZDg3OWIwZmU1MGU3MjZjNGY5YTc2MjVmYmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a3386931ed6cccca640b1c636a5be926c55ce06", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/4a3386931ed6cccca640b1c636a5be926c55ce06", "committedDate": "2020-02-05T21:01:18Z", "message": "Implement Helix API for updating customized state"}, "afterCommit": {"oid": "916b5c6a2136a9d4569d28ff42615453db3e0e5f", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/916b5c6a2136a9d4569d28ff42615453db3e0e5f", "committedDate": "2020-02-06T19:29:14Z", "message": "Implement Helix API for updating customized state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "916b5c6a2136a9d4569d28ff42615453db3e0e5f", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/916b5c6a2136a9d4569d28ff42615453db3e0e5f", "committedDate": "2020-02-06T19:29:14Z", "message": "Implement Helix API for updating customized state"}, "afterCommit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/737d708104997ce8eaa6e3d8686e76b20d845c31", "committedDate": "2020-02-06T19:58:06Z", "message": "Implement Helix API for updating customized state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/737d708104997ce8eaa6e3d8686e76b20d845c31", "committedDate": "2020-02-06T19:58:06Z", "message": "Implement Helix API for updating customized state"}, "afterCommit": {"oid": "d16415b743f71e226a0a91bf79f2275d03165003", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/d16415b743f71e226a0a91bf79f2275d03165003", "committedDate": "2020-02-06T20:23:06Z", "message": "Implement Helix API for updating customized state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NzQyMDMz", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-354742033", "createdAt": "2020-02-06T20:16:01Z", "commit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoxODoyNFrOFmo4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyNTowOVrOFmpD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1OTkzMw==", "bodyText": "You can use _record.getLongField(CustomizedStateProperty.CURRENT_STATE.name(), NON_EXIST), while NON_EXIST = -1L as variable", "url": "https://github.com/apache/helix/pull/729#discussion_r376059933", "createdAt": "2020-02-06T20:18:24Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the state that each partition is currently in.\n+   * @return (partition, state) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap() {\n+    Map<String, String> map = new HashMap<String, String>();\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    for (String partitionName : mapFields.keySet()) {\n+      Map<String, String> tempMap = mapFields.get(partitionName);\n+      if (tempMap != null) {\n+        map.put(partitionName, tempMap.get(CustomizedStateProperty.CURRENT_STATE.name()));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Get the state of a partition on this instance\n+   * @param partitionName the name of the partition\n+   * @return the state, or null if the partition is not present\n+   */\n+  public String getState(String partitionName) {\n+    return getProperty(partitionName, CustomizedStateProperty.CURRENT_STATE);\n+  }\n+\n+  public long getStartTime(String partitionName) {\n+    String startTime = getProperty(partitionName, CustomizedStateProperty.START_TIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2MTg1OA==", "bodyText": "Better to have partitionStateMap with arguments CURRENTSTATE or PREVIOUS STATE. Will be flexible enough for future retrieving other states information.", "url": "https://github.com/apache/helix/pull/729#discussion_r376061858", "createdAt": "2020-02-06T20:22:36Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the state that each partition is currently in.\n+   * @return (partition, state) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2Mjg1Ng==", "bodyText": "From code perspective, we need to check it. But when we push data to ZK, it is better to remove non-reported entries to save spaces.", "url": "https://github.com/apache/helix/pull/729#discussion_r376062856", "createdAt": "2020-02-06T20:24:52Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the state that each partition is currently in.\n+   * @return (partition, state) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap() {\n+    Map<String, String> map = new HashMap<String, String>();\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    for (String partitionName : mapFields.keySet()) {\n+      Map<String, String> tempMap = mapFields.get(partitionName);\n+      if (tempMap != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16415b743f71e226a0a91bf79f2275d03165003"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2Mjk3Mw==", "bodyText": "Same as following.", "url": "https://github.com/apache/helix/pull/729#discussion_r376062973", "createdAt": "2020-02-06T20:25:09Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the state that each partition is currently in.\n+   * @return (partition, state) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap() {\n+    Map<String, String> map = new HashMap<String, String>();\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    for (String partitionName : mapFields.keySet()) {\n+      Map<String, String> tempMap = mapFields.get(partitionName);\n+      if (tempMap != null) {\n+        map.put(partitionName, tempMap.get(CustomizedStateProperty.CURRENT_STATE.name()));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Get the state of a partition on this instance\n+   * @param partitionName the name of the partition\n+   * @return the state, or null if the partition is not present\n+   */\n+  public String getState(String partitionName) {\n+    return getProperty(partitionName, CustomizedStateProperty.CURRENT_STATE);\n+  }\n+\n+  public long getStartTime(String partitionName) {\n+    String startTime = getProperty(partitionName, CustomizedStateProperty.START_TIME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1OTkzMw=="}, "originalCommit": {"oid": "737d708104997ce8eaa6e3d8686e76b20d845c31"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDk2MzAx", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-355496301", "createdAt": "2020-02-07T23:32:34Z", "commit": {"oid": "4b653edaf7154e5ee0895082fa814e7ef24435f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzozMjozNFrOFnNOvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzozMjozNFrOFnNOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1NTU0OA==", "bodyText": "You probably don't need this since you build the path using instanceCustomizedState", "url": "https://github.com/apache/helix/pull/729#discussion_r376655548", "createdAt": "2020-02-07T23:32:34Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java", "diffHunk": "@@ -112,6 +115,12 @@\n         \"/{clusterName}/INSTANCES/{instanceName}/CURRENTSTATES/{sessionId}/{resourceName}\");\n     addEntry(PropertyType.CURRENTSTATES, 5,\n         \"/{clusterName}/INSTANCES/{instanceName}/CURRENTSTATES/{sessionId}/{resourceName}/{bucketName}\");\n+    addEntry(PropertyType.CUSTOMIZEDSTATES, 2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b653edaf7154e5ee0895082fa814e7ef24435f6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDk5MDEw", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-355499010", "createdAt": "2020-02-07T23:42:56Z", "commit": {"oid": "4b653edaf7154e5ee0895082fa814e7ef24435f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzo0Mjo1N1rOFnNXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzo0Mjo1N1rOFnNXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1Nzc4MA==", "bodyText": "mapFields.putIfAbsent() should do the same thing but simpler", "url": "https://github.com/apache/helix/pull/729#discussion_r376657780", "createdAt": "2020-02-07T23:42:57Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+  private static long NON_EXIST = -1L;\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the specified property that each partition is currently having.\n+   * @return (partition, property) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap(CustomizedStateProperty property) {\n+    Map<String, String> map = new HashMap<String, String>();\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    for (String partitionName : mapFields.keySet()) {\n+      Map<String, String> tempMap = mapFields.get(partitionName);\n+      if (tempMap != null) {\n+        map.put(partitionName, tempMap.get(property.name()));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Get the state of a partition on this instance\n+   * @param partitionName the name of the partition\n+   * @return the state, or null if the partition is not present\n+   */\n+  public String getState(String partitionName) {\n+    return getProperty(partitionName, CustomizedStateProperty.CURRENT_STATE);\n+  }\n+\n+  public long getStartTime(String partitionName) {\n+    return _record.getLongField(CustomizedStateProperty.START_TIME.name(), NON_EXIST);\n+  }\n+\n+  public long getEndTime(String partitionName) {\n+    return _record.getLongField(CustomizedStateProperty.END_TIME.name(), NON_EXIST);\n+  }\n+\n+  public String getPreviousState(String partitionName) {\n+    return getProperty(partitionName, CustomizedStateProperty.PREVIOUS_STATE);\n+  }\n+\n+  private String getProperty(String partitionName, CustomizedStateProperty property) {\n+    Map<String, String> mapField = _record.getMapField(partitionName);\n+    if (mapField != null) {\n+      return mapField.get(property.name());\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Set the state that a partition is currently in on this instance\n+   * @param partitionName the name of the partition\n+   * @param state the state of the partition\n+   */\n+  public void setState(String partitionName, String state) {\n+    setProperty(partitionName, CustomizedStateProperty.CURRENT_STATE, state);\n+  }\n+\n+  public void setStartTime(String partitionName, long startTime) {\n+    setProperty(partitionName, CustomizedStateProperty.START_TIME, String.valueOf(startTime));\n+  }\n+\n+  public void setEndTime(String partitionName, long endTime) {\n+    setProperty(partitionName, CustomizedStateProperty.END_TIME, String.valueOf(endTime));\n+  }\n+\n+  public void setPreviousState(String partitionName, String state) {\n+    setProperty(partitionName, CustomizedStateProperty.PREVIOUS_STATE, state);\n+  }\n+\n+  private void setProperty(String partitionName, CustomizedStateProperty property, String value) {\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    if (mapFields.get(partitionName) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b653edaf7154e5ee0895082fa814e7ef24435f6"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTY2NjUz", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-356166653", "createdAt": "2020-02-10T18:34:14Z", "commit": {"oid": "08d0b7f2c25e0b065f7604a84a172daa912f1266"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODozNDoxNFrOFnw-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODozNDoxNFrOFnw-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTIwOA==", "bodyText": "This will override other partition's data, right?  You need to read existing ZNRecord back, merge your changes and update to ZK.", "url": "https://github.com/apache/helix/pull/729#discussion_r377241208", "createdAt": "2020-02-10T18:34:14Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.apache.helix.customizedstate;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.CustomizedState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class for Helix customers to operate on customized state\n+ */\n+public class CustomizedStateProvider {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedStateProvider.class);\n+  private final HelixManager _helixManager;\n+  String _instanceName;\n+\n+  public CustomizedStateProvider(HelixManager helixManager, String instanceName) {\n+    _helixManager = helixManager;\n+    _instanceName = instanceName;\n+  }\n+\n+  /**\n+   * Update the customized state based on the resource name and partition name\n+   */\n+  public synchronized void updateCustomizedState(String customizedStateName, String resourceName,\n+      String partitionName, Map<String, String> customizedState) {\n+    HelixDataAccessor accessor = _helixManager.getHelixDataAccessor();\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey =\n+        keyBuilder.customizedState(_instanceName, customizedStateName, resourceName);\n+    ZNRecord record = new ZNRecord(resourceName);\n+    Map<String, Map<String, String>> mapFields = new HashMap<>();\n+    mapFields.put(partitionName, customizedState);\n+    record.setMapFields(mapFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d0b7f2c25e0b065f7604a84a172daa912f1266"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDgzODQ2", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-358483846", "createdAt": "2020-02-13T19:18:11Z", "commit": {"oid": "7fb938800a2dc7cefdfbe32d0d35b2b5c7d5f043"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxODoxMVrOFpgWvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxODozMVrOFpgXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NjA0Ng==", "bodyText": "Remove else clause.", "url": "https://github.com/apache/helix/pull/729#discussion_r379066046", "createdAt": "2020-02-13T19:18:11Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProviderFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.customizedstate;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Singleton factory that build customized state provider.\n+ */\n+public class CustomizedStateProviderFactory {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedStateProvider.class);\n+  private final HashMap<String, CustomizedStateProvider> _customizedStateProviderMap =\n+      new HashMap<>();\n+  private HelixManager _helixManager;\n+\n+  protected CustomizedStateProviderFactory() {\n+  }\n+\n+  private static class SingletonHelper {\n+    private static final CustomizedStateProviderFactory INSTANCE =\n+        new CustomizedStateProviderFactory();\n+  }\n+\n+  public static CustomizedStateProviderFactory getInstance() {\n+    return SingletonHelper.INSTANCE;\n+  }\n+\n+  public CustomizedStateProvider buildCustomizedStateProvider(String instanceName) {\n+    if (_helixManager == null) {\n+      throw new HelixException(\"Helix Manager has not been set yet.\");\n+    } else {\n+      return buildCustomizedStateProvider(_helixManager, instanceName);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb938800a2dc7cefdfbe32d0d35b2b5c7d5f043"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NjIwOA==", "bodyText": "Same here. Remove else clause.", "url": "https://github.com/apache/helix/pull/729#discussion_r379066208", "createdAt": "2020-02-13T19:18:31Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProviderFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.customizedstate;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Singleton factory that build customized state provider.\n+ */\n+public class CustomizedStateProviderFactory {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedStateProvider.class);\n+  private final HashMap<String, CustomizedStateProvider> _customizedStateProviderMap =\n+      new HashMap<>();\n+  private HelixManager _helixManager;\n+\n+  protected CustomizedStateProviderFactory() {\n+  }\n+\n+  private static class SingletonHelper {\n+    private static final CustomizedStateProviderFactory INSTANCE =\n+        new CustomizedStateProviderFactory();\n+  }\n+\n+  public static CustomizedStateProviderFactory getInstance() {\n+    return SingletonHelper.INSTANCE;\n+  }\n+\n+  public CustomizedStateProvider buildCustomizedStateProvider(String instanceName) {\n+    if (_helixManager == null) {\n+      throw new HelixException(\"Helix Manager has not been set yet.\");\n+    } else {\n+      return buildCustomizedStateProvider(_helixManager, instanceName);\n+    }\n+  }\n+\n+  /**\n+   * Build a customized state provider based on the specified input. If the instance already has a\n+   * provider, return it. Otherwise, build a new one and put it in the map.\n+   * @param helixManager The helix manager that belongs to the instance\n+   * @param instanceName The name of the instance\n+   * @return CustomizedStateProvider\n+   */\n+  public CustomizedStateProvider buildCustomizedStateProvider(HelixManager helixManager,\n+      String instanceName) {\n+    synchronized (_customizedStateProviderMap) {\n+      if (_customizedStateProviderMap.get(instanceName) != null) {\n+        return _customizedStateProviderMap.get(instanceName);\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb938800a2dc7cefdfbe32d0d35b2b5c7d5f043"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3291cb42d624085ac989603dba05965d30f6bb5", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f3291cb42d624085ac989603dba05965d30f6bb5", "committedDate": "2020-02-24T21:50:14Z", "message": "Implement Helix API for updating customized state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8c877fbf6e6c47029ae48cea6554bee42918b5", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/bc8c877fbf6e6c47029ae48cea6554bee42918b5", "committedDate": "2020-02-24T21:50:14Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499ffe499facaa2279767b9f9dd1384a0a78c2b4", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/499ffe499facaa2279767b9f9dd1384a0a78c2b4", "committedDate": "2020-02-24T21:50:14Z", "message": "add Helix customized state provider factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c6b9bc6eda3f6804ae10e8442a762b480a7013", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/55c6b9bc6eda3f6804ae10e8442a762b480a7013", "committedDate": "2020-02-24T21:50:14Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "506aef2d07bcaa2d9d30a258f5ce06084b487a3c", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/506aef2d07bcaa2d9d30a258f5ce06084b487a3c", "committedDate": "2020-02-24T21:50:14Z", "message": "add delete operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1a7f0cc9ba08052276ceee3ca91baf2c7b0e46", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/fd1a7f0cc9ba08052276ceee3ca91baf2c7b0e46", "committedDate": "2020-02-24T21:50:14Z", "message": "add partial update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df40d429c1bc4663903f7d204c3175ff47d5b0e8", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/df40d429c1bc4663903f7d204c3175ff47d5b0e8", "committedDate": "2020-02-24T21:50:14Z", "message": "add one more function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cde71ce2341dde8fc2d726b0f95fe7af26291ae", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/2cde71ce2341dde8fc2d726b0f95fe7af26291ae", "committedDate": "2020-02-24T21:45:48Z", "message": "add one more function"}, "afterCommit": {"oid": "df40d429c1bc4663903f7d204c3175ff47d5b0e8", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/df40d429c1bc4663903f7d204c3175ff47d5b0e8", "committedDate": "2020-02-24T21:50:14Z", "message": "add one more function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzMxNjAz", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-364331603", "createdAt": "2020-02-25T18:02:52Z", "commit": {"oid": "df40d429c1bc4663903f7d204c3175ff47d5b0e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODowMjo1MlrOFuPfQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODowMjo1MlrOFuPfQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzMjU3Nw==", "bodyText": "You set start time and end time into map fields, but this getLongField gets information from simple fields right?", "url": "https://github.com/apache/helix/pull/729#discussion_r384032577", "createdAt": "2020-02-25T18:02:52Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/model/CustomizedState.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.ZNRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Customized states of partitions in a resource for an instance.\n+ */\n+public class CustomizedState extends HelixProperty {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedState.class);\n+  private static long NON_EXIST = -1L;\n+\n+  /**\n+   * Lookup keys for the customized state\n+   */\n+  public enum CustomizedStateProperty {\n+    PREVIOUS_STATE,\n+    CURRENT_STATE,\n+    START_TIME,\n+    END_TIME\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a resource\n+   * @param resourceName name identifying the resource\n+   */\n+  public CustomizedState(String resourceName) {\n+    super(resourceName);\n+  }\n+\n+  /**\n+   * Instantiate a customized state with a pre-populated ZNRecord\n+   * @param record a ZNRecord corresponding to the customized state\n+   */\n+  public CustomizedState(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  /**\n+   * Get the name of the resource\n+   * @return String resource identifier\n+   */\n+  public String getResourceName() {\n+    return _record.getId();\n+  }\n+\n+  /**\n+   * Get the partitions on this instance and the specified property that each partition is currently having.\n+   * @return (partition, property) pairs\n+   */\n+  public Map<String, String> getPartitionStateMap(CustomizedStateProperty property) {\n+    Map<String, String> map = new HashMap<String, String>();\n+    Map<String, Map<String, String>> mapFields = _record.getMapFields();\n+    for (String partitionName : mapFields.keySet()) {\n+      Map<String, String> tempMap = mapFields.get(partitionName);\n+      if (tempMap != null) {\n+        map.put(partitionName, tempMap.get(property.name()));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Get the state of a partition on this instance\n+   * @param partitionName the name of the partition\n+   * @return the state, or null if the partition is not present\n+   */\n+  public String getState(String partitionName) {\n+    return getProperty(partitionName, CustomizedStateProperty.CURRENT_STATE);\n+  }\n+\n+  public long getStartTime(String partitionName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df40d429c1bc4663903f7d204c3175ff47d5b0e8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6079c21a471a282ee3e724a7083f09b9947a91", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/6d6079c21a471a282ee3e724a7083f09b9947a91", "committedDate": "2020-02-25T19:17:36Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDc2ODk0", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-364476894", "createdAt": "2020-02-25T21:53:47Z", "commit": {"oid": "6d6079c21a471a282ee3e724a7083f09b9947a91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo1Mzo0OFrOFuWnBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo1Mzo0OFrOFuWnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0OTI1Mg==", "bodyText": "Are we sure this is required path? That's not a good idea to add this. If we add this and existing product uses Helix library for participant will have check failure since Instance is already created.", "url": "https://github.com/apache/helix/pull/729#discussion_r384149252", "createdAt": "2020-02-25T21:53:48Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java", "diffHunk": "@@ -139,6 +139,7 @@ public static boolean isInstanceSetup(HelixZkClient zkclient, String clusterName\n       requiredPaths.add(PropertyPathBuilder.instanceConfig(clusterName, instanceName));\n       requiredPaths.add(PropertyPathBuilder.instanceMessage(clusterName, instanceName));\n       requiredPaths.add(PropertyPathBuilder.instanceCurrentState(clusterName, instanceName));\n+      requiredPaths.add(PropertyPathBuilder.instanceCustomizedState(clusterName, instanceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6079c21a471a282ee3e724a7083f09b9947a91"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTIwOTE1", "url": "https://github.com/apache/helix/pull/729#pullrequestreview-364520915", "createdAt": "2020-02-25T23:17:57Z", "commit": {"oid": "6d6079c21a471a282ee3e724a7083f09b9947a91"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxNzo1N1rOFuY1Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxNzo1N1rOFuY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NTY1NA==", "bodyText": "nit: remove one of the dots in \". . \"", "url": "https://github.com/apache/helix/pull/729#discussion_r384185654", "createdAt": "2020-02-25T23:17:57Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProvider.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.apache.helix.customizedstate;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.I0Itec.zkclient.DataUpdater;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.CustomizedState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class for Helix customers to operate on customized state\n+ */\n+public class CustomizedStateProvider {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedStateProvider.class);\n+  private final HelixManager _helixManager;\n+  private final HelixDataAccessor _helixDataAccessor;\n+  private String _instanceName;\n+\n+  public CustomizedStateProvider(HelixManager helixManager, String instanceName) {\n+    _helixManager = helixManager;\n+    _instanceName = instanceName;\n+    _helixDataAccessor = _helixManager.getHelixDataAccessor();\n+  }\n+\n+  /**\n+   * Update a specific customized state based on the resource name and partition name. The\n+   * customized state is input as a single string\n+   */\n+  public synchronized void updateCustomizedState(String customizedStateName, String resourceName,\n+      String partitionName, String customizedState) {\n+    Map<String, String> customizedStateMap = new HashMap<>();\n+    customizedStateMap.put(CustomizedState.CustomizedStateProperty.CURRENT_STATE.name(), customizedState);\n+    updateCustomizedState(customizedStateName, resourceName, partitionName, customizedStateMap);\n+  }\n+\n+  /**\n+   * Update a specific customized state based on the resource name and partition name. . The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6079c21a471a282ee3e724a7083f09b9947a91"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff5f71d8e2a4cb527f8f952852080a805cefc03", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/3ff5f71d8e2a4cb527f8f952852080a805cefc03", "committedDate": "2020-02-26T00:52:46Z", "message": "remove customized state from required path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfdaaa2288f700d879b0fe50e726c4f9a7625fbb", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/cfdaaa2288f700d879b0fe50e726c4f9a7625fbb", "committedDate": "2020-02-26T00:54:11Z", "message": "minor fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4934, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}