{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDg4MDc4", "number": 1401, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1NDo0NlrOEm0vOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMDo1MVrOEm1DZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ1NDAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1NDo0NlrOHXFCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1NDo0NlrOHXFCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2MTkxNA==", "bodyText": "Here, RebalanceMode.FULL_AUTO, we will always use crushED, which means delayAutoRebalancer with CrushED\nBefore this change, it is AutoRebalancer with AutoRebalanceStrategy, both takes current state into consideration. They bestPossibleVerifier may still work, but the state mapping can be different from one run to another run", "url": "https://github.com/apache/helix/pull/1401#discussion_r493961914", "createdAt": "2020-09-23T23:54:46Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -287,7 +289,10 @@ public static void setupCluster(String clusterName, String zkAddr, int startPort\n \n       for (int i = 0; i < resourceNb; i++) {\n         String resourceName = resourceNamePrefix + i;\n-        setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef, mode.toString());\n+        setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n+            mode.name(),\n+            mode == RebalanceMode.FULL_AUTO ? CrushEdRebalanceStrategy.class.getName()\n+                : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5MzE4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNDo0MFrOHXFZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDozMTo0NlrOHXFspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzcyOA==", "bodyText": "This actually relies on the fact that\n _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"MyDB2\", _PARTITIONS, \"MasterSlave\",\n        RebalanceMode.FULL_AUTO + \"\");\n\nwould add  idea state using DelayedAutoRebalancer + AutoRebalance strategy\nhere, we change the idea state to use autoRebalancer, thus eventually we end up with autoRebalancer + autoRebalance strategy.\nThe thing is that if later people change the gSetupTool.addResourceToCluster() similar to testhelper to have DelayedAutoRebalancer + crushEd, this test won't work.\nShall we add a comment that we depends on  _gSetupTool.addResourceToCluster to use default AutoRebalanceStrategy, or just note here we need autoRebalancer + autoRebalance strategy.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493967728", "createdAt": "2020-09-24T00:14:40Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "diffHunk": "@@ -229,6 +236,16 @@ static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCou\n     return partitionCount == totalCount;\n   }\n \n+  private void setupAutoRebalancer() {\n+    HelixAdmin admin = _gSetupTool.getClusterManagementTool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MjY0NA==", "bodyText": "This test is for testing AutoRebalancer, so no matter what's the default behavior change, it is the right test logic. If it fails, then the new code change shall be fixed. I think there is no necessity of adding comment. Because this change only makes the logic more explicit.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493972644", "createdAt": "2020-09-24T00:31:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "diffHunk": "@@ -229,6 +236,16 @@ static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCou\n     return partitionCount == totalCount;\n   }\n \n+  private void setupAutoRebalancer() {\n+    HelixAdmin admin = _gSetupTool.getClusterManagementTool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzcyOA=="}, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5OTk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNzo1N1rOHXFdVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDozMzoyM1rOHXFuPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODcyNg==", "bodyText": "add a comment, we need autoRebalancer + autoRebalance strategy. here as this is testing autoRebalancer.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493968726", "createdAt": "2020-09-24T00:17:57Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "diffHunk": "@@ -54,7 +56,13 @@ public void beforeClass() throws Exception {\n     _gSetupTool.addCluster(CLUSTER_NAME, true);\n \n     _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, 100, \"OnlineOffline\",\n-        RebalanceMode.FULL_AUTO + \"\", 0, 25);\n+        RebalanceMode.FULL_AUTO.name(), 0, 25);\n+\n+    IdealState idealState =\n+        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n+    idealState.setRebalancerClassName(AutoRebalancer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MzA1NA==", "bodyText": "Sure. Let me note this is to ensure we are testing AutoRebalancer.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493973054", "createdAt": "2020-09-24T00:33:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "diffHunk": "@@ -54,7 +56,13 @@ public void beforeClass() throws Exception {\n     _gSetupTool.addCluster(CLUSTER_NAME, true);\n \n     _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, 100, \"OnlineOffline\",\n-        RebalanceMode.FULL_AUTO + \"\", 0, 25);\n+        RebalanceMode.FULL_AUTO.name(), 0, 25);\n+\n+    IdealState idealState =\n+        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n+    idealState.setRebalancerClassName(AutoRebalancer.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODcyNg=="}, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUwNDAwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMDowM1rOHXFfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDozNzo1NVrOHXFzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2OTMyOA==", "bodyText": "add a log.error please. It is better with stack trace. This would be tremendous helpful if the test fails.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493969328", "createdAt": "2020-09-24T00:20:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "diffHunk": "@@ -204,10 +215,14 @@ public boolean verify() {\n           cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n               .getStatesPriorityList().get(0);\n       int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n-      return verifyBalanceExternalView(\n-          accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n-          numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n-          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n+      try {\n+        return verifyBalanceExternalView(\n+            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n+            numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n+            cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n+      } catch (Exception e) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NDMyMA==", "bodyText": "Let me add a debug log here.\n\nIt is expected. Since the EV might not be created when the verify starts. So if we output an error message, it only pollutes the log with no good reason.\nIt will be retried in the loop. It would be too verbose if we output on every checks.", "url": "https://github.com/apache/helix/pull/1401#discussion_r493974320", "createdAt": "2020-09-24T00:37:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java", "diffHunk": "@@ -204,10 +215,14 @@ public boolean verify() {\n           cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n               .getStatesPriorityList().get(0);\n       int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n-      return verifyBalanceExternalView(\n-          accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n-          numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n-          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n+      try {\n+        return verifyBalanceExternalView(\n+            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n+            numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n+            cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n+      } catch (Exception e) {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2OTMyOA=="}, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUwNTY1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalanceWithDisabledInstance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMDo1MVrOHXFgpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMDo1MVrOHXFgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2OTU3NA==", "bodyText": "Again add the comment that we need autoRebalancer + autoRebalance strategy as this is autoRebalance test", "url": "https://github.com/apache/helix/pull/1401#discussion_r493969574", "createdAt": "2020-09-24T00:20:51Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalanceWithDisabledInstance.java", "diffHunk": "@@ -43,6 +45,7 @@ public void beforeClass() throws Exception {\n     super.beforeClass();\n     _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB_2, _PARTITIONS, STATE_MODEL,\n         RebalanceMode.FULL_AUTO.name(), CrushEdRebalanceStrategy.class.getName());\n+    setupAutoRebalancer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941b4ccd1eb0911b49b75d9e532f2a5c42c3ed3e"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 963, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}