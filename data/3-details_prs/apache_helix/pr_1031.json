{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjgyNjQy", "number": 1031, "title": "Add getIdealAssignmentForWagedFullAuto in HelixUtil for WAGED rebalancer", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #1030\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis commit adds a method, getIdealAssignmentForWagedFullAuto() in HelixUtil that returns to the user the cluster-wide assignment result obtained from running a rebalance using WAGED. The user will be able to use this method to predict how Helix will be rebalancing resources using the WAGED rebalancer.\nTests\n\n The following tests are written for this issue:\n\ntestRebalanceTool\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures:\n[ERROR]   TestEnableCompression.testEnableCompressionResource:116 \u00c2\u00bb ThreadTimeout Method...\n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected: but was:\n[ERROR]   TestDeleteJobFromJobQueue.testForceDeleteJobFromJobQueue:75 \u00c2\u00bb Helix Failed to ...\n[INFO]\n[ERROR] Tests run: 1148, Failures: 3, Errors: 0, Skipped: 0\nIndividual runs of failed tests pass.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-05-27T08:10:51Z", "url": "https://github.com/apache/helix/pull/1031", "merged": true, "mergeCommit": {"oid": "431a0961c0366ddfaac7dfc08e6c1b0bcd26f87b"}, "closed": true, "closedAt": "2020-05-29T16:20:59Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclUtnEAH2gAyNDIzNjgyNjQyOjEyMWJkZGJjMGU2MWYxMzkzMzM1ZTAzNzAzMTMzODhhMDQ1MjIzNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmE73kgH2gAyNDIzNjgyNjQyOjA3ZGUyMjMzOTYwY2EzN2IxNTBiOWVkNjNkMmZhMmEwNDZhNDFkYzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/121bddbc0e61f1393335e0370313388a0452235c", "committedDate": "2020-05-27T08:09:12Z", "message": "Add getIdealAssignmentForWagedFullAuto in HelixUtil for WAGED rebalancer\n\nThis commit adds a method, getIdealAssignmentForWagedFullAuto() in HelixUtil that returns to the user the cluster-wide assignment result obtained from running a rebalance using WAGED. The user will be able to use this method to predict how Helix will be rebalancing resources using the WAGED rebalancer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDU5MDQx", "url": "https://github.com/apache/helix/pull/1031#pullrequestreview-419459041", "createdAt": "2020-05-27T17:37:14Z", "commit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNzoxNFrOGbV2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo1Njo1OVrOGbWu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMjYyNw==", "bodyText": "Let's put this in the util or tool package? It should not be used as a rebalancer.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431322627", "createdAt": "2020-05-27T17:37:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/ReadOnlyWagedRebalancer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.apache.helix.controller.rebalancer.waged;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNDY1Mw==", "bodyText": "I feel RebalanceUtil is a better placement, although the existing method is already in the HelixUtil. What do you think?", "url": "https://github.com/apache/helix/pull/1031#discussion_r431324653", "createdAt": "2020-05-27T17:40:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNzgwNQ==", "bodyText": "The WAGED rebalancer considers all resources, so if the \"newResourceConfigs\" only contains user-specified items and we overwrite the cached map with this input map, it may return a different result. The other list/map fields have a similar concern.\n\nCan we do merge instead of overwriting? This serves for the users who want to add or modify some items.\nHow to handle requests to remove some items? I didn't have the answer yet. Will update if I have a good idea.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431327805", "createdAt": "2020-05-27T17:46:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyODU3MA==", "bodyText": "If the process fails before runStage, for example, while refreshing the cache, this accessor connection will be leaked.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431328570", "createdAt": "2020-05-27T17:47:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n+        .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n+    dataProvider.setLiveInstances(\n+        liveInstances.stream().map(LiveInstance::new).collect(Collectors.toList()));\n+    dataProvider.setIdealStates(newIdealStates);\n+    dataProvider.setResourceConfigMap(newResourceConfigs.stream()\n+        .collect(Collectors.toMap(ResourceConfig::getResourceName, Function.identity())));\n+\n+    // Create an instance of read-only WAGED rebalancer\n+    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n+        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n+            clusterConfig.getGlobalRebalancePreference());\n+\n+    // Use a dummy event to run the required stages for BestPossibleState calculation\n+    // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n+    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n+    event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(), readOnlyWagedRebalancer);\n+\n+    try {\n+      // Run the required stages to obtain the BestPossibleOutput\n+      RebalanceUtil.runStage(event, new ResourceComputationStage());\n+      RebalanceUtil.runStage(event, new CurrentStateComputationStage());\n+      RebalanceUtil.runStage(event, new BestPossibleStateCalcStage());\n+    } catch (Exception e) {\n+      LOG.error(\"getIdealAssignmentForWagedFullAuto(): Failed to compute ResourceAssignments!\", e);\n+    } finally {\n+      // Close all ZK connections\n+      baseDataAccessor.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNzE4OQ==", "bodyText": "It might be better if we have a runStages method as util. It would be easier to use, and more generic.\nOf course, we will have to refactor calcBestPossState() in the verifier to make the change.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431337189", "createdAt": "2020-05-27T17:56:59Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java", "diffHunk": "@@ -164,4 +167,25 @@ public static void scheduleOnDemandPipeline(String clusterName, long delay,\n           clusterName);\n     }\n   }\n+\n+  /**\n+   * runStage allows the run of individual stages. It can be used to mock a part of the Controller\n+   * pipeline run.\n+   *\n+   * An example usage is as follows:\n+   *       runStage(event, new ResourceComputationStage());\n+   *       runStage(event, new CurrentStateComputationStage());\n+   *       runStage(event, new BestPossibleStateCalcStage());\n+   * By running these stages, we are able to obtain BestPossibleStateOutput in the event object.\n+   * @param event\n+   * @param stage\n+   * @throws Exception\n+   */\n+  public static void runStage(ClusterEvent event, Stage stage) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/7c1f0abb492dae074399305bb8f52e8d6df33afc", "committedDate": "2020-05-28T22:21:27Z", "message": "sadf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM2ODM0", "url": "https://github.com/apache/helix/pull/1031#pullrequestreview-420536834", "createdAt": "2020-05-28T22:29:39Z", "commit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM4NTU0", "url": "https://github.com/apache/helix/pull/1031#pullrequestreview-420538554", "createdAt": "2020-05-28T22:34:10Z", "commit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNDoxMFrOGcJA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNjo1NlrOGcJELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDk4OA==", "bodyText": "nit, but why the other tests need to depend on testRebalanceTool?", "url": "https://github.com/apache/helix/pull/1031#discussion_r432160988", "createdAt": "2020-05-28T22:34:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -164,7 +214,7 @@ public void testWithInstanceTag() throws Exception {\n     validate(_replica);\n   }\n \n-  @Test(dependsOnMethods = \"test\")\n+  @Test(dependsOnMethods = \"testRebalanceTool\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTgzOQ==", "bodyText": "The \"new\" here might be confusing. So the requirement here is, actually, the caller should include all the resource IS/Configs into the input, right?", "url": "https://github.com/apache/helix/pull/1031#discussion_r432161839", "createdAt": "2020-05-28T22:36:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,82 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07de2233960ca37b150b9ed63d2fa2a046a41dc3", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/07de2233960ca37b150b9ed63d2fa2a046a41dc3", "committedDate": "2020-05-29T16:20:13Z", "message": "asdf"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4399, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}