{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDkxMTAx", "number": 1526, "title": "Leverage zk paginated getChildren API for ZkClient to fetch a large number of children", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #1525\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIf a node has many children and the packet length exceeds the network buffer limit, the ZkClient's getChildren operation will fail. There are some cases that users will expect to fetch all the children successfully. Pagination could be used to support this feature. It requires the native zk to have the paginated getChildren API.\nThis PR uses reflection to determine whether or not getChildren should use the native zk pagination api.\nChanges:\n\nAdd a system property config: zk.getChildren.pagination.disabled:\n\n\nif false, and when both zk client and server supports pagination, then the paginated api is called.\nIf true, helix zkClient will force to call non-paginated api.\n\n\nUse reflection to get the method for getting children.\nHandle exceptions thrown from reflection invoking so ZkClient can handle the exception accordingly and maintains backward compatibility.\n\nTests\n\n The following tests are written for this issue:\n\nTestZkConnection.testGetChildren\nTestZkConnection.testGetChildrenException\nSince Helix does not use the LinkedIn ZK by default, unit test is not added for testing the pagination in LinkedIn zk. But it's manually tested by changing the zk lib to LinkedIn zk and running all helix tests.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-core\n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,147.408 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:25 h\n[INFO] Finished at: 2020-12-17T19:13:28-08:00\n\nzookeeper-api\n[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 65.804 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:10 min\n[INFO] Finished at: 2020-12-17T17:45:46-08:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-11-11T10:05:45Z", "url": "https://github.com/apache/helix/pull/1526", "merged": true, "mergeCommit": {"oid": "836962ddad4f1702775a1f001e6e554520543195"}, "closed": true, "closedAt": "2020-12-18T03:53:03Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbjr6fABqjM5ODU0NTgzODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdncSfMgFqTU1NTcwODAwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc151d92e5ace92b01c26ba90af5c65b7eba80d5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/bc151d92e5ace92b01c26ba90af5c65b7eba80d5", "committedDate": "2020-11-11T09:59:44Z", "message": "Enable pagination for ZkClient getChildren"}, "afterCommit": {"oid": "1c016f50fbb20b0718d0bcc9014e6637b7b5a63c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1c016f50fbb20b0718d0bcc9014e6637b7b5a63c", "committedDate": "2020-11-11T20:06:51Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c016f50fbb20b0718d0bcc9014e6637b7b5a63c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1c016f50fbb20b0718d0bcc9014e6637b7b5a63c", "committedDate": "2020-11-11T20:06:51Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "8ed15a04a19ebd20abfa3373cd4ca99dc0b29caa", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8ed15a04a19ebd20abfa3373cd4ca99dc0b29caa", "committedDate": "2020-11-11T20:16:10Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ed15a04a19ebd20abfa3373cd4ca99dc0b29caa", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8ed15a04a19ebd20abfa3373cd4ca99dc0b29caa", "committedDate": "2020-11-11T20:16:10Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "b8b86e57b170af8cd2c4a312dcc62207731da85b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b8b86e57b170af8cd2c4a312dcc62207731da85b", "committedDate": "2020-11-11T20:18:07Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8b86e57b170af8cd2c4a312dcc62207731da85b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b8b86e57b170af8cd2c4a312dcc62207731da85b", "committedDate": "2020-11-11T20:18:07Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "74484c0d124a23ff7ddc31c4ec40a1898efe3ba7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/74484c0d124a23ff7ddc31c4ec40a1898efe3ba7", "committedDate": "2020-11-11T20:22:24Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDkwMTM2", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-528490136", "createdAt": "2020-11-11T19:56:30Z", "commit": {"oid": "bc151d92e5ace92b01c26ba90af5c65b7eba80d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NjozMVrOHxcIkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NjozMVrOHxcIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzIxNg==", "bodyText": "This implementation could be very confusing... Can we just make a ifelse statement and call the function explicitly?", "url": "https://github.com/apache/helix/pull/1526#discussion_r521603216", "createdAt": "2020-11-11T19:56:31Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +136,59 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API: if yes, use the paginated API; otherwise, fall back to\n+   * the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    checkPaginatedGetChildren();\n+    try {\n+      // This cast is correct because the list we're creating\n+      // is of the same type as the one passed in, which is List<String>.\n+      @SuppressWarnings(\"unchecked\")\n+      List<String> children = (List<String>) (_isPaginationSupported\n+          ? _getChildrenMethod.invoke(_zk, path, watch, -1, -1, -1)\n+          : _getChildrenMethod.invoke(_zk, path, watch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc151d92e5ace92b01c26ba90af5c65b7eba80d5"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74484c0d124a23ff7ddc31c4ec40a1898efe3ba7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/74484c0d124a23ff7ddc31c4ec40a1898efe3ba7", "committedDate": "2020-11-11T20:22:24Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "998ce96cef49db884e740ef02b597bef84761e41", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/998ce96cef49db884e740ef02b597bef84761e41", "committedDate": "2020-11-12T07:38:24Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dadeeaad46e2ce316e73c2b85dea3db9689448da", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/dadeeaad46e2ce316e73c2b85dea3db9689448da", "committedDate": "2020-11-13T20:49:37Z", "message": "Use linkedin zk as dependency"}, "afterCommit": {"oid": "b87a06b7f2cdc807334279415297a6edbdc9148b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b87a06b7f2cdc807334279415297a6edbdc9148b", "committedDate": "2020-11-13T21:42:47Z", "message": "Use linkedin zk as dependency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b87a06b7f2cdc807334279415297a6edbdc9148b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b87a06b7f2cdc807334279415297a6edbdc9148b", "committedDate": "2020-11-13T21:42:47Z", "message": "Use linkedin zk as dependency"}, "afterCommit": {"oid": "fefaef630ef378f8897bd9b9e4c4b086e71589d6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/fefaef630ef378f8897bd9b9e4c4b086e71589d6", "committedDate": "2020-11-18T06:06:30Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fefaef630ef378f8897bd9b9e4c4b086e71589d6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/fefaef630ef378f8897bd9b9e4c4b086e71589d6", "committedDate": "2020-11-18T06:06:30Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "e16aa33762cbf60546be96b941ec2dd0b0e00db5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e16aa33762cbf60546be96b941ec2dd0b0e00db5", "committedDate": "2020-11-18T06:16:38Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e16aa33762cbf60546be96b941ec2dd0b0e00db5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e16aa33762cbf60546be96b941ec2dd0b0e00db5", "committedDate": "2020-11-18T06:16:38Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "696952a39412bd822be194e7157583257614a640", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/696952a39412bd822be194e7157583257614a640", "committedDate": "2020-11-18T06:34:24Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "696952a39412bd822be194e7157583257614a640", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/696952a39412bd822be194e7157583257614a640", "committedDate": "2020-11-18T06:34:24Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "8e663886d10f5ccd271011ab19df5848f3d315cc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8e663886d10f5ccd271011ab19df5848f3d315cc", "committedDate": "2020-11-18T20:59:23Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f", "committedDate": "2020-11-18T21:08:46Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e663886d10f5ccd271011ab19df5848f3d315cc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8e663886d10f5ccd271011ab19df5848f3d315cc", "committedDate": "2020-11-18T20:59:23Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}, "afterCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f", "committedDate": "2020-11-18T21:08:46Z", "message": "Leverage ZK pagination api to support zkClient fetching a large number of children"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTI3MTUy", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-536927152", "createdAt": "2020-11-23T23:33:06Z", "commit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozMzowNlrOH4jiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0NDowNlrOH4jyfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ==", "bodyText": "Instead of calling this every time when client getChildren, can we just initialize the method when constructing the ZkConnection?", "url": "https://github.com/apache/helix/pull/1526#discussion_r529064541", "createdAt": "2020-11-23T23:33:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NTI0Ng==", "bodyText": "Just throw an exception. Fail earlier to block the whole logic from starting up. This is much safer than allowing a partially working client.", "url": "https://github.com/apache/helix/pull/1526#discussion_r529065246", "createdAt": "2020-11-23T23:35:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NjQxOA==", "bodyText": "nit, how about the following logic?\nif (! GETCHILDREN_PAGINATION_DISABLED) {\ntry {\n_getChildrenMethod =\nZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\nreturn;\n} catch (...) {\nlog...\n}\n}\nlookupNonPaginatedGetChildren();\nreturn;", "url": "https://github.com/apache/helix/pull/1526#discussion_r529066418", "createdAt": "2020-11-23T23:38:10Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ==", "bodyText": "In this case, do you want to retry the operation?", "url": "https://github.com/apache/helix/pull/1526#discussion_r529067805", "createdAt": "2020-11-23T23:41:49Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODY3MA==", "bodyText": "Just to confirm, as we discussed, if the ZK server is upgraded in between, the client shall be able to leverage the new API immediately, right? In this case, I assume we expect the ZkConnection object to be recreated. And I believe this is the case when we handle new session creation.\nBut what if the server upgrade is fast and the session is not expired? In this case, since you update the method here (and fallback to the older one), then the client will never use pagination call unless we restart the client.", "url": "https://github.com/apache/helix/pull/1526#discussion_r529068670", "createdAt": "2020-11-23T23:44:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTQ3MzY5", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-541147369", "createdAt": "2020-11-30T17:45:37Z", "commit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0NTozOFrOH8Ge2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0NTozOFrOH8Ge2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ==", "bodyText": "If our code can automatically detect the new API, why do we need this config option?", "url": "https://github.com/apache/helix/pull/1526#discussion_r532782809", "createdAt": "2020-11-30T17:45:38Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8dec5018e49eace3202d189c9506034ce795500e", "committedDate": "2020-12-03T20:26:48Z", "message": "Simplify code and invalidate method cache in reconnect & close"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjQ1MTcw", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-546645170", "createdAt": "2020-12-08T00:11:03Z", "commit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDoxMTowM1rOIBAvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDoxMTowM1rOIBAvrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMTY5Mg==", "bodyText": "If people are using the original patch, is this going to be problem?", "url": "https://github.com/apache/helix/pull/1526#discussion_r537931692", "createdAt": "2020-12-08T00:11:03Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/546f5d54fde413ee8a13f0c7b6051c31bd53fc3d", "committedDate": "2020-12-16T00:06:47Z", "message": "Add TODO to handle connectionloss"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjE3OTA0", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-554217904", "createdAt": "2020-12-17T01:38:33Z", "commit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozODozM1rOIHgtzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoxMTowMlrOIHhaiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0Njk1Nw==", "bodyText": "On my understanding, this is more for our internal debugging purposes. If the feature is rock solid then we don't need it.\nSo the question here is how confident are we about the pagination feature?\nAnd I think the worst case is that we allow this one to temporarily exist. We need a TODO here to remove it once the feature is stable.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544746957", "createdAt": "2020-12-17T01:38:33Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ==", "bodyText": "One suggestion here, returning the method here so the _getChildrenMethod is only referred in this method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544752511", "createdAt": "2020-12-17T01:54:16Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw==", "bodyText": "Can we just move it to the lookupGetChildrenMethod() method? I don't see any other callers of it.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544752927", "createdAt": "2020-12-17T01:55:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1ODQwOQ==", "bodyText": "Not sure if this will cause some race condition issues?\nFor example, the reconnect() cleans up the method here. And in the other application thread, the operation is about to use this object (with the same reference), then it will be an NPE.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544758409", "createdAt": "2020-12-17T02:11:02Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -102,6 +112,7 @@ protected void reconnect(Watcher watcher) throws InterruptedException {\n         LOG.debug(\"Creating new ZookKeeper instance to reconnect to \" + _servers + \".\");\n         _zk = new ZooKeeper(_servers, _sessionTimeOut, watcher);\n         prevZk.close();\n+        _getChildrenMethod = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bad6d3db982ce3ce75f2937f2eacab8917ae73f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4bad6d3db982ce3ce75f2937f2eacab8917ae73f", "committedDate": "2020-12-17T06:45:06Z", "message": "Remove method cache reset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODkyODAw", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-554892800", "createdAt": "2020-12-17T18:50:25Z", "commit": {"oid": "4bad6d3db982ce3ce75f2937f2eacab8917ae73f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1MDoyNVrOIID6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowMDo0NVrOIIEVlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMzU1OA==", "bodyText": "The question here is why the users will ever want to disable it? In theory, we can make all functions diable-able, but the project will be out of control. When you debug a user cluster, you need to check dozens of true or false options, then try to combine these variables in your mind, then check the log...\nI think I cannot manage that kind of support.\nSo if it is not absolutely necessary, I suggest not making these options permanent.\nObviously, we need it for now. My point is that it should be temporary.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545323558", "createdAt": "2020-12-17T18:50:25Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNjc4NA==", "bodyText": "This is more about style. Overall, private methods shall not directly refer to the private fields unless it is the method to update them.\nThere are 2 main benefits, from my perspective:\n\nThe private method is independent of the private field. If one side is changed, the code will either not build or work fine. In either case, we will not introduce hidden bugs.\nIn the case that we want to modulize things further, an independent private method is much easier to maintain. For example, if you want to make it a uitl method, or if you want to add more concurrent control there.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545326784", "createdAt": "2020-12-17T18:54:42Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMDU4MA==", "bodyText": "I don't get it. The comment was about the if the condition itself. I don't see any relationship between that suggestion and making it a private method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545330580", "createdAt": "2020-12-17T19:00:45Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2aaf84359192a0b60f71f8ef3e9f82b3c13c8b18", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2aaf84359192a0b60f71f8ef3e9f82b3c13c8b18", "committedDate": "2020-12-17T21:42:40Z", "message": "Add test for zkConnection"}, "afterCommit": {"oid": "9745b3bbf643398ece32dc7a366988389de65a7d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9745b3bbf643398ece32dc7a366988389de65a7d", "committedDate": "2020-12-17T23:55:24Z", "message": "Add test for zkConnection and address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d4c7343596a691dc0a595ccfb23cdcc33ba2745", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5d4c7343596a691dc0a595ccfb23cdcc33ba2745", "committedDate": "2020-12-18T03:49:18Z", "message": "Add test for zkConnection and address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9745b3bbf643398ece32dc7a366988389de65a7d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9745b3bbf643398ece32dc7a366988389de65a7d", "committedDate": "2020-12-17T23:55:24Z", "message": "Add test for zkConnection and address comments"}, "afterCommit": {"oid": "5d4c7343596a691dc0a595ccfb23cdcc33ba2745", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5d4c7343596a691dc0a595ccfb23cdcc33ba2745", "committedDate": "2020-12-18T03:49:18Z", "message": "Add test for zkConnection and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NzA4MDA0", "url": "https://github.com/apache/helix/pull/1526#pullrequestreview-555708004", "createdAt": "2020-12-18T18:14:39Z", "commit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNDozOVrOIItePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNTo0OVrOIItgkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDU0Mg==", "bodyText": "Would this cause problem if default is enabled? Let's say server version is not supporting that. Then our getChildren will keep failing in looking up the method?", "url": "https://github.com/apache/helix/pull/1526#discussion_r546004542", "createdAt": "2020-12-18T18:14:39Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -36,16 +38,23 @@\n import org.apache.zookeeper.ZooKeeper.States;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n-\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ZkConnection implements IZkConnection {\n-  private static final Logger LOG = Logger.getLogger(ZkConnection.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkConnection.class);\n \n   /** It is recommended to use quite large sessions timeouts for ZooKeeper. */\n   private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n \n+  // A config to force disabling using ZK's paginated getChildren.\n+  // By default the value is false.\n+  private static final boolean GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNTEzOA==", "bodyText": "Is this one time look up? Why we dont do it at initial stage and make it final?", "url": "https://github.com/apache/helix/pull/1526#discussion_r546005138", "createdAt": "2020-12-18T18:15:49Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4115, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}