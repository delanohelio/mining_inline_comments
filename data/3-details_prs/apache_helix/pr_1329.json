{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NTkxMTE0", "number": 1329, "title": "Continue task pipeline if currentState is null", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1322\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, if controller encounters null currentStates, it will continue the pipeline and TaskSchedulingStage. Also such currentState would not count toward the quota.\n\nTests\n\n\n The following tests are written for this issue:\nTestTaskCurrentStateNull\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nHelix-Core:\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:117 expected:<true> but was:<false>\n[ERROR]   TestEnqueueJobs.testQueueParallelJobs \u00bb ThreadTimeout Method org.testng.intern...\n[INFO] \n[ERROR] Tests run: 1175, Failures: 2, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:22 h\n[INFO] Finished at: 2020-08-28T11:46:15-07:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test passed when run individually.\nmvn test -Dtest=\"TestEnableCompression,TestEnqueueJobs\"\n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 79.623 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:25 min\n[INFO] Finished at: 2020-08-28T11:48:05-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-28T19:00:09Z", "url": "https://github.com/apache/helix/pull/1329", "merged": true, "mergeCommit": {"oid": "ef520ac0b93296db4401bcf22519954ba51a2ea8"}, "closed": true, "closedAt": "2020-08-29T15:01:10Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDXME-gH2gAyNDc1NTkxMTE0OmFlNjQ1MmJiNmYzNGUwNmVlY2JjMzAwYzNiZGMyYWU1NTdmZjRjMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDeWSLAFqTQ3ODA3OTY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17", "committedDate": "2020-08-28T16:00:01Z", "message": "Continue pipeline if currentState is null\n\nIn this commit, if controller encounters null currentStates, it will\ncontinue the pipeline and TaskSchedulingStage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDUxMTMz", "url": "https://github.com/apache/helix/pull/1329#pullrequestreview-478051133", "createdAt": "2020-08-28T22:12:51Z", "commit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxMjo1MlrOHJVw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxMjo1MlrOHJVw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NTgxNg==", "bodyText": "This is the same as recordJob2?", "url": "https://github.com/apache/helix/pull/1329#discussion_r479555816", "createdAt": "2020-08-28T22:12:52Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {\n+  protected HelixDataAccessor _accessor;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 1;\n+    super.beforeClass();\n+  }\n+\n+  @AfterClass()\n+  public void afterClass() throws Exception {\n+    super.afterClass();\n+  }\n+\n+  @Test\n+  public void testCurrentStateNull() throws Exception {\n+    String workflowName1 = TestHelper.getTestMethodName() + \"_1\";\n+    String workflowName2 = TestHelper.getTestMethodName() + \"_2\";\n+\n+    Workflow.Builder builder1 = new Workflow.Builder(workflowName1);\n+    Workflow.Builder builder2 = new Workflow.Builder(workflowName2);\n+\n+    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName1)\n+        .setNumberOfTasks(5).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    JobConfig.Builder jobBuilder2 = new JobConfig.Builder().setWorkflow(workflowName2)\n+        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    builder1.addJob(\"JOB0\", jobBuilder1);\n+    builder2.addJob(\"JOB0\", jobBuilder2);\n+\n+    _driver.start(builder1.build());\n+    _driver.start(builder2.build());\n+\n+    String namespacedJobName1 = TaskUtil.getNamespacedJobName(workflowName1, \"JOB0\");\n+    String namespacedJobName2 = TaskUtil.getNamespacedJobName(workflowName2, \"JOB0\");\n+\n+    _driver.pollForJobState(workflowName1, namespacedJobName1, TaskState.IN_PROGRESS);\n+    _driver.pollForJobState(workflowName2, namespacedJobName2, TaskState.IN_PROGRESS);\n+\n+    // Get the current states of Participant0\n+    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n+    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n+    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n+    String jobCurrentStatePath1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName1;\n+    String jobCurrentStatePath2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName2;\n+\n+    // Read the current states of Participant0 and make sure they have been created\n+    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n+      ZNRecord recordJob1 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath1, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordJob2 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath2, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordTask = _manager.getHelixDataAccessor().getBaseDataAccessor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDUxNjQ1", "url": "https://github.com/apache/helix/pull/1329#pullrequestreview-478051645", "createdAt": "2020-08-28T22:14:28Z", "commit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxNDoyOVrOHJVyjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxNDoyOVrOHJVyjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NjIzNg==", "bodyText": "I understand that this is meant to be like an Integration test, but would it make more sense to stay in TestAssignableInstanceManager? Or should there be a unit test in TestAssignableInstanceManager?", "url": "https://github.com/apache/helix/pull/1329#discussion_r479556236", "createdAt": "2020-08-28T22:14:29Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61ff2171ba192a3afcc85a4224b967b05914143", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/d61ff2171ba192a3afcc85a4224b967b05914143", "committedDate": "2020-08-28T22:32:32Z", "message": "remove redundant variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDY3OTQ0", "url": "https://github.com/apache/helix/pull/1329#pullrequestreview-478067944", "createdAt": "2020-08-28T23:14:20Z", "commit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDc5NjUy", "url": "https://github.com/apache/helix/pull/1329#pullrequestreview-478079652", "createdAt": "2020-08-29T00:20:30Z", "commit": {"oid": "d61ff2171ba192a3afcc85a4224b967b05914143"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}