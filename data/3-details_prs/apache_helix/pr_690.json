{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzcxODM5", "number": 690, "title": "Reset the WAGED rebalancer once the controller newly acquires leadership.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#660\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis is to prevent any cached assignment information which is recorded during the previous session from impacting the rebalance result.\nDetailed change list:\n\nMove the stateful WAGED rebalancer to the GenericHelixController object instead of the rebalance stage. This is for resolving the possible race condition between the event processing thread and leader switch handling thread.\nAdding a new test regarding leadership switch to verify that the WAGED rebalancer has been reset after the processing.\n\nTests\n\n The following tests are written for this issue:\n\nTestWagedRebalance.testRebalancerReset\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures:\n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\n[ERROR]   TestZKUtil.testChildrenOperations:80 expected:<2> but was:<4>\n[INFO]\n[ERROR] Tests run: 1067, Failures: 2, Errors: 0, Skipped: 0\nRe-run\n[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.357 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-18T00:47:25Z", "url": "https://github.com/apache/helix/pull/690", "merged": true, "mergeCommit": {"oid": "1f44e0bc0dc22d105ae99504fd5f18ccb180550c"}, "closed": true, "closedAt": "2020-01-27T22:07:14Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb86cP4AFqTM0NjgyMzY5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-kJANgH2gAyMzY0MzcxODM5OjEzNDU4NDFlMzAyM2NjMmYzZmZjMWUxMWE2ZGNiNzk0MDEzNTlmMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODIzNjk0", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-346823694", "createdAt": "2020-01-22T18:55:43Z", "commit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NTo0NFrOFgnQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NTo0NFrOFgnQXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ==", "bodyText": "Please comment if anyone of you has a better name. This one is not good.", "url": "https://github.com/apache/helix/pull/690#discussion_r369741919", "createdAt": "2020-01-22T18:55:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTY4OTcy", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-346968972", "createdAt": "2020-01-22T23:11:57Z", "commit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoxMTo1N1rOFguPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoxMzo0OVrOFguR_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjQzOQ==", "bodyText": "Do you mean that the old controller will continue to process events even after having lost the leadership using the in-memory rebalancer/cache state?", "url": "https://github.com/apache/helix/pull/690#discussion_r369856439", "createdAt": "2020-01-22T23:11:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NzAyMQ==", "bodyText": "Shouldn't we just discard all events from stale sessions?\nResetting the cache will trigger a fresh, up-to-date global baseline calculation anyways?", "url": "https://github.com/apache/helix/pull/690#discussion_r369857021", "createdAt": "2020-01-22T23:13:49Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTc1ODAz", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-346975803", "createdAt": "2020-01-22T23:28:46Z", "commit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyODo0N1rOFgul1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyODo0N1rOFgul1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjEwMA==", "bodyText": "Could you please explain why another pipeline is being triggered when the controller is no longer a leader?", "url": "https://github.com/apache/helix/pull/690#discussion_r369862100", "createdAt": "2020-01-22T23:28:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller\n+    // regains the leadership. The rebalancer will be reset before being used. That is the\n+    // expected behavior so as to avoid inconsistent rebalance result.\n+    // 4. Event handled shortly after leadership relinquished. And the rebalancer has been marked\n+    // as invalid. So we reset the rebalancer. But the later isLeader() check will return false and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTc3NjYz", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-346977663", "createdAt": "2020-01-22T23:33:54Z", "commit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzozMzo1NFrOFguruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0MTowNlrOFguzlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MzYxMQ==", "bodyText": "\"invalidate\"Rebalancer?", "url": "https://github.com/apache/helix/pull/690#discussion_r369863611", "createdAt": "2020-01-22T23:33:54Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {\n+    // Create WagedRebalancer instance if it hasn't been already initialized\n+    if (_rebalancer == null) {\n+      _rebalancer = new WagedRebalancer(helixManager);\n+      _isRebalancerValid = true;\n+    }\n+  }\n+\n+  /**\n+   * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+   * the next usage.\n+   */\n+  synchronized void invalidRebalancer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDE2OA==", "bodyText": "Do you think it would be better to generalize this into all rebalancers?\nFor example, RebalancerRef could be an interface here that provides things like getRebalancer() or createRebalancer(), invalidate(), etc. so that the GenericHelixController class does not depend on a specific stateful rebalancer here.", "url": "https://github.com/apache/helix/pull/690#discussion_r369864168", "createdAt": "2020-01-22T23:35:52Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDU3OA==", "bodyText": "Design suggestion:\nCould we make this generic by using RebalancerRef or StatefulRebalancerRef (since this is only a problem for stateful rebalancers)? Also, instead of directly instantiating, we could make this a cluster config and have it be dynamically created? (Waged, CrushED, etc.). That way, we decouple GenericHelixController from WAGED (or a particular rebalancer) as much as possible.\nIt would be okay to set the default type to be WAGED since this is the only stateful rebalancer we have available so far?", "url": "https://github.com/apache/helix/pull/690#discussion_r369864578", "createdAt": "2020-01-22T23:37:24Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +187,11 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the WAGED rebalancer needs to be lazily constructed, the GenericHelixController will not\n+  // be constructed with a WAGED rebalancer. This wrapper is to avoid the complexity of handling a\n+  // nullable value in the GenericHelixController logic.\n+  private final WagedRebalancerRef _wagedRebalancerRef = new WagedRebalancerRef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYyMg==", "bodyText": "If we want to follow the double-checked locking pattern for lazy initialization, we could follow the following structure using volatile:\npublic class Singleton {\n    private volatile static Singleton instance;\n    private Singleton() {}\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}", "url": "https://github.com/apache/helix/pull/690#discussion_r369865622", "createdAt": "2020-01-22T23:41:06Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82c160edc2999b878b27962e7263042336ac8eb", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/d82c160edc2999b878b27962e7263042336ac8eb", "committedDate": "2020-01-23T19:32:05Z", "message": "Reset the WAGED rebalancer once the controller newly acquires leadership.\n\nThis is to prevent any cached assignment information which is recorded during the previous session from impacting the rebalance result.\nDetailed change list:\n1. Move the stateful WAGED rebalancer to the GenericHelixController object instead of the rebalance stage. This is for resolving the possible race condition between the event processing thread and leader switch handling thread.\n2. Adding a new test regarding leadership switch to verify that the WAGED rebalancer has been reset after the processing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c1b510971aafefcb0e431295a6b56c24777fd4", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/03c1b510971aafefcb0e431295a6b56c24777fd4", "committedDate": "2020-01-23T22:03:28Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e3e985d5d79328d12bab8402a0b057a18a1dbacc", "committedDate": "2020-01-24T00:40:09Z", "message": "Adding test."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af", "committedDate": "2020-01-17T23:15:51Z", "message": "Reset the WAGED rebalancer once the controller newlly acquires leadership.\n\nThis is to prevent any cached assignment information which is record in the previous session from impacting the rebalance result.\nDetailed change list:\n  1. Move the stateful WAGED rebalancer to the GenericHelixController object instead of the rebalance stage. This is for resolving the possible race condition between the event processing thread and leader switch handling thread.\n  2. Add reset methods to all the stateful objects that are used in the WAGED rebalancer.\n  3. Refine some of the potential race condition in the WAGED rebalancer components.\n  4. Adjust the tests accordingly. Also adding new tests to cover the components reset / the WAGED rebalancer reset logic."}, "afterCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e3e985d5d79328d12bab8402a0b057a18a1dbacc", "committedDate": "2020-01-24T00:40:09Z", "message": "Adding test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTExOTc5", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-348111979", "createdAt": "2020-01-24T17:34:25Z", "commit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNDoyNVrOFhlESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0NToyMlrOFhlW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NDYzNQ==", "bodyText": "Could we add a TODO here for making it configurable (based on ClusterConfig for example) in the future as we have different versions of stateful rebalancers?\nIdeally we won't have to import WagedRebalancer explicitly (which seems like we're creating a dependency between GenericHelixController and a specific rebalancer class). I'm fine with creating an issue and getting to it later.", "url": "https://github.com/apache/helix/pull/690#discussion_r370754635", "createdAt": "2020-01-24T17:34:25Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +188,16 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the stateful rebalancer needs to be lazily constructed when the HelixManager instance is\n+  // ready, the GenericHelixController is not constructed with a stateful rebalancer. This wrapper\n+  // is to avoid the complexity of handling a nullable value in the event handling process.\n+  private final StatefulRebalancerRef _rebalancerRef = new StatefulRebalancerRef() {\n+    @Override\n+    protected StatefulRebalancer createRebalancer(HelixManager helixManager) {\n+      return new WagedRebalancer(helixManager);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NTc4MA==", "bodyText": "How do we prevent this from being called multiple times?", "url": "https://github.com/apache/helix/pull/690#discussion_r370755780", "createdAt": "2020-01-24T17:37:14Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NzA3OQ==", "bodyText": "Should we think about which methods in this class should be idempotent?\n\n\nWhy an abstract class vs an interface?", "url": "https://github.com/apache/helix/pull/690#discussion_r370757079", "createdAt": "2020-01-24T17:40:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODAyOQ==", "bodyText": "I think now, with the introduction of a StatefulRebalancer interface, having this name makes sense and pretty clear. What do you think?\nAlso, could we follow the enum convention? Use StatefulRebalancer instead?", "url": "https://github.com/apache/helix/pull/690#discussion_r370758029", "createdAt": "2020-01-24T17:42:03Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg==", "bodyText": "Should we check things on the WagedRebalancer too? is closed?", "url": "https://github.com/apache/helix/pull/690#discussion_r370758902", "createdAt": "2020-01-24T17:43:56Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ==", "bodyText": "Perhaps we should check whether the rebalancer has been closed here?", "url": "https://github.com/apache/helix/pull/690#discussion_r370759211", "createdAt": "2020-01-24T17:44:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTQxOA==", "bodyText": "We should add a TODO here for all the sleep() calls?", "url": "https://github.com/apache/helix/pull/690#discussion_r370759418", "createdAt": "2020-01-24T17:45:22Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -473,6 +473,58 @@ public void testNewInstances()\n     }\n   }\n \n+  /**\n+   * The stateful WAGED rebalancer will be reset while the controller regains the leadership.\n+   * This test is to verify if the reset has been done and the rebalancer has forgotten any previous\n+   * status after leadership switched.\n+   */\n+  @Test(dependsOnMethods = \"test\")\n+  public void testRebalancerReset() throws Exception {\n+    // Configure the rebalance preference so as to trigger more partition movements for evenness.\n+    // This is to ensure the controller will try to move something if the rebalancer has been reset.\n+    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.setGlobalRebalancePreference(ImmutableMap\n+        .of(ClusterConfig.GlobalRebalancePreferenceKey.EVENNESS, 10,\n+            ClusterConfig.GlobalRebalancePreferenceKey.LESS_MOVEMENT, 0));\n+    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    int i = 0;\n+    for (String stateModel : _testModels) {\n+      String db = \"Test-DB-\" + TestHelper.getTestMethodName() + i++;\n+      createResourceWithWagedRebalance(CLUSTER_NAME, db, stateModel, PARTITIONS, _replica,\n+          _replica);\n+      _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, db, _replica);\n+      _allDBs.add(db);\n+    }\n+    Thread.sleep(300);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/40c7f029ba959c45e7697052cef717529afda49d", "committedDate": "2020-01-24T18:49:38Z", "message": "Address comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTIxNzI2", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-348921726", "createdAt": "2020-01-27T19:35:48Z", "commit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTozNTo0OFrOFiO7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTozNTo0OFrOFiO7EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDQwMA==", "bodyText": "Should we follow the lazy-initialization idiom (using volatile keyword on the singleton objects)?", "url": "https://github.com/apache/helix/pull/690#discussion_r371440400", "createdAt": "2020-01-27T19:35:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1293,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);\n+\n+    /**\n+     * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+     * the next usage.\n+     */\n+    synchronized void invalidateRebalancer() {\n+      _isRebalancerValid = false;\n+    }\n+\n+    /**\n+     * @return A valid rebalancer object.\n+     *         If the rebalancer is no longer valid, it will be reset before returning.\n+     */\n+    synchronized T getRebalancer(HelixManager helixManager) {\n+      // Lazily initialize the stateful rebalancer instance since the GenericHelixController\n+      // instance is instantiated without the HelixManager information that is required.\n+      if (_rebalancer == null) {\n+        _rebalancer = createRebalancer(helixManager);\n+        _isRebalancerValid = true;\n+      }\n+      // If the rebalance exists but has been marked as invalid (due to leadership switch), it needs\n+      // to be reset before return.\n+      if (!_isRebalancerValid) {\n+        _rebalancer.reset();\n+        _isRebalancerValid = true;\n+      }\n+      return _rebalancer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTk3Mzk3", "url": "https://github.com/apache/helix/pull/690#pullrequestreview-348997397", "createdAt": "2020-01-27T21:45:49Z", "commit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1345841e3023cc2f3ffc1e11a6dcb79401359f17", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/1345841e3023cc2f3ffc1e11a6dcb79401359f17", "committedDate": "2020-01-27T22:04:39Z", "message": "Address comment."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4871, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}