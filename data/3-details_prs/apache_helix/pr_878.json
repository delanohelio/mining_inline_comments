{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzM5NDE4", "number": 878, "title": "Get the MinActiveReplica from Resource Config and Idea State", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#877\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nRead the MinActiveReplica config from both Resource Config and Idea State.\nCurrently, the same configuration item can be configured in both Resource Config and Ideal State. In theory, the Resource Config is the right place.\nThis is the first step to migrate the IdealState usage to read the Resource Config.\nTests\n\n The following tests are written for this issue:\n\nTestResourceConfig.testMergeWithIdealState\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nResults :\nFailed tests:\norg.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)\nRun 1: PASS\nRun 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:250 \u00bb ZkClient Failed to...\nTests run: 1086, Failures: 1, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\nRerun\nResults :\nTests run: 8, Failures: 0, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\nHelix-rest:\nResults :\nTests run: 99, Failures: 0, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 37.005 s\n[INFO] Finished at: 2020-03-10T11:16:28-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-09T18:10:18Z", "url": "https://github.com/apache/helix/pull/878", "merged": true, "mergeCommit": {"oid": "e5c2a2332231c03c87b1f03f6e3b4715c8910c7f"}, "closed": true, "closedAt": "2020-03-11T17:55:47Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMDWp5AFqTM3MTQ3OTA1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMhhyqgFqTM3MjUxMDg4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDc5MDU4", "url": "https://github.com/apache/helix/pull/878#pullrequestreview-371479058", "createdAt": "2020-03-09T19:47:38Z", "commit": {"oid": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NzozOFrOFz28Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NzozOFrOFz28Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTg2Ng==", "bodyText": "I see a lot of duplicate code here -\ncould we just create an array of all ResourceConfig.ResourceConfigPropertys and just copy the fields?", "url": "https://github.com/apache/helix/pull/878#discussion_r389921866", "createdAt": "2020-03-09T19:47:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,89 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    // Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+    // 1. The fields shall have exactly the same meaning.\n+    // 2. The value shall be fully compatible, no additional calculation involved.\n+    // 3. Resource Config items have a high priority.\n+\n+    // Return a newly constructed resource config to avoid the original value be modified.\n+    ResourceConfig mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n+          idealState.getInstanceGroupTag());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n+              idealState.getMaxPartitionsPerInstance());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.NUM_PARTITIONS.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfigProperty.NUM_PARTITIONS.name(), idealState.getNumPartitions());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n+              idealState.getStateModelDefRef());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n+              idealState.getStateModelFactoryName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n+          idealState.getReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name())) {\n+      mergedZNRecord.setIntField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n+          idealState.getMinActiveReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name())) {\n+      mergedZNRecord.setBooleanField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n+          idealState.isEnabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n+              idealState.getResourceGroupName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n+          idealState.getResourceType());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n+              idealState.isExternalViewDisabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n+              idealState.isDelayRebalanceEnabled());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/62f94d8e89632a0a965f3b2ca3f1b8b2914f887b", "committedDate": "2020-03-07T01:06:34Z", "message": "Migrate the IdealState usage to read Resource Config for the delayed rebalance.\n\nCurrently, the same configuration item can be configured in both Resource Config and Ideal State. In theory, the Resource Config is the right place.\nThis is the first step to migrate the IdealState usage to read the Resource Config.\nMoving forward, IdealState should not be a method for the controller to take input. And any ideal state update to the IS nodes won't trigger a rebalance pipeline."}, "afterCommit": {"oid": "77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "committedDate": "2020-03-09T21:28:15Z", "message": "Add test."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "committedDate": "2020-03-09T21:28:15Z", "message": "Add test."}, "afterCommit": {"oid": "45d582090a58d919c6d10ecedffe4d05093a35e0", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/45d582090a58d919c6d10ecedffe4d05093a35e0", "committedDate": "2020-03-10T01:12:03Z", "message": "Add test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7b8ea04dbef90586a1c54182f52f9b978cdce1", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0d7b8ea04dbef90586a1c54182f52f9b978cdce1", "committedDate": "2020-03-10T17:59:44Z", "message": "Migrate the IdealState usage to read Resource Config for the delayed rebalance.\n\nCurrently, the same configuration item can be configured in both Resource Config and Ideal State. In theory, the Resource Config is the right place.\nThis is the first step to migrate the IdealState usage to read the Resource Config.\nMoving forward, IdealState should not be a method for the controller to take input. And any ideal state update to the IS nodes won't trigger a rebalance pipeline."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de40fc40d6c38c3ce32f2b40b047081fb687c8c5", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/de40fc40d6c38c3ce32f2b40b047081fb687c8c5", "committedDate": "2020-03-10T17:59:44Z", "message": "Add setXXXIfAbsent methods to the ZNRecord for simplifying code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9bb43ecc8383df7284e0c3e30fdb625f02741a", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/6c9bb43ecc8383df7284e0c3e30fdb625f02741a", "committedDate": "2020-03-10T17:59:44Z", "message": "Add test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/2564adeda51fc4350d240b03dd2eba0d82a928da", "committedDate": "2020-03-10T21:33:30Z", "message": "Add redundent paramter IdealState to the DelayedRebalanceUtil.getMinActiveReplica() before we fully migrate the configs to the resource config to avoid incorrect usage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45d582090a58d919c6d10ecedffe4d05093a35e0", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/45d582090a58d919c6d10ecedffe4d05093a35e0", "committedDate": "2020-03-10T01:12:03Z", "message": "Add test."}, "afterCommit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/2564adeda51fc4350d240b03dd2eba0d82a928da", "committedDate": "2020-03-10T21:33:30Z", "message": "Add redundent paramter IdealState to the DelayedRebalanceUtil.getMinActiveReplica() before we fully migrate the configs to the resource config to avoid incorrect usage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQ1MTQy", "url": "https://github.com/apache/helix/pull/878#pullrequestreview-372345142", "createdAt": "2020-03-10T21:47:13Z", "commit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NzoxM1rOF0iNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NzoxM1rOF0iNAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDY1OQ==", "bodyText": "Can we make a list of constants for these necessary field and use a loop to do the merge instead of have these code?", "url": "https://github.com/apache/helix/pull/878#discussion_r390630659", "createdAt": "2020-03-10T21:47:13Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,72 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   *\n+   * Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+   *  1. The fields shall have exactly the same meaning.\n+   *  2. The value shall be fully compatible, no additional calculation involved.\n+   *  3. Resource Config items have a high priority.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    if (idealState == null) {\n+      return resourceConfig;\n+    }\n+    ResourceConfig mergedResourceConfig;\n+    if (resourceConfig != null) {\n+      if (!resourceConfig.getResourceName().equals(idealState.getResourceName())) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Cannot merge the IdealState of resource %s with the ResourceConfig of resource %s\",\n+            resourceConfig.getResourceName(), idealState.getResourceName()));\n+      }\n+      // Copy the resource config to avoid the original value being modified unexpectedly.\n+      mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    } else {\n+      // If no resource config specified, construct one based on the Idealstate.\n+      mergedResourceConfig = new ResourceConfig(idealState.getResourceName());\n+    }\n+    // Fill the compatible Idealstate fields to the ResourceConfig if possible.\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTEwODg3", "url": "https://github.com/apache/helix/pull/878#pullrequestreview-372510887", "createdAt": "2020-03-11T06:56:57Z", "commit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}