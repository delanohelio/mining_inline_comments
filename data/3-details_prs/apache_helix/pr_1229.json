{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjUwNzQ3", "number": 1229, "title": "Add JarLoader interface and LocalJarLoader class", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1228\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR adds JarLoader interface and LocalJarLoader class which implements this interface to load JAR files that contain task classes which we want to dynamically load in the Participant.\nTests\n\n The following tests are written for this issue:\n\nNo tests were written, as this PR only adds an interface and a class to the project.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nSince the PR doesn't modify any existing code, it's not going to cause any test failures. The following is the build result:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for Apache Helix 1.0.2-SNAPSHOT:\n[INFO] \n[INFO] Apache Helix ....................................... SUCCESS [  2.936 s]\n[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  3.749 s]\n[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [  2.363 s]\n[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [  5.089 s]\n[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  3.137 s]\n[INFO] Apache Helix :: Core ............................... SUCCESS [ 36.918 s]\n[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  6.789 s]\n[INFO] Apache Helix :: Restful Interface .................. SUCCESS [ 11.578 s]\n[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [  1.888 s]\n[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  2.996 s]\n[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.038 s]\n[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  1.241 s]\n[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  1.386 s]\n[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  1.019 s]\n[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  1.131 s]\n[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  1.058 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:24 min\n[INFO] Finished at: 2020-08-07T07:52:04-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-07T14:55:51Z", "url": "https://github.com/apache/helix/pull/1229", "merged": true, "mergeCommit": {"oid": "810099646b169230359abb95e5eff92ba601e240"}, "closed": true, "closedAt": "2020-08-12T16:33:27Z", "author": {"login": "rabashizade"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8nitigFqTQ2MzQ2ODk0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-MOc9AH2gAyNDY0NjUwNzQ3OmUzM2NiZmRlYjliZDY5YzcyOTJlMGY3M2I5NWZhN2ZjOTk4ZDlmMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDY4OTQ5", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-463468949", "createdAt": "2020-08-07T17:05:45Z", "commit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo0NVrOG9hXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo0NVrOG9hXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjkyMg==", "bodyText": "Why is this part of this PR? I thought you had created a PR for this already?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467162922", "createdAt": "2020-08-07T17:05:45Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDY5MTAw", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-463469100", "createdAt": "2020-08-07T17:05:59Z", "commit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1OVrOG9hXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1OVrOG9hXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzAyNA==", "bodyText": "Why is this change part of this PR? Did you rebase from https://github.com/apache/helix/tree/dynamically-loaded-task?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467163024", "createdAt": "2020-08-07T17:05:59Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDcwNzA5", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-463470709", "createdAt": "2020-08-07T17:08:47Z", "commit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODo0OFrOG9hcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODo0OFrOG9hcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA==", "bodyText": "Question: What would the returned URL look like for a local JAR? Could you give some examples here?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467164328", "createdAt": "2020-08-07T17:08:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDcxNjA1", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-463471605", "createdAt": "2020-08-07T17:10:16Z", "commit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMDoxNlrOG9hfxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMDoxNlrOG9hfxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTEyNA==", "bodyText": "Let's refactor this. The way it's written is slightly awkward:\nLet's use the following format:\nif (error condition is met) {\n  throw Exception;\n}\nreturn result;", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165124", "createdAt": "2020-08-07T17:10:16Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDcyNDY1", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-463472465", "createdAt": "2020-08-07T17:11:43Z", "commit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMTo0M1rOG9hiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMTo0M1rOG9hiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTgzNQ==", "bodyText": "It seems that new File() only throws\nNullPointerException - If uri is null\nIllegalArgumentException - If the preconditions on the parameter do not hold\nper https://docs.oracle.com/javase/7/docs/api/java/io/File.html.\nWhy are we catching MalformedURLException that's not thrown by anyone?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165835", "createdAt": "2020-08-07T17:11:43Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    } catch (MalformedURLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1751030650861814d64e7b594a9f3cddda8acb36", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/1751030650861814d64e7b594a9f3cddda8acb36", "committedDate": "2020-08-07T17:52:21Z", "message": "Add DynamicTaskConfig to store task configs in ZK\n\nAdds DynamicTaskConfig class, which is a wrapper for ZNRecord, to store\nand access the configs for dynamically loaded tasks in ZK.\n\nAlso adds the appropriate constants to TaskConstants."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5a168a8a2e696f41901d79e1fecea52db36a7c", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/bf5a168a8a2e696f41901d79e1fecea52db36a7c", "committedDate": "2020-08-07T18:03:10Z", "message": "Add JarLoader interface and LocalJarLoader implementation\n\nAdds JarLoader interface to load JAR files that contain task classes\nwhich we want to dynamically load.\n\nAlso adds LocalJarLoader implementation of JarLoader interface which\nloads a JAR file from a local directory."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/4fc4012e983800eb8eb75753b63e24254cecdf3d", "committedDate": "2020-08-07T14:40:00Z", "message": "Add JarLoader interface and LocalJarLoader implementation\n\nAdds JarLoader interface to load JAR files that contain task classes\nwhich we want to dynamically load.\n\nAlso adds LocalJarLoader implementation of JarLoader interface which\nloads a JAR file from a local directory."}, "afterCommit": {"oid": "bf5a168a8a2e696f41901d79e1fecea52db36a7c", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/bf5a168a8a2e696f41901d79e1fecea52db36a7c", "committedDate": "2020-08-07T18:03:10Z", "message": "Add JarLoader interface and LocalJarLoader implementation\n\nAdds JarLoader interface to load JAR files that contain task classes\nwhich we want to dynamically load.\n\nAlso adds LocalJarLoader implementation of JarLoader interface which\nloads a JAR file from a local directory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75040dc3b93126fa81d3326263513ac9b5c22dad", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/75040dc3b93126fa81d3326263513ac9b5c22dad", "committedDate": "2020-08-07T18:05:00Z", "message": "Add missing new line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "committedDate": "2020-08-08T16:43:36Z", "message": "Reorganize LocalJarLoader to be clearer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTYwOTE0", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-464560914", "createdAt": "2020-08-10T20:23:06Z", "commit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzowNlrOG-efpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzowNlrOG-efpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg==", "bodyText": "Wouldn't IllegalArgument be more appropriate?", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164516", "createdAt": "2020-08-10T20:23:06Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTYxMjI3", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-464561227", "createdAt": "2020-08-10T20:23:38Z", "commit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzozOFrOG-egnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzozOFrOG-egnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDc2NQ==", "bodyText": "IllegalArgument since the input is malformed?", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164765", "createdAt": "2020-08-10T20:23:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    }\n+\n+    try {\n+      return taskJarFile.toURI().toURL();\n+    } catch (MalformedURLException e) {\n+      LOG.error(\"Failed to open JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"Malformed JAR URL for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTYxNDgz", "url": "https://github.com/apache/helix/pull/1229#pullrequestreview-464561483", "createdAt": "2020-08-10T20:24:01Z", "commit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33cbfdeb9bd69c7292e0f73b95fa7fc998d9f04", "author": {"user": {"login": "rabashizade", "name": "Ramin Bashizade"}}, "url": "https://github.com/apache/helix/commit/e33cbfdeb9bd69c7292e0f73b95fa7fc998d9f04", "committedDate": "2020-08-12T14:24:02Z", "message": "Change exception types to be more clear"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4202, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}