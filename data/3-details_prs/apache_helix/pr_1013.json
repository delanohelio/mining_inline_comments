{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzQ2ODk5", "number": 1013, "title": "Add timeout for stoppable post request", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR title:\nFixes #1012\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, http timeout has been added for the POST requests\nwhich is mainly used for REST's stoppable check.\n\nTests\n\n\n The following tests are written for this issue:\nTestCustomRestClient.testGetPartitionStoppableCheck_when_timeout\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nHelix-Core\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestStateTransitionTimeout.testStateTransitionTimeOut:170 expected:<true> but was:<false>\n[ERROR]   TestUpdateWorkflow.testUpdateRunningQueue:82 expected:<true> but was:<false>\n[ERROR]   TestWorkflowTermination.testWorkflowPausedTimeout:170->verifyWorkflowCleanup:257 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1146, Failures: 3, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:22 h\n[INFO] Finished at: 2020-05-14T21:41:45-07:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed tests have passed when I ran them individually.\nmvn test -Dtest=\"TestStateTransitionTimeout,TestUpdateWorkflow,TestWorkflowTermination\"\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 62.382 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:07 min\n[INFO] Finished at: 2020-05-15T11:29:16-07:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-REST:\n[INFO] Tests run: 160, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 41.568 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 160, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  47.282 s\n[INFO] Finished at: 2020-05-15T11:46:34-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-05-15T18:47:18Z", "url": "https://github.com/apache/helix/pull/1013", "merged": true, "mergeCommit": {"oid": "0a8dcf4b54c805c006427a69244fb3652b41e24d"}, "closed": true, "closedAt": "2020-05-22T22:19:37Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchlG8HgH2gAyNDE4NzQ2ODk5OjA2MjBjMGFiMDI2M2Q3ZWJiOTQyZDA1MmFhMmEzYTMyODgwZTZjMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjk1ssAH2gAyNDE4NzQ2ODk5OmJkMzY0ODFiOTRlZGMxMDM3OTUwMDFmN2VjMTI4YmY3NDNjZDI5OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0620c0ab0263d7ebb942d052aa2a3a32880e6c08", "committedDate": "2020-05-15T16:59:39Z", "message": "Add timeout for stoppable post request\n\nIn this commit, a http timeout has been added for the POST requests\nwhich is mainly used for REST's stoppable check."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTc4ODA4", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-412978808", "createdAt": "2020-05-15T21:28:38Z", "commit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyODozOFrOGWUXJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozMjo0MFrOGWUczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ2MA==", "bodyText": "Is this strictly for Helix REST? In that case, should we try to put this in a PropertyKey constant file in the helix-rest module?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426055460", "createdAt": "2020-05-15T21:28:38Z", "author": {"login": "narendly"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -78,4 +78,7 @@\n   // System Property Metadata Store Directory Server endpoint key\n   public static final String MSDS_SERVER_ENDPOINT_KEY =\n       MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY;\n+\n+  // System property for request timeout\n+  public static final String HTTP_REQUEST_TIMEOUT = \"http.request.timeout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTY4Mg==", "bodyText": "For timeout values, we usually use long type.\n60 * 1000L;", "url": "https://github.com/apache/helix/pull/1013#discussion_r426055682", "createdAt": "2020-05-15T21:29:15Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjIzNA==", "bodyText": "Do we want to set the socket and connect timeout as well? Those two seem unrelated to the problem you're solving. I am not saying we shouldn't necessarily, but we should understand the implications of setting such configs.\nAlso it would be good to add a line of comment describing what you're doing here.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056234", "createdAt": "2020-05-15T21:30:43Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -44,14 +51,17 @@ public static CustomRestClient get() {\n         if (INSTANCE == null) {\n           try {\n             HttpClient httpClient;\n+            RequestConfig config = RequestConfig.custom().setConnectTimeout(_httpRequestTimeout)\n+                .setConnectionRequestTimeout(_httpRequestTimeout)\n+                .setSocketTimeout(_httpRequestTimeout).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjY3MQ==", "bodyText": ":\"back to its original value\" -> where is the original value set?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056671", "createdAt": "2020-05-15T21:32:03Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to its original value\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"60000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjcyNg==", "bodyText": "Use long", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056726", "createdAt": "2020-05-15T21:32:13Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {\n+    private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NjkwOA==", "bodyText": "Please fix typos.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426056908", "createdAt": "2020-05-15T21:32:40Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTMzNTAz", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-413133503", "createdAt": "2020-05-17T07:07:21Z", "commit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzowNzoyMVrOGWeyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODozNjo1MFrOGWiv2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjI3MA==", "bodyText": "+1. There are other places like MSDS that also have timeout config. This should be narrow down to helix rest or even stoppable.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426226270", "createdAt": "2020-05-17T07:07:21Z", "author": {"login": "huizhilu"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -78,4 +78,7 @@\n   // System Property Metadata Store Directory Server endpoint key\n   public static final String MSDS_SERVER_ENDPOINT_KEY =\n       MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY;\n+\n+  // System property for request timeout\n+  public static final String HTTP_REQUEST_TIMEOUT = \"http.request.timeout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQ2MA=="}, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjQxMQ==", "bodyText": "Could combine DEFAULT_HTTP_REQUEST_TIMEOUT and this, right? And also this var is static final, would be better to name it a constant?\nBack from your test, if we don't make this a constant but a local var in get(), we could avoid the MockCustomRestClientFactory by resetting the instance using reflection.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426226411", "createdAt": "2020-05-17T07:09:04Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzczMA==", "bodyText": "What's the purpose of logging and throwing exception?\nBy checking the calling stack, I don't think it is necessary. ConnectTimeoutException also extends IOException which is already caught. The upper method getHealthStatusFromRest catches this exception and logs. If you log and throw here, there would be two error messages which are confusing and redundant. Eg, in the test you write, we would see the error log in our test output if we set logging level to print errors. And it is quite confusing.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426227730", "createdAt": "2020-05-17T07:24:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -130,6 +131,11 @@ protected HttpResponse post(String url, Map<String, String> payloads) throws IOE\n       LOG.info(\"Executing request: {}, headers: {}, entity: {}\", postRequest.getRequestLine(),\n           postRequest.getAllHeaders(), postRequest.getEntity());\n       return _httpClient.execute(postRequest);\n+    } catch (ConnectTimeoutException e) {\n+      LOG.error(\n+          \"Failed to perform customized health check due to ConnectTimeoutException for endpoint {}.\",\n+          url, e);\n+      throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMzY4NA==", "bodyText": "This mock class implements the almost the same logic of the parent class. The cons are:\n\nduplicate code\ndifficult to maintain. if the parent class changes its logic, it is not easy to find this mock class and change this logic. If this child class is not changed, the test is actually testing the child class, not the logic in parent class.\n\nThere is a trick to avoid this duplicate and unnecessary mock class. We could use Java reflection to change the class's internal state, so the singleton would be re-initialized. And to be able to make the new instance use the new system property, the system property variable needs to be in a local one in get().\n// reset the singleton instance.\nField instance = Parent.class.getDeclaredField(\"INSTANCE\");\ninstance.setAccessible(true);\ninstance.set(null, null);", "url": "https://github.com/apache/helix/pull/1013#discussion_r426233684", "createdAt": "2020-05-17T08:34:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -161,4 +179,35 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       return new ObjectMapper().readTree(_jsonResponse);\n     }\n   }\n+\n+  /**\n+   * This MockCustomRestClientFactory is necessary to have for testing because once an INSTANCE is\n+   * initialized in CustomRestClientFactory while running \"mvn test\" , it will no re-initialize the\n+   * INSTANCE with new HelixProperty. Hence this class makes sure that new CustomRestClient will be\n+   * created with the timeout set to the new value.\n+   */\n+  private static class MockCustomRestClientFactory extends CustomRestClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDkyOQ==", "bodyText": "It seems we should also change this to make it volatile so it is safe for double lock checking. But we should do it in another PR. Reference: #1014", "url": "https://github.com/apache/helix/pull/1013#discussion_r426234929", "createdAt": "2020-05-17T08:47:16Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,10 +36,13 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n+  private static final int DEFAULT_HTTP_REQUEST_TIMEOUT = 60 * 1000;\n+  private static final int _httpRequestTimeout = HelixUtil.getSystemPropertyAsInt(\n+      SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, DEFAULT_HTTP_REQUEST_TIMEOUT);\n \n   private static CustomRestClient INSTANCE = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjA2NQ==", "bodyText": "This is unnecessary as the exception is thrown from post(). I suggest using try...catch so it is easier to know which code is tested. With expectedExceptions, it is not easy to know which line of code is expected to throw the exception as this method has multiple lines and API calls. If calling _customRestClient.getInstanceStoppableCheck, it is more like an integration test not a unit test. And as you state in the method name testPostRequestSmallTimeout, it is supposed to be testing the post(), right?", "url": "https://github.com/apache/helix/pull/1013#discussion_r426286065", "createdAt": "2020-05-17T17:37:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = MockCustomRestClientFactory.get();\n+    _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTE2MQ==", "bodyText": "I don't think it is a good idea to connect to an external host/service for testing. What if my testing machine doesn't have network? Are we still going to get the expected exception? The answer is no. Instead, something else like UnknownHostException would be thrown. And this test does not achieve the purpose.\nIn a unit test, and in this case, I would not want to actually connect to a real REST server. Connecting to a real server is technically more an integration test. Though we have a local server started in AbstractTestClass, I would suggest mocking the timeout scenario for this unit test instead of connecting to a real server.", "url": "https://github.com/apache/helix/pull/1013#discussion_r426291161", "createdAt": "2020-05-17T18:36:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +150,19 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test(expectedExceptions = ConnectTimeoutException.class)\n+  public void testPostRequestSmallTimeout() throws IOException {\n+    // Set 1 ms to cause timeout for requests\n+    System.setProperty(SystemPropertyKeys.HTTP_REQUEST_TIMEOUT, \"1\");\n+    // a popular echo server that echos all the inputs\n+    final String echoServer = \"http://httpbin.org/post\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0620c0ab0263d7ebb942d052aa2a3a32880e6c08"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4cf79206ced79a87f4c04890cd7fac6e59fcb4f", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/c4cf79206ced79a87f4c04890cd7fac6e59fcb4f", "committedDate": "2020-05-20T20:29:39Z", "message": "Address the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba2633e3dacc50b941cdc64632b5773ea054f13", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/7ba2633e3dacc50b941cdc64632b5773ea054f13", "committedDate": "2020-05-20T20:45:41Z", "message": "change the server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzI3MjIy", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-415727222", "createdAt": "2020-05-20T21:28:17Z", "commit": {"oid": "7ba2633e3dacc50b941cdc64632b5773ea054f13"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToyODoxN1rOGYea9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToyODoxN1rOGYea9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxNzQyOQ==", "bodyText": "Let's put this number to some constant file or at least to be a variable", "url": "https://github.com/apache/helix/pull/1013#discussion_r428317429", "createdAt": "2020-05-20T21:28:17Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientFactory.java", "diffHunk": "@@ -32,26 +37,32 @@\n  */\n public class CustomRestClientFactory {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomRestClientFactory.class);\n-\n   private static CustomRestClient INSTANCE = null;\n \n-  private CustomRestClientFactory() {\n+  protected CustomRestClientFactory() {\n   }\n \n   public static CustomRestClient get() {\n     if (INSTANCE == null) {\n       synchronized (CustomRestClientFactory.class) {\n         if (INSTANCE == null) {\n           try {\n+            // Here int has been used for timeout value because setConnectTimeout,\n+            // setConnectionRequestTimeout and setSocketTimeout are getting int as input\n+            final int httpRequestTimeout =\n+                HelixUtil.getSystemPropertyAsInt(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, 60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba2633e3dacc50b941cdc64632b5773ea054f13"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/a3c191f2224124ee4ee1ef34375c59ec6bf8ed68", "committedDate": "2020-05-20T21:58:39Z", "message": "Move default to constant files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODUwMTcx", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-415850171", "createdAt": "2020-05-21T03:09:42Z", "commit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzowOTo0MlrOGYkwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNTozOFrOGYk1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTE1Ng==", "bodyText": "Why is this reset to a hard coded timeout? What if the timeout is changed, you setting it here 60000 would break the original value. The correct way should be to backup the original property and set it back here.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428421156", "createdAt": "2020-05-21T03:09:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException\n+      timeoutExceptionHappened = true;\n+    }\n+    // Reset the HTTP_REQUEST_TIMEOUT property back to the default value\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"60000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTk2Ng==", "bodyText": "I am not sure if I am convinced by this. What if it is fast enough to complete the request in 1 ms? It may not happen, but theoretically it could. This is relying on possibility of timeout..", "url": "https://github.com/apache/helix/pull/1013#discussion_r428421966", "createdAt": "2020-05-21T03:13:03Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +148,35 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetInstanceStoppableCheckSmallTimeout() throws Exception {\n+    // Reset the INSTANCE in CustomRestClientFactory to create new one with new TimeOut\n+    Field instance = CustomRestClientFactory.class.getDeclaredField(\"INSTANCE\");\n+    instance.setAccessible(true);\n+    instance.set(null, null);\n+\n+    // Set 1 ms to cause timeout for http requests\n+    System.setProperty(RestSystemPropertyKeys.HTTP_TIMEOUT_MS, \"1\");\n+    // a popular echo server that echos all the inputs\n+    // TODO: add a mock rest server\n+    final String echoServer = \"http://httpbin.org/post\";\n+    CustomRestClient _customRestClient = CustomRestClientFactory.get();\n+    boolean timeoutExceptionHappened = false;\n+    try {\n+      _customRestClient.getInstanceStoppableCheck(echoServer, Collections.emptyMap());\n+    } catch (ConnectTimeoutException e) {\n+      // Since the timeout is so small, we are expecting to get ConnectTimeoutException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjU1Ng==", "bodyText": "Is this changed? Like I said in previous thread, The property name is too generic. If this is set, it indicates that all http in helix should be using the config. However this is not the case. Should be narrowed down to helix rest or even stoppable.", "url": "https://github.com/apache/helix/pull/1013#discussion_r428422556", "createdAt": "2020-05-21T03:15:38Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/RestSystemPropertyKeys.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.helix.rest.common;\n+\n+public class RestSystemPropertyKeys {\n+  // System property for request timeout\n+  public static final String HTTP_TIMEOUT_MS = \"http.timeout.ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c191f2224124ee4ee1ef34375c59ec6bf8ed68"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8deb8a8ee442a86443aff00f5c1e08194c854f53", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/8deb8a8ee442a86443aff00f5c1e08194c854f53", "committedDate": "2020-05-21T16:32:17Z", "message": "Change the test to Mock"}, "afterCommit": {"oid": "0cd4c668ffd0856cf5fe2501cd2ca14400eed5ce", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0cd4c668ffd0856cf5fe2501cd2ca14400eed5ce", "committedDate": "2020-05-21T16:40:19Z", "message": "Change the test to Mock"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cd4c668ffd0856cf5fe2501cd2ca14400eed5ce", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0cd4c668ffd0856cf5fe2501cd2ca14400eed5ce", "committedDate": "2020-05-21T16:40:19Z", "message": "Change the test to Mock"}, "afterCommit": {"oid": "ebc976e15d62108f082b4a5f1c691cde19588fa1", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/ebc976e15d62108f082b4a5f1c691cde19588fa1", "committedDate": "2020-05-21T16:48:11Z", "message": "Change the test to Mock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/fb1a374dc1e9325f91b9741e7fc8afafb0993a20", "committedDate": "2020-05-21T16:53:44Z", "message": "Change the test to Mock"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebc976e15d62108f082b4a5f1c691cde19588fa1", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/ebc976e15d62108f082b4a5f1c691cde19588fa1", "committedDate": "2020-05-21T16:48:11Z", "message": "Change the test to Mock"}, "afterCommit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/fb1a374dc1e9325f91b9741e7fc8afafb0993a20", "committedDate": "2020-05-21T16:53:44Z", "message": "Change the test to Mock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzI5MTc2", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-416329176", "createdAt": "2020-05-21T17:04:13Z", "commit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTA5MDEz", "url": "https://github.com/apache/helix/pull/1013#pullrequestreview-416509013", "createdAt": "2020-05-21T21:33:12Z", "commit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozMzoxM1rOGZDsew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozOTozOVrOGZD4lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyODEyMw==", "bodyText": "This mix of styling (snake_case and camelCase) isn't java style", "url": "https://github.com/apache/helix/pull/1013#discussion_r428928123", "createdAt": "2020-05-21T21:33:13Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/client/TestCustomRestClient.java", "diffHunk": "@@ -145,6 +146,28 @@ public void testPostRequestFormat() throws IOException {\n     Assert.assertEquals(json.get(\"data\").asText(), \"{}\");\n   }\n \n+  @Test\n+  public void testGetPartitionStoppableCheck_when_timeout() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMTIyMw==", "bodyText": "Please remove this unused import", "url": "https://github.com/apache/helix/pull/1013#discussion_r428931223", "createdAt": "2020-05-21T21:39:39Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -33,6 +33,7 @@\n import org.apache.http.client.ClientProtocolException;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.ConnectTimeoutException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1a374dc1e9325f91b9741e7fc8afafb0993a20"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd36481b94edc103795001f7ec128bf743cd2991", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/bd36481b94edc103795001f7ec128bf743cd2991", "committedDate": "2020-05-21T21:48:40Z", "message": "Final fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4831, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}