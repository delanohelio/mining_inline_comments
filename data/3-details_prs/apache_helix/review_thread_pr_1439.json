{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MzA2MzQ3", "number": 1439, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjo0OVrOEq2E_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowMzo0NlrOEtKUNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYxNjYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjo0OVrOHdSOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDoxNlrOHd_kaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTMyMA==", "bodyText": "Not necessarily a running job, people can add task to NOT_STARTED jobs too, right?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500469320", "createdAt": "2020-10-06T17:22:49Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTg2MA==", "bodyText": "Add a task to a job, if a job is already completed, this operation has no effect?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500469860", "createdAt": "2020-10-06T17:23:41Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTMyMA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjI2NA==", "bodyText": "Added not started also. Yes if it is completed, then the add operation will be failed.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501212264", "createdAt": "2020-10-07T18:10:16Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTMyMA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYyNjMxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNToyN1rOHdSUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDoyNVrOHd_ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDk4MQ==", "bodyText": "I would suggest  to change the parameters order to this (String workflowName, String jobName, TaskConfig, timeout), just to follow the conventions in other methods in the TaskDriver.", "url": "https://github.com/apache/helix/pull/1439#discussion_r500470981", "createdAt": "2020-10-06T17:25:27Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjMzOQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501212339", "createdAt": "2020-10-07T18:10:25Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDk4MQ=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYzMTYxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNjo0MlrOHdSYJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDo0NlrOHd_lZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MTg0NA==", "bodyText": "If the workflow has not started, the context does not exist, right?  But do we allow them to add a task to newly created workflow/job?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500471844", "createdAt": "2020-10-06T17:26:42Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjUxNg==", "bodyText": "Yes. Added this behavior.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501212516", "createdAt": "2020-10-07T18:10:46Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MTg0NA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYzODk5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyODozNVrOHdSc2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMDo1NlrOHd_lwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MzA0OA==", "bodyText": "Can we wrap this logic to a separate (private) method, such as validateTaskConfig(). Also, you may want to put this check at the beginning of the method (to avoid non-necessary ZK read if the input itself is not valid).", "url": "https://github.com/apache/helix/pull/1439#discussion_r500473048", "createdAt": "2020-10-06T17:28:35Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjYxMA==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501212610", "createdAt": "2020-10-07T18:10:56Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MzA0OA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY0NTQ0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozMDowOFrOHdSgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyNjoxMlrOHeAQNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NDA2Mg==", "bodyText": "Could the JobState be null when the job was just created (has not be scheduled by the controller)?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500474062", "createdAt": "2020-10-06T17:30:08Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMzQ3OA==", "bodyText": "Added the ability to add a task to a job that is not started. If the job is not started or context is null, we can add tasks to the job.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501223478", "createdAt": "2020-10-07T18:26:12Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NDA2Mg=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY0Nzc1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozMDo0MlrOHdSiLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoxMTowOFrOHd_mKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NDQxNQ==", "bodyText": "LOG.ERROR?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500474415", "createdAt": "2020-10-06T17:30:42Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjcxMg==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501212712", "createdAt": "2020-10-07T18:11:08Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NDQxNQ=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY2MjU1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNDozNVrOHdSrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyNTo1OVrOHfZC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NjgxMw==", "bodyText": "What will happen if timeout is less than 1000ms?  You may want to adjust the sleep time here based on the given timeout?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500476813", "createdAt": "2020-10-06T17:34:35Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMzU4NQ==", "bodyText": "This is the behaviour we are using in the other functions of the TaskDriver. I think we can stick to the same behaviour here as well. Let me know your thoughts.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501213585", "createdAt": "2020-10-07T18:12:40Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NjgxMw=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODA0MQ==", "bodyText": "If there are other places, then please don't hardcode the time.\nIn addition, IMO, the timeout less than 1000ms does not make sense, so we shall reject the request. Obviously, we shall mention in the public API that timeout less than 1000ms means no wait, or just being rejected.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502648041", "createdAt": "2020-10-09T20:07:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NjgxMw=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3ODI1Mw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502678253", "createdAt": "2020-10-09T21:25:59Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NjgxMw=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY2OTEwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNjoyMVrOHdSvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNjo0M1rOHeEPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NzgzMQ==", "bodyText": "Please add more javaDoc here to describe 1) the behaviors and expectations (task may not be added in different senarios), 2) what does the timeout here mean? and what the caller should do if it is timeout? 3) The possible Exceptions (and what does each mean) could be thrown.", "url": "https://github.com/apache/helix/pull/1439#discussion_r500477831", "createdAt": "2020-10-06T17:36:21Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4ODc1Mw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501288753", "createdAt": "2020-10-07T20:26:43Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NzgzMQ=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY3OTI5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozOToxNVrOHdS2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyNDoyNlrOHeAMMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTUwNQ==", "bodyText": "Should we throw a specific TimeoutException instead of a general exception. What is the caller expected to do if it is timeout, call another method to verify whether the task has been successfully added, or retry the addTask()?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500479505", "createdAt": "2020-10-06T17:39:15Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);\n+    }\n+    throw new HelixException(\"An unexpected issue happened while task being added to the job!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjQ0OQ==", "bodyText": "Changed it to timeout exception.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501222449", "createdAt": "2020-10-07T18:24:26Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);\n+      for (Map.Entry<String, Integer> entry : jobContext.getTaskIdPartitionMap().entrySet()) {\n+        if (entry.getKey().equals(taskID) && getWorkflowContext(workflowName)\n+            .getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+          return;\n+        }\n+      }\n+      Thread.sleep(1000L);\n+    }\n+    throw new HelixException(\"An unexpected issue happened while task being added to the job!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTUwNQ=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI4Njc0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoyNjozNVrOHdYrFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNzo0MlrOHeERIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDk5OA==", "bodyText": "The default timeout is 5 mins. It is pretty long. Shall we just provide one method that returns immediately and one that waits for a timeout?", "url": "https://github.com/apache/helix/pull/1439#discussion_r500574998", "createdAt": "2020-10-06T20:26:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4OTI0OQ==", "bodyText": "I think the agreement in the design doc was to have a timeout to check if the task has been added to not. Also, we are exposing another API with a non-default timeout.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501289249", "createdAt": "2020-10-07T20:27:42Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDk5OA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI5MjU5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoyODoyMlrOHdYu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNzo0OFrOHeERZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NTk3MA==", "bodyText": "Please define this as a private static field of the class.", "url": "https://github.com/apache/helix/pull/1439#discussion_r500575970", "createdAt": "2020-10-06T20:28:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4OTMxNw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501289317", "createdAt": "2020-10-07T20:27:48Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NTk3MA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDMxNjkzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDozNTo1M1rOHdY-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyNDowMFrOHfZALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3OTkwMA==", "bodyText": "It could be a trick issue, please verify.\nIt is possible that the caller pass accessor and propertyStore backed by different ZkClient. In this case, the accessor is used to update and the propertyStore is used to get context here. Given there might be a propagation latency on ZK server-side, this check here might be invalid. We need to set and read using the same ZkClient.", "url": "https://github.com/apache/helix/pull/1439#discussion_r500579900", "createdAt": "2020-10-06T20:35:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTQwNA==", "bodyText": "I don't think it is the case here. Here is how we initialize TaskDriver\n  public TaskDriver(HelixManager manager) {\n    this(manager.getClusterManagmentTool(), manager.getHelixDataAccessor(),\n        manager.getHelixPropertyStore(), manager.getClusterName());\n  }\n\nall of the input parameters are backed by the same manager.", "url": "https://github.com/apache/helix/pull/1439#discussion_r501355404", "createdAt": "2020-10-07T22:54:08Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3OTkwMA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NTc2NA==", "bodyText": "However, the following public constructor is not in this case.\npublic TaskDriver(HelixAdmin admin, HelixDataAccessor accessor,\nHelixPropertyStore propertyStore, String clusterName) {", "url": "https://github.com/apache/helix/pull/1439#discussion_r502645764", "createdAt": "2020-10-09T20:01:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3OTkwMA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NzU1MA==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502677550", "createdAt": "2020-10-09T21:24:00Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +524,123 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job with default timeout\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName) throws Exception {\n+    addTask(taskConfig, workflowName, jobName, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job\n+   * @param taskConfig\n+   * @param workflowName\n+   * @param jobName\n+   * @param timeout\n+   * @throws Exception\n+   */\n+  public void addTask(TaskConfig taskConfig, String workflowName, String jobName, long timeout)\n+      throws Exception {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    long endTime = System.currentTimeMillis() + timeout;\n+\n+    if (workflowConfig == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" config does not exist!\");\n+    }\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(\n+          \"Job \" + nameSpaceJobName + \" is a targeted job. New task cannot be added to this job!\");\n+    }\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    if (workflowContext == null) {\n+      throw new HelixException(\"Workflow \" + workflowName + \" context does not exist!\");\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"Task cannot be added because taskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {\n+      throw new HelixException(\n+          \"Task cannot be added because command existed for both of job and task!\");\n+    }\n+\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n+    Set<TaskState> illegalJobStateForTaskAddition =\n+        new HashSet<>(Arrays.asList(TaskState.TIMING_OUT, TaskState.TIMED_OUT, TaskState.FAILING,\n+            TaskState.FAILED, TaskState.ABORTED, TaskState.COMPLETED, TaskState.STOPPED,\n+            TaskState.STOPPING));\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because JobState \" + nameSpaceJobName + \" is null!\");\n+    }\n+\n+    if (illegalJobStateForTaskAddition.contains(jobState)) {\n+      throw new HelixException(\"Job \" + nameSpaceJobName\n+          + \" is in illegal state to accept new task. Job State is \" + jobState);\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.warn(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    String path = _accessor.keyBuilder().resourceConfig(nameSpaceJobName).getPath();\n+    boolean status = _accessor.getBaseDataAccessor().update(path, updater, AccessOption.PERSISTENT);\n+    if (!status) {\n+      LOG.error(\"Failed to add task to the job {}\", nameSpaceJobName);\n+      throw new HelixException(\"Failed to add task to the job\");\n+    }\n+\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      JobContext jobContext = getJobContext(nameSpaceJobName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3OTkwMA=="}, "originalCommit": {"oid": "0c0782b90de1593cb72a3ad515fc6190e5088c11"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzYzNDMxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowMjo0OVrOHfXFpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMzo1MFrOHfY_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NjE4MQ==", "bodyText": "nit, private final static... please\nAlso, in this case, the var name should be ILLEGAL_JOB_STATES_FOR_TASK_ADDITION (or TASKS_MODIFICATION?)", "url": "https://github.com/apache/helix/pull/1439#discussion_r502646181", "createdAt": "2020-10-09T20:02:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -77,6 +76,11 @@\n   /** Default time out for monitoring workflow or job state */\n   private final static int DEFAULT_TIMEOUT = 5 * 60 * 1000; /* 5 mins */\n \n+  /** The illegal job states for the jobs to accept new task */\n+  private static Set<TaskState> illegalJobStatesForTaskAddition = new HashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NzQ5OQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502677499", "createdAt": "2020-10-09T21:23:50Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -77,6 +76,11 @@\n   /** Default time out for monitoring workflow or job state */\n   private final static int DEFAULT_TIMEOUT = 5 * 60 * 1000; /* 5 mins */\n \n+  /** The illegal job states for the jobs to accept new task */\n+  private static Set<TaskState> illegalJobStatesForTaskAddition = new HashSet<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NjE4MQ=="}, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzYzOTI1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNDo1MlrOHfXIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMzo0MlrOHfY_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0Njk3OA==", "bodyText": "\"default timeout\" is not clear enough.\nPlease mention the real timeout here. Maybe use java doc feature to link with the variable would be a good idea. But I'm not sure if it works fine. please have a try.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502646978", "createdAt": "2020-10-09T20:04:52Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +530,163 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet. Timeout for this\n+   * operation is default timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NzQ1Nw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502677457", "createdAt": "2020-10-09T21:23:42Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +530,163 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet. Timeout for this\n+   * operation is default timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0Njk3OA=="}, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzYzOTkyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNTowNVrOHfXJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMzowNlrOHfY_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzA3MA==", "bodyText": "unit", "url": "https://github.com/apache/helix/pull/1439#discussion_r502647070", "createdAt": "2020-10-09T20:05:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +530,163 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet. Timeout for this\n+   * operation is default timeout\n+   * Note1: Task cannot be added if the job is in an illegal state. The states that job can accept\n+   * new task is if the job is in progress or the job has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws and exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added ot not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet\n+   * Note1: Task may cannot be added if the job is in an illegal state. The states that job can\n+   * accept new task is if the job is in progress or the job has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws and exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added ot not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NzI1NQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502677255", "createdAt": "2020-10-09T21:23:06Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +530,163 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet. Timeout for this\n+   * operation is default timeout\n+   * Note1: Task cannot be added if the job is in an illegal state. The states that job can accept\n+   * new task is if the job is in progress or the job has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws and exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added ot not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or the job which is not started yet\n+   * Note1: Task may cannot be added if the job is in an illegal state. The states that job can\n+   * accept new task is if the job is in progress or the job has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws and exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added ot not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzA3MA=="}, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzY0Nzk4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNzo1OFrOHfXOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMzoxNVrOHfY_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODMyNg==", "bodyText": "nit, format the imports?", "url": "https://github.com/apache/helix/pull/1439#discussion_r502648326", "createdAt": "2020-10-09T20:07:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import java.util.concurrent.TimeoutException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NzI5OQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r502677299", "createdAt": "2020-10-09T21:23:15Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import java.util.concurrent.TimeoutException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODMyNg=="}, "originalCommit": {"oid": "7388475382f2740511c508845823658dbf9986cd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTU3Mzc5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTowMTo1MVrOHgcrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNDoyMlrOHg1Vcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NjM1Ng==", "bodyText": "Since Exception is pretty generic, I don't see a clear clue where it is from. Can you clarify in what case this Exception is thrown?", "url": "https://github.com/apache/helix/pull/1439#discussion_r503786356", "createdAt": "2020-10-13T09:01:51Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,177 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5463281da78118ed1a1c30c6d1ed55cd159e50"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MDMyMg==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504190322", "createdAt": "2020-10-13T19:04:22Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,177 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is user's responsibility to check whether the task has\n+   * been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NjM1Ng=="}, "originalCommit": {"oid": "dc5463281da78118ed1a1c30c6d1ed55cd159e50"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY1ODMwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1ODo1MlrOHgwxyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNDo0NFrOHg1WQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNTY1OA==", "bodyText": "This if condition is already covered by the one below.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504115658", "createdAt": "2020-10-13T16:58:52Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig, long timeoutMs)\n+      throws Exception {\n+\n+    if (timeoutMs < DEFAULT_SLEEP) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Timeout is less than the minimum acceptable timeout value which is %s ms\",\n+              DEFAULT_SLEEP));\n+    }\n+\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    JobContext jobContext = getJobContext(nameSpaceJobName);\n+    if (workflowContext == null || jobContext == null) {\n+      // Workflow context or job context is null. It means job has not been started. Hence task can\n+      // be added to the job\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MDUyOQ==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504190529", "createdAt": "2020-10-13T19:04:44Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig, long timeoutMs)\n+      throws Exception {\n+\n+    if (timeoutMs < DEFAULT_SLEEP) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Timeout is less than the minimum acceptable timeout value which is %s ms\",\n+              DEFAULT_SLEEP));\n+    }\n+\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    JobContext jobContext = getJobContext(nameSpaceJobName);\n+    if (workflowContext == null || jobContext == null) {\n+      // Workflow context or job context is null. It means job has not been started. Hence task can\n+      // be added to the job\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNTY1OA=="}, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY2NTE0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowMDo0NFrOHgw2IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNTozMlrOHg1YBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNjc2OQ==", "bodyText": "nit: could combine into (taskConfig.getCommand() == null != jobConfig.getCommand() == null) and say \"Command must exist in either job or task, not both\".", "url": "https://github.com/apache/helix/pull/1439#discussion_r504116769", "createdAt": "2020-10-13T17:00:44Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig, long timeoutMs)\n+      throws Exception {\n+\n+    if (timeoutMs < DEFAULT_SLEEP) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Timeout is less than the minimum acceptable timeout value which is %s ms\",\n+              DEFAULT_SLEEP));\n+    }\n+\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    JobContext jobContext = getJobContext(nameSpaceJobName);\n+    if (workflowContext == null || jobContext == null) {\n+      // Workflow context or job context is null. It means job has not been started. Hence task can\n+      // be added to the job\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      // Null job state means the job has not started yet\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    if (ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n+      throw new HelixException(\n+          String.format(\"Job %s is in illegal state to accept new task. Job State is %s\",\n+              nameSpaceJobName, jobState));\n+    }\n+    addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+  }\n+\n+  /**\n+   * The helper method which check the workflow, job and task configs to determine if new task can\n+   * be added to the job\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   */\n+  private void validateAddTaskConfigs(String workflowName, String jobName, TaskConfig taskConfig) {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+\n+    if (workflowConfig == null) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Workflow config for workflow %s does not exist!\", workflowName));\n+    }\n+\n+    if (jobConfig == null) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Job config for job %s does not exist!\", nameSpaceJobName));\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"TaskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(String.format(\n+          \"Job %s is a targeted job. New task cannot be added to this job!\", nameSpaceJobName));\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MDk4Mg==", "bodyText": "Good suggestion. Changed.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504190982", "createdAt": "2020-10-13T19:05:32Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig, long timeoutMs)\n+      throws Exception {\n+\n+    if (timeoutMs < DEFAULT_SLEEP) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Timeout is less than the minimum acceptable timeout value which is %s ms\",\n+              DEFAULT_SLEEP));\n+    }\n+\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    JobContext jobContext = getJobContext(nameSpaceJobName);\n+    if (workflowContext == null || jobContext == null) {\n+      // Workflow context or job context is null. It means job has not been started. Hence task can\n+      // be added to the job\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+\n+    if (jobState == null) {\n+      // Null job state means the job has not started yet\n+      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+      return;\n+    }\n+\n+    if (ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n+      throw new HelixException(\n+          String.format(\"Job %s is in illegal state to accept new task. Job State is %s\",\n+              nameSpaceJobName, jobState));\n+    }\n+    addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+  }\n+\n+  /**\n+   * The helper method which check the workflow, job and task configs to determine if new task can\n+   * be added to the job\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   */\n+  private void validateAddTaskConfigs(String workflowName, String jobName, TaskConfig taskConfig) {\n+    WorkflowConfig workflowConfig = TaskUtil.getWorkflowConfig(_accessor, workflowName);\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+\n+    if (workflowConfig == null) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Workflow config for workflow %s does not exist!\", workflowName));\n+    }\n+\n+    if (jobConfig == null) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Job config for job %s does not exist!\", nameSpaceJobName));\n+    }\n+\n+    if (taskConfig == null) {\n+      throw new IllegalArgumentException(\"TaskConfig is null!\");\n+    }\n+\n+    if (taskConfig.getId() == null) {\n+      throw new HelixException(\"Task cannot be added because taskID is null!\");\n+    }\n+\n+    if (jobConfig.getTargetResource() != null) {\n+      throw new HelixException(String.format(\n+          \"Job %s is a targeted job. New task cannot be added to this job!\", nameSpaceJobName));\n+    }\n+\n+    if (taskConfig.getCommand() == null && jobConfig.getCommand() == null) {\n+      throw new HelixException(\n+          \"Task cannot be added because both of the job and task have null command!\");\n+    }\n+\n+    if (taskConfig.getCommand() != null && jobConfig.getCommand() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExNjc2OQ=="}, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzkwMzg5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowMzo0NlrOHgzHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNDozMFrOHg1Vvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzkyMg==", "bodyText": "It doesn't seem a general Exception is thrown, right? Since this is an API, to make the API signature clearer for users to use, instead of throwing a general Exception, shall we just throw an accurate exception that may be thrown: TimeoutException? Then it looks much clearer and easy to understand. RuntimeException doesn't need to be in a method signature.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504153922", "createdAt": "2020-10-13T18:03:46Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MDM5OQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1439#discussion_r504190399", "createdAt": "2020-10-13T19:04:30Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -526,6 +533,185 @@ public void enqueueJobs(final String queue, final List<String> jobs,\n     }\n   }\n \n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet. Timeout for this\n+   * operation is the default timeout which is 5 minutes. {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @throws Exception if there is an issue with the request or the operation. 1-\n+   *           IllegalArgumentException will be thrown if the inputs are invalid. 2- HelixException\n+   *           will be thrown if the job is not in the states to accept a new task or if there is\n+   *           any issue in updating jobConfig. 3- TimeoutException will be thrown if the outcome of\n+   *           the task addition is unknown and cannot be verified.\n+   */\n+  public void addTask(String workflowName, String jobName, TaskConfig taskConfig) throws Exception {\n+    addTask(workflowName, jobName, taskConfig, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Add task to a running (IN-PROGRESS) job or a job which has not started yet\n+   * Note1: Task cannot be added if the job is in an illegal state. A job can accept\n+   * new task if the job is in-progress or it has not started yet.\n+   * Note2: The job can only be added to non-targeted jobs.\n+   * Note3: The taskID for the new task should be unique. If not, this API throws an exception.\n+   * Note4: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully added or not.\n+   * Note5: timeout is the time that this API checks whether the task has been successfully added or\n+   * not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskConfig\n+   * @param timeoutMs\n+   * @throws Exception if there is an issue with the request or the operation. 1-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzkyMg=="}, "originalCommit": {"oid": "9b805011f2835226efdd9205896bc1c8fa36700c"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 996, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}