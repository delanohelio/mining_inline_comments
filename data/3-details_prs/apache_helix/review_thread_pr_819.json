{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTcwNzM4", "number": 819, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxOTowMVrODjqA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo0MjoxOVrODk6P6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzE1MTIzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxOTowMVrOFvlsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowMzoxNVrOFvnY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NTA2Nw==", "bodyText": "Document when/why IOExeption would be thrown and why InvalidRoutingDataException would be thrown.\nSeem from HttpRoutingDataReader code, if we can't get data/parse data from http respone, it would be IO exception, if constructing the trie based on parse http reponse failed, it is InvalidRoutingDataException.", "url": "https://github.com/apache/helix/pull/819#discussion_r385445067", "createdAt": "2020-02-28T00:19:01Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -31,25 +34,21 @@\n    * Build a RealmAwareZkClient using specified connection config and client config.\n    * @param connectionConfig\n    * @param clientConfig\n-   * @param metadataStoreRoutingData\n    * @return HelixZkClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3Mjc0Mw==", "bodyText": "That is correct. I will update the JavaDoc :)", "url": "https://github.com/apache/helix/pull/819#discussion_r385472743", "createdAt": "2020-02-28T02:03:15Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -31,25 +34,21 @@\n    * Build a RealmAwareZkClient using specified connection config and client config.\n    * @param connectionConfig\n    * @param clientConfig\n-   * @param metadataStoreRoutingData\n    * @return HelixZkClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NTA2Nw=="}, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzIxNDMwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/SharedZkClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1Mjo1NFrOFvmR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowMzo1M1rOFvnZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDU2NQ==", "bodyText": "This would be a conflict. Now my change is in, we need a rebase for this one.", "url": "https://github.com/apache/helix/pull/819#discussion_r385454565", "createdAt": "2020-02-28T00:52:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/SharedZkClientFactory.java", "diffHunk": "@@ -45,21 +45,12 @@ protected SharedZkClientFactory() {\n   @Override\n   public RealmAwareZkClient buildZkClient(\n       RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3Mjg5OQ==", "bodyText": "No worries.\nI won't merge this in until other ZkClients have been merged in. I might include other ZkClients in the scope of this PR.", "url": "https://github.com/apache/helix/pull/819#discussion_r385472899", "createdAt": "2020-02-28T02:03:53Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/SharedZkClientFactory.java", "diffHunk": "@@ -45,21 +45,12 @@ protected SharedZkClientFactory() {\n   @Override\n   public RealmAwareZkClient buildZkClient(\n       RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDU2NQ=="}, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzIxNzE5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1NDozNVrOFvmTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowNDo0MFrOFvnaIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDk5NQ==", "bodyText": "A little off topic. Do we have a issue to track this one? If we need to enhance this part, this is the number one issue in my opinion.", "url": "https://github.com/apache/helix/pull/819#discussion_r385454995", "createdAt": "2020-02-28T00:54:35Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -102,7 +102,8 @@ public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n    * @throws IOException\n    */\n   private static String getAllRoutingData() throws IOException {\n-    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point of failure if it's backed by a single IP address/host\n+    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point\n+    // of failure if it's backed by a single IP address/host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MzA1Nw==", "bodyText": "We do not - could you please create an issue for it? Not an immediate blocker.", "url": "https://github.com/apache/helix/pull/819#discussion_r385473057", "createdAt": "2020-02-28T02:04:40Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -102,7 +102,8 @@ public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n    * @throws IOException\n    */\n   private static String getAllRoutingData() throws IOException {\n-    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point of failure if it's backed by a single IP address/host\n+    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point\n+    // of failure if it's backed by a single IP address/host", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDk5NQ=="}, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjIwOTE2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTozNDowNVrOFw43Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozMTo1M1rOFxifTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA==", "bodyText": "It may not be a good idea to declare exception in a constructor which I would try to avoid. For this case, I suggest catching them and throwing an IllegalStateException.", "url": "https://github.com/apache/helix/pull/819#discussion_r386807578", "createdAt": "2020-03-03T05:34:05Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0Nzg3Ng==", "bodyText": "Throwing exceptions in a constructor is not bad practice. In fact, it is the only way for a constructor to indicate that there is a problem; e.g. that the parameters/states are invalid.\nThis is a behavior agreed upon with @kaisun2000, which reminds me to add the Javadoc. IOException in the case of HTTP read failure, InvalidRoutingDataException in the case of an invalid routing data input. Users should be able to tell what's going on, and we let them distinguish failure cases by which type of exception we throw.", "url": "https://github.com/apache/helix/pull/819#discussion_r386847876", "createdAt": "2020-03-03T07:54:59Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4Njk2MQ==", "bodyText": "I understand it is OK to throw exceptions in a constructor. In this case, if we declare exceptions in the signature, would it make it inconvenient to initialize/build a FederatedZkClient with try...catch? Personally, I would not like that. If the routing data does not exist or IO exception, it means routing data is not available for this FederatedZkClient construction. A runtime exception is good enough: IllegalStateException(\"Routing data is not available: \" + e.getMessage()). I wouldn't bother try...catch to construct a FederatedZkClient.", "url": "https://github.com/apache/helix/pull/819#discussion_r387186961", "createdAt": "2020-03-03T17:44:57Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxOTQ1NQ==", "bodyText": "FederatedZkClient is still a low-level construct\nThis means that the users of this component will mostly be Helix Java APIs, and probably a few users who wish to use directly.\nIn that case, I think we still need to float these exceptions up and handle each case at the Helix Java API level. That way, we make it 1) user-friendly and 2) we still achieve the low-level granularity with FederatedZkClient that users of this class would want instead of hiding failure types behind an IllegalStateException.", "url": "https://github.com/apache/helix/pull/819#discussion_r387219455", "createdAt": "2020-03-03T18:44:49Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTE2Ng==", "bodyText": "Like I said, personally, hiding failure type in this case is more user-friendly than floating these exceptions up. And I also understand and respect your opinion.\nI am not sure how Helix Java APIs could handle these 2 exceptions differently when constructing this FederatedZkClient. Regarding a few other users, we could get opinions from them. I will be OK if we can get options from other users/committers and they think floating exceptions are better :)", "url": "https://github.com/apache/helix/pull/819#discussion_r387445166", "createdAt": "2020-03-04T04:37:58Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4OTYxNQ==", "bodyText": "Here's one example where using checked exceptions is beneficial.\n\nYou could imagine a scenario where in the future we might have different sources from which we could obtain routing data. There is MSDS-1, MSDS-2, and MSDS-3 with different endpoints. In this case, we could add logic for trying options 1, 2, and 3 in order in case we run into IOException. Now, this logic won't apply to InvalidRoutingDataException because that implies that a data source is available but the actual routing data is invalid. This way, we could handle different exceptions differently.", "url": "https://github.com/apache/helix/pull/819#discussion_r387489615", "createdAt": "2020-03-04T07:31:53Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI3MTY2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoyMTo0M1rOFxflMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyMzoyMVrOFxiTMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTk2OQ==", "bodyText": "Typo in exception message. Should be RealmAwareZkClientConfig", "url": "https://github.com/apache/helix/pull/819#discussion_r387441969", "createdAt": "2020-03-04T04:21:43Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -56,32 +59,42 @@\n   private final ZkClient _rawZkClient;\n   private final MetadataStoreRoutingData _metadataStoreRoutingData;\n   private final String _zkRealmShardingKey;\n-  private final String _zkRealmAddress;\n \n-  // TODO: Remove MetadataStoreRoutingData from constructor\n+  /**\n+   * DedicatedZkClient connects to a single ZK realm and supports full ZkClient functionalities\n+   * such as CRUD, change callback, and ephemeral operations for a single ZkRealmShardingKey.\n+   * @param connectionConfig\n+   * @param clientConfig\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n   public DedicatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n     if (connectionConfig == null) {\n       throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n-    _zkRealmShardingKey = connectionConfig.getZkRealmShardingKey();\n+    if (clientConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NjUxNA==", "bodyText": "Good catch. Fixed", "url": "https://github.com/apache/helix/pull/819#discussion_r387486514", "createdAt": "2020-03-04T07:23:21Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -56,32 +59,42 @@\n   private final ZkClient _rawZkClient;\n   private final MetadataStoreRoutingData _metadataStoreRoutingData;\n   private final String _zkRealmShardingKey;\n-  private final String _zkRealmAddress;\n \n-  // TODO: Remove MetadataStoreRoutingData from constructor\n+  /**\n+   * DedicatedZkClient connects to a single ZK realm and supports full ZkClient functionalities\n+   * such as CRUD, change callback, and ephemeral operations for a single ZkRealmShardingKey.\n+   * @param connectionConfig\n+   * @param clientConfig\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n   public DedicatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n     if (connectionConfig == null) {\n       throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n-    _zkRealmShardingKey = connectionConfig.getZkRealmShardingKey();\n+    if (clientConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTk2OQ=="}, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI3NDc5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoyNDoyMlrOFxfnKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNzo0MlrOFxiZgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MjQ3NQ==", "bodyText": "Nit, Shall we move this condition check out of try...catch block? I understand it not may be unrelated to your change. But since you already touch it and change the name :)\nOne more thing: This could throw NPE. _zkRealmShardingKey could be null if it is not set in connectionConfig when the user expects it to be a multi-realm mode by default.", "url": "https://github.com/apache/helix/pull/819#discussion_r387442475", "createdAt": "2020-03-04T04:24:22Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -457,17 +470,17 @@ public PathBasedZkSerializer getZkSerializer() {\n    * @return\n    */\n   private void checkIfPathContainsShardingKey(String path) {\n-    // TODO: replace with the singleton MetadataStoreRoutingData\n     try {\n-      String zkRealmForPath = _metadataStoreRoutingData.getMetadataStoreRealm(path);\n-      if (!_zkRealmAddress.equals(zkRealmForPath)) {\n-        throw new IllegalArgumentException(\"Given path: \" + path + \"'s ZK realm: \" + zkRealmForPath\n-            + \" does not match the ZK realm: \" + _zkRealmAddress + \" and sharding key: \"\n-            + _zkRealmShardingKey + \" for this DedicatedZkClient!\");\n+      String targetShardingKey = _metadataStoreRoutingData.getShardingKeyInPath(path);\n+      if (!_zkRealmShardingKey.equals(targetShardingKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODEyOQ==", "bodyText": "I am glad that you brought this up. In fact, DedicatedZkClient and SharedZkClient are single-realm APIs, so we need to check in the constructor that Zk Sharding key is not null or empty.\nI will add this check. Then we don't need to worry about NPEs.", "url": "https://github.com/apache/helix/pull/819#discussion_r387488129", "createdAt": "2020-03-04T07:27:42Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -457,17 +470,17 @@ public PathBasedZkSerializer getZkSerializer() {\n    * @return\n    */\n   private void checkIfPathContainsShardingKey(String path) {\n-    // TODO: replace with the singleton MetadataStoreRoutingData\n     try {\n-      String zkRealmForPath = _metadataStoreRoutingData.getMetadataStoreRealm(path);\n-      if (!_zkRealmAddress.equals(zkRealmForPath)) {\n-        throw new IllegalArgumentException(\"Given path: \" + path + \"'s ZK realm: \" + zkRealmForPath\n-            + \" does not match the ZK realm: \" + _zkRealmAddress + \" and sharding key: \"\n-            + _zkRealmShardingKey + \" for this DedicatedZkClient!\");\n+      String targetShardingKey = _metadataStoreRoutingData.getShardingKeyInPath(path);\n+      if (!_zkRealmShardingKey.equals(targetShardingKey)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MjQ3NQ=="}, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI5MzIyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozOTowOVrOFxfypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozMjoyMlrOFxif7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTQxNQ==", "bodyText": "Client config in message.", "url": "https://github.com/apache/helix/pull/819#discussion_r387445415", "createdAt": "2020-03-04T04:39:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,27 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n+    if (connectionConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n     if (clientConfig == null) {\n-      throw new IllegalArgumentException(\"Client config cannot be null!\");\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4OTc3Mw==", "bodyText": "Fixed. thank you.", "url": "https://github.com/apache/helix/pull/819#discussion_r387489773", "createdAt": "2020-03-04T07:32:22Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,27 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n+    if (connectionConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n     if (clientConfig == null) {\n-      throw new IllegalArgumentException(\"Client config cannot be null!\");\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTQxNQ=="}, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI5NjczOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/constant/TestConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo0MjoyMFrOFxf08g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozOTozMFrOFxipNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjAwMg==", "bodyText": "static final?", "url": "https://github.com/apache/helix/pull/819#discussion_r387446002", "createdAt": "2020-03-04T04:42:20Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/constant/TestConstants.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.zookeeper.constant;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * Constants to be used for testing.\n+ */\n+public class TestConstants {\n+  // ZK hostname prefix and port to be used throughout the zookeeper-api module\n+  public static final String ZK_PREFIX = \"localhost:\";\n+  public static final int ZK_START_PORT = 2127;\n+\n+  // Based on the ZK hostname constants, construct a set of fake routing data mappings\n+  public static Map<String, Collection<String>> FAKE_ROUTING_DATA = ImmutableMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MjE0OQ==", "bodyText": "Added final!", "url": "https://github.com/apache/helix/pull/819#discussion_r387492149", "createdAt": "2020-03-04T07:39:30Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/constant/TestConstants.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.zookeeper.constant;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * Constants to be used for testing.\n+ */\n+public class TestConstants {\n+  // ZK hostname prefix and port to be used throughout the zookeeper-api module\n+  public static final String ZK_PREFIX = \"localhost:\";\n+  public static final int ZK_START_PORT = 2127;\n+\n+  // Based on the ZK hostname constants, construct a set of fake routing data mappings\n+  public static Map<String, Collection<String>> FAKE_ROUTING_DATA = ImmutableMap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjAwMg=="}, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1694, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}