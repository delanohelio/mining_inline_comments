{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODk1NTY1", "number": 1119, "reviewThreads": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo0NToxN1rOEINzcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxMzowM1rOERokoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDUwMjI2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo0NToxN1rOGoCv6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0OTo0MFrOGrKBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTI1OA==", "bodyText": "You mentioned we will have more changes here. Will we make it optional? If so, I think we should have the change in this PR.", "url": "https://github.com/apache/helix/pull/1119#discussion_r444641258", "createdAt": "2020-06-24T04:45:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -185,6 +188,7 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+    _syncOnNewSession = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTQ5Mw==", "bodyText": "I would say, let us don't make it optional. This is across session \"sequential consistency\"\n@pkuwm, what is your take?", "url": "https://github.com/apache/helix/pull/1119#discussion_r446431493", "createdAt": "2020-06-26T22:07:38Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -185,6 +188,7 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+    _syncOnNewSession = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTI1OA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTY3NQ==", "bodyText": "It is worth making it configurable. For all Helix related component, we can turn it on. Otherwise, every user operation can be delay a little bit for sync. It changed our current behavior for user.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447889675", "createdAt": "2020-06-30T18:20:46Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -185,6 +188,7 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+    _syncOnNewSession = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTI1OA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA5Mg==", "bodyText": "This is a good idea.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447897092", "createdAt": "2020-06-30T18:33:57Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -185,6 +188,7 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+    _syncOnNewSession = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTI1OA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjE4MA==", "bodyText": "Good point. Will add a system property then.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447906180", "createdAt": "2020-06-30T18:49:40Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -185,6 +188,7 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+    _syncOnNewSession = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTI1OA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDUwMzk5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo0NjoyNFrOGoCw8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjowNjoxOVrOGpv_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTUyMQ==", "bodyText": "Please extract a method for sync.", "url": "https://github.com/apache/helix/pull/1119#discussion_r444641521", "createdAt": "2020-06-24T04:46:24Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTA5Mw==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r446431093", "createdAt": "2020-06-26T22:06:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTUyMQ=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDUwNTA5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo0NzowN1rOGoCxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo0NzowN1rOGoCxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0MTY3Ng==", "bodyText": "remove", "url": "https://github.com/apache/helix/pull/1119#discussion_r444641676", "createdAt": "2020-06-24T04:47:07Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");\n+                zkConnection.getZookeeper().sync(syncPath, new AsyncCallback.VoidCallback() {\n+                  @Override\n+                  public void processResult(int rt, String s, Object ctx) {\n+                    //System.out.println(\"sycnOnNewSession with sessionID \" + sessionId + \" async return code:\" + rt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDUyMTQxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDo1Nzo1M1rOGoC7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjowNTo1OFrOGpv_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDI0NA==", "bodyText": "I think zkConnection is not possible to be null here. Maybe zkConnection.getZookeeper() won't be null as well.\nBut check it is a valid thing to do.\nOne point is that line 1193 should use the same ZK object as it is checked here. Or it might become null later.", "url": "https://github.com/apache/helix/pull/1119#discussion_r444644244", "createdAt": "2020-06-24T04:57:53Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MTEyNA==", "bodyText": "I don't think this null check is necessary, as zkConnection/zk won't be null once zkClient object is constructed. Only chance zk being null is this zkClient.close() is called, then zk is null. I would say this may be overcheck for nulls.", "url": "https://github.com/apache/helix/pull/1119#discussion_r444671124", "createdAt": "2020-06-24T06:26:13Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDI0NA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMDk5Ng==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r446430996", "createdAt": "2020-06-26T22:05:58Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDI0NA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDY3NTQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoxODo1N1rOGoEZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoxODo1N1rOGoEZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2ODI0OQ==", "bodyText": "Remove commented debugging code?", "url": "https://github.com/apache/helix/pull/1119#discussion_r444668249", "createdAt": "2020-06-24T06:18:57Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDY4NjE2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyMzowNlrOGoEfoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyMzowNlrOGoEfoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2OTg1Nw==", "bodyText": "Whats the purpose of using such new String(\"/\")? This brings in extra unnecessary string object creation. I think a constant would be nicer SYNC_ROOT_PATH = \"/\".", "url": "https://github.com/apache/helix/pull/1119#discussion_r444669857", "createdAt": "2020-06-24T06:23:06Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDY5OTUxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoyODoxM1rOGoEntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjoyNTozOVrOGxngew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MTkyNw==", "bodyText": "Do we also need to log time on this sync?", "url": "https://github.com/apache/helix/pull/1119#discussion_r444671927", "createdAt": "2020-06-24T06:28:13Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");\n+                zkConnection.getZookeeper().sync(syncPath, new AsyncCallback.VoidCallback() {\n+                  @Override\n+                  public void processResult(int rt, String s, Object ctx) {\n+                    //System.out.println(\"sycnOnNewSession with sessionID \" + sessionId + \" async return code:\" + rt);\n+                    LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MDY5OQ==", "bodyText": "Not applying anymore.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454680699", "createdAt": "2020-07-14T22:25:39Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");\n+                zkConnection.getZookeeper().sync(syncPath, new AsyncCallback.VoidCallback() {\n+                  @Override\n+                  public void processResult(int rt, String s, Object ctx) {\n+                    //System.out.println(\"sycnOnNewSession with sessionID \" + sessionId + \" async return code:\" + rt);\n+                    LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3MTkyNw=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDcyNTQ1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozOTowN1rOGoE3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjozN1rOGoalKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NjAxNA==", "bodyText": "We only call sync but don't check the return code it's successful or not? It doesn't guarantee data is synced. What if sync fails?", "url": "https://github.com/apache/helix/pull/1119#discussion_r444676014", "createdAt": "2020-06-24T06:39:07Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");\n+                zkConnection.getZookeeper().sync(syncPath, new AsyncCallback.VoidCallback() {\n+                  @Override\n+                  public void processResult(int rt, String s, Object ctx) {\n+                    //System.out.println(\"sycnOnNewSession with sessionID \" + sessionId + \" async return code:\" + rt);\n+                    LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId,\n+                        rt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTcyMg==", "bodyText": "See my comment to JJ who asked the same question. This one worth further discussion. Either way has its pro and con.  Feel free to comment. Let us make a decision before proceeding.", "url": "https://github.com/apache/helix/pull/1119#discussion_r445031722", "createdAt": "2020-06-24T16:46:37Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1172,13 +1176,32 @@ private void fireNewSessionEvents() {\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              if (_syncOnNewSession) {\n+                //System.out.println(\"syncOnNewSession with sessionID:\" + sessionId);\n+                LOG.info(\"syncOnNewSession with sessionId {}\", sessionId);\n+                final ZkConnection zkConnection = (ZkConnection) getConnection();\n+                if (zkConnection == null || zkConnection.getZookeeper() == null) {\n+                  throw new IllegalStateException(\n+                      \"ZkConnection is in invalid state! Please close this ZkClient and create new client.\");\n+                }\n+                final String syncPath = new String(\"/\");\n+                zkConnection.getZookeeper().sync(syncPath, new AsyncCallback.VoidCallback() {\n+                  @Override\n+                  public void processResult(int rt, String s, Object ctx) {\n+                    //System.out.println(\"sycnOnNewSession with sessionID \" + sessionId + \" async return code:\" + rt);\n+                    LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId,\n+                        rt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NjAxNA=="}, "originalCommit": {"oid": "c5866f0e9daab9af120953672c4c7ae44faf40b0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzgxNDEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoxNjowOFrOGqlwRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToyOTo1OFrOG0cQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTk0Mg==", "bodyText": "private static?", "url": "https://github.com/apache/helix/pull/1119#discussion_r447311942", "createdAt": "2020-06-29T23:16:08Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  final String _syncPath = new String(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMjU4MA==", "bodyText": "Directly do _syncPath = \"/\"; shall help to avoid unnecessary object creating.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447312580", "createdAt": "2020-06-29T23:18:13Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  final String _syncPath = new String(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTk0Mg=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MjE5Nw==", "bodyText": "Could you please also make it static? And follow our naming convention, SYNC_PATH.", "url": "https://github.com/apache/helix/pull/1119#discussion_r457642197", "createdAt": "2020-07-20T19:29:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  final String _syncPath = new String(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTk0Mg=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzgyNzQwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyMTo1OFrOGql32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTozMzoyNFrOGxEyKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMzg4MQ==", "bodyText": "Please add the callback logic to ZkAsyncCallbacks.java if possible.\n\nThis file has been very large. We shall avoid adding more optional content here.\nZkAsyncCallbacks.java has all the callback defines there. We might be able to avoid some duplicated code if the class is defined there and extending the default callback class.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447313881", "createdAt": "2020-06-29T23:21:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMzM3OA==", "bodyText": "Before this pull request, I already had a look. THe reason not to use ZkAsyncCallbacks are two fold:\n1/ Upon failure, the syncContext need to block the current ZkEvent queue. ZkAsyncCallbacks does not block the ZkEvent queue or the _asycThread event queue, but retry from _asyncThread. ---- Thread modeling difference.\n2/ ZkAsyncCallbacks upon session expiration, would still retry. For this SyncContext, it did not retry session expiration. -- Error handling difference.\nEspecially for thread modeling difference, it is hard to merge them together.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447903378", "createdAt": "2020-06-30T18:45:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMzg4MQ=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMTc4Ng==", "bodyText": "I might miss some points here. But if we call DefaultCallback.waitForSuccess() in the new session handling method at where you call the latch.await(), will it do the same trick?\nRegarding the retry logic, it is simple to extend the DefaultCallback.needRetry() in the SyncCallbackHandler.\n\nmake needRetry() protected.\noverride it in the new SyncCallbackHandler class.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454111786", "createdAt": "2020-07-14T05:33:24Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMzg4MQ=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzgzMDg2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyMzozMVrOGql52w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyMzozMVrOGql52w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDM5NQ==", "bodyText": "As commented, please check out the other callback implementations. I think the main logic is in common. So we don't need to re-define everything.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447314395", "createdAt": "2020-06-29T23:23:31Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzgzMjQxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyNDoyM1rOGql62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0ODoyMlrOGrJ-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDY0OQ==", "bodyText": "Do we need to do this for every single state listener?\nWe shall only do it once, right?", "url": "https://github.com/apache/helix/pull/1119#discussion_r447314649", "createdAt": "2020-06-29T23:24:23Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {\n+      CountDownLatch latch = new CountDownLatch(1);\n+      SyncContext ctx = new SyncContext(latch);\n+\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();\n+      zkConnection.getZookeeper().sync(_syncPath, new AsyncCallback.VoidCallback() {\n+        @Override\n+        public void processResult(int rt, String s, Object ctx) {\n+          LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId, rt);\n+          SyncContext synCtx = ((SyncContext) ctx);\n+          synCtx.setRc(new AtomicInteger(rt));\n+          synCtx.getLatch().countDown();\n+        }\n+      }, ctx);\n+\n+      try {\n+        latch.await();\n+      } catch (InterruptedException e) {\n+        LOG.info(\"retrySync latch waiting got interrrupted with sessionId {} \", sessionId);\n+        throw new ZkInterruptedException(e);\n+      }\n+\n+      KeeperException.Code code = KeeperException.Code.get(ctx.getRc().get());\n+      if (code == OK) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+            code);\n+        break;\n+      }\n+      if (code == CONNECTIONLOSS || code == SESSIONMOVED) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and retry\", sessionId,\n+            code);\n+        continue;\n+      }\n+      // Not retryable, including session expiration; but having error. Log the error and return\n+      LOG.error(\n+          \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+          sessionId, code);\n+      return false;\n+    }\n+    return true;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              boolean proceed = retrySync(sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Mjc2MA==", "bodyText": "+1. This is not necessary doing sync for each of listener. Although once the first one retry complete rest will not cost much time, this is redundant logic. We should avoid it.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447892760", "createdAt": "2020-06-30T18:25:59Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {\n+      CountDownLatch latch = new CountDownLatch(1);\n+      SyncContext ctx = new SyncContext(latch);\n+\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();\n+      zkConnection.getZookeeper().sync(_syncPath, new AsyncCallback.VoidCallback() {\n+        @Override\n+        public void processResult(int rt, String s, Object ctx) {\n+          LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId, rt);\n+          SyncContext synCtx = ((SyncContext) ctx);\n+          synCtx.setRc(new AtomicInteger(rt));\n+          synCtx.getLatch().countDown();\n+        }\n+      }, ctx);\n+\n+      try {\n+        latch.await();\n+      } catch (InterruptedException e) {\n+        LOG.info(\"retrySync latch waiting got interrrupted with sessionId {} \", sessionId);\n+        throw new ZkInterruptedException(e);\n+      }\n+\n+      KeeperException.Code code = KeeperException.Code.get(ctx.getRc().get());\n+      if (code == OK) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+            code);\n+        break;\n+      }\n+      if (code == CONNECTIONLOSS || code == SESSIONMOVED) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and retry\", sessionId,\n+            code);\n+        continue;\n+      }\n+      // Not retryable, including session expiration; but having error. Log the error and return\n+      LOG.error(\n+          \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+          sessionId, code);\n+      return false;\n+    }\n+    return true;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              boolean proceed = retrySync(sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDY0OQ=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTM0NA==", "bodyText": "This is a very good catch. Will change it to be per session, only once.", "url": "https://github.com/apache/helix/pull/1119#discussion_r447905344", "createdAt": "2020-06-30T18:48:22Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {\n+      CountDownLatch latch = new CountDownLatch(1);\n+      SyncContext ctx = new SyncContext(latch);\n+\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();\n+      zkConnection.getZookeeper().sync(_syncPath, new AsyncCallback.VoidCallback() {\n+        @Override\n+        public void processResult(int rt, String s, Object ctx) {\n+          LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId, rt);\n+          SyncContext synCtx = ((SyncContext) ctx);\n+          synCtx.setRc(new AtomicInteger(rt));\n+          synCtx.getLatch().countDown();\n+        }\n+      }, ctx);\n+\n+      try {\n+        latch.await();\n+      } catch (InterruptedException e) {\n+        LOG.info(\"retrySync latch waiting got interrrupted with sessionId {} \", sessionId);\n+        throw new ZkInterruptedException(e);\n+      }\n+\n+      KeeperException.Code code = KeeperException.Code.get(ctx.getRc().get());\n+      if (code == OK) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+            code);\n+        break;\n+      }\n+      if (code == CONNECTIONLOSS || code == SESSIONMOVED) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and retry\", sessionId,\n+            code);\n+        continue;\n+      }\n+      // Not retryable, including session expiration; but having error. Log the error and return\n+      LOG.error(\n+          \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+          sessionId, code);\n+      return false;\n+    }\n+    return true;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n     for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n+      _eventThread\n+          .send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n-        @Override\n-        public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n-        }\n-      });\n+            @Override\n+            public void run() throws Exception {\n+              boolean proceed = retrySync(sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDY0OQ=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU2MjU3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNDoyOFrOGrJJbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0Njo0NFrOGrJ6hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTgyMw==", "bodyText": "Except these three types of code, is there any other code need to be handled?", "url": "https://github.com/apache/helix/pull/1119#discussion_r447891823", "createdAt": "2020-06-30T18:24:28Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {\n+      CountDownLatch latch = new CountDownLatch(1);\n+      SyncContext ctx = new SyncContext(latch);\n+\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();\n+      zkConnection.getZookeeper().sync(_syncPath, new AsyncCallback.VoidCallback() {\n+        @Override\n+        public void processResult(int rt, String s, Object ctx) {\n+          LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId, rt);\n+          SyncContext synCtx = ((SyncContext) ctx);\n+          synCtx.setRc(new AtomicInteger(rt));\n+          synCtx.getLatch().countDown();\n+        }\n+      }, ctx);\n+\n+      try {\n+        latch.await();\n+      } catch (InterruptedException e) {\n+        LOG.info(\"retrySync latch waiting got interrrupted with sessionId {} \", sessionId);\n+        throw new ZkInterruptedException(e);\n+      }\n+\n+      KeeperException.Code code = KeeperException.Code.get(ctx.getRc().get());\n+      if (code == OK) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+            code);\n+        break;\n+      }\n+      if (code == CONNECTIONLOSS || code == SESSIONMOVED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDM4OQ==", "bodyText": "We intentionally not to handle others, including session expiration. See comment on line 1238", "url": "https://github.com/apache/helix/pull/1119#discussion_r447904389", "createdAt": "2020-06-30T18:46:44Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1165,20 +1177,92 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncContext {\n+    private CountDownLatch _latch;\n+    private AtomicInteger _rc;\n+\n+    public SyncContext(CountDownLatch latch) {\n+      _latch = latch;\n+    }\n+\n+    AtomicInteger getRc() {\n+      return _rc;\n+    }\n+\n+    void setRc(AtomicInteger rc) {\n+      _rc = rc;\n+    }\n+\n+    CountDownLatch getLatch() {\n+      return _latch;\n+    }\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+    while (true) {\n+      CountDownLatch latch = new CountDownLatch(1);\n+      SyncContext ctx = new SyncContext(latch);\n+\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();\n+      zkConnection.getZookeeper().sync(_syncPath, new AsyncCallback.VoidCallback() {\n+        @Override\n+        public void processResult(int rt, String s, Object ctx) {\n+          LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", sessionId, rt);\n+          SyncContext synCtx = ((SyncContext) ctx);\n+          synCtx.setRc(new AtomicInteger(rt));\n+          synCtx.getLatch().countDown();\n+        }\n+      }, ctx);\n+\n+      try {\n+        latch.await();\n+      } catch (InterruptedException e) {\n+        LOG.info(\"retrySync latch waiting got interrrupted with sessionId {} \", sessionId);\n+        throw new ZkInterruptedException(e);\n+      }\n+\n+      KeeperException.Code code = KeeperException.Code.get(ctx.getRc().get());\n+      if (code == OK) {\n+        LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+            code);\n+        break;\n+      }\n+      if (code == CONNECTIONLOSS || code == SESSIONMOVED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTgyMw=="}, "originalCommit": {"oid": "7fbd24345d3222483e6532d07295afc0df65af47"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjAyMDAwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoxMDo1NFrOGxoekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMTozNjoyNFrOGxrCoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NjU5NQ==", "bodyText": "How about just call it \"zk.autosync.enabled\"", "url": "https://github.com/apache/helix/pull/1119#discussion_r454696595", "createdAt": "2020-07-14T23:10:54Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -50,4 +50,14 @@\n    */\n   public static final String ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES =\n       \"zk.serializer.znrecord.write.size.limit.bytes\";\n+\n+  /**\n+   * This property determines the behavior of ZkClient issuing an sync() to server upon new session\n+   * established.\n+   *\n+   * <p>\n+   *   The default value is \"true\" (issuing sync)\n+   */\n+  public static final String ZK_SYNC_UPON_NEWSESSION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczODU5Mg==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454738592", "createdAt": "2020-07-15T01:36:24Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -50,4 +50,14 @@\n    */\n   public static final String ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES =\n       \"zk.serializer.znrecord.write.size.limit.bytes\";\n+\n+  /**\n+   * This property determines the behavior of ZkClient issuing an sync() to server upon new session\n+   * established.\n+   *\n+   * <p>\n+   *   The default value is \"true\" (issuing sync)\n+   */\n+  public static final String ZK_SYNC_UPON_NEWSESSION =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NjU5NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA2MTg4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyOTo1MFrOGxo3Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjoxODoxNlrOGxv0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjg2Mg==", "bodyText": "nit, shall we define the default value of ZK_SYNC_UPON_NEWSESSION in the ZkSystemPropertyKeys instead of hardcode it here?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454702862", "createdAt": "2020-07-14T23:29:50Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +199,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_SYNC_UPON_NEWSESSION, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczODg3MA==", "bodyText": "This seems not to be the normal pattern. ZkSystemPropertyKeys contains only keys, not default value.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454738870", "createdAt": "2020-07-15T01:37:26Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +199,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_SYNC_UPON_NEWSESSION, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjg2Mg=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0MjkzNg==", "bodyText": "Or can you scratch the code or give an example?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454742936", "createdAt": "2020-07-15T01:52:04Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +199,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_SYNC_UPON_NEWSESSION, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjg2Mg=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MjgzOQ==", "bodyText": "You are right, the keys class is just for keys. For now, we can just define a default value in this ZkClient.java (at least not hardcode).\nBut moving forward, we discussed that we shall have a property provider that contains the keys and default values and also reads the configuration too.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454792839", "createdAt": "2020-07-15T05:01:23Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +199,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_SYNC_UPON_NEWSESSION, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjg2Mg=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxNjc4MQ==", "bodyText": "ZK_AUTOSYNC_ENABLED_DEFAUL is define as \"true\"", "url": "https://github.com/apache/helix/pull/1119#discussion_r454816781", "createdAt": "2020-07-15T06:18:16Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +199,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_SYNC_UPON_NEWSESSION, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjg2Mg=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA2NTUwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozMTozMFrOGxo5Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozMTozMFrOGxo5Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzM4Mg==", "bodyText": "private static final String SYNC_PATH = \"/\" ?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454703382", "createdAt": "2020-07-14T23:31:30Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +114,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA3MDg3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozMzo1M1rOGxo8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMTo1MDo1MlrOGxrSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDE0Mw==", "bodyText": "Can we move it to the ZkAsyncCallbacks file so all the callbacks can be found there?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454704143", "createdAt": "2020-07-14T23:33:53Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0MjUzNw==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454742537", "createdAt": "2020-07-15T01:50:52Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDE0Mw=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA3Nzk3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozNzoxMVrOGxpAMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMTo0Mjo1OVrOGxrJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTIwMQ==", "bodyText": "Pass the current system time or the metric number will be messed up.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454705201", "createdAt": "2020-07-14T23:37:11Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0MDMxNw==", "bodyText": "good catch.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454740317", "createdAt": "2020-07-15T01:42:59Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTIwMQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA4MTE0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozODozNlrOGxpCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjoxMToxM1rOGxvp0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ==", "bodyText": "Is sync counted as write operations? Just to confirm.\nI know it is kind of happening in order like a write, but does it actually update anything on the server-side? Note if we record the type differently, then the server-side metric and client-side metric will have different numbers.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454705675", "createdAt": "2020-07-14T23:38:36Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczOTY1Ng==", "bodyText": "Sync() does not update any data in the server. However it blocks any read arriving later than it.\nSo your point is that if server metrics does not report it as write, nor should we do it here. Otherwise, both should report it as write?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454739656", "createdAt": "2020-07-15T01:40:21Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5NDEwMw==", "bodyText": "As long as they are treated the same on both sides, I'm good.\nBut it seems to be a read op.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454794103", "createdAt": "2020-07-15T05:06:08Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMjg2Nw==", "bodyText": "But it seems to be a read op.\n\nDo you mean the server side metrics treat sync() as read, so this one here should be treated as read? Put it another way, we don't record it?\nWhat is your proposal?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454802867", "createdAt": "2020-07-15T05:36:01Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwNTQxMQ==", "bodyText": "As I said, \"As long as they are treated the same on both sides, I'm good.\"\nNote this is not a major concern for the opensource world. Because the official Zookeeper server does not treat read/write differently. It only applies to the modified ZK version. Could you please double-check and confirm we are recording them with the same type?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454805411", "createdAt": "2020-07-15T05:44:10Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxNDE2Mw==", "bodyText": "Just checked, internal ZK metrics, sync() is treated as read.\nwill change to new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true)", "url": "https://github.com/apache/helix/pull/1119#discussion_r454814163", "createdAt": "2020-07-15T06:11:13Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTY3NQ=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA4NTYzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0MDoxOFrOGxpEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMTozMToyNlrOGxq9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNjI4Mw==", "bodyText": "Can we move this check to the caller of retrySync()? So the method will do exactly what it is named.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454706283", "createdAt": "2020-07-14T23:40:18Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNzI4OA==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454737288", "createdAt": "2020-07-15T01:31:26Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNjI4Mw=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA5NDU3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0NDoxOFrOGxpJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0NDoxOFrOGxpJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzU0Mw==", "bodyText": "As mentioned above, the check of _syncOnNewSession can be put here to avoid the unnecessary ZK event.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454707543", "createdAt": "2020-07-14T23:44:18Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();\n+    final ZooKeeper zk = zkConnection.getZookeeper();\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, _syncPath, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n+\n+    _eventThread.send(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA5NjQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0NDo1OFrOGxpKSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMToyODozM1rOGxq6Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzc4Ng==", "bodyText": "nit, to be compact,\nif (retrySync(sessionId) == false) {\n...\n}", "url": "https://github.com/apache/helix/pull/1119#discussion_r454707786", "createdAt": "2020-07-14T23:44:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();\n+    final ZooKeeper zk = zkConnection.getZookeeper();\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, _syncPath, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n+\n+    _eventThread.send(\n+        new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+            sessionId) {\n+          @Override\n+          public void run() throws Exception {\n+            boolean syncStatus = retrySync(sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNjQzMA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454736430", "createdAt": "2020-07-15T01:28:33Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();\n+    final ZooKeeper zk = zkConnection.getZookeeper();\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, _syncPath, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n+\n+    _eventThread.send(\n+        new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+            sessionId) {\n+          @Override\n+          public void run() throws Exception {\n+            boolean syncStatus = retrySync(sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzc4Ng=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEwMjkyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0ODowNlrOGxpN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxMjo0NFrOG12DGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA==", "bodyText": "I think you can just refer the ZkClient object itself in the doAsyncSync call to simplify these codes. Or is there any concern of reading the Zookeeper inside doAsyncSync where it is really used?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454708714", "createdAt": "2020-07-14T23:48:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTc0MQ==", "bodyText": "I guess you concern if the Zookeeper object is changed if new session established. But I think we can still keep retrying the sync call, although it is in theory not possible because we stop retrying on session expiring.\nOr is there anything else?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454709741", "createdAt": "2020-07-14T23:51:34Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNTk1Nw==", "bodyText": "You got the point. One zookeeper object one session, This is the invariant.\nFor this fixed session/zookeeper object, if sync() failed, let it be. The next time session reconnected, a new fire all event would be issued and a new retrySync() would be used with the new session.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454735957", "createdAt": "2020-07-15T01:26:44Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5NDU4OA==", "bodyText": "You mean it is ok to NOT pass the Zookeeper? The interface is awkward in the current way. You shall be able to get the Zookeeper inside the doSync call.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454794588", "createdAt": "2020-07-15T05:07:55Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMjEyNg==", "bodyText": "I mean we should pass in ZooKeeper object for doAsyncSync().\nThis is different from other doAsyc{verb}.\nOthers have auto retry after session changes (thus ZooKeeper object change). But this one we need to use the same ZooKeeper object.\nThis is the reason why this doAsycSync() has one more parameter as Zookeeper zk. It looks different from others.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454802126", "createdAt": "2020-07-15T05:33:27Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwNDg5MQ==", "bodyText": "This is my confusing part. Your retry will stop if session expired. Then even you get the zk from ZkClient every time, you will get the same one, no?", "url": "https://github.com/apache/helix/pull/1119#discussion_r454804891", "createdAt": "2020-07-15T05:42:42Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwOTI3NQ==", "bodyText": "This is how I look at it.\nLet us say the code is like this\nvoid doAsyncSync( final String path, final long startT,\n      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n\n     final ZooKeeper zk = (ZkConnection) getConnection()).getZookeeper();\n     zk.sync(path, cb,\n        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n          @Override\n          protected void doRetry() throws Exception {\n            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n          }\n        });\n  }\n\n\nThen, there is chance that when connection_loss, we have retry request from the asyncThread of ZkClient. The retry request is finally doAsyncSync(). Then, it would retrieve the ZooKeeper object from connection again. Note, by this time, the session can be changed (thus ZooKeeper object with a new session ID) is used.\nThis is not what we want. At least this sync() call is wasted for the reason the new session would invoke another fireAllEvent().", "url": "https://github.com/apache/helix/pull/1119#discussion_r454809275", "createdAt": "2020-07-15T05:56:04Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxNDIyNQ==", "bodyText": "I got what you said, and I agree with the idea. But this is hard to achieve, even with your current work, the zookeeper object could be changed just before this selected line.\nTo make it solid,\n\nWe need to check the session Id after you get the zk object. If session does not match then skip the operation.\nYou might want to try-catch the line 1260 since if the zk already becomes invalid at the first call, it might throw an exception and we can just return false.\n\nIn addition, I think it is a good point to comment on the code so new devs won't \"simplify\" this part. And let's have a test to cover this case to ensure the callback wait won't be stuck. In detail, the zk object is changed during the retry.", "url": "https://github.com/apache/helix/pull/1119#discussion_r454814225", "createdAt": "2020-07-15T06:11:26Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDY3Ng==", "bodyText": "We need to check the session Id after you get the zk object. If session does not match then skip the operation.\n\n\nThe first ZooKeeper object extracted from connection (line 1259) is up in the stack in processStateChange() and then passed into doAsync(). Note, procesStateChange() is inside the lock of getEventLock(). I think under the lock, there is not possibility of changing another ZooKeeper object of different session, right? So this is not a concern in this case.\n\n\nYou might want to try-catch the line 1260 since if the zk already becomes invalid at the first call, it might throw an exception and we can just return false.\n\n\nSee the reply above. Am I missing something here? Can you give an example?", "url": "https://github.com/apache/helix/pull/1119#discussion_r455230676", "createdAt": "2020-07-15T17:46:33Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1MjY0NQ==", "bodyText": "processStateChange() and fireNewSessionEvents() is in the lock for sure.\nHowever, your retrySync() is in the event thread. When it is running, it is not in any ZkEventLock protection. If you have 2 consequence new session establishments, then you might have 2 events in the queue if the processing is stuck. And when you process the first new session event, you are using the latest zk object (the wrong one).\nThat is exactly why we check the session Id in the ZkHelixManager.handleNewSession().\nFeel free to refer to the related new session handling test cases for the similar logic.", "url": "https://github.com/apache/helix/pull/1119#discussion_r455252645", "createdAt": "2020-07-15T18:22:35Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2NTA4NA==", "bodyText": "This is a good point. My intention is actually to get the Zookeeper object from Zookeeper event thread (not ZkClient even thread) and pass it to retrySync().\nMore specifically the code should be like the following:\n    if (_syncOnNewSession) {\n\n      final ZkConnection zkConnection = (ZkConnection) getConnection();\n      final ZooKeeper zk = zkConnection.getZookeeper();\n      _eventThread.send(new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n          sessionId) {\n        @Override\n        public void run() throws Exception {\n          if (retrySync(sessionId, zk) == false) {\n            LOG.warn(\"sync on session {} failed\", sessionId);\n          }\n        }\n      });\n    }", "url": "https://github.com/apache/helix/pull/1119#discussion_r455265084", "createdAt": "2020-07-15T18:42:56Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2NzA4Mg==", "bodyText": "That works. But you already have sessionId. You can check and decide whether to skip the run or not. Why bother passing the redundant information?", "url": "https://github.com/apache/helix/pull/1119#discussion_r455267082", "createdAt": "2020-07-15T18:46:24Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM4MjQwMQ==", "bodyText": "Check sessionId is after the fact. It can incur unnecessary sync() to server. For the new session, there may be two sync() in a row.\nIn this case we are asserting that for each new session, we have exactly one sync() going to server.", "url": "https://github.com/apache/helix/pull/1119#discussion_r455382401", "createdAt": "2020-07-15T21:50:02Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNDU5Ng==", "bodyText": "Added test and comments", "url": "https://github.com/apache/helix/pull/1119#discussion_r455414596", "createdAt": "2020-07-15T23:05:31Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0OTU1NQ==", "bodyText": "Sorry that I cannot follow the comment that \"Check sessionId is after the fact...\".\nCould you please give me examples that how this invokes multiple sync() to the server? And how your current design prevent it.\nTO be clear what I meant by adding the session check is that check session Id in retrySync() before doAsyncSync.\nfinal ZkConnection zkConnection = (ZkConnection) getConnection();\nfinal ZooKeeper zk = zkConnection.getZookeeper();\nif (zk.getSessionId().equals(sessionId)) {\ndoAsyncSync(zk, _syncPath, startT, callbackHandler);\n} else {\nreturn false; // or throw exception\n}", "url": "https://github.com/apache/helix/pull/1119#discussion_r457649555", "createdAt": "2020-07-20T19:44:01Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTg5OA==", "bodyText": "Just saw this comment.\nThe gist is that the checking of sessionId and doAsyncSync() is not atomic. After if (zk.getSessionId().equals(sessionId)) succeed, the Zookeeper object may be changed due to a new session established. This would make the current doAsyncSync() work for the new session. Since the new session would trigger another fireNewSession(), which would put another  retrySync(). Then we will have another sync() to the Zookeeper for the new session. So in sum, the new session can be two sync() in a row.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459111898", "createdAt": "2020-07-22T22:09:07Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMzI0Mg==", "bodyText": "I will argue that it won't be an issue even it is not atomic. Since you get the zk object first. So if the zk object is changed, the later check will not be applied to the newer zk object.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459113242", "createdAt": "2020-07-22T22:12:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,20 +1237,109 @@ private void reconnect() {\n     }\n   }\n \n+  private class SyncCallbackHandler extends ZkAsyncCallbacks.DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;\n+        }\n+      } catch (ClassCastException | NullPointerException ex) {\n+        LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n+            _sessionId, rc, ex);\n+        return false;\n+      }\n+    }\n+  }\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, startT, cb);\n+          }\n+        });\n+  }\n+\n+  private boolean retrySync(String sessionId) throws ZkInterruptedException {\n+    if (!_syncOnNewSession) {\n+      return true;\n+    }\n+\n+    SyncCallbackHandler callbackHandler = new SyncCallbackHandler(sessionId);\n+\n+    final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODcxNA=="}, "originalCommit": {"oid": "2ea1d623e0aa9c095febe55a9a623610f9b5aadc"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDE0MTc5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1Mjo1NFrOGy2BHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1NjoyMlrOG1x9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzAwNA==", "bodyText": "Will there be potential sync on different code? If not, \"if\" statement will be much simpler than this.", "url": "https://github.com/apache/helix/pull/1119#discussion_r455967004", "createdAt": "2020-07-16T17:52:54Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NzExMg==", "bodyText": "Previously, I added SESSIONMOVED. That is the only potential one. But I feel that one should fail (return to false). Currently it only follow the format of the parent class needRetry(). Maybe it is a good idea to just change it to \"if\".", "url": "https://github.com/apache/helix/pull/1119#discussion_r456597112", "createdAt": "2020-07-17T18:08:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzAwNA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjI2NQ==", "bodyText": "+1 on if-else to be cleaner/simpler.", "url": "https://github.com/apache/helix/pull/1119#discussion_r457662265", "createdAt": "2020-07-20T20:08:34Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzAwNA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NjM5OA==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459046398", "createdAt": "2020-07-22T19:56:22Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        switch (KeeperException.Code.get(rc)) {\n+          /** Connection to the server has been lost */\n+          case CONNECTIONLOSS:\n+            return true;\n+          default:\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzAwNA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDE0Njk5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NDozMVrOGy2EvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo0NzoyOFrOG1xr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzkzMw==", "bodyText": "The only usage for zkConnection is to get Zookeeper. Why not combine these two in oneline:\nfinal ZooKeeper zk = (ZkConnection) getConnection().getZookeeper();", "url": "https://github.com/apache/helix/pull/1119#discussion_r455967933", "createdAt": "2020-07-16T17:54:31Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  retrySync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean retrySync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, _syncPath, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MTc3MA==", "bodyText": "changed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459041770", "createdAt": "2020-07-22T19:47:28Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  retrySync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean retrySync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, _syncPath, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZkConnection zkConnection = (ZkConnection) getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzkzMw=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDE1NDUzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NjoyOVrOGy2JfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowNToxMFrOGzcZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTE0OA==", "bodyText": "If there is a lot of connect/disconnect, could this zk.sync be called multiple times at same time? Would that cause potential problems?\nSince Zookeeper event thread is not dedup thread, are we just assuming the sync call could be short?", "url": "https://github.com/apache/helix/pull/1119#discussion_r455969148", "createdAt": "2020-07-16T17:56:29Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NTg2OA==", "bodyText": "Exactly one zk.sync() for one new session if successful.  Otherwise, the retry would fail before the next \"retrySync\" is inserted to zkclient event queue.\nBasically, for one retrySync(), it would only be invoked preceding the current new session. It would only retry connectionloss and would fail (thus not retry) if there is other exception. Thus, we don't need to worry this event clogging the event queue. Nor will any two of them run at the same time.", "url": "https://github.com/apache/helix/pull/1119#discussion_r456595868", "createdAt": "2020-07-17T18:05:10Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTE0OA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDE1NjgyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NzowOVrOGy2LAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo0NDo0OFrOG1xmfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTUzOA==", "bodyText": "Let rename it. We dont have retry right now. It could cause reader confusing.", "url": "https://github.com/apache/helix/pull/1119#discussion_r455969538", "createdAt": "2020-07-16T17:57:09Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  retrySync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean retrySync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MDM4MQ==", "bodyText": "changed it to issue sync()", "url": "https://github.com/apache/helix/pull/1119#discussion_r459040381", "createdAt": "2020-07-22T19:44:48Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1238,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, retrySync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  retrySync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean retrySync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTUzOA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg1MDQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNDowM1rOG0dp_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1MTo1MVrOG1x0yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAyMA==", "bodyText": "Don't forget to remove these unused static imports.\nFYI, actually I would prefer not to import the static constant. You could just use KeeperException.Code.CONNECTIONLOSS for better readability. Ref: https://docs.oracle.com/javase/7/docs/technotes/guides/language/static-import.html", "url": "https://github.com/apache/helix/pull/1119#discussion_r457665020", "createdAt": "2020-07-20T20:14:03Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -63,6 +68,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.zookeeper.KeeperException.Code.CONNECTIONLOSS;\n+import static org.apache.zookeeper.KeeperException.Code.OK;\n+import static org.apache.zookeeper.KeeperException.Code.SESSIONMOVED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NDA0MQ==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459044041", "createdAt": "2020-07-22T19:51:51Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -63,6 +68,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.zookeeper.KeeperException.Code.CONNECTIONLOSS;\n+import static org.apache.zookeeper.KeeperException.Code.OK;\n+import static org.apache.zookeeper.KeeperException.Code.SESSIONMOVED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAyMA=="}, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg1MjExOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNDozMFrOG0dq6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNDozMFrOG0dq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTI1OA==", "bodyText": "static final?", "url": "https://github.com/apache/helix/pull/1119#discussion_r457665258", "createdAt": "2020-07-20T20:14:30Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -74,6 +83,7 @@\n public class ZkClient implements Watcher {\n   private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n   private static long MAX_RECONNECT_INTERVAL_MS = 30000; // 30 seconds\n+  private static String ZK_AUTOSYNC_ENABLED_DEFAULT = \"true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg1NDYyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNTowNlrOG0dsRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNTowNlrOG0dsRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTYwNA==", "bodyText": "I think it is better to make it a constant: static final SYNC_PATH?", "url": "https://github.com/apache/helix/pull/1119#discussion_r457665604", "createdAt": "2020-07-20T20:15:06Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +115,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  private final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d001716f4e00deb7e07676eb031f519164dae800"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA1OTE0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1NjoxMFrOG11qPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozOTozN1rOG12rIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNjg3Nw==", "bodyText": "_syncPath -> SYNC_PATH?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459106877", "createdAt": "2020-07-22T21:56:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  private static final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMzQ4OA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459123488", "createdAt": "2020-07-22T22:39:37Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  private static final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNjg3Nw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA3NjI3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMzoxMFrOG110zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowNTo1NlrOG15PwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTU4Mg==", "bodyText": "Actually this is no need. If exception is thrown here, test will fail.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459109582", "createdAt": "2020-07-22T22:03:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);\n+    }\n+\n+    // Expire the original session.\n+    ZkTestHelper.expireSession(_zkClient);\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      try {\n+        // New session id should not equal to expired session id.\n+        return _zkClient.getSessionId() != originalSessionId;\n+      } catch (ZkClientException ex) {\n+        return false;\n+      }\n+    }, 1000L));\n+\n+    // Verify the node is created and its data is correct.\n+    Stat stat = new Stat();\n+    String nodeData = null;\n+    try {\n+       nodeData = _zkClient.readData(path, stat, true);\n+    } catch (ZkException e) {\n+      Assert.fail(\"fail to read data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDMzMg==", "bodyText": "As sync-ed, I found other case, not resolved. Let me validate this. Currently, this does not hurt.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459124332", "createdAt": "2020-07-22T22:41:55Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);\n+    }\n+\n+    // Expire the original session.\n+    ZkTestHelper.expireSession(_zkClient);\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      try {\n+        // New session id should not equal to expired session id.\n+        return _zkClient.getSessionId() != originalSessionId;\n+      } catch (ZkClientException ex) {\n+        return false;\n+      }\n+    }, 1000L));\n+\n+    // Verify the node is created and its data is correct.\n+    Stat stat = new Stat();\n+    String nodeData = null;\n+    try {\n+       nodeData = _zkClient.readData(path, stat, true);\n+    } catch (ZkException e) {\n+      Assert.fail(\"fail to read data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTU4Mg=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTYzMw==", "bodyText": "I meant, it is not about it doesn't hurt. ZkTestHelper.expireSession(_zkClient) could also possibly throw exception. Are you going to do this try...catch...fail?\nIf this test throws exception, it definitely will fail from the point where exception is thrown.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459165633", "createdAt": "2020-07-23T01:05:56Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);\n+    }\n+\n+    // Expire the original session.\n+    ZkTestHelper.expireSession(_zkClient);\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      try {\n+        // New session id should not equal to expired session id.\n+        return _zkClient.getSessionId() != originalSessionId;\n+      } catch (ZkClientException ex) {\n+        return false;\n+      }\n+    }, 1000L));\n+\n+    // Verify the node is created and its data is correct.\n+    Stat stat = new Stat();\n+    String nodeData = null;\n+    try {\n+       nodeData = _zkClient.readData(path, stat, true);\n+    } catch (ZkException e) {\n+      Assert.fail(\"fail to read data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTU4Mg=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA3Njc3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowMzoyM1rOG111IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo0MjoxOVrOG12u7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTY2NA==", "bodyText": "Same. Actually this is no need. If exception is thrown here, test will fail.\nRealizing this will also help you with later tests implement.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459109664", "createdAt": "2020-07-22T22:03:23Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDQ2MQ==", "bodyText": "same. For safety for now.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459124461", "createdAt": "2020-07-22T22:42:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTY2NA=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA5MDQ5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowODo1OVrOG119oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo0Mjo0NlrOG12vdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTg0MA==", "bodyText": "I think I have commented before the name convention of static final field is SYNC_PATH.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459111840", "createdAt": "2020-07-22T22:08:59Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  private static final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDU5OA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459124598", "createdAt": "2020-07-22T22:42:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -105,6 +111,9 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  private final boolean _syncOnNewSession;\n+  private static final String _syncPath = \"/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTg0MA=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA5MTAxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowOTowOFrOG1197Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NjozNFrOG2Zaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw==", "bodyText": "I wonder how NullPointerException is thrown?\nI think KeeperException.Code.get(rc) returns null if rc is not a valid KeeperException code.\nSo if it returns null, I think we log it as unknot return code?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459111917", "createdAt": "2020-07-22T22:09:08Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjUxNQ==", "bodyText": "Copied from base class. @jiajunwang, what is your take?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459126515", "createdAt": "2020-07-22T22:47:57Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyODIyMg==", "bodyText": "Haven't you checked the reason before copy the code, Kai : )\nThis method may return null.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459128222", "createdAt": "2020-07-22T22:52:50Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDMxMw==", "bodyText": "KeeperException.Code.get() can throw null point exception.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459140313", "createdAt": "2020-07-22T23:30:10Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NjczNw==", "bodyText": "@kaisun2000 Could you help understand this: KeeperException.Code.get() can throw null point exception. Underneath the lookup is a map. map.get(rc) returns null if rc doesn't exist.\n/**\n         * Get the Code value for a particular integer error code\n         * @param code int error code\n         * @return Code value corresponding to specified int code, or null\n         */\n        public static Code get(int code) {\n            return lookup.get(code);\n        }\n\nThe code should be like\nif (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n     return true;\n}\nLOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying.\",\n             _sessionId, rc);\nreturn false;", "url": "https://github.com/apache/helix/pull/1119#discussion_r459166737", "createdAt": "2020-07-23T01:10:21Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NDAxNA==", "bodyText": "@kaisun2000 I just realized you said the code is copied from \n  \n    \n      helix/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java\n    \n    \n        Lines 255 to 266\n      in\n      9e6dafa\n    \n    \n    \n    \n\n        \n          \n             switch (Code.get(rc)) { \n        \n\n        \n          \n             /** Connection to the server has been lost */ \n        \n\n        \n          \n             case CONNECTIONLOSS: \n        \n\n        \n          \n               /** The session has been expired by the server */ \n        \n\n        \n          \n             case SESSIONEXPIRED: \n        \n\n        \n          \n               /** Session moved to another server, so operation is ignored */ \n        \n\n        \n          \n             case SESSIONMOVED: \n        \n\n        \n          \n               return true; \n        \n\n        \n          \n             default: \n        \n\n        \n          \n               return false; \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } catch (ClassCastException | NullPointerException ex) { \n        \n    \n  \n\n\nLet me explain: Code.get(rc) could return null, and switch(null) gives NPE. That's why the code needs to catch NPE. But for your code here, I don't think NPE would happen.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459264014", "createdAt": "2020-07-23T07:33:47Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MjcwNg==", "bodyText": "This is a good point. I revert back to switch() same as JJ's original style. Logging unknown code due to NPE is important for us to troubleshooting if it happens in the field.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459692706", "createdAt": "2020-07-23T19:56:34Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);\n+      callback(rc, path, ctx);\n+    }\n+\n+    @Override\n+    public void handle() {\n+      // Make compiler happy, not used.\n+    }\n+\n+    @Override\n+    protected boolean needRetry(int rc) {\n+      try {\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n+      } catch (ClassCastException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTkxNw=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTEwODIxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxNjowOFrOG12ILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyNjo0MFrOG13ogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNDU0Mg==", "bodyText": "I still think Zookeeper is not required here. Please see my reply to the original thread. If we put the check logic here, it will work.\nThe reason I insist on doing this is that, when you put the old zk object here, if any new session created, then the old zk object will throw exceptions when you call it. That would be a ZK exception. And then we rely on our exception handling logic to ensure everything works fine.\nIf we check the current zk object with the session Id, then we can end this operation with explicit logic and with a very clean warning or error log.\nMoreover, as I mentioned in the first comment, the session Id and the input zk contain redundant information. You only need one of them.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459114542", "createdAt": "2020-07-22T22:16:08Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,84 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMzAxNQ==", "bodyText": "See my reply (just now) of the after fact checking cons here:\n\nJust saw this comment.\nThe gist is that the checking of sessionId and doAsyncSync() is not atomic. After if (zk.getSessionId().equals(sessionId)) succeed, the Zookeeper object may be changed due to a new session established. This would make the current doAsyncSync() work for the new session. Since the new session would trigger another fireNewSession(), which would put another retrySync(). Then we will have another sync() to the Zookeeper for the new session. So in sum, the new session can be two sync() in a row.\n\nBack to your concern about old Zk object throw exceptions, here is how I look at it:\nFirst, async call (sync() in this case), would not throw exception. The error code would from the callback (invoked in eventthread of ZooKeeper) would tell what is wrong. The checking is in protected boolean needRetry(int rc).", "url": "https://github.com/apache/helix/pull/1119#discussion_r459123015", "createdAt": "2020-07-22T22:38:15Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,84 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNDU0Mg=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDAwMQ==", "bodyText": "\u201cPlease see my reply to the original thread.\u201d, where I mentioned that this con is not real : )\nWhen you get the zk first then compared it with the session Id, you will have the right zk to use for sure. Or the check will fail and we will not really send sync request.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459124001", "createdAt": "2020-07-22T22:41:00Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,84 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNDU0Mg=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzOTIwMQ==", "bodyText": "As synced offline, we will not pass redundant data to issueAsync(). Only add zk.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459139201", "createdAt": "2020-07-22T23:26:40Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,84 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(String sessionId, ZooKeeper zk) throws ZkInterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNDU0Mg=="}, "originalCommit": {"oid": "9468e5d9e774dd1c79cae48d66e94d3287522a33"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ0MzEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowMTo1MlrOG15MFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0NjoxOFrOG2XLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NDY5Mw==", "bodyText": "Nit. This could be a constant: static final boolean SYNC_ON_NEW_SESSION = Boolean.parseBoolean(System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT))", "url": "https://github.com/apache/helix/pull/1119#discussion_r459164693", "createdAt": "2020-07-23T01:01:52Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +196,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjA0MA==", "bodyText": "_syncOnNewSession is final not static as this allows per zkclient different _syncOnNewSession behavior. We may later support this from the ZkClient constructor. Let us just keep it this way.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459656040", "createdAt": "2020-07-23T18:46:18Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -187,6 +196,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NDY5Mw=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjE0NzQ1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzozODo0NlrOG1_Yjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjo0MlrOG2Wgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NjE5MA==", "bodyText": "Nit, I think assertTrue(_zkClient.waitUntilConnected(1, TimeUnit.Second)); would be better than polling", "url": "https://github.com/apache/helix/pull/1119#discussion_r459266190", "createdAt": "2020-07-23T07:38:46Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTAzOA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459645038", "createdAt": "2020-07-23T18:26:42Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NjE5MA=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjE1MzkyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzo0MDo0OVrOG1_cUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxNzoxNFrOG2WMMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NzE1Mw==", "bodyText": "No need for this check, as it is already verified new session is established in ZkTestHelper.expireSession().", "url": "https://github.com/apache/helix/pull/1119#discussion_r459267153", "createdAt": "2020-07-23T07:40:49Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);\n+    }\n+\n+    // Expire the original session.\n+    ZkTestHelper.expireSession(_zkClient);\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzOTg1OA==", "bodyText": "delete.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459639858", "createdAt": "2020-07-23T18:17:14Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {\n+    final String path = \"/\" + TestHelper.getTestMethodName();\n+    final String data = \"Hello Helix 2\";\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper\n+        .verify(() -> _zkClient.getConnection().getZookeeperState().isConnected(), 1000L));\n+\n+    final long originalSessionId = _zkClient.getSessionId();\n+\n+    try {\n+      // Create node.\n+      _zkClient.create(path, data, CreateMode.PERSISTENT);\n+    } catch (Exception ex) {\n+      Assert.fail(\"Failed to create ephemeral node.\", ex);\n+    }\n+\n+    // Expire the original session.\n+    ZkTestHelper.expireSession(_zkClient);\n+\n+    // Wait until the ZkClient has got a new session.\n+    Assert.assertTrue(TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2NzE1Mw=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjE3OTI1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzo0OToxMlrOG1_rZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyODo1NVrOG2WlPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3MTAxMg==", "bodyText": "Do I understand correctly? This test actually doesn't really test sync, because:\nit is only one zk. It doesn't have to propagate data to other zk learners. So even without sync, this test will always pass, as the zkclient always connects to the same zk so it always sees the latest data.\nI actually think it may be difficult to test sync here. We could see how zk tests sync, which is more complicated: https://github.com/apache/zookeeper/blob/master/zookeeper-server/src/test/java/org/apache/zookeeper/test/SyncCallTest.java", "url": "https://github.com/apache/helix/pull/1119#discussion_r459271012", "createdAt": "2020-07-23T07:49:12Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjI2OA==", "bodyText": "Test the change won't make normal flow hanging.\nAgree It is hard to test sync() works when follower ZK lags leader. We have to trust ZK is right in this regard.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459646268", "createdAt": "2020-07-23T18:28:55Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -553,6 +554,52 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3MTAxMg=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMyMjQxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMToyOFrOG2BA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0MDowMlrOG2W9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MjkwOQ==", "bodyText": "From your comment The sync() would fail with a stale session., I understand that if the session expires, the following events with the expired session calls handleNewSession but they are skipped.\nI think there is other case other than sessionExpired that causes issueSync() to fail. If it fails, warn msg is logged. But stateListener still calls handleNewSession. It conflicts the log \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\". Then there is still a possibility handleNewSession reads stale data. Do I miss anything?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459292909", "createdAt": "2020-07-23T08:31:28Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+      _eventThread.send(new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+          sessionId) {\n         @Override\n         public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n+          if (issueSync(zk) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjQzNA==", "bodyText": "As synced offline, we can consider the current approach is a best effort one. The main trade-off is that waiting for succeeds of async sync() actually also has performance hit. (That is the reason why the sync() only has async version.) The designer of this API seems to envision that one can issue an asyc sync() without checking results and issue all the other read knowing they would see only updates after the sycn().\nFeel free to add another issue/request, if this turns out to be problematic in the field, let us revisit it.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459652434", "createdAt": "2020-07-23T18:40:02Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",\n+        sessionId, code);\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+      _eventThread.send(new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+          sessionId) {\n         @Override\n         public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n+          if (issueSync(zk) == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MjkwOQ=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMzMTE3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozNDowMVrOG2BGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0MDo0NFrOG2W-4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5NDI5NQ==", "bodyText": "I think this log should be outside of issueSync as \"stop calling handleNewSession\" is outside logic. This issueSync jus tells sync succeeds or not. But it doesn't have to determine handleNewSession or not, right?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459294295", "createdAt": "2020-07-23T08:34:01Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjgzMw==", "bodyText": "As discussed, will remove this one.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459652833", "createdAt": "2020-07-23T18:40:44Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1221,21 +1234,85 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; Log the error and return\n+    LOG.warn(\n+        \"sycnOnNewSession with sessionID {} async return code: {} and not retryable, stop calling handleNewSession\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5NDI5NQ=="}, "originalCommit": {"oid": "9e6dafa1f4151613f5537f4a49e18254620bc40d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODczOTkyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMzoxN1rOG2YY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMzo0NlrOG2cEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTg4MA==", "bodyText": "should we name it \"zk.zkclient.autosync.enabled\"?  zk is higher namespace, it includes configs not only applies to zkClient, it could be all zk-related configs in Helix.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459675880", "createdAt": "2020-07-23T19:23:17Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -50,4 +50,14 @@\n    */\n   public static final String ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES =\n       \"zk.serializer.znrecord.write.size.limit.bytes\";\n+\n+  /**\n+   * This property determines the behavior of ZkClient issuing an sync() to server upon new session\n+   * established.\n+   *\n+   * <p>\n+   *   The default value is \"true\" (issuing sync)\n+   */\n+  public static final String ZK_AUTOSYNC_ENABLED =\n+      \"zk.autosync.enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNjI0Nw==", "bodyText": "good point. changed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459736247", "createdAt": "2020-07-23T21:23:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -50,4 +50,14 @@\n    */\n   public static final String ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES =\n       \"zk.serializer.znrecord.write.size.limit.bytes\";\n+\n+  /**\n+   * This property determines the behavior of ZkClient issuing an sync() to server upon new session\n+   * established.\n+   *\n+   * <p>\n+   *   The default value is \"true\" (issuing sync)\n+   */\n+  public static final String ZK_AUTOSYNC_ENABLED =\n+      \"zk.autosync.enabled\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTg4MA=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODc1ODYyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyOTowNFrOG2YknA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyODo0M1rOG2cNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3ODg3Ng==", "bodyText": "Should this config per zkClient or globally in one JVM? If it is globally, the syncUpOnNewSession should be static and initiated at place it is defined?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459678876", "createdAt": "2020-07-23T19:29:04Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -200,6 +211,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3OTE0MQ==", "bodyText": "Otherwise, if it is per-zkClient, should we add this as one parameter in the constructor?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459679141", "createdAt": "2020-07-23T19:29:34Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -200,6 +211,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3ODg3Ng=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NzM5Ng==", "bodyText": "For now, it is globally unique. _syncOnNewSession as instance variable can help the change later if we want to make it instance configurable.\nAnyway, let me change it to global unique since huizhi also point it out.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459697396", "createdAt": "2020-07-23T20:05:38Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -200,6 +211,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3ODg3Ng=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczODQ3NQ==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459738475", "createdAt": "2020-07-23T21:28:43Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -200,6 +211,10 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n+\n+    String syncUpOnNewSession = System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT);\n+    _syncOnNewSession = Boolean.parseBoolean(syncUpOnNewSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3ODg3Ng=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODgxOTAyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo0ODowN1rOG2ZJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowOTo1NVrOG2Z1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4ODQxMA==", "bodyText": "If we do not plan to change doAsynSync as a public API, i.e, it will use internally in this case, why not merge this two methods together to one?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459688410", "createdAt": "2020-07-23T19:48:07Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5OTU5Nw==", "bodyText": "doAsyncSync() follows the pattern of other doAsync{verb} in terms of threading pattern.\nIssueSync actually waits for the result of doAsyncSync(). See the waitForSuccess().\nSeems to me It is not easy to merge them together, or maybe I did not fully grab what you mean here. So maybe you can scratch the code of how to do it?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459699597", "createdAt": "2020-07-23T20:09:55Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4ODQxMA=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODgyNjE5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MDoyM1rOG2ZOSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMToxMlrOG2ZkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4OTU0Nw==", "bodyText": "getHexSessionId()?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459689547", "createdAt": "2020-07-23T19:50:23Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NTEyNQ==", "bodyText": "We can't use getHexSessionID() as it use current ZooKeeper object from ZK.\nSee this discussion for detail\n#1119 (comment)\nBasically we want to achieve for each session, only one issueSync() is called before everything else. This is built on the invariant that each ZooKeeper object has only one session in its life.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459695125", "createdAt": "2020-07-23T20:01:12Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4OTU0Nw=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODgzMDc4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MTo1MFrOG2ZRAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxOTo0NlrOG2b87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MDI0Mg==", "bodyText": "suggest to change to \"Failed to call sync() on new session {}\" to be more specific.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459690242", "createdAt": "2020-07-23T19:51:50Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; return false.\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+      _eventThread.send(new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+          sessionId) {\n         @Override\n         public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n+          if (issueSync(zk) == false) {\n+            LOG.warn(\"sync on session {} failed\", sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDI1NA==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459734254", "createdAt": "2020-07-23T21:19:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1256,21 +1271,82 @@ private void reconnect() {\n     }\n   }\n \n+\n+\n+  private void doAsyncSync(final ZooKeeper zk, final String path, final long startT,\n+      final ZkAsyncCallbacks.SyncCallbackHandler cb) {\n+    zk.sync(path, cb,\n+        new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n+          @Override\n+          protected void doRetry() throws Exception {\n+            doAsyncSync(zk, path, System.currentTimeMillis(), cb);\n+          }\n+        });\n+  }\n+\n+  /*\n+   *  Note, issueSync takes a ZooKeeper (client) object and pass it to doAsyncSync().\n+   *  The reason we do this is that we want to ensure each new session event is preceded with exactly\n+   *  one sync() to server. The sync() is to make sure the server would not see stale data.\n+   *\n+   *  ZooKeeper client object has an invariant of each object has one session. With this invariant\n+   *  we can achieve each one sync() to server upon new session establishment. The reasoning is:\n+   *  issueSync() is called when fireNewSessionEvents() which in under eventLock of ZkClient. Thus\n+   *  we are guaranteed the ZooKeeper object passed in would have the new incoming sessionId. If by\n+   *  the time sync() is invoked, the session expires. The sync() would fail with a stale session.\n+   *  This is exactly what we want. The newer session would ensure another fireNewSessionEvents.\n+   */\n+  private boolean issueSync(ZooKeeper zk) {\n+    String sessionId = Long.toHexString(zk.getSessionId());\n+    ZkAsyncCallbacks.SyncCallbackHandler callbackHandler =\n+        new ZkAsyncCallbacks.SyncCallbackHandler(sessionId);\n+\n+    final long startT = System.currentTimeMillis();\n+    doAsyncSync(zk, SYNC_PATH, startT, callbackHandler);\n+\n+    callbackHandler.waitForSuccess();\n+\n+    KeeperException.Code code = KeeperException.Code.get(callbackHandler.getRc());\n+    if (code == KeeperException.Code.OK) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {} and proceeds\", sessionId,\n+          code);\n+      return true;\n+    }\n+\n+    // Not retryable error, including session expiration; return false.\n+    return false;\n+  }\n+\n   private void fireNewSessionEvents() {\n     // only managing zkclient fire handleNewSession event\n     if (!isManagingZkConnection()) {\n       return;\n     }\n     final String sessionId = getHexSessionId();\n-    for (final IZkStateListener stateListener : _stateListener) {\n-      _eventThread.send(new ZkEventThread.ZkEvent(\"New session event sent to \" + stateListener, sessionId) {\n \n+    if (_syncOnNewSession) {\n+      final ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+      _eventThread.send(new ZkEventThread.ZkEvent(\"Sync call before new session event of session \" + sessionId,\n+          sessionId) {\n         @Override\n         public void run() throws Exception {\n-          stateListener.handleNewSession(sessionId);\n+          if (issueSync(zk) == false) {\n+            LOG.warn(\"sync on session {} failed\", sessionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MDI0Mg=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODgzOTc1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NDozNlrOG2ZWkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMjoxNVrOG2cBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MTY2NA==", "bodyText": "Do we need a info log here if return success?  Also \"syncOnNewSession\" is not accurate, it should be \"sync() call\", right?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459691664", "createdAt": "2020-07-23T19:54:36Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTQ5MA==", "bodyText": "This is per session. Changed to debug and also the log text.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459735490", "createdAt": "2020-07-23T21:22:15Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,39 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {\n+    private String _sessionId;\n+\n+    public SyncCallbackHandler(String sessionId) {\n+      _sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void processResult(int rc, String path, Object ctx) {\n+      LOG.info(\"sycnOnNewSession with sessionID {} async return code: {}\", _sessionId, rc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MTY2NA=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg0NzE4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1Njo0M1rOG2Za-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMzo1NlrOG2Z9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5Mjc5Mg==", "bodyText": "This test seems is not quite relevant, how can we at least make sure the sync call success from this test?", "url": "https://github.com/apache/helix/pull/1119#discussion_r459692792", "createdAt": "2020-07-23T19:56:43Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -558,6 +558,41 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTUxMg==", "bodyText": "This test is just to make sure the normal flow will work. Namely no hanging. This is to make sure the change will not fail in the field after session expiration. This is a \"safety\" test.\nThe other side is to make sure not seeing outdate data if a follower Zk lagging leader. This can't be easily done without touch code of ZK server. Here, we have to trust sync() implementation is right.", "url": "https://github.com/apache/helix/pull/1119#discussion_r459701512", "createdAt": "2020-07-23T20:13:56Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -558,6 +558,41 @@ public void testCreateEphemeralWithValidSession()\n     _zkClient.delete(path);\n   }\n \n+  /*\n+   * This test validates that when ZK_AUTOSYNC_ENABLED_DEFAULT is enabled, sync() would be issued\n+   * before handleNewSession. ZKclient would not see stale data.\n+   */\n+  @Test\n+  public void testAutoSyncWithNewSessionEstablishment() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5Mjc5Mg=="}, "originalCommit": {"oid": "3a564e1805dafa3323ba1370843e6a0b4102a8c2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTI1OTg1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxMzowM1rOG2dXTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxMzowM1rOG2dXTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzM4OA==", "bodyText": "Unnecessary extra comma @kaisun2000", "url": "https://github.com/apache/helix/pull/1119#discussion_r459757388", "createdAt": "2020-07-23T22:13:03Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -118,6 +126,12 @@\n     NUM_CHILDREN_LIMIT = 100 * 1000;\n   }\n \n+  private static final boolean SYNC_ON_SESSION = Boolean.parseBoolean(\n+      System.getProperty(ZkSystemPropertyKeys.ZK_AUTOSYNC_ENABLED, ZK_AUTOSYNC_ENABLED_DEFAULT));\n+  ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9658e39799d8279989e6de73eb09a91e1ad9442"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1203, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}