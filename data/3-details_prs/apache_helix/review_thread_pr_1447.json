{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODk5ODA5", "number": 1447, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MDozM1rOEq-CyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozOTowMFrOErXfBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyMTY4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestZKCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MDozM1rOHdepTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyNDo0MFrOHdiGoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjg0Nw==", "bodyText": "nit, \"== true\" is not necessary.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500672847", "createdAt": "2020-10-07T00:40:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestZKCallback.java", "diffHunk": "@@ -165,8 +166,10 @@ public void testInvocation() throws Exception {\n \n       ExternalView extView = new ExternalView(\"db-12345\");\n       accessor.setProperty(keyBuilder.externalView(\"db-12345\"), extView);\n-      Thread.sleep(100);\n-      AssertJUnit.assertTrue(testListener.externalViewChangeReceived);\n+      boolean result = TestHelper.verify(() -> {\n+        return testListener.externalViewChangeReceived == true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyOTUwNA==", "bodyText": "removed all", "url": "https://github.com/apache/helix/pull/1447#discussion_r500729504", "createdAt": "2020-10-07T04:24:40Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestZKCallback.java", "diffHunk": "@@ -165,8 +166,10 @@ public void testInvocation() throws Exception {\n \n       ExternalView extView = new ExternalView(\"db-12345\");\n       accessor.setProperty(keyBuilder.externalView(\"db-12345\"), extView);\n-      Thread.sleep(100);\n-      AssertJUnit.assertTrue(testListener.externalViewChangeReceived);\n+      boolean result = TestHelper.verify(() -> {\n+        return testListener.externalViewChangeReceived == true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjg0Nw=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyMjYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MTowM1rOHdep3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyNDoyN1rOHdiGag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjk4OQ==", "bodyText": "nit, \"== true\" is not necessary.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500672989", "createdAt": "2020-10-07T00:41:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -131,22 +131,28 @@ public void testConfigChangeListeners() throws Exception {\n     TestConfigListener listener = new TestConfigListener();\n     listener.reset();\n     _manager.addInstanceConfigChangeListener(listener);\n-    Assert.assertTrue(listener._instanceConfigChanged,\n-        \"Should get initial instanceConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._instanceConfigChanged == true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyOTQ1MA==", "bodyText": "removed all.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500729450", "createdAt": "2020-10-07T04:24:27Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -131,22 +131,28 @@ public void testConfigChangeListeners() throws Exception {\n     TestConfigListener listener = new TestConfigListener();\n     listener.reset();\n     _manager.addInstanceConfigChangeListener(listener);\n-    Assert.assertTrue(listener._instanceConfigChanged,\n-        \"Should get initial instanceConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._instanceConfigChanged == true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjk4OQ=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyNjU5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MzozMVrOHdesOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowNDo0NVrOHeBk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU5Mg==", "bodyText": "This reminds me that we are not testing for the latency for now. For example, if the callback does not happen within one second, then we may want to fail the test.\nWill it be a good idea to have at least 2 Duration?\nPipeline_Wait_Duration = 60000;\nCallback_Wait_Duration = 2000;", "url": "https://github.com/apache/helix/pull/1447#discussion_r500673592", "createdAt": "2020-10-07T00:43:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 60 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MTIzOA==", "bodyText": "In this pull request, we don't have the case of waiting too long, we should fail the test case. How about let us add them once we have this case.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500681238", "createdAt": "2020-10-07T01:14:17Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 60 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU5Mg=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTE3OQ==", "bodyText": "Sure. This is not a big concern.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501245179", "createdAt": "2020-10-07T19:04:45Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 60 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU5Mg=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyOTk4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NToyNlrOHdeuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMToxMjowNFrOHdfIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDA5OQ==", "bodyText": "This changes the original test logic. We shall only need one pipeline run after the delay. And it shall guarantee the operation is done correctly.\nIf there is a concern about the delay time, we can wait for 2 * DEFAULT_OBSELETE_MSG_PURGE_DELAY.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500674099", "createdAt": "2020-10-07T00:45:26Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java", "diffHunk": "@@ -152,15 +152,15 @@ public void testDuplicateMsg() throws Exception {\n     Assert.assertTrue(messages.get(0).getFromState().equalsIgnoreCase(\"SLAVE\"));\n     Assert.assertTrue(messages.get(0).getToState().equalsIgnoreCase(\"MASTER\"));\n \n-    runPipeline(event, dataRefresh);\n-\n+    Thread.sleep(MessageGenerationPhase.DEFAULT_OBSELETE_MSG_PURGE_DELAY);\n     // Verify the stale message should be deleted\n     Assert.assertTrue(TestHelper.verify(() -> {\n+      runPipeline(event, dataRefresh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MDc0NA==", "bodyText": "Ok.\nThread.sleep(2 * MessageGenerationPhase.DEFAULT_OBSELETE_MSG_PURGE_DELAY);\nrunPipeline(event, dataRefresh);\nAssert.assertTrue(TestHelper.verify(() -> {\nif (dataCache.getStaleMessages().size() != 0) {\n        return false;\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION));\n\nSomething like the above.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500680744", "createdAt": "2020-10-07T01:12:04Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java", "diffHunk": "@@ -152,15 +152,15 @@ public void testDuplicateMsg() throws Exception {\n     Assert.assertTrue(messages.get(0).getFromState().equalsIgnoreCase(\"SLAVE\"));\n     Assert.assertTrue(messages.get(0).getToState().equalsIgnoreCase(\"MASTER\"));\n \n-    runPipeline(event, dataRefresh);\n-\n+    Thread.sleep(MessageGenerationPhase.DEFAULT_OBSELETE_MSG_PURGE_DELAY);\n     // Verify the stale message should be deleted\n     Assert.assertTrue(TestHelper.verify(() -> {\n+      runPipeline(event, dataRefresh);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDA5OQ=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkzNzIzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0OTo0MVrOHdeyZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDoyNjozNlrOHdiInQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTE3Mw==", "bodyText": "Please mind the naming of the variables. A meaningful name is required in all cases.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500675173", "createdAt": "2020-10-07T00:49:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier1 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMDAxMw==", "bodyText": "changed to clusterVerifier. there is only 1 verifier in this test case.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500730013", "createdAt": "2020-10-07T04:26:36Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier1 =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTE3Mw=="}, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU4NzcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowNzowMFrOHeBpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyNDozNVrOHeCObw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjM3OQ==", "bodyText": "nit, this one shall assert the result.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501246379", "createdAt": "2020-10-07T19:07:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -206,21 +206,24 @@ public void testScopedConfigChangeListener() throws Exception {\n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n     boolean result = TestHelper.verify(()-> {\n-      return listener._configChanged == true;\n+      return listener._configChanged;\n     }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(listener._configChanged,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MzA4Nw==", "bodyText": "Good catch.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501253087", "createdAt": "2020-10-07T19:19:41Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -206,21 +206,24 @@ public void testScopedConfigChangeListener() throws Exception {\n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n     boolean result = TestHelper.verify(()-> {\n-      return listener._configChanged == true;\n+      return listener._configChanged;\n     }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(listener._configChanged,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjM3OQ=="}, "originalCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NTc5MQ==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501255791", "createdAt": "2020-10-07T19:24:35Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -206,21 +206,24 @@ public void testScopedConfigChangeListener() throws Exception {\n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n     boolean result = TestHelper.verify(()-> {\n-      return listener._configChanged == true;\n+      return listener._configChanged;\n     }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(listener._configChanged,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjM3OQ=="}, "originalCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA4OTk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozOTowMFrOHeGd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0ODowMVrOHeGtJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTMwNA==", "bodyText": "The stack trace will be printed in one line with this code. I suggest we use new throwable().printstacktrace()", "url": "https://github.com/apache/helix/pull/1447#discussion_r501325304", "createdAt": "2020-10-07T21:39:00Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304df54719ca1f3456e7571a4490b2f4c3dac7ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyOTE5MQ==", "bodyText": "The is intentional one line. new throwable().printstacktrace() would give you multiple lines. That is used for true exception logging.\nThis is not really exception. Just a hint that verify() did not finish in time. We don't want to mix both case for easy reading the test output.\nThis Arrays.asList is used also in other places in our test.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501329191", "createdAt": "2020-10-07T21:48:01Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTMwNA=="}, "originalCommit": {"oid": "304df54719ca1f3456e7571a4490b2f4c3dac7ae"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1004, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}