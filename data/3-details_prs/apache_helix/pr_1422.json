{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDgzNzg3", "number": 1422, "title": "Fix currentState not being removed when pending message existed", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1421\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nWith this PR, we make sure that the controller sends DROPPED messages for the jobs that have just finished and their tasks have pending messages.\n\nTests\n\n\n The following tests are written for this issue:\nTestDropCurrentStateRunningTask.testJobCurrentStateDroppedAfterCompletion\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestDisableCustomCodeRunner.test:233 expected:<false> but was:<true>\n[INFO] \n[ERROR] Tests run: 1210, Failures: 1, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:11 h\n[INFO] Finished at: 2020-09-28T17:49:41-07:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test individually:\nmvn test -Dtest=\"TestDisableCustomCodeRunner\"\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.996 s - in org.apache.helix.integration.TestDisableCustomCodeRunner\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  14.768 s\n[INFO] Finished at: 2020-09-28T18:17:04-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-09-29T01:18:45Z", "url": "https://github.com/apache/helix/pull/1422", "merged": true, "mergeCommit": {"oid": "563a6c1356ea62905f3318fbd145fc5d19419499"}, "closed": true, "closedAt": "2020-10-06T20:23:10Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNcOfMgH2gAyNDk0NDgzNzg3Ojk0NzViN2QxMDAwNjM2MDJmMGVhNTlmM2YwNDUyOTZjNjM1YzM2YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPvHC8AFqTUwMjU0MzY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9475b7d100063602f0ea59f3f045296c635c36a8", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/9475b7d100063602f0ea59f3f045296c635c36a8", "committedDate": "2020-09-28T23:31:25Z", "message": "Fix currentState not removed when pending message existed\n\nThis commit, makes sure that controller drops send DROPPED message for the\njobs that have finished and have pending messages."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57428d337cce88c11e4512d9acca4ebed4afcc2e", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/57428d337cce88c11e4512d9acca4ebed4afcc2e", "committedDate": "2020-09-29T01:23:24Z", "message": "fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680927bae6374dabac05c6e9080a665339cb4e30", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/680927bae6374dabac05c6e9080a665339cb4e30", "committedDate": "2020-10-01T20:13:10Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzU2MTU1", "url": "https://github.com/apache/helix/pull/1422#pullrequestreview-500756155", "createdAt": "2020-10-01T22:19:04Z", "commit": {"oid": "680927bae6374dabac05c6e9080a665339cb4e30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzY0MTMx", "url": "https://github.com/apache/helix/pull/1422#pullrequestreview-500764131", "createdAt": "2020-10-01T22:38:33Z", "commit": {"oid": "680927bae6374dabac05c6e9080a665339cb4e30"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozODozM1rOHbc1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo0MzoxNlrOHbc6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjA4OQ==", "bodyText": "nit, is it possible to add this test to some existing test class? Recreating the whole test environment is expensive. And I feel we are adding more test classes than necessary. It will soon become unmanageable.", "url": "https://github.com/apache/helix/pull/1422#discussion_r498546089", "createdAt": "2020-10-01T22:38:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestJobCurrentStateDroppedAfterCompletion.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TestJobCurrentStateDroppedAfterCompletion extends TaskTestBase {\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 1;\n+    super.beforeClass();\n+  }\n+\n+  @AfterClass\n+  public void afterClass() throws Exception {\n+    super.afterClass();\n+  }\n+\n+  @Test\n+  public void testJobCurrentStateDroppedAfterCompletion() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680927bae6374dabac05c6e9080a665339cb4e30"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NzQwMQ==", "bodyText": "This means even the pending message target state matches the current state, we won't proceed? I know it is safer. But since it rolls back this enhancement, it might increase latency. Or does the removed check that the target state matches the current state will introduce any bug?", "url": "https://github.com/apache/helix/pull/1422#discussion_r498547401", "createdAt": "2020-10-01T22:43:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -122,30 +122,37 @@ public void updatePreviousAssignedTasksStatus(\n       Set<Integer> donePartitions = new TreeSet<>();\n       for (int pId : pSet) {\n         final String pName = pName(jobResource, pId);\n-        TaskPartitionState currState = updateJobContextAndGetTaskCurrentState(currStateOutput,\n+        TaskPartitionState currState = getTaskCurrentState(currStateOutput,\n             jobResource, pId, pName, instance, jobCtx, jobTgtState);\n \n-        if (!instance.equals(jobCtx.getAssignedParticipant(pId))) {\n-          LOG.warn(\n-              \"Instance {} does not match the assigned participant for pId {} in the job context. Skipping task scheduling.\",\n-              instance, pId);\n-          continue;\n-        }\n-\n         // Check for pending state transitions on this (partition, instance). If there is a pending\n         // state transition, we prioritize this pending state transition and set the assignment from\n         // this pending state transition, essentially \"waiting\" until this pending message clears\n+        // If there is a pending message, we should not continue to update the context because from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680927bae6374dabac05c6e9080a665339cb4e30"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f", "committedDate": "2020-10-05T16:01:29Z", "message": "Address the comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c4829665827567f4ce79628f8e077c291fc7e42", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/2c4829665827567f4ce79628f8e077c291fc7e42", "committedDate": "2020-10-05T15:56:44Z", "message": "Address the comments"}, "afterCommit": {"oid": "966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f", "committedDate": "2020-10-05T16:01:29Z", "message": "Address the comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTQzNjcw", "url": "https://github.com/apache/helix/pull/1422#pullrequestreview-502543670", "createdAt": "2020-10-06T02:34:23Z", "commit": {"oid": "966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMjozNDoyM1rOHcz7bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMjozOToxNVrOHc0ADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3Mjk3NA==", "bodyText": "It looks like it's just about the order of jobContext updating vs processing pending messages, if I understood you correctly. If that's the case, is there a reason why we removed the second section of the if statement here, as @jiajunwang mentioned?", "url": "https://github.com/apache/helix/pull/1422#discussion_r499972974", "createdAt": "2020-10-06T02:34:23Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -122,30 +122,37 @@ public void updatePreviousAssignedTasksStatus(\n       Set<Integer> donePartitions = new TreeSet<>();\n       for (int pId : pSet) {\n         final String pName = pName(jobResource, pId);\n-        TaskPartitionState currState = updateJobContextAndGetTaskCurrentState(currStateOutput,\n+        TaskPartitionState currState = getTaskCurrentState(currStateOutput,\n             jobResource, pId, pName, instance, jobCtx, jobTgtState);\n \n-        if (!instance.equals(jobCtx.getAssignedParticipant(pId))) {\n-          LOG.warn(\n-              \"Instance {} does not match the assigned participant for pId {} in the job context. Skipping task scheduling.\",\n-              instance, pId);\n-          continue;\n-        }\n-\n         // Check for pending state transitions on this (partition, instance). If there is a pending\n         // state transition, we prioritize this pending state transition and set the assignment from\n         // this pending state transition, essentially \"waiting\" until this pending message clears\n+        // If there is a pending message, we should not continue to update the context because from\n+        // controller prospective, state transition has not been completed yet if pending message\n+        // still existed.\n+        // If context gets updated here, controller might remove the job from RunTimeJobDAG which\n+        // can cause the task's CurrentState not being removed when there is a pending message for\n+        // that task.\n         Message pendingMessage =\n             currStateOutput.getPendingMessage(jobResource, new Partition(pName), instance);\n-        if (pendingMessage != null && !pendingMessage.getToState().equals(currState.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NDE1OQ==", "bodyText": "General comment: how did the legacy pipeline help masking this problem before? Or, was it not related to the legacy pipeline, but related to how we delete CurrentStates? The legacy pipeline logic processes the inflight jobs again, but it shouldn't make a difference?", "url": "https://github.com/apache/helix/pull/1422#discussion_r499974159", "createdAt": "2020-10-06T02:39:15Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -122,30 +122,37 @@ public void updatePreviousAssignedTasksStatus(\n       Set<Integer> donePartitions = new TreeSet<>();\n       for (int pId : pSet) {\n         final String pName = pName(jobResource, pId);\n-        TaskPartitionState currState = updateJobContextAndGetTaskCurrentState(currStateOutput,\n+        TaskPartitionState currState = getTaskCurrentState(currStateOutput,\n             jobResource, pId, pName, instance, jobCtx, jobTgtState);\n \n-        if (!instance.equals(jobCtx.getAssignedParticipant(pId))) {\n-          LOG.warn(\n-              \"Instance {} does not match the assigned participant for pId {} in the job context. Skipping task scheduling.\",\n-              instance, pId);\n-          continue;\n-        }\n-\n         // Check for pending state transitions on this (partition, instance). If there is a pending\n         // state transition, we prioritize this pending state transition and set the assignment from\n         // this pending state transition, essentially \"waiting\" until this pending message clears\n+        // If there is a pending message, we should not continue to update the context because from\n+        // controller prospective, state transition has not been completed yet if pending message\n+        // still existed.\n+        // If context gets updated here, controller might remove the job from RunTimeJobDAG which\n+        // can cause the task's CurrentState not being removed when there is a pending message for\n+        // that task.\n         Message pendingMessage =\n             currStateOutput.getPendingMessage(jobResource, new Partition(pName), instance);\n-        if (pendingMessage != null && !pendingMessage.getToState().equals(currState.name())) {\n-          // If there is a pending message whose destination state is different from the current\n-          // state, just make the same assignment as the pending message. This is essentially\n-          // \"waiting\" until this state transition is complete\n+        if (pendingMessage != null) {\n           processTaskWithPendingMessage(pId, pName, instance, pendingMessage, jobState, currState,\n               paMap, assignedPartitions);\n           continue;\n         }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "966f1cf5a4cac29b0cc93d27b8575d3a168f0f8f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}