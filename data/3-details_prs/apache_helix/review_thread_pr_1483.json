{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTA4Mzc5", "number": 1483, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzo0Mjo0MVrOExTN2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowNzowMFrOEyAG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTMwNTIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzo0Mjo0MVrOHnXaVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowNDoxN1rOHoeRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0MDA4NQ==", "bodyText": "LOG.error(\"message\", e);?", "url": "https://github.com/apache/helix/pull/1483#discussion_r511040085", "createdAt": "2020-10-23T17:42:41Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "diffHunk": "@@ -160,7 +164,7 @@ public static boolean afterClassCheck(String classname) {\n               &&  ! \"system\".equals(p.getThreadGroup().getName())).\n           collect(Collectors.groupingBy(p -> p.getName()));\n     } catch (Exception e) {\n-      System.out.println(\"filtering thread failure with exception:\" + e.getStackTrace());\n+      LOG.error(\"Filtering thread failure with exception:\" + e.getStackTrace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aaca9c867d31b05896bda308162bc3e841bf7c5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMTEzNw==", "bodyText": "Good point.", "url": "https://github.com/apache/helix/pull/1483#discussion_r512201137", "createdAt": "2020-10-26T19:04:17Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "diffHunk": "@@ -160,7 +164,7 @@ public static boolean afterClassCheck(String classname) {\n               &&  ! \"system\".equals(p.getThreadGroup().getName())).\n           collect(Collectors.groupingBy(p -> p.getName()));\n     } catch (Exception e) {\n-      System.out.println(\"filtering thread failure with exception:\" + e.getStackTrace());\n+      LOG.error(\"Filtering thread failure with exception:\" + e.getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0MDA4NQ=="}, "originalCommit": {"oid": "5aaca9c867d31b05896bda308162bc3e841bf7c5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODY2MDE2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowNzowMFrOHoZv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowNTo0MlrOHoeU7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyNjk0Nw==", "bodyText": "Nit: LOG.info may be better. Otherwise, it is hard for people using it to see the leaked thread if they wish as they need to turn on debug. which can result in a lot more other lines.", "url": "https://github.com/apache/helix/pull/1483#discussion_r512126947", "createdAt": "2020-10-26T17:07:00Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "diffHunk": "@@ -189,26 +193,26 @@ public static boolean afterClassCheck(String classname) {\n         boolean dumpThread = false;\n         if (categoryThreadCnt > limit) {\n           checkStatus = false;\n-          System.out.println(\n+          LOG.info(\n               \"Failure \" + threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n           dumpThread = true;\n         } else if (categoryThreadCnt > warningLimit) {\n-          System.out.println(\n+          LOG.info(\n               \"Warning \" + threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n           dumpThread = true;\n         } else {\n-          System.out.println(threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n+          LOG.info(threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n         }\n         if (!dumpThread) {\n           continue;\n         }\n         // print first 100 thread names\n         int i = 0;\n         for (Thread t : threadByCat.get(threadCategory)) {\n-          System.out.println(i + \" thread:\" + t.getName());\n+          LOG.debug(i + \" thread:\" + t.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aaca9c867d31b05896bda308162bc3e841bf7c5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMTk2NA==", "bodyText": "This is the main source of verbose output. Before we enforce it, I think it is not a good idea to output it. Note that for now, EVERY single test class prints these 100 lines.", "url": "https://github.com/apache/helix/pull/1483#discussion_r512201964", "createdAt": "2020-10-26T19:05:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/ThreadLeakageChecker.java", "diffHunk": "@@ -189,26 +193,26 @@ public static boolean afterClassCheck(String classname) {\n         boolean dumpThread = false;\n         if (categoryThreadCnt > limit) {\n           checkStatus = false;\n-          System.out.println(\n+          LOG.info(\n               \"Failure \" + threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n           dumpThread = true;\n         } else if (categoryThreadCnt > warningLimit) {\n-          System.out.println(\n+          LOG.info(\n               \"Warning \" + threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n           dumpThread = true;\n         } else {\n-          System.out.println(threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n+          LOG.info(threadCategory.getDescription() + \" has \" + categoryThreadCnt + \" thread\");\n         }\n         if (!dumpThread) {\n           continue;\n         }\n         // print first 100 thread names\n         int i = 0;\n         for (Thread t : threadByCat.get(threadCategory)) {\n-          System.out.println(i + \" thread:\" + t.getName());\n+          LOG.debug(i + \" thread:\" + t.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyNjk0Nw=="}, "originalCommit": {"oid": "5aaca9c867d31b05896bda308162bc3e841bf7c5"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1044, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}