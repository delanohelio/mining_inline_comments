{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTE3NDI2", "number": 757, "title": "Add write REST endpoints to helix rest for metadata store directory", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nImplements #756\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe have metadata store directory service to help scale out zookeeper. Metadata store directory service provides REST APIs to access.\nThis PR the adds MSDS write endpoints to Helix REST.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestAddMetadataStoreRealm\n\n\ntestDeleteMetadataStoreRealm\n\n\ntestAddShardingKey\n\n\ntestDeleteShardingKey\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nTests depend on the write operations in ZkMeatadataStoreDirectory. Needs to enable asserts before tests are really testing the operations successfully.\n[INFO] Tests run: 140, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.924 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 140, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  32.646 s\n[INFO] Finished at: 2020-02-12T20:44:10-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-12T05:35:20Z", "url": "https://github.com/apache/helix/pull/757", "merged": true, "mergeCommit": {"oid": "15e5ec75bdc696ab13ddd4af8b28ff2d008ee8ed"}, "closed": true, "closedAt": "2020-02-13T23:35:47Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDf9XCAH2gAyMzc0MTE3NDI2OmVhYzZhOWZlMDNlMjRkYWM1ZDFmYjIzMTg1NzdjMDkyM2U3MmZmZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEDhEigH2gAyMzc0MTE3NDI2OjY2NTY3YmU1Y2UxOGQwODBjM2Y5ZTRlYjcwZjQ1YjA4NTA4MmZmZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/eac6a9fe03e24dac5d1fb2318577c0923e72fff7", "committedDate": "2020-02-12T06:01:56Z", "message": "Add write REST endpoints to helix rest for metadata store directory service."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0b55262da9ce028879047177647ddf066f763b4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/d0b55262da9ce028879047177647ddf066f763b4", "committedDate": "2020-02-12T05:28:19Z", "message": "Add write REST endpoints to helix rest for metadata store directory service."}, "afterCommit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/eac6a9fe03e24dac5d1fb2318577c0923e72fff7", "committedDate": "2020-02-12T06:01:56Z", "message": "Add write REST endpoints to helix rest for metadata store directory service."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5a3dc2eee819ada366efe4c24021a1a9b5a1c08a", "committedDate": "2020-02-12T18:07:10Z", "message": "Remove testing log."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjcwMDY2", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-357670066", "createdAt": "2020-02-12T18:04:32Z", "commit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNDozMlrOFo4-ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowNDozMlrOFo4-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMDgzNg==", "bodyText": "Why is this error? Should we make this an info log? And \"updating {} {}\" is not detailed enough.\nSay something like \"Successfully added metadata store realm {} to namespace {}!\"... and put it after the call so we know it succeeded.", "url": "https://github.com/apache/helix/pull/757#discussion_r378420836", "createdAt": "2020-02-12T18:04:32Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -84,6 +86,31 @@ public Response getAllMetadataStoreRealms() {\n     return JSONRepresentation(responseMap);\n   }\n \n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}\")\n+  public Response addMetadataStoreRealm(@PathParam(\"realm\") String realm) {\n+    try {\n+      LOG.error(\"updating {} {}\", _namespace, realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac6a9fe03e24dac5d1fb2318577c0923e72fff7"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzQzNTk2", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-357743596", "createdAt": "2020-02-12T19:54:31Z", "commit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTM3NDI4", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-357937428", "createdAt": "2020-02-13T03:41:56Z", "commit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzo0MTo1N1rOFpGKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzo0MTo1N1rOFpGKWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzNjg5MQ==", "bodyText": "Why did we decide to make this a PathParam instead of a QueryParam? I think QueryParam would be easier to use and would minimize unnecessary confusion.", "url": "https://github.com/apache/helix/pull/757#discussion_r378636891", "createdAt": "2020-02-13T03:41:57Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -124,7 +148,34 @@ public Response getShardingKeys(@QueryParam(\"realm\") String realm) {\n     return JSONRepresentation(responseMap);\n   }\n \n-  private void getHelixNamespace() {\n+  @PUT\n+  @Path(\"/metadata-store-realms/{realm}/sharding-keys/{sharding-key: .+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3dc2eee819ada366efe4c24021a1a9b5a1c08a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4c9d104b4d83e8695dcc2a4b0dd86746394021", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7e4c9d104b4d83e8695dcc2a4b0dd86746394021", "committedDate": "2020-02-13T05:11:59Z", "message": "Fix tests, remove deprecates and warnings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf", "committedDate": "2020-02-13T05:39:59Z", "message": "Add requests should return created response."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU0NTkx", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358554591", "createdAt": "2020-02-13T21:12:59Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMjo1OVrOFpjudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMjo1OVrOFpjudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTI3MQ==", "bodyText": "Nit: a good addition to this would be a TestHelper.verify() that checks that the deletion has completed.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121271", "createdAt": "2020-02-13T21:12:59Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -42,12 +42,16 @@\n \n   @BeforeClass\n   public void beforeClass() {\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU0NjU5", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358554659", "createdAt": "2020-02-13T21:13:05Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzowNlrOFpjutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzowNlrOFpjutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTMzNA==", "bodyText": "Nit: a good addition to this would be a TestHelper.verify() that checks that the deletion has completed.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121334", "createdAt": "2020-02-13T21:13:06Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -42,12 +42,16 @@\n \n   @BeforeClass\n   public void beforeClass() {\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n     _zkRoutingDataReader = new ZkRoutingDataReader(DUMMY_NAMESPACE, ZK_ADDR, null);\n   }\n \n   @AfterClass\n   public void afterClass() {\n     _zkRoutingDataReader.close();\n+    ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU1MDAw", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358555000", "createdAt": "2020-02-13T21:13:40Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzo0MFrOFpjvxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxMzo0MFrOFpjvxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTYwNQ==", "bodyText": "Nit: could we avoid static imports and use them inline?", "url": "https://github.com/apache/helix/pull/757#discussion_r379121605", "createdAt": "2020-02-13T21:13:40Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU1NDM1", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358555435", "createdAt": "2020-02-13T21:14:23Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNDoyM1rOFpjxHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNDoyM1rOFpjxHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTk0OQ==", "bodyText": "Could add TestHelper.verify for making the test stable.", "url": "https://github.com/apache/helix/pull/757#discussion_r379121949", "createdAt": "2020-02-13T21:14:23Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+\n \n public class TestMetadataStoreDirectoryAccessor extends AbstractTestClass {\n   /*\n    * The following are constants to be used for testing.\n    */\n+  private static final String TEST_NAMESPACE_URI_PREFIX = \"/namespaces/\" + TEST_NAMESPACE;\n+  private static final String NON_EXISTING_NAMESPACE_URI_PREFIX =\n+      \"/namespaces/not-existed-namespace/metadata-store-realms/\";\n   private static final String TEST_REALM_1 = \"testRealm1\";\n   private static final List<String> TEST_SHARDING_KEYS_1 =\n       Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n   private static final String TEST_REALM_2 = \"testRealm2\";\n   private static final List<String> TEST_SHARDING_KEYS_2 =\n       Arrays.asList(\"/sharding/key/1/d\", \"/sharding/key/1/e\", \"/sharding/key/1/f\");\n+  private static final String TEST_REALM_3 = \"testRealm3\";\n+  private static final String TEST_SHARDING_KEY = \"/sharding/key/1/x\";\n \n   // List of all ZK addresses, each of which corresponds to a namespace/routing ZK\n   private List<String> _zkList;\n+  private MetadataStoreDirectory _metadataStoreDirectory;\n \n   @BeforeClass\n-  public void beforeClass() {\n+  public void beforeClass() throws InvalidRoutingDataException {\n     _zkList = new ArrayList<>(ZK_SERVER_MAP.keySet());\n \n+    _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU3MDIz", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358557023", "createdAt": "2020-02-13T21:17:06Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNzowNlrOFpj1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxNzowNlrOFpj1xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzE0MA==", "bodyText": "Probably a good idea to add a TestHelper.verify().", "url": "https://github.com/apache/helix/pull/757#discussion_r379123140", "createdAt": "2020-02-13T21:17:06Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +254,58 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n   public void afterClass() {\n+    _metadataStoreDirectory.close();\n     _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTU3NTE5", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358557519", "createdAt": "2020-02-13T21:17:58Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2331b29092cd0f5ab224aff12798f7e83453b389", "committedDate": "2020-02-13T23:04:54Z", "message": "Verify routing data path is deleted."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTkxMzAz", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358591303", "createdAt": "2020-02-13T22:15:21Z", "commit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNToyMVrOFpleHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNjoxNVrOFplfmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTg1Mg==", "bodyText": "deleteRecursively is a sync blocking call. Once deleteRecursively completes, the path is deleted.", "url": "https://github.com/apache/helix/pull/757#discussion_r379149852", "createdAt": "2020-02-13T22:15:21Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +254,58 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n   public void afterClass() {\n+    _metadataStoreDirectory.close();\n     _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+        .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzE0MA=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MDIzNA==", "bodyText": "I don't have strong preference. I will address this in next PR for read endpoints.", "url": "https://github.com/apache/helix/pull/757#discussion_r379150234", "createdAt": "2020-02-13T22:16:15Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -27,38 +27,60 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n-import org.apache.helix.ZNRecord;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.rest.metadatastore.MetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n import org.apache.helix.rest.server.AbstractTestClass;\n import org.apache.helix.rest.server.util.JerseyUriRequestBuilder;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n import org.testng.Assert;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.rest.common.HelixRestNamespace.DEFAULT_NAMESPACE_NAME;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMTYwNQ=="}, "originalCommit": {"oid": "3d0d045f0ba22e4e6fbe0ca563e9608d188d30cf"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjIwNjIx", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358620621", "createdAt": "2020-02-13T23:18:25Z", "commit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODoyNlrOFpm49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODoyNlrOFpm49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MzEwOA==", "bodyText": "Should we do an Assert.assertTrue on the return value of verify()?", "url": "https://github.com/apache/helix/pull/757#discussion_r379173108", "createdAt": "2020-02-13T23:18:26Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/resources/zookeeper/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,9 +252,73 @@ public void testGetShardingKeysInRealm() throws IOException {\n     Assert.assertEquals(queriedShardingKeys, expectedShardingKeys);\n   }\n \n+  @Test\n+  public void testAddShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+    Assert.assertFalse(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+        \"Realm does not have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    put(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    put(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+            + TEST_SHARDING_KEY, null, Entity.entity(\"\", MediaType.APPLICATION_JSON_TYPE),\n+        Response.Status.CREATED.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.add(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n+  @Test(dependsOnMethods = \"testAddShardingKey\")\n+  public void testDeleteShardingKey() {\n+    Set<String> expectedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+\n+//    Assert.assertTrue(expectedShardingKeysSet.contains(TEST_SHARDING_KEY),\n+//        \"Realm should have sharding key: \" + TEST_SHARDING_KEY);\n+\n+    // Request that gets not found response.\n+    delete(NON_EXISTING_NAMESPACE_URI_PREFIX + TEST_REALM_1 + \"/sharding-keys/\" + TEST_SHARDING_KEY,\n+        Response.Status.NOT_FOUND.getStatusCode());\n+\n+    // Successful request.\n+    delete(TEST_NAMESPACE_URI_PREFIX + \"/metadata-store-realms/\" + TEST_REALM_1 + \"/sharding-keys/\"\n+        + TEST_SHARDING_KEY, Response.Status.OK.getStatusCode());\n+\n+    Set<String> updatedShardingKeysSet = new HashSet<>(\n+        _metadataStoreDirectory.getAllShardingKeysInRealm(TEST_NAMESPACE, TEST_REALM_1));\n+    expectedShardingKeysSet.remove(TEST_SHARDING_KEY);\n+\n+//    Assert.assertEquals(updatedShardingKeysSet, expectedShardingKeysSet);\n+  }\n+\n   @AfterClass\n-  public void afterClass() {\n-    _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-        .deleteRecursive(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n+  public void afterClass() throws Exception {\n+    _metadataStoreDirectory.close();\n+    deleteRoutingDataPath();\n+  }\n+\n+  private void deleteRoutingDataPath() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "originalPosition": 233}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjIwNjgy", "url": "https://github.com/apache/helix/pull/757#pullrequestreview-358620682", "createdAt": "2020-02-13T23:18:35Z", "commit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODozNVrOFpm5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxODozNVrOFpm5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MzE1Nw==", "bodyText": "Should we do an Assert.assertTrue on the return value of verify()?", "url": "https://github.com/apache/helix/pull/757#discussion_r379173157", "createdAt": "2020-02-13T23:18:35Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -130,4 +133,18 @@ public void testGetRoutingDataMSRDChildEmptyValue() {\n               + \". Routing ZooKeeper address: \" + ZK_ADDR));\n     }\n   }\n+\n+  private void deleteRoutingDataPath() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2331b29092cd0f5ab224aff12798f7e83453b389"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66567be5ce18d080c3f9e4eb70f45b085082ffd0", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/66567be5ce18d080c3f9e4eb70f45b085082ffd0", "committedDate": "2020-02-13T23:27:37Z", "message": "Add assert in after class cleanup."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}