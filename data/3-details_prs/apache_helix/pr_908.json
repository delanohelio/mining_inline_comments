{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzc3NjQz", "number": 908, "title": "Make Helix REST realm-aware", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #907\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHelix REST needs to start using a realm-aware ZkClient on multi-zk mode. Also it needs to become a listener on routing data because we don't want to restart the HelixRestServer every time we update the routing data.\nChangelist:\n\nMake ServerContext listen on routing data paths if run on multi-zk mode\nMake HelixRestServer use RealmAwareZkClient (FederatedZkClient) on multi-zk mode\n\nTests\n\n The following tests are written for this issue:\n\nTestRoutingDataUpdate\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\non helix-rest module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestResourceAccessor.testResourceHealth:289 expected: but was:\n[INFO]\n[ERROR] Tests run: 144, Failures: 1, Errors: 0, Skipped: 7\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  37.847 s\n[INFO] Finished at: 2020-03-23T22:02:47-07:00\n[INFO] ------------------------------------------------------------------------\n\nTestResourceAccessor is an unrelated failure that will be fixed in future iterations.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-24T05:03:27Z", "url": "https://github.com/apache/helix/pull/908", "merged": true, "mergeCommit": {"oid": "e473cec6f85c673f7d0e41cfad31f88aaf139355"}, "closed": true, "closedAt": "2020-03-26T05:20:11Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQrnj8AH2gAyMzkyNzc3NjQzOjhjZGJmMTQ2NDA5NTI2YjVhMThjMTc0OTdjMzE4NjhiNWI3ZTFlNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRUL1EgFqTM4MTY5MTUzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8cdbf146409526b5a18c17497c31868b5b7e1e5a", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/8cdbf146409526b5a18c17497c31868b5b7e1e5a", "committedDate": "2020-03-24T04:58:00Z", "message": "Make Helix REST realm-aware\n\nChangelist:\n1. Make ServerContext listen on routing data paths if run on multi-zk mode\n2. Make HelixRestServer use RealmAwareZkClient (FederatedZkClient) on multi-zk mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/5389a84dccb40ff5d760851e617b201f0d2b8a28", "committedDate": "2020-03-24T06:54:25Z", "message": "asdf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTM0MzA1", "url": "https://github.com/apache/helix/pull/908#pullrequestreview-380534305", "createdAt": "2020-03-24T17:22:11Z", "commit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoyMjoxMVrOF67GgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MjowNVrOF6760g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMDA0OA==", "bodyText": "Why is this section removed? In a scenario where ZkRoutingDataReader is instantiated by itself, subscribeRoutingDataChanges might encounter NoNodeException if we don't ensure that ROUTING_DATA_PATH exists in ZK.", "url": "https://github.com/apache/helix/pull/908#discussion_r397330048", "createdAt": "2020-03-24T17:22:11Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataReader.java", "diffHunk": "@@ -58,25 +58,9 @@ public ZkRoutingDataReader(String namespace, String zkAddress,\n     _zkClient = DedicatedZkClientFactory.getInstance()\n         .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n             new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n-\n-    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n-    // create() semantic will fail if it already exists\n-    try {\n-      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, true);\n-    } catch (ZkNodeExistsException e) {\n-      // This is okay\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzMwNQ==", "bodyText": "Likewise, without this section, some ZNode creation might fail if they didn't create the parent (ROUTING_DATA_PATH) and the parent doesn't exist.", "url": "https://github.com/apache/helix/pull/908#discussion_r397333305", "createdAt": "2020-03-24T17:26:56Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -82,20 +82,14 @@ public ZkRoutingDataWriter(String namespace, String zkAddress) {\n         .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n             new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n \n-    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n-    // create() semantic will fail if it already exists\n-    try {\n-      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, true);\n-    } catch (ZkNodeExistsException e) {\n-      // This is okay\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MzQ0Mg==", "bodyText": "Is it possible to reduce duplication among the handle functions?", "url": "https://github.com/apache/helix/pull/908#discussion_r397343442", "createdAt": "2020-03-24T17:42:05Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/ServerContext.java", "diffHunk": "@@ -165,5 +238,93 @@ public void close() {\n     if (_zkMetadataStoreDirectory != null) {\n       _zkMetadataStoreDirectory.close();\n     }\n+    if (_zkClientForListener != null) {\n+      _zkClientForListener.close();\n+    }\n+  }\n+\n+  @Override\n+  public void handleChildChange(String parentPath, List<String> currentChilds) {\n+    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {\n+      return;\n+    }\n+    // Resubscribe\n+    _zkClientForListener.unsubscribeAll();\n+    ZkRoutingDataReader.subscribeRoutingDataChanges(_zkClientForListener, this, this);\n+    resetZkResources();\n+  }\n+\n+  @Override\n+  public void handleDataChange(String dataPath, Object data) {\n+    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {\n+      return;\n+    }\n+    resetZkResources();\n+  }\n+\n+  @Override\n+  public void handleDataDeleted(String dataPath) {\n+    if (_zkClientForListener == null || _zkClientForListener.isClosed()) {\n+      return;\n+    }\n+    // Resubscribe\n+    _zkClientForListener.unsubscribeAll();\n+    ZkRoutingDataReader.subscribeRoutingDataChanges(_zkClientForListener, this, this);\n+    resetZkResources();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 306}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b651fd49a7b114e769652281ea664a70b5e1765", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2b651fd49a7b114e769652281ea664a70b5e1765", "committedDate": "2020-03-24T19:16:21Z", "message": "Update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzMyNDQ3", "url": "https://github.com/apache/helix/pull/908#pullrequestreview-380732447", "createdAt": "2020-03-24T22:08:24Z", "commit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowODoyNVrOF7E82A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxNjo0OFrOF7FLjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTQxNg==", "bodyText": "The path contains\"/\" symbol. Would that be OK?", "url": "https://github.com/apache/helix/pull/908#discussion_r397491416", "createdAt": "2020-03-24T22:08:25Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -339,4 +348,22 @@ public synchronized void close() {\n     _routingDataMap.clear();\n     _zkMetadataStoreDirectoryInstance = null;\n   }\n+\n+  /**\n+   * Make sure the root routing data path exists. Also, register the routing ZK address.\n+   * @param zkClient\n+   */\n+  private void createRoutingDataPath(HelixZkClient zkClient, String zkAddress) {\n+    try {\n+      zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, true);\n+    } catch (ZkNodeExistsException e) {\n+      // The node already exists and it's okay\n+    }\n+    // Make sure ROUTING_DATA_PATH is mapped to the routing ZK so that FederatedZkClient used\n+    // in Helix REST can subscribe to the routing data path\n+    ZNRecord znRecord = new ZNRecord(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MjM0OA==", "bodyText": "Would you like to make it as public util function? If yes, then move it to some util class, otherwise, I think we have internal member of _zkClient, does not need to make the zkclient is passing in.", "url": "https://github.com/apache/helix/pull/908#discussion_r397492348", "createdAt": "2020-03-24T22:10:30Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataReader.java", "diffHunk": "@@ -138,40 +122,51 @@ public synchronized void handleChildChange(String s, List<String> list) {\n \n   @Override\n   public synchronized void handleStateChanged(Watcher.Event.KeeperState state) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n   @Override\n   public synchronized void handleNewSession(String sessionId) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n   @Override\n   public synchronized void handleSessionEstablishmentError(Throwable error) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n+  /**\n+   * Subscribes to the routing data paths using the provided ZkClient.\n+   * @param zkClient\n+   * @param childListener\n+   * @param dataListener\n+   */\n+  public static void subscribeRoutingDataChanges(RealmAwareZkClient zkClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MjYzMw==", "bodyText": "Let's make a util class for this purpose.", "url": "https://github.com/apache/helix/pull/908#discussion_r397492633", "createdAt": "2020-03-24T22:11:11Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataReader.java", "diffHunk": "@@ -138,40 +122,51 @@ public synchronized void handleChildChange(String s, List<String> list) {\n \n   @Override\n   public synchronized void handleStateChanged(Watcher.Event.KeeperState state) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n   @Override\n   public synchronized void handleNewSession(String sessionId) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n   @Override\n   public synchronized void handleSessionEstablishmentError(Throwable error) {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n     _routingDataListener.refreshRoutingData(_namespace);\n   }\n \n+  /**\n+   * Subscribes to the routing data paths using the provided ZkClient.\n+   * @param zkClient\n+   * @param childListener\n+   * @param dataListener\n+   */\n+  public static void subscribeRoutingDataChanges(RealmAwareZkClient zkClient,\n+      IZkChildListener childListener, IZkDataListener dataListener) {\n+    zkClient.subscribeChildChanges(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, childListener);\n+    for (String child : zkClient.getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+      zkClient.subscribeDataChanges(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + child,\n+          dataListener);\n+    }\n+  }\n+\n   private void handleResubscription() {\n-    if (_zkClient.isClosed()) {\n+    if (_zkClient == null || _zkClient.isClosed()) {\n       return;\n     }\n \n     // Renew subscription\n     _zkClient.unsubscribeAll();\n-    _zkClient.subscribeChildChanges(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, this);\n-    for (String child : _zkClient.getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n-      _zkClient.subscribeDataChanges(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + child,\n-          this);\n-    }\n+    ZkRoutingDataReader.subscribeRoutingDataChanges(_zkClient, this, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5Mzc5MQ==", "bodyText": "The volatile keyword is trying to make variable sharing between threads. Do we have many threads for using these variables, which are not able to get the instance?", "url": "https://github.com/apache/helix/pull/908#discussion_r397493791", "createdAt": "2020-03-24T22:13:42Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/ServerContext.java", "diffHunk": "@@ -20,42 +20,67 @@\n  * under the License.\n  */\n \n-import java.util.HashMap;\n+import java.io.IOException;\n+import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.helix.ConfigAccessor;\n import org.apache.helix.HelixAdmin;\n import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n import org.apache.helix.InstanceType;\n-import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n-import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.SystemPropertyKeys;\n import org.apache.helix.manager.zk.ZKHelixAdmin;\n import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n-import org.apache.helix.zookeeper.impl.client.ZkClient;\n-import org.apache.helix.zookeeper.api.client.HelixZkClient;\n-import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.accessor.ZkRoutingDataReader;\n import org.apache.helix.task.TaskDriver;\n import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+import org.apache.helix.zookeeper.util.HttpRoutingDataReader;\n+import org.apache.helix.zookeeper.zkclient.IZkChildListener;\n+import org.apache.helix.zookeeper.zkclient.IZkDataListener;\n+import org.apache.helix.zookeeper.zkclient.IZkStateListener;\n import org.apache.helix.zookeeper.zkclient.exception.ZkMarshallingError;\n import org.apache.helix.zookeeper.zkclient.serialize.ZkSerializer;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n-public class ServerContext {\n+public class ServerContext implements IZkDataListener, IZkChildListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerContext.class);\n+\n   private final String _zkAddr;\n-  private HelixZkClient _zkClient;\n-  private ZKHelixAdmin _zkHelixAdmin;\n-  private ClusterSetup _clusterSetup;\n-  private ConfigAccessor _configAccessor;\n+  private volatile RealmAwareZkClient _zkClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTE4MA==", "bodyText": "Why we need a pool? Since you already make the task driver could accept the RealmAzreZkClient, we can pass in the FederatedZkClient as input, right? And TaskDriver does not have any session aware operations. So we can use FederatedZkClient for multiple cluster accessing purpose.", "url": "https://github.com/apache/helix/pull/908#discussion_r397495180", "createdAt": "2020-03-24T22:16:48Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/ServerContext.java", "diffHunk": "@@ -20,42 +20,67 @@\n  * under the License.\n  */\n \n-import java.util.HashMap;\n+import java.io.IOException;\n+import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.helix.ConfigAccessor;\n import org.apache.helix.HelixAdmin;\n import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n import org.apache.helix.InstanceType;\n-import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n-import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.SystemPropertyKeys;\n import org.apache.helix.manager.zk.ZKHelixAdmin;\n import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n-import org.apache.helix.manager.zk.ZNRecordSerializer;\n import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n-import org.apache.helix.zookeeper.impl.client.ZkClient;\n-import org.apache.helix.zookeeper.api.client.HelixZkClient;\n-import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.rest.metadatastore.ZkMetadataStoreDirectory;\n+import org.apache.helix.rest.metadatastore.accessor.ZkRoutingDataReader;\n import org.apache.helix.task.TaskDriver;\n import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+import org.apache.helix.zookeeper.util.HttpRoutingDataReader;\n+import org.apache.helix.zookeeper.zkclient.IZkChildListener;\n+import org.apache.helix.zookeeper.zkclient.IZkDataListener;\n+import org.apache.helix.zookeeper.zkclient.IZkStateListener;\n import org.apache.helix.zookeeper.zkclient.exception.ZkMarshallingError;\n import org.apache.helix.zookeeper.zkclient.serialize.ZkSerializer;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n-public class ServerContext {\n+public class ServerContext implements IZkDataListener, IZkChildListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ServerContext.class);\n+\n   private final String _zkAddr;\n-  private HelixZkClient _zkClient;\n-  private ZKHelixAdmin _zkHelixAdmin;\n-  private ClusterSetup _clusterSetup;\n-  private ConfigAccessor _configAccessor;\n+  private volatile RealmAwareZkClient _zkClient;\n+\n+  private volatile ZKHelixAdmin _zkHelixAdmin;\n+  private volatile ClusterSetup _clusterSetup;\n+  private volatile ConfigAccessor _configAccessor;\n   // A lazily-initialized base data accessor that reads/writes byte array to ZK\n   // TODO: Only read (deserialize) is supported at this time. This baseDataAccessor should support write (serialize) as needs arise\n   private volatile ZkBaseDataAccessor<byte[]> _byteArrayZkBaseDataAccessor;\n   // 1 Cluster name will correspond to 1 helix data accessor\n   private final Map<String, HelixDataAccessor> _helixDataAccessorPool;\n   // 1 Cluster name will correspond to 1 task driver\n   private final Map<String, TaskDriver> _taskDriverPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5389a84dccb40ff5d760851e617b201f0d2b8a28"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f3b2fcaafd18594580a986b0c66ef925dc6d1d", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/14f3b2fcaafd18594580a986b0c66ef925dc6d1d", "committedDate": "2020-03-24T23:37:57Z", "message": "adsf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5556fe5bd39d2502da5bad906957317a93b8be", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/8f5556fe5bd39d2502da5bad906957317a93b8be", "committedDate": "2020-03-25T03:53:08Z", "message": "sadf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ea3ecd636fb320214a88f34f84edac7c6d19de", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/a8ea3ecd636fb320214a88f34f84edac7c6d19de", "committedDate": "2020-03-26T00:20:00Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjkxNTM0", "url": "https://github.com/apache/helix/pull/908#pullrequestreview-381691534", "createdAt": "2020-03-26T04:13:49Z", "commit": {"oid": "a8ea3ecd636fb320214a88f34f84edac7c6d19de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}