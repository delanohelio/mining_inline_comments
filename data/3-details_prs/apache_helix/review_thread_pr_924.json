{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTM3NDMy", "number": 924, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxOTo0M1rODtQKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0Nzo0N1rODxxs9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc3MzQ4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxOTo0M1rOF-kmaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoyNzo1OFrOF-z_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTY4OQ==", "bodyText": "sleep() doesn't look solid and makes the test unstable. I suggest using TestHelper.varify() to replace sleep().", "url": "https://github.com/apache/helix/pull/924#discussion_r401155689", "createdAt": "2020-03-31T19:19:43Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)\n+        break;\n+      Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzE2Ng==", "bodyText": "+1. This is not a show of good craftsmanship..", "url": "https://github.com/apache/helix/pull/924#discussion_r401173166", "createdAt": "2020-03-31T19:50:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)\n+        break;\n+      Thread.sleep(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTY4OQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTk4OA==", "bodyText": "This is copied from the other test in this file. I know you guys will pick it up. Let us draw a line here. I will only change this one, not the other test for now.", "url": "https://github.com/apache/helix/pull/924#discussion_r401175988", "createdAt": "2020-03-31T19:55:57Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)\n+        break;\n+      Thread.sleep(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTY4OQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNzg0NQ==", "bodyText": "New approach use TestHelper.verifyWithTimeout().", "url": "https://github.com/apache/helix/pull/924#discussion_r401407845", "createdAt": "2020-04-01T07:27:58Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)\n+        break;\n+      Thread.sleep(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTY4OQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc5NzUzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyNjoxMlrOF-k1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowODo0NVrOF-mRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTQ0Mg==", "bodyText": "This should not be introduced. If getZkClient() is really necessary, you can make _zkClient as protected.", "url": "https://github.com/apache/helix/pull/924#discussion_r401159442", "createdAt": "2020-03-31T19:26:12Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -72,6 +72,11 @@\n \n   private HelixZkClient _zkClient = null;\n \n+  // test only\n+  public HelixZkClient getZkClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MjU2OQ==", "bodyText": "This should not be introduced.", "url": "https://github.com/apache/helix/pull/924#discussion_r401172569", "createdAt": "2020-03-31T19:49:53Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -72,6 +72,11 @@\n \n   private HelixZkClient _zkClient = null;\n \n+  // test only\n+  public HelixZkClient getZkClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTQ0Mg=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODE3Mw==", "bodyText": "Protect is not going to work, as the test case live in another package.\nJava has not way to access otherwise private members in the class. In this case, we have to expire the session inside this class. This is a common problem I did not see addressed in our code base. Unless you guys can identify another pattern, I guess we have to leave it this way.", "url": "https://github.com/apache/helix/pull/924#discussion_r401178173", "createdAt": "2020-03-31T19:59:53Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -72,6 +72,11 @@\n \n   private HelixZkClient _zkClient = null;\n \n+  // test only\n+  public HelixZkClient getZkClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTQ0Mg=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzA3OA==", "bodyText": "+1, we should not add a public method to a public class just for testing, specially this is a public API.  If you test class is sitting in the same module with this class, protected will work.  Another way is to make it protected, and wrap ZkCacheBaseDataAccessor to a new test class.", "url": "https://github.com/apache/helix/pull/924#discussion_r401183078", "createdAt": "2020-03-31T20:08:45Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -72,6 +72,11 @@\n \n   private HelixZkClient _zkClient = null;\n \n+  // test only\n+  public HelixZkClient getZkClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTQ0Mg=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzgwNTg0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyODoxOVrOF-k6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0ODoyNVrOF-npgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MDczMQ==", "bodyText": "Comment block format:\n/*\n * comments\n */", "url": "https://github.com/apache/helix/pull/924#discussion_r401160731", "createdAt": "2020-03-31T19:28:19Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODM4Nw==", "bodyText": "I think we have the format style file? You can apply the style file in intellij.", "url": "https://github.com/apache/helix/pull/924#discussion_r401188387", "createdAt": "2020-03-31T20:18:02Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MDczMQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNTYzMw==", "bodyText": "I applied the style file. And it did not pick this up.", "url": "https://github.com/apache/helix/pull/924#discussion_r401205633", "createdAt": "2020-03-31T20:48:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MDczMQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg0NDYyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozOTozM1rOF-lSLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozOTozM1rOF-lSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2Njg5NA==", "bodyText": "Remove extra empty line.", "url": "https://github.com/apache/helix/pull/924#discussion_r401166894", "createdAt": "2020-03-31T19:39:33Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg0NjIzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0MDowMlrOF-lTQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0MDowMlrOF-lTQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzE2OA==", "bodyText": "Style:\nif () {\n}", "url": "https://github.com/apache/helix/pull/924#discussion_r401167168", "createdAt": "2020-03-31T19:40:02Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg0ODg0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0MDo0NFrOF-lUzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo0MDo0NFrOF-lUzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzU2Ng==", "bodyText": "Extra spaces.", "url": "https://github.com/apache/helix/pull/924#discussion_r401167566", "createdAt": "2020-03-31T19:40:44Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg4MzEyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/store/zk/ZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MDoyNFrOF-lpfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxODoyMFrOF-mmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3Mjg2MQ==", "bodyText": "Exposing the internal HelixZkClient is not desirable", "url": "https://github.com/apache/helix/pull/924#discussion_r401172861", "createdAt": "2020-03-31T19:50:24Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/store/zk/ZkHelixPropertyStore.java", "diffHunk": "@@ -47,4 +48,9 @@ public ZkHelixPropertyStore(String zkAddress, ZkSerializer serializer, String ch\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n     super(zkAddress, serializer, chrootPath, null, null, MONITOR_TYPE, chrootPath, zkClientType);\n   }\n+\n+  // test only\n+  protected HelixZkClient getTestZkClient() {\n+    return getZkClient();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODc5Ng==", "bodyText": "Java has not way to access otherwise private members in the class. In this case, we have to expire the session inside this class. This is a common problem I did not see addressed in our code base. Unless you guys can identify another pattern, I guess we have to leave it this way.", "url": "https://github.com/apache/helix/pull/924#discussion_r401178796", "createdAt": "2020-03-31T20:01:10Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/store/zk/ZkHelixPropertyStore.java", "diffHunk": "@@ -47,4 +48,9 @@ public ZkHelixPropertyStore(String zkAddress, ZkSerializer serializer, String ch\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n     super(zkAddress, serializer, chrootPath, null, null, MONITOR_TYPE, chrootPath, zkClientType);\n   }\n+\n+  // test only\n+  protected HelixZkClient getTestZkClient() {\n+    return getZkClient();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3Mjg2MQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODU1NQ==", "bodyText": "We have another thread of this discussion in this pull. Close this one", "url": "https://github.com/apache/helix/pull/924#discussion_r401188555", "createdAt": "2020-03-31T20:18:20Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/store/zk/ZkHelixPropertyStore.java", "diffHunk": "@@ -47,4 +48,9 @@ public ZkHelixPropertyStore(String zkAddress, ZkSerializer serializer, String ch\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n     super(zkAddress, serializer, chrootPath, null, null, MONITOR_TYPE, chrootPath, zkClientType);\n   }\n+\n+  // test only\n+  protected HelixZkClient getTestZkClient() {\n+    return getZkClient();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3Mjg2MQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg4NTgxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MToxM1rOF-lrQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MToxM1rOF-lrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzMxMg==", "bodyText": "Possible to avoid print statements?", "url": "https://github.com/apache/helix/pull/924#discussion_r401173312", "createdAt": "2020-03-31T19:51:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+\n+    // kill the session one more time to cover Shared ZkClient resetting flag\n+    // indicating first time synconnect happened.\n+    ZkTestHelper.expireSession(testClient);\n+\n+    listener.reset();\n+    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n+    store.remove(\"/\", 0);\n+    // wait until all callbacks have been received\n+    for (int i = 0; i < 10; i++) {\n+      if (listener._deleteKeys.size() == expectDeleteNodes)\n+        break;\n+      Thread.sleep(500);\n+    }\n+\n+    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n+        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg4NzUyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MTozOVrOF-lsMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxNToyOFrOF-qNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzU1NQ==", "bodyText": "Can you avoid adding public methods like this that shouldn't otherwise be used in production?", "url": "https://github.com/apache/helix/pull/924#discussion_r401173555", "createdAt": "2020-03-31T19:51:39Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "diffHunk": "@@ -112,4 +112,9 @@ public String create(final String path, Object datat, final List<ACL> acl,\n   protected boolean isManagingZkConnection() {\n     return false;\n   }\n+\n+  // test only\n+  public HelixZkClient getConnectionManager() {\n+    return _connectionManager;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODg3MA==", "bodyText": "Java has not way to access otherwise private members in the class. In this case, we have to expire the session inside this class. This is a common problem I did not see addressed in our code base. Unless you guys can identify another pattern, I guess we have to leave it this way.", "url": "https://github.com/apache/helix/pull/924#discussion_r401178870", "createdAt": "2020-03-31T20:01:20Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "diffHunk": "@@ -112,4 +112,9 @@ public String create(final String path, Object datat, final List<ACL> acl,\n   protected boolean isManagingZkConnection() {\n     return false;\n   }\n+\n+  // test only\n+  public HelixZkClient getConnectionManager() {\n+    return _connectionManager;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzU1NQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjYzOQ==", "bodyText": "Agreed here, we should never add a public method to a public class just for testing.  If you really need to expose ZkClient, either change it to protected, and inherit this class in your test, such that:\nclass SharedZkClient {\nprotected _zkClient;\n}\nclass testSharedZkClient extends SharedZkClient {\nProtected getZkClient() {\nreturn _zkClient;\n}", "url": "https://github.com/apache/helix/pull/924#discussion_r401186639", "createdAt": "2020-03-31T20:14:57Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "diffHunk": "@@ -112,4 +112,9 @@ public String create(final String path, Object datat, final List<ACL> acl,\n   protected boolean isManagingZkConnection() {\n     return false;\n   }\n+\n+  // test only\n+  public HelixZkClient getConnectionManager() {\n+    return _connectionManager;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzU1NQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzkwOQ==", "bodyText": "Another way is, if your test class is put in the same module with sharedZkClient, such as org.apache.helix.zookeeper.impl.client,  you should be able to access protected instance variables or methods from the test code.", "url": "https://github.com/apache/helix/pull/924#discussion_r401187909", "createdAt": "2020-03-31T20:17:15Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "diffHunk": "@@ -112,4 +112,9 @@ public String create(final String path, Object datat, final List<ACL> acl,\n   protected boolean isManagingZkConnection() {\n     return false;\n   }\n+\n+  // test only\n+  public HelixZkClient getConnectionManager() {\n+    return _connectionManager;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzU1NQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NzUwMg==", "bodyText": "Here is the case:\ntest case is in package org.apache.helix.store.zk, here is the how it is constructed.\n    ZkSerializer serializer = new ZNRecordSerializer(); ZkHelixPropertyStore<ZNRecord> store = new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\nWe need the internal shared ZkClient in the store; and further the internal _ZkconnectionManager.\nNote, ZkHelixPropertyStore uses ZkCacheBasedDataAccessor which lives in package org.apache.helix.manager.zk;\nNote, ShareZkClient and ZkConnectionManager lives in package org.apache.helix.zookeeper.impl.client;\nSo the solution (in this case, but not in general) can be:\nI can put the test in the org.apache.helix.zookeeper.impl.client, zookeeper-api module\nI can also initialize the HelixPropertystore like this:\n1/ construct SharedZkClient\n2/ construct ZkBaseDataAccessor using this sharedZkCLient.\n3/ construct ZkHelixPropertyStore (using ZkBaseDataAccessor.\nby making SharedZkClient's _zkConnectionManager protected, we can use it here.\nThe problem is that org.apache.helix.zookeeper.impl.client is in Zookeeper-api, we need a test scope dependency to Helix-core and Helix-common module. Does this test dependency work here?\n@lei-xia @narendly ?", "url": "https://github.com/apache/helix/pull/924#discussion_r401247502", "createdAt": "2020-03-31T22:15:28Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/SharedZkClient.java", "diffHunk": "@@ -112,4 +112,9 @@ public String create(final String path, Object datat, final List<ACL> acl,\n   protected boolean isManagingZkConnection() {\n     return false;\n   }\n+\n+  // test only\n+  public HelixZkClient getConnectionManager() {\n+    return _connectionManager;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MzU1NQ=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5MzIzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MzoxM1rOF-lvoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowODoyNVrOF-mQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDQzMg==", "bodyText": "In general, it's not good practice to add subclass-specific logic in its parent class. Can you think of another way to do this?", "url": "https://github.com/apache/helix/pull/924#discussion_r401174432", "createdAt": "2020-03-31T19:53:13Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Mjg5Mw==", "bodyText": "Strictly speaking, this is not from sub-class. This is one object of a class that can act on different roles. But I get what you are thinking.\nThat said, traditionally it is like this.\nI can write in an another concise way wrapping all this logic into the if block of 1093.\nThought about it. The drawback of that way would be losing readability, and thus the intention of the logic. This would pave the way of next hidden bug when people do refactoring later, just as how this bug is introduced.", "url": "https://github.com/apache/helix/pull/924#discussion_r401182893", "createdAt": "2020-03-31T20:08:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDQzMg=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5NDMyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1MzozMlrOF-lwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxMDozOFrOF-mVoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDYxOA==", "bodyText": "parent class shouldn't know about what its sub classes are doing?", "url": "https://github.com/apache/helix/pull/924#discussion_r401174618", "createdAt": "2020-03-31T19:53:32Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;\n     }\n \n+    // The following is the case for non sharedZkClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NDE2MQ==", "bodyText": "See my comment in the other similar comment. We can discuss it over there.", "url": "https://github.com/apache/helix/pull/924#discussion_r401184161", "createdAt": "2020-03-31T20:10:38Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;\n     }\n \n+    // The following is the case for non sharedZkClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDYxOA=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5NzcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDoyMVrOF-lyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDoyMVrOF-lyWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTEyOQ==", "bodyText": "This is not how you would enter JavaDoc in a public method. Could you please review the javadoc best practice guidelines?", "url": "https://github.com/apache/helix/pull/924#discussion_r401175129", "createdAt": "2020-03-31T19:54:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzg5ODM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDozM1rOF-lyxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NDozM1rOF-lyxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTIzOA==", "bodyText": "empty line?", "url": "https://github.com/apache/helix/pull/924#discussion_r401175238", "createdAt": "2020-03-31T19:54:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java", "diffHunk": "@@ -88,6 +92,57 @@ public void afterClass() {\n     deleteCluster(getShortClassName());\n   }\n \n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    /*\n+    This test is to make sure SharedZkClient would work with\n+    HelixPropertyStore when session expiration happens. More specifically\n+    HelixPropertyStore would register all the callbacks after session\n+    expiration.\n+     */\n+    String subRoot = _root + \"/\" + \"localCallback\";\n+    List<String> subscribedPaths = new ArrayList<>();\n+    subscribedPaths.add(subRoot);\n+\n+    ZkSerializer serializer = new ZNRecordSerializer();\n+    ZkHelixPropertyStore<ZNRecord> store =\n+        new ZkHelixPropertyStore<>(ZK_ADDR, serializer, subRoot, subscribedPaths);\n+\n+    TestListener listener = new TestListener();\n+    store.subscribe(\"/\", listener);\n+\n+    // test dataCreate callbacks\n+    listener.reset();\n+    setNodes(store, 'a', true);\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    // Note, current shared ZkClient does not issue new session. Thus, we need\n+    // kill _zkConnectionManager's session. Otherwise, ZkTestHelper.expireSesson\n+    // would not work.\n+    SharedZkClient sharedClient = (SharedZkClient) store.getTestZkClient();\n+    HelixZkClient  testClient =  sharedClient.getConnectionManager();\n+    ZkTestHelper.expireSession(testClient);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzkwNDQ5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1NjoyOVrOF-l2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MDozMVrOF_47lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw==", "bodyText": "If we remove  _isNewSessionEventFired = false; in reconnect() and do below code, it seems more concise and easier to maintain. _isNewSessionEventFired is only changed in this code block. What do you think?\n    if (event.getState() == KeeperState.SyncConnected && !_isNewSessionEventFired && !\"0\".equals(getHexSessionId())) {\n      if (isManagingZkConnection()) {\n        /*\n         * Before the new zookeeper instance is connected to the zookeeper service and its session\n         * is established, its session id is 0.\n         * New session event is not fired until the new zookeeper session receives the first\n         * SyncConnected state(the zookeeper session is established).\n         * Now the session id is available and non-zero, and we can fire new session events.\n         */\n        fireNewSessionEvents();\n      }\n      /*\n       * Set it true to avoid firing events again for the same session next time\n       * when SyncConnected events are received.\n       */\n      _isNewSessionEventFired = true;\n\n      /*\n       * With this first SyncConnected state, we just get connected to zookeeper service after\n       * reconnecting when the session expired. Because previous session expired, we also have to\n       * notify all listeners that something might have changed.\n       */\n      fireAllEvents();\n    } else if (event.getState() == KeeperState.Expired) {\n      if (isManagingZkConnection()) {\n        reconnectOnExpiring();\n      }\n       _isNewSessionEventFired = false;\n    }", "url": "https://github.com/apache/helix/pull/924#discussion_r401176227", "createdAt": "2020-03-31T19:56:29Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzQxNg==", "bodyText": "Good point.\nYes, this is another way to do it, thought about it.\nPro: concise\nCon: hard to understand the intention. This may pave the way to another hidden bug when people do refactoring next time, as how we get to this issue.", "url": "https://github.com/apache/helix/pull/924#discussion_r401187416", "createdAt": "2020-03-31T20:16:20Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2OTA2Mg==", "bodyText": "To me, it is easier to understand:\n\nonly managed connection will do: fireNewSessionEvents() and reconnectOnExpiring.\nfirst sync connected: _isNewSessionEventFired = true; expired: _isNewSessionEventFired = false.", "url": "https://github.com/apache/helix/pull/924#discussion_r401269062", "createdAt": "2020-03-31T23:16:22Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMDg3NQ==", "bodyText": "@jiajunwang, what is your take here?", "url": "https://github.com/apache/helix/pull/924#discussion_r401410875", "createdAt": "2020-04-01T07:33:55Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMTUwNw==", "bodyText": "I like less code : )\nAnd actually I can understand the concise version. So I guess it's better.", "url": "https://github.com/apache/helix/pull/924#discussion_r402031507", "createdAt": "2020-04-02T03:27:35Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNzY2MA==", "bodyText": "The I will use this concise version. I will add a verbose note about the intention too.", "url": "https://github.com/apache/helix/pull/924#discussion_r402037660", "createdAt": "2020-04-02T03:54:11Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNzM2Nw==", "bodyText": "By they way, setting _isNewSessionEventFired = false should be above reconnect(). Otherwise, maybe there is a small chance of race condition. In reconnect() or current code, maybe we still have this race condition. Put it ahead definitely don't.\n    } else if (event.getState() == KeeperState.Expired) {\n       _isNewSessionEventFired = false;\n      if (isManagingZkConnection()) {\n        reconnectOnExpiring();\n      }\n    }", "url": "https://github.com/apache/helix/pull/924#discussion_r402537367", "createdAt": "2020-04-02T18:50:31Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for sharedZkClient\n     if (!isManagingZkConnection()) {\n+      /*\n+       For SharedZkClient, we will not invoke fireNewSessionEvents and we will invoke fireAllEvents\n+       This keeps the same behavior as original SharedZkClient.\n+       Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+      */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjIyNw=="}, "originalCommit": {"oid": "0f21ce7b929ffa7a436be3910e40fb9791dc1c1c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjU4MjI3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToyMzo1MVrOF_TI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDoxNDoyM1rOF_astQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxODE5NA==", "bodyText": "I guess this wait only check if there is an expiring happened. The original wait is to ensure the session has been re-established. So if you want to achieve the same goal, maybe we need to compare the older session and newer session then end the wait.\nGiven that saying, I guess you can just modify the existing method to include this check. Note that if this not happen, we can directly fail the test by throwing an exception.", "url": "https://github.com/apache/helix/pull/924#discussion_r401918194", "createdAt": "2020-04-01T21:23:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyODQ0NA==", "bodyText": "You are right, here this latch guarantees expiring happens. But later, the code still ensures new session established.\nwaitExpireSession.await();\nzkClient.unsubscribeStateChanges(listener);\n\nconnection = (ZkConnection) zkClient.getConnection();\ncurZookeeper = connection.getZookeeper();\n\n// wait util connected\nwhile (curZookeeper.getState() != States.CONNECTED) {\n  Thread.sleep(10);\n}", "url": "https://github.com/apache/helix/pull/924#discussion_r401928444", "createdAt": "2020-04-01T21:44:50Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxODE5NA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDAxMQ==", "bodyText": "This works. Since it should work for all the client, can we just modify the original expiring method? 2 similar methods for the same purpose is not good.", "url": "https://github.com/apache/helix/pull/924#discussion_r402030011", "createdAt": "2020-04-02T03:20:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxODE5NA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MjAzNw==", "bodyText": "See my comment later about how to enhance with handleStateChanged. If we agree with that approach. I will use this logic in TestHelper.expireSession() and remove this one.", "url": "https://github.com/apache/helix/pull/924#discussion_r402042037", "createdAt": "2020-04-02T04:14:23Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxODE5NA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzMwOTEyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzoxNjo0OFrOF_Z5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDoxODozMVrOF_av4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyODk2OA==", "bodyText": "This comment is a bit confusing.  You mean \"The following only applies to dedicated ZkClient in which it manages ZkConnection directly\", right?", "url": "https://github.com/apache/helix/pull/924#discussion_r402028968", "createdAt": "2020-04-02T03:16:48Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for ZkClient no managing connection\n     if (!isManagingZkConnection()) {\n+      /*\n+       * For SharedZkClient, we will not invoke fireNewSessionEvents but will invoke fireAllEvents\n+       * This keeps the same behavior as original SharedZkClient.\n+       * Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+       */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;\n     }\n \n+    // The following is the case for ZkClient managing the connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMTk1Mg==", "bodyText": "I guess it can be simplified to:\n// else, if managing the connection\nAnyway, if we do what Huizhi suggested, it should be clearer.", "url": "https://github.com/apache/helix/pull/924#discussion_r402031952", "createdAt": "2020-04-02T03:29:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for ZkClient no managing connection\n     if (!isManagingZkConnection()) {\n+      /*\n+       * For SharedZkClient, we will not invoke fireNewSessionEvents but will invoke fireAllEvents\n+       * This keeps the same behavior as original SharedZkClient.\n+       * Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+       */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;\n     }\n \n+    // The following is the case for ZkClient managing the connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyODk2OA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0Mjg0OA==", "bodyText": "@lei-xia, right. Your description is more readable. But @jiajunwang and @hulu like the more concise way. Unless you like this separation of two branch way, I will adopt the more concise way. And add another comment about the goal fo what we will achieve. (Intention)\nSo later if people refactor this code. They know the intention at lease.", "url": "https://github.com/apache/helix/pull/924#discussion_r402042848", "createdAt": "2020-04-02T04:18:31Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1073,10 +1073,24 @@ protected void processStateChanged(WatchedEvent event) {\n \n     fireStateChangedEvent(event.getState());\n \n+    // This following is the case for ZkClient no managing connection\n     if (!isManagingZkConnection()) {\n+      /*\n+       * For SharedZkClient, we will not invoke fireNewSessionEvents but will invoke fireAllEvents\n+       * This keeps the same behavior as original SharedZkClient.\n+       * Invoking fireAllEvents is important to make sure HelixPropertyStore working correctly.\n+       */\n+      if ((event.getState() == KeeperState.SyncConnected) && (!_isNewSessionEventFired) && (!\"0\"\n+          .equals(getHexSessionId()))) {\n+        fireAllEvents();\n+        _isNewSessionEventFired = true;\n+      } else if (event.getState() == KeeperState.Expired) {\n+        _isNewSessionEventFired = false;\n+      }\n       return;\n     }\n \n+    // The following is the case for ZkClient managing the connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyODk2OA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzMxODgwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzoyMjoyM1rOF_Z-7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODozNToyNFrOF_g1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDMxNg==", "bodyText": "Can we subscribe to the state change instead of busy loop?", "url": "https://github.com/apache/helix/pull/924#discussion_r402030316", "createdAt": "2020-04-02T03:22:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();\n+        }\n+      }\n+\n+      @Override\n+      public void handleNewSession(final String sessionId) throws Exception {\n+      }\n+\n+      @Override\n+      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n+      }\n+    };\n+\n+    zkClient.subscribeStateChanges(listener);\n+\n+    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n+    ZooKeeper curZookeeper = connection.getZookeeper();\n+    String oldSessionId = Long.toHexString(curZookeeper.getSessionId());\n+    LOG.info(\"Before session expiry. sessionId: \" + oldSessionId + \", zk: \" + curZookeeper);\n+\n+    Watcher watcher = new Watcher() {\n+      @Override\n+      public void process(WatchedEvent event) {\n+        LOG.info(\"Watcher#process, event: \" + event);\n+      }\n+    };\n+\n+    final ZooKeeper dupZookeeper =\n+        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n+            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n+    // wait until connected, then close\n+    while (dupZookeeper.getState() != States.CONNECTED) {\n+      Thread.sleep(10);\n+    }\n+    Assert.assertEquals(dupZookeeper.getState(), States.CONNECTED,\n+        \"Fail to connect to zk using current session info\");\n+    dupZookeeper.close();\n+\n+    // make sure session expiry really happens\n+    waitExpireSession.await();\n+    zkClient.unsubscribeStateChanges(listener);\n+\n+    connection = (ZkConnection) zkClient.getConnection();\n+    curZookeeper = connection.getZookeeper();\n+\n+    // wait util connected\n+    while (curZookeeper.getState() != States.CONNECTED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MTYyNg==", "bodyText": "There are many ways to do it. Let us be specific to avoid delaying this important fix.\nSo the code can be something like this:\npublic void handleStateChanged(KeeperState state) throws Exception {\n      LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n      if (state == KeeperState.Expired) {\n        waitExpireSession.countDown();\n      } \n      if (state == KeeperState.Synconnected) {\n        waitNewSession.countDown();\n      }\n\n\nLater something like this to wait for latch?\nboolean expiredCompleted = waitExpireSession.await(5L, TimeUnit.SECONDS);\nif (!expiredCompleted)  {\n   throw Exception(\" Expiration of Session failed.\");\n}\nboolean newSessionCompleted = waitNewSession.await(5L, TimeUnit.SECONDS);\nif (!newSessionCompleted) {\n  throw Exception(\" Expiration of Session failed.\");\n}\nzkClient.unsubscribeStateChanges(listener);\n\nNote, the wait for expiration and synconnected are both necessary. The reason is that disconnect can give you sysconnected too.\nNote, the timeout in await() is to prevent hanging here forever to block test from proceeding.", "url": "https://github.com/apache/helix/pull/924#discussion_r402041626", "createdAt": "2020-04-02T04:12:35Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();\n+        }\n+      }\n+\n+      @Override\n+      public void handleNewSession(final String sessionId) throws Exception {\n+      }\n+\n+      @Override\n+      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n+      }\n+    };\n+\n+    zkClient.subscribeStateChanges(listener);\n+\n+    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n+    ZooKeeper curZookeeper = connection.getZookeeper();\n+    String oldSessionId = Long.toHexString(curZookeeper.getSessionId());\n+    LOG.info(\"Before session expiry. sessionId: \" + oldSessionId + \", zk: \" + curZookeeper);\n+\n+    Watcher watcher = new Watcher() {\n+      @Override\n+      public void process(WatchedEvent event) {\n+        LOG.info(\"Watcher#process, event: \" + event);\n+      }\n+    };\n+\n+    final ZooKeeper dupZookeeper =\n+        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n+            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n+    // wait until connected, then close\n+    while (dupZookeeper.getState() != States.CONNECTED) {\n+      Thread.sleep(10);\n+    }\n+    Assert.assertEquals(dupZookeeper.getState(), States.CONNECTED,\n+        \"Fail to connect to zk using current session info\");\n+    dupZookeeper.close();\n+\n+    // make sure session expiry really happens\n+    waitExpireSession.await();\n+    zkClient.unsubscribeStateChanges(listener);\n+\n+    connection = (ZkConnection) zkClient.getConnection();\n+    curZookeeper = connection.getZookeeper();\n+\n+    // wait util connected\n+    while (curZookeeper.getState() != States.CONNECTED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDMxNg=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0MjY2OA==", "bodyText": "+1 to get rid of busy sleeping.", "url": "https://github.com/apache/helix/pull/924#discussion_r402142668", "createdAt": "2020-04-02T08:35:24Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {\n+    final CountDownLatch waitExpireSession = new CountDownLatch(1);\n+    final ZkClient zkClient = (ZkClient) client;\n+\n+    IZkStateListener listener = new IZkStateListener() {\n+      @Override\n+      public void handleStateChanged(KeeperState state) throws Exception {\n+        LOG.info(\"IZkStateListener#handleStateChanged, state: \" + state);\n+        if (state == KeeperState.Expired) {\n+          waitExpireSession.countDown();\n+        }\n+      }\n+\n+      @Override\n+      public void handleNewSession(final String sessionId) throws Exception {\n+      }\n+\n+      @Override\n+      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n+      }\n+    };\n+\n+    zkClient.subscribeStateChanges(listener);\n+\n+    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n+    ZooKeeper curZookeeper = connection.getZookeeper();\n+    String oldSessionId = Long.toHexString(curZookeeper.getSessionId());\n+    LOG.info(\"Before session expiry. sessionId: \" + oldSessionId + \", zk: \" + curZookeeper);\n+\n+    Watcher watcher = new Watcher() {\n+      @Override\n+      public void process(WatchedEvent event) {\n+        LOG.info(\"Watcher#process, event: \" + event);\n+      }\n+    };\n+\n+    final ZooKeeper dupZookeeper =\n+        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n+            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n+    // wait until connected, then close\n+    while (dupZookeeper.getState() != States.CONNECTED) {\n+      Thread.sleep(10);\n+    }\n+    Assert.assertEquals(dupZookeeper.getState(), States.CONNECTED,\n+        \"Fail to connect to zk using current session info\");\n+    dupZookeeper.close();\n+\n+    // make sure session expiry really happens\n+    waitExpireSession.await();\n+    zkClient.unsubscribeStateChanges(listener);\n+\n+    connection = (ZkConnection) zkClient.getConnection();\n+    curZookeeper = connection.getZookeeper();\n+\n+    // wait util connected\n+    while (curZookeeper.getState() != States.CONNECTED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDMxNg=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk4NjYxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxNzowMlrOF_gLhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1Mjo0NFrOGDKfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTg0NQ==", "bodyText": "If it is just a local var, no need to make it capitalized.", "url": "https://github.com/apache/helix/pull/924#discussion_r402131845", "createdAt": "2020-04-02T08:17:02Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDc4OQ==", "bodyText": "Style?", "url": "https://github.com/apache/helix/pull/924#discussion_r405970789", "createdAt": "2020-04-09T05:52:44Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTg0NQ=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDA3MTMxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODozOTo0MVrOF_hALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTozOTozOVrOGC-GEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTMyNA==", "bodyText": "Should assign the result to ret?", "url": "https://github.com/apache/helix/pull/924#discussion_r402145324", "createdAt": "2020-04-02T08:39:41Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDk1Ng==", "bodyText": "good point.", "url": "https://github.com/apache/helix/pull/924#discussion_r402514956", "createdAt": "2020-04-02T18:11:58Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTMyNA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzY5Ng==", "bodyText": "Do you think this should be changed, since I've seen you agreement but no change?", "url": "https://github.com/apache/helix/pull/924#discussion_r405767696", "createdAt": "2020-04-08T19:39:39Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTMyNA=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDA4MTk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0MjoyOFrOF_hHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxMToyMVrOF_3igQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzA4Mw==", "bodyText": "Naming SharedZkClient doesn\u2019t match the parameter type HelixZkClient.\nFYI, it seems the only difference between expireSession and this is, this does not have handleNewSession implementation logic. Would you consider reducing the duplicate code?", "url": "https://github.com/apache/helix/pull/924#discussion_r402147083", "createdAt": "2020-04-02T08:42:28Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDU2MQ==", "bodyText": "It is different for a reason. Shared ZkClient does not have handleNewSession. Will combine see the above discussion with JJ.", "url": "https://github.com/apache/helix/pull/924#discussion_r402514561", "createdAt": "2020-04-02T18:11:21Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/ZkTestHelper.java", "diffHunk": "@@ -146,6 +146,70 @@ public void process(WatchedEvent event) {\n     LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n   }\n \n+  public static void expireSharedZkClientSession(HelixZkClient client) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzA4Mw=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDEyMzAxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1Mjo1MVrOF_hguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNzoyOFrOF_4d_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MzY1Nw==", "bodyText": "Assert this?", "url": "https://github.com/apache/helix/pull/924#discussion_r402153657", "createdAt": "2020-04-02T08:52:51Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    ZkTestHelper.expireSharedZkClientSession(dupZkclient);\n+\n+    // kill the session one more time to cover code path ZkClient resetting flag that\n+    // indicates first time synconnect happened.\n+    ZkTestHelper.expireSharedZkClientSession(dupZkclient);\n+\n+    // remove the currentstates\n+    paths.clear();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      paths.add(path);\n+    }\n+    success = extBaseAccessor.remove(paths, 0);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in remove:\" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTc5MA==", "bodyText": "See above.", "url": "https://github.com/apache/helix/pull/924#discussion_r402529790", "createdAt": "2020-04-02T18:37:28Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,83 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    ZkTestHelper.expireSharedZkClientSession(dupZkclient);\n+\n+    // kill the session one more time to cover code path ZkClient resetting flag that\n+    // indicates first time synconnect happened.\n+    ZkTestHelper.expireSharedZkClientSession(dupZkclient);\n+\n+    // remove the currentstates\n+    paths.clear();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      paths.add(path);\n+    }\n+    success = extBaseAccessor.remove(paths, 0);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in remove:\" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MzY1Nw=="}, "originalCommit": {"oid": "c25db42f5f9a524d204d658a5e3858b1c5273d6c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzc3NDM2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyODo1N1rOGC7r9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzo0MjowOFrOGDEtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODI0NQ==", "bodyText": "What if reconnect is not done successfully in the following reconnectOnExpiring() call?\nIn that case, if we change this flag to false, will it cause additional fireNewSessionEvents()? For example if we have a stale new session event in the queue.", "url": "https://github.com/apache/helix/pull/924#discussion_r405728245", "createdAt": "2020-04-08T18:28:57Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MTY1MQ==", "bodyText": "Discussed wit Kai offline, this should be fine as long as processStateChanged is synchronized called in one thread.", "url": "https://github.com/apache/helix/pull/924#discussion_r405741651", "createdAt": "2020-04-08T18:51:34Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODI0NQ=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjQ5Nw==", "bodyText": "BTW, please update the comment of _isNewSessionEventFired, it is out of date.", "url": "https://github.com/apache/helix/pull/924#discussion_r405742497", "createdAt": "2020-04-08T18:53:04Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODI0NQ=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzMyMQ==", "bodyText": "I was also thinking about the same concern.  It should be fine as it is protected by the eventLock. And also if reconnecting fails because of IOException, the old/expired zk is kept, but the expired zk could not do anything.", "url": "https://github.com/apache/helix/pull/924#discussion_r405767321", "createdAt": "2020-04-08T19:38:52Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODI0NQ=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NjE2MQ==", "bodyText": "updated.", "url": "https://github.com/apache/helix/pull/924#discussion_r405876161", "createdAt": "2020-04-08T23:42:08Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODI0NQ=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzg2MTM3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1MjozOFrOGC8irg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDowODowMlrOGDFOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA==", "bodyText": "As we moved the isManagingZkConnection closer to these methods, it might be cleaner if we just move it inside reconnectOnExpiring() and fireNewSessionEvents(). So we have better protection and the code looks cleaner.", "url": "https://github.com/apache/helix/pull/924#discussion_r405742254", "createdAt": "2020-04-08T18:52:38Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3Njc1MQ==", "bodyText": "As @pkuwm pointed out, processStateChanged is private method always called under lock protection, the same as fireAllEvent, and reconnectionOnExpiring.", "url": "https://github.com/apache/helix/pull/924#discussion_r405876751", "createdAt": "2020-04-08T23:44:03Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3ODk1MA==", "bodyText": "Yeah, but it is a good practice to check closer to where the real business logic exists.\nOne example could be, if in the future we want to call reconnectOnExpiring() somewhere else, we don't need to add one more check there.\nHigh-level, these 2 methods shall only be called for non-shared clients. But we don't have a way to block them for shared client implementation. So we just put the check inside, then they won't cause any more problems even if we want to do anything to change the zkclient.", "url": "https://github.com/apache/helix/pull/924#discussion_r405878950", "createdAt": "2020-04-08T23:51:13Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4MDY5Mw==", "bodyText": "Can you be more specific as what you want to do with the change? Sketch how you think about the fireNewSessionEvent, fireAllEvent, reconnectOnExpiring look like?\nTo me, there are many ways to put the if and else check. Either way works for me.", "url": "https://github.com/apache/helix/pull/924#discussion_r405880693", "createdAt": "2020-04-08T23:56:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4MjMwMw==", "bodyText": "maybe something like this:\nprivate void reconnectOnExpiring() {\n  if (!isManagingZkConnection()) {\n    return;\n  }\n  ... // the rest is the same\n}\n\nprivate void fireNewSessionEvents() {\n  if (!isManagingZkConnection()) {\n    return;\n  }\n ...// the rest is the same.\n\n  }", "url": "https://github.com/apache/helix/pull/924#discussion_r405882303", "createdAt": "2020-04-09T00:01:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4MzEwNw==", "bodyText": "Yeah, this is what I meant.", "url": "https://github.com/apache/helix/pull/924#discussion_r405883107", "createdAt": "2020-04-09T00:03:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4NDQ3Nw==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/924#discussion_r405884477", "createdAt": "2020-04-09T00:08:02Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,7 +1104,10 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n-      reconnectOnExpiring();\n+      _isNewSessionEventFired = false;\n+      if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MjI1NA=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODAzMDM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo0MjoxOFrOGC-Lrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzoxMjoxMlrOGDEImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2OTEzNQ==", "bodyText": "If you have to use sleep to wait for the sync connected, I do see duplicate code and it could replaced by TestHelper.varify(), which saves you the duplicate code and also offers a timeout option in case it is forever blocked here.", "url": "https://github.com/apache/helix/pull/924#discussion_r405769135", "createdAt": "2020-04-08T19:42:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,100 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    while (true) {\n+      long curSessionId = dupZkclient.getSessionId();\n+      if (curSessionId == sessionId || curSessionId == 0) {\n+        Thread.sleep(500);\n+      } else {\n+        sessionId = curSessionId;\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NjY0OA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/924#discussion_r405866648", "createdAt": "2020-04-08T23:12:12Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,100 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    while (true) {\n+      long curSessionId = dupZkclient.getSessionId();\n+      if (curSessionId == sessionId || curSessionId == 0) {\n+        Thread.sleep(500);\n+      } else {\n+        sessionId = curSessionId;\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2OTEzNQ=="}, "originalCommit": {"oid": "c558a80c5d6dc2cd6cf62ca1615f70196fc2adba"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTMzOTk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo0ODoyOVrOGDKaeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowOTo0N1rOGDjyzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2OTUyOA==", "bodyText": "It could be simplified to return curSessionId != sessionId && curSessionId != 0?", "url": "https://github.com/apache/helix/pull/924#discussion_r405969528", "createdAt": "2020-04-09T05:48:29Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(()-> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      if (curSessionId != sessionId && curSessionId != 0) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NTM1Nw==", "bodyText": "changed.\nthere are many ways to write same bool logic. there is no preferred way by all the people. (say what if JJ prefer another way, how do we resolve it?) let us refrain from pick this kind stuff up. It incurs cost without adding value.", "url": "https://github.com/apache/helix/pull/924#discussion_r406385357", "createdAt": "2020-04-09T18:09:47Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(()-> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      if (curSessionId != sessionId && curSessionId != 0) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2OTUyOA=="}, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM0MjM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo0OTozN1rOGDKb0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowMDo0M1rOGDjfYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2OTg3Mw==", "bodyText": "Unnecessary extra space before )", "url": "https://github.com/apache/helix/pull/924#discussion_r405969873", "createdAt": "2020-04-09T05:49:37Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDM4NQ==", "bodyText": "formatted.", "url": "https://github.com/apache/helix/pull/924#discussion_r406380385", "createdAt": "2020-04-09T18:00:43Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2OTg3Mw=="}, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM0NjA2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1MTo0MlrOGDKeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODowMDoyNlrOGDje1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDQ1Nw==", "bodyText": "I've seen multiple places not formatted. Can you format your changes here?", "url": "https://github.com/apache/helix/pull/924#discussion_r405970457", "createdAt": "2020-04-09T05:51:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(()-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDI0Ng==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/924#discussion_r406380246", "createdAt": "2020-04-09T18:00:26Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,99 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\",\n+          \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000,\n+        zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true  );\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(()-> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDQ1Nw=="}, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM1Mzk4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1NToyNlrOGDKinQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1NToyNlrOGDKinQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MTYxMw==", "bodyText": "Reversed way? Managing connection should fire handle new session events.", "url": "https://github.com/apache/helix/pull/924#discussion_r405971613", "createdAt": "2020-04-09T05:55:26Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1150,6 +1156,10 @@ private void reconnect() {\n   }\n \n   private void fireNewSessionEvents() {\n+    // only managing zkclient fire handleNewSession event\n+    if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM1NTM3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1NjowOVrOGDKjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1NjowOVrOGDKjbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MTgyMA==", "bodyText": "Reversed.\nAnd please correct the comment.", "url": "https://github.com/apache/helix/pull/924#discussion_r405971820", "createdAt": "2020-04-09T05:56:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1101,11 +1103,16 @@ protected void processStateChanged(WatchedEvent event) {\n         fireAllEvents();\n       }\n     } else if (event.getState() == KeeperState.Expired) {\n+      _isNewSessionEventFired = false;\n       reconnectOnExpiring();\n     }\n   }\n \n   private void reconnectOnExpiring() {\n+    // only managing zkclient fire handleNewSession event\n+    if (isManagingZkConnection()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU0NzAyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxNDoxMVrOGDMWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoxNzo1NFrOGDkErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMTMwMg==", "bodyText": "Thanks for put the check inside the function. But why we need to move it to after _isNewSessionEventFired = true;?\nIs it concerning? Because when _isNewSessionEventFired is set to true, the event is not sent yet.", "url": "https://github.com/apache/helix/pull/924#discussion_r406001302", "createdAt": "2020-04-09T07:14:11Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1080,22 +1080,21 @@ protected void processStateChanged(WatchedEvent event) {\n      */\n     if (event.getState() == KeeperState.SyncConnected) {\n       if (!_isNewSessionEventFired && !\"0\".equals(getHexSessionId())) {\n-        if (isManagingZkConnection()) {\n-          /*\n-           * Before the new zookeeper instance is connected to the zookeeper service and its session\n-           * is established, its session id is 0.\n-           * New session event is not fired until the new zookeeper session receives the first\n-           * SyncConnected state(the zookeeper session is established).\n-           * Now the session id is available and non-zero, and we can fire new session events.\n-           */\n-          fireNewSessionEvents();\n-        }\n         /*\n          * Set it true to avoid firing events again for the same session next time\n          * when SyncConnected events are received.\n          */\n         _isNewSessionEventFired = true;\n \n+        /*\n+         * Before the new zookeeper instance is connected to the zookeeper service and its session\n+         * is established, its session id is 0.\n+         * New session event is not fired until the new zookeeper session receives the first\n+         * SyncConnected state(the zookeeper session is established).\n+         * Now the session id is available and non-zero, and we can fire new session events.\n+         */\n+        fireNewSessionEvents();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4Mjg3NQ==", "bodyText": "Any comments on \"why we need to move it to after _isNewSessionEventFired = true;? Is it concerning?\" ?", "url": "https://github.com/apache/helix/pull/924#discussion_r406382875", "createdAt": "2020-04-09T18:05:14Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1080,22 +1080,21 @@ protected void processStateChanged(WatchedEvent event) {\n      */\n     if (event.getState() == KeeperState.SyncConnected) {\n       if (!_isNewSessionEventFired && !\"0\".equals(getHexSessionId())) {\n-        if (isManagingZkConnection()) {\n-          /*\n-           * Before the new zookeeper instance is connected to the zookeeper service and its session\n-           * is established, its session id is 0.\n-           * New session event is not fired until the new zookeeper session receives the first\n-           * SyncConnected state(the zookeeper session is established).\n-           * Now the session id is available and non-zero, and we can fire new session events.\n-           */\n-          fireNewSessionEvents();\n-        }\n         /*\n          * Set it true to avoid firing events again for the same session next time\n          * when SyncConnected events are received.\n          */\n         _isNewSessionEventFired = true;\n \n+        /*\n+         * Before the new zookeeper instance is connected to the zookeeper service and its session\n+         * is established, its session id is 0.\n+         * New session event is not fired until the new zookeeper session receives the first\n+         * SyncConnected state(the zookeeper session is established).\n+         * Now the session id is available and non-zero, and we can fire new session events.\n+         */\n+        fireNewSessionEvents();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMTMwMg=="}, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4OTkzNA==", "bodyText": "I changed it back to the original way. The previous changing order should also work. But to be on the safe side, as you commented, let us change it back to original way.", "url": "https://github.com/apache/helix/pull/924#discussion_r406389934", "createdAt": "2020-04-09T18:17:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1080,22 +1080,21 @@ protected void processStateChanged(WatchedEvent event) {\n      */\n     if (event.getState() == KeeperState.SyncConnected) {\n       if (!_isNewSessionEventFired && !\"0\".equals(getHexSessionId())) {\n-        if (isManagingZkConnection()) {\n-          /*\n-           * Before the new zookeeper instance is connected to the zookeeper service and its session\n-           * is established, its session id is 0.\n-           * New session event is not fired until the new zookeeper session receives the first\n-           * SyncConnected state(the zookeeper session is established).\n-           * Now the session id is available and non-zero, and we can fire new session events.\n-           */\n-          fireNewSessionEvents();\n-        }\n         /*\n          * Set it true to avoid firing events again for the same session next time\n          * when SyncConnected events are received.\n          */\n         _isNewSessionEventFired = true;\n \n+        /*\n+         * Before the new zookeeper instance is connected to the zookeeper service and its session\n+         * is established, its session id is 0.\n+         * New session event is not fired until the new zookeeper session receives the first\n+         * SyncConnected state(the zookeeper session is established).\n+         * Now the session id is available and non-zero, and we can fire new session events.\n+         */\n+        fireNewSessionEvents();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMTMwMg=="}, "originalCommit": {"oid": "c1711ab8e4a9712a39b4dbf00f73ae0a947bbbca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTU5NzU1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNTowN1rOGE5oAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo1NToxMFrOGFaVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MTYxNw==", "bodyText": "Nit, just make my point clear: this is kind of redundant, not what I meant. I meant\nreturn curSessionId != sessionId && curSessionId != 0;", "url": "https://github.com/apache/helix/pull/924#discussion_r407791617", "createdAt": "2020-04-14T00:15:07Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000, zkCacheInitPaths, accessor._zkCache._cache,\n+        _gZkClient, true);\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId && curSessionId != 0 ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyNzQ5OQ==", "bodyText": "addressed.", "url": "https://github.com/apache/helix/pull/924#discussion_r408327499", "createdAt": "2020-04-14T17:55:10Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000, zkCacheInitPaths, accessor._zkCache._cache,\n+        _gZkClient, true);\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId && curSessionId != 0 ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MTYxNw=="}, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYwODA4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoyMDoyMlrOGE5uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo1NDo1NVrOGFaUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MzIxMQ==", "bodyText": "I still think CURSTATECNT should follow the style: it is not a constant variable.", "url": "https://github.com/apache/helix/pull/924#discussion_r407793211", "createdAt": "2020-04-14T00:20:22Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyNzMyMQ==", "bodyText": "addressed.", "url": "https://github.com/apache/helix/pull/924#discussion_r408327321", "createdAt": "2020-04-14T17:54:55Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MzIxMQ=="}, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcwOTk3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxNDoyNlrOGE6pjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo1MDoxMlrOGFcUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODM5Nw==", "bodyText": "@kaisun2000 My understanding is, the current states created by this invalid session \"session_0\" would also be invalid. Can you help me understand if these invalid current states would work for this testing purpose? Thanks.", "url": "https://github.com/apache/helix/pull/924#discussion_r407808397", "createdAt": "2020-04-14T01:14:26Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyNTMwNw==", "bodyText": "CurrentStates here only serves the purpose of some directory in zookeeper. This test has nothing to do with controller rebalancing logic.  Note, TestHelper.verifyZkCache only valid the data in zookeeper and propertycache for this currentstates path are the same. That is the gist of this test.\nPut it another way, using currentstate property builder is just a convenience. All the other test in this suite is like this.", "url": "https://github.com/apache/helix/pull/924#discussion_r408325307", "createdAt": "2020-04-14T17:51:50Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODM5Nw=="}, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2MDAyNQ==", "bodyText": "My point was, I just wanted to understand it is not only reading the current state paths that have a valid session.\nI double checked. It should work as it would read the paths recursively so \"session_0\" would be read.", "url": "https://github.com/apache/helix/pull/924#discussion_r408360025", "createdAt": "2020-04-14T18:50:12Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int CURSTATECNT = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < CURSTATECNT; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODM5Nw=="}, "originalCommit": {"oid": "41273d1188a0cd2f91f00681ba37b8b72795edb3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTIxMTQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0Nzo0N1rOGFcOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMToxMzoyM1rOGFhI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1ODU5Ng==", "bodyText": "This block of clearing current state paths is unnecessary, as the paths list is not changed?", "url": "https://github.com/apache/helix/pull/924#discussion_r408358596", "createdAt": "2020-04-14T18:47:47Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int curstateCnt = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < curstateCnt; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < curstateCnt; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000, zkCacheInitPaths, accessor._zkCache._cache,\n+        _gZkClient, true);\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId && curSessionId != 0;\n+    }, 10000);\n+    Assert.assertTrue(ret, \"kill session timed out!\");\n+\n+    // kill the session one more time to cover code path ZkClient resetting flag that\n+    // indicates first time synconnect happened.\n+    final long sessionId1 = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId1 && curSessionId != 0;\n+    }, 10000);\n+    Assert.assertTrue(ret, \"kill session second time timed out!\");\n+\n+    // remove the currentstates\n+    paths.clear();\n+    for (int i = 0; i < curstateCnt; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      paths.add(path);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68afe66fd7fa041d55ec5b822352a828830a1f3c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTAxMg==", "bodyText": "This is necessary.  This removal of currentstate should trigger propertystore to reflect this removal in its cache as well.\nWithout this fix, this is not going to be true because the watcher to zookeeper is lost.", "url": "https://github.com/apache/helix/pull/924#discussion_r408439012", "createdAt": "2020-04-14T21:13:23Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java", "diffHunk": "@@ -37,6 +38,93 @@\n import org.testng.annotations.Test;\n \n public class TestZkCacheAsyncOpSingleThread extends ZkUnitTestBase {\n+  @Test\n+  public void testSessionExpirationWithSharedZkClient() throws Exception {\n+    int curstateCnt = 10;\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    // init external base data accessor\n+    HelixZkClient sharedZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+    sharedZkclient.setZkSerializer(new ZNRecordSerializer());\n+    ZkBaseDataAccessor<ZNRecord> sharedBaseAccessor = new ZkBaseDataAccessor<>(sharedZkclient);\n+\n+    // init zkCacheBaseDataAccessor\n+    String curStatePath = PropertyPathBuilder.instanceCurrentState(clusterName, \"localhost_8901\");\n+    String extViewPath = PropertyPathBuilder.externalView(clusterName);\n+\n+    ZkBaseDataAccessor<ZNRecord> extBaseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    extBaseAccessor.create(curStatePath, null, AccessOption.PERSISTENT);\n+\n+    List<String> zkCacheInitPaths = Arrays.asList(curStatePath, extViewPath);\n+    ZkCacheBaseDataAccessor<ZNRecord> accessor =\n+        new ZkCacheBaseDataAccessor<>(sharedBaseAccessor, null, null, zkCacheInitPaths);\n+\n+    boolean ret =\n+        TestHelper.verifyZkCache(zkCacheInitPaths, accessor._zkCache._cache, _gZkClient, true);\n+    Assert.assertTrue(ret, \"zkCache doesn't match data on Zk\");\n+\n+    // create 10 current states using external base accessor\n+    List<String> paths = new ArrayList<>();\n+    List<ZNRecord> records = new ArrayList<>();\n+    for (int i = 0; i < curstateCnt; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      ZNRecord record = new ZNRecord(\"TestDB\" + i);\n+\n+      paths.add(path);\n+      records.add(record);\n+    }\n+\n+    boolean[] success = extBaseAccessor.createChildren(paths, records, AccessOption.PERSISTENT);\n+    for (int i = 0; i < curstateCnt; i++) {\n+      Assert.assertTrue(success[i], \"Should succeed in create: \" + paths.get(i));\n+    }\n+\n+    TestHelper.verifyWithTimeout(\"verifyZkCache\", 5000, zkCacheInitPaths, accessor._zkCache._cache,\n+        _gZkClient, true);\n+\n+    // dup shared ZkClient\n+    HelixZkClient dupZkclient = SharedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n+\n+    // kill the session to make sure shared zkClient re-installs watcher\n+    final long sessionId = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId && curSessionId != 0;\n+    }, 10000);\n+    Assert.assertTrue(ret, \"kill session timed out!\");\n+\n+    // kill the session one more time to cover code path ZkClient resetting flag that\n+    // indicates first time synconnect happened.\n+    final long sessionId1 = dupZkclient.getSessionId();\n+    ZkTestHelper.asyncExpireSession(dupZkclient);\n+    ret = TestHelper.verify(() -> {\n+      long curSessionId = dupZkclient.getSessionId();\n+      return curSessionId != sessionId1 && curSessionId != 0;\n+    }, 10000);\n+    Assert.assertTrue(ret, \"kill session second time timed out!\");\n+\n+    // remove the currentstates\n+    paths.clear();\n+    for (int i = 0; i < curstateCnt; i++) {\n+      String path = PropertyPathBuilder\n+          .instanceCurrentState(clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + i);\n+      paths.add(path);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1ODU5Ng=="}, "originalCommit": {"oid": "68afe66fd7fa041d55ec5b822352a828830a1f3c"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1430, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}