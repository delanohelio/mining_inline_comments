{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTU4OTQ1", "number": 1058, "title": "Fix ReadOnlyWagedRebalancer so that it computes mapping from scratch", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1057\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nPreviously, ReadOnlyWagedRebalancer would only read from the previously computed best possible mapping and returns it. This commit changes it so that it computes things from scratch - it can read the previously computed best possible mapping but shouldn't just return it without doing any calculation.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:116 \u00c2\u00bb ThreadTimeout Method...\n[ERROR]   TestWagedRebalance.testRebalanceTool:187 \u00c2\u00bb NullPointer\n[INFO] \n[ERROR] Tests run: 1149, Failures: 2, Errors: 0, Skipped: 0\n\n\n[ERROR] Failures:\n[ERROR]   TestEnableCompression.testEnableCompressionResource:116 \u00c2\u00bb ThreadTimeout Method...\n[ERROR]   TestWagedRebalance.testRebalanceTool:187 \u00c2\u00bb NullPointer\n[INFO]\n[ERROR] Tests run: 1149, Failures: 2, Errors: 0, Skipped: 0\nFixed TestWagedRebalance. The result for running the failed two tests are below:\n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 59.493 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n\nOther tests succeed when run individually.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-04T16:38:16Z", "url": "https://github.com/apache/helix/pull/1058", "merged": true, "mergeCommit": {"oid": "cadc17f519a7b1cd8984e1553c98e6a022ffda7c"}, "closed": true, "closedAt": "2020-06-10T22:17:17Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoAtspAH2gAyNDI3OTU4OTQ1OmJmN2YyODk5MTA1NTVmNmFmMGFhOGM3YTk4YTk2M2MwNjAyNjMxOWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqBIZtgFqTQyODQ2Mjk2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf7f289910555f6af0aa8c7a98a963c06026319f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/bf7f289910555f6af0aa8c7a98a963c06026319f", "committedDate": "2020-06-04T16:32:58Z", "message": "Fix ReadOnlyWagedRebalancer so that it computes mapping from scratch\n\nPreviously, ReadOnlyWagedRebalancer would only read from the previously computed best possible mapping and returns it. This commit changes it so that it computes things from scratch - it can read the previously computed best possible mapping but shouldn't just return it without doing any calculation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88fcb0e58508acaacdef4dcda9af46802480cb0", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/c88fcb0e58508acaacdef4dcda9af46802480cb0", "committedDate": "2020-06-06T19:50:45Z", "message": "Fix util so that global rebalance happens synchronously"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDk3MDIw", "url": "https://github.com/apache/helix/pull/1058#pullrequestreview-426497020", "createdAt": "2020-06-08T18:17:55Z", "commit": {"oid": "c88fcb0e58508acaacdef4dcda9af46802480cb0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxNzo1NVrOGgqbcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxOToyNVrOGgqehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMjc3MQ==", "bodyText": "Let's have a different name for this private class. I would still prefer the old name DryrunWagedRebalancer.\nBut feel free to have a better name for this method.", "url": "https://github.com/apache/helix/pull/1058#discussion_r436902771", "createdAt": "2020-06-08T18:17:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -428,4 +432,20 @@ public String toString() {\n     return verifierName + \"(\" + _clusterName + \"@\" + _zkClient + \"@resources[\"\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n+\n+  private class ReadOnlyWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.ReadOnlyWagedRebalancer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88fcb0e58508acaacdef4dcda9af46802480cb0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMzU1OQ==", "bodyText": "As we see in the test, the current way overriding the live instance info won't work. We need to retain the session Id somehow. Otherwise, the current state won't be read correctly.", "url": "https://github.com/apache/helix/pull/1058#discussion_r436903559", "createdAt": "2020-06-08T18:19:25Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -175,27 +175,34 @@ public static String serializeByComma(List<String> objects) {\n       String metadataStoreAddress, ClusterConfig clusterConfig,\n       List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n       List<IdealState> idealStates, List<ResourceConfig> resourceConfigs) {\n+    // Copy the cluster config and make globalRebalance happen synchronously\n+    // Otherwise, globalRebalance may not complete and this util might end up returning\n+    // an empty assignment.\n+    ClusterConfig globalSyncClusterConfig = new ClusterConfig(clusterConfig.getRecord());\n+    globalSyncClusterConfig.setGlobalRebalanceAsyncMode(false);\n+\n     // Prepare a data accessor for a dataProvider (cache) refresh\n     BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n     HelixDataAccessor helixDataAccessor =\n-        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+        new ZKHelixDataAccessor(globalSyncClusterConfig.getClusterName(), baseDataAccessor);\n \n     // Create an instance of read-only WAGED rebalancer\n     ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n-        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n-            clusterConfig.getGlobalRebalancePreference());\n+        new ReadOnlyWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n+            globalSyncClusterConfig.getGlobalRebalancePreference());\n \n     // Use a dummy event to run the required stages for BestPossibleState calculation\n     // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n-    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    ClusterEvent event =\n+        new ClusterEvent(globalSyncClusterConfig.getClusterName(), ClusterEventType.Unknown);\n \n     try {\n       // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n       ResourceControllerDataProvider dataProvider =\n-          new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+          new ResourceControllerDataProvider(globalSyncClusterConfig.getClusterName());\n       dataProvider.requireFullRefresh();\n       dataProvider.refresh(helixDataAccessor);\n-      dataProvider.setClusterConfig(clusterConfig);\n+      dataProvider.setClusterConfig(globalSyncClusterConfig);\n       dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n           .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n       dataProvider.setLiveInstances(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88fcb0e58508acaacdef4dcda9af46802480cb0"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35988bce164f80c1102085110f1c58f6efb28beb", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/35988bce164f80c1102085110f1c58f6efb28beb", "committedDate": "2020-06-10T06:23:00Z", "message": "Change name and fix liveinstances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "647996cf95c185a73893613fb04ad38911f7b4a0", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/647996cf95c185a73893613fb04ad38911f7b4a0", "committedDate": "2020-06-10T15:51:29Z", "message": "Fix unmodifiablemap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzE5Nzg0", "url": "https://github.com/apache/helix/pull/1058#pullrequestreview-428319784", "createdAt": "2020-06-10T18:25:13Z", "commit": {"oid": "647996cf95c185a73893613fb04ad38911f7b4a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoyNToxM1rOGiBQJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoyODo1M1rOGiBYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNTI4Ng==", "bodyText": "I should have made myself clearer. What I meant to say is that you can name the newly defined private class DryrunWagedRebalancer here. But the one in the package org.apache.helix.controller.rebalancer.waged can still be named ReadOnlyWagedRebalancer.\nThe purpose is to differentiate the names so as to avoid confusion.", "url": "https://github.com/apache/helix/pull/1058#discussion_r438325286", "createdAt": "2020-06-10T18:25:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -428,4 +432,20 @@ public String toString() {\n     return verifierName + \"(\" + _clusterName + \"@\" + _zkClient + \"@resources[\"\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n+\n+  private class DryrunWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.DryrunWagedRebalancer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647996cf95c185a73893613fb04ad38911f7b4a0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNzMwOQ==", "bodyText": "Please don't filter out any live instances that are in the input but not in the dataProvider.\nThe caller might want to test with those non-exist live instances. And even the sessions of those non-exist live instances are empty, the tool can still running fine because there won't be any current state read for the non-exist instances anyway.", "url": "https://github.com/apache/helix/pull/1058#discussion_r438327309", "createdAt": "2020-06-10T18:28:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -175,37 +176,50 @@ public static String serializeByComma(List<String> objects) {\n       String metadataStoreAddress, ClusterConfig clusterConfig,\n       List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n       List<IdealState> idealStates, List<ResourceConfig> resourceConfigs) {\n+    // Copy the cluster config and make globalRebalance happen synchronously\n+    // Otherwise, globalRebalance may not complete and this util might end up returning\n+    // an empty assignment.\n+    ClusterConfig globalSyncClusterConfig = new ClusterConfig(clusterConfig.getRecord());\n+    globalSyncClusterConfig.setGlobalRebalanceAsyncMode(false);\n+\n     // Prepare a data accessor for a dataProvider (cache) refresh\n     BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n     HelixDataAccessor helixDataAccessor =\n-        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+        new ZKHelixDataAccessor(globalSyncClusterConfig.getClusterName(), baseDataAccessor);\n \n     // Create an instance of read-only WAGED rebalancer\n-    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n-        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n-            clusterConfig.getGlobalRebalancePreference());\n+    DryrunWagedRebalancer dryrunWagedRebalancer =\n+        new DryrunWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n+            globalSyncClusterConfig.getGlobalRebalancePreference());\n \n     // Use a dummy event to run the required stages for BestPossibleState calculation\n     // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n-    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    ClusterEvent event =\n+        new ClusterEvent(globalSyncClusterConfig.getClusterName(), ClusterEventType.Unknown);\n \n     try {\n       // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n       ResourceControllerDataProvider dataProvider =\n-          new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+          new ResourceControllerDataProvider(globalSyncClusterConfig.getClusterName());\n       dataProvider.requireFullRefresh();\n       dataProvider.refresh(helixDataAccessor);\n-      dataProvider.setClusterConfig(clusterConfig);\n+      dataProvider.setClusterConfig(globalSyncClusterConfig);\n       dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n           .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n-      dataProvider.setLiveInstances(\n-          liveInstances.stream().map(LiveInstance::new).collect(Collectors.toList()));\n+      // For LiveInstances, we must preserve the existing session IDs\n+      // So read LiveInstance objects from the cluster and do a \"retainAll\" on them\n+      // liveInstanceMap is an unmodifiableMap instances, so we filter using a stream\n+      Map<String, LiveInstance> liveInstanceMap = dataProvider.getLiveInstances();\n+      List<LiveInstance> filteredLiveInstances = liveInstanceMap.entrySet().stream()\n+          .filter(entry -> liveInstances.contains(entry.getKey())).map(Map.Entry::getValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647996cf95c185a73893613fb04ad38911f7b4a0"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e5946ffd141bef176a0ac00e0080490ce893b3", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/13e5946ffd141bef176a0ac00e0080490ce893b3", "committedDate": "2020-06-10T19:55:59Z", "message": "improve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587917c3f59bd713ba2460fb2aa7793d1e470f5c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/587917c3f59bd713ba2460fb2aa7793d1e470f5c", "committedDate": "2020-06-10T19:57:56Z", "message": "change name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcae1bd1b2bdeca10cff9b96d7a57c8881c505f3", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/bcae1bd1b2bdeca10cff9b96d7a57c8881c505f3", "committedDate": "2020-06-10T21:39:25Z", "message": "add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDYyOTY0", "url": "https://github.com/apache/helix/pull/1058#pullrequestreview-428462964", "createdAt": "2020-06-10T22:09:59Z", "commit": {"oid": "bcae1bd1b2bdeca10cff9b96d7a57c8881c505f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4437, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}