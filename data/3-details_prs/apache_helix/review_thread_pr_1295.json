{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTM5Njg1", "number": 1295, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MDowNlrOEau2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozMTo1NVrOEpphaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDY1OTUyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MDowNlrOHEV0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MDowNlrOHEV0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMzg3Mw==", "bodyText": "Does the test really need 60s to poll the result? In my opinion it is too long. It would fail with 20s?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474313873", "createdAt": "2020-08-20T22:50:06Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDgwOTkwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDowNzoxNlrOHEXNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo1NDo0NlrOHE301Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNjY1OQ==", "bodyText": "These fields are not helpful to the ZkClient.\nCould you try to change the ZkClientMonitor instead so as to avoid these fields? What I am thinking is that, allowing the _eventThread sub-monitor to be added later after the ZkClientMonitor has been constructed. So it can be done in the connect() by referring to _monitor.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474336659", "createdAt": "2020-08-21T00:07:16Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -124,6 +125,13 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n   private ZkClientMonitor _monitor;\n \n+  final private String _monitorKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3MDk5Nw==", "bodyText": "Changed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474870997", "createdAt": "2020-08-21T18:54:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -124,6 +125,13 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n   private ZkClientMonitor _monitor;\n \n+  final private String _monitorKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNjY1OQ=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDgxMzQ0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDowOTowOFrOHEXPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDoxMTozMlrOHM7VWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzE4Mg==", "bodyText": "the comment is not updated accordingly.\nCould you please justify the reason we need to triple the wait duration?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474337182", "createdAt": "2020-08-21T00:09:08Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NzQ5OQ==", "bodyText": "Github zookeeper is slow. See #1268 for profiling result. Using 60 secs does not really hurt anything, as we still poll the condition every 500ms.\nOtherwise, the test can be flaky.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474347499", "createdAt": "2020-08-21T00:47:52Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzE4Mg=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyODEyMg==", "bodyText": "\"the comment is not updated accordingly.\"", "url": "https://github.com/apache/helix/pull/1295#discussion_r483228122", "createdAt": "2020-09-03T20:13:50Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzE4Mg=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNzA4MA==", "bodyText": "Good point, will update this one. Let us first resolve the bigger issue about how to initialize and how to make test stable.", "url": "https://github.com/apache/helix/pull/1295#discussion_r483317080", "createdAt": "2020-09-04T00:11:32Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzE4Mg=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDgxNDYxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDowOTo0NFrOHEXQRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1ODoxNFrOHTJM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA==", "bodyText": "What happen to these 2 checks?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474337348", "createdAt": "2020-08-21T00:09:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODE4Nw==", "bodyText": "Do we really need this check? If we ensure after exists(), the read is 2, then we shall be good, right?\nNote that to check this read counter one by one, we need to add one method just for this purpose. I think it is an overkill and it is not necessary.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338187", "createdAt": "2020-08-21T00:12:37Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0ODU2Ng==", "bodyText": "You are right. line 302 and 303 can/should be removed.  The time value is indeterministic.\nline 301 is fine.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474348566", "createdAt": "2020-08-21T00:51:42Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MTQ1Mw==", "bodyText": "Seems you have concern about this one by increase it one by one https://github.com/apache/helix/pull/1295/files#r474338328\nLet me share my thinking here.\nThe doAsyncSync() callback finishing is async to main thread here. It can increase the read counter anytime.  Thus, we need TestHelper.verify to wait for this read from sync(). Here, delete line 301  assert is also ok, just wait for 307 having read counter as 2. Same reason, assert 301 is 1 is fine.\nIn sum, either way it is fine. But without TestHelper.verify waiting is not fine.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474351453", "createdAt": "2020-08-21T01:03:44Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgzMzk4MQ==", "bodyText": "2 ways are different because you will need to add code for supporting the check. If you think both ways of checking are fine, let's do the simpler one.", "url": "https://github.com/apache/helix/pull/1295#discussion_r476833981", "createdAt": "2020-08-25T23:07:45Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMDY4MA==", "bodyText": "\"But without TestHelper.verify waiting is not fine.\" why is that? You can TestHelper.verify to wait until the count is 2.\nMy suggestion is still getting rid of the getSyncStatus()", "url": "https://github.com/apache/helix/pull/1295#discussion_r483230680", "createdAt": "2020-09-03T20:18:46Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNjA5Nw==", "bodyText": "Unfortunately, you can't or you have race condition in this case, if my understanding is right. Let me illustrate:\ndoAsycSync(), when the success code returns, it would increase by read counter one from the asyncThread in the ZkClient.\nNote, the main thread running zkClient.exist(Test_Root ) would increase read counter synchronously from main thread.\nThe problem is that the doAsynSync() increase to read counter is totally async to the main thread. It is the case that after main thread finish zkClient.exist(Test_Root ), the doAsyncSync() would finish for sure. Recent github test actually illustrate this point. Previous we don't realize as it did not happen.\nIn fact, theoretically, the doAsyncSync() increase can happen a lot later too.\nLet me know if there is other ways you think that we can make the test stable while also no need to use getSyncStatus().", "url": "https://github.com/apache/helix/pull/1295#discussion_r483316097", "createdAt": "2020-09-04T00:07:57Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwMTA2Mg==", "bodyText": "Let's sync up tomorrow. I didn't get why waiting for the read count = 2 won't work.", "url": "https://github.com/apache/helix/pull/1295#discussion_r488401062", "createdAt": "2020-09-15T05:49:07Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNTc0Nw==", "bodyText": "changed to waiting for 2", "url": "https://github.com/apache/helix/pull/1295#discussion_r489835747", "createdAt": "2020-09-17T00:58:14Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDgyMTI0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDoxMzoxMlrOHEXUGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1Nzo0NlrOHTJL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA==", "bodyText": "I have multiple questions.\n\nIf this is just for test, please make it package-private.\nDo we really need to check the read count one by one increase?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338328", "createdAt": "2020-08-21T00:13:12Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MTY5MQ==", "bodyText": "1/ make this one @VisibleForTesting.\n2/ See my comment https://github.com/apache/helix/pull/1295/files#r474351453. See if this address the concern.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474351691", "createdAt": "2020-08-21T01:04:47Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyOTU3OA==", "bodyText": "Sorry that I cannot make the link work. Maybe because code has been changed. Could you please copy-paste your comment here? I still think this is not necessary.", "url": "https://github.com/apache/helix/pull/1295#discussion_r483229578", "createdAt": "2020-09-03T20:16:51Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNDY4Nw==", "bodyText": "See the discussion above about why think we can't get rid of this getSyncStatus().", "url": "https://github.com/apache/helix/pull/1295#discussion_r483314687", "createdAt": "2020-09-04T00:02:34Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNTQ5OA==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r489835498", "createdAt": "2020-09-17T00:57:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDgyMzM5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDoxNDoxMFrOHEXVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo1OTowNVrOHE377A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODYyNw==", "bodyText": "We should consider closing the monitor to avoid leakage. If the later part of code zk connection timeout and throws exception, the monitor should also be closed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338627", "createdAt": "2020-08-21T00:14:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2156,6 +2160,21 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       LOG.debug(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n \n+      // initiate monitor\n+      try {\n+        if (_monitorKey != null && !_monitorKey.isEmpty() && _monitorType != null && !_monitorType\n+            .isEmpty()) {\n+          _monitor =\n+              new ZkClientMonitor(_monitorType, _monitorKey, _monitorInstanceName, _monitorRootPathOnly,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0OTYyMQ==", "bodyText": "My thinking is that ZkClientMonitor does not hold any session object, nor thread. Let GC deal with it would be fine. Or do you see otherwise?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474349621", "createdAt": "2020-08-21T00:55:53Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2156,6 +2160,21 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       LOG.debug(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n \n+      // initiate monitor\n+      try {\n+        if (_monitorKey != null && !_monitorKey.isEmpty() && _monitorType != null && !_monitorType\n+            .isEmpty()) {\n+          _monitor =\n+              new ZkClientMonitor(_monitorType, _monitorKey, _monitorInstanceName, _monitorRootPathOnly,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODYyNw=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NzExMw==", "bodyText": "Why we move this into connect()? what problem we try to solve here?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474357113", "createdAt": "2020-08-21T01:25:54Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2156,6 +2160,21 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       LOG.debug(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n \n+      // initiate monitor\n+      try {\n+        if (_monitorKey != null && !_monitorKey.isEmpty() && _monitorType != null && !_monitorType\n+            .isEmpty()) {\n+          _monitor =\n+              new ZkClientMonitor(_monitorType, _monitorKey, _monitorInstanceName, _monitorRootPathOnly,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODYyNw=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3MjgxMg==", "bodyText": "Basically, currently code has a race condition. The event of _monitor construction and _monitor first event recording sequence are not deterministic. _monitor construction is in main thread which construct szkclient while statechangecount in _monitor is increased in zookeeper client event thread by calling process() of zkclient.\nSee the description of the issue #1294 for more info.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474872812", "createdAt": "2020-08-21T18:59:05Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2156,6 +2160,21 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       LOG.debug(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n \n+      // initiate monitor\n+      try {\n+        if (_monitorKey != null && !_monitorKey.isEmpty() && _monitorType != null && !_monitorType\n+            .isEmpty()) {\n+          _monitor =\n+              new ZkClientMonitor(_monitorType, _monitorKey, _monitorInstanceName, _monitorRootPathOnly,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODYyNw=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTEyOTY2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoxMzozNFrOHGwBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1MzozNFrOHTJB3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA==", "bodyText": "Let's give it a more complete change.\n\nThe constructor will not require _eventThread anymore, it will be null anyway.\nsetAndInitZkEventThreadMonitor shall create the event thread monitor and call updateAttributesInfo() to update the attribute. Re-register the whole monitor is wrong, you will end up either having 2 mbeans or the 2nd register will fail.", "url": "https://github.com/apache/helix/pull/1295#discussion_r476840330", "createdAt": "2020-08-25T23:13:34Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MjkwNA==", "bodyText": "Synced with Kai offline, the 2nd point is fine since the register will be postpone to the connect. Given this, I would prefer making the registration logic closer to the monitor construct logic.\nSo shall we pass the ZkClientMonitor into connect() to explicitly update it in the call. Then register the monitor after the connect(), but still in the constructor.\npseudo code:\n_monitor = new ZkClientMonitor();\n// Comment that we need to update the _monitor in the event lock to avoid missing any records about event thread.\nconnect(connectTimeout, this, _monitor);\n_monitor.register()", "url": "https://github.com/apache/helix/pull/1295#discussion_r476862904", "createdAt": "2020-08-25T23:34:57Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxMDYzNw==", "bodyText": "This does not seem to work.\nFirst  it is not necessary to pass _monitor into connect(connectTimeout, this, _monitor); as _monitor is instance variable and connect is method. Connect can see it anyway.\nSecond, the gist to avoid all these racing issue is that we must make sure _monitor is fully constructed and also register-ed before ZkClient either get callback from ZK.", "url": "https://github.com/apache/helix/pull/1295#discussion_r476910637", "createdAt": "2020-08-26T00:27:14Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNzU5NA==", "bodyText": "This is to make the code cleaner. It is a good practice for module the code that the private method does not refer to the class private fields directly.\n\n\nThe thread monitor is the only one impacted, so if you do the set there, there should be no problem. Mix everything together is chaotic. Ideally, I would suggest splitting the ZK client monitor and ZK thread monitor.", "url": "https://github.com/apache/helix/pull/1295#discussion_r483227594", "createdAt": "2020-09-03T20:12:47Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxOTE0OA==", "bodyText": "Maybe I mis-understand what do you mean. Can you draw the code a little bit more specific?\nfrom the above pseduo code\n_monitor = new ZkClientMonitor();\n// Comment that we need to update the _monitor in the event lock to avoid missing any records about event thread.\nconnect(connectTimeout, this, _monitor);\n_monitor.register()\n\nAssertion: construction of ZkMonitor and ZkThreadMonitor and their registration must be done before the first doAsyncSync() is sent out, or you have race condition of missing some read/write.\nIn the above pseudo code, _monitor.register() is too late, the first sycn() is already out and it may complete earlier than this register().  This violate the above assertion. You may miss one increase of read counter.\nI may not fully understand your idea. Let us be more specific. As long as it works, I can change it to that way.", "url": "https://github.com/apache/helix/pull/1295#discussion_r483319148", "createdAt": "2020-09-04T00:19:39Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwODg4NA==", "bodyText": "The registration does not need to happen prior. Even not registered, the metric can record data.", "url": "https://github.com/apache/helix/pull/1295#discussion_r486708884", "createdAt": "2020-09-11T00:43:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzMjkyNA==", "bodyText": "I test it. It seems not true. We need to register the bean in connect() under the lock. Otherwise, depends on timing, you may lose one read.", "url": "https://github.com/apache/helix/pull/1295#discussion_r489832924", "createdAt": "2020-09-17T00:53:34Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjI0MjQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDozMzo1OVrOHG7exw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0MDowM1rOHKIdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODAzOQ==", "bodyText": "What's the reason to catch exception and print? I guess you want to have the stacktrace for debugging. But please be noted that if exception is thrown, this change will return a zkServer that's not started. I don't think this is what you expected, is it?\nI guest keeping it to throw exception so the test would not proceed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r477028039", "createdAt": "2020-08-26T04:33:59Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestBase.java", "diffHunk": "@@ -143,7 +143,11 @@ protected ZkServer startZkServer(final String zkAddress) {\n     int port = Integer.parseInt(zkAddress.substring(zkAddress.lastIndexOf(':') + 1));\n     ZkServer zkServer = new ZkServer(dataDir, logDir, defaultNameSpace, port);\n     System.out.println(\"Starting ZK server at \" + zkAddress);\n-    zkServer.start();\n+    try {\n+      zkServer.start();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MDY2OA==", "bodyText": "You are right. Let me re-throw the exception to prevent the test from proceeding.\nWithout printing it out here, the problem is that Intellij will not print out the exception here. Thus, it seems to be a mystery as why all the test is skipped.", "url": "https://github.com/apache/helix/pull/1295#discussion_r477480668", "createdAt": "2020-08-26T17:49:52Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestBase.java", "diffHunk": "@@ -143,7 +143,11 @@ protected ZkServer startZkServer(final String zkAddress) {\n     int port = Integer.parseInt(zkAddress.substring(zkAddress.lastIndexOf(':') + 1));\n     ZkServer zkServer = new ZkServer(dataDir, logDir, defaultNameSpace, port);\n     System.out.println(\"Starting ZK server at \" + zkAddress);\n-    zkServer.start();\n+    try {\n+      zkServer.start();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODAzOQ=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NjQ2Ng==", "bodyText": "Revert this part.", "url": "https://github.com/apache/helix/pull/1295#discussion_r480386466", "createdAt": "2020-08-31T20:40:03Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestBase.java", "diffHunk": "@@ -143,7 +143,11 @@ protected ZkServer startZkServer(final String zkAddress) {\n     int port = Integer.parseInt(zkAddress.substring(zkAddress.lastIndexOf(':') + 1));\n     ZkServer zkServer = new ZkServer(dataDir, logDir, defaultNameSpace, port);\n     System.out.println(\"Starting ZK server at \" + zkAddress);\n-    zkServer.start();\n+    try {\n+      zkServer.start();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODAzOQ=="}, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDM5OTQ5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NToxNlrOHLJn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjowNjo0M1rOHLJ6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NDA3Ng==", "bodyText": "Nit: If we need to check exits(), we should assert true? I actually don't think it is necessary as below already checks. But if really check, assert true is needed.\nif (!_zkClient.exists(TEST_ROOT)) {\n       _zkClient.createPersistent(TEST_ROOT, true);\n}", "url": "https://github.com/apache/helix/pull/1295#discussion_r481454076", "createdAt": "2020-09-01T21:55:16Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,24 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    zkClient.exists(TEST_ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODc4Mg==", "bodyText": "This is not to assert exists() return true. This is to make sure the next Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2); would be true. Namely this trigger a read and get recorded by bean.\nThis is not functionality added by me. It is basically line 298 in previous version.", "url": "https://github.com/apache/helix/pull/1295#discussion_r481458782", "createdAt": "2020-09-01T22:06:43Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,24 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    zkClient.exists(TEST_ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NDA3Ng=="}, "originalCommit": {"oid": "2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDg4NDQxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1NToxOFrOHTJGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MTowNlrOHT7-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNDAxOA==", "bodyText": "Note, It seems crucial to register here. Or depending on timing, we may lose read of the first sync().", "url": "https://github.com/apache/helix/pull/1295#discussion_r489834018", "createdAt": "2020-09-17T00:55:18Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2152,6 +2150,19 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       IZkConnection zkConnection = getConnection();\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n+\n+      if (_monitor != null) {\n+        _monitor.setAndInitZkEventThreadMonitor(_eventThread);\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTExMg==", "bodyText": "I debugged with your code, so the ZkClientPathMonitor objects are currently only created in the register() method. So that's the reason we lose the count if register later.\nThere is a simple fix, we can instantiate all the ZkClientPathMonitors in the ZkClientMonitor constructor. Like this,\nfor (ZkClientPathMonitor.PredefinedPath path :\nZkClientPathMonitor.PredefinedPath.values()) {\n      // If monitor root path only, check if the current path is Root.\n      // Otherwise, add monitors for every path.\n      if (!_monitorRootOnly || path.equals(ZkClientPathMonitor.PredefinedPath.Root)) {\n        _zkClientPathMonitorMap.put(path,\n            new ZkClientPathMonitor(path, _monitorType, _monitorKey, _monitorInstanceName));\n      }\n    }\n\nThen in the register(), just register all the ZkClientPathMonitor objects that are in the _zkClientPathMonitorMap.\nThe good thing is that it seems to be the right change that we should do no matter we want to fix the test or not.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490635112", "createdAt": "2020-09-18T00:35:16Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2152,6 +2150,19 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       IZkConnection zkConnection = getConnection();\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n+\n+      if (_monitor != null) {\n+        _monitor.setAndInitZkEventThreadMonitor(_eventThread);\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNDAxOA=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzY3MQ==", "bodyText": "implemeted this way", "url": "https://github.com/apache/helix/pull/1295#discussion_r490667671", "createdAt": "2020-09-18T02:41:06Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2152,6 +2150,19 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       IZkConnection zkConnection = getConnection();\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n+\n+      if (_monitor != null) {\n+        _monitor.setAndInitZkEventThreadMonitor(_eventThread);\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNDAxOA=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk0MTcyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDozNzoyMFrOHT6BiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMToxODo1MlrOHT6qjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw==", "bodyText": "nit, throw Exception if the _zkEventThreadMetric has already been set or the monitor object has already been registered. Otherwise, we may see an unexpected monitor value in the final result.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490635657", "createdAt": "2020-09-18T00:37:20Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjM3MA==", "bodyText": "BTW, you can check for registration status by checking _objectName with a synchronized lock on the monitor object.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490636370", "createdAt": "2020-09-18T00:40:11Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MTI3Mw==", "bodyText": "What type of exception would be good here?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490641273", "createdAt": "2020-09-18T00:59:28Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0NjE1OQ==", "bodyText": "Let me put a return value as false and let the calling layer log error", "url": "https://github.com/apache/helix/pull/1295#discussion_r490646159", "createdAt": "2020-09-18T01:18:52Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk0OTg0OnYy", "diffSide": "LEFT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0MjowMVrOHT6GOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MDozN1rOHT7-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjg1OQ==", "bodyText": "Is this value still validatable?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490636859", "createdAt": "2020-09-18T00:42:01Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzUyNg==", "bodyText": "no, not realiably I guess.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490667526", "createdAt": "2020-09-18T02:40:37Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjg1OQ=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk1NDcyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0NDozM1rOHT6I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMToxMDowNFrOHT6iAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzU0Nw==", "bodyText": "no need anymore?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490637547", "createdAt": "2020-09-18T00:44:33Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0Mzk2OA==", "bodyText": "fix.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490643968", "createdAt": "2020-09-18T01:10:04Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzU0Nw=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk1NTMzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0NDo1MlrOHT6JQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMToxMDoxN1rOHT6iMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzYzNA==", "bodyText": "With the latest proposal, this one can be removed too.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490637634", "createdAt": "2020-09-18T00:44:52Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.management.JMException;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0NDAxOA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490644018", "createdAt": "2020-09-18T01:10:17Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.management.JMException;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzYzNA=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk1OTk2OnYy", "diffSide": "LEFT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0NzoyMlrOHT6L9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MDowM1rOHT79dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODMyNQ==", "bodyText": "Actually, can we wait here before \"zkClient.exists(TEST_ROOT);\" for ReadCounter == 1. Then wait here for 2? So we ensure exist call will increase one counter too.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638325", "createdAt": "2020-09-18T00:47:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzM4Mw==", "bodyText": "right.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490667383", "createdAt": "2020-09-18T02:40:03Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODMyNQ=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk2MTI4OnYy", "diffSide": "LEFT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0ODowNlrOHT6Msg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0ODowNlrOHT6Msg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODUxNA==", "bodyText": "If you wait for the counter in the previous line, then here we can still check for\nAssert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);\nAssert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\") >= 0);\t    \n\nright?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638514", "createdAt": "2020-09-18T00:48:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk2MjMyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0ODo0NFrOHT6NSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjozOToyNVrOHT78zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODY2Ng==", "bodyText": "I propose that we record the ReadTotalLatencyCounter that we get before exists() call. Then we check if this counter is equal to the previous value or is increased here.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638666", "createdAt": "2020-09-18T00:48:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzIxMw==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490667213", "createdAt": "2020-09-18T02:39:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODY2Ng=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk2NTM4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo1MDoxN1rOHT6O-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjozOToxOVrOHT78uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzOTA5OQ==", "bodyText": "If we checked \"ReadLatencyGauge.Max\" before, then this one can be ignored.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490639099", "createdAt": "2020-09-18T00:50:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\") >= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzE5Mg==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490667192", "createdAt": "2020-09-18T02:39:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\") >= 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzOTA5OQ=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTY1Nzk5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowMToxN1rOHVnRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTozMTowOFrOHVnrSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNTQ3OQ==", "bodyText": "_logger exists in the super class. There is no need to add a new one here.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492425479", "createdAt": "2020-09-22T01:01:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -38,9 +38,13 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n import org.apache.helix.monitoring.mbeans.exception.MetricException;\n import org.apache.helix.zookeeper.zkclient.ZkEventThread;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class ZkClientMonitor extends DynamicMBeanProvider {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkClientMonitor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMjIwMg==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492432202", "createdAt": "2020-09-22T01:31:08Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -38,9 +38,13 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n import org.apache.helix.monitoring.mbeans.exception.MetricException;\n import org.apache.helix.zookeeper.zkclient.ZkEventThread;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class ZkClientMonitor extends DynamicMBeanProvider {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkClientMonitor.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNTQ3OQ=="}, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTY2MTY1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowMzo0OFrOHVnTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTo1MDo1NFrOHVn7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjAzMQ==", "bodyText": "nit, it could be simpler to be:\n_zkClientPathMonitorMap.values().stream().foreach(...);", "url": "https://github.com/apache/helix/pull/1295#discussion_r492426031", "createdAt": "2020-09-22T01:03:48Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -109,12 +135,8 @@ public DynamicMBeanProvider register() throws JMException {\n     doRegister(attributeList, MBEAN_DESCRIPTION,\n         getObjectName(_monitorType, _monitorKey, _monitorInstanceName));\n     for (ZkClientPathMonitor.PredefinedPath path : ZkClientPathMonitor.PredefinedPath.values()) {\n-      // If monitor root path only, check if the current path is Root.\n-      // Otherwise, add monitors for every path.\n-      if (!_monitorRootOnly || path.equals(ZkClientPathMonitor.PredefinedPath.Root)) {\n-        _zkClientPathMonitorMap.put(path,\n-            new ZkClientPathMonitor(path, _monitorType, _monitorKey, _monitorInstanceName)\n-                .register());\n+      if (_zkClientPathMonitorMap.get(path) != null)  {\n+        _zkClientPathMonitorMap.get(path).register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNjM3Mg==", "bodyText": "There are many ways to write a loop and now we have stream.\nStill, I will just change it anyway.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492436372", "createdAt": "2020-09-22T01:50:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -109,12 +135,8 @@ public DynamicMBeanProvider register() throws JMException {\n     doRegister(attributeList, MBEAN_DESCRIPTION,\n         getObjectName(_monitorType, _monitorKey, _monitorInstanceName));\n     for (ZkClientPathMonitor.PredefinedPath path : ZkClientPathMonitor.PredefinedPath.values()) {\n-      // If monitor root path only, check if the current path is Root.\n-      // Otherwise, add monitors for every path.\n-      if (!_monitorRootOnly || path.equals(ZkClientPathMonitor.PredefinedPath.Root)) {\n-        _zkClientPathMonitorMap.put(path,\n-            new ZkClientPathMonitor(path, _monitorType, _monitorKey, _monitorInstanceName)\n-                .register());\n+      if (_zkClientPathMonitorMap.get(path) != null)  {\n+        _zkClientPathMonitorMap.get(path).register();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjAzMQ=="}, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTY2MjE1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowNDowNlrOHVnTeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTozMTo1OVrOHVnr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjEwNQ==", "bodyText": "Unnecessary?", "url": "https://github.com/apache/helix/pull/1295#discussion_r492426105", "createdAt": "2020-09-22T01:04:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -32,6 +32,9 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.DynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.HistogramDynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMjM2MA==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492432360", "createdAt": "2020-09-22T01:31:59Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -32,6 +32,9 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.DynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.HistogramDynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjEwNQ=="}, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjAwMjgwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo1ODoyMVrOHVqPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTowNToyNlrOHWRaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDI3OA==", "bodyText": "Unnecessary.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492474278", "createdAt": "2020-09-22T04:58:21Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -34,6 +34,7 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n \n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExNjA3NQ==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r493116075", "createdAt": "2020-09-23T01:05:26Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -34,6 +34,7 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n \n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDI3OA=="}, "originalCommit": {"oid": "df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTk3NjAzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1ODoyMlrOHXJv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1ODoyMlrOHXJv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzOTAwOA==", "bodyText": "nit, but could you please revert this \"touch\" change?", "url": "https://github.com/apache/helix/pull/1295#discussion_r494039008", "createdAt": "2020-09-24T04:58:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,7 +96,7 @@ public ZkClientMonitor(String monitorType, String monitorKey, String monitorInst\n \n     for (ZkClientPathMonitor.PredefinedPath path : ZkClientPathMonitor.PredefinedPath.values()) {\n       // If monitor root path only, check if the current path is Root.\n-      // Otherwise, add monitors for every path.\n+      // Otherwise, add monitors for every  path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6299574b08c97ca30cf282cdad331de750408dd1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA3MzY4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozMTo1NVrOHbct_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNDowM1rOHbdRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDEyNA==", "bodyText": "Please remove the extra space before merge.", "url": "https://github.com/apache/helix/pull/1295#discussion_r498544124", "createdAt": "2020-10-01T22:31:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java", "diffHunk": "@@ -215,7 +215,7 @@ public void testANYtypeThrottle() throws InterruptedException {\n     DelayedTransition.setDelay(20);\n     DelayedTransition.enableThrottleRecord();\n \n-    // start another 3 nodes\n+    // start another 3 nodes ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1MzE2Mg==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r498553162", "createdAt": "2020-10-01T23:04:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java", "diffHunk": "@@ -215,7 +215,7 @@ public void testANYtypeThrottle() throws InterruptedException {\n     DelayedTransition.setDelay(20);\n     DelayedTransition.enableThrottleRecord();\n \n-    // start another 3 nodes\n+    // start another 3 nodes ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDEyNA=="}, "originalCommit": {"oid": "9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 900, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}