{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTY0MzMx", "number": 899, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NDo1NlrODozlVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoyMDo1MlrODpwp6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE0NzczOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NDo1NlrOF3lUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo1MDo1NVrOF3nfpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzMzOQ==", "bodyText": "nit, this is more a question, I think you have thought about this. Shall we call it GenericHelixZkApiBuilder?", "url": "https://github.com/apache/helix/pull/899#discussion_r393827339", "createdAt": "2020-03-17T16:54:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -932,73 +933,13 @@ public void close() {\n     }\n   }\n \n-  public static class Builder {\n-    private String _zkAddress;\n-    private RealmAwareZkClient.RealmMode _realmMode;\n-    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n-    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n-\n+  public static class Builder extends GenericZkHelixApiBuilder<Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NTIyNg==", "bodyText": "I am not so particular about the order of Helix and Zk. If you think HelixZk is more appropriate, we could do that. But note that there are existing APIs with the \"ZkHelix\" prefixes: ZkBaseDataAccessor, ZkHelixDataAccessor, ZkHeilxManager, etc.", "url": "https://github.com/apache/helix/pull/899#discussion_r393855226", "createdAt": "2020-03-17T17:38:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -932,73 +933,13 @@ public void close() {\n     }\n   }\n \n-  public static class Builder {\n-    private String _zkAddress;\n-    private RealmAwareZkClient.RealmMode _realmMode;\n-    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n-    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n-\n+  public static class Builder extends GenericZkHelixApiBuilder<Builder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzMzOQ=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2MzA3Nw==", "bodyText": "Discussed with @jiajunwang offline. We are keeping ZkHelix as is.", "url": "https://github.com/apache/helix/pull/899#discussion_r393863077", "createdAt": "2020-03-17T17:50:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -932,73 +933,13 @@ public void close() {\n     }\n   }\n \n-  public static class Builder {\n-    private String _zkAddress;\n-    private RealmAwareZkClient.RealmMode _realmMode;\n-    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n-    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n-\n+  public static class Builder extends GenericZkHelixApiBuilder<Builder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzMzOQ=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI0OTQxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMTozNFrOF3mXDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMTozNFrOF3mXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDQ5Mw==", "bodyText": "The following logic looks generic enough to put in GenericZkHelixApiBuilder. And this ZkBaseDataAccessor constructor can directly get a zkclient instance as the input.", "url": "https://github.com/apache/helix/pull/899#discussion_r393844493", "createdAt": "2020-03-17T17:21:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI2MDk1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyNDo1MVrOF3me0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDo1MzoyNlrOF4gFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA==", "bodyText": "Following the previous comment, I can see this zkClientType is an exception which is not common for all the GenericZkHelixApiBuilder child classes' logic. In this case, we can let the ZkBaseDataAccessor builder extends my proposed GenericZkHelixApiBuilder method which creates a ZkClient, and in this extended method, we read and apply this _zkClientType.", "url": "https://github.com/apache/helix/pull/899#discussion_r393846480", "createdAt": "2020-03-17T17:24:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzMxNw==", "bodyText": "Or, if there are more than one builders require zkClientType, we can have another generic builder which includes the zkClientType logic and let it to extend GenericZkHelixApiBuilder.", "url": "https://github.com/apache/helix/pull/899#discussion_r393847317", "createdAt": "2020-03-17T17:26:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MTI4Ng==", "bodyText": "So as for the logic that creates which ZkClient to use -I've actually considered an option to include it in the builder, but I think since this is a construction logic for the API, I've explicitly decided to leave it in the constructor\nMy philosophy is that construction logic (\"business logic\" for the data accessors) should be left in the constructor, and builder should only set the parameters and validate.\nBut I see some duplicate logic in ZkBaseDataAccessor and ZkCacheBaseDataAccessor -\nSo I can actually abstract that logic out into ZkBaseDataAccessor.createZkClient(), and make it a static method that can be used in both accessors. That way, 1) we still keep the construction logic in the accessors 2) Builders have a clean separation and only contain parameter setters and validation logic, and 3) we reduce code duplication.", "url": "https://github.com/apache/helix/pull/899#discussion_r393881286", "createdAt": "2020-03-17T18:20:39Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4MjA5MQ==", "bodyText": "Just to summarize:\nThis is the construction logic that only pertains to ZkBaseDataAccessor/ZkCacheBaseDataAccessor\nYour feedback was that this is duplicated in both ZkBaseDataAccessor and ZkCacheBaseDataAccessor\nI agree with your observation\nNow we have a few options in terms of how to refactor this logic\nMake it a reusable method that pertains to data accessors\n\nPut this in the Builder\n\nHere, between 1 and 2, my preference is 1, because this seems like business logic that belongs to the data accessor, not the builder.\nWhat do you think?", "url": "https://github.com/apache/helix/pull/899#discussion_r393882091", "createdAt": "2020-03-17T18:22:05Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MDgyMg==", "bodyText": "I would prefer 2. Once a class is designed with a builder, the builder should contain most of the complicated building logic. IMHO, including which client to use. Then the real private constructor of the Accessor just takes whatever client it is given. Although both ways avoid duplicate code, method 2 encapsulates the logic more closely.\nActually, it is an option that you put this logic into the generic builder. For the other accessors, this type can be fixed in the implemented builder class.", "url": "https://github.com/apache/helix/pull/899#discussion_r394670822", "createdAt": "2020-03-18T22:16:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MDI2Mg==", "bodyText": "I value your opinion and it also makes sense. For now, I can move all construction logic to the builders. I have updated the PR accordingly.", "url": "https://github.com/apache/helix/pull/899#discussion_r394790262", "createdAt": "2020-03-19T04:53:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -142,22 +142,22 @@ public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n   }\n \n   private ZkBaseDataAccessor(Builder<T> builder) {\n-    switch (builder.realmMode) {\n+    switch (builder.getRealmMode()) {\n       case MULTI_REALM:\n         try {\n-          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+          if (builder._zkClientType == ZkClientType.DEDICATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NjQ4MA=="}, "originalCommit": {"oid": "988e67768cc04ca8853cb76815aa2f926f97072f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI4OTkzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoxMjoyMFrOF4YsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDo1Mzo1NFrOF4gGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTA3MQ==", "bodyText": "Isn't this switch block identical to the ones in ZKHelixAdmin and ClusterSetup? IMO, let the builder have a method for creating a ZkClient is simpler and easier to maintain.", "url": "https://github.com/apache/helix/pull/899#discussion_r394669071", "createdAt": "2020-03-18T22:12:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -87,11 +88,11 @@\n    * @param builder\n    */\n   private ConfigAccessor(Builder builder) {\n-    switch (builder._realmMode) {\n+    switch (builder.getRealmMode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fb4ca71771eeff1776eb5fd4244af089c20a47"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MDQwMQ==", "bodyText": "Moved all construction logic to the abstract builder, and refactored the code out of these Java API classes.", "url": "https://github.com/apache/helix/pull/899#discussion_r394790401", "createdAt": "2020-03-19T04:53:54Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -87,11 +88,11 @@\n    * @param builder\n    */\n   private ConfigAccessor(Builder builder) {\n-    switch (builder._realmMode) {\n+    switch (builder.getRealmMode()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTA3MQ=="}, "originalCommit": {"oid": "44fb4ca71771eeff1776eb5fd4244af089c20a47"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQyODEyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1Nzo1MFrOF5BzHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxODo0NVrOF5CUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MjYyMw==", "bodyText": "Is it intended to be done with a different name in the parent class? Note in the child builder it is called createRealmAwareZkClientFromBuilder().\nOne of the reasons that I want to use the same name is avoiding the caller to be confused when they have more than one method to call when they try to get a ZkClient instance from the builder.", "url": "https://github.com/apache/helix/pull/899#discussion_r395342623", "createdAt": "2020-03-19T21:57:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {\n+  protected String _zkAddress;\n+  protected RealmAwareZkClient.RealmMode _realmMode;\n+  protected RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+  protected RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+  public B setZkAddress(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    return self();\n+  }\n+\n+  public B setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+    _realmMode = realmMode;\n+    return self();\n+  }\n+\n+  public B setRealmAwareZkConnectionConfig(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+    _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+    return self();\n+  }\n+\n+  public RealmAwareZkClient.RealmAwareZkConnectionConfig getRealmAwareZkConnectionConfig() {\n+    return _realmAwareZkConnectionConfig;\n+  }\n+\n+  public B setRealmAwareZkClientConfig(\n+      RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+    _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+    return self();\n+  }\n+\n+  /**\n+   * Validates the given Builder parameters using a generic validation logic.\n+   */\n+  protected void validate() {\n+    // Resolve RealmMode based on whether ZK address has been set\n+    boolean isZkAddressSet = _zkAddress != null && !_zkAddress.isEmpty();\n+    if (_realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+      throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+    }\n+    if (_realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n+      throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n+    }\n+    if (_realmMode == null) {\n+      _realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+          : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+    }\n+\n+    initializeConfigsIfNull();\n+  }\n+\n+  /**\n+   * Initializes Realm-aware ZkConnection and ZkClient configs if they haven't been set.\n+   */\n+  protected void initializeConfigsIfNull() {\n+    // Resolve all default values\n+    if (_realmAwareZkConnectionConfig == null) {\n+      _realmAwareZkConnectionConfig =\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+    }\n+\n+    // For Helix APIs, ZNRecord should be the default data model\n+    if (_realmAwareZkClientConfig == null) {\n+      _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n+          .setZkSerializer(new ZNRecordSerializer());\n+    }\n+  }\n+\n+  /**\n+   * Creates a RealmAwareZkClient based on the parameters set.\n+   * To be used in Helix ZK APIs' constructors: ConfigAccessor, ClusterSetup, ZKHelixAdmin\n+   * @return\n+   */\n+  public RealmAwareZkClient createZkClientFromBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MTA3Ng==", "bodyText": "I think just call it createZkClient() or createRealmAwareZkClient would be good enough.", "url": "https://github.com/apache/helix/pull/899#discussion_r395351076", "createdAt": "2020-03-19T22:18:45Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {\n+  protected String _zkAddress;\n+  protected RealmAwareZkClient.RealmMode _realmMode;\n+  protected RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+  protected RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+  public B setZkAddress(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    return self();\n+  }\n+\n+  public B setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+    _realmMode = realmMode;\n+    return self();\n+  }\n+\n+  public B setRealmAwareZkConnectionConfig(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+    _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+    return self();\n+  }\n+\n+  public RealmAwareZkClient.RealmAwareZkConnectionConfig getRealmAwareZkConnectionConfig() {\n+    return _realmAwareZkConnectionConfig;\n+  }\n+\n+  public B setRealmAwareZkClientConfig(\n+      RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+    _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+    return self();\n+  }\n+\n+  /**\n+   * Validates the given Builder parameters using a generic validation logic.\n+   */\n+  protected void validate() {\n+    // Resolve RealmMode based on whether ZK address has been set\n+    boolean isZkAddressSet = _zkAddress != null && !_zkAddress.isEmpty();\n+    if (_realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+      throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+    }\n+    if (_realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n+      throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n+    }\n+    if (_realmMode == null) {\n+      _realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+          : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+    }\n+\n+    initializeConfigsIfNull();\n+  }\n+\n+  /**\n+   * Initializes Realm-aware ZkConnection and ZkClient configs if they haven't been set.\n+   */\n+  protected void initializeConfigsIfNull() {\n+    // Resolve all default values\n+    if (_realmAwareZkConnectionConfig == null) {\n+      _realmAwareZkConnectionConfig =\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+    }\n+\n+    // For Helix APIs, ZNRecord should be the default data model\n+    if (_realmAwareZkClientConfig == null) {\n+      _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n+          .setZkSerializer(new ZNRecordSerializer());\n+    }\n+  }\n+\n+  /**\n+   * Creates a RealmAwareZkClient based on the parameters set.\n+   * To be used in Helix ZK APIs' constructors: ConfigAccessor, ClusterSetup, ZKHelixAdmin\n+   * @return\n+   */\n+  public RealmAwareZkClient createZkClientFromBuilder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MjYyMw=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQzNDg2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMDoyMlrOF5B3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozNDo0NFrOF5Ezsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzY5NQ==", "bodyText": "I would prefer to leverage builder here as well. So we can merge the logic of buildRealmAwareZkClientWithDefaultConfigs into the builder.\nNot sure if there are any conflicts. If there are, I don't have a strong preference that we have to do this change.", "url": "https://github.com/apache/helix/pull/899#discussion_r395343695", "createdAt": "2020-03-19T22:00:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -260,10 +217,9 @@ public ZkBaseDataAccessor(String zkAddress, ZkClientType zkClientType) {\n   @Deprecated\n   public ZkBaseDataAccessor(String zkAddress, ZkSerializer zkSerializer,\n       ZkClientType zkClientType) {\n-    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n-        new RealmAwareZkClient.RealmAwareZkClientConfig().setZkSerializer(zkSerializer);\n-\n-    _zkClient = buildRealmAwareZkClient(clientConfig, zkAddress, zkClientType);\n+    _zkClient = buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTkyMg==", "bodyText": "Discussed offline. This buildRealmAwareZkClientWithDefaultConfigs logic actually belongs to an existing, old construction logic, so this shouldn't go into the Builder.", "url": "https://github.com/apache/helix/pull/899#discussion_r395391922", "createdAt": "2020-03-20T00:34:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -260,10 +217,9 @@ public ZkBaseDataAccessor(String zkAddress, ZkClientType zkClientType) {\n   @Deprecated\n   public ZkBaseDataAccessor(String zkAddress, ZkSerializer zkSerializer,\n       ZkClientType zkClientType) {\n-    RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n-        new RealmAwareZkClient.RealmAwareZkClientConfig().setZkSerializer(zkSerializer);\n-\n-    _zkClient = buildRealmAwareZkClient(clientConfig, zkAddress, zkClientType);\n+    _zkClient = buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzY5NQ=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQzNjg2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMTowM1rOF5B4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MFrOF5eGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDAwMA==", "bodyText": "Not sure if we can merge it to the builder logic? If not possible for now, let's have a TODO here.", "url": "https://github.com/apache/helix/pull/899#discussion_r395344000", "createdAt": "2020-03-19T22:01:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1390,65 +1311,23 @@ public Builder() {\n       validate();\n       return new ZkBaseDataAccessor<>(this);\n     }\n-\n-    /*\n-     * Validates the given parameters before building an instance of ZkBaseDataAccessor.\n-     */\n-    private void validate() {\n-      // Resolve RealmMode based on other parameters\n-      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n-      boolean isZkClientTypeSet = zkClientType != null;\n-\n-      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n-      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n-        throw new HelixException(\"ZkClientType cannot be set on multi-realm mode!\");\n-      }\n-      // If ZkClientType is not set and realmMode is single-realm, default to SHARED\n-      if (!isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM) {\n-        zkClientType = ZkClientType.SHARED;\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n-        throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n-        throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM\n-          && zkClientType == ZkClientType.FEDERATED) {\n-        throw new HelixException(\"FederatedZkClient cannot be set on single-realm mode!\");\n-      }\n-\n-      if (realmMode == null) {\n-        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n-            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n-      }\n-\n-      // Resolve RealmAwareZkClientConfig\n-      if (realmAwareZkClientConfig == null) {\n-        realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n-            .setZkSerializer(new ZNRecordSerializer());\n-      }\n-\n-      // Resolve RealmAwareZkConnectionConfig\n-      if (realmAwareZkConnectionConfig == null) {\n-        // If not set, create a default one\n-        realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-    }\n   }\n \n-  /*\n-   * This is used for constructors that do not take a Builder in as a parameter because of\n-   * keeping backward-compatibility.\n+  /**\n+   * This method is used for constructors that are not based on the Builder for\n+   * backward-compatibility.\n+   * It checks if there is a System Property config set for Multi-ZK mode and determines if a\n+   * FederatedZkClient should be created.\n+   * @param clientConfig default RealmAwareZkClientConfig with ZK serializer set\n+   * @param zkAddress\n+   * @param zkClientType\n+   * @return\n    */\n-  private RealmAwareZkClient buildRealmAwareZkClient(\n+  static RealmAwareZkClient buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MjEzNg==", "bodyText": "I deprecated this method. this is old construction logic, so let's not try to mix it with our new construction logic in the builder :)", "url": "https://github.com/apache/helix/pull/899#discussion_r395392136", "createdAt": "2020-03-20T00:35:40Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1390,65 +1311,23 @@ public Builder() {\n       validate();\n       return new ZkBaseDataAccessor<>(this);\n     }\n-\n-    /*\n-     * Validates the given parameters before building an instance of ZkBaseDataAccessor.\n-     */\n-    private void validate() {\n-      // Resolve RealmMode based on other parameters\n-      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n-      boolean isZkClientTypeSet = zkClientType != null;\n-\n-      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n-      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n-        throw new HelixException(\"ZkClientType cannot be set on multi-realm mode!\");\n-      }\n-      // If ZkClientType is not set and realmMode is single-realm, default to SHARED\n-      if (!isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM) {\n-        zkClientType = ZkClientType.SHARED;\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n-        throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n-        throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM\n-          && zkClientType == ZkClientType.FEDERATED) {\n-        throw new HelixException(\"FederatedZkClient cannot be set on single-realm mode!\");\n-      }\n-\n-      if (realmMode == null) {\n-        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n-            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n-      }\n-\n-      // Resolve RealmAwareZkClientConfig\n-      if (realmAwareZkClientConfig == null) {\n-        realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n-            .setZkSerializer(new ZNRecordSerializer());\n-      }\n-\n-      // Resolve RealmAwareZkConnectionConfig\n-      if (realmAwareZkConnectionConfig == null) {\n-        // If not set, create a default one\n-        realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-    }\n   }\n \n-  /*\n-   * This is used for constructors that do not take a Builder in as a parameter because of\n-   * keeping backward-compatibility.\n+  /**\n+   * This method is used for constructors that are not based on the Builder for\n+   * backward-compatibility.\n+   * It checks if there is a System Property config set for Multi-ZK mode and determines if a\n+   * FederatedZkClient should be created.\n+   * @param clientConfig default RealmAwareZkClientConfig with ZK serializer set\n+   * @param zkAddress\n+   * @param zkClientType\n+   * @return\n    */\n-  private RealmAwareZkClient buildRealmAwareZkClient(\n+  static RealmAwareZkClient buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDAwMA=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MjYwNg==", "bodyText": "There is no need to deprecate, we can directly remove it. I checked, it is not in the master branch yet.\nSame for the other usages. I think we should just remove it instead of introducing a new but deprecated method to the master branch.\nIf you are worried about the backward compatibility, then we can just leave the very old code that creates either DEDICATED or SHARED client. Those constructors are deprecated anyway.\nWe don't need to change the logic of the deprecated methods to return RealmAware ZkClient. As you said, this will just mix the new logic with the old/deprecated ones.", "url": "https://github.com/apache/helix/pull/899#discussion_r395452606", "createdAt": "2020-03-20T06:12:29Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1390,65 +1311,23 @@ public Builder() {\n       validate();\n       return new ZkBaseDataAccessor<>(this);\n     }\n-\n-    /*\n-     * Validates the given parameters before building an instance of ZkBaseDataAccessor.\n-     */\n-    private void validate() {\n-      // Resolve RealmMode based on other parameters\n-      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n-      boolean isZkClientTypeSet = zkClientType != null;\n-\n-      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n-      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n-        throw new HelixException(\"ZkClientType cannot be set on multi-realm mode!\");\n-      }\n-      // If ZkClientType is not set and realmMode is single-realm, default to SHARED\n-      if (!isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM) {\n-        zkClientType = ZkClientType.SHARED;\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n-        throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n-        throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM\n-          && zkClientType == ZkClientType.FEDERATED) {\n-        throw new HelixException(\"FederatedZkClient cannot be set on single-realm mode!\");\n-      }\n-\n-      if (realmMode == null) {\n-        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n-            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n-      }\n-\n-      // Resolve RealmAwareZkClientConfig\n-      if (realmAwareZkClientConfig == null) {\n-        realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n-            .setZkSerializer(new ZNRecordSerializer());\n-      }\n-\n-      // Resolve RealmAwareZkConnectionConfig\n-      if (realmAwareZkConnectionConfig == null) {\n-        // If not set, create a default one\n-        realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-    }\n   }\n \n-  /*\n-   * This is used for constructors that do not take a Builder in as a parameter because of\n-   * keeping backward-compatibility.\n+  /**\n+   * This method is used for constructors that are not based on the Builder for\n+   * backward-compatibility.\n+   * It checks if there is a System Property config set for Multi-ZK mode and determines if a\n+   * FederatedZkClient should be created.\n+   * @param clientConfig default RealmAwareZkClientConfig with ZK serializer set\n+   * @param zkAddress\n+   * @param zkClientType\n+   * @return\n    */\n-  private RealmAwareZkClient buildRealmAwareZkClient(\n+  static RealmAwareZkClient buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDAwMA=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM3MA==", "bodyText": "Discussed offline.\nAs for deprecating the new little method stub, I will remove the deprecated annotation, but i think we need to look at it as an improvement we are making to the existing code because this is not newly added logic. we have refactored it to cut down on duplicate code. The method stub is created solely for that purpose.", "url": "https://github.com/apache/helix/pull/899#discussion_r395806370", "createdAt": "2020-03-20T18:02:50Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1390,65 +1311,23 @@ public Builder() {\n       validate();\n       return new ZkBaseDataAccessor<>(this);\n     }\n-\n-    /*\n-     * Validates the given parameters before building an instance of ZkBaseDataAccessor.\n-     */\n-    private void validate() {\n-      // Resolve RealmMode based on other parameters\n-      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n-      boolean isZkClientTypeSet = zkClientType != null;\n-\n-      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n-      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n-        throw new HelixException(\"ZkClientType cannot be set on multi-realm mode!\");\n-      }\n-      // If ZkClientType is not set and realmMode is single-realm, default to SHARED\n-      if (!isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM) {\n-        zkClientType = ZkClientType.SHARED;\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n-        throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n-        throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n-      }\n-\n-      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM\n-          && zkClientType == ZkClientType.FEDERATED) {\n-        throw new HelixException(\"FederatedZkClient cannot be set on single-realm mode!\");\n-      }\n-\n-      if (realmMode == null) {\n-        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n-            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n-      }\n-\n-      // Resolve RealmAwareZkClientConfig\n-      if (realmAwareZkClientConfig == null) {\n-        realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n-            .setZkSerializer(new ZNRecordSerializer());\n-      }\n-\n-      // Resolve RealmAwareZkConnectionConfig\n-      if (realmAwareZkConnectionConfig == null) {\n-        // If not set, create a default one\n-        realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-    }\n   }\n \n-  /*\n-   * This is used for constructors that do not take a Builder in as a parameter because of\n-   * keeping backward-compatibility.\n+  /**\n+   * This method is used for constructors that are not based on the Builder for\n+   * backward-compatibility.\n+   * It checks if there is a System Property config set for Multi-ZK mode and determines if a\n+   * FederatedZkClient should be created.\n+   * @param clientConfig default RealmAwareZkClientConfig with ZK serializer set\n+   * @param zkAddress\n+   * @param zkClientType\n+   * @return\n    */\n-  private RealmAwareZkClient buildRealmAwareZkClient(\n+  static RealmAwareZkClient buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDAwMA=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQzNzc2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMToyM1rOF5B5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMToyM1rOF5B5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDE0Mw==", "bodyText": "Same here.", "url": "https://github.com/apache/helix/pull/899#discussion_r395344143", "createdAt": "2020-03-19T22:01:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -126,41 +117,9 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey,\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n-\n-    // If the multi ZK config is enabled, use multi-realm mode with FederatedZkClient\n-    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n-      try {\n-        RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();\n-        RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n-            new RealmAwareZkClient.RealmAwareZkClientConfig();\n-        clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n-            .setMonitorKey(monitorkey);\n-        // Use a federated zk client\n-        _zkClient = new FederatedZkClient(connectionConfigBuilder.build(), clientConfig);\n-      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n-        // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be\n-        // found\n-        throw new HelixException(\"Failed to create ZkCacheBaseDataAccessor!\", e);\n-      }\n-    } else {\n-      HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-      clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n-          .setMonitorKey(monitorkey);\n-      switch (zkClientType) {\n-        case DEDICATED:\n-          _zkClient = DedicatedZkClientFactory.getInstance()\n-              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n-                  new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n-          break;\n-        case SHARED:\n-        default:\n-          _zkClient = SharedZkClientFactory.getInstance()\n-              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-      }\n-      _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);\n-    }\n-\n+    _zkClient = ZkBaseDataAccessor.buildRealmAwareZkClientWithDefaultConfigs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ1MDc4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNjozMlrOF5CA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozNjo0MlrOF5E1fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjE1OQ==", "bodyText": "The reason we call the path as \"shardingkey\" is to make it more generic. If we assign it to the clusterName, it means we set a strong assumption here that for Helix, the shardingkey == clusterName. Although this assumption is valid, the code is confusing.\nSo shall we add an additional method builder.getClusterName() to avoid confusion? The internal logic is the same. Note that both builder classes are in Helix-core. So we should reduce exposing Realm concept if not necessary.", "url": "https://github.com/apache/helix/pull/899#discussion_r395346159", "createdAt": "2020-03-19T22:06:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -144,23 +145,11 @@ public ZkHelixClusterVerifier(String zkAddr, String clusterName) {\n     _keyBuilder = _accessor.keyBuilder();\n   }\n \n-  protected ZkHelixClusterVerifier(Builder builder) {\n-    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n-      try {\n-        // First, try to create a RealmAwareZkClient that's a DedicatedZkClient\n-        _zkClient = DedicatedZkClientFactory.getInstance()\n-            .buildZkClient(builder._realmAwareZkConnectionConfig,\n-                builder._realmAwareZkClientConfig);\n-      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n-        throw new HelixException(\"ZkHelixClusterVerifier: failed to create ZkClient!\", e);\n-      }\n-    } else {\n-      _zkClient = DedicatedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(builder._zkAddress));\n-    }\n-    _usesExternalZkClient = false;\n+  protected <B extends Builder<B>> ZkHelixClusterVerifier(Builder<B> builder) {\n+    _zkClient = builder.createZkClientFromBuilderForVerifier();\n     _zkClient.setZkSerializer(new ZNRecordSerializer());\n-    _clusterName = builder._realmAwareZkConnectionConfig.getZkRealmShardingKey();\n+    _usesExternalZkClient = false;\n+    _clusterName = builder.getRealmAwareZkConnectionConfig().getZkRealmShardingKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MjM4MA==", "bodyText": "This is actually also on my mind. Thanks for pointing this out - we are on the same page. I will add getClusterName() to avoid confusion.", "url": "https://github.com/apache/helix/pull/899#discussion_r395392380", "createdAt": "2020-03-20T00:36:42Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -144,23 +145,11 @@ public ZkHelixClusterVerifier(String zkAddr, String clusterName) {\n     _keyBuilder = _accessor.keyBuilder();\n   }\n \n-  protected ZkHelixClusterVerifier(Builder builder) {\n-    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n-      try {\n-        // First, try to create a RealmAwareZkClient that's a DedicatedZkClient\n-        _zkClient = DedicatedZkClientFactory.getInstance()\n-            .buildZkClient(builder._realmAwareZkConnectionConfig,\n-                builder._realmAwareZkClientConfig);\n-      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n-        throw new HelixException(\"ZkHelixClusterVerifier: failed to create ZkClient!\", e);\n-      }\n-    } else {\n-      _zkClient = DedicatedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(builder._zkAddress));\n-    }\n-    _usesExternalZkClient = false;\n+  protected <B extends Builder<B>> ZkHelixClusterVerifier(Builder<B> builder) {\n+    _zkClient = builder.createZkClientFromBuilderForVerifier();\n     _zkClient.setZkSerializer(new ZNRecordSerializer());\n-    _clusterName = builder._realmAwareZkConnectionConfig.getZkRealmShardingKey();\n+    _usesExternalZkClient = false;\n+    _clusterName = builder.getRealmAwareZkConnectionConfig().getZkRealmShardingKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjE1OQ=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ1MzI3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/ZkClientType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNzoyNVrOF5CCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDo0MzoxNFrOF5E67g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjUzOA==", "bodyText": "More java doc to specify what's the difference between types, please.", "url": "https://github.com/apache/helix/pull/899#discussion_r395346538", "createdAt": "2020-03-19T22:07:25Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/ZkClientType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apache.helix.zookeeper.api.client;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+public enum ZkClientType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5Mzc3NA==", "bodyText": "Added", "url": "https://github.com/apache/helix/pull/899#discussion_r395393774", "createdAt": "2020-03-20T00:43:14Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/ZkClientType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apache.helix.zookeeper.api.client;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+public enum ZkClientType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjUzOA=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ1ODU2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericBaseDataAccessorBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowOToyN1rOF5CFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowOToyN1rOF5CFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NzM1OA==", "bodyText": "nit, return setZkClientType(Enum.valueOf(ZkClientType.class, zkClientType.name()));", "url": "https://github.com/apache/helix/pull/899#discussion_r395347358", "createdAt": "2020-03-19T22:09:27Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericBaseDataAccessorBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.api.client.ZkClientType;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericBaseDataAccessorBuilder serves as the abstract parent class for Builders used by\n+ * BaseDataAccessor APIs that create ZK connections. By having this class, we promote code-reuse.\n+ * @param <B>\n+ */\n+public class GenericBaseDataAccessorBuilder<B extends GenericBaseDataAccessorBuilder<B>> extends GenericZkHelixApiBuilder<B> {\n+  /** ZK-based BaseDataAccessor-specific parameter **/\n+  private ZkClientType _zkClientType;\n+\n+  /**\n+   * Sets the ZkClientType.\n+   * If this is set to either DEDICATED or SHARED, this accessor will be created on\n+   * single-realm mode.\n+   * If this is set to FEDERATED, multi-realm mode will be used.\n+   * @param zkClientType\n+   * @return\n+   */\n+  public B setZkClientType(ZkBaseDataAccessor.ZkClientType zkClientType) {\n+    _zkClientType = Enum.valueOf(ZkClientType.class, zkClientType.name());\n+    return self();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ2MzIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMTozMVrOF5CItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjowMTo1NlrOF5IZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODE0OQ==", "bodyText": "Shall we include the target class as a template T in addition to B here? So you can define the abstract build() method to make this class more complete.", "url": "https://github.com/apache/helix/pull/899#discussion_r395348149", "createdAt": "2020-03-19T22:11:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTczNg==", "bodyText": "Discussed offline. Doing this has no clear benefit because the return types (Helix APIs) do not have a hierarchical relationship or inheritance relationship. It also doesn't reduce duplicate code. We will keep things as is.", "url": "https://github.com/apache/helix/pull/899#discussion_r395391736", "createdAt": "2020-03-20T00:33:51Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODE0OQ=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDcwMw==", "bodyText": "Just to put some details of what we discussed, the only benefit of adding the build() method to the parent builder class is more complete interface design. But as Hunter mentioned, it is optional. I don't have a strong preference on this change, we will have the build() method for all the non-abstract builders anyway.", "url": "https://github.com/apache/helix/pull/899#discussion_r395450703", "createdAt": "2020-03-20T06:01:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODE0OQ=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ2NDMyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMjowM1rOF5CJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMjowM1rOF5CJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODM0Nw==", "bodyText": "This looks nice : )", "url": "https://github.com/apache/helix/pull/899#discussion_r395348347", "createdAt": "2020-03-19T22:12:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericZkHelixApiBuilder.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.manager.zk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.SharedZkClientFactory;\n+\n+\n+/**\n+ * GenericZkHelixApiBuilder serves as the abstract parent class for Builders used by Helix Java APIs\n+ * that create ZK connections. By having this class, we reduce duplicate code as much as possible.\n+ * @param <B>\n+ */\n+public abstract class GenericZkHelixApiBuilder<B extends GenericZkHelixApiBuilder<B>> {\n+  protected String _zkAddress;\n+  protected RealmAwareZkClient.RealmMode _realmMode;\n+  protected RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+  protected RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+  public B setZkAddress(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    return self();\n+  }\n+\n+  public B setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+    _realmMode = realmMode;\n+    return self();\n+  }\n+\n+  public B setRealmAwareZkConnectionConfig(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+    _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+    return self();\n+  }\n+\n+  public RealmAwareZkClient.RealmAwareZkConnectionConfig getRealmAwareZkConnectionConfig() {\n+    return _realmAwareZkConnectionConfig;\n+  }\n+\n+  public B setRealmAwareZkClientConfig(\n+      RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+    _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+    return self();\n+  }\n+\n+  /**\n+   * Validates the given Builder parameters using a generic validation logic.\n+   */\n+  protected void validate() {\n+    // Resolve RealmMode based on whether ZK address has been set\n+    boolean isZkAddressSet = _zkAddress != null && !_zkAddress.isEmpty();\n+    if (_realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+      throw new HelixException(\"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+    }\n+    if (_realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n+      throw new HelixException(\"ZkAddress cannot be set on multi-realm mode!\");\n+    }\n+    if (_realmMode == null) {\n+      _realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+          : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+    }\n+\n+    initializeConfigsIfNull();\n+  }\n+\n+  /**\n+   * Initializes Realm-aware ZkConnection and ZkClient configs if they haven't been set.\n+   */\n+  protected void initializeConfigsIfNull() {\n+    // Resolve all default values\n+    if (_realmAwareZkConnectionConfig == null) {\n+      _realmAwareZkConnectionConfig =\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+    }\n+\n+    // For Helix APIs, ZNRecord should be the default data model\n+    if (_realmAwareZkClientConfig == null) {\n+      _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig()\n+          .setZkSerializer(new ZNRecordSerializer());\n+    }\n+  }\n+\n+  /**\n+   * Creates a RealmAwareZkClient based on the parameters set.\n+   * To be used in Helix ZK APIs' constructors: ConfigAccessor, ClusterSetup, ZKHelixAdmin\n+   * @return\n+   */\n+  public RealmAwareZkClient createZkClientFromBuilder() {\n+    switch (_realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          return new FederatedZkClient(_realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig.setZkSerializer(new ZNRecordSerializer()));\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+          throw new HelixException(\"Failed to create FederatedZkClient!\", e);\n+        }\n+      case SINGLE_REALM:\n+        // Create a HelixZkClient: Use a SharedZkClient because ClusterSetup does not need to do\n+        // ephemeral operations\n+        return SharedZkClientFactory.getInstance()\n+            .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkAddress),\n+                _realmAwareZkClientConfig.createHelixZkClientConfig()\n+                    .setZkSerializer(new ZNRecordSerializer()));\n+      default:\n+        throw new HelixException(\"Invalid RealmMode given: \" + _realmMode);\n+    }\n+  }\n+\n+  /**\n+   * Returns an instance of a subclass-Builder in order to reduce duplicate code.\n+   * SuppressWarnings is used to rid of IDE warnings.\n+   * @return an instance of a subclass-Builder. E.g.) ConfigAccessor.Builder\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  final B self() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDUwNzkwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyOTozMVrOF5CkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozMTo1NVrOF5ExDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTE0OA==", "bodyText": "I tried to compare this solution with the other method, a private constructor accepts all parameters including the ZkClient.\nPros: less parameter.\nCons: you have to make createZkClient() method public.\nSince the constructor is private and easy to update, will the option B be better? Moreover, many classes have it's defined constructors so you don't need to define a new one.\nIn this way, the builder will be very clean. Basically, the only public methods are setXXX() and build(). All the other methods are not required to be public. What do you think?", "url": "https://github.com/apache/helix/pull/899#discussion_r395355148", "createdAt": "2020-03-19T22:29:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -87,26 +88,7 @@\n    * @param builder\n    */\n   private ConfigAccessor(Builder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTI0NQ==", "bodyText": "In order to not expose createZkClient(), I'll make that have protected access and modify the constructors.", "url": "https://github.com/apache/helix/pull/899#discussion_r395391245", "createdAt": "2020-03-20T00:31:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -87,26 +88,7 @@\n    * @param builder\n    */\n   private ConfigAccessor(Builder builder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTE0OA=="}, "originalCommit": {"oid": "5c12189b59ba442c3ee88fdfadab0a3e38b8f399"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTE0OTE1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxNzoyMVrOF5IkWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowNDozNVrOF5eKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MzUzMA==", "bodyText": "This one shall be deprecated as well. And I would suggest keeping the very original behavior. Only return realmaware client through the new builder method.", "url": "https://github.com/apache/helix/pull/899#discussion_r395453530", "createdAt": "2020-03-20T06:17:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -126,41 +117,9 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNDg4OA==", "bodyText": "I will deprecate this but I do not agree with that we should revert the behavior.", "url": "https://github.com/apache/helix/pull/899#discussion_r395734888", "createdAt": "2020-03-20T16:00:28Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -126,41 +117,9 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MzUzMA=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNzMzMw==", "bodyText": "This is already deprecated..", "url": "https://github.com/apache/helix/pull/899#discussion_r395807333", "createdAt": "2020-03-20T18:04:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -126,41 +117,9 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MzUzMA=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTE1MzcxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoyMDo1MlrOF5InCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOToyNDo1NVrOF5gkWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDIxNw==", "bodyText": "Why not override createZkClient() here?", "url": "https://github.com/apache/helix/pull/899#discussion_r395454217", "createdAt": "2020-03-20T06:20:52Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -384,14 +373,26 @@ protected void validate() {\n                   + _zkAddress + \" RealmAwareZkConnectionConfig: \" + _realmAwareZkConnectionConfig);\n         }\n       }\n+      initializeConfigsIfNull();\n+    }\n \n-      // Resolve all default values\n-      if (_realmAwareZkConnectionConfig == null) {\n-        _realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-      if (_realmAwareZkClientConfig == null) {\n-        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n+    /**\n+     * Creates a RealmAwareZkClient for ZkHelixClusterVerifiers.\n+     * Note that DedicatedZkClient is used whether it's multi-realm or single-realm.\n+     * @return\n+     */\n+    private RealmAwareZkClient createZkClientFromBuilderForVerifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNDIwNw==", "bodyText": "We can do that.", "url": "https://github.com/apache/helix/pull/899#discussion_r395734207", "createdAt": "2020-03-20T15:59:20Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -384,14 +373,26 @@ protected void validate() {\n                   + _zkAddress + \" RealmAwareZkConnectionConfig: \" + _realmAwareZkConnectionConfig);\n         }\n       }\n+      initializeConfigsIfNull();\n+    }\n \n-      // Resolve all default values\n-      if (_realmAwareZkConnectionConfig == null) {\n-        _realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-      if (_realmAwareZkClientConfig == null) {\n-        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n+    /**\n+     * Creates a RealmAwareZkClient for ZkHelixClusterVerifiers.\n+     * Note that DedicatedZkClient is used whether it's multi-realm or single-realm.\n+     * @return\n+     */\n+    private RealmAwareZkClient createZkClientFromBuilderForVerifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDIxNw=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTM2Mw==", "bodyText": "Turns out we don't need to override that here. This createZkClient() is private and has different logic for verifiers. Just to keep it clear that this logic is different from the regular createZkClient, I will keep the method name as is. Again, I'd like to emphasize that there's no extra public method so we are not adding anything to the interface.", "url": "https://github.com/apache/helix/pull/899#discussion_r395809363", "createdAt": "2020-03-20T18:08:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -384,14 +373,26 @@ protected void validate() {\n                   + _zkAddress + \" RealmAwareZkConnectionConfig: \" + _realmAwareZkConnectionConfig);\n         }\n       }\n+      initializeConfigsIfNull();\n+    }\n \n-      // Resolve all default values\n-      if (_realmAwareZkConnectionConfig == null) {\n-        _realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-      if (_realmAwareZkClientConfig == null) {\n-        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n+    /**\n+     * Creates a RealmAwareZkClient for ZkHelixClusterVerifiers.\n+     * Note that DedicatedZkClient is used whether it's multi-realm or single-realm.\n+     * @return\n+     */\n+    private RealmAwareZkClient createZkClientFromBuilderForVerifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDIxNw=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjgwMA==", "bodyText": "This is not quite about the public interface. The ZkClient build behavior of this builder should be this logic, right? So we should override the method here. Unless we do have a use case of this specific builder that requires to call the parent class createZkClient(). Otherwise, it just causes confusing IMO.\nWhat is your concern not doing this?", "url": "https://github.com/apache/helix/pull/899#discussion_r395812800", "createdAt": "2020-03-20T18:15:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -384,14 +373,26 @@ protected void validate() {\n                   + _zkAddress + \" RealmAwareZkConnectionConfig: \" + _realmAwareZkConnectionConfig);\n         }\n       }\n+      initializeConfigsIfNull();\n+    }\n \n-      // Resolve all default values\n-      if (_realmAwareZkConnectionConfig == null) {\n-        _realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-      if (_realmAwareZkClientConfig == null) {\n-        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n+    /**\n+     * Creates a RealmAwareZkClient for ZkHelixClusterVerifiers.\n+     * Note that DedicatedZkClient is used whether it's multi-realm or single-realm.\n+     * @return\n+     */\n+    private RealmAwareZkClient createZkClientFromBuilderForVerifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDIxNw=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0Njc0NA==", "bodyText": "@jiajunwang Because this would cause the constructor to take in a list of parameters defined by its parent builder's createZkClient(). I'd argue that it's not confusing because the method name makes is 100% clear - there really is no ambiguity.\nFor ZkHelixClusterVerifier and its implementations, they, by definition, only operate on single realm mode on a dedicated zk client. As such, that degree of customization that would be required in the parent builder's createZkClient() is not necessary.\nIs it a good idea to have unnecessary parameters in a method just for the sake of overriding a parent method, especially when it could be avoided?\nAgain, this is a stylistic choice, and for the sake of moving this forward, I will make that change to make the method override its parent's method - that way we would be on the same page.", "url": "https://github.com/apache/helix/pull/899#discussion_r395846744", "createdAt": "2020-03-20T19:24:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -384,14 +373,26 @@ protected void validate() {\n                   + _zkAddress + \" RealmAwareZkConnectionConfig: \" + _realmAwareZkConnectionConfig);\n         }\n       }\n+      initializeConfigsIfNull();\n+    }\n \n-      // Resolve all default values\n-      if (_realmAwareZkConnectionConfig == null) {\n-        _realmAwareZkConnectionConfig =\n-            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n-      }\n-      if (_realmAwareZkClientConfig == null) {\n-        _realmAwareZkClientConfig = new RealmAwareZkClient.RealmAwareZkClientConfig();\n+    /**\n+     * Creates a RealmAwareZkClient for ZkHelixClusterVerifiers.\n+     * Note that DedicatedZkClient is used whether it's multi-realm or single-realm.\n+     * @return\n+     */\n+    private RealmAwareZkClient createZkClientFromBuilderForVerifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDIxNw=="}, "originalCommit": {"oid": "4b465ba80457f7ba4d125a86d7432adcc3499cb4"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1395, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}