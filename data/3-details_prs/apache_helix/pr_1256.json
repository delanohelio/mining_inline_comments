{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTExMjc3", "number": 1256, "title": "Do not ignore any map or list field key change in the Change Detector.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1255\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR extends the scope of the non-trimmable elements that are defined in the ResourceChangeDetector. With this change, any key changes in the Map fields or List fields won't be ignored by the change detector. Instead of just fixing the issue that modifying the IS preference list does not trigger automatic rebalance, this change will also help to prevent other potential bugs with the same root cause.\nNote this change might increase the rebalancer running in some circumstances. However, given a very explicit allowlist (or blocklist) in the change detector is very expensive to maintain, the current solution trades off the potential performance impact for simplicity.\nTests\n\n The following tests are written for this issue:\n\nModified the related tests:\n\nTestWagedRebalancer.testRebalanceOnChanges\nTestHelixPropoertyTimmer\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1163, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,626.399 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1163, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:17 h\n[INFO] Finished at: 2020-08-12T00:29:45-07:00\n[INFO] ------------------------------------------------------------------------\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-12T05:07:15Z", "url": "https://github.com/apache/helix/pull/1256", "merged": true, "mergeCommit": {"oid": "096b074c56af7a7ad79dbc780c5a08c04701083a"}, "closed": true, "closedAt": "2020-08-13T18:22:46Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-DKLQgH2gAyNDY2NTExMjc3OjdhNDlmYTNiZTYwYWZiMzVmMTNlZTliN2YwNGQxMTczYjM3ZWUxNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-kJWfgFqTQ2NzAxNzc4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7a49fa3be60afb35f13ee9b7f04d1173b37ee15f", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/7a49fa3be60afb35f13ee9b7f04d1173b37ee15f", "committedDate": "2020-08-12T03:50:13Z", "message": "Do not ignore any map or list field key change in the Change Detector."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjM5NjYw", "url": "https://github.com/apache/helix/pull/1256#pullrequestreview-465639660", "createdAt": "2020-08-12T07:00:57Z", "commit": {"oid": "7a49fa3be60afb35f13ee9b7f04d1173b37ee15f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMDo1N1rOG_UUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMDo1N1rOG_UUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjQ1OQ==", "bodyText": "This is a high-level comment:\nSince this is causing an issue for the admin.rebalance method (which essentially just populates the mapFields in the IdealState), my immediate instinct would be that this change could be contained in IdealStateTrimmer.\nThis way, we contain the scope of changes for IdealStates only - and it should fix the problem we're seeing with resources not being rebalanced. Is there any difficulty with overriding doTrim() in IdealStateTrimmer instead of making the change and applying it generally in HelixPropertyTrimmer?", "url": "https://github.com/apache/helix/pull/1256#discussion_r469046459", "createdAt": "2020-08-12T07:00:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/changedetector/trimmer/HelixPropertyTrimmer.java", "diffHunk": "@@ -57,38 +57,49 @@\n    * @param originalProperty\n    */\n   protected ZNRecord doTrim(T originalProperty) {\n+    ZNRecord originalZNRecord = originalProperty.getRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a49fa3be60afb35f13ee9b7f04d1173b37ee15f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5787fbd81094ec1ecad2c40371af56172993e150", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/5787fbd81094ec1ecad2c40371af56172993e150", "committedDate": "2020-08-12T17:14:34Z", "message": "Add a TODO comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTE3MTk5", "url": "https://github.com/apache/helix/pull/1256#pullrequestreview-466117199", "createdAt": "2020-08-12T17:16:50Z", "commit": {"oid": "7a49fa3be60afb35f13ee9b7f04d1173b37ee15f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxNjo1MFrOG_q6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxNjo1MFrOG_q6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjU1Mg==", "bodyText": "This part of code may come as a surprise to future developers that extend this class. When getNonTrimmableFields() is provided for overriding, it's natural to think getNonTrimmableFields() provides full control on \"what fields to keep\". This logic here, while necessary, may become debug overhead. It's also hard to change this behavior in the future if it stays in doTrim() like so.\nI suggest creating another function such as getNonTrimmableKeysOnly() and implement it under HelixPropertyTrimmer.java to preserve MapField and ListField keys by default; in doTrim(), we call that function and preserve keys only. The extended classes may choose to override it (and for now, they shouldn't). This is a clearer approach to creating this abstract class.", "url": "https://github.com/apache/helix/pull/1256#discussion_r469416552", "createdAt": "2020-08-12T17:16:50Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/changedetector/trimmer/HelixPropertyTrimmer.java", "diffHunk": "@@ -57,38 +57,49 @@\n    * @param originalProperty\n    */\n   protected ZNRecord doTrim(T originalProperty) {\n+    ZNRecord originalZNRecord = originalProperty.getRecord();\n     ZNRecord trimmedZNRecord = new ZNRecord(originalProperty.getId());\n-    for (Map.Entry<FieldType, Set<String>> fieldEntry : getNonTrimmableFields(\n-        originalProperty).entrySet()) {\n+    Map<FieldType, Set<String>> nonTrimmableFields = getNonTrimmableFields(originalProperty);\n+\n+    // Ensure the keys of all map fields and list fields are preserved even after the trim.\n+    // The keys of list and map fields are relatively stable and contain important information. So\n+    // they should not be trimmed.\n+    originalZNRecord.getMapFields().keySet().stream()\n+        .forEach(key -> trimmedZNRecord.setMapField(key, Collections.EMPTY_MAP));\n+    originalZNRecord.getListFields().keySet().stream()\n+        .forEach(key -> trimmedZNRecord.setListField(key, Collections.EMPTY_LIST));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a49fa3be60afb35f13ee9b7f04d1173b37ee15f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69f2dba87eafa2a4b348dd15573bf1940a43bb4", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/b69f2dba87eafa2a4b348dd15573bf1940a43bb4", "committedDate": "2020-08-12T17:41:21Z", "message": "Address the comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDE3Nzgz", "url": "https://github.com/apache/helix/pull/1256#pullrequestreview-467017783", "createdAt": "2020-08-13T18:16:11Z", "commit": {"oid": "b69f2dba87eafa2a4b348dd15573bf1940a43bb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4221, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}