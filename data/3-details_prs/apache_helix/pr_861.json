{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDI4NTA5", "number": 861, "title": "Make ClusterSetup realm-aware", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#860\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe make ClusterSetup, a Helix Java API, realm-aware so that this could be used in a multi-ZK environment.\nChangelist:\n\nAdd a Builder to enable users to set internal ZkClient parameters\nAdd the realm-aware behavior in existing constructors\n\nTests\n\n The following tests are written for this issue:\n\nTestClusterSetup covers this.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-core:\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestHierarchicalDataStore.testHierarchicalDataStore:50->add:81 \u00bb ZkClient Inpu...\n[ERROR]   TestEnableCompression.testEnableCompressionResource:108 expected:<true> but was:<false>\n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1083, Failures: 3, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:07 h\n[INFO] Finished at: 2020-03-11T02:14:14-07:00\n[INFO] ------------------------------------------------------------------------\n\nAll tests pass when run individually.\n\nmvn test -Dtest=TestHierarchicalDataStore,TestEnableCompression,TestControllerLeadershipChange,TestConfigAccessor,TestClusterSetup\n\n\n[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 76.508 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  02:37 min\n[INFO] Finished at: 2020-03-11T19:34:16-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-05T02:11:05Z", "url": "https://github.com/apache/helix/pull/861", "merged": true, "mergeCommit": {"oid": "339c8a2f94ec16bfc6f339353592af9c3f34cad5"}, "closed": true, "closedAt": "2020-03-12T02:35:43Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKhSXRgH2gAyMzg0MDI4NTA5Ojc0MmM1ZGE0MTBlZmExZWFmZTMwYjk4MTljNzdiMjY0MjczYmFjMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMySMdAH2gAyMzg0MDI4NTA5OmQ5MTliMzE2NDI4YjdhYjJkNDY5MDQ2MWJhMjdlMjIwMWM1MGJjNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "742c5da410efa1eafe30b9819c77b264273bac33", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/742c5da410efa1eafe30b9819c77b264273bac33", "committedDate": "2020-03-05T01:32:15Z", "message": "ClusterSetup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d510e5626204a544c9e22a12e11624f9fbc4e599", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/d510e5626204a544c9e22a12e11624f9fbc4e599", "committedDate": "2020-03-05T02:06:39Z", "message": "a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a38aaab9459f63bb5a0be64566afa6141f31b13", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/6a38aaab9459f63bb5a0be64566afa6141f31b13", "committedDate": "2020-03-05T02:26:43Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "989d7958ec628a28b3663ed555dbc1c553d7963f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/989d7958ec628a28b3663ed555dbc1c553d7963f", "committedDate": "2020-03-05T02:29:25Z", "message": "default serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "447437b92cc5bee5a997aa518abd3743b3b29b4d", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/447437b92cc5bee5a997aa518abd3743b3b29b4d", "committedDate": "2020-03-05T02:47:00Z", "message": "fsad"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "committedDate": "2020-03-05T04:18:42Z", "message": "Commit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDc3OTk5", "url": "https://github.com/apache/helix/pull/861#pullrequestreview-370077999", "createdAt": "2020-03-06T04:37:10Z", "commit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozNzoxMVrOFys8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0MDowNlrOFys-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTU2OA==", "bodyText": "Like you mentioned, do we need the checked exception signature? If yes, what is the consideration to have it thrown checked exceptions?", "url": "https://github.com/apache/helix/pull/861#discussion_r388709568", "createdAt": "2020-03-06T04:37:11Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");\n+      }\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+    }\n+\n+    _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = false;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient) {\n+  public ClusterSetup(RealmAwareZkClient zkClient) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = true;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient, HelixAdmin zkHelixAdmin) {\n+  public ClusterSetup(RealmAwareZkClient zkClient, HelixAdmin zkHelixAdmin) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = zkHelixAdmin;\n     _usesExternalZkClient = true;\n   }\n \n+  private ClusterSetup(Builder builder) throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDA3OQ==", "bodyText": "If it fails, shall we fall it back to connect to single ZK?", "url": "https://github.com/apache/helix/pull/861#discussion_r388710079", "createdAt": "2020-03-06T04:40:06Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");\n+      }\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+    }\n+\n+    _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = false;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient) {\n+  public ClusterSetup(RealmAwareZkClient zkClient) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = true;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient, HelixAdmin zkHelixAdmin) {\n+  public ClusterSetup(RealmAwareZkClient zkClient, HelixAdmin zkHelixAdmin) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = zkHelixAdmin;\n     _usesExternalZkClient = true;\n   }\n \n+  private ClusterSetup(Builder builder) throws IOException, InvalidRoutingDataException {\n+    switch (builder._realmMode) {\n+      case MULTI_REALM:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDgxNTEy", "url": "https://github.com/apache/helix/pull/861#pullrequestreview-370081512", "createdAt": "2020-03-06T04:53:15Z", "commit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MzoxNVrOFytIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MzoxNVrOFytIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjQ2Ng==", "bodyText": "If zk address is not set for multi-realm mode, a user would not expect an IllegalArgumentException. Shall we throw an IllegalStateException as the user doesn't set this argument? And also include the original exception message/stack?", "url": "https://github.com/apache/helix/pull/861#discussion_r388712466", "createdAt": "2020-03-06T04:53:15Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTAwNTc5", "url": "https://github.com/apache/helix/pull/861#pullrequestreview-370100579", "createdAt": "2020-03-06T06:12:04Z", "commit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoxMjowNVrOFyuGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjoxNTo0NlrOFyuJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODM2NA==", "bodyText": "nit, is this import needed anymore?", "url": "https://github.com/apache/helix/pull/861#discussion_r388728364", "createdAt": "2020-03-06T06:12:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -78,6 +78,7 @@\n import org.apache.helix.util.HelixUtil;\n import org.apache.helix.util.RebalanceUtil;\n import org.apache.helix.zookeeper.api.client.HelixZkClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODYwNg==", "bodyText": "It seems this field can still be final. Why do we need to remove the final keyword?", "url": "https://github.com/apache/helix/pull/861#discussion_r388728606", "createdAt": "2020-03-06T06:13:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyOTI3OA==", "bodyText": "I see similar builders in multiple PRs for the different accessor or tools. Can we have a parent ZkClient builder which contains basic info and validation, and these builders can be the children of that parent.", "url": "https://github.com/apache/helix/pull/861#discussion_r388729278", "createdAt": "2020-03-06T06:15:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -1570,4 +1610,66 @@ public static void main(String[] args) throws Exception {\n     int ret = processCommandLineArgs(args);\n     System.exit(ret);\n   }\n+\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/499a5f3e3a3855715f61719ccb91cf00dc5bd275", "committedDate": "2020-03-06T21:43:54Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75580730792ba556f16fdbb6a55bd5aae1b3767d", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/75580730792ba556f16fdbb6a55bd5aae1b3767d", "committedDate": "2020-03-06T22:50:55Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4bca40a76e6f8cbd2494b31dc0c2d705f645759", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e4bca40a76e6f8cbd2494b31dc0c2d705f645759", "committedDate": "2020-03-06T23:06:51Z", "message": "asdf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b90c774a0121845c828fc216791e52451ba5cef", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/9b90c774a0121845c828fc216791e52451ba5cef", "committedDate": "2020-03-11T00:29:44Z", "message": "update with no fallback logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7beee40b316e59d4154fd872eba57f09d654413", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/f7beee40b316e59d4154fd872eba57f09d654413", "committedDate": "2020-03-11T01:09:42Z", "message": "deprecate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODg2OTA5", "url": "https://github.com/apache/helix/pull/861#pullrequestreview-372886909", "createdAt": "2020-03-11T15:46:55Z", "commit": {"oid": "f7beee40b316e59d4154fd872eba57f09d654413"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo0Njo1NlrOF09CUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzowNToyMFrOF1AZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3MDI4OQ==", "bodyText": "I understand there is no rule for naming convention for a property key. But are we considering xxx.yyy.zzz in lowercase ? I would prefer this way as it is more readable, commonly used and easier to troubleshoot. I prefer this way. Just 2 cents", "url": "https://github.com/apache/helix/pull/861#discussion_r391070289", "createdAt": "2020-03-11T15:46:56Z", "author": {"login": "huizhilu"}, "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -57,4 +60,7 @@\n \n   // MBean monitor for helix.\n   public static final String HELIX_MONITOR_TIME_WINDOW_LENGTH_MS = \"helix.monitor.slidingTimeWindow.ms\";\n+\n+  // Multi-ZK mode enable/disable flag\n+  public static final String MULTI_ZK_ENABLED = \"helix.multiZkEnabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7beee40b316e59d4154fd872eba57f09d654413"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNTI2OQ==", "bodyText": "Nit: not sure whether or not we would allow users to set upper case \u201cTRUE\u201d and honor it as true. I just use getBoolean() to restrict it to true if and only if string is lowercase \u201ctrue\u201d.", "url": "https://github.com/apache/helix/pull/861#discussion_r391125269", "createdAt": "2020-03-11T17:05:20Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -123,23 +127,23 @@ public ConfigAccessor(RealmAwareZkClient zkClient) {\n    * @param zkAddress\n    */\n   public ConfigAccessor(String zkAddress) {\n-    // First, attempt to connect on multi-realm mode using FederatedZkClient\n-    RealmAwareZkClient zkClient;\n-    try {\n-      zkClient = new FederatedZkClient(\n-          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n-          new RealmAwareZkClient.RealmAwareZkClientConfig());\n-    } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n-      // Connecting multi-realm failed - fall back to creating it on single-realm mode using the given ZK address\n-      LOG.info(\n-          \"ConfigAccessor: not able to connect on multi-realm mode; connecting single-realm mode to ZK: {}\",\n-          zkAddress, e);\n-      zkClient = SharedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n-              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n-    }\n-    _zkClient = zkClient;\n     _usesExternalZkClient = false;\n+\n+    // If the multi ZK config is enabled, use FederatedZkClient on multi-realm mode\n+    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7beee40b316e59d4154fd872eba57f09d654413"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTczOTIz", "url": "https://github.com/apache/helix/pull/861#pullrequestreview-373173923", "createdAt": "2020-03-11T22:38:15Z", "commit": {"oid": "f7beee40b316e59d4154fd872eba57f09d654413"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e0c9cb50c7c4e3c8150966ab49ee22f6e96f1f2", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/9e0c9cb50c7c4e3c8150966ab49ee22f6e96f1f2", "committedDate": "2020-03-12T02:17:00Z", "message": "remove default serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4debac81900bee085f81ce8c7cc0d806e317236c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/4debac81900bee085f81ce8c7cc0d806e317236c", "committedDate": "2020-03-12T02:19:10Z", "message": "FSAD'\ngit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d919b316428b7ab2d4690461ba27e2201c50bc56", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/d919b316428b7ab2d4690461ba27e2201c50bc56", "committedDate": "2020-03-12T02:28:18Z", "message": "default serializer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}