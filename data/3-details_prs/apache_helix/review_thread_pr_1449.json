{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTY0Mjkw", "number": 1449, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowMzo1MlrOErUWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTozMjoxMFrOErU8QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU3NzIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowMzo1MlrOHeBjIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxMDo1NlrOHeDuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NDcwNg==", "bodyText": "Does this number change mean what we previously tested was wrong? How to justify the number change?", "url": "https://github.com/apache/helix/pull/1449#discussion_r501244706", "createdAt": "2020-10-07T19:03:52Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java", "diffHunk": "@@ -438,7 +441,7 @@ public void testResetSnapshots() {\n     Assert.assertEquals(\n         changeDetector.getAdditionsByType(ChangeType.IDEAL_STATE).size() + changeDetector\n             .getChangesByType(ChangeType.IDEAL_STATE).size() + changeDetector\n-            .getRemovalsByType(ChangeType.IDEAL_STATE).size(), 2);\n+            .getRemovalsByType(ChangeType.IDEAL_STATE).size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MDMwNQ==", "bodyText": "see line 418, 419\n      // remove newly added resource/ideastate\n      _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, resourceName);\n\nThe newly added resource in the previous test is not really valid. (Confirmed with JJ before.) Or they would break this test. So in this diff, it is removed.  Accordingly the number here needs to be adjusted too.", "url": "https://github.com/apache/helix/pull/1449#discussion_r501280305", "createdAt": "2020-10-07T20:10:56Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java", "diffHunk": "@@ -438,7 +441,7 @@ public void testResetSnapshots() {\n     Assert.assertEquals(\n         changeDetector.getAdditionsByType(ChangeType.IDEAL_STATE).size() + changeDetector\n             .getChangesByType(ChangeType.IDEAL_STATE).size() + changeDetector\n-            .getRemovalsByType(ChangeType.IDEAL_STATE).size(), 2);\n+            .getRemovalsByType(ChangeType.IDEAL_STATE).size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NDcwNg=="}, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU5NTY2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestDisableCustomCodeRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowOToyNVrOHeBufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNDoyNVrOHeD1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NzYxNA==", "bodyText": "Just want to make sure, besides waiting for some time before verifying, the verify by polling function is same as what we previously did.", "url": "https://github.com/apache/helix/pull/1449#discussion_r501247614", "createdAt": "2020-10-07T19:09:25Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestDisableCustomCodeRunner.java", "diffHunk": "@@ -209,9 +214,7 @@ public void test() throws Exception {\n \n     // Re-enable custom-code runner\n     admin.enableResource(clusterName, customCodeRunnerResource, true);\n-    result = ClusterStateVerifier.verifyByZkCallback(\n-        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n-    Assert.assertTrue(result);\n+    Assert.assertTrue(verifier.verifyByPolling());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MjIwMA==", "bodyText": "The new one BestPossibleExternalViewVerifier replaced the deprecated one ClusterStateVerifier and BestPossAndExtViewZkVerifier", "url": "https://github.com/apache/helix/pull/1449#discussion_r501282200", "createdAt": "2020-10-07T20:14:25Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestDisableCustomCodeRunner.java", "diffHunk": "@@ -209,9 +214,7 @@ public void test() throws Exception {\n \n     // Re-enable custom-code runner\n     admin.enableResource(clusterName, customCodeRunnerResource, true);\n-    result = ClusterStateVerifier.verifyByZkCallback(\n-        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n-    Assert.assertTrue(result);\n+    Assert.assertTrue(verifier.verifyByPolling());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NzYxNA=="}, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODU5NzI3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowOTo1NFrOHeBvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyMTowN1rOHeEDpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0Nzg0OQ==", "bodyText": "Remove this line.", "url": "https://github.com/apache/helix/pull/1449#discussion_r501247849", "createdAt": "2020-10-07T19:09:54Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java", "diffHunk": "@@ -111,10 +111,14 @@ public void testEnableCompressionResource() throws Exception {\n     }\n \n     BestPossibleExternalViewVerifier verifier =\n-        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n-            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources).build();\n-    boolean result = verifier.verify(120000L);\n-    Assert.assertTrue(result);\n+        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n+            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources)\n+            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n+            .build();\n+\n+    System.out.println(\"before TestEnableCompression verify by polling\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4NTc5OQ==", "bodyText": "removed,", "url": "https://github.com/apache/helix/pull/1449#discussion_r501285799", "createdAt": "2020-10-07T20:21:07Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java", "diffHunk": "@@ -111,10 +111,14 @@ public void testEnableCompressionResource() throws Exception {\n     }\n \n     BestPossibleExternalViewVerifier verifier =\n-        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n-            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources).build();\n-    boolean result = verifier.verify(120000L);\n-    Assert.assertTrue(result);\n+        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n+            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources)\n+            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n+            .build();\n+\n+    System.out.println(\"before TestEnableCompression verify by polling\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0Nzg0OQ=="}, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYwMTc2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxMToxMFrOHeByGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxMToxMFrOHeByGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0ODUzNw==", "bodyText": "Can we define the number somewhere instead of using a math expression?", "url": "https://github.com/apache/helix/pull/1449#discussion_r501248537", "createdAt": "2020-10-07T19:11:10Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java", "diffHunk": "@@ -111,10 +111,14 @@ public void testEnableCompressionResource() throws Exception {\n     }\n \n     BestPossibleExternalViewVerifier verifier =\n-        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n-            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources).build();\n-    boolean result = verifier.verify(120000L);\n-    Assert.assertTrue(result);\n+        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n+            .setExpectLiveInstances(expectedLiveInstances).setResources(expectedResources)\n+            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n+            .build();\n+\n+    System.out.println(\"before TestEnableCompression verify by polling\");\n+    boolean reuslt = verifier.verifyByPolling(20 * 60 * 1000, 2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODY3MTAwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestSemiAutoRebalance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTozMTozOFrOHeCc1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyMzoyM1rOHeEISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTQ3Nw==", "bodyText": "Is previous verification moved to somewhere else?", "url": "https://github.com/apache/helix/pull/1449#discussion_r501259477", "createdAt": "2020-10-07T19:31:38Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestSemiAutoRebalance.java", "diffHunk": "@@ -92,33 +95,11 @@ public void beforeClass() throws InterruptedException {\n     _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n     _controller.syncStart();\n \n-    Thread.sleep(1000);\n-\n-    // verify ideal state and external view\n-    IdealState idealState = _accessor.getProperty(_keyBuilder.idealStates(DB_NAME));\n-    Assert.assertNotNull(idealState);\n-    Assert.assertEquals(idealState.getNumPartitions(), PARTITION_NUMBER);\n-    for (String partition : idealState.getPartitionSet()) {\n-      List<String> preferenceList = idealState.getPreferenceList(partition);\n-      Assert.assertNotNull(preferenceList);\n-      Assert.assertEquals(preferenceList.size(), REPLICA_NUMBER);\n-    }\n-\n-    ExternalView externalView = _accessor.getProperty(_keyBuilder.externalView(DB_NAME));\n-    Assert.assertNotNull(externalView);\n-    Assert.assertEquals(externalView.getPartitionSet().size(), PARTITION_NUMBER);\n-    for (String partition : externalView.getPartitionSet()) {\n-      Map<String, String> stateMap = externalView.getStateMap(partition);\n-      Assert.assertEquals(stateMap.size(), REPLICA_NUMBER);\n-\n-      int masters = 0;\n-      for (String state : stateMap.values()) {\n-        if (state.equals(MasterSlaveSMD.States.MASTER.name())) {\n-          ++masters;\n-        }\n-      }\n-      Assert.assertEquals(masters, 1);\n-    }\n+    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4Njk4NA==", "bodyText": "replaced by line 102. The previous way is really too old. Older than deprecated ClusterVerifier and it does not work sometimes.", "url": "https://github.com/apache/helix/pull/1449#discussion_r501286984", "createdAt": "2020-10-07T20:23:23Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestSemiAutoRebalance.java", "diffHunk": "@@ -92,33 +95,11 @@ public void beforeClass() throws InterruptedException {\n     _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n     _controller.syncStart();\n \n-    Thread.sleep(1000);\n-\n-    // verify ideal state and external view\n-    IdealState idealState = _accessor.getProperty(_keyBuilder.idealStates(DB_NAME));\n-    Assert.assertNotNull(idealState);\n-    Assert.assertEquals(idealState.getNumPartitions(), PARTITION_NUMBER);\n-    for (String partition : idealState.getPartitionSet()) {\n-      List<String> preferenceList = idealState.getPreferenceList(partition);\n-      Assert.assertNotNull(preferenceList);\n-      Assert.assertEquals(preferenceList.size(), REPLICA_NUMBER);\n-    }\n-\n-    ExternalView externalView = _accessor.getProperty(_keyBuilder.externalView(DB_NAME));\n-    Assert.assertNotNull(externalView);\n-    Assert.assertEquals(externalView.getPartitionSet().size(), PARTITION_NUMBER);\n-    for (String partition : externalView.getPartitionSet()) {\n-      Map<String, String> stateMap = externalView.getStateMap(partition);\n-      Assert.assertEquals(stateMap.size(), REPLICA_NUMBER);\n-\n-      int masters = 0;\n-      for (String state : stateMap.values()) {\n-        if (state.equals(MasterSlaveSMD.States.MASTER.name())) {\n-          ++masters;\n-        }\n-      }\n-      Assert.assertEquals(masters, 1);\n-    }\n+    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTQ3Nw=="}, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODY3MzI5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTozMjoxMFrOHeCeLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyNjoyOFrOHeEOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTgyMg==", "bodyText": "Please change Db2 to a better name.", "url": "https://github.com/apache/helix/pull/1449#discussion_r501259822", "createdAt": "2020-10-07T19:32:10Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "diffHunk": "@@ -164,9 +169,19 @@ public void testAutoRebalance() throws Exception {\n     // kill 1 node\n     _participants[0].syncStop();\n \n-    boolean result = ClusterStateVerifier\n-        .verifyByZkCallback(new ExternalViewBalancedVerifier(_gZkClient, CLUSTER_NAME, TEST_DB));\n-    Assert.assertTrue(result);\n+    ZkHelixClusterVerifier verifierTestDb = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n+        .setResources(new HashSet<>(Collections.singleton(TEST_DB)))\n+        .setZkClient(_gZkClient)\n+        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n+        .build();\n+    Assert.assertTrue(verifierTestDb.verifyByPolling());\n+\n+    ZkHelixClusterVerifier verifierDb2 = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4ODYwNA==", "bodyText": "Changed to \"verifierClusterDb2\" as the purpose it to validate cluster Db2", "url": "https://github.com/apache/helix/pull/1449#discussion_r501288604", "createdAt": "2020-10-07T20:26:28Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java", "diffHunk": "@@ -164,9 +169,19 @@ public void testAutoRebalance() throws Exception {\n     // kill 1 node\n     _participants[0].syncStop();\n \n-    boolean result = ClusterStateVerifier\n-        .verifyByZkCallback(new ExternalViewBalancedVerifier(_gZkClient, CLUSTER_NAME, TEST_DB));\n-    Assert.assertTrue(result);\n+    ZkHelixClusterVerifier verifierTestDb = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n+        .setResources(new HashSet<>(Collections.singleton(TEST_DB)))\n+        .setZkClient(_gZkClient)\n+        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n+        .build();\n+    Assert.assertTrue(verifierTestDb.verifyByPolling());\n+\n+    ZkHelixClusterVerifier verifierDb2 = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTgyMg=="}, "originalCommit": {"oid": "acdaf01bd39e8b4a22dbca7d18be9ad4ced4396c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1007, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}