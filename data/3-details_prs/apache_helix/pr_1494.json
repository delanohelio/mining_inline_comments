{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzMyNTk3", "number": 1494, "title": "Add admin and Rest API to purge instances that have been offline more than specified period of time", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixed #1493\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHelix plan to have the function to allow users to purge offline participants that have been timed out. This PR provides both Java API and REST API for users to purge offline participants. Users may specify the timeout through API input or just fall back to the default value defined in cluster config. If either is defined as a timeout, Helix will not purge participants.\nTests\n\n The following tests are written for this issue:\n\nTestZkHelixAdmin\nTestClusterAccessor\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nhelix-core:\n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,878.091 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1237, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:21 h\n[INFO] Finished at: 2020-11-01T17:40:42-08:00\n[INFO] ------------------------------------------------------------------------\n\nhelix-rest:\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 181.257 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 171, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  03:05 min\n[INFO] Finished at: 2020-11-01T16:49:19-08:00\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-28T17:53:12Z", "url": "https://github.com/apache/helix/pull/1494", "merged": true, "mergeCommit": {"oid": "204f034e4f8e5f49127b702b7a129892240c945c"}, "closed": true, "closedAt": "2020-11-02T06:12:51Z", "author": {"login": "zhangmeng916"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXE8-hgFqTUxOTExNTA2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYd5ksgH2gAyNTExNzMyNTk3OmU3MDcwYTA0NTIzM2E0N2JkZDU5MDdmMWE2MzhiNDk2OTc2Y2IwZTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTE1MDY3", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519115067", "createdAt": "2020-10-28T21:56:23Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo1NjoyM1rOHp_Asg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjowMzo0MFrOHp_NBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NjAzNA==", "bodyText": "Can we specify the map meaning here? It could be confusing if we dont clarify it in Java doc.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513786034", "createdAt": "2020-10-28T21:56:23Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/HelixAdmin.java", "diffHunk": "@@ -228,6 +228,13 @@ void addResource(String clusterName, String resourceName, int numPartitions, Str\n    */\n   void dropInstance(String clusterName, InstanceConfig instanceConfig);\n \n+  /**\n+   * Purge offline instances from a cluster\n+   * @param clusterName\n+   * @param customizedPurgeMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4Njc1MQ==", "bodyText": "Better to have public constants class to hold this kind of key words.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513786751", "createdAt": "2020-10-28T21:57:58Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -105,6 +106,7 @@\n   public static final String CONNECTION_TIMEOUT = \"helixAdmin.timeOutInSec\";\n   private static final String MAINTENANCE_ZNODE_ID = \"maintenance\";\n   private static final int DEFAULT_SUPERCLUSTER_REPLICA = 3;\n+  public static final String OFFLINE_NODE_PURGE_TIMEOUT = \"purge.timeout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NzQwOA==", "bodyText": "I am also confused here. What could other entries other than this timeout?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513787408", "createdAt": "2020-10-28T21:59:22Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {\n+    String timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NzgzMQ==", "bodyText": "Shall we do a try catch? If the timeout is invalid string by human error, shall we stop it or use default value?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513787831", "createdAt": "2020-10-28T22:00:18Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {\n+    String timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);\n+    Long timeoutValue;\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeoutValue = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    } else {\n+      timeoutValue = Long.valueOf(timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4ODYyMA==", "bodyText": "We can create a set and use instanceConfigMap.keySet().removeAll(set).", "url": "https://github.com/apache/helix/pull/1494#discussion_r513788620", "createdAt": "2020-10-28T22:02:10Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {\n+    String timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);\n+    Long timeoutValue;\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeoutValue = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    } else {\n+      timeoutValue = Long.valueOf(timeout);\n+    }\n+\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    String path = PropertyPathBuilder.instanceConfig(clusterName);\n+    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_zkClient);\n+    List<ZNRecord> znRecords = baseAccessor.getChildren(path, null, 0, 0, 0);\n+    for (ZNRecord record : znRecords) {\n+      if (record != null) {\n+        InstanceConfig instanceConfig = new InstanceConfig(record);\n+        instanceConfigMap.put(instanceConfig.getInstanceName(), instanceConfig);\n+      }\n+    }\n+\n+    path = PropertyPathBuilder.liveInstance(clusterName);\n+    List<String> liveNodes = baseAccessor.getChildNames(path, 0);\n+    liveNodes.forEach(liveNode -> instanceConfigMap.remove(liveNode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4OTE4OA==", "bodyText": "Same here, we can use instanceConfigMap.keySet().removeAll(toRemoveInstances); It has better performance.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513789188", "createdAt": "2020-10-28T22:03:40Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {\n+    String timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);\n+    Long timeoutValue;\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeoutValue = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    } else {\n+      timeoutValue = Long.valueOf(timeout);\n+    }\n+\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    String path = PropertyPathBuilder.instanceConfig(clusterName);\n+    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_zkClient);\n+    List<ZNRecord> znRecords = baseAccessor.getChildren(path, null, 0, 0, 0);\n+    for (ZNRecord record : znRecords) {\n+      if (record != null) {\n+        InstanceConfig instanceConfig = new InstanceConfig(record);\n+        instanceConfigMap.put(instanceConfig.getInstanceName(), instanceConfig);\n+      }\n+    }\n+\n+    path = PropertyPathBuilder.liveInstance(clusterName);\n+    List<String> liveNodes = baseAccessor.getChildNames(path, 0);\n+    liveNodes.forEach(liveNode -> instanceConfigMap.remove(liveNode));\n+\n+    Set<String> toRemoveInstances = new HashSet<>();\n+    for (String instanceName : instanceConfigMap.keySet()) {\n+      String historyPath = PropertyPathBuilder.instanceHistory(clusterName, instanceName);\n+      ZNRecord znRecord = baseAccessor.get(historyPath, null, 0);\n+      ParticipantHistory participantHistory = new ParticipantHistory(znRecord);\n+      long lastOfflineTime = participantHistory.getLastOfflineTime();\n+      if (lastOfflineTime == -1 || timeoutValue < 0\n+          || System.currentTimeMillis() - lastOfflineTime < timeoutValue) {\n+        toRemoveInstances.add(instanceName);\n+      }\n+    }\n+    toRemoveInstances.forEach(instance -> instanceConfigMap.remove(instance));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjM4MDEy", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519238012", "createdAt": "2020-10-29T00:49:35Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDo0OTozNVrOHqCogQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDo0OTozNVrOHqCogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0NTM3Nw==", "bodyText": "If timeoutValue < 0, can we return earlier with an empty map?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513845377", "createdAt": "2020-10-29T00:49:35Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {\n+    String timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);\n+    Long timeoutValue;\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeoutValue = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    } else {\n+      timeoutValue = Long.valueOf(timeout);\n+    }\n+\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    String path = PropertyPathBuilder.instanceConfig(clusterName);\n+    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_zkClient);\n+    List<ZNRecord> znRecords = baseAccessor.getChildren(path, null, 0, 0, 0);\n+    for (ZNRecord record : znRecords) {\n+      if (record != null) {\n+        InstanceConfig instanceConfig = new InstanceConfig(record);\n+        instanceConfigMap.put(instanceConfig.getInstanceName(), instanceConfig);\n+      }\n+    }\n+\n+    path = PropertyPathBuilder.liveInstance(clusterName);\n+    List<String> liveNodes = baseAccessor.getChildNames(path, 0);\n+    liveNodes.forEach(liveNode -> instanceConfigMap.remove(liveNode));\n+\n+    Set<String> toRemoveInstances = new HashSet<>();\n+    for (String instanceName : instanceConfigMap.keySet()) {\n+      String historyPath = PropertyPathBuilder.instanceHistory(clusterName, instanceName);\n+      ZNRecord znRecord = baseAccessor.get(historyPath, null, 0);\n+      ParticipantHistory participantHistory = new ParticipantHistory(znRecord);\n+      long lastOfflineTime = participantHistory.getLastOfflineTime();\n+      if (lastOfflineTime == -1 || timeoutValue < 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjkyODkx", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519292891", "createdAt": "2020-10-29T02:46:55Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0Njo1NVrOHqFyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0Njo1NVrOHqFyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5Njk3Nw==", "bodyText": "Should the API looks like:  purgeOfflineInstances(clusterName, long timeout), which will delete all instances that have been offline longer than timeout?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513896977", "createdAt": "2020-10-29T02:46:55Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/HelixAdmin.java", "diffHunk": "@@ -228,6 +228,13 @@ void addResource(String clusterName, String resourceName, int numPartitions, Str\n    */\n   void dropInstance(String clusterName, InstanceConfig instanceConfig);\n \n+  /**\n+   * Purge offline instances from a cluster\n+   * @param clusterName\n+   * @param customizedPurgeMap\n+   */\n+  void purgeOfflineInstances(String clusterName, Map<String, String> customizedPurgeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjkzMjIw", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519293220", "createdAt": "2020-10-29T02:47:58Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0Nzo1OFrOHqFz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0Nzo1OFrOHqFz8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5NzQ1OQ==", "bodyText": "Why a map here, what could be specified other than timeout?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513897459", "createdAt": "2020-10-29T02:47:58Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -250,6 +252,13 @@ public void dropInstance(String clusterName, InstanceConfig instanceConfig) {\n     }\n   }\n \n+  @Override\n+  public void purgeOfflineInstances(String clusterName, Map<String, String> customizedPurgeMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mjk0NDIy", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519294422", "createdAt": "2020-10-29T02:51:49Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo1MTo1MFrOHqF7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzoyMDowNVrOHqGuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5OTMyMQ==", "bodyText": "value -> instanceConfig to be clearer?", "url": "https://github.com/apache/helix/pull/1494#discussion_r513899321", "createdAt": "2020-10-29T02:51:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -250,6 +252,13 @@ public void dropInstance(String clusterName, InstanceConfig instanceConfig) {\n     }\n   }\n \n+  @Override\n+  public void purgeOfflineInstances(String clusterName, Map<String, String> customizedPurgeMap) {\n+    Map<String, InstanceConfig> timeoutOfflineInstances = findTimeoutOfflineInstances(clusterName,\n+        customizedPurgeMap);\n+    timeoutOfflineInstances.values().forEach(value -> dropInstance(clusterName, value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkwNjMwNw==", "bodyText": "Can we have a warning log for why json parsing fails which could help us debug.\nNot sure if we have a unit test to test this kind of failure: content(eg. format) is incorret. Then we should not return OK, but a bad client request.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513906307", "createdAt": "2020-10-29T03:07:19Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -282,6 +282,17 @@ public Response updateCluster(@PathParam(\"clusterId\") String clusterId,\n           return badRequest(e.getMessage());\n         }\n         break;\n+      case purgeOfflineParticipants:\n+        Map<String, String> customizedPurgeMap = new HashMap<>();\n+        try {\n+          customizedPurgeMap =\n+              OBJECT_MAPPER.readValue(content, new TypeReference<HashMap<String, String>>() {\n+              });\n+        } catch (Exception e) {\n+          // NOP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkxMjUwNg==", "bodyText": "From the API logic, it seems what is needed is only timeout? Then I think we don't have to pass along the map, but only the timeout value from the rest api layer: timeout = customizedPurgeMap.get(OFFLINE_NODE_PURGE_TIMEOUT);\nThen the APIs only need the timeout param, not a map.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513912506", "createdAt": "2020-10-29T03:20:05Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,45 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Map<String, String> customizedPurgeMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzA0NDY3", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-519304467", "createdAt": "2020-10-29T03:24:15Z", "commit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzoyNDoxNVrOHqG5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzoyNDoxNVrOHqG5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkxNTI3NA==", "bodyText": "It seems only timeout is needed. Anther option is, we can add a QueryParam timeout, instead of putting it a body content? It'd be easier to use.", "url": "https://github.com/apache/helix/pull/1494#discussion_r513915274", "createdAt": "2020-10-29T03:24:15Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -282,6 +282,17 @@ public Response updateCluster(@PathParam(\"clusterId\") String clusterId,\n           return badRequest(e.getMessage());\n         }\n         break;\n+      case purgeOfflineParticipants:\n+        Map<String, String> customizedPurgeMap = new HashMap<>();\n+        try {\n+          customizedPurgeMap =\n+              OBJECT_MAPPER.readValue(content, new TypeReference<HashMap<String, String>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c85ed5595bade663965f91fbb9f750823c6103f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA1NDQx", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520405441", "createdAt": "2020-10-30T06:35:05Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNTowNVrOHrCy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNTowNVrOHrCy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5NjYzNA==", "bodyText": "i think the javadoc here could use more work. we should try to add more context on why and when the interface should be used.\nalso i'm not sure timeout is the right term for this. perhaps rename it to something like offlineDuration? also if you could please add a description as to how this offlineDuration is measured/calculated.", "url": "https://github.com/apache/helix/pull/1494#discussion_r514896634", "createdAt": "2020-10-30T06:35:05Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/HelixAdmin.java", "diffHunk": "@@ -228,6 +228,13 @@ void addResource(String clusterName, String resourceName, int numPartitions, Str\n    */\n   void dropInstance(String clusterName, InstanceConfig instanceConfig);\n \n+  /**\n+   * Purge offline instances from a cluster\n+   * @param clusterName\n+   * @param timeout\n+   */\n+  void purgeOfflineInstances(String clusterName, Long timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA1Njk2", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520405696", "createdAt": "2020-10-30T06:35:42Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNTo0MlrOHrCzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNTo0MlrOHrCzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5NjgyOA==", "bodyText": "again, timeout might be a bit of a misnomer here.", "url": "https://github.com/apache/helix/pull/1494#discussion_r514896828", "createdAt": "2020-10-30T06:35:42Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2069,43 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA2MDQ3", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520406047", "createdAt": "2020-10-30T06:36:51Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNjo1MVrOHrC08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNjo1MVrOHrC08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5NzEzNw==", "bodyText": "i'd prefer a primitive long here", "url": "https://github.com/apache/helix/pull/1494#discussion_r514897137", "createdAt": "2020-10-30T06:36:51Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2069,43 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Long timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA2Mjcy", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520406272", "createdAt": "2020-10-30T06:37:35Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNzozNVrOHrC1wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjozNzozNVrOHrC1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5NzM0NQ==", "bodyText": "instead of doing the null check, maybe you could define a NOT_SET constant of some sort...", "url": "https://github.com/apache/helix/pull/1494#discussion_r514897345", "createdAt": "2020-10-30T06:37:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2069,43 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Long timeout) {\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeout = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA3MjQz", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520407243", "createdAt": "2020-10-30T06:40:35Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo0MDozNVrOHrC46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo0MDozNVrOHrC46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5ODE1Mg==", "bodyText": "nit: is there a strong reason we're using a BaseDataAccessor instance here? for helix-related i/o, it is better taste to use HelixDataAccessor because you can avoid having to cast it to helix data model from znrecord.\nthat way, code will be cleaner and easier to read, shorter, and more concise.", "url": "https://github.com/apache/helix/pull/1494#discussion_r514898152", "createdAt": "2020-10-30T06:40:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2069,43 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      Long timeout) {\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (timeout == null) {\n+      timeout = _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+    }\n+    if (timeout < 0) {\n+      return instanceConfigMap;\n+    }\n+\n+    String path = PropertyPathBuilder.instanceConfig(clusterName);\n+    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_zkClient);\n+    List<ZNRecord> znRecords = baseAccessor.getChildren(path, null, 0, 0, 0);\n+    for (ZNRecord record : znRecords) {\n+      if (record != null) {\n+        InstanceConfig instanceConfig = new InstanceConfig(record);\n+        instanceConfigMap.put(instanceConfig.getInstanceName(), instanceConfig);\n+      }\n+    }\n+\n+    path = PropertyPathBuilder.liveInstance(clusterName);\n+    List<String> liveNodes = baseAccessor.getChildNames(path, 0);\n+    instanceConfigMap.keySet().removeAll(liveNodes);\n+\n+    Set<String> toRemoveInstances = new HashSet<>();\n+    for (String instanceName : instanceConfigMap.keySet()) {\n+      String historyPath = PropertyPathBuilder.instanceHistory(clusterName, instanceName);\n+      ZNRecord znRecord = baseAccessor.get(historyPath, null, 0);\n+      ParticipantHistory participantHistory = new ParticipantHistory(znRecord);\n+      long lastOfflineTime = participantHistory.getLastOfflineTime();\n+      if (lastOfflineTime == -1 || System.currentTimeMillis() - lastOfflineTime < timeout) {\n+        toRemoveInstances.add(instanceName);\n+      }\n+    }\n+    instanceConfigMap.keySet().removeAll(toRemoveInstances);\n+    return instanceConfigMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDA4MjI5", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-520408229", "createdAt": "2020-10-30T06:43:19Z", "commit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo0MzoxOVrOHrC73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo0MzoxOVrOHrC73g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5ODkxMA==", "bodyText": "two high-level comments:\n\nare we not using the lock? as discussed offline, i think to complete this feature, it would be a good idea to use the distributed lock here since all sorts of race conditions are possible\nwhat kind of failure handling are we doing in this call? we're making multiple dropInstance calls here and there's no guarantee that all would go through. plus, the method itself isn't returning anything so there's no way for the user to determine whether the purge operation was successful or not", "url": "https://github.com/apache/helix/pull/1494#discussion_r514898910", "createdAt": "2020-10-30T06:43:19Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -250,6 +251,13 @@ public void dropInstance(String clusterName, InstanceConfig instanceConfig) {\n     }\n   }\n \n+  @Override\n+  public void purgeOfflineInstances(String clusterName, Long timeout) {\n+    Map<String, InstanceConfig> timeoutOfflineInstances = findTimeoutOfflineInstances(clusterName\n+        , timeout);\n+    timeoutOfflineInstances.values().forEach(instance -> dropInstance(clusterName, instance));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729e94c953f2c23272960bd65a828752caf1526"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTA5NTcz", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521109573", "createdAt": "2020-10-31T03:41:12Z", "commit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo0MToxMlrOHrknTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo0MToxMlrOHrknTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MDcwMQ==", "bodyText": "sorry if i didnt make myself more clear. when i said VALUE_NOT_SET, we usually name these constants in a more descriptive manner - e.g.) OFFLINE_DURATION_VALUE_NOT_SET for example. this is ZKHelixAdmin, so it contains a lot of different operations, so it's better to make this crystal clear.\nalso nit: usually longs have an L appended to it. -> -1L;", "url": "https://github.com/apache/helix/pull/1494#discussion_r515450701", "createdAt": "2020-10-31T03:41:12Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -113,6 +114,7 @@\n   private final boolean _usesExternalZkClient;\n \n   private static Logger logger = LoggerFactory.getLogger(ZKHelixAdmin.class);\n+  private static final long VALUE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTEwMjc0", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521110274", "createdAt": "2020-10-31T03:56:54Z", "commit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1Njo1NFrOHrkrow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1Njo1NFrOHrkrow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTgxMQ==", "bodyText": "-1 is a magic number and we should generally avoid having magic numbers..\nit would look nicer if you could make the not set constant a public constant and use it here - that way it's easy to track what's going on and code is much more readable.", "url": "https://github.com/apache/helix/pull/1494#discussion_r515451811", "createdAt": "2020-10-31T03:56:54Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -282,6 +282,13 @@ public Response updateCluster(@PathParam(\"clusterId\") String clusterId,\n           return badRequest(e.getMessage());\n         }\n         break;\n+      case purgeOfflineParticipants:\n+        if (timeout == null || timeout < 0) {\n+          helixAdmin.purgeOfflineInstances(clusterId, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTEwMzUz", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521110353", "createdAt": "2020-10-31T03:58:43Z", "commit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1ODo0M1rOHrksGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1ODo0M1rOHrksGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTkyOA==", "bodyText": "important: should we clean up all zk resources after the test is done? e.g.) tool.close(), dataAccessor.close(), etc.\notherwise, we'll have a lot of free-floating threads that make the entire test suite unstable and slow.", "url": "https://github.com/apache/helix/pull/1494#discussion_r515451928", "createdAt": "2020-10-31T03:58:43Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java", "diffHunk": "@@ -1008,4 +1008,58 @@ public void testUpdateCustomizedStateConfig() throws Exception {\n     Assert.assertEquals(listTypesFromZk.get(0), \"mockType2\");\n     Assert.assertEquals(listTypesFromZk.get(1), \"mockType3\");\n   }\n+\n+  @Test\n+  public void testPurgeOfflineInstances() {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n+\n+    HelixAdmin tool = new ZKHelixAdmin(_gZkClient);\n+    tool.addCluster(clusterName, true);\n+\n+    HelixDataAccessor dataAccessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n+    PropertyKey.Builder keyBuilder = dataAccessor.keyBuilder();\n+\n+    // set default offline node timeout for purge in cluster config\n+    ClusterConfig clusterConfig = dataAccessor.getProperty(keyBuilder.clusterConfig());\n+    clusterConfig.setOfflineNodeTimeOutForPurge(100000L);\n+    dataAccessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n+\n+    String hostname = \"host1\";\n+    String port = \"9999\";\n+    String instanceName = hostname + \"_\" + port;\n+    InstanceConfig config = new InstanceConfig(instanceName);\n+    config.setHostName(hostname);\n+    config.setPort(port);\n+    tool.addInstance(clusterName, config);\n+    tool.enableInstance(clusterName, instanceName, true);\n+\n+    LiveInstance liveInstance = new LiveInstance(instanceName);\n+    liveInstance.setSessionId(UUID.randomUUID().toString());\n+    liveInstance.setHelixVersion(UUID.randomUUID().toString());\n+    dataAccessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n+\n+    dataAccessor.removeProperty(keyBuilder.liveInstance(instanceName));\n+    ZNRecord znRecord = new ZNRecord(instanceName);\n+    znRecord\n+        .setSimpleField(\"LAST_OFFLINE_TIME\", String.valueOf(System.currentTimeMillis() - 50000L));\n+    _baseAccessor.set(PropertyPathBuilder.instanceHistory(clusterName, instanceName), znRecord, 1);\n+\n+    // This purge will not remove the instance since the default timeout is not met yet.\n+    tool.purgeOfflineInstances(clusterName, -1);\n+    Assert.assertTrue(_gZkClient.exists(keyBuilder.instanceConfig(instanceName).getPath()),\n+        \"Instance should still be there\");\n+\n+    // This purge will remove the instance as the customized purge timeout is met.\n+    Map<String, String> purgeMap = new HashMap<>();\n+    tool.purgeOfflineInstances(clusterName, 10000L);\n+    Assert.assertFalse(_gZkClient.exists(keyBuilder.instanceConfig(instanceName).getPath()),\n+        \"Instance should already be dropped\");\n+\n+    tool.dropCluster(clusterName);\n+    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTEwNDY1", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521110465", "createdAt": "2020-10-31T04:00:54Z", "commit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDowMDo1NVrOHrks2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDowMDo1NVrOHrks2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MjEyMg==", "bodyText": "could you double-check if this zkclient is a RealmAwareZkClient?", "url": "https://github.com/apache/helix/pull/1494#discussion_r515452122", "createdAt": "2020-10-31T04:00:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -2061,4 +2070,37 @@ public ZKHelixAdmin build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  private Map<String, InstanceConfig> findTimeoutOfflineInstances(String clusterName,\n+      long offlineDuration) {\n+    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n+    // in case there is no customized timeout value, use the one defined in cluster config\n+    if (offlineDuration == VALUE_NOT_SET) {\n+      offlineDuration =\n+          _configAccessor.getClusterConfig(clusterName).getOfflineNodeTimeOutForPurge();\n+      if (offlineDuration == VALUE_NOT_SET) {\n+        return instanceConfigMap;\n+      }\n+    }\n+\n+    HelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05ca6f1649141f5bdd64b71fe359efe5659d3e6"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3770feb89cbbfe613a3d16244f15553a67fbaea", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/a3770feb89cbbfe613a3d16244f15553a67fbaea", "committedDate": "2020-10-31T15:38:39Z", "message": "more fix"}, "afterCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1", "committedDate": "2020-10-31T15:50:02Z", "message": "more fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTg5OTQw", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521189940", "createdAt": "2020-11-01T03:42:18Z", "commit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0MjoxOFrOHrr8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0MjoxOFrOHrr8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MDg3MA==", "bodyText": "Nit: space?", "url": "https://github.com/apache/helix/pull/1494#discussion_r515570870", "createdAt": "2020-11-01T03:42:18Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -163,7 +165,7 @@\n   private final static int MIN_REBALANCE_PREFERENCE = 0;\n   public final static boolean DEFAULT_GLOBAL_REBALANCE_ASYNC_MODE_ENABLED = true;\n   private static final int GLOBAL_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET = -1;\n-  private static final long VALUE_NOT_SET = -1;\n+  private static final int  OFFLINE_NODE_TIME_OUT_FOR_MAINTENANCE_MODE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTg5OTQ3", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521189947", "createdAt": "2020-11-01T03:42:40Z", "commit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0Mjo0MFrOHrr8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0Mjo0MFrOHrr8xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MDg4NA==", "bodyText": "nit: offline \"duration\" for consistency", "url": "https://github.com/apache/helix/pull/1494#discussion_r515570884", "createdAt": "2020-11-01T03:42:40Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -153,6 +153,8 @@\n \n   public final static String TASK_QUOTA_RATIO_NOT_SET = \"-1\";\n \n+  public static final long OFFLINE_TIMEOUT_FOR_PURGE_NOT_SET = -1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTg5OTgy", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521189982", "createdAt": "2020-11-01T03:43:34Z", "commit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0MzozNFrOHrr89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0MzozNFrOHrr89A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MDkzMg==", "bodyText": "generally we avoid static imports. you just import the class, and use it as CLASS.CONSTANT_NAME", "url": "https://github.com/apache/helix/pull/1494#discussion_r515570932", "createdAt": "2020-11-01T03:43:34Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java", "diffHunk": "@@ -83,6 +83,8 @@\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import static org.apache.helix.model.ClusterConfig.OFFLINE_TIMEOUT_FOR_PURGE_NOT_SET;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTkwMDc0", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521190074", "createdAt": "2020-11-01T03:46:35Z", "commit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0NjozNVrOHrr9zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0NjozNVrOHrr9zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MTE0OQ==", "bodyText": "info -> warn or error", "url": "https://github.com/apache/helix/pull/1494#discussion_r515571149", "createdAt": "2020-11-01T03:46:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -250,6 +253,23 @@ public void dropInstance(String clusterName, InstanceConfig instanceConfig) {\n     }\n   }\n \n+  @Override\n+  public List<String> purgeOfflineInstances(String clusterName, long offlineTimeout) {\n+    Map<String, InstanceConfig> timeoutOfflineInstances = findTimeoutOfflineInstances(clusterName\n+        , offlineTimeout);\n+    List<String> failToPurgeInstances = new ArrayList<>();\n+    timeoutOfflineInstances.values().forEach(instance -> {\n+      try {\n+        dropInstance(clusterName, instance);\n+      } catch (HelixException e) {\n+        logger.info(\"Failed to purge instance {} in cluster {}. Exception: {}\", instance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTkwMTQx", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521190141", "createdAt": "2020-11-01T03:48:49Z", "commit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0ODo0OVrOHrr-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzo0ODo0OVrOHrr-Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MTI2Nw==", "bodyText": "I think it's a bit awkward to return the list of instances whose deletion failed; usually these methods don't return anything, or they return the list of instances whose deletion succeeded.\nhow about we keep it as void, and only log one line at the end if there are any instances whose deletion failed? that way we persist the information we need while being concise.\njust to cut down on back-and-forth, this is what I mean:\nfor-each {\n    try {\n        dropInstance();\n    } catch (Exception e) {\n        failedDeletions.add(instanceName);\n    }\n}\nif (failedDeletions.size > 0) {\n    LOG.error(\"ZKHelixAdmin::purgeOfflineInstances(): failed to drop the following instances: \" + failedDeletions);\n}\n\nquick, concise, has all the information we need, and don't pollute the log if there are a lot of failures. what do you think?", "url": "https://github.com/apache/helix/pull/1494#discussion_r515571267", "createdAt": "2020-11-01T03:48:49Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -250,6 +253,23 @@ public void dropInstance(String clusterName, InstanceConfig instanceConfig) {\n     }\n   }\n \n+  @Override\n+  public List<String> purgeOfflineInstances(String clusterName, long offlineTimeout) {\n+    Map<String, InstanceConfig> timeoutOfflineInstances = findTimeoutOfflineInstances(clusterName\n+        , offlineTimeout);\n+    List<String> failToPurgeInstances = new ArrayList<>();\n+    timeoutOfflineInstances.values().forEach(instance -> {\n+      try {\n+        dropInstance(clusterName, instance);\n+      } catch (HelixException e) {\n+        logger.info(\"Failed to purge instance {} in cluster {}. Exception: {}\", instance,\n+            clusterName, e);\n+        failToPurgeInstances.add(instance.getInstanceName());\n+      }\n+    });\n+    return failToPurgeInstances;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4f236de55198ea09f6e3b7c11b5c2ffb55c0ec1"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU3OTMx", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521257931", "createdAt": "2020-11-01T20:26:16Z", "commit": {"oid": "d9aa396ef38bd71832494cf4756056f0a9c95358"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoyNjoxNlrOHrx3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoyNjoxNlrOHrx3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2Nzc0OQ==", "bodyText": "\"the threshold of offline time to\"... -> this is a little confusing. the fact that we are using timeout to describe this could be confusing to the reader.\ntimeout is a term used when one actively counts down to see if an operation completes or not. in this case, as you clarified, we are not actively counting down or waiting on anything. (rather, this api is being called by the user passively) so the use of timeout is still misleading. my suggestion is to use offlineDuration as that wouldn't cause any confusion or give readers a wrong idea.\nfor example, something like this would work:\n@param offlineDuration if an offline instance has been offline for longer than the set offlineDuration, the offline instance becomes eligible for being purged/deleted", "url": "https://github.com/apache/helix/pull/1494#discussion_r515667749", "createdAt": "2020-11-01T20:26:16Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/HelixAdmin.java", "diffHunk": "@@ -228,6 +228,16 @@ void addResource(String clusterName, String resourceName, int numPartitions, Str\n    */\n   void dropInstance(String clusterName, InstanceConfig instanceConfig);\n \n+  /**\n+   * Purge offline instances that have been offline for longer than the offline duration time\n+   * from a cluster\n+   * @param clusterName\n+   * @param offlineTimeout the threshold of offline time to decide whether an offline instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aa396ef38bd71832494cf4756056f0a9c95358"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU4MTE0", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521258114", "createdAt": "2020-11-01T20:28:25Z", "commit": {"oid": "d9aa396ef38bd71832494cf4756056f0a9c95358"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee42dd24b613727df7f769cf604346241c943f67", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/ee42dd24b613727df7f769cf604346241c943f67", "committedDate": "2020-11-01T22:03:13Z", "message": "change timeout to duration"}, "afterCommit": {"oid": "5b1afb2a3e74a28a5a1f312964faa9eb8fbe8674", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/5b1afb2a3e74a28a5a1f312964faa9eb8fbe8674", "committedDate": "2020-11-01T22:43:58Z", "message": "change timeout to duration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00baa1d970725e7b8d10635a02eb92067cb6507c", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/00baa1d970725e7b8d10635a02eb92067cb6507c", "committedDate": "2020-11-02T00:14:23Z", "message": "Implement offline nodes purging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5ef4728b5a6f12988dcc9921446c2ae45259eec", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/a5ef4728b5a6f12988dcc9921446c2ae45259eec", "committedDate": "2020-11-02T00:14:23Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60ae86f3c9b5476a8e7efe6f46babd574b830fa7", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/60ae86f3c9b5476a8e7efe6f46babd574b830fa7", "committedDate": "2020-11-02T00:14:23Z", "message": "fix more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f46bdbd118ea273c8163f2297f803e3db0fe5bc8", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f46bdbd118ea273c8163f2297f803e3db0fe5bc8", "committedDate": "2020-11-02T00:14:23Z", "message": "more fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5dbcf94258b8f8c68ba0cd95b4212732337c6ad", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f5dbcf94258b8f8c68ba0cd95b4212732337c6ad", "committedDate": "2020-11-02T00:14:23Z", "message": "update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b1afb2a3e74a28a5a1f312964faa9eb8fbe8674", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/5b1afb2a3e74a28a5a1f312964faa9eb8fbe8674", "committedDate": "2020-11-01T22:43:58Z", "message": "change timeout to duration"}, "afterCommit": {"oid": "1e782944006b247afcfd2dda7122369267964810", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/1e782944006b247afcfd2dda7122369267964810", "committedDate": "2020-11-02T00:14:23Z", "message": "change timeout to duration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e782944006b247afcfd2dda7122369267964810", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/1e782944006b247afcfd2dda7122369267964810", "committedDate": "2020-11-02T00:14:23Z", "message": "change timeout to duration"}, "afterCommit": {"oid": "bf01df8cf12bf17711de59cb54f93ca521278535", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/bf01df8cf12bf17711de59cb54f93ca521278535", "committedDate": "2020-11-02T00:51:35Z", "message": "change timeout to duration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf01df8cf12bf17711de59cb54f93ca521278535", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/bf01df8cf12bf17711de59cb54f93ca521278535", "committedDate": "2020-11-02T00:51:35Z", "message": "change timeout to duration"}, "afterCommit": {"oid": "18ca1483f0550961bce67a019d1a4c8ba3736ddd", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/18ca1483f0550961bce67a019d1a4c8ba3736ddd", "committedDate": "2020-11-02T01:31:38Z", "message": "change timeout to duration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/7a922194553c4563bc3177eacfbac224f88bb920", "committedDate": "2020-11-02T01:33:07Z", "message": "change timeout to duration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18ca1483f0550961bce67a019d1a4c8ba3736ddd", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/18ca1483f0550961bce67a019d1a4c8ba3736ddd", "committedDate": "2020-11-02T01:31:38Z", "message": "change timeout to duration"}, "afterCommit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/7a922194553c4563bc3177eacfbac224f88bb920", "committedDate": "2020-11-02T01:33:07Z", "message": "change timeout to duration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzMzMTU3", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521333157", "createdAt": "2020-11-02T05:04:08Z", "commit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNDowOFrOHr2Xog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNDowOFrOHr2Xog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTYwMg==", "bodyText": "Optional: usually I see people do OFFLINE_DURATION_FOR_PURGE_MS but either way is fine, really.", "url": "https://github.com/apache/helix/pull/1494#discussion_r515741602", "createdAt": "2020-11-02T05:04:08Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -134,7 +134,7 @@\n     // offline for more than this specified time period, and users call purge participant API,\n     // then the node will be removed.\n     // The unit is milliseconds.\n-    OFFLINE_NODE_TIME_OUT_FOR_PURGE\n+    OFFLINE_DURATION_FOR_PURGE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzMzNDY2", "url": "https://github.com/apache/helix/pull/1494#pullrequestreview-521333466", "createdAt": "2020-11-02T05:05:32Z", "commit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNTozM1rOHr2Y6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNTozM1rOHr2Y6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTkzMA==", "bodyText": "Nit: would it be possible to avoid static imports? i think i've already commented on something similar...", "url": "https://github.com/apache/helix/pull/1494#discussion_r515741930", "createdAt": "2020-11-02T05:05:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -98,6 +99,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.helix.model.ClusterConfig.OFFLINE_DURATION_FOR_PURGE_NOT_SET;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a922194553c4563bc3177eacfbac224f88bb920"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d33febca2cf96e16f6827534d5d5c659d47719ae", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/d33febca2cf96e16f6827534d5d5c659d47719ae", "committedDate": "2020-11-02T05:17:04Z", "message": "more update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7070a045233a47bdd5907f1a638b496976cb0e7", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/e7070a045233a47bdd5907f1a638b496976cb0e7", "committedDate": "2020-11-02T05:41:33Z", "message": "add comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4386, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}