{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTUzNDU2", "number": 1383, "title": "Add Metrics for External Custom Health Check Requests", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #1382\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCustom rest client interacts with participant side to query for its health checks. Currently there is no metrics for the query requests. We'd like to have metrics for the requests.\nHere's a design trade-off:\n\nAdd a new API getInstanceStoppableCheck(baseUrl, customPayloads, namespace) in interface CustomRestClient. We need the namespace name when recording metrics in CustomRestClient. Since CustomRestClient is a singleton instance, we can not inject the namespace to the class. Having the namespace as a parameter in the API is an option. The benefit is we can accurately record the http request latency, and it is more scalable if we have more places calling the API, we don't need to do anything. Cons: change existing interface to add the new API. Though it is an interface, we may not expect external users to use it. So it should be fine to change the interface.\nRecord the metrics in the upstream caller outside CustomRestClient, eg.  InstanceService where getInstanceStoppableCheck() is called, we record the metrics. Pros: we don't need to change existing interface CustomRestClient. Cons: Latency of http request is more than the actual number because other stuff like json response parsing is also involved in CustomRestClient; and it is not scalable because we have to record metrics in each place where CustomRestClient. getInstanceStoppableCheck() is called.\n\nThis PR implements option 2), because there are not many places that call CustomRestClient APIs, and it doesn't look good that pass the namespace as a parameter just for metrics rather than logic related.\n\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 168, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 59.766 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 168, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:05 min\n[INFO] Finished at: 2020-09-28T17:43:10-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-09-20T20:24:56Z", "url": "https://github.com/apache/helix/pull/1383", "merged": true, "mergeCommit": {"oid": "26c026b83c1377f7f239a2cc6e59332b64f1bf51"}, "closed": true, "closedAt": "2020-09-30T18:22:40Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdK0y0dgBqjM3ODYzODc3ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN3JEUAFqTQ5OTEzMDI2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b63642a30b3dba31cfe76d9123a13119c80f7d6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9b63642a30b3dba31cfe76d9123a13119c80f7d6", "committedDate": "2020-09-20T20:21:43Z", "message": "Add custom metrics"}, "afterCommit": {"oid": "46d54e3d2edaea77bf0e47d70dacfe774b73b737", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/46d54e3d2edaea77bf0e47d70dacfe774b73b737", "committedDate": "2020-09-20T20:26:52Z", "message": "Add custom metrics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46d54e3d2edaea77bf0e47d70dacfe774b73b737", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/46d54e3d2edaea77bf0e47d70dacfe774b73b737", "committedDate": "2020-09-20T20:26:52Z", "message": "Add custom metrics"}, "afterCommit": {"oid": "5a07b173e7247ca4ec10a628499451bfc03e077d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5a07b173e7247ca4ec10a628499451bfc03e077d", "committedDate": "2020-09-21T03:49:34Z", "message": "Add custom metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9404665ac53876e1b977310684e528e1238c236", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/d9404665ac53876e1b977310684e528e1238c236", "committedDate": "2020-09-22T02:13:41Z", "message": "Add metrics for custom rest client requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a07b173e7247ca4ec10a628499451bfc03e077d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5a07b173e7247ca4ec10a628499451bfc03e077d", "committedDate": "2020-09-21T03:49:34Z", "message": "Add custom metrics"}, "afterCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/d9404665ac53876e1b977310684e528e1238c236", "committedDate": "2020-09-22T02:13:41Z", "message": "Add metrics for custom rest client requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTA0ODc2", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-493104876", "createdAt": "2020-09-22T03:20:46Z", "commit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyMDo0NlrOHVpCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyODowN1rOHVpH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDQxNg==", "bodyText": "In case of an exception, the time will be also counted in the request duration, right? Is this what in the design? I think this will make the duration statistic less accurate.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492454416", "createdAt": "2020-09-22T03:20:46Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDg0Nw==", "bodyText": "nit: variable name to be consistent with metric name to avoid misuse.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492454847", "createdAt": "2020-09-22T03:22:47Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTM4MQ==", "bodyText": "More specifically, this is \"health\" check. Maybe you can make it more accurate in case you have other types of instance check metrics later and need to distinguish between them.\nSame for partition health check.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492455381", "createdAt": "2020-09-22T03:25:30Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwMw==", "bodyText": "Shall we mark this as deprecated?", "url": "https://github.com/apache/helix/pull/1383#discussion_r492455903", "createdAt": "2020-09-22T03:28:07Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;\n   protected CustomRestClient _restClient;\n \n   public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzMyNDI1", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-496732425", "createdAt": "2020-09-25T19:20:50Z", "commit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToyMDo1MFrOHYPxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxNToxMlrOHYROhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw==", "bodyText": "How do we determine the metric type (gauge or counter) later when we want to expose the MBean attribute to the monitoring system?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495186197", "createdAt": "2020-09-25T19:20:50Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NzA2MQ==", "bodyText": "Why not clear?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495187061", "createdAt": "2020-09-25T19:22:53Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -222,7 +222,6 @@ public void shutdown() {\n       }\n     }\n     _jmxReporterList.forEach(JmxReporter::stop);\n-    _jmxReporterList.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDQ1MQ==", "bodyText": "It is lazily initialized, let's don't call it without a real error.\nI would prefer just coding like the following, so you don't need the extra local fields def.\nmetrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL).inc();", "url": "https://github.com/apache/helix/pull/1383#discussion_r495190451", "createdAt": "2020-09-25T19:30:20Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDg0Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDg5OQ==", "bodyText": "metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION).time() is enough? You are not using the timer object in the try code block anyway, right?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495190899", "createdAt": "2020-09-25T19:31:22Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU5MQ==", "bodyText": "_namespace is not a must logic for the class, so I suggest adding a set method for it instead of adding a constructor.\nIf the namespace is not set, then just skip the metrics logic.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495207591", "createdAt": "2020-09-25T20:09:12Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODEzNA==", "bodyText": "Please check my comments for the instance accessor, the same here. Please lazily get and simplify the code whenever possible.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495208134", "createdAt": "2020-09-25T20:10:28Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw==", "bodyText": "You can get namespace from dataAccessor? Please try to ensure there is only one source of truth.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495209107", "createdAt": "2020-09-25T20:12:42Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMDExNw==", "bodyText": "Or do we share the same accessor across multiple service implementation? If that's the case, we need to reconsider the design.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495210117", "createdAt": "2020-09-25T20:15:12Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be48f4bb3140e9dd686a94cec0a01eb85b66c6c5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/be48f4bb3140e9dd686a94cec0a01eb85b66c6c5", "committedDate": "2020-09-29T00:53:17Z", "message": "Fix tests"}, "afterCommit": {"oid": "6d9050c7e1a7dfab79acd0142665a3c6375c6d41", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6d9050c7e1a7dfab79acd0142665a3c6375c6d41", "committedDate": "2020-09-29T01:09:16Z", "message": "Fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d9050c7e1a7dfab79acd0142665a3c6375c6d41", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6d9050c7e1a7dfab79acd0142665a3c6375c6d41", "committedDate": "2020-09-29T01:09:16Z", "message": "Fix tests"}, "afterCommit": {"oid": "13c107972c01aeafabb2b48a607fc080a135a0f4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/13c107972c01aeafabb2b48a607fc080a135a0f4", "committedDate": "2020-09-29T01:27:20Z", "message": "Fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13c107972c01aeafabb2b48a607fc080a135a0f4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/13c107972c01aeafabb2b48a607fc080a135a0f4", "committedDate": "2020-09-29T01:27:20Z", "message": "Fix tests"}, "afterCommit": {"oid": "f497030839029f05cbd12fcba1d489c3a209183e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f497030839029f05cbd12fcba1d489c3a209183e", "committedDate": "2020-09-29T01:32:38Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTkyMzI2", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-497992326", "createdAt": "2020-09-29T00:58:10Z", "commit": {"oid": "be48f4bb3140e9dd686a94cec0a01eb85b66c6c5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1ODoxMFrOHZUplw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNjoxNFrOHZVQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDc3NQ==", "bodyText": "In the object name, there is a type property for us to know that: type=counters or type=gauges. Then we'll use the type property.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496314775", "createdAt": "2020-09-29T00:58:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODA0Mg==", "bodyText": "I was thinking other callers may use it. Within helix, only a mock class calls it. So I just changed it and deprecate this, assuming this constructor is supposed to be used within helix rest.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318042", "createdAt": "2020-09-29T01:11:07Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;\n   protected CustomRestClient _restClient;\n \n   public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwMw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODUyNg==", "bodyText": "It won't make the duration statistic too bad, compared with network IO. CPU is really fast to process the exception. Actually we still need to use a try... finally block - same as this try.. with..resource.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318526", "createdAt": "2020-09-29T01:13:02Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDQxNg=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODk4OA==", "bodyText": "No :) You got it. The first PR was a draft. A constructor with namespace is passed in, I didn't push the change yet when you saw this. Updated.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318988", "createdAt": "2020-09-29T01:14:45Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxOTY1Mw==", "bodyText": "Java 8 try..with..resource needs this variable, though we won't use it in the block :). Maybe a newer java supports it.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496319653", "createdAt": "2020-09-29T01:16:53Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDg5OQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc5MQ==", "bodyText": "This naming is based on the method/function. It is a generic interface api getInstanceStoppableCheck, so no matter it is a health check or else, as long as it calls this api, we record it. What do you think?", "url": "https://github.com/apache/helix/pull/1383#discussion_r496324791", "createdAt": "2020-09-29T01:36:14Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTM4MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/858a9474c01a5a1e03e3f767081b64337a6b7c1c", "committedDate": "2020-09-29T01:55:23Z", "message": "Fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f497030839029f05cbd12fcba1d489c3a209183e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f497030839029f05cbd12fcba1d489c3a209183e", "committedDate": "2020-09-29T01:32:38Z", "message": "Fix tests"}, "afterCommit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/858a9474c01a5a1e03e3f767081b64337a6b7c1c", "committedDate": "2020-09-29T01:55:23Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTIwNjMz", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-498120633", "createdAt": "2020-09-29T06:07:48Z", "commit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo0OFrOHZcMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo0OFrOHZcMgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODQwMw==", "bodyText": "I might be wrong, but helix-rest is not a module that we expect anyone to extend, so we shall be able to remove unnecessary methods directly.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496438403", "createdAt": "2020-09-29T06:07:48Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,29 +62,44 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;\n   private final ConfigAccessor _configAccessor;\n   private final CustomRestClient _customRestClient;\n+  private String _namespace;\n   private boolean _skipZKRead;\n \n+  @Deprecated\n   public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor) {\n-    _dataAccessor = dataAccessor;\n-    _configAccessor = configAccessor;\n-    _customRestClient = CustomRestClientFactory.get();\n+    this(dataAccessor, configAccessor, false);\n   }\n \n-  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor, boolean skipZKRead) {\n-    this(dataAccessor,configAccessor);\n-    this._skipZKRead = skipZKRead;\n+  @Deprecated\n+  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor,\n+      boolean skipZKRead) {\n+    this(dataAccessor, configAccessor, skipZKRead, HelixRestNamespace.DEFAULT_NAMESPACE_NAME);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77906d5f44e08a7aa374be7f50f083cc55768b0b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/77906d5f44e08a7aa374be7f50f083cc55768b0b", "committedDate": "2020-09-29T21:26:17Z", "message": "Move HelixDataAccessorWrapper contruction to InstanceServiceImpl"}, "afterCommit": {"oid": "575c0dd7c60c74d493d5e0ccd9a3f83b20bfeea6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/575c0dd7c60c74d493d5e0ccd9a3f83b20bfeea6", "committedDate": "2020-09-30T03:37:43Z", "message": "Move HelixDataAccessorWrapper contruction to InstanceServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591b2adf3957d6a5cf13822eed3f4fae7e074880", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/591b2adf3957d6a5cf13822eed3f4fae7e074880", "committedDate": "2020-09-30T03:49:23Z", "message": "Move HelixDataAccessorWrapper contruction to InstanceServiceImpl"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "575c0dd7c60c74d493d5e0ccd9a3f83b20bfeea6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/575c0dd7c60c74d493d5e0ccd9a3f83b20bfeea6", "committedDate": "2020-09-30T03:37:43Z", "message": "Move HelixDataAccessorWrapper contruction to InstanceServiceImpl"}, "afterCommit": {"oid": "591b2adf3957d6a5cf13822eed3f4fae7e074880", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/591b2adf3957d6a5cf13822eed3f4fae7e074880", "committedDate": "2020-09-30T03:49:23Z", "message": "Move HelixDataAccessorWrapper contruction to InstanceServiceImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDcxODQ3", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-499071847", "createdAt": "2020-09-30T04:12:01Z", "commit": {"oid": "591b2adf3957d6a5cf13822eed3f4fae7e074880"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTMwMjYx", "url": "https://github.com/apache/helix/pull/1383#pullrequestreview-499130261", "createdAt": "2020-09-30T06:52:56Z", "commit": {"oid": "591b2adf3957d6a5cf13822eed3f4fae7e074880"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4286, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}