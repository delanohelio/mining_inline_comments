{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTM5Njg1", "number": 1295, "title": "fix TestRawZkClient unstableness", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFix #1294\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nZkClient connect to ZooKeeper client first before monitor bean\ninitialization. If the monitor is not fully constructed, the\ntest would pass. Otherwise, as in github, it would not. Fix this\nissue by properly construct the object.\nTests\n\n The following tests are written for this issue:\n\nNone\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nIn Old connection New session\nAfter session expiry sessionId= 72277739317428225\nShut down zookeeper at port 2127 in thread main\nStarting ZK server at localhost:2358\n[INFO] Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 701.476 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 44, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  11:47 min\n[INFO] Finished at: 2020-08-19T18:11:02-07:00\n[INFO] ------------------------------------------------------------------------\nksun-mn1:zookeeper-api ksun$ git status\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-20T01:18:12Z", "url": "https://github.com/apache/helix/pull/1295", "merged": true, "mergeCommit": {"oid": "f2e68c83175de01bb5613e7742d498ccd1264ebc"}, "closed": true, "closedAt": "2020-10-02T00:28:29Z", "author": {"login": "kaisun2000"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAltPKAH2gAyNDcwNTM5Njg1OmU1MGZjZWE5ZDRkNzRjYjViYTRmYWRlODgzNTY3NTdjNTU5OWI1M2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOZnUggH2gAyNDcwNTM5Njg1OjFhMzUzZDM4ZjY3NTEwZjJkMzk5MjJiZjk0ZTJhOTFkYjYzNWUyODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/e50fcea9d4d74cb5ba4fade88356757c5599b53d", "committedDate": "2020-08-20T01:13:08Z", "message": "fix TestRawZkClient unstableness #1294\n\nZkClient connect to ZooKeeper client first before monitor bean\ninitialization. If the monitor is not fully constructed, the\ntest would pass. Otherwise, as in github, it would not. Fix this\nissue by properly construct the object."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDYyNjg3", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-472062687", "createdAt": "2020-08-21T00:07:16Z", "commit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDowNzoxNlrOHEXNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDoxMzoxMlrOHEXUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNjY1OQ==", "bodyText": "These fields are not helpful to the ZkClient.\nCould you try to change the ZkClientMonitor instead so as to avoid these fields? What I am thinking is that, allowing the _eventThread sub-monitor to be added later after the ZkClientMonitor has been constructed. So it can be done in the connect() by referring to _monitor.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474336659", "createdAt": "2020-08-21T00:07:16Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -124,6 +125,13 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n   private ZkClientMonitor _monitor;\n \n+  final private String _monitorKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzE4Mg==", "bodyText": "the comment is not updated accordingly.\nCould you please justify the reason we need to triple the wait duration?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474337182", "createdAt": "2020-08-21T00:09:08Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA==", "bodyText": "What happen to these 2 checks?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474337348", "createdAt": "2020-08-21T00:09:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODE4Nw==", "bodyText": "Do we really need this check? If we ensure after exists(), the read is 2, then we shall be good, right?\nNote that to check this read counter one by one, we need to add one method just for this purpose. I think it is an overkill and it is not necessary.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338187", "createdAt": "2020-08-21T00:12:37Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,26 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+    //Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNzM0OA=="}, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODMyOA==", "bodyText": "I have multiple questions.\n\nIf this is just for test, please make it package-private.\nDo we really need to check the read count one by one increase?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338328", "createdAt": "2020-08-21T00:13:12Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1281,6 +1279,10 @@ protected void doRetry() throws Exception {\n         });\n   }\n \n+  public boolean getSyncStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDM2Mzgx", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-472036381", "createdAt": "2020-08-20T22:50:06Z", "commit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MDowNlrOHEV0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDoxNDoxMFrOHEXVQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMzg3Mw==", "bodyText": "Does the test really need 60s to poll the result? In my opinion it is too long. It would fail with 20s?", "url": "https://github.com/apache/helix/pull/1295#discussion_r474313873", "createdAt": "2020-08-20T22:50:06Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/TestHelper.java", "diffHunk": "@@ -32,7 +32,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 20 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODYyNw==", "bodyText": "We should consider closing the monitor to avoid leakage. If the later part of code zk connection timeout and throws exception, the monitor should also be closed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r474338627", "createdAt": "2020-08-21T00:14:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2156,6 +2160,21 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       LOG.debug(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n \n+      // initiate monitor\n+      try {\n+        if (_monitorKey != null && !_monitorKey.isEmpty() && _monitorType != null && !_monitorType\n+            .isEmpty()) {\n+          _monitor =\n+              new ZkClientMonitor(_monitorType, _monitorKey, _monitorInstanceName, _monitorRootPathOnly,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50fcea9d4d74cb5ba4fade88356757c5599b53d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/eb7dedf8a1edff93559ca1260217d913010cba98", "committedDate": "2020-08-21T03:08:23Z", "message": "change the zkmonitor construction sequence a little bit based on review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MDQ2OTgy", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-475046982", "createdAt": "2020-08-25T23:13:33Z", "commit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoxMzozNFrOHGwBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoxMzozNFrOHGwBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg0MDMzMA==", "bodyText": "Let's give it a more complete change.\n\nThe constructor will not require _eventThread anymore, it will be null anyway.\nsetAndInitZkEventThreadMonitor shall create the event thread monitor and call updateAttributesInfo() to update the attribute. Re-register the whole monitor is wrong, you will end up either having 2 mbeans or the 2nd register will fail.", "url": "https://github.com/apache/helix/pull/1295#discussion_r476840330", "createdAt": "2020-08-25T23:13:34Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -222,22 +226,16 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n     _asyncCallRetryThread.start();\n     LOG.debug(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());\n \n-    connect(connectionTimeout, this);\n-\n-    // initiate monitor\n-    try {\n-      if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n-          .isEmpty()) {\n-        _monitor =\n-            new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n-                _eventThread);\n-        _monitor.register();\n-      } else {\n-        LOG.info(\"ZkClient monitor key or type is not provided. Skip monitoring.\");\n-      }\n-    } catch (JMException e) {\n-      LOG.error(\"Error in creating ZkClientMonitor\", e);\n+    if (monitorKey != null && !monitorKey.isEmpty() && monitorType != null && !monitorType\n+        .isEmpty()) {\n+      _monitor =\n+          new ZkClientMonitor(monitorType, monitorKey, monitorInstanceName, monitorRootPathOnly,\n+              _eventThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTQzNjQx", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-475143641", "createdAt": "2020-08-26T04:33:59Z", "commit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDozMzo1OVrOHG7exw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDozMzo1OVrOHG7exw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAyODAzOQ==", "bodyText": "What's the reason to catch exception and print? I guess you want to have the stacktrace for debugging. But please be noted that if exception is thrown, this change will return a zkServer that's not started. I don't think this is what you expected, is it?\nI guest keeping it to throw exception so the test would not proceed.", "url": "https://github.com/apache/helix/pull/1295#discussion_r477028039", "createdAt": "2020-08-26T04:33:59Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/ZkTestBase.java", "diffHunk": "@@ -143,7 +143,11 @@ protected ZkServer startZkServer(final String zkAddress) {\n     int port = Integer.parseInt(zkAddress.substring(zkAddress.lastIndexOf(':') + 1));\n     ZkServer zkServer = new ZkServer(dataDir, logDir, defaultNameSpace, port);\n     System.out.println(\"Starting ZK server at \" + zkAddress);\n-    zkServer.start();\n+    try {\n+      zkServer.start();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7dedf8a1edff93559ca1260217d913010cba98"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a86cb7e9fb055b62b078dcd54fa756e8d755f2", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/56a86cb7e9fb055b62b078dcd54fa756e8d755f2", "committedDate": "2020-08-26T17:55:56Z", "message": "rethrow exception based on feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039", "committedDate": "2020-08-31T20:39:07Z", "message": "revert catch exception in creating zkserver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTQ0ODI5", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-480144829", "createdAt": "2020-09-01T21:55:15Z", "commit": {"oid": "2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NToxNlrOHLJn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NToxNlrOHLJn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NDA3Ng==", "bodyText": "Nit: If we need to check exits(), we should assert true? I actually don't think it is necessary as below already checks. But if really check, assert true is needed.\nif (!_zkClient.exists(TEST_ROOT)) {\n       _zkClient.createPersistent(TEST_ROOT, true);\n}", "url": "https://github.com/apache/helix/pull/1295#discussion_r481454076", "createdAt": "2020-09-01T21:55:16Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,24 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n     // account for doAsyncSync()\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n-    zkClient.exists(TEST_ROOT);\n+    // Note, we need to wait here for the reason that doAsyncSync() blocks only the zkClient event thread. The main\n+    // thread of zkClient would issue exits(TEST_ROOT) without blocking. The return of doAsyncSync() would be asyc\n+    // to main thread. doAsyncSync() is a source of 1 read and main thread exists(TEST_ROOT) would be another.\n+    TestHelper.verify(()->{\n+      return ((org.apache.helix.zookeeper.zkclient.ZkClient)zkClient).getSyncStatus();\n+    }, TestHelper.WAIT_DURATION);\n+\n     Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    zkClient.exists(TEST_ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6beb5d9d69dda8a6a9c55bae3e1e25a90c5039"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b", "committedDate": "2020-09-17T00:49:58Z", "message": "waiting for 2 read coming back based on feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMTcyNDQ2", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-490172446", "createdAt": "2020-09-17T00:55:17Z", "commit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1NToxOFrOHTJGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1NToxOFrOHTJGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNDAxOA==", "bodyText": "Note, It seems crucial to register here. Or depending on timing, we may lose read of the first sync().", "url": "https://github.com/apache/helix/pull/1295#discussion_r489834018", "createdAt": "2020-09-17T00:55:18Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2152,6 +2150,19 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n \n       IZkConnection zkConnection = getConnection();\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n+\n+      if (_monitor != null) {\n+        _monitor.setAndInitZkEventThreadMonitor(_eventThread);\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDc1OTQ2", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-491075946", "createdAt": "2020-09-18T00:37:20Z", "commit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDozNzoyMFrOHT6BiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0MjowMVrOHT6GOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw==", "bodyText": "nit, throw Exception if the _zkEventThreadMetric has already been set or the monitor object has already been registered. Otherwise, we may see an unexpected monitor value in the final result.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490635657", "createdAt": "2020-09-18T00:37:20Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjM3MA==", "bodyText": "BTW, you can check for registration status by checking _objectName with a synchronized lock on the monitor object.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490636370", "createdAt": "2020-09-18T00:40:11Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,6 +96,12 @@ public static ObjectName getObjectName(String monitorType, String monitorKey,\n             (monitorKey + (monitorInstanceName == null ? \"\" : \".\" + monitorInstanceName)));\n   }\n \n+  public void setAndInitZkEventThreadMonitor(ZkEventThread zkEventThread) {\n+    if (_zkEventThreadMetric == null) {\n+      _zkEventThreadMetric = new ZkThreadMetric(zkEventThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTY1Nw=="}, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjg1OQ==", "bodyText": "Is this value still validatable?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490636859", "createdAt": "2020-09-18T00:42:01Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDc4MDI2", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-491078026", "createdAt": "2020-09-18T00:44:33Z", "commit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo0NDozM1rOHT6I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDo1MDoxN1rOHT6O-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzU0Nw==", "bodyText": "no need anymore?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490637547", "createdAt": "2020-09-18T00:44:33Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNzYzNA==", "bodyText": "With the latest proposal, this one can be removed too.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490637634", "createdAt": "2020-09-18T00:44:52Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -31,9 +31,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.management.JMException;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODMyNQ==", "bodyText": "Actually, can we wait here before \"zkClient.exists(TEST_ROOT);\" for ReadCounter == 1. Then wait here for 2? So we ensure exist call will increase one counter too.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638325", "createdAt": "2020-09-18T00:47:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODUxNA==", "bodyText": "If you wait for the counter in the previous line, then here we can still check for\nAssert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);\nAssert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\") >= 0);\t    \n\nright?", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638514", "createdAt": "2020-09-18T00:48:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODY2Ng==", "bodyText": "I propose that we record the ReadTotalLatencyCounter that we get before exists() call. Then we check if this counter is equal to the previous value or is increased here.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490638666", "createdAt": "2020-09-18T00:48:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzOTA5OQ==", "bodyText": "If we checked \"ReadLatencyGauge.Max\" before, then this one can be ignored.", "url": "https://github.com/apache/helix/pull/1295#discussion_r490639099", "createdAt": "2020-09-18T00:50:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -285,18 +285,20 @@ public void testZkClientMonitor()\n     Assert.assertTrue(beanServer.isRegistered(idealStatename));\n \n     Assert.assertEquals((long) beanServer.getAttribute(name, \"DataChangeEventCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 0);\n+    Assert.assertEquals((long) beanServer.getAttribute(name, \"StateChangeEventCounter\"), 1);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"ExpiredSessionCounter\"), 0);\n     Assert.assertEquals((long) beanServer.getAttribute(name, \"OutstandingRequestGauge\"), 0);\n-    // account for doAsyncSync()\n-    Assert.assertEquals((long) beanServer.getAttribute(name, \"TotalCallbackCounter\"), 1);\n \n-    // Test exists\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\"), 0);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\"), 0);\n     zkClient.exists(TEST_ROOT);\n-    Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 1);\n+\n+    // Assert.assertEquals((long) beanServer.getAttribute(rootname, \"ReadCounter\"), 2);\n+    // wait for both doAysncSync() finish and zkClient.exists(Test_ROOT) finish from 2 different threads.\n+    // The condition would be ReadCounter is 2.\n+    boolean verifyResult = TestHelper.verify(()->{\n+       return (long) beanServer.getAttribute(rootname, \"ReadCounter\") == 2;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(verifyResult, \" did not see 2 read yet\");\n+\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadTotalLatencyCounter\") >= 0);\n     Assert.assertTrue((long) beanServer.getAttribute(rootname, \"ReadLatencyGauge.Max\") >= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d344bb4f8d3bb84d5c0ffab6111cbd96c3014d9b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd11e750f6969c11580fdec851fd2d328d9b5345", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/fd11e750f6969c11580fdec851fd2d328d9b5345", "committedDate": "2020-09-18T03:06:45Z", "message": "refactor based on feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfbc7ba8bfcfc719974133a478e6722aed052535", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/dfbc7ba8bfcfc719974133a478e6722aed052535", "committedDate": "2020-09-18T03:09:16Z", "message": "a little beautification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/bda05c989a413f2b9113691bdc29db4777f72a40", "committedDate": "2020-09-18T06:32:16Z", "message": "fix null point issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDczMjMx", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-493073231", "createdAt": "2020-09-22T01:01:17Z", "commit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowMToxN1rOHVnRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowNDowNlrOHVnTeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNTQ3OQ==", "bodyText": "_logger exists in the super class. There is no need to add a new one here.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492425479", "createdAt": "2020-09-22T01:01:17Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -38,9 +38,13 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n import org.apache.helix.monitoring.mbeans.exception.MetricException;\n import org.apache.helix.zookeeper.zkclient.ZkEventThread;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class ZkClientMonitor extends DynamicMBeanProvider {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkClientMonitor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjAzMQ==", "bodyText": "nit, it could be simpler to be:\n_zkClientPathMonitorMap.values().stream().foreach(...);", "url": "https://github.com/apache/helix/pull/1295#discussion_r492426031", "createdAt": "2020-09-22T01:03:48Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -109,12 +135,8 @@ public DynamicMBeanProvider register() throws JMException {\n     doRegister(attributeList, MBEAN_DESCRIPTION,\n         getObjectName(_monitorType, _monitorKey, _monitorInstanceName));\n     for (ZkClientPathMonitor.PredefinedPath path : ZkClientPathMonitor.PredefinedPath.values()) {\n-      // If monitor root path only, check if the current path is Root.\n-      // Otherwise, add monitors for every path.\n-      if (!_monitorRootOnly || path.equals(ZkClientPathMonitor.PredefinedPath.Root)) {\n-        _zkClientPathMonitorMap.put(path,\n-            new ZkClientPathMonitor(path, _monitorType, _monitorKey, _monitorInstanceName)\n-                .register());\n+      if (_zkClientPathMonitorMap.get(path) != null)  {\n+        _zkClientPathMonitorMap.get(path).register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNjEwNQ==", "bodyText": "Unnecessary?", "url": "https://github.com/apache/helix/pull/1295#discussion_r492426105", "createdAt": "2020-09-22T01:04:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -32,6 +32,9 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.DynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.HistogramDynamicMetric;\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n+import org.apache.helix.zookeeper.zkclient.ZkClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda05c989a413f2b9113691bdc29db4777f72a40"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7", "committedDate": "2020-09-22T01:45:28Z", "message": "some minor fix based on feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTI3MzY2", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-493127366", "createdAt": "2020-09-22T04:58:21Z", "commit": {"oid": "df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo1ODoyMVrOHVqPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo1ODoyMVrOHVqPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDI3OA==", "bodyText": "Unnecessary.", "url": "https://github.com/apache/helix/pull/1295#discussion_r492474278", "createdAt": "2020-09-22T04:58:21Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientPathMonitor.java", "diffHunk": "@@ -34,6 +34,7 @@\n import org.apache.helix.monitoring.mbeans.dynamicMBeans.SimpleDynamicMetric;\n \n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7f28e34fcfaf2fad7811ccdcf79a5acce03cb7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6299574b08c97ca30cf282cdad331de750408dd1", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/6299574b08c97ca30cf282cdad331de750408dd1", "committedDate": "2020-09-22T19:52:42Z", "message": "touch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6122a841da629e09b5e2699d4f2ddcdf51782d0", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/c6122a841da629e09b5e2699d4f2ddcdf51782d0", "committedDate": "2020-09-23T01:04:35Z", "message": "remove additional empty lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjE5NzUy", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-495219752", "createdAt": "2020-09-24T04:58:22Z", "commit": {"oid": "6299574b08c97ca30cf282cdad331de750408dd1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1ODoyMlrOHXJv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNDo1ODoyMlrOHXJv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAzOTAwOA==", "bodyText": "nit, but could you please revert this \"touch\" change?", "url": "https://github.com/apache/helix/pull/1295#discussion_r494039008", "createdAt": "2020-09-24T04:58:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/metric/ZkClientMonitor.java", "diffHunk": "@@ -96,7 +96,7 @@ public ZkClientMonitor(String monitorType, String monitorKey, String monitorInst\n \n     for (ZkClientPathMonitor.PredefinedPath path : ZkClientPathMonitor.PredefinedPath.values()) {\n       // If monitor root path only, check if the current path is Root.\n-      // Otherwise, add monitors for every path.\n+      // Otherwise, add monitors for every  path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6299574b08c97ca30cf282cdad331de750408dd1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d8138f3cfcfb32c5e73cf36ca9173faab5709c", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/24d8138f3cfcfb32c5e73cf36ca9173faab5709c", "committedDate": "2020-09-24T06:32:47Z", "message": "remove an space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599", "committedDate": "2020-09-24T21:53:02Z", "message": "touch helix-core to trigger a run"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzYxNTIx", "url": "https://github.com/apache/helix/pull/1295#pullrequestreview-500761521", "createdAt": "2020-10-01T22:31:55Z", "commit": {"oid": "9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozMTo1NVrOHbct_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozMTo1NVrOHbct_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDEyNA==", "bodyText": "Please remove the extra space before merge.", "url": "https://github.com/apache/helix/pull/1295#discussion_r498544124", "createdAt": "2020-10-01T22:31:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java", "diffHunk": "@@ -215,7 +215,7 @@ public void testANYtypeThrottle() throws InterruptedException {\n     DelayedTransition.setDelay(20);\n     DelayedTransition.enableThrottleRecord();\n \n-    // start another 3 nodes\n+    // start another 3 nodes ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb1df0c25b36d5fe008a97ab6ea459e6bb7b599"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a353d38f67510f2d39922bf94e2a91db635e287", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/1a353d38f67510f2d39922bf94e2a91db635e287", "committedDate": "2020-10-01T23:02:45Z", "message": "remove an extra space"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}