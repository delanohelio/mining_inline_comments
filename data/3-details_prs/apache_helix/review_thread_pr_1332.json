{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Njk0Mzc1", "number": 1332, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDo1MToxMFrOEd7ETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNDoxMVrOEeddnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODExOTE4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDo1MToxMFrOHJXo5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDo1NDozN1rOHJXqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NjUzNQ==", "bodyText": "Can we add more description here, such as if this is disabled, in the ZkClient's callback handleDataChange(Path, Data), you should expect the data is null.  Also, mention what is the default value if not set.", "url": "https://github.com/apache/helix/pull/1332#discussion_r479586535", "createdAt": "2020-08-29T00:51:10Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,19 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3298088e3bd29af822337676dd5589362902a0dd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NjkxNA==", "bodyText": "Sure. I'll this.", "url": "https://github.com/apache/helix/pull/1332#discussion_r479586914", "createdAt": "2020-08-29T00:54:37Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,19 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NjUzNQ=="}, "originalCommit": {"oid": "3298088e3bd29af822337676dd5589362902a0dd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODg0MjAwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzo1NjoxNlrOHJc-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMDoyNzo0M1rOHJdxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MzkyNw==", "bodyText": "By default, prefetch is enabled or disabled? Line 28 and 31 are conflict.", "url": "https://github.com/apache/helix/pull/1332#discussion_r479673927", "createdAt": "2020-08-29T17:56:16Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * By default, prefetch is disabled: ZkClient will not read data, so data object is passed as null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5044b62832a9b6e62787804e048c1fb12e6337cc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY4NzExOQ==", "bodyText": "I don't know how I wrote two conflicting sentences @____@ Addressed.", "url": "https://github.com/apache/helix/pull/1332#discussion_r479687119", "createdAt": "2020-08-29T20:27:43Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * By default, prefetch is disabled: ZkClient will not read data, so data object is passed as null.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MzkyNw=="}, "originalCommit": {"oid": "5044b62832a9b6e62787804e048c1fb12e6337cc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzczMTU3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoxNzowOVrOHKHxXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxMjoxN1rOHKJZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTEzMg==", "bodyText": "What is the use for this @retention ?", "url": "https://github.com/apache/helix/pull/1332#discussion_r480375132", "createdAt": "2020-08-31T20:17:09Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * If disabled({@code false}): ZkClient will not read data, so data object is passed as null.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ *\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change: data is null in\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}\n+ */\n @Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDA0OQ==", "bodyText": "@kaisun2000  It tells the Java compiler and JVM that the annotation should be available via reflection at runtime/class/source code. More details you could check jdk javadoc.", "url": "https://github.com/apache/helix/pull/1332#discussion_r480384049", "createdAt": "2020-08-31T20:35:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * If disabled({@code false}): ZkClient will not read data, so data object is passed as null.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ *\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change: data is null in\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}\n+ */\n @Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTEzMg=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NzQ3OQ==", "bodyText": "Right, is it a must here? I don't see we have something like this in other places, say participant side?", "url": "https://github.com/apache/helix/pull/1332#discussion_r480387479", "createdAt": "2020-08-31T20:42:13Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * If disabled({@code false}): ZkClient will not read data, so data object is passed as null.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ *\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change: data is null in\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}\n+ */\n @Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTEzMg=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4OTE1OA==", "bodyText": "By the way, just to confirm. After this fix, PreFetchChangeData is used to ZKClient? How about prefetch, who is using it? can you add comment here?", "url": "https://github.com/apache/helix/pull/1332#discussion_r480389158", "createdAt": "2020-08-31T20:45:41Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * If disabled({@code false}): ZkClient will not read data, so data object is passed as null.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ *\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change: data is null in\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}\n+ */\n @Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTEzMg=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMTg5MA==", "bodyText": "Prefetch is Helix's logic, should not be involved here in zkClient. The javadoc should stay in that interface, not this one.", "url": "https://github.com/apache/helix/pull/1332#discussion_r480401890", "createdAt": "2020-08-31T21:12:17Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/annotation/PreFetchChangedData.java", "diffHunk": "@@ -22,8 +22,25 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n \n-\n+/**\n+ * An annotation used to prefetch changed data for\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener} in ZkClient.\n+ * By default, prefetch is enabled: when ZkClient handles a data change event,\n+ * ZkClient will read data and pass data object to\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}.\n+ * If disabled({@code false}): ZkClient will not read data, so data object is passed as null.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * {@code @PreFetch(enabled = false)}\n+ *  public class MyCallback implements IZkDataListener\n+ * </pre>\n+ *\n+ * {@code @PreFetch(enabled = false)} means data will not be prefetched in ZkClient before\n+ * handling data change: data is null in\n+ * {@link org.apache.helix.zookeeper.zkclient.IZkDataListener#handleDataChange(String, Object)}\n+ */\n @Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTEzMg=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzc0NTU0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyMToxN1rOHKH5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNDozMFrOHKH_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NzI1Ng==", "bodyText": "Previously (in production) callbackhandler not using prefetch, do we verify?", "url": "https://github.com/apache/helix/pull/1332#discussion_r480377256", "createdAt": "2020-08-31T20:21:17Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -102,8 +102,7 @@\n import static org.apache.helix.HelixConstants.ChangeType.RESOURCE_CONFIG;\n import static org.apache.helix.HelixConstants.ChangeType.TARGET_EXTERNAL_VIEW;\n \n-\n-@PreFetch(enabled = false)\n+@PreFetchChangedData(enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3ODg3MA==", "bodyText": "@kaisun2000 Double verify here: #1331 (comment)", "url": "https://github.com/apache/helix/pull/1332#discussion_r480378870", "createdAt": "2020-08-31T20:24:30Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -102,8 +102,7 @@\n import static org.apache.helix.HelixConstants.ChangeType.RESOURCE_CONFIG;\n import static org.apache.helix.HelixConstants.ChangeType.TARGET_EXTERNAL_VIEW;\n \n-\n-@PreFetch(enabled = false)\n+@PreFetchChangedData(enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NzI1Ng=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzc1NDUyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/zkclient/TestPrefetchChangedData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNDoxMlrOHKH_UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0NDoxOVrOHKIlkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3ODcwNQ==", "bodyText": "3L is 3 milli second? This can be a source of test unstableness. Let us try 3 second. Using 3 second does not really mean you will wait 3 second anyway.\nnit: Also, define the waiting period using a constant static.", "url": "https://github.com/apache/helix/pull/1332#discussion_r480378705", "createdAt": "2020-08-31T20:24:12Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/zkclient/TestPrefetchChangedData.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.apache.helix.zookeeper.zkclient;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.impl.TestHelper;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.annotation.PreFetchChangedData;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPrefetchChangedData extends ZkTestBase {\n+  @Test\n+  public void testPrefetchChangedDataEnabled() throws InterruptedException {\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    ZkClient zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n+\n+    try {\n+      zkClient.createPersistent(path, \"v1\");\n+\n+      CountDownLatch countDownLatch = new CountDownLatch(1);\n+      PreFetchZkDataListener dataListener = new PreFetchZkDataListener(countDownLatch);\n+      zkClient.subscribeDataChanges(path, dataListener);\n+      zkClient.writeData(path, \"v2\");\n+\n+      Assert.assertTrue(countDownLatch.await(3L, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDQ4MA==", "bodyText": "@kaisun2000 await(3L, TimeUnit.SECONDS): it is 3 seconds.", "url": "https://github.com/apache/helix/pull/1332#discussion_r480384480", "createdAt": "2020-08-31T20:36:01Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/zkclient/TestPrefetchChangedData.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.apache.helix.zookeeper.zkclient;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.impl.TestHelper;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.annotation.PreFetchChangedData;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPrefetchChangedData extends ZkTestBase {\n+  @Test\n+  public void testPrefetchChangedDataEnabled() throws InterruptedException {\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    ZkClient zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n+\n+    try {\n+      zkClient.createPersistent(path, \"v1\");\n+\n+      CountDownLatch countDownLatch = new CountDownLatch(1);\n+      PreFetchZkDataListener dataListener = new PreFetchZkDataListener(countDownLatch);\n+      zkClient.subscribeDataChanges(path, dataListener);\n+      zkClient.writeData(path, \"v2\");\n+\n+      Assert.assertTrue(countDownLatch.await(3L, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3ODcwNQ=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4ODQ5Ng==", "bodyText": "Cool. Due to recent fixing unstable test, this is getting to be a habit to look for unstableness.\nLet us define a constant of this waiting for both test cases. Otherwise, looks good to me.", "url": "https://github.com/apache/helix/pull/1332#discussion_r480388496", "createdAt": "2020-08-31T20:44:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/zkclient/TestPrefetchChangedData.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.apache.helix.zookeeper.zkclient;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.helix.zookeeper.impl.TestHelper;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.helix.zookeeper.zkclient.annotation.PreFetchChangedData;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestPrefetchChangedData extends ZkTestBase {\n+  @Test\n+  public void testPrefetchChangedDataEnabled() throws InterruptedException {\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    ZkClient zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n+\n+    try {\n+      zkClient.createPersistent(path, \"v1\");\n+\n+      CountDownLatch countDownLatch = new CountDownLatch(1);\n+      PreFetchZkDataListener dataListener = new PreFetchZkDataListener(countDownLatch);\n+      zkClient.subscribeDataChanges(path, dataListener);\n+      zkClient.writeData(path, \"v2\");\n+\n+      Assert.assertTrue(countDownLatch.await(3L, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3ODcwNQ=="}, "originalCommit": {"oid": "5be9efec486c129923c6b56222be8a7a2ec1bcf8"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 925, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}