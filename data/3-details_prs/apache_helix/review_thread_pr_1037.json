{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Nzg0OTUw", "number": 1037, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyOToxMFrOEA-lng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxNjowNVrOECb0KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYwODk0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAbnormalStatesResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyOToxMFrOGcl2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoxMToyMlrOGctteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMzQ0Mg==", "bodyText": "Use a constant instead of 5000? TestHelper has a constant value built-in.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432633442", "createdAt": "2020-05-29T17:29:10Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAbnormalStatesResolver.java", "diffHunk": "@@ -64,4 +80,101 @@ public void testConfigureResolver() {\n     clusterConfig.setAbnormalStateResolverMap(Collections.emptyMap());\n     configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n   }\n+\n+  @Test(dependsOnMethods = \"testConfigureResolver\")\n+  public void testExcessiveTopStateResolver() {\n+    BestPossibleExternalViewVerifier verifier =\n+        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n+    Assert.assertTrue(verifier.verify(5000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MjIzNA==", "bodyText": "Sure, good point.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432762234", "createdAt": "2020-05-29T22:11:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAbnormalStatesResolver.java", "diffHunk": "@@ -64,4 +80,101 @@ public void testConfigureResolver() {\n     clusterConfig.setAbnormalStateResolverMap(Collections.emptyMap());\n     configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n   }\n+\n+  @Test(dependsOnMethods = \"testConfigureResolver\")\n+  public void testExcessiveTopStateResolver() {\n+    BestPossibleExternalViewVerifier verifier =\n+        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n+    Assert.assertTrue(verifier.verify(5000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMzQ0Mg=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYxMjc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMDoxM1rOGcl4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMDoxM1rOGcl4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDAzNA==", "bodyText": "gracefully\nAlso, it would be great if you could explain what the issue is instead of calling a \"double-topstates issue\" as this might not make much sense for readers without context.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432634034", "createdAt": "2020-05-29T17:30:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYxODY0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMTo1M1rOGcl8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MTowNFrOGcmOWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDk1OA==", "bodyText": "I think what you want to say here is:\n\"Note that Helix controller will eventually correct the fact that there are two top state replicas, but it may not happen immediately. This resolver exists to ensure that such cases are resolved right away.\"", "url": "https://github.com/apache/helix/pull/1037#discussion_r432634958", "createdAt": "2020-05-29T17:31:53Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzOTU3OA==", "bodyText": "Not exactly. Let me modify the description a little bit. But it is not about speed. It is still about correctness.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432639578", "createdAt": "2020-05-29T17:41:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDk1OA=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYyMzIyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMzoyNlrOGcl_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MTo0M1rOGcmPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTc0MA==", "bodyText": "checkCurrentStates I think is a better name for this method. or isCurrentStateValid\nor checkForCurrentStateViolation()", "url": "https://github.com/apache/helix/pull/1037#discussion_r432635740", "createdAt": "2020-05-29T17:33:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzOTkyOQ==", "bodyText": "I agree, let me change the method name.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432639929", "createdAt": "2020-05-29T17:41:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTc0MA=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYyOTgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNTo0N1rOGcmDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozMjoyNVrOGcnyeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNjg0Nw==", "bodyText": "computeCorrectedAssignment is clearer?", "url": "https://github.com/apache/helix/pull/1037#discussion_r432636847", "createdAt": "2020-05-29T17:35:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NTIxMA==", "bodyText": "Not really, this is not the corrected mapping, this is the next step of fixing.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432665210", "createdAt": "2020-05-29T18:32:25Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNjg0Nw=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYzNDk1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNzozM1rOGcmHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0NzowNFrOGfTcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzcyMw==", "bodyText": "I wonder if this would be too much of an overhead for each pipeline run?\nDo you think it would be better to try to come up with a way to cache currentState mappings and compare diffs (going from O(n) -> O(1) check by storing results across pipelines).\nFor heavy users, this O(n) computation might become a significant bottleneck if done every pipeline.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432637723", "createdAt": "2020-05-29T17:37:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NDU4MQ==", "bodyText": "Could you please clarify why comparing diff will bring the complexity from O(n) to O(1)?", "url": "https://github.com/apache/helix/pull/1037#discussion_r432664581", "createdAt": "2020-05-29T18:31:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzcyMw=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1ODEzMA==", "bodyText": "@jiajunwang In CurrentStateOutput, could we add a top state counter map so we could cache the top state counter, like below? Then we could avoid that stream filter computation? Tradeoff is we need a bit more memory for the cache. But most of them are just references.\n  public void setCurrentState(String resourceName, Partition partition, String instanceName,\n      String state) {\n    (...... current code ......)\n    // Counter number of top state replicas for a single top state model. \n    if (state.equals(stateModelDef.getTopState())) {\n      Map<String, Integer> counterMap =\n          _topStateCounter.computeIfAbsent(resourceName, k -> new HashMap<>())\n              .computeIfAbsent(partition, k -> new HashMap<>());\n      counterMap.put(state, counterMap.getOrDefault(state, 0) + 1);\n    }\n  }\n\nNot sure if we need to optimize this. Maybe you could test it. It seems for this part, the time complexity is down from O(n) to O(1), but I am not sure what the actual time saving is, considering the whole pipeline. If the whole pipeline complexity is O(N^2), with this optimization, it is O(N), that may help. If the whole pipeline is O(2 * N), with this optimization, still O(N).", "url": "https://github.com/apache/helix/pull/1037#discussion_r435058130", "createdAt": "2020-06-04T07:48:31Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzcyMw=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzU0Mg==", "bodyText": "I see. In that case, we should add this to the cache instead of CurrentStateOutput. The cache is \"protected\" by the selective update, so it will help to reduce some calculations.\nThat is a valid idea. But that requires more changes. For this specific usage, changing the fundamental cache class seems to be not worthy.\nMoreover, if the resolver is not enabled, then we don't do the calculation at all.\nLet me add a TODO there, if we have more usage of this count, then we shall do it.", "url": "https://github.com/apache/helix/pull/1037#discussion_r435477542", "createdAt": "2020-06-04T18:47:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzcyMw=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYzOTc1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozOTowOFrOGcmKQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozMjo0N1rOGcnzLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODUyOA==", "bodyText": "recoverMap -> correctedStateMap?", "url": "https://github.com/apache/helix/pull/1037#discussion_r432638528", "createdAt": "2020-05-29T17:39:08Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NTM5MA==", "bodyText": "same reason here, correctedStateMap is not accurate.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432665390", "createdAt": "2020-05-29T18:32:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODUyOA=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY0MjQ0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozOTo1N1rOGcmL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozOTo1N1rOGcmL_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODk3NQ==", "bodyText": "What is the potential data issue? It would be good to explain this somewhere.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432638975", "createdAt": "2020-05-29T17:39:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY0ODI2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MTozOVrOGcmPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MTozOVrOGcmPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzOTg4OQ==", "bodyText": "no need for \"the\" in the variable name", "url": "https://github.com/apache/helix/pull/1037#discussion_r432639889", "createdAt": "2020-05-29T17:41:39Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even\n+    // during the recovery process.\n+    boolean hasReservedTheTopState = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDY2MTU5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NTo0MVrOGcmYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDowNDo1NVrOGcvRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjA0OQ==", "bodyText": "You mean the rebalancer will continue to run this for all N resources until everything has been resolved?\nOr will it check for each resource, say, resource N, I check isValid() and correctCurrentStates() until isValid() returns true?\nWhat I am not too unsure about is what you said about \"new current state\" being \"still invalid\". Is it possible that the result is invalid after correction?", "url": "https://github.com/apache/helix/pull/1037#discussion_r432642049", "createdAt": "2020-05-29T17:45:41Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even\n+    // during the recovery process.\n+    boolean hasReservedTheTopState = false;\n+    for (String instance : recoverMap.keySet()) {\n+      if (recoverMap.get(instance).equals(stateModelDef.getTopState())) {\n+        if (hasReservedTheTopState) {\n+          recoverMap.put(instance, recoveryState);\n+        } else {\n+          hasReservedTheTopState = true;\n+        }\n+      }\n+    }\n+    // Here's what we expect to happen next:\n+    // 1. The partition assignment is changed to the proposed recovery state. Or it may be halfway\n+    // there.\n+    // 2. If the new current state is still invalid, then continue fixing it with the same logic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NzI3NQ==", "bodyText": "There is no other resource considered here. Let me add \"then the resolver continues fixing it with the same logic.\"", "url": "https://github.com/apache/helix/pull/1037#discussion_r432787275", "createdAt": "2020-05-30T00:01:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even\n+    // during the recovery process.\n+    boolean hasReservedTheTopState = false;\n+    for (String instance : recoverMap.keySet()) {\n+      if (recoverMap.get(instance).equals(stateModelDef.getTopState())) {\n+        if (hasReservedTheTopState) {\n+          recoverMap.put(instance, recoveryState);\n+        } else {\n+          hasReservedTheTopState = true;\n+        }\n+      }\n+    }\n+    // Here's what we expect to happen next:\n+    // 1. The partition assignment is changed to the proposed recovery state. Or it may be halfway\n+    // there.\n+    // 2. If the new current state is still invalid, then continue fixing it with the same logic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjA0OQ=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4Nzc1NQ==", "bodyText": "What I am not too unsure about is what you said about \"new current state\" being \"still invalid\". Is it possible that the result is invalid after correction?\n\nI think that's why you have the question why the method is named computeRecoveryAssignment instead of computeCorrectedAssignment. The result is push the rebalancer to move one step toward the fix. But it is not necessarily fixing the states directly. Like in this case, it cannot be done within one step without impact the availability. This is the first point.\nSecondly, even for some resolvers, they fix the things in one step, there is no guarantee that the participant will finish the state transition immediately.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432787755", "createdAt": "2020-05-30T00:04:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even\n+    // during the recovery process.\n+    boolean hasReservedTheTopState = false;\n+    for (String instance : recoverMap.keySet()) {\n+      if (recoverMap.get(instance).equals(stateModelDef.getTopState())) {\n+        if (hasReservedTheTopState) {\n+          recoverMap.put(instance, recoveryState);\n+        } else {\n+          hasReservedTheTopState = true;\n+        }\n+      }\n+    }\n+    // Here's what we expect to happen next:\n+    // 1. The partition assignment is changed to the proposed recovery state. Or it may be halfway\n+    // there.\n+    // 2. If the new current state is still invalid, then continue fixing it with the same logic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjA0OQ=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTIxMzA4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1ODoyNlrOGcr3Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDowNjo1N1rOGcvSWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMTk2Mg==", "bodyText": "I would suggest to put more comments here. I can understand the reason that leave a top state for the host not for first in preference list can help reduce the resetting work. But may be other people may confused with your statement in description that resetting all top state.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432731962", "createdAt": "2020-05-29T20:58:26Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4ODA1Ng==", "bodyText": "That part has been covered in the below section \"Here's what we expect to happen next:\". There, the 3rd point explains how the rebalancer reset all top state eventually.", "url": "https://github.com/apache/helix/pull/1037#discussion_r432788056", "createdAt": "2020-05-30T00:06:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that graceful fixes double-topstates issue for the single topstate\n+ * state model.\n+ * Note the regular Helix rebalance pipeline will also remove the excessive top state replica.\n+ * However, the default rebalancer logic cannot guarantee a clean resolution. For example, if the\n+ * double-topstates situation has already impact the data of the top state replicas, then the\n+ * controller should reset both of them, then bring back one top state replica on the right\n+ * allocation. For the application which has such a requirement, they should use this resolver or\n+ * a more advanced resolver which check the application data to ensure the resolution is complete.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean isCurrentStatesValid(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {\n+      return true;\n+    }\n+    if (currentStateOutput.getCurrentStateMap(resourceName, partition).values().stream()\n+        .filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public Map<String, String> computeRecoveryAssignment(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef,\n+      List<String> preferenceList) {\n+    Map<String, String> currentStateMap =\n+        currentStateOutput.getCurrentStateMap(resourceName, partition);\n+    if (isCurrentStatesValid(currentStateOutput, resourceName, partition, stateModelDef)) {\n+      // This method should not be triggered when the mapping is valid.\n+      // Log the warning for debug purposes.\n+      LOG.warn(\"The input current state map {} is valid, return the original current state.\",\n+          currentStateMap);\n+      return currentStateMap;\n+    }\n+\n+    Map<String, String> recoverMap = new HashMap<>(currentStateMap);\n+    String recoveryState = stateModelDef\n+        .getNextStateForTransition(stateModelDef.getTopState(), stateModelDef.getInitialState());\n+\n+    // 1. We have to reset the expected top state replica host if it is hosting the top state\n+    // replica. Otherwise, the potential data issue will never be fixed there.\n+    if (preferenceList != null && !preferenceList.isEmpty()) {\n+      String expectedTopStateHost = preferenceList.get(0);\n+      if (recoverMap.get(expectedTopStateHost).equals(stateModelDef.getTopState())) {\n+        recoverMap.put(expectedTopStateHost, recoveryState);\n+      }\n+    }\n+\n+    // 2. To minimize the impact of the resolution, we want to reserve one top state replica even", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMTk2Mg=="}, "originalCommit": {"oid": "8d0b0c091de5fe90828689e9944847eafc00e3d1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODI5NzYyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowMzo0MFrOGepcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjo0NTowMlrOGe35Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUzMw==", "bodyText": "Just a question. Now we only support single top state. Are we gonna support user defined number of top states? Say not all replicas are top state but 2 masters or something.\nWhy I am asking this is because  maybe sometimes there could be non-top state requires to be resolved as well.", "url": "https://github.com/apache/helix/pull/1037#discussion_r434789533", "createdAt": "2020-06-03T19:03:40Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean checkCurrentStates(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mjc3MA==", "bodyText": "Not for this resolver.\n\nIf we have multiple top states requirements, then we need to have different resolvers.\nAs for non-top state, you mean we allow the resource to have no top state at all although the state model definition requires more than zero? Not sure how it can be done given the current rebalancer logic, but it is not considered as an abnormal for this resolver.", "url": "https://github.com/apache/helix/pull/1037#discussion_r434792770", "createdAt": "2020-06-03T19:09:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean checkCurrentStates(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUzMw=="}, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3ODgxNw==", "bodyText": "For 1 is clear to me. But the question becomes if we need more than 1 resolver, how we gonna handle it.", "url": "https://github.com/apache/helix/pull/1037#discussion_r434978817", "createdAt": "2020-06-04T03:58:53Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean checkCurrentStates(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUzMw=="}, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NTgxNw==", "bodyText": "This is controlled by the cluster config, if you still remember my previous PR #1028\nThe assumption is that in a certain cluster, one state model has only one resolver configured.", "url": "https://github.com/apache/helix/pull/1037#discussion_r434985817", "createdAt": "2020-06-04T04:29:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean checkCurrentStates(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUzMw=="}, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjI3MA==", "bodyText": "I am fine with current top state one. But just thinking about the non-top state scenario. Because one resolver most likely works only for top state resolving. Anyway, we can think about it later.", "url": "https://github.com/apache/helix/pull/1037#discussion_r435026270", "createdAt": "2020-06-04T06:45:02Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top\n+   * state state model.\n+   */\n+  @Override\n+  public boolean checkCurrentStates(final CurrentStateOutput currentStateOutput,\n+      final String resourceName, final Partition partition, StateModelDefinition stateModelDef) {\n+    if (!stateModelDef.isSingleTopStateModel()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUzMw=="}, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTg4MzI5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxNjowNVrOGe4yGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODozNToxMVrOGfS4-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MDc5Mg==", "bodyText": "More than 1 top state?\n\"a single top state model\"?", "url": "https://github.com/apache/helix/pull/1037#discussion_r435040792", "createdAt": "2020-06-04T07:16:05Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2ODUzOQ==", "bodyText": "Good catch", "url": "https://github.com/apache/helix/pull/1037#discussion_r435468539", "createdAt": "2020-06-04T18:35:11Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/ExcessiveTopStateResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The abnormal state resolver that gracefully fixes the abnormality of excessive top states for\n+ * single-topstate state model. For example, two replcias of a MasterSlave partition are assigned\n+ * with the Master state at the same time. This could be caused by a network partitioning or the\n+ * other unexpected issues.\n+ *\n+ * The resolver checks for the abnormality and computes recovery assignment which triggers the\n+ * rebalancer to eventually reset all the top state replias for once. After the resets, only one\n+ * replica will be assigned the top state.\n+ *\n+ * Note that without using this resolver, the regular Helix rebalance pipeline also removes the\n+ * excessive top state replicas. However, the default logic does not force resetting ALL the top\n+ * state replicas. Since the multiple top states situation may break application data, the default\n+ * resolution won't be enough to fix the potential problem.\n+ */\n+public class ExcessiveTopStateResolver implements AbnormalStateResolver {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExcessiveTopStateResolver.class);\n+\n+  /**\n+   * The current states are not valid if there are more than 2 top state replicas for a single top", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MDc5Mg=="}, "originalCommit": {"oid": "4cb4ddd5e981dd527f67bb6cb086b11dc09d1fdc"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1092, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}