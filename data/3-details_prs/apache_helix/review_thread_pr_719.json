{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjE2Nzcw", "number": 719, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoyNTo0MVrODc2MxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowODo1OVrODdHKiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTc0NzI1OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoyNTo0MVrOFlHFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoxNDoyMVrOFlh--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzcxOQ==", "bodyText": "This is a mock service not a test", "url": "https://github.com/apache/helix/pull/719#discussion_r374457719", "createdAt": "2020-02-04T03:25:41Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());\n+      List<String> shardingKeyList =\n+          OBJECT_MAPPER.readValue(getResponse.getEntity().getContent(), List.class);\n+      System.out.println(shardingKeyList);\n+      Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest =\n+        new HttpPost(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+      System.out.println(postResponse.toString());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Shutdown\n+    server.stopServer();\n+    System.out.println(\"MockMetadataStoreDirectoryServer test passed!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMjkwNQ==", "bodyText": "Exactly. This is a mock service, not a test.", "url": "https://github.com/apache/helix/pull/719#discussion_r374502905", "createdAt": "2020-02-04T07:05:11Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());\n+      List<String> shardingKeyList =\n+          OBJECT_MAPPER.readValue(getResponse.getEntity().getContent(), List.class);\n+      System.out.println(shardingKeyList);\n+      Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest =\n+        new HttpPost(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+      System.out.println(postResponse.toString());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Shutdown\n+    server.stopServer();\n+    System.out.println(\"MockMetadataStoreDirectoryServer test passed!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzcxOQ=="}, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NjI3Nw==", "bodyText": "So I think we need to revise the  output message. I did not sse any testing or verification logic for testing purpose.", "url": "https://github.com/apache/helix/pull/719#discussion_r374896277", "createdAt": "2020-02-04T20:09:49Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());\n+      List<String> shardingKeyList =\n+          OBJECT_MAPPER.readValue(getResponse.getEntity().getContent(), List.class);\n+      System.out.println(shardingKeyList);\n+      Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest =\n+        new HttpPost(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+      System.out.println(postResponse.toString());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Shutdown\n+    server.stopServer();\n+    System.out.println(\"MockMetadataStoreDirectoryServer test passed!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzcxOQ=="}, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NjgxOA==", "bodyText": "Also, what I am confused here is: if it is standalone service, user can start with call main function. But how can they stop it?", "url": "https://github.com/apache/helix/pull/719#discussion_r374896818", "createdAt": "2020-02-04T20:11:02Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());\n+      List<String> shardingKeyList =\n+          OBJECT_MAPPER.readValue(getResponse.getEntity().getContent(), List.class);\n+      System.out.println(shardingKeyList);\n+      Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest =\n+        new HttpPost(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+      System.out.println(postResponse.toString());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Shutdown\n+    server.stopServer();\n+    System.out.println(\"MockMetadataStoreDirectoryServer test passed!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzcxOQ=="}, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5ODQyNw==", "bodyText": "@dasahcc Let's sync offline.", "url": "https://github.com/apache/helix/pull/719#discussion_r374898427", "createdAt": "2020-02-04T20:14:21Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());\n+      List<String> shardingKeyList =\n+          OBJECT_MAPPER.readValue(getResponse.getEntity().getContent(), List.class);\n+      System.out.println(shardingKeyList);\n+      Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest =\n+        new HttpPost(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+      System.out.println(postResponse.toString());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    // Shutdown\n+    server.stopServer();\n+    System.out.println(\"MockMetadataStoreDirectoryServer test passed!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzcxOQ=="}, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTc0ODEzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoyNjoxOFrOFlHF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzowNDo0NVrOFlJ1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1Nzg0Mw==", "bodyText": "Would you like to start the server per test? Or per test class?", "url": "https://github.com/apache/helix/pull/719#discussion_r374457843", "createdAt": "2020-02-04T03:26:18Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMjc3Mg==", "bodyText": "The purpose of this class is to allow Helix applications to build an integration suite out of realm-aware Helix APIs. They would start an instance of this server and feed in the server endpoint into Helix APIs' constructor.\nE.g.) Create a MockMetadataStoreDirectoryServer and start -> get \"localhost:1234\" as the MSDS endpoint (Helix REST endpoint).\nThen they can create new HelixManager(\"localhost:1234\", XXX, XXX...) next.\nDoes this make sense?", "url": "https://github.com/apache/helix/pull/719#discussion_r374502772", "createdAt": "2020-02-04T07:04:45Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1Nzg0Mw=="}, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODUyNjgxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowODo1OVrOFlh1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDowODo1OVrOFlh1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NTg5OA==", "bodyText": "Make it as log instead of printing.", "url": "https://github.com/apache/helix/pull/719#discussion_r374895898", "createdAt": "2020-02-04T20:08:59Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/mock/MockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.apache.helix.rest.metadatastore.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.testng.Assert;\n+\n+\n+/**\n+ * Mock HTTP server that serves GET of metadata store routing data only.\n+ * Helix applications may use this to write unit/integration tests without having to set up the routing ZooKeeper and creating routing data ZNodes.\n+ */\n+public class MockMetadataStoreDirectoryServer {\n+\n+  private static final String REST_PREFIX = \"/admin/v2/namespaces/\";\n+  private static final String ZK_REALM_ENDPOINT = \"/METADATA_STORE_ROUTING_DATA/\";\n+  private static final int NOT_IMPLEMENTED = 501;\n+  private static final int OK = 200;\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  private final String _hostname;\n+  private final int _mockServerPort;\n+  private final Map<String, List<String>> _routingDataMap;\n+  private final String _namespace;\n+  private HttpServer _server;\n+  private final ThreadPoolExecutor _executor =\n+      (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n+\n+  private enum SupportedHttpVerbs {\n+    GET\n+  }\n+\n+  /**\n+   * Constructs a Mock MSDS.\n+   * A sample GET might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param hostname hostname for the REST server. E.g.) \"localhost\"\n+   * @param port port to use. E.g.) 11000\n+   * @param namespace the Helix REST namespace to mock. E.g.) \"MY-HELIX-NAMESPACE\"\n+   * @param routingData <ZK realm, List of ZK path sharding keys>\n+   */\n+  public MockMetadataStoreDirectoryServer(String hostname, int port, String namespace,\n+      Map<String, List<String>> routingData) {\n+    if (hostname == null || hostname.isEmpty()) {\n+      throw new IllegalArgumentException(\"hostname cannot be null or empty!\");\n+    }\n+    if (port < 0 || port > 65535) {\n+      throw new IllegalArgumentException(\"port is not a valid port!\");\n+    }\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    if (routingData == null || routingData.isEmpty()) {\n+      throw new IllegalArgumentException(\"routingData cannot be null or empty!\");\n+    }\n+    _hostname = hostname;\n+    _mockServerPort = port;\n+    _namespace = namespace;\n+    _routingDataMap = routingData;\n+  }\n+\n+  public void startServer()\n+      throws IOException {\n+    _server = HttpServer.create(new InetSocketAddress(_hostname, _mockServerPort), 0);\n+    generateContexts();\n+    _server.setExecutor(_executor);\n+    _server.start();\n+    System.out.println(\"Started Mock MSDS at \" + _hostname + \":\" + _mockServerPort + \"!\");\n+  }\n+\n+  public void stopServer() {\n+    _server.stop(0);\n+    _executor.shutdown();\n+  }\n+\n+  /**\n+   * Dynamically generates HTTP server contexts based on the routing data given.\n+   */\n+  private void generateContexts() {\n+    _routingDataMap.forEach((zkRealm, shardingKeyList) -> _server\n+        .createContext(REST_PREFIX + _namespace + ZK_REALM_ENDPOINT + zkRealm, httpExchange -> {\n+          OutputStream outputStream = httpExchange.getResponseBody();\n+          String htmlResponse;\n+          if (SupportedHttpVerbs.GET.name().equals(httpExchange.getRequestMethod())) {\n+            htmlResponse = OBJECT_MAPPER.writeValueAsString(shardingKeyList);\n+            httpExchange.sendResponseHeaders(OK, htmlResponse.length());\n+          } else {\n+            htmlResponse = httpExchange.getRequestMethod() + \" is not supported!\\n\";\n+            httpExchange.sendResponseHeaders(NOT_IMPLEMENTED, htmlResponse.length());\n+          }\n+          outputStream.write(htmlResponse.getBytes());\n+          outputStream.flush();\n+          outputStream.close();\n+        }));\n+  }\n+\n+  /**\n+   * Spins up MockMetadataStoreDirectoryServer and performs tests.\n+   * A sample curl GET query might look like the following:\n+   *     curl localhost:11000/admin/v2/namespaces/MY-HELIX-NAMESPACE/METADATA_STORE_ROUTING_DATA/zk-1\n+   * @param args\n+   * @throws IOException\n+   */\n+  public static void main(String[] args)\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request\n+    String testZkRealm = \"zk-0\";\n+    HttpGet getRequest =\n+        new HttpGet(endpoint + REST_PREFIX + namespace + ZK_REALM_ENDPOINT + testZkRealm);\n+    try {\n+      CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+      System.out.println(getResponse.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66476a572a41a6e68ea2e473acffe701de07552d"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1587, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}