{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTA5NzQ0", "number": 1111, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxMjozM1rOEIIvow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTozOVrOEKN_8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTY3MzMxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxMjozM1rOGn613Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDo0ODo0N1rOGqEsNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMTcwOQ==", "bodyText": "This is not epoch time. epoch time is not at milisecond but second level.", "url": "https://github.com/apache/helix/pull/1111#discussion_r444511709", "createdAt": "2020-06-23T21:12:33Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -522,12 +538,25 @@ public long getExecuteStartTimeStamp() {\n \n   /**\n    * Get the time that this message was created\n-   * @return UNIX timestamp\n+   * @return UNIX epoch timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDIzMQ==", "bodyText": "Fixed", "url": "https://github.com/apache/helix/pull/1111#discussion_r446770231", "createdAt": "2020-06-29T04:48:47Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -522,12 +538,25 @@ public long getExecuteStartTimeStamp() {\n \n   /**\n    * Get the time that this message was created\n-   * @return UNIX timestamp\n+   * @return UNIX epoch timestamp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMTcwOQ=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTY3NzUzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxNDowMlrOGn64iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozODoyNVrOGpq9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMjM5NQ==", "bodyText": "Do we want to have this param for our internal message report or including for some user defined messages? It is hard to define the time from user perspective.", "url": "https://github.com/apache/helix/pull/1111#discussion_r444512395", "createdAt": "2020-06-23T21:14:02Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -117,6 +120,11 @@\n   // Currently, the field is only used for invalidating messages in controller's message cache.\n   private boolean _expired = false;\n \n+  // The expect period of time (in ms) that a message should be completed, default 1 day\n+  public static final long MESSAGE_EXPECT_COMPLETION_PERIOD = HelixUtil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODY5NQ==", "bodyText": "We have message.setExpectedCompleteTime(), if user would like to set their customer time for different message, they can do that, right?", "url": "https://github.com/apache/helix/pull/1111#discussion_r446348695", "createdAt": "2020-06-26T18:38:25Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -117,6 +120,11 @@\n   // Currently, the field is only used for invalidating messages in controller's message cache.\n   private boolean _expired = false;\n \n+  // The expect period of time (in ms) that a message should be completed, default 1 day\n+  public static final long MESSAGE_EXPECT_COMPLETION_PERIOD = HelixUtil", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMjM5NQ=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTY4MTM5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxNToxNVrOGn665A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTo0NDowMVrOGqok8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMjk5Ng==", "bodyText": "We can combine it as:\nlong completionDue = _record.getLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), getCreateTimeStamp() + MESSAGE_EXPECT_COMPLETION_PERIOD);", "url": "https://github.com/apache/helix/pull/1111#discussion_r444512996", "createdAt": "2020-06-23T21:15:15Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -522,12 +538,25 @@ public long getExecuteStartTimeStamp() {\n \n   /**\n    * Get the time that this message was created\n-   * @return UNIX timestamp\n+   * @return UNIX epoch timestamp\n    */\n   public long getCreateTimeStamp() {\n     return _record.getLongField(Attributes.CREATE_TIMESTAMP.toString(), 0L);\n   }\n \n+  /**\n+   * Get the time that the message was expected to be completed\n+   * @return UNIX epoch timestamp\n+   */\n+  public long getCompletionDueTimeStamp() {\n+    long completionDue = _record.getLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), 0L);\n+    if (completionDue == 0) {\n+      completionDue = getCreateTimeStamp() + MESSAGE_EXPECT_COMPLETION_PERIOD;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0OTMwNQ==", "bodyText": "I considered this, but think to avoid calling getCreateTimeStamp() everytime since it involves string passing, may not be big deal though.", "url": "https://github.com/apache/helix/pull/1111#discussion_r446349305", "createdAt": "2020-06-26T18:39:53Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -522,12 +538,25 @@ public long getExecuteStartTimeStamp() {\n \n   /**\n    * Get the time that this message was created\n-   * @return UNIX timestamp\n+   * @return UNIX epoch timestamp\n    */\n   public long getCreateTimeStamp() {\n     return _record.getLongField(Attributes.CREATE_TIMESTAMP.toString(), 0L);\n   }\n \n+  /**\n+   * Get the time that the message was expected to be completed\n+   * @return UNIX epoch timestamp\n+   */\n+  public long getCompletionDueTimeStamp() {\n+    long completionDue = _record.getLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), 0L);\n+    if (completionDue == 0) {\n+      completionDue = getCreateTimeStamp() + MESSAGE_EXPECT_COMPLETION_PERIOD;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMjk5Ng=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1ODE5Mg==", "bodyText": "To be safe, shall we define a constant COMPLETION_DUE_TIMESTAMP_NOT_SET = -1 for the default value?", "url": "https://github.com/apache/helix/pull/1111#discussion_r447358192", "createdAt": "2020-06-30T01:44:01Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -522,12 +538,25 @@ public long getExecuteStartTimeStamp() {\n \n   /**\n    * Get the time that this message was created\n-   * @return UNIX timestamp\n+   * @return UNIX epoch timestamp\n    */\n   public long getCreateTimeStamp() {\n     return _record.getLongField(Attributes.CREATE_TIMESTAMP.toString(), 0L);\n   }\n \n+  /**\n+   * Get the time that the message was expected to be completed\n+   * @return UNIX epoch timestamp\n+   */\n+  public long getCompletionDueTimeStamp() {\n+    long completionDue = _record.getLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), 0L);\n+    if (completionDue == 0) {\n+      completionDue = getCreateTimeStamp() + MESSAGE_EXPECT_COMPLETION_PERIOD;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMjk5Ng=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTY4NDEwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxNjowN1rOGn68cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTozODoxM1rOGqoedw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMzM5NQ==", "bodyText": "Do we need any validation here? For example, it timestamp already < currentmilisecond.", "url": "https://github.com/apache/helix/pull/1111#discussion_r444513395", "createdAt": "2020-06-23T21:16:07Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -173,6 +181,14 @@ public void setCreateTimeStamp(long timestamp) {\n     _record.setLongField(Attributes.CREATE_TIMESTAMP.toString(), timestamp);\n   }\n \n+  /**\n+   * Set the time that the message was expected to be completed\n+   * @param timestamp a UNIX epoch timestamp\n+   */\n+  public void setCompletionDueTimeStamp(long timestamp) {\n+    _record.setLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NTY4NQ==", "bodyText": "Is that a problem, for example, I may set an time before current time to invalid the message immediately?", "url": "https://github.com/apache/helix/pull/1111#discussion_r446355685", "createdAt": "2020-06-26T18:54:05Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -173,6 +181,14 @@ public void setCreateTimeStamp(long timestamp) {\n     _record.setLongField(Attributes.CREATE_TIMESTAMP.toString(), timestamp);\n   }\n \n+  /**\n+   * Set the time that the message was expected to be completed\n+   * @param timestamp a UNIX epoch timestamp\n+   */\n+  public void setCompletionDueTimeStamp(long timestamp) {\n+    _record.setLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMzM5NQ=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1NjUzNQ==", "bodyText": "Is this method set by the controller or the participant?\nIf controller, can we just update it when set the create time? So we don't need to consider validating.\nOr, if the messages are created with different expected run time, then we can add the expected run time as the parameter. That logic would easier to justify (and easier to valid) compared with passing the exact due timestamp.\nAnd I am thinking that it might be better if the participant updates it. Since 1. participant knows the estimation better. 2. if the participant has not read the message yet, then we probably don't want to mark it as a past-due message.", "url": "https://github.com/apache/helix/pull/1111#discussion_r447356535", "createdAt": "2020-06-30T01:38:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -173,6 +181,14 @@ public void setCreateTimeStamp(long timestamp) {\n     _record.setLongField(Attributes.CREATE_TIMESTAMP.toString(), timestamp);\n   }\n \n+  /**\n+   * Set the time that the message was expected to be completed\n+   * @param timestamp a UNIX epoch timestamp\n+   */\n+  public void setCompletionDueTimeStamp(long timestamp) {\n+    _record.setLongField(Attributes.COMPLETION_DUE_TIMESTAMP.name(), timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxMzM5NQ=="}, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTY4OTcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxNzo1NlrOGn6_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToxNzo1NlrOGn6_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxNDI3MA==", "bodyText": "pastDueMsgCount", "url": "https://github.com/apache/helix/pull/1111#discussion_r444514270", "createdAt": "2020-06-23T21:17:56Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -289,6 +288,32 @@ public void setClusterInstanceStatus(Set<String> liveInstanceSet, Set<String> in\n           }\n         }\n       }\n+\n+      // update all message related gauges\n+      long now = System.currentTimeMillis();\n+      long totalMsgQueueSize = 0L;\n+      long maxInstanceMsgQueueSize = 0L;\n+      long totalPastdueMsgSize = 0L;\n+      for (String instance : instanceMessageMap.keySet()) {\n+        Set<Message> messages = instanceMessageMap.get(instance);\n+        InstanceMonitor bean = _instanceMonitorMap.get(instance);\n+\n+        long msgQueueSize = messages.size();\n+        bean.updateMessageQueueSize(msgQueueSize);\n+        totalMsgQueueSize += msgQueueSize;\n+        if (msgQueueSize > maxInstanceMsgQueueSize) {\n+          maxInstanceMsgQueueSize = msgQueueSize;\n+        }\n+\n+        long pastdueMsgCount = messages.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9abe2aa5a57771962e16bbf80c6d30f47bdd491b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODE1ODQxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTo1NDo0M1rOGqow5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0NToyNFrOGr0yjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM2MTI1Mw==", "bodyText": "nit, can we organically add the new logic to the existing one. As you can see the logic is,\n\nensure instance mbeans created\ndo the metric data calculation\nupdate the metrics\n\nCan we split the new logic into 2 parts and put the logic to the corresponding sections 2 and 3?\n\nWe have some check regarding the monitor objects there.\nWe want to keep the structure of the code.", "url": "https://github.com/apache/helix/pull/1111#discussion_r447361253", "createdAt": "2020-06-30T01:54:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -289,6 +288,32 @@ public void setClusterInstanceStatus(Set<String> liveInstanceSet, Set<String> in\n           }\n         }\n       }\n+\n+      // update all message related gauges", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjg2Mg==", "bodyText": "Merged the logic into existing instance bean update loop.", "url": "https://github.com/apache/helix/pull/1111#discussion_r448606862", "createdAt": "2020-07-01T20:45:24Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -289,6 +288,32 @@ public void setClusterInstanceStatus(Set<String> liveInstanceSet, Set<String> in\n           }\n         }\n       }\n+\n+      // update all message related gauges", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM2MTI1Mw=="}, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODE3ODQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjowNTowMVrOGqo8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0NTo0OVrOGr0zNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM2NDE4NQ==", "bodyText": "I don't have strong preference here.\n\nShall protected or package-private enough here?\nOr, on the other hand, with these two methods made to the public, we can avoid several test codes using INSTANCE_DN_KEY and RESOURCE_DN_KEY directly. Not a must in this PR, though.", "url": "https://github.com/apache/helix/pull/1111#discussion_r447364185", "createdAt": "2020-06-30T02:05:01Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -881,7 +910,7 @@ public String clusterBeanName() {\n    * @param instanceName\n    * @return instance bean name\n    */\n-  private String getInstanceBeanName(String instanceName) {\n+  public String getInstanceBeanName(String instanceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNzAyOQ==", "bodyText": "I changed all getXXXBeanName() methods to protected.", "url": "https://github.com/apache/helix/pull/1111#discussion_r448607029", "createdAt": "2020-07-01T20:45:49Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -881,7 +910,7 @@ public String clusterBeanName() {\n    * @param instanceName\n    * @return instance bean name\n    */\n-  private String getInstanceBeanName(String instanceName) {\n+  public String getInstanceBeanName(String instanceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM2NDE4NQ=="}, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUwNTc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTozOVrOGrIm-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoxODo1NFrOGr0Deg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzAwMg==", "bodyText": "This is legacy way of converting times. Better to use TimeUnit.DAYS.toMillis(1);", "url": "https://github.com/apache/helix/pull/1111#discussion_r447883002", "createdAt": "2020-06-30T18:09:39Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -117,6 +120,11 @@\n   // Currently, the field is only used for invalidating messages in controller's message cache.\n   private boolean _expired = false;\n \n+  // The expect period of time (in ms) that a message should be completed, default 1 day\n+  public static final long MESSAGE_EXPECT_COMPLETION_PERIOD = HelixUtil\n+      .getSystemPropertyAsLong(SystemPropertyKeys.MESSAGE_EXPECTED_COMPLETION_PERIOD,\n+          24 * 60 * 60 * 1000 /* 1 day in ms */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NDgxMA==", "bodyText": "Neat.", "url": "https://github.com/apache/helix/pull/1111#discussion_r448594810", "createdAt": "2020-07-01T20:18:54Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -117,6 +120,11 @@\n   // Currently, the field is only used for invalidating messages in controller's message cache.\n   private boolean _expired = false;\n \n+  // The expect period of time (in ms) that a message should be completed, default 1 day\n+  public static final long MESSAGE_EXPECT_COMPLETION_PERIOD = HelixUtil\n+      .getSystemPropertyAsLong(SystemPropertyKeys.MESSAGE_EXPECTED_COMPLETION_PERIOD,\n+          24 * 60 * 60 * 1000 /* 1 day in ms */);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzAwMg=="}, "originalCommit": {"oid": "b66d8b5dc863f5dfc162324b19c6d7ef2999015c"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1193, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}