{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTc3NTMz", "number": 1326, "title": "Task Framework IdealState Removal", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1323, #1324\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR removes IdealState usage from the task framework pipeline. Instead, now workflow resources are created directly using WorkflowConfig and JobConfig. As a result, the legacy pipeline logic in TaskSchedulingStage is removed: it was there for the case of \"IdealState exists but not WorkflowConfig\", which is no longer possible now.\nAfter the removal of legacy pipeline logic, numerous unintended usage of the legacy pipeline were uncovered in the form of broken tests; these tests are addressed and fixed.\nAt the same time, 2 bugs in the pipeline were also uncovered and fixed: the first one is about tasks being incorrectly rejected; the second one is about negative scheduling delay not properly rejected.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Tests run: 1173, Failures: 3, Errors: 0, Skipped: 1, Time elapsed: 4,390.976 s <<< FAILURE! - in TestSuite\n[ERROR] testEnableCompressionResource(org.apache.helix.integration.TestEnableCompression)  Time elapsed: 149.639 s  <<< FAILURE!\njava.lang.AssertionError: expected:<true> but was:<false>\n        at org.apache.helix.integration.TestEnableCompression.testEnableCompressionResource(TestEnableCompression.java:117)\n\n[ERROR] testStateTransitionTimeOut(org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource)  Time elapsed: 7.422 s  <<< FAILURE!\njava.lang.NullPointerException\n        at org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource.verify(TestStateTransitionTimeoutWithResource.java:209)\n        at org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource.lambda$testStateTransitionTimeOut$0(TestStateTransitionTimeoutWithResource.java:173)\n        at org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource.testStateTransitionTimeOut(TestStateTransitionTimeoutWithResource.java:173)\n\n[ERROR] testPeriodicRefresh(org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh)  Time elapsed: 2.011 s  <<< FAILURE!\njava.lang.AssertionError: expected:<4> but was:<3>\n        at org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh(TestRoutingTableProviderPeriodicRefresh.java:211)\n\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:117 expected:<true> but was:<false>\n[ERROR]   TestStateTransitionTimeoutWithResource.testStateTransitionTimeOut:173->lambda$testStateTransitionTimeOut$0:173->verify:209 NullPointer\n[ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:211 expected:<4> but was:<3>\n[INFO] \n[ERROR] Tests run: 1173, Failures: 3, Errors: 0, Skipped: 1\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:13 h\n[INFO] Finished at: 2020-09-14T13:33:37-07:00\n[INFO] ------------------------------------------------------------------------\n\nRerun\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 49.247 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  54.713 s\n[INFO] Finished at: 2020-09-14T14:18:32-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\nhttps://github.com/apache/helix/wiki/Task-Framework-IdealState-Dependency-Removal-Progression\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-27T22:09:17Z", "url": "https://github.com/apache/helix/pull/1326", "merged": true, "mergeCommit": {"oid": "027481f2906cc9d2a5ee104f9e844d0ec8d06e3d"}, "closed": true, "closedAt": "2020-09-14T21:40:01Z", "author": {"login": "NealSun96"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDFDdrgH2gAyNDc0OTc3NTMzOjE3Y2ZjNzljMjAzZTMyMTc5MDE3MGFhYWJkZmI0MzkzYjgzNzQ4ZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH_krNgFqTQ4NzE5MDQxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "17cfc79c203e321790170aaabdfb4393b83748ed", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/17cfc79c203e321790170aaabdfb4393b83748ed", "committedDate": "2020-08-27T18:52:19Z", "message": "IS removal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/6bb6c0f755800fabbe0ca33730febc386259f0e1", "committedDate": "2020-08-27T22:11:01Z", "message": "Remove unused code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTE5NTE0", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477119514", "createdAt": "2020-08-27T22:11:40Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxMTo0MVrOHIjAig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxMTo0MVrOHIjAig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDIzNA==", "bodyText": "Fixes #1325", "url": "https://github.com/apache/helix/pull/1326#discussion_r478724234", "createdAt": "2020-08-27T22:11:41Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java", "diffHunk": "@@ -80,6 +80,7 @@ public void scheduleRebalance(HelixManager manager, String resource, long startT\n     long delay = startTime - System.currentTimeMillis();\n     if (delay < 0) {\n       LOG.debug(String.format(\"Delay time is %s, will not be scheduled\", delay));\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIwOTM3", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477120937", "createdAt": "2020-08-27T22:14:51Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNDo1MVrOHIjE8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNDo1MVrOHIjE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNTM2Mg==", "bodyText": "Should have been in #1231", "url": "https://github.com/apache/helix/pull/1326#discussion_r478725362", "createdAt": "2020-08-27T22:14:51Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -298,6 +299,7 @@ private ResourceAssignment computeResourceMapping(String jobResource,\n       handleJobTimeout(jobCtx, workflowCtx, jobResource, jobCfg);\n       finishJobInRuntimeJobDag(cache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n           jobResource);\n+      scheduleJobCleanUp(jobCfg.getTerminalStateExpiry(), workflowConfig, currentTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIyMzU1", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477122355", "createdAt": "2020-08-27T22:18:03Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxODowM1rOHIjJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxODowM1rOHIjJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjU3OQ==", "bodyText": "All updateInflightJobs are making up for a case that wasn't covered before: any time a workflow exits this function before inflight jobs are handled, the inflight jobs will not be processed and will fallback to the legacy pipeline logic. This isn't correct as inflight jobs need to respond to workflow states such as TimedOut. Therefore, the new logic is to handle inflight jobs before exiting this function.", "url": "https://github.com/apache/helix/pull/1326#discussion_r478726579", "createdAt": "2020-08-27T22:18:03Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java", "diffHunk": "@@ -84,6 +84,7 @@ public void updateWorkflowStatus(String workflow, WorkflowConfig workflowCfg,\n     TargetState targetState = workflowCfg.getTargetState();\n     if (targetState == TargetState.DELETE) {\n       LOG.info(\"Workflow is marked as deleted \" + workflow + \" cleaning up the workflow context.\");\n+      updateInflightJobs(workflow, workflowCtx, currentStateOutput, bestPossibleOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIyNzE4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477122718", "createdAt": "2020-08-27T22:18:55Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxODo1NlrOHIjKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxODo1NlrOHIjKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjg1Ng==", "bodyText": "This line is already done in processJob() when the job is first started, making this logic redundant. Therefore it's removed.", "url": "https://github.com/apache/helix/pull/1326#discussion_r478726856", "createdAt": "2020-08-27T22:18:56Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java", "diffHunk": "@@ -322,64 +328,6 @@ private void processJob(String job, CurrentStateOutput currentStateOutput,\n     }\n   }\n \n-  /**\n-   * Posts new job to cluster\n-   */\n-  private void scheduleSingleJob(String jobResource, JobConfig jobConfig) {\n-    HelixAdmin admin = _manager.getClusterManagmentTool();\n-\n-    IdealState jobIS = admin.getResourceIdealState(_manager.getClusterName(), jobResource);\n-    if (jobIS != null) {\n-      LOG.info(\"Job \" + jobResource + \" idealstate already exists!\");\n-      return;\n-    }\n-\n-    // Set up job resource based on partitions from target resource\n-\n-    // Create the UserContentStore for the job first\n-    TaskUtil.createUserContent(_manager.getHelixPropertyStore(), jobResource,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIzMDU4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477123058", "createdAt": "2020-08-27T22:19:36Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxOTozNlrOHIjL4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxOTozNlrOHIjL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNzEzNw==", "bodyText": "Fix #1324", "url": "https://github.com/apache/helix/pull/1326#discussion_r478727137", "createdAt": "2020-08-27T22:19:36Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/assigner/ThreadCountBasedTaskAssigner.java", "diffHunk": "@@ -112,36 +111,18 @@\n         continue;\n       }\n \n-      // TODO: Review this logic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIzNTAx", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477123501", "createdAt": "2020-08-27T22:20:30Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoyMDozMFrOHIjNRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoyMDozMFrOHIjNRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNzQ5NA==", "bodyText": "Test bug fix: the old logic causes each job to accumulate the tasks assigned to the previous job.", "url": "https://github.com/apache/helix/pull/1326#discussion_r478727494", "createdAt": "2020-08-27T22:20:30Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestQuotaConstraintSkipWorkflowAssignment.java", "diffHunk": "@@ -51,12 +51,11 @@ public void beforeClass() throws Exception {\n   public void testQuotaConstraintSkipWorkflowAssignment() throws Exception {\n     ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n     WorkflowControllerDataProvider cache = new WorkflowControllerDataProvider(CLUSTER_NAME);\n-    JobConfig.Builder job = new JobConfig.Builder();\n-\n-    job.setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"100000\"));\n     TaskDriver driver = new TaskDriver(_manager);\n     for (int i = 0; i < 10; i++) {\n       Workflow.Builder workflow = new Workflow.Builder(\"Workflow\" + i);\n+      JobConfig.Builder job = new JobConfig.Builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTI0NzU4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-477124758", "createdAt": "2020-08-27T22:23:24Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoyMzoyNFrOHIjRWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoyMzoyNFrOHIjRWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyODUzNw==", "bodyText": "Test bug fix: if the job queue is deleted right after stopping, it is possible that current states are not dropped on the instances. This is because the RUNNING to STOPPED message may still be pending when STOPPED to DROPPED message is generated, meaning the latter message is not sent; however, during the next pipeline cycle the job queue may have been deleted already, so the STOPPED to DROPPED message is never generated again. Adding this check to make the test non-flaky.", "url": "https://github.com/apache/helix/pull/1326#discussion_r478728537", "createdAt": "2020-08-27T22:23:24Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/task/TestGetLastScheduledTaskExecInfo.java", "diffHunk": "@@ -75,6 +75,10 @@ public void testGetLastScheduledTaskExecInfo() throws Exception {\n \n     // Stop and delete the queue\n     _driver.stop(queueName);\n+    TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTI0MDA3", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-478924007", "createdAt": "2020-08-31T20:17:35Z", "commit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoxNzozNVrOHKHyRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNDozMFrOHKH_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NTM2Nw==", "bodyText": "I think previously, when currentState exist and configs are missing, we were relying on this legacy code to remove the currentState (DROP the task). However, since you removed this part, how can we ensure that functionality?", "url": "https://github.com/apache/helix/pull/1326#discussion_r480375367", "createdAt": "2020-08-31T20:17:35Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/task/TaskSchedulingStage.java", "diffHunk": "@@ -110,117 +103,9 @@ private BestPossibleStateOutput compute(ClusterEvent event, Map<String, Resource\n       restOfResources.remove(jobName);\n     }\n \n-    // Current rest of resources including: only current state left over ones\n-    // Original resource map contains workflows + jobs + other invalid resources\n-    // After removing workflows + jobs, only leftover ones will go over old rebalance pipeline.\n-    for (Resource resource : restOfResources.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NjA4OQ==", "bodyText": "Maybe you can add comment for onDemand rebalances and point out why you add this line? Something like making sure next pipeline runs and context get updated maybe?", "url": "https://github.com/apache/helix/pull/1326#discussion_r480376089", "createdAt": "2020-08-31T20:19:05Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -518,7 +519,7 @@ protected void handleJobTimeout(JobContext jobCtx, WorkflowContext workflowCtx,\n     }\n     _clusterStatusMonitor.updateJobCounters(jobCfg, TaskState.TIMED_OUT);\n     _rebalanceScheduler.removeScheduledRebalance(jobResource);\n-    TaskUtil.cleanupJobIdealStateExtView(_manager.getHelixDataAccessor(), jobResource);\n+    RebalanceUtil.scheduleOnDemandPipeline(_manager.getClusterName(),0L,false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NjgxMg==", "bodyText": "I am assuming this is not related to this PR? Anyways it is fine to have this comment, I just want to make sure I understand it correctly.", "url": "https://github.com/apache/helix/pull/1326#discussion_r480376812", "createdAt": "2020-08-31T20:20:27Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -85,15 +86,15 @@ public ResourceAssignment processJobStatusUpdateAndAssignment(String jobName,\n     // completed)\n     TaskState workflowState = workflowCtx.getWorkflowState();\n     TaskState jobState = workflowCtx.getJobState(jobName);\n-    // The job is already in a final state (completed/failed).\n+    // Do not include workflowState == TIMED_OUT here, as later logic needs to handle this case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3ODg2OA==", "bodyText": "Can we keep TaskDriver to clean up IS for a while? What would happen to the workflows/jobs that are running if we switch to new controller? Are these IS are getting deleted anyways? What do you think?", "url": "https://github.com/apache/helix/pull/1326#discussion_r480378868", "createdAt": "2020-08-31T20:24:30Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -746,13 +705,11 @@ public void deleteAndWaitForCompletion(String workflow, long timeout)\n     BaseDataAccessor baseDataAccessor = _accessor.getBaseDataAccessor();\n     PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n \n-    String idealStatePath = keyBuilder.idealStates(workflow).getPath();\n     String workflowConfigPath = keyBuilder.resourceConfig(workflow).getPath();\n     String workflowContextPath = keyBuilder.workflowContext(workflow).getPath();\n \n     while (System.currentTimeMillis() <= endTime) {\n-      if (baseDataAccessor.exists(idealStatePath, AccessOption.PERSISTENT)\n-          || baseDataAccessor.exists(workflowConfigPath, AccessOption.PERSISTENT)\n+      if (baseDataAccessor.exists(workflowConfigPath, AccessOption.PERSISTENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb6c0f755800fabbe0ca33730febc386259f0e1"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971e99b6375518b0541392b392d6d1cc74ffef0b", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/971e99b6375518b0541392b392d6d1cc74ffef0b", "committedDate": "2020-09-01T05:45:43Z", "message": "Stale CurrentState removal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDI0OTk0", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-480024994", "createdAt": "2020-09-01T18:51:29Z", "commit": {"oid": "971e99b6375518b0541392b392d6d1cc74ffef0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1MToyOVrOHLDzxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1MToyOVrOHLDzxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODc5MA==", "bodyText": "Do we need this? We already based on all Workflows to do the assignment. Originally have this is for backward compatible change.", "url": "https://github.com/apache/helix/pull/1326#discussion_r481358790", "createdAt": "2020-09-01T18:51:29Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971e99b6375518b0541392b392d6d1cc74ffef0b"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDA2MzI4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-481006328", "createdAt": "2020-09-02T16:42:09Z", "commit": {"oid": "971e99b6375518b0541392b392d6d1cc74ffef0b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo0MjowOVrOHL34og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo0MjowOVrOHL34og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMjAwMg==", "bodyText": "Can remind me why scheduleSignleJob is removed? We already schedule the job in other places?", "url": "https://github.com/apache/helix/pull/1326#discussion_r482212002", "createdAt": "2020-09-02T16:42:09Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java", "diffHunk": "@@ -290,7 +297,6 @@ private void scheduleJobs(String workflow, WorkflowConfig workflowCfg,\n         // Time is not ready. Set a trigger and update the start time.\n         // Check if the job is ready to be executed.\n         if (System.currentTimeMillis() >= workflowCtx.getJobStartTime(job)) {\n-          scheduleSingleJob(job, jobConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971e99b6375518b0541392b392d6d1cc74ffef0b"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/809ea07955c1dfaba7c3f12cd56a8a090b5d33e6", "committedDate": "2020-09-02T22:51:53Z", "message": "Added current state removal test and removed old test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDg2OTE5", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482086919", "createdAt": "2020-09-03T18:13:27Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTYwMDM5", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482160039", "createdAt": "2020-09-03T20:01:20Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTY0MjU3", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482164257", "createdAt": "2020-09-03T20:08:00Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDowODowMFrOHM1usg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDowODowMFrOHM1usg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNTI2Ng==", "bodyText": "Does this need to be a LinkedHashMap?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483225266", "createdAt": "2020-09-03T20:08:00Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -59,6 +62,7 @@ public void process(ClusterEvent event) throws Exception {\n \n     Map<String, Resource> resourceMap = new LinkedHashMap<>();\n     Map<String, Resource> resourceToRebalance = new LinkedHashMap<>();\n+    Map<String, Resource> taskResourcesToDrop = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTY2NTM5", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482166539", "createdAt": "2020-09-03T20:11:26Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxMToyNlrOHM11cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxMToyNlrOHM11cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjk5Mg==", "bodyText": "What does this do? addPartition(resourceName, resourceName, resourceMap);\n\nWhy are we doing an addPartition for a workflow?\nWhy are we putting resourceName twice?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483226992", "createdAt": "2020-09-03T20:11:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = workflowConfigEntry.getKey();\n+        WorkflowConfig workflowConfig = workflowConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, workflowConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        addPartition(resourceName, resourceName, resourceMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTY2OTAy", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482166902", "createdAt": "2020-09-03T20:12:02Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxMjowMlrOHM12kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoxMjowMlrOHM12kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNzI4MA==", "bodyText": "Could this whole block be further refactored into a private method for readability? It would be helpful to add a JavaDoc as well.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483227280", "createdAt": "2020-09-03T20:12:02Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = workflowConfigEntry.getKey();\n+        WorkflowConfig workflowConfig = workflowConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, workflowConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        addPartition(resourceName, resourceName, resourceMap);\n+      }\n+\n+      for (Map.Entry<String, JobConfig> jobConfigEntry : taskDataCache.getJobConfigMap()\n+          .entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = jobConfigEntry.getKey();\n+        JobConfig jobConfig = jobConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, jobConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        int numPartitions = jobConfig.getTaskConfigMap().size();\n+        if (numPartitions == 0 && idealStates != null) {\n+          IdealState targetIs = idealStates.get(jobConfig.getTargetResource());\n+          if (targetIs == null) {\n+            LOG.warn(\"Target resource does not exist for job \" + resourceName);\n+          } else {\n+            numPartitions = targetIs.getPartitionSet().size();\n+          }\n+        }\n+        for (int i = 0; i < numPartitions; i++) {\n+          addPartition(resourceName + \"_\" + i, resourceName, resourceMap);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc0NzY3", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482174767", "createdAt": "2020-09-03T20:20:20Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMDoyMFrOHM2Imw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMDoyMFrOHM2Imw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMTg5OQ==", "bodyText": "So it seems that all WorkflowConfigs and JobConfigs are being added to both resourceMap and resourceToRebalance.\nIf my understanding of the pipeline is up-to-date, the reason we have two different maps is for the resource pipeline to filter out TASK resources and save them into resourceToRebalance.\nSo\n\nresourceMap: all resources\nresourceToRebalance: all resources - TASK resources\n\nNow, for the task pipeline, do we need to keep both maps? It seems that you're doing the filtering by populating things from ResourceConfigs only + currentStates to resourceToRebalance. With that said, what's the point of populating/keeping resourceMap? Does resourceMap still contain ALL resources for the task pipeline as well?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483231899", "createdAt": "2020-09-03T20:20:20Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -185,4 +232,21 @@ private void addPartition(String partition, String resourceName, Map<String, Res\n     resource.addPartition(partition);\n \n   }\n+\n+  private void addResourceConfigToResourceMap(String resourceName, ResourceConfig resourceConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc1MjM5", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482175239", "createdAt": "2020-09-03T20:21:08Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTowOFrOHM2LIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTowOFrOHM2LIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMjU0NA==", "bodyText": "Nit: the resource could \"have been created\" based on IS", "url": "https://github.com/apache/helix/pull/1326#discussion_r483232544", "createdAt": "2020-09-03T20:21:08Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = workflowConfigEntry.getKey();\n+        WorkflowConfig workflowConfig = workflowConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, workflowConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        addPartition(resourceName, resourceName, resourceMap);\n+      }\n+\n+      for (Map.Entry<String, JobConfig> jobConfigEntry : taskDataCache.getJobConfigMap()\n+          .entrySet()) {\n+        // always overwrite, because the resource could be created by IS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc1NDk4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482175498", "createdAt": "2020-09-03T20:21:34Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTozNFrOHM2MlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyMTozNFrOHM2MlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzMjkxNw==", "bodyText": "Nit: the resource could \"have been created\" based on IS? Since we aren't doing IS-based task resource creation anymore.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483232917", "createdAt": "2020-09-03T20:21:34Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc3Mzgy", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482177382", "createdAt": "2020-09-03T20:24:21Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNDoyMVrOHM2SYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNDoyMVrOHM2SYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNDQwMQ==", "bodyText": "Nit: could we add some comments here to make it clear that we're doing this for targeted jobs?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483234401", "createdAt": "2020-09-03T20:24:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = workflowConfigEntry.getKey();\n+        WorkflowConfig workflowConfig = workflowConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, workflowConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        addPartition(resourceName, resourceName, resourceMap);\n+      }\n+\n+      for (Map.Entry<String, JobConfig> jobConfigEntry : taskDataCache.getJobConfigMap()\n+          .entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = jobConfigEntry.getKey();\n+        JobConfig jobConfig = jobConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, jobConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        int numPartitions = jobConfig.getTaskConfigMap().size();\n+        if (numPartitions == 0 && idealStates != null) {\n+          IdealState targetIs = idealStates.get(jobConfig.getTargetResource());\n+          if (targetIs == null) {\n+            LOG.warn(\"Target resource does not exist for job \" + resourceName);\n+          } else {\n+            numPartitions = targetIs.getPartitionSet().size();\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc3NTk4", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482177598", "createdAt": "2020-09-03T20:24:41Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNDo0MlrOHM2S_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNDo0MlrOHM2S_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNDU1Ng==", "bodyText": "Probably more helpful if you included the name of the target resource.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483234556", "createdAt": "2020-09-03T20:24:42Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +101,43 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      for (Map.Entry<String, WorkflowConfig> workflowConfigEntry : taskDataCache\n+          .getWorkflowConfigMap().entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = workflowConfigEntry.getKey();\n+        WorkflowConfig workflowConfig = workflowConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, workflowConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        addPartition(resourceName, resourceName, resourceMap);\n+      }\n+\n+      for (Map.Entry<String, JobConfig> jobConfigEntry : taskDataCache.getJobConfigMap()\n+          .entrySet()) {\n+        // always overwrite, because the resource could be created by IS\n+        String resourceName = jobConfigEntry.getKey();\n+        JobConfig jobConfig = jobConfigEntry.getValue();\n+        addResourceConfigToResourceMap(resourceName, jobConfig, cache.getClusterConfig(),\n+            resourceMap, resourceToRebalance);\n+        int numPartitions = jobConfig.getTaskConfigMap().size();\n+        if (numPartitions == 0 && idealStates != null) {\n+          IdealState targetIs = idealStates.get(jobConfig.getTargetResource());\n+          if (targetIs == null) {\n+            LOG.warn(\"Target resource does not exist for job \" + resourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc4Mzg3", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482178387", "createdAt": "2020-09-03T20:25:52Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNTo1MlrOHM2VWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyNTo1MlrOHM2VWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNTE2MQ==", "bodyText": "What if the task's state is IN_PROGRESS or in a non-terminal state?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483235161", "createdAt": "2020-09-03T20:25:52Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -130,11 +170,15 @@ public void process(ClusterEvent event) throws Exception {\n             resource.setStateModelFactoryName(currentState.getStateModelFactoryName());\n             resource.setBucketSize(currentState.getBucketSize());\n             resource.setBatchMessageMode(currentState.getBatchMessageMode());\n-            if (resource.getStateModelDefRef() == null && !isTaskCache\n-                || resource.getStateModelDefRef() != null && (\n-                resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && isTaskCache\n-                    || !resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)\n-                    && !isTaskCache)) {\n+            if (!isTaskCache && (resource.getStateModelDefRef() == null\n+                || !TaskConstants.STATE_MODEL_NAME.equals(resource.getStateModelDefRef()))) {\n+              resourceToRebalance.put(resourceName, resource);\n+            }\n+\n+            if (isTaskCache && TaskConstants.STATE_MODEL_NAME\n+                .equals(resource.getStateModelDefRef())) {\n+              // If a task current state exists without configs, it needs to be cleaned up\n+              taskResourcesToDrop.put(resourceName, resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTc5Njkz", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482179693", "createdAt": "2020-09-03T20:28:02Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyODowMlrOHM2ZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyODowMlrOHM2ZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjI2OQ==", "bodyText": "Should we keep this for backward-compatibility? For legacy or existing workflows/jobs, how will their IdealStates be removed? Who will remove them?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483236269", "createdAt": "2020-09-03T20:28:02Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -762,9 +719,6 @@ public void deleteAndWaitForCompletion(String workflow, long timeout)\n \n     // Deletion failed: check which step of deletion failed to complete and create an error message\n     StringBuilder failed = new StringBuilder();\n-    if (baseDataAccessor.exists(idealStatePath, AccessOption.PERSISTENT)) {\n-      failed.append(\"IdealState \");\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTgwMjU2", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482180256", "createdAt": "2020-09-03T20:28:55Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyODo1NVrOHM2bOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDoyODo1NVrOHM2bOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNjY2Ng==", "bodyText": "I wonder for backward-compatibility, if we should leave this in for the time being and just mark them as deprecated. For the existing workload?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483236666", "createdAt": "2020-09-03T20:28:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -594,58 +594,6 @@ public static PropertyKey getWorkflowConfigKey(final HelixDataAccessor accessor,\n     return accessor.keyBuilder().resourceConfig(workflow);\n   }\n \n-  /**\n-   * Cleans up IdealState and external view associated with a job.\n-   * @param accessor\n-   * @param job\n-   * @return True if remove success, otherwise false\n-   */\n-  protected static boolean cleanupJobIdealStateExtView(final HelixDataAccessor accessor,\n-      String job) {\n-    return cleanupIdealStateExtView(accessor, job);\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTgxMzQx", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482181341", "createdAt": "2020-09-03T20:30:38Z", "commit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMDozOFrOHM2ehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDozMDozOFrOHM2ehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIzNzUxMQ==", "bodyText": "Yay! :)", "url": "https://github.com/apache/helix/pull/1326#discussion_r483237511", "createdAt": "2020-09-03T20:30:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/WorkflowDispatcher.java", "diffHunk": "@@ -322,64 +328,6 @@ private void processJob(String job, CurrentStateOutput currentStateOutput,\n     }\n   }\n \n-  /**\n-   * Posts new job to cluster\n-   */\n-  private void scheduleSingleJob(String jobResource, JobConfig jobConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809ea07955c1dfaba7c3f12cd56a8a090b5d33e6"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/191b8e6a44a6fd8885bb13c982d73d9a72618013", "committedDate": "2020-09-04T00:11:32Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzEyOTky", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-482312992", "createdAt": "2020-09-04T02:14:20Z", "commit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMjoxNDoyMFrOHM9LvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzozMzozMlrOHM-UMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0NzM4OQ==", "bodyText": "Humm... this condition was not readable, even the new one is confusing. Could you please add a comment here for future readers?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483347389", "createdAt": "2020-09-04T02:14:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -74,9 +79,8 @@ public void process(ClusterEvent event) throws Exception {\n               cache.getResourceConfig(resourceName));\n           resourceMap.put(resourceName, resource);\n \n-          if (!idealState.isValid() && !isTaskCache\n-              || idealState.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && isTaskCache\n-              || !idealState.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && !isTaskCache) {\n+          if (!isTaskCache && (!idealState.isValid() || !idealState.getStateModelDefRef()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0NzQ5Nw==", "bodyText": "I'm very curious why we need to rebalance an invalid IS node?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483347497", "createdAt": "2020-09-04T02:14:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -74,9 +79,8 @@ public void process(ClusterEvent event) throws Exception {\n               cache.getResourceConfig(resourceName));\n           resourceMap.put(resourceName, resource);\n \n-          if (!idealState.isValid() && !isTaskCache\n-              || idealState.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && isTaskCache\n-              || !idealState.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && !isTaskCache) {\n+          if (!isTaskCache && (!idealState.isValid() || !idealState.getStateModelDefRef()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0NzM4OQ=="}, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM1ODUyNQ==", "bodyText": "Is it possible that we just check in the task dispatch stage to remove all the resources in the RESOURCES_TO_REBALANCE but with no ideal state?\nSo we don't need this attribute.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483358525", "createdAt": "2020-09-04T03:00:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -22,6 +22,7 @@\n public enum AttributeName {\n   RESOURCES,\n   RESOURCES_TO_REBALANCE,\n+  TASK_RESOURCES_TO_DROP,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MDMyOA==", "bodyText": "It's hard to comment with github review, but with your change, I think the whole logic is cleaner. It would either read IdealState for regular resources or read Task config for task resources.\nIn this case, could you please consider the following changes,\n\nCreate a TaskResourceComputationStage, because we the reuse logic has been reduced quite a lot. It is no longer reasonable to put all logic in one class.\nIf another class is too much, we should at least make the workflow clean to fit the following structure:\nif (taskCache) {\n// process TF Resource Objects...\n} else {\n// process Regular Resource Objects...\n}\n// Read the current state to backfill any resources that need to be removed.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483360328", "createdAt": "2020-09-04T03:08:54Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +102,15 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MDUwNA==", "bodyText": "Suggest moving the following logic of processing CS to a separate method.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483360504", "createdAt": "2020-09-04T03:09:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +102,15 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }\n \n+    // Add TaskFramework resources from workflow and job configs as Task Framework will no longer\n+    // use IdealState\n+    if (isTaskCache) {\n+      WorkflowControllerDataProvider taskDataCache =\n+          event.getAttribute(AttributeName.ControllerDataProvider.name());\n+      processWorkflowConfigs(taskDataCache, resourceMap, resourceToRebalance);\n+      processJobConfigs(taskDataCache, resourceMap, resourceToRebalance, idealStates);\n+    }\n+\n     // It's important to get partitions from CurrentState as well since the\n     // idealState might be removed.\n     Map<String, LiveInstance> availableInstances = cache.getLiveInstances();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MDgzMQ==", "bodyText": "I think taskResourcesToDrop is not necessary since we should be able to tell in the dispatch stage.\nIt seems resourceToRebalance will be put anyway. So it seems to be (maybe) some redundant code.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483360831", "createdAt": "2020-09-04T03:11:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -130,11 +143,15 @@ public void process(ClusterEvent event) throws Exception {\n             resource.setStateModelFactoryName(currentState.getStateModelFactoryName());\n             resource.setBucketSize(currentState.getBucketSize());\n             resource.setBatchMessageMode(currentState.getBatchMessageMode());\n-            if (resource.getStateModelDefRef() == null && !isTaskCache\n-                || resource.getStateModelDefRef() != null && (\n-                resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && isTaskCache\n-                    || !resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)\n-                    && !isTaskCache)) {\n+            if (!isTaskCache && (resource.getStateModelDefRef() == null\n+                || !TaskConstants.STATE_MODEL_NAME.equals(resource.getStateModelDefRef()))) {\n+              resourceToRebalance.put(resourceName, resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MTQxNg==", "bodyText": "I see much duplicate code here. Could you please check if we can use the same code for the regular resource addition?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483361416", "createdAt": "2020-09-04T03:14:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -185,4 +250,21 @@ private void addPartition(String partition, String resourceName, Map<String, Res\n     resource.addPartition(partition);\n \n   }\n+\n+  private void addResourceConfigToResourceMap(String resourceName, ResourceConfig resourceConfig,\n+      ClusterConfig clusterConfig, Map<String, Resource> resourceMap,\n+      Map<String, Resource> resourceToRebalance) {\n+    Resource resource = new Resource(resourceName, clusterConfig, resourceConfig);\n+    resourceMap.put(resourceName, resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2Mzc1NQ==", "bodyText": "Can this logic be handled inside the workflow dispatcher just like the job dispatcher? The current code breaks workflow dispatcher OO design and lets the Stage class takes the responsibility of the dispatcher.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483363755", "createdAt": "2020-09-04T03:23:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/task/TaskSchedulingStage.java", "diffHunk": "@@ -110,117 +104,17 @@ private BestPossibleStateOutput compute(ClusterEvent event, Map<String, Resource\n       restOfResources.remove(jobName);\n     }\n \n-    // Current rest of resources including: only current state left over ones\n-    // Original resource map contains workflows + jobs + other invalid resources\n-    // After removing workflows + jobs, only leftover ones will go over old rebalance pipeline.\n-    for (Resource resource : restOfResources.values()) {\n-      if (!computeResourceBestPossibleState(event, cache, currentStateOutput, resource, output)) {\n-        failureResources.add(resource.getResourceName());\n-        LogUtil.logWarn(logger, _eventId,\n-            \"Failed to calculate best possible states for \" + resource.getResourceName());\n-      }\n+    Map<String, Resource> taskResourcesToDrop =\n+        event.getAttribute(AttributeName.TASK_RESOURCES_TO_DROP.name());\n+    for (String resourceName : taskResourcesToDrop.keySet()) {\n+      ResourceAssignment emptyAssignment =\n+          _workflowDispatcher.buildEmptyAssignment(resourceName, currentStateOutput);\n+      _workflowDispatcher.updateBestPossibleStateOutput(resourceName, emptyAssignment, output);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NDUwNQ==", "bodyText": "nit, \"job status update\"?", "url": "https://github.com/apache/helix/pull/1326#discussion_r483364505", "createdAt": "2020-09-04T03:27:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -94,6 +95,8 @@ public ResourceAssignment processJobStatusUpdateAndAssignment(String jobName,\n           workflowResource, jobName, workflowState, jobState));\n       finishJobInRuntimeJobDag(_dataProvider.getTaskDataCache(), workflowResource, jobName);\n       TaskUtil.cleanupJobIdealStateExtView(_manager.getHelixDataAccessor(), jobName);\n+      // New pipeline trigger for workflow status update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTkzOQ==", "bodyText": "2 questions.\n\nI assume the IS change will trigger the pipeline. But obviously, if the TF logic says goodbye to IS, then this won't trigger the right pipeline anymore.\nIn this case, shall we just listen to the context change? Depends on onDemond pipeline is not a scalable solution in general.\n\nPlease correct me if I misunderstood the first point.", "url": "https://github.com/apache/helix/pull/1326#discussion_r483365939", "createdAt": "2020-09-04T03:33:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -519,6 +520,8 @@ protected void handleJobTimeout(JobContext jobCtx, WorkflowContext workflowCtx,\n     _clusterStatusMonitor.updateJobCounters(jobCfg, TaskState.TIMED_OUT);\n     _rebalanceScheduler.removeScheduledRebalance(jobResource);\n     TaskUtil.cleanupJobIdealStateExtView(_manager.getHelixDataAccessor(), jobResource);\n+    // New pipeline trigger for workflow status update\n+    RebalanceUtil.scheduleOnDemandPipeline(_manager.getClusterName(),0L,false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e611db7b2a201766572ce20c02490432a3f3f22d", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/e611db7b2a201766572ce20c02490432a3f3f22d", "committedDate": "2020-09-04T22:36:09Z", "message": "Address more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b687f5f76dd6576ea7260a1eaf0b97a2051e17", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/80b687f5f76dd6576ea7260a1eaf0b97a2051e17", "committedDate": "2020-09-09T01:37:36Z", "message": "Drop the negative delay rebalance fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDg1NTQ2", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-486485546", "createdAt": "2020-09-11T05:36:23Z", "commit": {"oid": "80b687f5f76dd6576ea7260a1eaf0b97a2051e17"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNTozNjoyM1rOHQO7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNTo1Mjo1NlrOHQPPRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4Mzk0OQ==", "bodyText": "Yeah, that's not too bad.\nI was thinking if the RESOURCES attribute is still necessary. But might be. For example, for the targeted jobs. So let's keep it for now.", "url": "https://github.com/apache/helix/pull/1326#discussion_r486783949", "createdAt": "2020-09-11T05:36:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -98,6 +102,15 @@ public void process(ClusterEvent event) throws Exception {\n       }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MDMyOA=="}, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4NjM1NA==", "bodyText": "How about \"isTaskCache == TaskConstants.STATE_MODEL_NAME.equals(resource.getStateModelDefRef())\"\nYou can comment that we are trying to match for 2 conditions:\n\nIf resource state model def is null, then we only proceed if it is a regular resource pipeline.\nIf resource state model def is not null, then we only proceed if the pipeline type matches the resource state model type.", "url": "https://github.com/apache/helix/pull/1326#discussion_r486786354", "createdAt": "2020-09-11T05:44:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -124,17 +205,15 @@ public void process(ClusterEvent event) throws Exception {\n \n           // don't overwrite ideal state settings\n           if (!resourceMap.containsKey(resourceName)) {\n-            addResource(resourceName, resourceMap);\n-            Resource resource = resourceMap.get(resourceName);\n+            Resource resource = new Resource(resourceName);\n             resource.setStateModelDefRef(currentState.getStateModelDefRef());\n             resource.setStateModelFactoryName(currentState.getStateModelFactoryName());\n             resource.setBucketSize(currentState.getBucketSize());\n             resource.setBatchMessageMode(currentState.getBatchMessageMode());\n-            if (resource.getStateModelDefRef() == null && !isTaskCache\n-                || resource.getStateModelDefRef() != null && (\n-                resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME) && isTaskCache\n-                    || !resource.getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)\n-                    && !isTaskCache)) {\n+            if (!isTaskCache && !TaskConstants.STATE_MODEL_NAME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b687f5f76dd6576ea7260a1eaf0b97a2051e17"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4Nzc1Nw==", "bodyText": "Not a must, but we did add a IS to ResourceConfig conversion method. It is ResourceConfig.mergeIdealStateWithResourceConfig(). So in theory, you can keep only this method by converting the IS into ResourceConfig, then use this method to add to the resource map.\n\nThis helps to reduce duplicate code.\nResourceConfig is the one we are going to use in the near future. IS will be transformed for controller output only. So that logic will be replaced anyway.\n\nUp to you if you want to do it now or in the future. If in the future, please add a TODO here.", "url": "https://github.com/apache/helix/pull/1326#discussion_r486787757", "createdAt": "2020-09-11T05:49:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java", "diffHunk": "@@ -185,4 +250,21 @@ private void addPartition(String partition, String resourceName, Map<String, Res\n     resource.addPartition(partition);\n \n   }\n+\n+  private void addResourceConfigToResourceMap(String resourceName, ResourceConfig resourceConfig,\n+      ClusterConfig clusterConfig, Map<String, Resource> resourceMap,\n+      Map<String, Resource> resourceToRebalance) {\n+    Resource resource = new Resource(resourceName, clusterConfig, resourceConfig);\n+    resourceMap.put(resourceName, resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MTQxNg=="}, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4ODkzMg==", "bodyText": "Then, can we add scheduleOnDemandPipeline into cleanupJobIdealStateExtView() ? Otherwise, cleanupJobIdealStateExtView is not a complete call that triggers the expected rebalance, right?\nIt also helps to simplify code, IMO.", "url": "https://github.com/apache/helix/pull/1326#discussion_r486788932", "createdAt": "2020-09-11T05:52:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -519,6 +520,8 @@ protected void handleJobTimeout(JobContext jobCtx, WorkflowContext workflowCtx,\n     _clusterStatusMonitor.updateJobCounters(jobCfg, TaskState.TIMED_OUT);\n     _rebalanceScheduler.removeScheduledRebalance(jobResource);\n     TaskUtil.cleanupJobIdealStateExtView(_manager.getHelixDataAccessor(), jobResource);\n+    // New pipeline trigger for workflow status update\n+    RebalanceUtil.scheduleOnDemandPipeline(_manager.getClusterName(),0L,false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTkzOQ=="}, "originalCommit": {"oid": "191b8e6a44a6fd8885bb13c982d73d9a72618013"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24de07766e18a06d90639ac2a2f4c66527171725", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/24de07766e18a06d90639ac2a2f4c66527171725", "committedDate": "2020-09-11T22:16:43Z", "message": "Add TODO, change if, remove txt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTkwNDEy", "url": "https://github.com/apache/helix/pull/1326#pullrequestreview-487190412", "createdAt": "2020-09-12T01:18:47Z", "commit": {"oid": "24de07766e18a06d90639ac2a2f4c66527171725"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4246, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}