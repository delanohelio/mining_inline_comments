{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODExMjAy", "number": 1362, "title": "Move ST message to state validation from executing phase to scheduling phase.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolve #1361\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCurrently we do all the state validation (the from state should be same current state and to state should be different to current state) for state transition message when the message is being executed in HelixStateTransitionHandler.\nWe should move the to state validation to the scheduling stage because of the following reasons:\n\nIt is a no-op operation, thus we should not create a thread to execute it.\nThe lag between scheduling and executing could add additional latency for controller and eventually application latency.\n\nTests\n\n The following tests are written for this issue:\n\nTestStateTransitionHandlerFactory.testStaledMessage\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:                                                                                                                                                                                                                                                                                        \n[INFO]                                                                                                                                                                                                                                                                                                 \n[ERROR] Failures:                                                                                                                                                                                                                                                                                      \n[ERROR]   TestPauseSignal.testPauseSignal:106 expected:<true> but was:<false>                                                                                                                                                                                                                          \n[ERROR]   TestHelixAdminCli.testDeactivateCluster:604 \u00bb ZkClient Failed to delete /TestH...                                                                                                                                                                                                            \n[INFO]                                                                                                                                                                                                                                                                                                 \n[ERROR] Tests run: 1213, Failures: 2, Errors: 0, Skipped: 2                                                                                                                                                                                                                                            \n[INFO]                                                                                                                                                                                                                                                                                                 \n[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                                        \n[INFO] BUILD FAILURE                                                                                                                                                                                                                                                                                   \n[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                                        \n[INFO] Total time:  01:07 h                                                                                                                                                                                                                                                                            \n[INFO] Finished at: 2020-10-06T21:42:24-07:00                                                                                                                                                                                                                                                          \n[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                                                           \n[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.41 s - in org.apache.helix.tools.TestHelixAdminCli\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 60.272 s - in org.apache.helix.integration.TestPauseSignal\n\n\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-09-14T18:43:05Z", "url": "https://github.com/apache/helix/pull/1362", "merged": true, "mergeCommit": {"oid": "11cd868fc3a98faee4eaba429ce0a47e2fd29ddb"}, "closed": true, "closedAt": "2020-10-08T00:15:47Z", "author": {"login": "xyuanlu"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI3xTyABqjM3NjQ4NTU1Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQEVuBABqjM4NDgzNzQ1NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a129a3ee2a48ed0e28960218a2becc031776b790", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a129a3ee2a48ed0e28960218a2becc031776b790", "committedDate": "2020-09-14T18:37:50Z", "message": "remove debug log"}, "afterCommit": {"oid": "1ffa8291da2feae9aeb96f576b057b3003399bcb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/1ffa8291da2feae9aeb96f576b057b3003399bcb", "committedDate": "2020-09-14T18:46:44Z", "message": "remove debug log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ffa8291da2feae9aeb96f576b057b3003399bcb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/1ffa8291da2feae9aeb96f576b057b3003399bcb", "committedDate": "2020-09-14T18:46:44Z", "message": "remove debug log"}, "afterCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/54cc5c1bf937942dafb113ff4f76f44f4253688e", "committedDate": "2020-09-14T19:10:14Z", "message": "remove debug log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTIxNDI3", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-488121427", "createdAt": "2020-09-14T20:35:54Z", "commit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNzoyOVrOHRlr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1NDozMVrOHRmNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTI5MA==", "bodyText": "minor: change isMessageStaled to isMessageStale. We didn't on purpose stale the message.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488205290", "createdAt": "2020-09-14T20:37:29Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception isMessageStaled(boolean inSchedulerCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjExOQ==", "bodyText": "Besides the current_state equals to_state case, is this also a case that we can move to scheduling phase instead of execution phase? That could help reduce even more threads usage.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488206119", "createdAt": "2020-09-14T20:39:10Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception isMessageStaled(boolean inSchedulerCheck) {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    Exception err = null;\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      err = new HelixDuplicatedStateTransitionException(String\n+          .format(\"Partition %s current state is same as toState (%s->%s) from message.\",\n+              partitionName, fromState, toState));\n+    } else if (!inSchedulerCheck && fromState != null && !fromState.equals(\"*\") && !fromState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODA5Mw==", "bodyText": "The return type is confusing. isMessageStaled implies a boolean value as return. You can change the function name to something like validateStaleMessage, etc, or change the return type.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488208093", "createdAt": "2020-09-14T20:42:58Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).isMessageStaled(true /*inSchedulerCheck*/);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODYzOQ==", "bodyText": "Is this just a log improvement? The logic is not impacted by this PR's change, right?", "url": "https://github.com/apache/helix/pull/1362#discussion_r488208639", "createdAt": "2020-09-14T20:44:02Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -980,9 +980,10 @@ public TaskState pollForJobState(String workflowName, String jobName, long timeo\n         && System.currentTimeMillis() < st + timeout);\n \n     if (ctx == null || !allowedStates.contains(ctx.getJobState(jobName))) {\n-      throw new HelixException(\n-          String.format(\"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s\",\n-              workflowName, jobName, allowedStates));\n+      String cur = ctx == null ? \"null\" : ctx.getJobState(jobName).toString();\n+      throw new HelixException(String.format(\n+          \"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s, cur state is: %s\",\n+          workflowName, jobName, allowedStates, cur));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMTg4MA==", "bodyText": "The test name is wrong here.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488211880", "createdAt": "2020-09-14T20:50:31Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -377,6 +414,55 @@ public void testDuplicatedMessage() throws InterruptedException {\n     System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n   }\n \n+  @Test()\n+  public void testStaledMessage() throws InterruptedException {\n+    System.out.println(\"START TestHelixTaskExecutor.testStaledMessage()\");\n+    HelixTaskExecutor executor = new HelixTaskExecutor();\n+    HelixManager manager = new MockClusterManager();\n+    HelixDataAccessor dataAccessor = manager.getHelixDataAccessor();\n+    PropertyKey.Builder keyBuilder = dataAccessor.keyBuilder();\n+\n+    TestStateTransitionHandlerFactory stateTransitionFactory =\n+        new TestStateTransitionHandlerFactory(Message.MessageType.STATE_TRANSITION.name(), 1000);\n+    executor.registerMessageHandlerFactory(Message.MessageType.STATE_TRANSITION.name(),\n+        stateTransitionFactory);\n+\n+    NotificationContext changeContext = new NotificationContext(manager);\n+    List<Message> msgList = new ArrayList<Message>();\n+\n+    int nMsgs = 1;\n+    String instanceName = manager.getInstanceName();\n+    for (int i = 0; i < nMsgs; i++) {\n+      Message msg =\n+          new Message(Message.MessageType.STATE_TRANSITION.name(), UUID.randomUUID().toString());\n+      msg.setTgtSessionId(manager.getSessionId());\n+      msg.setCreateTimeStamp((long) i);\n+      msg.setTgtName(\"Localhost_1123\");\n+      msg.setSrcName(\"127.101.1.23_2234\");\n+      msg.setPartitionName(\"Partition\");\n+      msg.setResourceName(\"testStaledMessageResource\");\n+      msg.setStateModelDef(\"DummyMasterSlave\");\n+      msg.setFromState(\"SLAVE\");\n+      msg.setToState(\"MASTER\");\n+      dataAccessor.setProperty(msg.getKey(keyBuilder, instanceName), msg);\n+      msgList.add(msg);\n+    }\n+\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+            nMsgs);\n+\n+    changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+    executor.onMessage(instanceName, msgList, changeContext);\n+\n+    Thread.sleep(200);\n+\n+    // The message should be ignored since toState is the same as current state.\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+        0);\n+\n+    System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMzk0MA==", "bodyText": "How soon is the message gets deleted from instance?", "url": "https://github.com/apache/helix/pull/1362#discussion_r488213940", "createdAt": "2020-09-14T20:54:31Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -377,6 +414,55 @@ public void testDuplicatedMessage() throws InterruptedException {\n     System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n   }\n \n+  @Test()\n+  public void testStaledMessage() throws InterruptedException {\n+    System.out.println(\"START TestHelixTaskExecutor.testStaledMessage()\");\n+    HelixTaskExecutor executor = new HelixTaskExecutor();\n+    HelixManager manager = new MockClusterManager();\n+    HelixDataAccessor dataAccessor = manager.getHelixDataAccessor();\n+    PropertyKey.Builder keyBuilder = dataAccessor.keyBuilder();\n+\n+    TestStateTransitionHandlerFactory stateTransitionFactory =\n+        new TestStateTransitionHandlerFactory(Message.MessageType.STATE_TRANSITION.name(), 1000);\n+    executor.registerMessageHandlerFactory(Message.MessageType.STATE_TRANSITION.name(),\n+        stateTransitionFactory);\n+\n+    NotificationContext changeContext = new NotificationContext(manager);\n+    List<Message> msgList = new ArrayList<Message>();\n+\n+    int nMsgs = 1;\n+    String instanceName = manager.getInstanceName();\n+    for (int i = 0; i < nMsgs; i++) {\n+      Message msg =\n+          new Message(Message.MessageType.STATE_TRANSITION.name(), UUID.randomUUID().toString());\n+      msg.setTgtSessionId(manager.getSessionId());\n+      msg.setCreateTimeStamp((long) i);\n+      msg.setTgtName(\"Localhost_1123\");\n+      msg.setSrcName(\"127.101.1.23_2234\");\n+      msg.setPartitionName(\"Partition\");\n+      msg.setResourceName(\"testStaledMessageResource\");\n+      msg.setStateModelDef(\"DummyMasterSlave\");\n+      msg.setFromState(\"SLAVE\");\n+      msg.setToState(\"MASTER\");\n+      dataAccessor.setProperty(msg.getKey(keyBuilder, instanceName), msg);\n+      msgList.add(msg);\n+    }\n+\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+            nMsgs);\n+\n+    changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+    executor.onMessage(instanceName, msgList, changeContext);\n+\n+    Thread.sleep(200);\n+\n+    // The message should be ignored since toState is the same as current state.\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjMyNDQz", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-488232443", "createdAt": "2020-09-14T23:58:41Z", "commit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1ODo0MVrOHRrmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTowMjozOVrOHRsuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjE5OQ==", "bodyText": "Usually, our validate method follows the same convention. It either returns boolean or void (in this case, throw an exception if invalid). I suggest we follow the same logic here.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488302199", "createdAt": "2020-09-14T23:58:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception validateStaleMessage(boolean inSchedulerCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDU2MQ==", "bodyText": "I think we want to \"continue\" instead of throwing the Exception for more graceful handling.\nWe can do this:\n\"reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.DISCARDED);\"", "url": "https://github.com/apache/helix/pull/1362#discussion_r488314561", "createdAt": "2020-09-15T00:41:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTI5NA==", "bodyText": "Same for this one. It is the existing logic, but this exception will be processed by the following catch, which records the error as \"Failed to create message handler...\". This seems to be inaccurate.", "url": "https://github.com/apache/helix/pull/1362#discussion_r488315294", "createdAt": "2020-09-15T00:44:18Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;\n+            }\n+          }\n+          if (stateTransitionHandlers.containsKey(messageTarget)) {\n+            // If there are 2 messages in same batch about same partition's state transition,\n+            // the later one is discarded\n+            Message duplicatedMessage = stateTransitionHandlers.get(messageTarget)._message;\n+            throw new HelixException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjYwOA==", "bodyText": "Just curious, why we want this to happen later than the other 2?", "url": "https://github.com/apache/helix/pull/1362#discussion_r488316608", "createdAt": "2020-09-15T00:48:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;\n+            }\n+          }\n+          if (stateTransitionHandlers.containsKey(messageTarget)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTUzNQ==", "bodyText": "Passing an additional boolean parameter is hard for the user to call. I suggest doing the following,\n\ncreate a private method \"private void validateStaleMessage(boolean checkFromState) {...}\"\ncreate a public method \"public void precheckForStaleMessage() {validateStaleMessage(true)}\"", "url": "https://github.com/apache/helix/pull/1362#discussion_r488319535", "createdAt": "2020-09-15T00:59:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception validateStaleMessage(boolean inSchedulerCheck) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjE5OQ=="}, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDU4MQ==", "bodyText": "What will be wrong if we do validateStaleMessage(false) here? If it works, then we can have a common logic, right?", "url": "https://github.com/apache/helix/pull/1362#discussion_r488320581", "createdAt": "2020-09-15T01:02:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "committedDate": "2020-09-14T21:27:46Z", "message": "address comments"}, "afterCommit": {"oid": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/dd92565c35f880e95ad9d90ed4ef724b257701ec", "committedDate": "2020-09-15T01:56:55Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/dd92565c35f880e95ad9d90ed4ef724b257701ec", "committedDate": "2020-09-15T01:56:55Z", "message": "address comments"}, "afterCommit": {"oid": "43eec8a4d6c2871d6c3ea2a52f041453f1701542", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/43eec8a4d6c2871d6c3ea2a52f041453f1701542", "committedDate": "2020-09-15T02:13:38Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43eec8a4d6c2871d6c3ea2a52f041453f1701542", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/43eec8a4d6c2871d6c3ea2a52f041453f1701542", "committedDate": "2020-09-15T02:13:38Z", "message": "address comments"}, "afterCommit": {"oid": "748d599f01b30b9b6483882a7c2b6fa4e9652acb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/748d599f01b30b9b6483882a7c2b6fa4e9652acb", "committedDate": "2020-09-15T02:22:33Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "748d599f01b30b9b6483882a7c2b6fa4e9652acb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/748d599f01b30b9b6483882a7c2b6fa4e9652acb", "committedDate": "2020-09-15T02:22:33Z", "message": "address comments"}, "afterCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/911cce77470432229c4997dd5bac878985bdc5fc", "committedDate": "2020-09-15T17:10:42Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDI2MTAz", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-490026103", "createdAt": "2020-09-16T21:15:08Z", "commit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxNTowOFrOHTEfNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxNjoxMlrOHTEhVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1ODUxOA==", "bodyText": "Why we need this precheck flag? Two checks in onMessage and HelixTask execution validation logic should be same", "url": "https://github.com/apache/helix/pull/1362#discussion_r489758518", "createdAt": "2020-09-16T21:15:08Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,36 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      throw new HelixDuplicatedStateTransitionException(String\n+          .format(\"Partition %s current state is same as toState (%s->%s) from message.\",\n+              partitionName, fromState, toState));\n+    } else if (!isPreCheck && fromState != null && !fromState.equals(\"*\") && !fromState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTA2Mg==", "bodyText": "This is not duplicate state transition. Could be some STs are old in pending queue just not match what target state we have now.", "url": "https://github.com/apache/helix/pull/1362#discussion_r489759062", "createdAt": "2020-09-16T21:16:12Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,36 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      throw new HelixDuplicatedStateTransitionException(String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjE0MjMx", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-491214231", "createdAt": "2020-09-18T07:27:15Z", "commit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzoyNzoxNlrOHUBSBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzozMToxMlrOHUBZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NDU2NA==", "bodyText": "equals() should be used to check the string names are the same.\n!= checks if they are the same object: same memory address, etc..", "url": "https://github.com/apache/helix/pull/1362#discussion_r490754564", "createdAt": "2020-09-18T07:27:16Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -232,11 +248,29 @@ public HelixTaskResult handleMessage() throws InterruptedException {\n       @Override\n       public void onError(Exception e, ErrorCode code, ErrorType type) {\n       }\n+\n+      @Override\n+      public void precheckForStaleMessage() throws Exception {\n+        if (_testIsMessageStaled) {\n+          super.precheckForStaleMessage();\n+        }\n+      }\n     }\n \n     @Override\n     public MessageHandler createHandler(Message message, NotificationContext context) {\n-      return new TestStateTransitionMessageHandler(message, context);\n+      if (message.getResourceName()!=\"testStaledMessageResource\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NQ==", "bodyText": "Can you help understand why we need to assert instead of throwing an InterruptedException?", "url": "https://github.com/apache/helix/pull/1362#discussion_r490756395", "createdAt": "2020-09-18T07:31:12Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -212,18 +213,33 @@ public TestStateTransitionHandlerFactory(String msgType, long delay) {\n       _delay = delay;\n     }\n \n-    class TestStateTransitionMessageHandler extends MessageHandler {\n+    class TestStateTransitionMessageHandler extends HelixStateTransitionHandler {\n+      boolean _testIsMessageStaled;\n+\n       public TestStateTransitionMessageHandler(Message message, NotificationContext context) {\n-        super(message, context);\n+        super(null, null, message, context, null);\n+        _testIsMessageStaled = false;\n+      }\n+\n+      public TestStateTransitionMessageHandler(Message message, NotificationContext context,\n+          CurrentState currentStateDelta) {\n+        super(null, null, message, context, currentStateDelta);\n+        _testIsMessageStaled = true;\n+\n+\n       }\n \n       @Override\n-      public HelixTaskResult handleMessage() throws InterruptedException {\n+      public HelixTaskResult handleMessage() {\n         HelixTaskResult result = new HelixTaskResult();\n         _processedMsgIds.put(_message.getMsgId(), _message.getMsgId());\n         if (_delay > 0) {\n           System.out.println(\"Sleeping...\" + _delay);\n-          Thread.sleep(_delay);\n+          try{\n+            Thread.sleep(_delay);\n+          } catch (Exception e) {\n+            assert (false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "911cce77470432229c4997dd5bac878985bdc5fc", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/911cce77470432229c4997dd5bac878985bdc5fc", "committedDate": "2020-09-15T17:10:42Z", "message": "address comments"}, "afterCommit": {"oid": "486015cb00514fc02dbb9044cd914bb06b722617", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/486015cb00514fc02dbb9044cd914bb06b722617", "committedDate": "2020-09-21T20:17:49Z", "message": "address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "486015cb00514fc02dbb9044cd914bb06b722617", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/486015cb00514fc02dbb9044cd914bb06b722617", "committedDate": "2020-09-21T20:17:49Z", "message": "address comment"}, "afterCommit": {"oid": "e1c787841ae381ad960801b5a19b0f8143809921", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/e1c787841ae381ad960801b5a19b0f8143809921", "committedDate": "2020-09-23T01:33:08Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1c787841ae381ad960801b5a19b0f8143809921", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/e1c787841ae381ad960801b5a19b0f8143809921", "committedDate": "2020-09-23T01:33:08Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "7608742260b7308e27b6bc242764ae6a4815bc77", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/7608742260b7308e27b6bc242764ae6a4815bc77", "committedDate": "2020-09-23T04:36:28Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7608742260b7308e27b6bc242764ae6a4815bc77", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/7608742260b7308e27b6bc242764ae6a4815bc77", "committedDate": "2020-09-23T04:36:28Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "97c39142695a48ab7dc3f3145370e11b5b1a9755", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/97c39142695a48ab7dc3f3145370e11b5b1a9755", "committedDate": "2020-09-25T00:08:02Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97c39142695a48ab7dc3f3145370e11b5b1a9755", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/97c39142695a48ab7dc3f3145370e11b5b1a9755", "committedDate": "2020-09-25T00:08:02Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "committedDate": "2020-09-25T01:10:02Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "committedDate": "2020-09-25T01:10:02Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "committedDate": "2020-09-25T01:13:32Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "committedDate": "2020-09-25T01:13:32Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "96becaa76f5d30eab30076349e990efe64572748", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/96becaa76f5d30eab30076349e990efe64572748", "committedDate": "2020-09-25T01:15:02Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96becaa76f5d30eab30076349e990efe64572748", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/96becaa76f5d30eab30076349e990efe64572748", "committedDate": "2020-09-25T01:15:02Z", "message": "add Ali's patch"}, "afterCommit": {"oid": "46af411dedbbf668b97e6d0a7e87d5e50c21d05d", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/46af411dedbbf668b97e6d0a7e87d5e50c21d05d", "committedDate": "2020-09-25T01:17:17Z", "message": "add Ali's patch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bae0f784b153f753e72ade260ddc3963393997a", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/1bae0f784b153f753e72ade260ddc3963393997a", "committedDate": "2020-09-25T02:00:23Z", "message": "no throw in non-exceptional cases"}, "afterCommit": {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/25fb5ce8eb474e1c6701a1d4838044c30875d147", "committedDate": "2020-09-25T18:26:31Z", "message": "no throw in non-exceptional cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTUxMzQy", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-496951342", "createdAt": "2020-09-26T08:00:29Z", "commit": {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODowMDoyOVrOHYeoZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODowMDoyOVrOHYeoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA==", "bodyText": "staleMessageValidator sounds more like a class/variable name. How about changing the method name to a verb style: validateStaleMessage() (it does something)?", "url": "https://github.com/apache/helix/pull/1362#discussion_r495429734", "createdAt": "2020-09-26T08:00:29Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -460,7 +438,33 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n       StateTransitionError error = new StateTransitionError(type, code, e);\n       _stateModel.rollbackOnError(_message, _notificationContext, error);\n     }\n+  }\n+\n+  // Verify the fromState and current state of the stateModel.\n+  public Exception staleMessageValidator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODY2NDAy", "url": "https://github.com/apache/helix/pull/1362#pullrequestreview-499866402", "createdAt": "2020-09-30T22:54:24Z", "commit": {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/25fb5ce8eb474e1c6701a1d4838044c30875d147", "committedDate": "2020-09-25T18:26:31Z", "message": "no throw in non-exceptional cases"}, "afterCommit": {"oid": "4b985e7f14c7272a8e0cda75336ce06ed7441516", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/4b985e7f14c7272a8e0cda75336ce06ed7441516", "committedDate": "2020-10-01T20:24:22Z", "message": "no throw in non-exceptional cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b985e7f14c7272a8e0cda75336ce06ed7441516", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/4b985e7f14c7272a8e0cda75336ce06ed7441516", "committedDate": "2020-10-01T20:24:22Z", "message": "no throw in non-exceptional cases"}, "afterCommit": {"oid": "705382c62037995b205d7307bb6abf819c274113", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/705382c62037995b205d7307bb6abf819c274113", "committedDate": "2020-10-06T01:18:01Z", "message": "adress comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c40449dacf27541d4350a41f6f87701a225564", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/33c40449dacf27541d4350a41f6f87701a225564", "committedDate": "2020-10-07T03:14:13Z", "message": "add stale check when scheduling ST task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0036951aa0c003f935d6ffc2da104887c9f74c38", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/0036951aa0c003f935d6ffc2da104887c9f74c38", "committedDate": "2020-10-07T03:14:13Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a983cbb3426cdf5499b92e8ecbe07522dc9cf227", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a983cbb3426cdf5499b92e8ecbe07522dc9cf227", "committedDate": "2020-10-07T03:15:45Z", "message": "investigate test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d520da3f4ced14cb64c94ff3ab23532f34e30fe", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/5d520da3f4ced14cb64c94ff3ab23532f34e30fe", "committedDate": "2020-10-07T03:15:59Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb26c7c4e8cff29f555f71dbd6f389c78747f52", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/deb26c7c4e8cff29f555f71dbd6f389c78747f52", "committedDate": "2020-10-07T03:15:59Z", "message": "remove log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4f098fac427b94f81b5742a654bfd1a967cd08", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/5e4f098fac427b94f81b5742a654bfd1a967cd08", "committedDate": "2020-10-07T03:20:55Z", "message": "remove debug log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3538fd4ca710f6fe283cc5bb31f47e0f1751753", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/b3538fd4ca710f6fe283cc5bb31f47e0f1751753", "committedDate": "2020-10-07T03:20:59Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485c1903e19933deedba6711476ab6c5b0067084", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/485c1903e19933deedba6711476ab6c5b0067084", "committedDate": "2020-10-07T03:20:59Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6c91eaa4256a3d469bd8eea6207e1e0f3bc89d", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/9c6c91eaa4256a3d469bd8eea6207e1e0f3bc89d", "committedDate": "2020-10-07T03:20:59Z", "message": "address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6728d25c513e67697bdbd3c6a4ed0656b950bc01", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/6728d25c513e67697bdbd3c6a4ed0656b950bc01", "committedDate": "2020-10-07T03:20:59Z", "message": "c1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d12fa5ec16e1b24bfeb41ea908cd1e3dccb211", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/16d12fa5ec16e1b24bfeb41ea908cd1e3dccb211", "committedDate": "2020-10-07T03:20:59Z", "message": "add Ali's patch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf37de674139b0a8d155c5501bbaf63557a58b4b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/bf37de674139b0a8d155c5501bbaf63557a58b4b", "committedDate": "2020-10-07T03:20:59Z", "message": "no throw in non-exceptional cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f0ecb37ebbce1c480efe531cac372b16caa413", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/56f0ecb37ebbce1c480efe531cac372b16caa413", "committedDate": "2020-10-07T03:20:59Z", "message": "adress comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "705382c62037995b205d7307bb6abf819c274113", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/705382c62037995b205d7307bb6abf819c274113", "committedDate": "2020-10-06T01:18:01Z", "message": "adress comments"}, "afterCommit": {"oid": "56f0ecb37ebbce1c480efe531cac372b16caa413", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/56f0ecb37ebbce1c480efe531cac372b16caa413", "committedDate": "2020-10-07T03:20:59Z", "message": "adress comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4279, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}