{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwODcwMTk2", "number": 1072, "title": "Validate data write size limit in ZkClient", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1071\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIf configurable write size limit for znrecord serializer is different from the default size 1 MB, especially it is set to larger than 1 MB, writing won't work because it would be blocked by this default size check in zkclient.\nThis PR also reads both jute.maxbuffer config and znrecord serializer write size limit, and validates the correctness of data size limit.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestDataSizeGreaterThanLimit\n\n\ntestDataSizeLessThanLimit\n\n\ntestInvalidWriteSizeLimitConfig\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nIn zookeeper-api module.\n[INFO] Tests run: 50, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 64.326 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 50, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:08 min\n[INFO] Finished at: 2020-10-22T17:17:17-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-08T07:38:14Z", "url": "https://github.com/apache/helix/pull/1072", "merged": true, "mergeCommit": {"oid": "7269028703c336adc6e58d19bd9b78a6b6bc3ffa"}, "closed": true, "closedAt": "2020-10-26T20:20:14Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpYPXegFqTQyNjY2NjQxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWaMlngH2gAyNDMwODcwMTk2OjliOGY1YmVmOWNkMDNhZTVhZWZlMzk1NDRiNjI0YzdlZjM2NzI3M2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjY2NDE2", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-426666416", "createdAt": "2020-06-08T22:31:28Z", "commit": {"oid": "8b133cb349a4e6df655a7d1f5574338637920276"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMToyOFrOGgyojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMToyOFrOGgyojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzE5OA==", "bodyText": "Thanks for adding this test! One favor to ask - we are actually in the process of moving this class to zookeeper-api (#1070).\nDo you think we could hold off on this change until that is committed first to avoid merge conflicts?", "url": "https://github.com/apache/helix/pull/1072#discussion_r437037198", "createdAt": "2020-06-08T22:31:28Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -819,4 +820,45 @@ public void testAsyncWriteOperations() {\n       zkClient.delete(\"/tmp/asyncOversize\");\n     }\n   }\n+\n+  @Test(expectedExceptions = ZkMarshallingError.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b133cb349a4e6df655a7d1f5574338637920276"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjY4MDY3", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-426668067", "createdAt": "2020-06-08T22:35:28Z", "commit": {"oid": "8b133cb349a4e6df655a7d1f5574338637920276"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozNToyOVrOGgyt7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozNToyOVrOGgyt7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA==", "bodyText": "I agree that this is the right thing to do. Thanks for catching this and fixing this.\nOne concern I have is with the change of the exception type. I am not sure if changing it to ZkMarshallingError is the right thing to do because\n\nZkMarshallingError is usually thrown in and reserved for use in ZkSerializer implementations.\nChanging Exception types may cause backward-compatibility issues.\n\nWhat do you think?", "url": "https://github.com/apache/helix/pull/1072#discussion_r437038574", "createdAt": "2020-06-08T22:35:29Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1839,12 +1848,15 @@ protected void doRetry() {\n     });\n   }\n \n-  private void checkDataSizeLimit(byte[] data) {\n-    if (data != null && data.length > ZNRecord.SIZE_LIMIT) {\n-      LOG.error(\n-          \"Data size larger than 1M, will not write to zk. Data (first 1k): \" + new String(data)\n-              .substring(0, 1024));\n-      throw new ZkClientException(\"Data size larger than 1M\");\n+  private void checkDataSizeLimit(String path, byte[] data) {\n+    if (data == null) {\n+      return;\n+    }\n+\n+    int sizeLimit = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    if (data.length > sizeLimit) {\n+      throw new ZkMarshallingError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b133cb349a4e6df655a7d1f5574338637920276"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f88bd3c367a75ffa978414b52710e4ee5ef2735", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2f88bd3c367a75ffa978414b52710e4ee5ef2735", "committedDate": "2020-06-09T18:17:38Z", "message": "Revert exception type"}, "afterCommit": {"oid": "e45f5eb2fe974186a89132f29586b02c1e9743ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e45f5eb2fe974186a89132f29586b02c1e9743ea", "committedDate": "2020-06-10T07:49:49Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e45f5eb2fe974186a89132f29586b02c1e9743ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e45f5eb2fe974186a89132f29586b02c1e9743ea", "committedDate": "2020-06-10T07:49:49Z", "message": "Use jute.maxbuffer size limit in zkclient"}, "afterCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/77e0198c0f371a34b716a3df5b95da9e44ef1b80", "committedDate": "2020-06-10T07:53:13Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDgzMTcw", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-430083170", "createdAt": "2020-06-12T23:30:50Z", "commit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozMDo1MFrOGjT5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozMDo1MFrOGjT5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA==", "bodyText": "I'm not sure if we can directly use the value ClientCnxn.packetLen. It is public and static.", "url": "https://github.com/apache/helix/pull/1072#discussion_r439679324", "createdAt": "2020-06-12T23:30:50Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -73,6 +84,10 @@\n   private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n   private static long MAX_RECONNECT_INTERVAL_MS = 30000; // 30 seconds\n \n+  // Default value for system property jute.maxbuffer\n+  // It specifies the maximum size of the data that can be stored in a znode.\n+  private static final int DEFAULT_JUTE_MAXBUFFER = 0xfffff;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDgzNzQ2", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-430083746", "createdAt": "2020-06-12T23:33:46Z", "commit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozMzo0N1rOGjT7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozMzo0N1rOGjT7Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ==", "bodyText": "This is awkward. How about just create a constant for margin and deprecate the SIZE_LIMIT?", "url": "https://github.com/apache/helix/pull/1072#discussion_r439679811", "createdAt": "2020-06-12T23:33:47Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDg0MzA1", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-430084305", "createdAt": "2020-06-12T23:36:22Z", "commit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozNjoyMlrOGjT9Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzozNjoyMlrOGjT9Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MDI4Mw==", "bodyText": "With compression on, the serializer may always return a much smaller package than the input size.\nSo do we have to fail it here?\nIt is debatable.", "url": "https://github.com/apache/helix/pull/1072#discussion_r439680283", "createdAt": "2020-06-12T23:36:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDQ0OTAy", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-439444902", "createdAt": "2020-06-29T19:40:44Z", "commit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MDo0NFrOGqfciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo1MjoxOFrOGqf08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwODU4NA==", "bodyText": "The main concern is that you introduced some internal logic that is not configurable or commented directly where the variables are defined. Who will be able to tell the margin is derived by the default max buffer size and the default size limit?\nFirst, this logic is not reasonable, why the margin is based on the default configs? Secondly, it introduces more chaos to our code.", "url": "https://github.com/apache/helix/pull/1072#discussion_r447208584", "createdAt": "2020-06-29T19:40:44Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDk2Nw==", "bodyText": "Just add a MARGIN value please.", "url": "https://github.com/apache/helix/pull/1072#discussion_r447210967", "createdAt": "2020-06-29T19:44:57Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMjkzMQ==", "bodyText": "What if ZK changes the default max buffer in some new versions? Are we going to change this number accordingly? So my suggestion is that,\n\nWe fine the default value in Zookeeper code.\nif 1 is not possible, then we can just use the current SIZE_LIMIT for the default value.", "url": "https://github.com/apache/helix/pull/1072#discussion_r447212931", "createdAt": "2020-06-29T19:48:46Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -73,6 +84,10 @@\n   private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n   private static long MAX_RECONNECT_INTERVAL_MS = 30000; // 30 seconds\n \n+  // Default value for system property jute.maxbuffer\n+  // It specifies the maximum size of the data that can be stored in a znode.\n+  private static final int DEFAULT_JUTE_MAXBUFFER = 0xfffff;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDE0NQ==", "bodyText": "So according to what I comment before, the logic here can be,\nif (value of ZkSystemPropertyKeys.JUTE_MAXBUFFER exits) {\nreturn value of ZkSystemPropertyKeys.JUTE_MAXBUFFER - MARGIN;\n} else {\nreturn SIZE_LIMIT;\n}", "url": "https://github.com/apache/helix/pull/1072#discussion_r447214145", "createdAt": "2020-06-29T19:50:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;\n+\n+    // jute.maxbuffer is not directly used as size limit in ZkClient.\n+    // Instead, leave some margin as ZNRecord.SIZE_LIMIT and use (jute.maxbuffer - sizeMargin)\n+    return Integer.getInteger(ZkSystemPropertyKeys.JUTE_MAXBUFFER, DEFAULT_JUTE_MAXBUFFER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDgzMw==", "bodyText": "Let's just keep it strict for now.", "url": "https://github.com/apache/helix/pull/1072#discussion_r447214833", "createdAt": "2020-06-29T19:52:18Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MDI4Mw=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/77e0198c0f371a34b716a3df5b95da9e44ef1b80", "committedDate": "2020-06-10T07:53:13Z", "message": "Use jute.maxbuffer size limit in zkclient"}, "afterCommit": {"oid": "ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "committedDate": "2020-07-03T05:21:40Z", "message": "Remove margin."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "committedDate": "2020-07-03T05:21:40Z", "message": "Remove margin."}, "afterCommit": {"oid": "09f83d07f466294dd9c38909eac3435a88b75d67", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/09f83d07f466294dd9c38909eac3435a88b75d67", "committedDate": "2020-07-03T05:24:14Z", "message": "Remove margin."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTQ0OTY0", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-442144964", "createdAt": "2020-07-03T04:54:47Z", "commit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDo1NDo0OFrOGsjq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDo1NTozN1rOGsjrpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NDk1OA==", "bodyText": "@jiajunwang Rethinking about this, I don't think we need this margin. Eg. if we set jute.maxbuffer=1024KB, with the margin=24KB, when we write a znode 1023KB, it fails because 1023KB > 1000KB. This is confusing. So I don't think we should bring in the 24KB margin into custom jute.maxbuffer. Same as ZNRecord serializer write size limit, if we set it, we use the number directly without subtracting the margin.\nSo I think it is clear and transparent to use the configured value without subtracting the margin. What do you think?", "url": "https://github.com/apache/helix/pull/1072#discussion_r449374958", "createdAt": "2020-07-03T04:54:48Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -73,6 +84,10 @@\n   private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n   private static long MAX_RECONNECT_INTERVAL_MS = 30000; // 30 seconds\n \n+  // Default value for system property jute.maxbuffer\n+  // It specifies the maximum size of the data that can be stored in a znode.\n+  private static final int DEFAULT_JUTE_MAXBUFFER = 0xfffff;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NTE0Mw==", "bodyText": "Same reply above: @jiajunwang Rethinking about this, I don't think we need this margin. Eg. if we set jute.maxbuffer=1024KB, with the margin=24KB, when we write a znode 1023KB, it fails because 1023KB > 1000KB. This is confusing. So I think we should not bring in the 24KB into custom jute.maxbuffer. Same as ZNRecord serializer write size limit, if we set it, we use the number directly without subtracting the margin.\nSo I think it is clear and transparent to use the configured value without subtracting the margin. What do you think?\nLet's use the thread above to discuss.", "url": "https://github.com/apache/helix/pull/1072#discussion_r449375143", "createdAt": "2020-07-03T04:55:37Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, "originalCommit": {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80"}, "originalPosition": 123}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09f83d07f466294dd9c38909eac3435a88b75d67", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/09f83d07f466294dd9c38909eac3435a88b75d67", "committedDate": "2020-07-03T05:24:14Z", "message": "Remove margin."}, "afterCommit": {"oid": "64c49d3f35b1e8ea69f61e988657a6272b0869dc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/64c49d3f35b1e8ea69f61e988657a6272b0869dc", "committedDate": "2020-10-22T23:51:29Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64c49d3f35b1e8ea69f61e988657a6272b0869dc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/64c49d3f35b1e8ea69f61e988657a6272b0869dc", "committedDate": "2020-10-22T23:51:29Z", "message": "Use jute.maxbuffer size limit in zkclient"}, "afterCommit": {"oid": "6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "committedDate": "2020-10-22T23:56:30Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "committedDate": "2020-10-22T23:56:30Z", "message": "Use jute.maxbuffer size limit in zkclient"}, "afterCommit": {"oid": "1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "committedDate": "2020-10-23T00:04:40Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/deef5f04141035ef1ff836f09af93cf1195a7222", "committedDate": "2020-10-23T00:07:11Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "committedDate": "2020-10-23T00:04:40Z", "message": "Use jute.maxbuffer size limit in zkclient"}, "afterCommit": {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/deef5f04141035ef1ff836f09af93cf1195a7222", "committedDate": "2020-10-23T00:07:11Z", "message": "Use jute.maxbuffer size limit in zkclient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODQ0ODE5", "url": "https://github.com/apache/helix/pull/1072#pullrequestreview-515844819", "createdAt": "2020-10-23T16:56:09Z", "commit": {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NjowOVrOHnV80w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1OTo1NlrOHnWExQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNjE0Nw==", "bodyText": "Zookeeper has this String def since 3.5.2. It is in class ZKConfig.java. Please add a TODO here so we can use this one after we bump up the ZK version.", "url": "https://github.com/apache/helix/pull/1072#discussion_r511016147", "createdAt": "2020-10-23T16:56:09Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -60,4 +60,7 @@\n    */\n   public static final String ZK_AUTOSYNC_ENABLED =\n       \"zk.zkclient.autosync.enabled\";\n+\n+  /** System property key for jute.maxbuffer */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxODE4MQ==", "bodyText": "nit, but I prefer not to repeat the message that has been mentioned in the exception in the code comment.", "url": "https://github.com/apache/helix/pull/1072#discussion_r511018181", "createdAt": "2020-10-23T16:59:56Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2492,4 +2500,15 @@ private void checkNumChildrenLimit(String path) throws KeeperException {\n           stat.getNumChildren(), NUM_CHILDREN_LIMIT);\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    LOG.info(\"ZNRecord serializer write size limit: {}; ZkClient write size limit: {}\",\n+        serializerSize, WRITE_SIZE_LIMIT);\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b8f5bef9cd03ae5aefe39544b624c7ef367273b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9b8f5bef9cd03ae5aefe39544b624c7ef367273b", "committedDate": "2020-10-26T20:14:51Z", "message": "Add todo to use ZKConfig JUTE_MAXBUFFER"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4466, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}