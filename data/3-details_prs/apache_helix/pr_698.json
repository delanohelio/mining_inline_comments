{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTM0ODE1", "number": 698, "title": "Implement Azure cloud instance information processor", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n(#697 )\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHelix will provide a function for participant to auto register to the cluster so that no manual efforts are needed for adding instance to a cluster. To realize it, a cloud instance information processor will take the responsibility for getting and parsing the instance information from cloud. Different cloud providers will have different implementations for the processor. This PR implement the processor for Azure as a first use case.\nTests\n\n\n The following tests are written for this issue:\nTestAzureCloudInstanceInformationProcessor\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,221.481 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  53:45 min\n[INFO] Finished at: 2020-01-22T09:57:03-08:00\n[INFO] ------------------------------------------------------------------------\n[mnzhang@mnzhang-ld1 helix-core]$ git status\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-23T00:56:54Z", "url": "https://github.com/apache/helix/pull/698", "merged": true, "mergeCommit": {"oid": "0e31492aff5f2784c337c19c66308d51c1525b14"}, "closed": true, "closedAt": "2020-02-07T23:24:29Z", "author": {"login": "zhangmeng916"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8_qICgH2gAyMzY2MTM0ODE1OmM0MTljNzNjZDY1ZmIzOTBhM2YwZDk0MDYzNzI5ODM4N2M5OWY0MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCH3yWAFqTM1NTQ5Mzg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/c419c73cd65fb390a3f0d940637298387c99f410", "committedDate": "2020-01-23T01:00:25Z", "message": "Implement Azure cloud instance information processor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67cf5d7d3faed5bc4b15a302c08fab4ef5e3b568", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/67cf5d7d3faed5bc4b15a302c08fab4ef5e3b568", "committedDate": "2020-01-22T18:53:12Z", "message": "Implement Azure cloud instance information processor"}, "afterCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/c419c73cd65fb390a3f0d940637298387c99f410", "committedDate": "2020-01-23T01:00:25Z", "message": "Implement Azure cloud instance information processor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTQzNTI3", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-347543527", "createdAt": "2020-01-23T19:15:35Z", "commit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToxNTozNVrOFhJoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToxNjoxNFrOFhJp0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTE2MQ==", "bodyText": "I would prefer to use other names such as \"Test-Helix\" in our tests.", "url": "https://github.com/apache/helix/pull/698#discussion_r370305161", "createdAt": "2020-01-23T19:15:35Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTQ4OA==", "bodyText": "Same as here.", "url": "https://github.com/apache/helix/pull/698#discussion_r370305488", "createdAt": "2020-01-23T19:16:14Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",\n+    \"offer\": \"\",\n+    \"osType\": \"Linux\",\n+    \"placementGroupId\": \"81e605b2-a807-48ee-a84a-63c76a9c9543\",\n+    \"plan\": {\n+      \"name\": \"\",\n+      \"product\": \"\",\n+      \"publisher\": \"\"\n+    },\n+    \"platformFaultDomain\": \"2\",\n+    \"platformUpdateDomain\": \"2\",\n+    \"provider\": \"Microsoft.Compute\",\n+    \"publicKeys\": [],\n+    \"publisher\": \"\",\n+    \"resourceGroupName\": \"scus-lpsazureei1-app-rg\",\n+    \"resourceId\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/virtualMachines/ei-lid-vmss-kafka_2\",\n+    \"sku\": \"\",\n+    \"storageProfile\": {\n+      \"dataDisks\": [],\n+      \"imageReference\": {\n+        \"id\": \"/subscriptions/7dd5a659-67c4-441c-ac0b-d48b7a029668/resourceGroups/scus-infra-app-rg/providers/Microsoft.Compute/galleries/pieimagerepo/images/FastCOP4/versions/190924.1.1\",\n+        \"offer\": \"\",\n+        \"publisher\": \"\",\n+        \"sku\": \"\",\n+        \"version\": \"\"\n+      },\n+      \"osDisk\": {\n+        \"caching\": \"ReadWrite\",\n+        \"createOption\": \"FromImage\",\n+        \"diskSizeGB\": \"32\",\n+        \"encryptionSettings\": {\n+          \"enabled\": \"false\"\n+        },\n+        \"image\": {\n+          \"uri\": \"\"\n+        },\n+        \"managedDisk\": {\n+          \"id\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/disks/ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",\n+          \"storageAccountType\": \"Standard_LRS\"\n+        },\n+        \"name\": \"ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTY1MTA5", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-351165109", "createdAt": "2020-01-30T21:47:54Z", "commit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0Nzo1NFrOFj7AdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMzo0MlrOFj7bmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTI1Mw==", "bodyText": "Any usage in this file?", "url": "https://github.com/apache/helix/pull/698#discussion_r373211253", "createdAt": "2020-01-30T21:47:54Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/api/cloud/CloudInstanceInformationProcessor.java", "diffHunk": "@@ -20,6 +20,7 @@\n  */\n \n import java.util.List;\n+import org.apache.helix.HelixCloudProperty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTcyMA==", "bodyText": "nit, I think this is optional if you don't have any other constructor?", "url": "https://github.com/apache/helix/pull/698#discussion_r373211720", "createdAt": "2020-01-30T21:48:59Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,13 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+    /**\n+     * Default constructor\n+     */\n+    public Builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMjAxMw==", "bodyText": "Feel free to make it final if you are not going to create a new HashMap later.", "url": "https://github.com/apache/helix/pull/698#discussion_r373212013", "createdAt": "2020-01-30T21:49:40Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,13 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+    /**\n+     * Default constructor\n+     */\n+    public Builder() {\n+    }\n+\n+    private Map<String, String> _cloudInstanceInfoMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMjYzMg==", "bodyText": "Humm... This log looks different from the others. Why not just passing the class to it?", "url": "https://github.com/apache/helix/pull/698#discussion_r373212632", "createdAt": "2020-01-30T21:51:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {\n+\n+  private static Logger LOG = LoggerFactory.getLogger(AzureHttpUtil.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzI5NQ==", "bodyText": "Can we just have this one instead of creating another private method which has the same logic?", "url": "https://github.com/apache/helix/pull/698#discussion_r373213295", "createdAt": "2020-01-30T21:52:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {\n+\n+  private static Logger LOG = LoggerFactory.getLogger(AzureHttpUtil.class.getName());\n+\n+  static CloseableHttpClient getHttpClient(HelixCloudProperty helixCloudProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzcwOA==", "bodyText": "+1", "url": "https://github.com/apache/helix/pull/698#discussion_r373213708", "createdAt": "2020-01-30T21:53:25Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTE2MQ=="}, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzgyNA==", "bodyText": "+1 again : )", "url": "https://github.com/apache/helix/pull/698#discussion_r373213824", "createdAt": "2020-01-30T21:53:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",\n+    \"offer\": \"\",\n+    \"osType\": \"Linux\",\n+    \"placementGroupId\": \"81e605b2-a807-48ee-a84a-63c76a9c9543\",\n+    \"plan\": {\n+      \"name\": \"\",\n+      \"product\": \"\",\n+      \"publisher\": \"\"\n+    },\n+    \"platformFaultDomain\": \"2\",\n+    \"platformUpdateDomain\": \"2\",\n+    \"provider\": \"Microsoft.Compute\",\n+    \"publicKeys\": [],\n+    \"publisher\": \"\",\n+    \"resourceGroupName\": \"scus-lpsazureei1-app-rg\",\n+    \"resourceId\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/virtualMachines/ei-lid-vmss-kafka_2\",\n+    \"sku\": \"\",\n+    \"storageProfile\": {\n+      \"dataDisks\": [],\n+      \"imageReference\": {\n+        \"id\": \"/subscriptions/7dd5a659-67c4-441c-ac0b-d48b7a029668/resourceGroups/scus-infra-app-rg/providers/Microsoft.Compute/galleries/pieimagerepo/images/FastCOP4/versions/190924.1.1\",\n+        \"offer\": \"\",\n+        \"publisher\": \"\",\n+        \"sku\": \"\",\n+        \"version\": \"\"\n+      },\n+      \"osDisk\": {\n+        \"caching\": \"ReadWrite\",\n+        \"createOption\": \"FromImage\",\n+        \"diskSizeGB\": \"32\",\n+        \"encryptionSettings\": {\n+          \"enabled\": \"false\"\n+        },\n+        \"image\": {\n+          \"uri\": \"\"\n+        },\n+        \"managedDisk\": {\n+          \"id\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/disks/ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",\n+          \"storageAccountType\": \"Standard_LRS\"\n+        },\n+        \"name\": \"ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTQ4OA=="}, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNDIxNw==", "bodyText": "final for both of them?", "url": "https://github.com/apache/helix/pull/698#discussion_r373214217", "createdAt": "2020-01-30T21:54:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNDYwMQ==", "bodyText": "Try to put the test in the same package. So this method can be protected.\nAnd the public method should call this one instead of duplicating the code.", "url": "https://github.com/apache/helix/pull/698#discussion_r373214601", "createdAt": "2020-01-30T21:55:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTAxNg==", "bodyText": "nit, according to our convention,\n\nclass not the name please\nput it to the top before other fields and methods.", "url": "https://github.com/apache/helix/pull/698#discussion_r373215016", "createdAt": "2020-01-30T21:56:17Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTI4Ng==", "bodyText": "Shall we handle partial failure or not?", "url": "https://github.com/apache/helix/pull/698#discussion_r373215286", "createdAt": "2020-01-30T21:56:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());\n+\n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTQ3NQ==", "bodyText": "private ?", "url": "https://github.com/apache/helix/pull/698#discussion_r373215475", "createdAt": "2020-01-30T21:57:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());\n+\n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  public String getAzureCloudInformationFromUrl(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw==", "bodyText": "On general question, Yi has added one httpclient in the Helix-rest for instance health check. Can we just leverage that one?\nIn that case, just move the code to helix-core, or better to helix-common (I hope we have one), then leverage that client.", "url": "https://github.com/apache/helix/pull/698#discussion_r373218203", "createdAt": "2020-01-30T22:03:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c419c73cd65fb390a3f0d940637298387c99f410"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "committedDate": "2020-01-30T23:11:49Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjEwNzI3", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-351210727", "createdAt": "2020-01-30T23:24:02Z", "commit": {"oid": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzoyNDowMlrOFj9Nlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzoyNjo1NVrOFj9RCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NzM4Mg==", "bodyText": "Let's make these as variables instead of hard code.", "url": "https://github.com/apache/helix/pull/698#discussion_r373247382", "createdAt": "2020-01-30T23:24:02Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,110 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {\n+      ObjectMapper mapper = new ObjectMapper();\n+      try {\n+        JsonNode jsonNode = mapper.readTree(response);\n+        JsonNode computeNode = jsonNode.path(\"compute\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODI2Ng==", "bodyText": "Is VMSS name necessary? What if this instance joined from container?", "url": "https://github.com/apache/helix/pull/698#discussion_r373248266", "createdAt": "2020-01-30T23:26:55Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,110 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {\n+      ObjectMapper mapper = new ObjectMapper();\n+      try {\n+        JsonNode jsonNode = mapper.readTree(response);\n+        JsonNode computeNode = jsonNode.path(\"compute\");\n+        if (!computeNode.isMissingNode()) {\n+          String vmName = computeNode.path(\"vmId\").getTextValue();\n+          String platformFaultDomain = computeNode.path(\"platformFaultDomain\").getTextValue();\n+          String vmssName = computeNode.path(\"vmScaleSetName\").getValueAsText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c2c17bb082453faeee4a35369acd7ba2b2cd806", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/1c2c17bb082453faeee4a35369acd7ba2b2cd806", "committedDate": "2020-01-31T01:41:43Z", "message": "more fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjgxNDg1", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-353281485", "createdAt": "2020-02-04T20:33:46Z", "commit": {"oid": "1c2c17bb082453faeee4a35369acd7ba2b2cd806"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTE2MTIz", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-354116123", "createdAt": "2020-02-05T23:36:51Z", "commit": {"oid": "1c2c17bb082453faeee4a35369acd7ba2b2cd806"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/bba036a241b8e61022a7838f1299ed159ccf1c6c", "committedDate": "2020-02-06T22:39:16Z", "message": "remove http util which is unnecessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODI2ODMx", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-354826831", "createdAt": "2020-02-06T22:47:38Z", "commit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NzozOFrOFms3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo1NzoyMlrOFmtFLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNTIwNQ==", "bodyText": "nit, can you have a try to remove the corresponding entry in the helix-rest pom? I think that would be unnecessary with this.", "url": "https://github.com/apache/helix/pull/698#discussion_r376125205", "createdAt": "2020-02-06T22:47:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/pom.xml", "diffHunk": "@@ -159,6 +159,11 @@ under the License.\n       <artifactId>metrics-core</artifactId>\n       <version>3.2.3</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.8</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNzEzMw==", "bodyText": "Safer to clone construct a new map so the newly built instances do not share anything.", "url": "https://github.com/apache/helix/pull/698#discussion_r376127133", "createdAt": "2020-02-06T22:52:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,8 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+\n+    private final Map<String, String> _cloudInstanceInfoMap = new HashMap<>();\n \n     public AzureCloudInstanceInformation build() {\n       return new AzureCloudInstanceInformation(_cloudInstanceInfoMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNzY3MQ==", "bodyText": "As we discussed, let's add a TODO here for generalizing all the httpclients usage.", "url": "https://github.com/apache/helix/pull/698#discussion_r376127671", "createdAt": "2020-02-06T22:54:12Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODU0Nw==", "bodyText": "It confused me. If there are multiple responses, which information you return? It seems that the last one will override the previous ones.", "url": "https://github.com/apache/helix/pull/698#discussion_r376128547", "createdAt": "2020-02-06T22:56:36Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)\n+        .setRetryHandler(httpRequestRetryHandler).build();\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n+  }\n+\n+  /**\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODgxMw==", "bodyText": "nit, responseList or responses", "url": "https://github.com/apache/helix/pull/698#discussion_r376128813", "createdAt": "2020-02-06T22:57:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)\n+        .setRetryHandler(httpRequestRetryHandler).build();\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n+  }\n+\n+  /**\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e25d2b5c989624a55784a2013bb927306e87030", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/4e25d2b5c989624a55784a2013bb927306e87030", "committedDate": "2020-02-07T00:08:08Z", "message": "fix more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c5dda5806a9aa696b942b409584943930b1789", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/59c5dda5806a9aa696b942b409584943930b1789", "committedDate": "2020-02-07T00:15:55Z", "message": "tiny fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDkzODUx", "url": "https://github.com/apache/helix/pull/698#pullrequestreview-355493851", "createdAt": "2020-02-07T23:24:12Z", "commit": {"oid": "59c5dda5806a9aa696b942b409584943930b1789"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}