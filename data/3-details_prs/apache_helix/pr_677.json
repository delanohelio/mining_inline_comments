{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzQzMDcy", "number": 677, "title": "Add method to wait and return established session's ID", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #676\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCurrent zkclient's waitUntilConnected does not return a zk session ID. zkClient's getSessionId() could bring in session race condition: session A is connected in waitUntilConnected, but when zkClient.getSession() is called in zkHelixManager, session A might be already expired and so zkClient.getSession() gets session B. This session ID is critical for the firs time handling new session after zkclient is created in zkHelixManager.\nSolution: add a new method waitForEstablishedSession() to wait for SynCconnected state and return the session id before unlocking the eventLock.\nTests\n\n The following tests are written for this issue:\n\ntestWaitForEstablishedSession\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nTests all pass.\n[INFO] Tests run: 897, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,384.61 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 897, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  56:24 min\n[INFO] Finished at: 2020-01-08T22:38:20-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-09T02:44:01Z", "url": "https://github.com/apache/helix/pull/677", "merged": true, "mergeCommit": {"oid": "72edf485e720da407632b2e0f095cff8ca39c6d1"}, "closed": true, "closedAt": "2020-01-09T23:30:44Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4g1DgABqjI5MzM0MTIwMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb41qiRgFqTM0MDkzMzkzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84186ecb72f5bcab0c29ce2143e5ddc4ee4b3f15", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/84186ecb72f5bcab0c29ce2143e5ddc4ee4b3f15", "committedDate": "2020-01-09T02:41:52Z", "message": "Implement waitForEstablishedSession."}, "afterCommit": {"oid": "03ea611e832acb4747d0567640547d30e9edc72a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/03ea611e832acb4747d0567640547d30e9edc72a", "committedDate": "2020-01-09T02:49:29Z", "message": "Implement waitForEstablishedSession."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03ea611e832acb4747d0567640547d30e9edc72a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/03ea611e832acb4747d0567640547d30e9edc72a", "committedDate": "2020-01-09T02:49:29Z", "message": "Implement waitForEstablishedSession."}, "afterCommit": {"oid": "0e4e97a7d2fc400051d5c9c2b0f53a2f54d7812b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/0e4e97a7d2fc400051d5c9c2b0f53a2f54d7812b", "committedDate": "2020-01-09T02:54:18Z", "message": "Implement waitForEstablishedSession."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e4e97a7d2fc400051d5c9c2b0f53a2f54d7812b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/0e4e97a7d2fc400051d5c9c2b0f53a2f54d7812b", "committedDate": "2020-01-09T02:54:18Z", "message": "Implement waitForEstablishedSession."}, "afterCommit": {"oid": "88322618caef389b0e5159d519680248c51d52a8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/88322618caef389b0e5159d519680248c51d52a8", "committedDate": "2020-01-09T03:01:08Z", "message": "Implement waitForEstablishedSession."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1710165db40ec3f2f30ce819da1e36b3537747c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c1710165db40ec3f2f30ce819da1e36b3537747c", "committedDate": "2020-01-09T21:07:53Z", "message": "Implement waitForEstablishedSession."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdd0acd68d73e5f03f92eaea353a6f4690733377", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/fdd0acd68d73e5f03f92eaea353a6f4690733377", "committedDate": "2020-01-09T21:03:26Z", "message": "Implement waitForEstablishedSession."}, "afterCommit": {"oid": "c1710165db40ec3f2f30ce819da1e36b3537747c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c1710165db40ec3f2f30ce819da1e36b3537747c", "committedDate": "2020-01-09T21:07:53Z", "message": "Implement waitForEstablishedSession."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODMyNzIw", "url": "https://github.com/apache/helix/pull/677#pullrequestreview-340832720", "createdAt": "2020-01-09T21:41:52Z", "commit": {"oid": "c1710165db40ec3f2f30ce819da1e36b3537747c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMTo0MTo1MlrOFcEN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMTo0MTo1MlrOFcEN8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3MzU1Mw==", "bodyText": "Why not put the lock/check current thread logic inside this method? This will help to simplify the code. As for the callers require a different return, you can handle those differences in the caller. But the lock and thread check can be put here.", "url": "https://github.com/apache/helix/pull/677#discussion_r364973553", "createdAt": "2020-01-09T21:41:52Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -2136,4 +2146,24 @@ public int hashCode() {\n       return _listener.hashCode();\n     }\n   }\n+\n+  private void validateCurrentThread() {\n+    if (_zookeeperEventThread != null && Thread.currentThread() == _zookeeperEventThread) {\n+      throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n+    }\n+  }\n+\n+  private void waitForKeeperStateUntilDeadline(KeeperState keeperState, Date deadline) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1710165db40ec3f2f30ce819da1e36b3537747c"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e224418e8620734df504372620fc89771c85d5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b8e224418e8620734df504372620fc89771c85d5", "committedDate": "2020-01-09T22:15:24Z", "message": "Add a locking layer for returning session."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODUyODUz", "url": "https://github.com/apache/helix/pull/677#pullrequestreview-340852853", "createdAt": "2020-01-09T22:22:33Z", "commit": {"oid": "b8e224418e8620734df504372620fc89771c85d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTIxNzUx", "url": "https://github.com/apache/helix/pull/677#pullrequestreview-340921751", "createdAt": "2020-01-10T02:09:21Z", "commit": {"oid": "b8e224418e8620734df504372620fc89771c85d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjowOToyMVrOFcImGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMjowOToyMVrOFcImGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0NTI3NQ==", "bodyText": "Why we need this default implementation that still have race condition?  Why default can't be the correct one? Or the default implementation just throw exception telling people they should implement the correct version?", "url": "https://github.com/apache/helix/pull/677#discussion_r365045275", "createdAt": "2020-01-10T02:09:21Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/client/HelixZkClient.java", "diffHunk": "@@ -182,6 +183,28 @@ void asyncSetData(final String path, Object datat, final int version,\n   // ZK state control\n   boolean waitUntilConnected(long time, TimeUnit timeUnit);\n \n+  /**\n+   * Waits for SyncConnected state and returns a valid session ID(non-zero). The implementation of\n+   * this method should wait for SyncConnected state and ZK session to be established, and should\n+   * guarantee the established session's ID is returned before keeper state changes.\n+   *\n+   * Please note: this default implementation may have race condition issue and return an unexpected\n+   * session ID that is zero or another new session's ID. The default implementation is for backward\n+   * compatibility purpose.\n+   *\n+   * @param timeout Max waiting time for connecting to ZK server.\n+   * @param timeUnit Time unit for the timeout.\n+   * @return A valid ZK session ID which is non-zero.\n+   */\n+  default long waitForEstablishedSession(long timeout, TimeUnit timeUnit) {\n+    if (!waitUntilConnected(timeout, timeUnit)) {\n+      throw new ZkTimeoutException(\n+          \"Failed to get established session because connecting to ZK server has timed out in \"\n+              + timeout + \" \" + timeUnit);\n+    }\n+    return getSessionId();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e224418e8620734df504372620fc89771c85d5"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTMzOTM5", "url": "https://github.com/apache/helix/pull/677#pullrequestreview-340933939", "createdAt": "2020-01-10T03:06:07Z", "commit": {"oid": "b8e224418e8620734df504372620fc89771c85d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMzowNjowN1rOFcJPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMzowNjowN1rOFcJPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA1NTkyOQ==", "bodyText": "line 698 _zkclient.subscribeStateChanges(this);\nat this implementation should always happen later than first synconnected for the reason that ZkClient constructor would call waitTillConnected to guarantee the first synconnect is delivered before proceeding.\nThus first handleNewSession is not delivered from first Synconnect.\nBy the time handlNewSession is called synchronously from here, it does not necessarily have a valid sessionID. Here, we use waitForEstablishedSession to get a valid sessionID at the time. Otherwise, you have chance to get sessionID 0.\n@jiajunwang, can you confirm if my reasoning is right here?", "url": "https://github.com/apache/helix/pull/677#discussion_r365055929", "createdAt": "2020-01-10T03:06:07Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -699,19 +699,15 @@ void createClient() throws Exception {\n     int retryCount = 0;\n     while (retryCount < 3) {\n       try {\n-        // TODO: get session id from waitUntilConnected to avoid race condition\n-        if (!_zkclient.waitUntilConnected(_connectionInitTimeout, TimeUnit.MILLISECONDS)) {\n-          throw new ZkTimeoutException(\n-              \"Unable to connect to zookeeper server within timeout: \" + _connectionInitTimeout\n-                  + \" ms.\");\n-        }\n+        final long sessionId =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e224418e8620734df504372620fc89771c85d5"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4851, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}