{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NDUyNjk0", "number": 775, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNToxN1rODg5bBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMjozMFrODi0TXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIxODMwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNToxN1rOFrW4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMjowMTo0MFrOFtN01Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODAwNg==", "bodyText": "Nit, wrap long line.", "url": "https://github.com/apache/helix/pull/775#discussion_r381008006", "createdAt": "2020-02-19T00:05:17Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1Njc1Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/helix/pull/775#discussion_r382956757", "createdAt": "2020-02-23T02:01:40Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODAwNg=="}, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODI2MjAxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMDowN1rOFrXTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDoyMVrOFsm3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDgzMg==", "bodyText": "Since this is a blocking IO, my thought is it may add more time for zkclient init/creation. Would it help if the request is async while creating a new zkclient?\nDo we need to consider timeout for this request?", "url": "https://github.com/apache/helix/pull/775#discussion_r381014832", "createdAt": "2020-02-19T00:30:07Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRoutingData(String msdsEndpoint) {\n+\n+    Map<String, List<String>> rawRoutingData = new HashMap<>();\n+\n+    HttpGet requestAllRealmNames =\n+        new HttpGet(msdsEndpoint); //TODO: construct an endpoint once REST endpoint is finalized\n+    try (CloseableHttpClient httpClient = HttpClients.createDefault();\n+        CloseableHttpResponse response = httpClient.execute(requestAllRealmNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNzI3Mw==", "bodyText": "Does not matter, right? If you don't have the data, how can you proceeds?", "url": "https://github.com/apache/helix/pull/775#discussion_r382317273", "createdAt": "2020-02-20T23:30:47Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRoutingData(String msdsEndpoint) {\n+\n+    Map<String, List<String>> rawRoutingData = new HashMap<>();\n+\n+    HttpGet requestAllRealmNames =\n+        new HttpGet(msdsEndpoint); //TODO: construct an endpoint once REST endpoint is finalized\n+    try (CloseableHttpClient httpClient = HttpClients.createDefault();\n+        CloseableHttpResponse response = httpClient.execute(requestAllRealmNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDgzMg=="}, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODQzMQ==", "bodyText": "My thinking is that do we have a singleton class that would use this class of HttpRoutingDataReader upon application initialization to read and cache the routing data. So that later zkclient (shared, dedicated) will all use this cached data? or we will just use this class itself to do the cache?", "url": "https://github.com/apache/helix/pull/775#discussion_r382318431", "createdAt": "2020-02-20T23:34:21Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRoutingData(String msdsEndpoint) {\n+\n+    Map<String, List<String>> rawRoutingData = new HashMap<>();\n+\n+    HttpGet requestAllRealmNames =\n+        new HttpGet(msdsEndpoint); //TODO: construct an endpoint once REST endpoint is finalized\n+    try (CloseableHttpClient httpClient = HttpClients.createDefault();\n+        CloseableHttpResponse response = httpClient.execute(requestAllRealmNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDgzMg=="}, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjYxNjc0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoxNzo1MVrOFslGUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDo0Mjo0OVrOFsoJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4OTQ4OA==", "bodyText": "Is that possible to have comment module to hold these http related functions in general? I do see these kind of operations here and there in different modules.", "url": "https://github.com/apache/helix/pull/775#discussion_r382289488", "createdAt": "2020-02-20T22:17:51Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzOTM4MA==", "bodyText": "I think this might be a good idea, but the current implementation makes it a little difficult (for example, CustomRestClient in helix-rest is too closely coupled with Stoppable checks).\nI have created an issue to track this: #793 - please take a look to see if our thoughts are aligned :)", "url": "https://github.com/apache/helix/pull/775#discussion_r382339380", "createdAt": "2020-02-21T00:42:49Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4OTQ4OA=="}, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjgwOTY2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNzoyM1rOFsm9Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNzoyM1rOFsm9Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxOTg5MA==", "bodyText": "The application config should provide (via system property) the namespace of endpoint. This is the input to construct msdsEndpoint.\nThis construction logic should be outside this class?  Or we want to put it inside this class?", "url": "https://github.com/apache/helix/pull/775#discussion_r382319890", "createdAt": "2020-02-20T23:37:23Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of \"metadata store sharding keys\", where the sharding keys in a value list all route to the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRoutingData(String msdsEndpoint) {\n+\n+    Map<String, List<String>> rawRoutingData = new HashMap<>();\n+\n+    HttpGet requestAllRealmNames =\n+        new HttpGet(msdsEndpoint); //TODO: construct an endpoint once REST endpoint is finalized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef735e462755a38b5f2ca53416e6dd3abd1935f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjE4MTA2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzoyNzoxMVrOFtXSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo0NToyNVrOFtnxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExMTg1Mw==", "bodyText": "Endpoint path is incorrect. You may want \u201crouting-data\u201d", "url": "https://github.com/apache/helix/pull/775#discussion_r383111853", "createdAt": "2020-02-24T07:27:11Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData =\n+        new HttpGet(msdsEndpoint + \"/\" + MetadataStoreRoutingConstants.ROUTING_DATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d551119f141662b751cdf8e3abb9a5c0f6724fc4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4MTk2Ng==", "bodyText": "Good catch - updated.", "url": "https://github.com/apache/helix/pull/775#discussion_r383381966", "createdAt": "2020-02-24T16:45:25Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData =\n+        new HttpGet(msdsEndpoint + \"/\" + MetadataStoreRoutingConstants.ROUTING_DATA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExMTg1Mw=="}, "originalCommit": {"oid": "d551119f141662b751cdf8e3abb9a5c0f6724fc4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI4NjU2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNDoyMVrOFtq-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyMzo1NVrOFts2Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDQxMw==", "bodyText": "What is the benefit of introducing new lib: jcabi. I think HttpClients' already provides retry mechanism: HttpRequestInterceptor or setRetryHandler(new DefaultHttpRequestRetryHandler())", "url": "https://github.com/apache/helix/pull/775#discussion_r383434413", "createdAt": "2020-02-24T18:24:21Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NDk3MA==", "bodyText": "The benefit of using jcabi is that it allows us to retry in a more succinct way. Defining a retry handler every time would incur repeated code.\nI want to use https://http.jcabi.com/ (Fluent HttpClient) over Apache's at some point once we refactor all HttpClients out into a new module because it provides useful annotations for caching and logging, but this is more like an ad-hoc retry here. Let me remove this library import. I'll just use the retry handler.\nThanks for the suggestion!", "url": "https://github.com/apache/helix/pull/775#discussion_r383464970", "createdAt": "2020-02-24T19:23:55Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDQxMw=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI4NzcyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNDo0MFrOFtq_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNDo0MFrOFtq_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDU4Ng==", "bodyText": "What is this RetryOnFailture notation? My understanding of this part is kind of weak. More important, what does this buy for us?", "url": "https://github.com/apache/helix/pull/775#discussion_r383434586", "createdAt": "2020-02-24T18:24:40Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMwNjg0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozMDoyM1rOFtrLEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzoyMDoxMVrOFt3ceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng==", "bodyText": "will httpCient.execute throw other exceptions aside from IOException?", "url": "https://github.com/apache/helix/pull/775#discussion_r383437586", "createdAt": "2020-02-24T18:30:23Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1NzU2Mw==", "bodyText": "The other more important thing is that I assume that the user needs to configure multiple host to msdsEndPoint? Similar like DNS return IP address set?\nOtherwise, this is a single point of failure.\nHow doe it work currently in rest client? We can leverage the same mechanism to avoid SPOF.", "url": "https://github.com/apache/helix/pull/775#discussion_r383457563", "createdAt": "2020-02-24T19:09:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2MTc0Ng==", "bodyText": "I don't think so.", "url": "https://github.com/apache/helix/pull/775#discussion_r383461746", "createdAt": "2020-02-24T19:17:56Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3NDQ0MA==", "bodyText": "It's a VIP so we have different hosts that are mapped to the single endpoint. But this is an implementation detail for Helix applications/enterprises, so let us now discuss those details here.", "url": "https://github.com/apache/helix/pull/775#discussion_r383474440", "createdAt": "2020-02-24T19:42:41Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MDkxMQ==", "bodyText": "Either I did not get what you mean by VIP or you did not get what I mean here. What really concerns me is that some rest servers may not be available for whatever reason, say network partition. Then we should retry for another rest server. Otherwise, mission critical application may not be able to start.\nSo the retry logic is very critical. We don't have this retry logic. You can think of this retry logic similar to Zookeeper native client retry different quorum node.\nPut it another way, I believe the retry different server logic should be here. Is the code (httpclient) here smart enough to retry different IP from the VIP DNS name?", "url": "https://github.com/apache/helix/pull/775#discussion_r383490911", "createdAt": "2020-02-24T20:16:13Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODY0OQ==", "bodyText": "Discussed offline. VIP is just an example - different network vendors will provide different abstraction layers.", "url": "https://github.com/apache/helix/pull/775#discussion_r383638649", "createdAt": "2020-02-25T03:20:11Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,\n+      String msdsEndpoint)\n+      throws IOException {\n+    HttpGet requestAllData = new HttpGet(\n+        msdsEndpoint + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    CloseableHttpResponse response = httpClient.execute(requestAllData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzU4Ng=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMxNTU2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozMzowMlrOFtrQdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyNDoyNVrOFts3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzODk2NA==", "bodyText": "Why this is a public API? Do we intend to provide this one outside users? Is there such a case?", "url": "https://github.com/apache/helix/pull/775#discussion_r383438964", "createdAt": "2020-02-24T18:33:02Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NTIxOA==", "bodyText": "Not yet - but let's keep this public for now because I believe we might need this soon for tooling and testing.", "url": "https://github.com/apache/helix/pull/775#discussion_r383465218", "createdAt": "2020-02-24T19:24:25Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzODk2NA=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMzNTAxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozOTowMFrOFtrcMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyNDo0MVrOFts3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTk2OA==", "bodyText": "I am considering setting this in constructor. At least we can move it out of synchronized block.", "url": "https://github.com/apache/helix/pull/775#discussion_r383441968", "createdAt": "2020-02-24T18:39:00Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NTM0NA==", "bodyText": "I agree - I want to pull this out of the block and fail early if it doesn't exist.", "url": "https://github.com/apache/helix/pull/775#discussion_r383465344", "createdAt": "2020-02-24T19:24:41Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTk2OA=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMzNTA0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozOTowMFrOFtrcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToxNzoyNlrOFtsofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTk3Mg==", "bodyText": "Here, getRawRoutingData would throw illegalStateException which is unchecked. Think you are a user, how do you plan to handle this one? Also, IOException, and InvalidRoutingDataException?\nOr do we really want user to handle these exceptions?\nIt seems to me the user only need to understand that 1/ configuration issue 2/ MSDS for some reason not working.\nSo they can either change the code or trouble shoot for communication issues to MSDS", "url": "https://github.com/apache/helix/pull/775#discussion_r383441972", "createdAt": "2020-02-24T18:39:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2MTUwMw==", "bodyText": "That's correct. I believe we still want to float these exceptions up as you said.\nIOException means MSDS isn't working for some reason.\nInvalidRoutingDataException means their routing data is not configured correctly.", "url": "https://github.com/apache/helix/pull/775#discussion_r383461503", "createdAt": "2020-02-24T19:17:26Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTk3Mg=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMzOTQ5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MDoyM1rOFtre9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyNjowOVrOFts6fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MjY3OA==", "bodyText": "This close can be leaked. use try, catch? so simply let getAllRoutingData handle this httpclient creation.", "url": "https://github.com/apache/helix/pull/775#discussion_r383442678", "createdAt": "2020-02-24T18:40:23Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NjEwOQ==", "bodyText": "Good point. Let me do some refactoring here.", "url": "https://github.com/apache/helix/pull/775#discussion_r383466109", "createdAt": "2020-02-24T19:26:09Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MjY3OA=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM0MjE4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MTowOVrOFtrggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyNTo0NlrOFts5uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzA3Mg==", "bodyText": "@RetryOnFailure is applied to this whole method. It seems we are going to call this reader each time we create a RealmAwareZkClient? The heavy work is one the first time we call to get routing data.\nI would use HttpClients' retry so we don't have to acquire lock and create HttpClient 3 times (a bit heavier) if attempting. Instead, http client could just retry on exception within the locking block, which I think is easier.\nAnd one more benefit is we could use try-with-resource and auto close httpClient.\nWhat do you think?\nWhen is reader supposed to be created, each time when creating zkClient, or a singleton is maintained ?", "url": "https://github.com/apache/helix/pull/775#discussion_r383443072", "createdAt": "2020-02-24T18:41:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NTkxMg==", "bodyText": "Let me refactor the code here so that httpClient gets closed properly.\nHttpRoutingDataReader is a singleton and the data is read lazily when it's called the first time, hence the double checked locking.", "url": "https://github.com/apache/helix/pull/775#discussion_r383465912", "createdAt": "2020-02-24T19:25:46Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzA3Mg=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM4NDA4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NDowNFrOFtr6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTowNjoyOFrOFtsTdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0OTcyOQ==", "bodyText": "Suggest you add a comment as why use volatile here. https://en.wikipedia.org/wiki/Double-checked_locking. Otherwise, later people changing the code may remove them.", "url": "https://github.com/apache/helix/pull/775#discussion_r383449729", "createdAt": "2020-02-24T18:54:04Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1NjExNw==", "bodyText": "Sure.", "url": "https://github.com/apache/helix/pull/775#discussion_r383456117", "createdAt": "2020-02-24T19:06:28Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0OTcyOQ=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM5NzI4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1ODoyMFrOFtsDEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToxNzo0M1rOFtspBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MTkyMw==", "bodyText": "Maybe I would decouple fetch http json response and parse json to map:\n\nresponse = httpClient.execute(routing-data-endpoint) // Easier to just retry and timeout http request.\nMap<String, List<>> parseRoutingData(response) {}", "url": "https://github.com/apache/helix/pull/775#discussion_r383451923", "createdAt": "2020-02-24T18:58:20Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2MTYzOQ==", "bodyText": "I agree. Let me split the logic into two.", "url": "https://github.com/apache/helix/pull/775#discussion_r383461639", "createdAt": "2020-02-24T19:17:43Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.jcabi.aspects.RetryOnFailure;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  @RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          String msdsEndpoint =\n+              System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+          if (msdsEndpoint == null || msdsEndpoint.isEmpty()) {\n+            throw new IllegalStateException(\n+                \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+          }\n+\n+          // Note: HttpClient's timeout settings are system timeout settings by default\n+          CloseableHttpClient httpClient = HttpClients.createDefault();\n+          // Update the reference\n+          _rawRoutingData = getAllRoutingData(httpClient, msdsEndpoint);\n+          // Close any open resources\n+          httpClient.close();\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @param httpClient\n+   * @param msdsEndpoint\n+   * @return\n+   * @throws IOException\n+   */\n+  private static Map<String, List<String>> getAllRoutingData(CloseableHttpClient httpClient,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MTkyMw=="}, "originalCommit": {"oid": "0780818b1c0a28e595523373e7bae249f6a7c900"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTY3ODEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDozMToyNVrOFt4V6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoyOToyNlrOFt7IeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MzM1Mg==", "bodyText": "Can we make the versions consistent and most recent if possible?", "url": "https://github.com/apache/helix/pull/775#discussion_r383653352", "createdAt": "2020-02-25T04:31:25Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/pom.xml", "diffHunk": "@@ -59,6 +59,11 @@ under the License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.11</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5OTA2NQ==", "bodyText": "Updated to 4.5.8", "url": "https://github.com/apache/helix/pull/775#discussion_r383699065", "createdAt": "2020-02-25T07:29:26Z", "author": {"login": "narendly"}, "path": "zookeeper-api/pom.xml", "diffHunk": "@@ -59,6 +59,11 @@ under the License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.11</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MzM1Mg=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTY4MTU4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDozNDowMVrOFt4X8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowOTozOVrOFt8Cuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1Mzg3NQ==", "bodyText": "Nit, we had a change for helix style IntelliJ. With the new change, this line should not be wrapped. Can you update your style and format it?", "url": "https://github.com/apache/helix/pull/775#discussion_r383653875", "createdAt": "2020-02-25T04:34:01Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass()\n+      throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData()\n+      throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxMzk3OQ==", "bodyText": "Updated", "url": "https://github.com/apache/helix/pull/775#discussion_r383713979", "createdAt": "2020-02-25T08:09:39Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass()\n+      throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData()\n+      throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1Mzg3NQ=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTY4MTg5OnYy", "diffSide": "RIGHT", "path": "metadata-store-directory-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDozNDoxOVrOFt4YJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoyODo0MFrOFt7Hdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MzkyNQ==", "bodyText": "Consistent version.", "url": "https://github.com/apache/helix/pull/775#discussion_r383653925", "createdAt": "2020-02-25T04:34:19Z", "author": {"login": "huizhilu"}, "path": "metadata-store-directory-common/pom.xml", "diffHunk": "@@ -43,6 +43,11 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.8</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5ODgwNg==", "bodyText": "Updated to 4.5.8 all throughout", "url": "https://github.com/apache/helix/pull/775#discussion_r383698806", "createdAt": "2020-02-25T07:28:40Z", "author": {"login": "narendly"}, "path": "metadata-store-directory-common/pom.xml", "diffHunk": "@@ -43,6 +43,11 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.8</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MzkyNQ=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTcwMjQyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDo0ODoxNFrOFt4jjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzowOVrOFt7--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1Njg0Nw==", "bodyText": "Just a question: Do we need to set encoding like UTF-8 ? As jersey uses UTF-8 by default, while EntityUtils.toString uses \"ISO-8859-1\" if encoding is not set is header. Maybe just need to confirm at least our rest server includes \"UTF-8\" in header.", "url": "https://github.com/apache/helix/pull/775#discussion_r383656847", "createdAt": "2020-02-25T04:48:14Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData()\n+      throws IOException {\n+    // Retry count is 3 by default\n+    HttpGet requestAllData = new HttpGet(\n+        MSDS_ENDPOINT + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    try (CloseableHttpClient httpClient = HttpClients.custom()\n+        .setConnectionBackoffStrategy(new DefaultBackoffStrategy())\n+        .setRetryHandler(new DefaultHttpRequestRetryHandler()).build()) {\n+      return httpClient.execute(requestAllData);\n+    }\n+  }\n+\n+  /**\n+   * Returns the raw routing data in a Map< ZkRealm, List of shardingKeys > format.\n+   * @param routingDataResponse\n+   * @return\n+   */\n+  private static Map<String, List<String>> parseRoutingData(\n+      CloseableHttpResponse routingDataResponse)\n+      throws IOException {\n+    HttpEntity entity = routingDataResponse.getEntity();\n+    if (entity != null) {\n+      String resultStr = EntityUtils.toString(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxMzAxNg==", "bodyText": "Either way seems to work. But setting it as UTF-8 just in case.", "url": "https://github.com/apache/helix/pull/775#discussion_r383713016", "createdAt": "2020-02-25T08:07:09Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData()\n+      throws IOException {\n+    // Retry count is 3 by default\n+    HttpGet requestAllData = new HttpGet(\n+        MSDS_ENDPOINT + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    try (CloseableHttpClient httpClient = HttpClients.custom()\n+        .setConnectionBackoffStrategy(new DefaultBackoffStrategy())\n+        .setRetryHandler(new DefaultHttpRequestRetryHandler()).build()) {\n+      return httpClient.execute(requestAllData);\n+    }\n+  }\n+\n+  /**\n+   * Returns the raw routing data in a Map< ZkRealm, List of shardingKeys > format.\n+   * @param routingDataResponse\n+   * @return\n+   */\n+  private static Map<String, List<String>> parseRoutingData(\n+      CloseableHttpResponse routingDataResponse)\n+      throws IOException {\n+    HttpEntity entity = routingDataResponse.getEntity();\n+    if (entity != null) {\n+      String resultStr = EntityUtils.toString(entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1Njg0Nw=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTc4Mjc3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo0Mjo0N1rOFt5SqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzoxOFrOFt7_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY2ODkwNA==", "bodyText": "I don't see a timeout setting. If we don't set timeout, it may use system defined timeout or infinite timeout. To make the system responsive and stable, are we considering timeout: connectTimeout, socketTimeout, etc.?", "url": "https://github.com/apache/helix/pull/775#discussion_r383668904", "createdAt": "2020-02-25T05:42:47Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData()\n+      throws IOException {\n+    // Retry count is 3 by default\n+    HttpGet requestAllData = new HttpGet(\n+        MSDS_ENDPOINT + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    try (CloseableHttpClient httpClient = HttpClients.custom()\n+        .setConnectionBackoffStrategy(new DefaultBackoffStrategy())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxMzA2OQ==", "bodyText": "Set.", "url": "https://github.com/apache/helix/pull/775#discussion_r383713069", "createdAt": "2020-02-25T08:07:18Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData()\n+      throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData()\n+      throws IOException {\n+    // Retry count is 3 by default\n+    HttpGet requestAllData = new HttpGet(\n+        MSDS_ENDPOINT + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    try (CloseableHttpClient httpClient = HttpClients.custom()\n+        .setConnectionBackoffStrategy(new DefaultBackoffStrategy())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY2ODkwNA=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTk4NTAwOnYy", "diffSide": "RIGHT", "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzozMToxMFrOFt7KtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxNToyMlrOFt8MWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5OTYzNw==", "bodyText": "Minor as it is a test: maybe we would use try...finally to close the server and client, in case exception or assertion fails and server is still running?", "url": "https://github.com/apache/helix/pull/775#discussion_r383699637", "createdAt": "2020-02-25T07:31:10Z", "author": {"login": "huizhilu"}, "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.apache.helix.msdcommon.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+\n+public class TestMockMetadataStoreDirectoryServer {\n+  @Test\n+  public void testMockMetadataStoreDirectoryServer()\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, Collection<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request for all routing data\n+    HttpGet getRequest = new HttpGet(\n+        endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+            + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+\n+    CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+    Map<String, Object> resultMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    List<Map<String, Object>> routingDataList =\n+        (List<Map<String, Object>>) resultMap.get(MetadataStoreRoutingConstants.ROUTING_DATA);\n+    Collection<String> allRealms = routingDataList.stream().map(mapEntry -> (String) mapEntry\n+        .get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM))\n+        .collect(Collectors.toSet());\n+    Assert.assertEquals(allRealms, routingData.keySet());\n+    Map<String, List<String>> retrievedRoutingData = routingDataList.stream().collect(Collectors\n+        .toMap(mapEntry -> (String) mapEntry\n+                .get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM),\n+            mapEntry -> (List<String>) mapEntry.get(MetadataStoreRoutingConstants.SHARDING_KEYS)));\n+    Assert.assertEquals(retrievedRoutingData, routingData);\n+\n+    // Send a GET request for all realms\n+    getRequest = new HttpGet(endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+        + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT);\n+    getResponse = httpClient.execute(getRequest);\n+    Map<String, Collection<String>> allRealmsMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    Assert\n+        .assertTrue(allRealmsMap.containsKey(MetadataStoreRoutingConstants.METADATA_STORE_REALMS));\n+    allRealms = allRealmsMap.get(MetadataStoreRoutingConstants.METADATA_STORE_REALMS);\n+    Assert.assertEquals(allRealms, routingData.keySet());\n+\n+    // Send a GET request for testZkRealm\n+    String testZkRealm = \"zk-0\";\n+    getRequest = new HttpGet(endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+        + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT + \"/\" + testZkRealm);\n+    getResponse = httpClient.execute(getRequest);\n+    Map<String, Object> shardingKeysMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    Assert.assertTrue(\n+        shardingKeysMap.containsKey(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM));\n+    Assert.assertTrue(shardingKeysMap.containsKey(MetadataStoreRoutingConstants.SHARDING_KEYS));\n+    String zkRealm =\n+        (String) shardingKeysMap.get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM);\n+    Collection<String> shardingKeyList =\n+        (Collection) shardingKeysMap.get(MetadataStoreRoutingConstants.SHARDING_KEYS);\n+    Assert.assertEquals(zkRealm, testZkRealm);\n+    Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest = new HttpPost(\n+        endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+            + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT + \"/\" + testZkRealm);\n+    CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+\n+    // Shutdown\n+    server.stopServer();\n+    httpClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNjQ0MQ==", "bodyText": "Sure. updated.", "url": "https://github.com/apache/helix/pull/775#discussion_r383716441", "createdAt": "2020-02-25T08:15:22Z", "author": {"login": "narendly"}, "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.apache.helix.msdcommon.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+\n+public class TestMockMetadataStoreDirectoryServer {\n+  @Test\n+  public void testMockMetadataStoreDirectoryServer()\n+      throws IOException {\n+    // Create fake routing data\n+    Map<String, Collection<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    server.startServer();\n+    CloseableHttpClient httpClient = HttpClients.createDefault();\n+\n+    // Send a GET request for all routing data\n+    HttpGet getRequest = new HttpGet(\n+        endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+            + MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+\n+    CloseableHttpResponse getResponse = httpClient.execute(getRequest);\n+    Map<String, Object> resultMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    List<Map<String, Object>> routingDataList =\n+        (List<Map<String, Object>>) resultMap.get(MetadataStoreRoutingConstants.ROUTING_DATA);\n+    Collection<String> allRealms = routingDataList.stream().map(mapEntry -> (String) mapEntry\n+        .get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM))\n+        .collect(Collectors.toSet());\n+    Assert.assertEquals(allRealms, routingData.keySet());\n+    Map<String, List<String>> retrievedRoutingData = routingDataList.stream().collect(Collectors\n+        .toMap(mapEntry -> (String) mapEntry\n+                .get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM),\n+            mapEntry -> (List<String>) mapEntry.get(MetadataStoreRoutingConstants.SHARDING_KEYS)));\n+    Assert.assertEquals(retrievedRoutingData, routingData);\n+\n+    // Send a GET request for all realms\n+    getRequest = new HttpGet(endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+        + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT);\n+    getResponse = httpClient.execute(getRequest);\n+    Map<String, Collection<String>> allRealmsMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    Assert\n+        .assertTrue(allRealmsMap.containsKey(MetadataStoreRoutingConstants.METADATA_STORE_REALMS));\n+    allRealms = allRealmsMap.get(MetadataStoreRoutingConstants.METADATA_STORE_REALMS);\n+    Assert.assertEquals(allRealms, routingData.keySet());\n+\n+    // Send a GET request for testZkRealm\n+    String testZkRealm = \"zk-0\";\n+    getRequest = new HttpGet(endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+        + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT + \"/\" + testZkRealm);\n+    getResponse = httpClient.execute(getRequest);\n+    Map<String, Object> shardingKeysMap = MockMetadataStoreDirectoryServer.OBJECT_MAPPER\n+        .readValue(getResponse.getEntity().getContent(), Map.class);\n+    Assert.assertTrue(\n+        shardingKeysMap.containsKey(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM));\n+    Assert.assertTrue(shardingKeysMap.containsKey(MetadataStoreRoutingConstants.SHARDING_KEYS));\n+    String zkRealm =\n+        (String) shardingKeysMap.get(MetadataStoreRoutingConstants.SINGLE_METADATA_STORE_REALM);\n+    Collection<String> shardingKeyList =\n+        (Collection) shardingKeysMap.get(MetadataStoreRoutingConstants.SHARDING_KEYS);\n+    Assert.assertEquals(zkRealm, testZkRealm);\n+    Assert.assertEquals(shardingKeyList, routingData.get(testZkRealm));\n+\n+    // Try sending a POST request (not supported)\n+    HttpPost postRequest = new HttpPost(\n+        endpoint + MockMetadataStoreDirectoryServer.REST_PREFIX + namespace\n+            + MockMetadataStoreDirectoryServer.ZK_REALM_ENDPOINT + \"/\" + testZkRealm);\n+    CloseableHttpResponse postResponse = httpClient.execute(postRequest);\n+\n+    // Shutdown\n+    server.stopServer();\n+    httpClient.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5OTYzNw=="}, "originalCommit": {"oid": "c130620a404292554d67a989bca47736f67278f0"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODA5NDQ2OnYy", "diffSide": "RIGHT", "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzo0Mjo1MVrOFuPNbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyODo0N1rOFuSOJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODAxNA==", "bodyText": "Nit, maybe start server before try?", "url": "https://github.com/apache/helix/pull/775#discussion_r384028014", "createdAt": "2020-02-25T17:42:51Z", "author": {"login": "huizhilu"}, "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.apache.helix.msdcommon.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+\n+public class TestMockMetadataStoreDirectoryServer {\n+  @Test\n+  public void testMockMetadataStoreDirectoryServer() throws IOException {\n+    // Create fake routing data\n+    Map<String, Collection<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n+      server.startServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NzM1MA==", "bodyText": "OK", "url": "https://github.com/apache/helix/pull/775#discussion_r384077350", "createdAt": "2020-02-25T19:28:47Z", "author": {"login": "narendly"}, "path": "metadata-store-directory-common/src/test/java/org/apache/helix/msdcommon/mock/TestMockMetadataStoreDirectoryServer.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.apache.helix.msdcommon.mock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+\n+public class TestMockMetadataStoreDirectoryServer {\n+  @Test\n+  public void testMockMetadataStoreDirectoryServer() throws IOException {\n+    // Create fake routing data\n+    Map<String, Collection<String>> routingData = new HashMap<>();\n+    routingData.put(\"zk-0\", ImmutableList.of(\"sharding-key-0\", \"sharding-key-1\", \"sharding-key-2\"));\n+    routingData.put(\"zk-1\", ImmutableList.of(\"sharding-key-3\", \"sharding-key-4\", \"sharding-key-5\"));\n+    routingData.put(\"zk-2\", ImmutableList.of(\"sharding-key-6\", \"sharding-key-7\", \"sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    String host = \"localhost\";\n+    int port = 11000;\n+    String endpoint = \"http://\" + host + \":\" + port;\n+    String namespace = \"MY-HELIX-NAMESPACE\";\n+\n+    MockMetadataStoreDirectoryServer server =\n+        new MockMetadataStoreDirectoryServer(host, port, namespace, routingData);\n+    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n+      server.startServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODAxNA=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODE4OTQwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNTo1NlrOFuQHug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0NjoxMlrOFuSzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MjkzOA==", "bodyText": "Can Assert correctly check a list and a collection (a set instance) ? I doubt it.", "url": "https://github.com/apache/helix/pull/775#discussion_r384042938", "createdAt": "2020-02-25T18:25:56Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4Njg1OA==", "bodyText": "Would you feel more comfortable if I wrapped it as a HashMap? done.", "url": "https://github.com/apache/helix/pull/775#discussion_r384086858", "createdAt": "2020-02-25T19:46:12Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MjkzOA=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODIxODk0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozNDoxN1rOFuQZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo1MDo1NlrOFuS85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzUzMg==", "bodyText": "What do you mean here? My understanding is, if neither set is null, Assert could check them, regardless ordering of elements: set[\"a\", \"b\", \"c\"], set[\"c\", \"b\", \"a\"] should be equal. What is the case they are not equal: \"if the ordering of elements is not equal\"?", "url": "https://github.com/apache/helix/pull/775#discussion_r384047532", "createdAt": "2020-02-25T18:34:17Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));\n+  }\n+\n+  @Test(dependsOnMethods = \"testGetRawRoutingData\")\n+  public void testGetMetadataStoreRoutingData() throws IOException, InvalidRoutingDataException {\n+    MetadataStoreRoutingData data = HttpRoutingDataReader.getMetadataStoreRoutingData();\n+    Map<String, String> allMappings = data.getAllMappingUnderPath(\"/\");\n+    Map<String, Set<String>> groupedMappings = allMappings.entrySet().stream().collect(Collectors\n+        .groupingBy(Map.Entry::getValue,\n+            Collectors.mapping(Map.Entry::getKey, Collectors.toSet())));\n+    _testRawRoutingData.forEach((realm, keys) -> {\n+      // Two way containsAll because AssertEquals on two set collections is buggy in that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjcxMg==", "bodyText": "I'm not quite sure I understand what you're asking. Two-way containsAll is basically an equality check. .", "url": "https://github.com/apache/helix/pull/775#discussion_r384072712", "createdAt": "2020-02-25T19:20:22Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));\n+  }\n+\n+  @Test(dependsOnMethods = \"testGetRawRoutingData\")\n+  public void testGetMetadataStoreRoutingData() throws IOException, InvalidRoutingDataException {\n+    MetadataStoreRoutingData data = HttpRoutingDataReader.getMetadataStoreRoutingData();\n+    Map<String, String> allMappings = data.getAllMappingUnderPath(\"/\");\n+    Map<String, Set<String>> groupedMappings = allMappings.entrySet().stream().collect(Collectors\n+        .groupingBy(Map.Entry::getValue,\n+            Collectors.mapping(Map.Entry::getKey, Collectors.toSet())));\n+    _testRawRoutingData.forEach((realm, keys) -> {\n+      // Two way containsAll because AssertEquals on two set collections is buggy in that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzUzMg=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTMxNg==", "bodyText": "I understand Two-way containsAll is basically an equality check.\nMy point is, if the 2 sets have the same string elements, assertEqual() should pass, no matter the ordering of elements is equal or not.", "url": "https://github.com/apache/helix/pull/775#discussion_r384089316", "createdAt": "2020-02-25T19:50:56Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));\n+  }\n+\n+  @Test(dependsOnMethods = \"testGetRawRoutingData\")\n+  public void testGetMetadataStoreRoutingData() throws IOException, InvalidRoutingDataException {\n+    MetadataStoreRoutingData data = HttpRoutingDataReader.getMetadataStoreRoutingData();\n+    Map<String, String> allMappings = data.getAllMappingUnderPath(\"/\");\n+    Map<String, Set<String>> groupedMappings = allMappings.entrySet().stream().collect(Collectors\n+        .groupingBy(Map.Entry::getValue,\n+            Collectors.mapping(Map.Entry::getKey, Collectors.toSet())));\n+    _testRawRoutingData.forEach((realm, keys) -> {\n+      // Two way containsAll because AssertEquals on two set collections is buggy in that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzUzMg=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMwMDczOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1NzoxMVrOFuRMBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0NjoyN1rOFuSzyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MDQyMQ==", "bodyText": "If you say \"should still return old data because it's static\", I think it is important to check we could still check the old data is actually returned. assert rawRoutingData equals to _rawRoutingData?", "url": "https://github.com/apache/helix/pull/775#discussion_r384060421", "createdAt": "2020-02-25T18:57:11Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));\n+  }\n+\n+  @Test(dependsOnMethods = \"testGetRawRoutingData\")\n+  public void testGetMetadataStoreRoutingData() throws IOException, InvalidRoutingDataException {\n+    MetadataStoreRoutingData data = HttpRoutingDataReader.getMetadataStoreRoutingData();\n+    Map<String, String> allMappings = data.getAllMappingUnderPath(\"/\");\n+    Map<String, Set<String>> groupedMappings = allMappings.entrySet().stream().collect(Collectors\n+        .groupingBy(Map.Entry::getValue,\n+            Collectors.mapping(Map.Entry::getKey, Collectors.toSet())));\n+    _testRawRoutingData.forEach((realm, keys) -> {\n+      // Two way containsAll because AssertEquals on two set collections is buggy in that\n+      // it will fail if the ordering of elements is not equal (we just want to compare contents)\n+      Assert.assertTrue(groupedMappings.get(realm).containsAll(keys));\n+      Assert.assertTrue(keys.containsAll(groupedMappings.get(realm)));\n+    });\n+  }\n+\n+  /**\n+   * Test that the static methods in HttpRoutingDataReader returns consistent results even though MSDS's data have been updated.\n+   */\n+  @Test(dependsOnMethods = \"testGetMetadataStoreRoutingData\")\n+  public void testStaticMapping() throws IOException, InvalidRoutingDataException {\n+    // Modify routing data\n+    String newRealm = \"newRealm\";\n+    _testRawRoutingData.put(newRealm, ImmutableSet.of(\"/newKey\"));\n+\n+    // Kill MSDS and restart with a new mapping\n+    _msdsServer.stopServer();\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // HttpRoutingDataReader should still return old data because it's static\n+    // Make sure the results don't contain the new realm\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    Assert.assertFalse(rawRoutingData.containsKey(newRealm));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4Njk4Ng==", "bodyText": "I could do that check too.", "url": "https://github.com/apache/helix/pull/775#discussion_r384086986", "createdAt": "2020-02-25T19:46:27Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/util/TestHttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.impl.ZkTestBase;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestHttpRoutingDataReader extends ZkTestBase {\n+  private MockMetadataStoreDirectoryServer _msdsServer;\n+  private Map<String, Collection<String>> _testRawRoutingData;\n+  private final String _host = \"localhost\";\n+  private final int _port = 1991;\n+  private final String _namespace = \"TestHttpRoutingDataReader\";\n+\n+  @BeforeClass\n+  public void beforeClass() throws IOException {\n+    // Create fake routing data\n+    _testRawRoutingData = new HashMap<>();\n+    _testRawRoutingData\n+        .put(\"zk-0\", ImmutableSet.of(\"/sharding-key-0\", \"/sharding-key-1\", \"/sharding-key-2\"));\n+    _testRawRoutingData\n+        .put(\"zk-1\", ImmutableSet.of(\"/sharding-key-3\", \"/sharding-key-4\", \"/sharding-key-5\"));\n+    _testRawRoutingData\n+        .put(\"zk-2\", ImmutableSet.of(\"/sharding-key-6\", \"/sharding-key-7\", \"/sharding-key-8\"));\n+\n+    // Start MockMSDS\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // Register the endpoint as a System property\n+    String msdsEndpoint = \"http://\" + _host + \":\" + _port + \"/admin/v2/namespaces/\" + _namespace;\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY, msdsEndpoint);\n+  }\n+\n+  @AfterClass\n+  public void afterClass() {\n+    _msdsServer.stopServer();\n+  }\n+\n+  @Test\n+  public void testGetRawRoutingData() throws IOException {\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    _testRawRoutingData\n+        .forEach((realm, keys) -> Assert.assertEquals(rawRoutingData.get(realm), keys));\n+  }\n+\n+  @Test(dependsOnMethods = \"testGetRawRoutingData\")\n+  public void testGetMetadataStoreRoutingData() throws IOException, InvalidRoutingDataException {\n+    MetadataStoreRoutingData data = HttpRoutingDataReader.getMetadataStoreRoutingData();\n+    Map<String, String> allMappings = data.getAllMappingUnderPath(\"/\");\n+    Map<String, Set<String>> groupedMappings = allMappings.entrySet().stream().collect(Collectors\n+        .groupingBy(Map.Entry::getValue,\n+            Collectors.mapping(Map.Entry::getKey, Collectors.toSet())));\n+    _testRawRoutingData.forEach((realm, keys) -> {\n+      // Two way containsAll because AssertEquals on two set collections is buggy in that\n+      // it will fail if the ordering of elements is not equal (we just want to compare contents)\n+      Assert.assertTrue(groupedMappings.get(realm).containsAll(keys));\n+      Assert.assertTrue(keys.containsAll(groupedMappings.get(realm)));\n+    });\n+  }\n+\n+  /**\n+   * Test that the static methods in HttpRoutingDataReader returns consistent results even though MSDS's data have been updated.\n+   */\n+  @Test(dependsOnMethods = \"testGetMetadataStoreRoutingData\")\n+  public void testStaticMapping() throws IOException, InvalidRoutingDataException {\n+    // Modify routing data\n+    String newRealm = \"newRealm\";\n+    _testRawRoutingData.put(newRealm, ImmutableSet.of(\"/newKey\"));\n+\n+    // Kill MSDS and restart with a new mapping\n+    _msdsServer.stopServer();\n+    _msdsServer =\n+        new MockMetadataStoreDirectoryServer(_host, _port, _namespace, _testRawRoutingData);\n+    _msdsServer.startServer();\n+\n+    // HttpRoutingDataReader should still return old data because it's static\n+    // Make sure the results don't contain the new realm\n+    Map<String, List<String>> rawRoutingData = HttpRoutingDataReader.getRawRoutingData();\n+    Assert.assertFalse(rawRoutingData.containsKey(newRealm));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MDQyMQ=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMwODM5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo1OToyMlrOFuRQ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyMDo1OFrOFuR9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MTY2MA==", "bodyText": "Where is retry count set? Also, shall we make the retry count configurable? I think configurable can be good idea. 3 still seems to me not very safe. If this part not working well, the whole cluster may not bootup.", "url": "https://github.com/apache/helix/pull/775#discussion_r384061660", "createdAt": "2020-02-25T18:59:22Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData() throws IOException {\n+    // Retry count is 3 by default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MzA3NA==", "bodyText": "@kaisun2000 Please create an issue for this - retry is set as the default HttpClient behavior.", "url": "https://github.com/apache/helix/pull/775#discussion_r384073074", "createdAt": "2020-02-25T19:20:58Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData() throws IOException {\n+    // Retry count is 3 by default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MTY2MA=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMyNTc2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowNDoyMVrOFuRbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTozMDozN1rOFuSR2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NDQ0MA==", "bodyText": "_parseRoutingData can return an empty map. Then the empty map can be return to user.  This is basically telling user we find nothing. This is error condition.\nIf we make this method public, we should let user know this error condition by throwing exception.", "url": "https://github.com/apache/helix/pull/775#discussion_r384064440", "createdAt": "2020-02-25T19:04:21Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3ODI5OQ==", "bodyText": "If we find nothing, we should return an empty map. Users should handle it. Helix Java APIs are the users, and they will handle this scenario as well.\nIn other situations (IOException, invalidRoutingDataExceptions), appropriate exceptions are thrown.", "url": "https://github.com/apache/helix/pull/775#discussion_r384078299", "createdAt": "2020-02-25T19:30:37Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NDQ0MA=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMzMzEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowNjo0NlrOFuRgiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDozNDowMFrOFuUQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTY3Mw==", "bodyText": "I did not examine the TrieRoutingData implementation. Can we make sure _metaDataStoreRoutingData will not be empty map after this line?\nThis is important. Otherwise, with empty map, you are not going to retry getRawRoutingData. The result is disaster then.", "url": "https://github.com/apache/helix/pull/775#discussion_r384065673", "createdAt": "2020-02-25T19:06:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3OTU2OQ==", "bodyText": "_metaDataStoreRoutingData is not a map. It may have empty content, but if it does have an empty content, the users will fail (basically fail to instantiate).\nThis RoutingDataReader only reads - and from its perspective, it can read something that's empty. That's valid. Error checking should be done by the user. Separation of responsibility.", "url": "https://github.com/apache/helix/pull/775#discussion_r384079569", "createdAt": "2020-02-25T19:32:54Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTY3Mw=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMDc3Ng==", "bodyText": "Better to throw if _metaDataStoreRoutingData upon instantiation successfully still have empty (invalid data). Throw early easy for user to identify the problem.", "url": "https://github.com/apache/helix/pull/775#discussion_r384110776", "createdAt": "2020-02-25T20:34:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTY3Mw=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM1MTAzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMjozMFrOFuRr8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTozMzoxMlrOFuSXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODU5NQ==", "bodyText": "Let us add a comment here.\nWe avoid this point to be SPOF by relying on VIP LB and retry mechanism. This dependency is important. We may revisit this dependency assumption later.", "url": "https://github.com/apache/helix/pull/775#discussion_r384068595", "createdAt": "2020-02-25T19:12:30Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NzA3OQ==", "bodyText": "OK.", "url": "https://github.com/apache/helix/pull/775#discussion_r384077079", "createdAt": "2020-02-25T19:28:18Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODU5NQ=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3OTcwNA==", "bodyText": "OK. I will add clarifying comment next to MSDS endpoint.", "url": "https://github.com/apache/helix/pull/775#discussion_r384079704", "createdAt": "2020-02-25T19:33:12Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.zookeeper.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.datamodel.MetadataStoreRoutingData;\n+import org.apache.helix.msdcommon.datamodel.TrieRoutingData;\n+import org.apache.helix.msdcommon.exception.InvalidRoutingDataException;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.DefaultBackoffStrategy;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+\n+public class HttpRoutingDataReader {\n+  private static final String MSDS_ENDPOINT =\n+      System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+  private static final int HTTP_TIMEOUT_IN_MS = 5000;\n+\n+  /** Double-checked locking requires that the following fields be volatile */\n+  private static volatile Map<String, List<String>> _rawRoutingData;\n+  private static volatile MetadataStoreRoutingData _metadataStoreRoutingData;\n+\n+  /**\n+   * This class is a Singleton.\n+   */\n+  private HttpRoutingDataReader() {\n+  }\n+\n+  /**\n+   * Fetches routing data from the data source via HTTP.\n+   * @return a mapping from \"metadata store realm addresses\" to lists of\n+   * \"metadata store sharding keys\", where the sharding keys in a value list all route to\n+   * the realm address in the key disallows a meaningful mapping to be returned\n+   */\n+  public static Map<String, List<String>> getRawRoutingData() throws IOException {\n+    if (MSDS_ENDPOINT == null || MSDS_ENDPOINT.isEmpty()) {\n+      throw new IllegalStateException(\n+          \"HttpRoutingDataReader was unable to find a valid MSDS endpoint String in System Properties!\");\n+    }\n+    if (_rawRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_rawRoutingData == null) {\n+          CloseableHttpResponse routingDataResponse = getAllRoutingData();\n+          // Update the reference if reading routingData over HTTP is successful\n+          _rawRoutingData = parseRoutingData(routingDataResponse);\n+        }\n+      }\n+    }\n+    return _rawRoutingData;\n+  }\n+\n+  /**\n+   * Returns the routing data read from MSDS in a MetadataStoreRoutingData format.\n+   * @return\n+   * @throws IOException if there is an issue connecting to MSDS\n+   * @throws InvalidRoutingDataException if the raw routing data is not valid\n+   */\n+  public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n+      throws IOException, InvalidRoutingDataException {\n+    if (_metadataStoreRoutingData == null) {\n+      synchronized (HttpRoutingDataReader.class) {\n+        if (_metadataStoreRoutingData == null) {\n+          _metadataStoreRoutingData = new TrieRoutingData(getRawRoutingData());\n+        }\n+      }\n+    }\n+    return _metadataStoreRoutingData;\n+  }\n+\n+  /**\n+   * Makes an HTTP call to fetch all routing data.\n+   * @return\n+   * @throws IOException\n+   */\n+  private static CloseableHttpResponse getAllRoutingData() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODU5NQ=="}, "originalCommit": {"oid": "c09373c36acec7044b9a378d230e6a44e828582b"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1640, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}