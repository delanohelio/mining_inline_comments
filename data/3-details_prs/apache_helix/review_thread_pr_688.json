{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTM5OTEz", "number": 688, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzozNzo1N1rODY47xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoxMzozMVrODdlP6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDI1MjIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzozNzo1N1rOFfATAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowOTowN1rOFfBB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NTA0MA==", "bodyText": "nit: doesPathExist or pathExists", "url": "https://github.com/apache/helix/pull/688#discussion_r368055040", "createdAt": "2020-01-17T17:37:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NzA0OQ==", "bodyText": "Another option is, you can pass the EventType to fireDataChangedEvents. I think this option is better than passing a boolean as parameter to determine the behavior. So you don't have to check the condition here.", "url": "https://github.com/apache/helix/pull/688#discussion_r368067049", "createdAt": "2020-01-17T18:09:07Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NTA0MA=="}, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDMxMDI0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMTo0OFrOFfA24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMToyODoxMlrOFfI5TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDIyNQ==", "bodyText": "Could you add some javadoc on how this is different from the other method?", "url": "https://github.com/apache/helix/pull/688#discussion_r368064225", "createdAt": "2020-01-17T18:01:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5NTkxNw==", "bodyText": "done", "url": "https://github.com/apache/helix/pull/688#discussion_r368195917", "createdAt": "2020-01-18T01:28:12Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDIyNQ=="}, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDMyMjI0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNjo1MFrOFfA-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMTo0MDo0NFrOFfI9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjE3MQ==", "bodyText": "Question: main Helix paths (like /IDEALSTATES, /CONFIG, etc) do not get deleted, so I am wondering if this is really meaningful?\nI think handling deleted/non-existent ZNodes might be more effective for children ZNodes? Like not the main IDEALSTATES path, but the IdealState ZNodes inside it.", "url": "https://github.com/apache/helix/pull/688#discussion_r368066171", "createdAt": "2020-01-17T18:06:50Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    for (final IZkDataListenerEntry listener : listeners) {\n+      ZkEvent zkEvent = new ZkEvent(\n+          \"Data of \" + path + \" changed sent to \" + listener.getDataListener() + \" prefetch data: \"\n+              + listener.isPrefetchData()) {\n+        @Override\n+        public void run()\n+            throws Exception {\n+          Object data;\n+          // TODO: are we fetching the data multiple times?\n+          if (listener.isPrefetchData()) {\n+            LOG.debug(\"Prefetch data for path: {}\", path);\n+            try {\n+              data = readData(path, null, true);\n+            } catch (ZkNoNodeException e) {\n+              LOG.warn(\"Prefetch data for path: {} failed.\", path, e);\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n+            listener.getDataListener().handleDataChange(path, data);\n+          }\n+        }\n+      };\n+\n+      _eventThread.send(zkEvent);\n+    }\n+  }\n+\n   private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners,\n-      final OptionalLong notificationTime) {\n+      final long notificationTime, final boolean isPathExist) {\n+    final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5Njk5Mw==", "bodyText": "The truth is: currently both exists listener and child listener are listening on the path (e.g /IDEALSTATES/db32). When the db32 path is removed, both types of listeners will get triggered and they should be (cannot avoid it) unless doing additional checks on the path (check if it's Helix main path or not).\nThe child change handler needs to handle the child node change. Then a re-installation of a child handler needs to happen.\nThe data change handler also gets triggered to handle the data change. In the deletion case, because of the existing code, we'll add the unwanted watcher again onto the deleted path. With the fix, it will avoid adding the unwanted watcher and the logic applies to every path in Znode", "url": "https://github.com/apache/helix/pull/688#discussion_r368196993", "createdAt": "2020-01-18T01:40:44Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    for (final IZkDataListenerEntry listener : listeners) {\n+      ZkEvent zkEvent = new ZkEvent(\n+          \"Data of \" + path + \" changed sent to \" + listener.getDataListener() + \" prefetch data: \"\n+              + listener.isPrefetchData()) {\n+        @Override\n+        public void run()\n+            throws Exception {\n+          Object data;\n+          // TODO: are we fetching the data multiple times?\n+          if (listener.isPrefetchData()) {\n+            LOG.debug(\"Prefetch data for path: {}\", path);\n+            try {\n+              data = readData(path, null, true);\n+            } catch (ZkNoNodeException e) {\n+              LOG.warn(\"Prefetch data for path: {} failed.\", path, e);\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n+            listener.getDataListener().handleDataChange(path, data);\n+          }\n+        }\n+      };\n+\n+      _eventThread.send(zkEvent);\n+    }\n+  }\n+\n   private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners,\n-      final OptionalLong notificationTime) {\n+      final long notificationTime, final boolean isPathExist) {\n+    final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjE3MQ=="}, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDMzNjkwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoxMjo0MlrOFfBHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoxMjo0MlrOFfBHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODQ4NA==", "bodyText": "I think you can refactor fireDataChangedEvents(path, listeners, notificationTime, isPathExist) a bit, which fireDataChangedEvents(path, listeners) can call. So we would avoid duplicate code and 2 branches of logic.", "url": "https://github.com/apache/helix/pull/688#discussion_r368068484", "createdAt": "2020-01-17T18:12:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTk2MTMwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToxOTowMlrOFfPWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzo0MToyM1rOFi4cOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTYyMQ==", "bodyText": "I did not see the value of changing this. If you feel this is necessary, please make it for separate PR as it does impact logic and purely code refactoring.", "url": "https://github.com/apache/helix/pull/688#discussion_r368301621", "createdAt": "2020-01-19T15:19:02Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);\n \n-    public ZkPathStatRecord(String path) {\n+    ZkPathStatRecord(String path) {\n       _path = path;\n     }\n \n-    public boolean pathExists() {\n-      return _stat != null;\n-    }\n-\n-    public boolean pathChecked() {\n-      return _checked;\n+    boolean isPathChecked() {\n+      return _isChecked.get();\n     }\n \n     /*\n      * Note this method is not thread safe.\n      */\n-    public void recordPathStat(Stat stat, OptionalLong notificationTime) {\n-      _checked = true;\n-      _stat = stat;\n-\n-      if (_monitor != null && stat != null && notificationTime.isPresent()) {\n+    void recordPathStat(Stat stat, long notificationTime) {\n+      if (isPathChecked()) {\n+        return;\n+      }\n+      _isChecked.set(true);\n+      if (_monitor != null && stat != null) {\n         long updateTime = Math.max(stat.getCtime(), stat.getMtime());\n-        if (notificationTime.getAsLong() > updateTime) {\n-          _monitor.recordDataPropagationLatency(_path, notificationTime.getAsLong() - updateTime);\n+        if (notificationTime > updateTime) {\n+          _monitor.recordDataPropagationLatency(_path, notificationTime - updateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDYzNA==", "bodyText": "The latest changes will not need to touch the existing codes too much, so it's no longer valid. Could you take another look, thanks?", "url": "https://github.com/apache/helix/pull/688#discussion_r372120634", "createdAt": "2020-01-28T23:41:23Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);\n \n-    public ZkPathStatRecord(String path) {\n+    ZkPathStatRecord(String path) {\n       _path = path;\n     }\n \n-    public boolean pathExists() {\n-      return _stat != null;\n-    }\n-\n-    public boolean pathChecked() {\n-      return _checked;\n+    boolean isPathChecked() {\n+      return _isChecked.get();\n     }\n \n     /*\n      * Note this method is not thread safe.\n      */\n-    public void recordPathStat(Stat stat, OptionalLong notificationTime) {\n-      _checked = true;\n-      _stat = stat;\n-\n-      if (_monitor != null && stat != null && notificationTime.isPresent()) {\n+    void recordPathStat(Stat stat, long notificationTime) {\n+      if (isPathChecked()) {\n+        return;\n+      }\n+      _isChecked.set(true);\n+      if (_monitor != null && stat != null) {\n         long updateTime = Math.max(stat.getCtime(), stat.getMtime());\n-        if (notificationTime.getAsLong() > updateTime) {\n-          _monitor.recordDataPropagationLatency(_path, notificationTime.getAsLong() - updateTime);\n+        if (notificationTime > updateTime) {\n+          _monitor.recordDataPropagationLatency(_path, notificationTime - updateTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTYyMQ=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTk2NDAyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyNDo0NFrOFfPXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyNDo0NFrOFfPXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTk2OA==", "bodyText": "I do see some duplicated code between these three methods. Can you combine the logic to optimize the code structure.", "url": "https://github.com/apache/helix/pull/688#discussion_r368301968", "createdAt": "2020-01-19T15:24:44Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, pathExists);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * The method is called when state change occurs and we need to handle existing path data handlers\n+   */\n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjA0MzgzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODoyNjozNVrOFfQAUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Mzo1OVrOFiVdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA==", "bodyText": "Can you please explain why we need to change this value to Atomic?", "url": "https://github.com/apache/helix/pull/688#discussion_r368312400", "createdAt": "2020-01-19T18:26:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyOTQ1OQ==", "bodyText": "It was my simple try to make it thread-safe, the atomic has the ability though; Do you have concrete suggestions on how to use it?", "url": "https://github.com/apache/helix/pull/688#discussion_r370329459", "createdAt": "2020-01-23T20:08:19Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNzQ3Mg==", "bodyText": "But is it really necessary to use atomic? Is there a clue that there would be concurrency issue?", "url": "https://github.com/apache/helix/pull/688#discussion_r370337472", "createdAt": "2020-01-23T20:27:12Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzU4OQ==", "bodyText": "@pkuwm I agree it's not necessary (my understanding of this code currently involves no multi-threading; To make it thread-safe with a simple atomic boolean is merely a simple try.\n@jiajunwang @pkuwm The latest updates involve little changes on the existing code, it's no longer needed plus I don't really want to improve (refactor) the existing ones :)", "url": "https://github.com/apache/helix/pull/688#discussion_r371547589", "createdAt": "2020-01-27T23:53:59Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjA0NTY5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODozMToxM1rOFfQBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NDozNVrOFiVeWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA==", "bodyText": "This might be a potential bug. For example,\nT1: node deleted, and NodeDeleted is sent.\nT2: node is re-created\nT3: The NodeDeleted event is processed, pathExists is set to false. And it is NOT the truth!\nThis might be OK, since we will have another event coming later. But it may introduce a substantial change of the ZkClient behavior. So I would prefer if we don't do it. The minimum fix itself does not require this enhancement. Please correct me if I am wrong.", "url": "https://github.com/apache/helix/pull/688#discussion_r368312648", "createdAt": "2020-01-19T18:31:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjA4OQ==", "bodyText": "It's an interesting case though I don't think it will introduce any new substantial change to the behavior. Given ZK's consistency, the node recreation event will guarantee to arrive later than the node deletion event. Let me explain fundamentally what happens on handleNodeDeleted, it unsubscribes the listener entry in zkClient (it can be confirmed that all operations are all in-memory operations without any ZK relations);\nWhen the T2 node re-creation event gets processed, it will re-subscribe the listener just like it has never seen it before.", "url": "https://github.com/apache/helix/pull/688#discussion_r370332089", "createdAt": "2020-01-23T20:14:42Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0MTQ5MQ==", "bodyText": "I think you don't have to check pathExits here and pass it to fireDataChangedEvents(). Instead, you can check the condition within fireDataChangedEvents. The pro is the api can avoid the boolean param and 2 logic branches in fireDataChangedEvents. If it is a DELETED event, you will call handleDataDeleted.", "url": "https://github.com/apache/helix/pull/688#discussion_r370341491", "createdAt": "2020-01-23T20:36:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzczOQ==", "bodyText": "No longer valid comment since the new change doesn't modify the existing codes that much", "url": "https://github.com/apache/helix/pull/688#discussion_r371547739", "createdAt": "2020-01-27T23:54:35Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjA1MjIwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODo0Njo1M1rOFfQEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxNToyMVrOFhLS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMzQ3OA==", "bodyText": "The answer is yes. There is a solution, can we do the same as the other methods so as to avoid multiple reads?", "url": "https://github.com/apache/helix/pull/688#discussion_r368313478", "createdAt": "2020-01-19T18:46:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, pathExists);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * The method is called when state change occurs and we need to handle existing path data handlers\n+   */\n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    try {\n+      for (final IZkDataListenerEntry listener : listeners) {\n+        ZkEvent zkEvent = new ZkEvent(\n+            \"Data of \" + path + \" changed sent to \" + listener.getDataListener()\n+                + \" prefetch data: \" + listener.isPrefetchData()) {\n+          @Override\n+          public void run()\n+              throws Exception {\n+            Object data;\n+            // TODO: are we fetching the data multiple times?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjM2OQ==", "bodyText": "I will make it a formal TODO and let's first focus on the watcher leakage issue :)", "url": "https://github.com/apache/helix/pull/688#discussion_r370332369", "createdAt": "2020-01-23T20:15:21Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, pathExists);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * The method is called when state change occurs and we need to handle existing path data handlers\n+   */\n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    try {\n+      for (final IZkDataListenerEntry listener : listeners) {\n+        ZkEvent zkEvent = new ZkEvent(\n+            \"Data of \" + path + \" changed sent to \" + listener.getDataListener()\n+                + \" prefetch data: \" + listener.isPrefetchData()) {\n+          @Override\n+          public void run()\n+              throws Exception {\n+            Object data;\n+            // TODO: are we fetching the data multiple times?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMzQ3OA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDc3NDEwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDozNTo1OFrOFi5VUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTowNDozNVrOFi5xXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNTI1MA==", "bodyText": "Do you change this list initialization from null to an instance for the later for loop? But do you expect the listener will be removed in any case in handleChildChange? From the code in handleChildChange, if children is not null, the listener will not be removed.", "url": "https://github.com/apache/helix/pull/688#discussion_r372135250", "createdAt": "2020-01-29T00:35:58Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1310,26 +1318,30 @@ public void run() throws Exception {\n   }\n \n   private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+    //TODO: Use event type to check if path exists and save network request\n+    boolean pathExists = exists(path);\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n-            List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            List<String> children = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6571dd9411cc482583606a58f2c39f91e9db91a0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MjQzMQ==", "bodyText": "Thanks for mentioning it! You're talking about CallbackHandler's implementation, right? I just checked you're right, that CallbackHandler does rely on the NULL to remove the listener.\nTo me, it's very odd cause it obviously violates the decoupling principle while 2 different classes are so tightly correlated, also it doesn't make sense to pass a NULL variable.\nI will put a TODO and leave the current code as it is. But still, need to add the child exists watcher part.", "url": "https://github.com/apache/helix/pull/688#discussion_r372142431", "createdAt": "2020-01-29T01:04:35Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1310,26 +1318,30 @@ public void run() throws Exception {\n   }\n \n   private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+    //TODO: Use event type to check if path exists and save network request\n+    boolean pathExists = exists(path);\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n-            List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            List<String> children = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNTI1MA=="}, "originalCommit": {"oid": "6571dd9411cc482583606a58f2c39f91e9db91a0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcwMDExOnYy", "diffSide": "LEFT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyMDoyM1rOFj72hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToyNjo1OVrOFkYaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTA5NQ==", "bodyText": "Do we have a new place to debug log delete event? I didn't see it in this PR. Please confirm. If we don't have, let's keep it here.", "url": "https://github.com/apache/helix/pull/688#discussion_r373225095", "createdAt": "2020-01-30T22:20:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -904,13 +904,6 @@ public void process(WatchedEvent event) {\n         || event.getType() == Event.EventType.NodeCreated\n         || event.getType() == Event.EventType.NodeChildrenChanged;\n \n-    if (event.getType() == Event.EventType.NodeDeleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTIxNw==", "bodyText": "Feel free to enrich the log message though.", "url": "https://github.com/apache/helix/pull/688#discussion_r373225217", "createdAt": "2020-01-30T22:20:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -904,13 +904,6 @@ public void process(WatchedEvent event) {\n         || event.getType() == Event.EventType.NodeCreated\n         || event.getType() == Event.EventType.NodeChildrenChanged;\n \n-    if (event.getType() == Event.EventType.NodeDeleted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTA5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5Mjk4Ng==", "bodyText": "updated. The removal is not intended", "url": "https://github.com/apache/helix/pull/688#discussion_r373692986", "createdAt": "2020-01-31T21:26:59Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -904,13 +904,6 @@ public void process(WatchedEvent event) {\n         || event.getType() == Event.EventType.NodeCreated\n         || event.getType() == Event.EventType.NodeChildrenChanged;\n \n-    if (event.getType() == Event.EventType.NodeDeleted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTA5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcxNDI5OnYy", "diffSide": "LEFT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyNjowNlrOFj7_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjozMjo1NFrOFlqGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA==", "bodyText": "This will remove our previous improvement for multiple listeners. Why we remove it?", "url": "https://github.com/apache/helix/pull/688#discussion_r373227348", "createdAt": "2020-01-30T22:26:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjEzNA==", "bodyText": "You can just change the condition from hasListeners(path) to pathExists && hasListeners(path), right?", "url": "https://github.com/apache/helix/pull/688#discussion_r373232134", "createdAt": "2020-01-30T22:38:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5NTczMg==", "bodyText": "I checked the code in recordPathStat, basically, the line pathStatRecord.recordPathStat(getStat(path, hasListeners(path)), OptionalLong.empty()); does nothing! This is because notificationTime is optional.empty() and the propogation latency is never recorded when child change events.\nI feel like leaving this piece of code here will just make ourselves confused. And if in the future, we do need to record propagation latency for child events. We could add it back.\nSecond, getStat(path, hasListeners(path)) will add a exists watcher for the parent path (child listener). Don't we want to add watcher type of child? The code here looks problematic for me, please clarify the original purpose if I misunderstand it. Thanks!", "url": "https://github.com/apache/helix/pull/688#discussion_r373695732", "createdAt": "2020-01-31T21:34:19Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTc4Mw==", "bodyText": "Seems to me that we can keep the same style as fireDataChangeEvent\n`\nif (!pathStatRecord.pathChecked()) {\npathStatRecord.recordPathStat(getStat(path, pathExists), OptionalLong.empty());\n}\n// The rest leave it the same\n`", "url": "https://github.com/apache/helix/pull/688#discussion_r375019783", "createdAt": "2020-02-05T01:43:09Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNDA2OA==", "bodyText": "@kaisun2000 Yes. However, as I replied earlier, this line pathStatRecord.recordPathStat(getStat(path, pathExists), OptionalLong.empty()); does nothing (need to read the exact implemenation) when OptionalLong.empty() is passed in. We're not recording propogation latency for child listeners anyway. It only confuses us AND the getStat() method will possibly add another leaked watch", "url": "https://github.com/apache/helix/pull/688#discussion_r375024068", "createdAt": "2020-02-05T02:00:57Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzMxMA==", "bodyText": "I see. Is it because if (_monitor != null && stat != null && **notificationTime.isPresent())** in the pathStatRecord.recordPathState() implementation?\nThen my question is that before this diff, line 1321 pathStatRecord.recordPathStat(getStat(path, hasListeners(path)), OptionalLong.empty()); still does not really emit metrics either. So my proposal keeps the old behavior? Or did I miss something here?", "url": "https://github.com/apache/helix/pull/688#discussion_r375027310", "createdAt": "2020-02-05T02:15:17Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMDQyNg==", "bodyText": "@kaisun2000 Yes, keep the same code is fine; Is it really necessary? Why not add it later once we do need to record propagation latency?", "url": "https://github.com/apache/helix/pull/688#discussion_r375030426", "createdAt": "2020-02-05T02:28:29Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMDg3NA==", "bodyText": "This is actually debatable. I am more into thinking that \" the fix\" just fix the problem, don't introduce non essential change. Or change the metric reporting behavior. One fix for one issue.\nThat said, I don't have strong opinion here. Check with JJ. I am fine either way.", "url": "https://github.com/apache/helix/pull/688#discussion_r375030874", "createdAt": "2020-02-05T02:30:37Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMTQwNw==", "bodyText": "all right, I will revert this part of change", "url": "https://github.com/apache/helix/pull/688#discussion_r375031407", "createdAt": "2020-02-05T02:32:54Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcxNzAyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyNzowNVrOFj8A-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTozNzoyMlrOFkYpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzc3MA==", "bodyText": "This is not necessary, it has been done in the \"listener.handleChildChange(path, children);\" later.", "url": "https://github.com/apache/helix/pull/688#discussion_r373227770", "createdAt": "2020-01-30T22:27:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {\n               try {\n+                //TODO: duplicate reads when multiple child listener exists\n                 children = getChildren(path);\n+                if (children != null) {\n+                  for (String child : children) {\n+                    // add the exists watcher for all child path, it's to prevent watcher missing\n+                    // in case of node recreation shortly after deletion\n+                    watchForData(path + \"/\" + child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5NjgzNA==", "bodyText": "That's true... However, I do feel it's odd to connect the relationship between two separate classes as it violates the separation of concern. I could either delete the added part or just add the change but remove the code path in CallbackListener. Which one do you prefer?\nTo make things easier, I will mark it as a TODO (IMO, Re-install watchers should be the concern of ZkClient(Watcher) class, not CallbackHandler).", "url": "https://github.com/apache/helix/pull/688#discussion_r373696834", "createdAt": "2020-01-31T21:37:22Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {\n               try {\n+                //TODO: duplicate reads when multiple child listener exists\n                 children = getChildren(path);\n+                if (children != null) {\n+                  for (String child : children) {\n+                    // add the exists watcher for all child path, it's to prevent watcher missing\n+                    // in case of node recreation shortly after deletion\n+                    watchForData(path + \"/\" + child);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzc3MA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzczMDYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozMjozOFrOFj8JRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTozNzozOVrOFkYpng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5NQ==", "bodyText": "You avoided the notificationTime report on the deleting events with this change. Please keep the original order.", "url": "https://github.com/apache/helix/pull/688#discussion_r373229895", "createdAt": "2020-01-30T22:32:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1276,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n+            if (!pathExists) {\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n             if (!pathStatRecord.pathChecked()) {\n               pathStatRecord.recordPathStat(getStat(path, true), notificationTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMDExMQ==", "bodyText": "This will invalidate our propagation latency metric, BTW.", "url": "https://github.com/apache/helix/pull/688#discussion_r373230111", "createdAt": "2020-01-30T22:33:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1276,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n+            if (!pathExists) {\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n             if (!pathStatRecord.pathChecked()) {\n               pathStatRecord.recordPathStat(getStat(path, true), notificationTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5NjkyNg==", "bodyText": "Thanks for catching it, fixed it.", "url": "https://github.com/apache/helix/pull/688#discussion_r373696926", "createdAt": "2020-01-31T21:37:39Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1276,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n+            if (!pathExists) {\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n             if (!pathStatRecord.pathChecked()) {\n               pathStatRecord.recordPathStat(getStat(path, true), notificationTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTMwMTQ3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTozNDozM1rOFlpQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoyOTowOFrOFlqDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNzU3OQ==", "bodyText": "Seems to me all the change from line 1285 is not necessary, right? We can still use the old code.\nThe change may not be wrong, but seems to necessary.\nOr did I miss something here?", "url": "https://github.com/apache/helix/pull/688#discussion_r375017579", "createdAt": "2020-02-05T01:34:33Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1279,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNDgzMw==", "bodyText": "Yes, we can keep the old code. I just changed the\nif { } else {} to if () return; xxx to make the code less indent. No function change", "url": "https://github.com/apache/helix/pull/688#discussion_r375024833", "createdAt": "2020-02-05T02:04:12Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1279,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNzU3OQ=="}, "originalCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNTkxNA==", "bodyText": "How about let us keep the old code. The thing is that later if people looking at the change, it would take some time to figure out there is not really logical change here.\nThis is more of a beautification work. This may look better, but for fix, can be confusing.", "url": "https://github.com/apache/helix/pull/688#discussion_r375025914", "createdAt": "2020-02-05T02:08:31Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1279,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNzU3OQ=="}, "originalCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMDU1NQ==", "bodyText": "Sure, reverted the style", "url": "https://github.com/apache/helix/pull/688#discussion_r375030555", "createdAt": "2020-02-05T02:29:08Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1279,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNzU3OQ=="}, "originalCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQwMjU2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MToyOFrOFlqOIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0Njo1NlrOFlqS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzM3OA==", "bodyText": "Another question, this is something I am not sure. No true or false passed in here as 3rd parameter in line 962.  THe function signature has not default value. What value would be then for this invocation of fireDataChangeEvents?", "url": "https://github.com/apache/helix/pull/688#discussion_r375033378", "createdAt": "2020-02-05T02:41:28Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);\n     }\n     for (Entry<String, Set<IZkDataListenerEntry>> entry : _dataListener.entrySet()) {\n-      fireDataChangedEvents(entry.getKey(), entry.getValue(), OptionalLong.empty());\n+      fireDataChangedEvents(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzgxOQ==", "bodyText": "This private void fireAllEvents() will be invoked when session expiry and handle the new session. I think it will be used to initialize the states; Thus it makes sense to assume the path exists", "url": "https://github.com/apache/helix/pull/688#discussion_r375033819", "createdAt": "2020-02-05T02:43:24Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);\n     }\n     for (Entry<String, Set<IZkDataListenerEntry>> entry : _dataListener.entrySet()) {\n-      fireDataChangedEvents(entry.getKey(), entry.getValue(), OptionalLong.empty());\n+      fireDataChangedEvents(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzM3OA=="}, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDUxMQ==", "bodyText": "I see. By default it is true.", "url": "https://github.com/apache/helix/pull/688#discussion_r375034511", "createdAt": "2020-02-05T02:46:35Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);\n     }\n     for (Entry<String, Set<IZkDataListenerEntry>> entry : _dataListener.entrySet()) {\n-      fireDataChangedEvents(entry.getKey(), entry.getValue(), OptionalLong.empty());\n+      fireDataChangedEvents(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzM3OA=="}, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDU5Mw==", "bodyText": "Actually I could remove the overloading method by passing the default value here", "url": "https://github.com/apache/helix/pull/688#discussion_r375034593", "createdAt": "2020-02-05T02:46:56Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);\n     }\n     for (Entry<String, Set<IZkDataListenerEntry>> entry : _dataListener.entrySet()) {\n-      fireDataChangedEvents(entry.getKey(), entry.getValue(), OptionalLong.empty());\n+      fireDataChangedEvents(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzM3OA=="}, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQwMzQzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MjowM1rOFlqOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NTowM1rOFlqRRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzUwOA==", "bodyText": "nit: if (pathStatRecord.pathExists()) would also work here.", "url": "https://github.com/apache/helix/pull/688#discussion_r375033508", "createdAt": "2020-02-05T02:42:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,21 +1309,21 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n       final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n+              pathStatRecord.recordPathStat(getStat(path, hasListeners(path) && !pathExists),\n                   OptionalLong.empty());\n             }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDE4MQ==", "bodyText": "updated", "url": "https://github.com/apache/helix/pull/688#discussion_r375034181", "createdAt": "2020-02-05T02:45:03Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,21 +1309,21 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n       final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n+              pathStatRecord.recordPathStat(getStat(path, hasListeners(path) && !pathExists),\n                   OptionalLong.empty());\n             }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzUwOA=="}, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQwNDg4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MzowM1rOFlqPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NDo1NVrOFlqRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzczNA==", "bodyText": "nit: if (!pathStatRecord.pathExists()) also works here.", "url": "https://github.com/apache/helix/pull/688#discussion_r375033734", "createdAt": "2020-02-05T02:43:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1279,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDE2MA==", "bodyText": "updated", "url": "https://github.com/apache/helix/pull/688#discussion_r375034160", "createdAt": "2020-02-05T02:44:55Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1279,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzczNA=="}, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjExMjE5OnYy", "diffSide": "LEFT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyNzo1MlrOFmEU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDowNzo1OFrOFmFi4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MTA3OQ==", "bodyText": "Can you add a comment like this? We reinstall watch based on the node has been deleted or not.", "url": "https://github.com/apache/helix/pull/688#discussion_r375461079", "createdAt": "2020-02-05T19:27:52Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1275,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36398e83e81bc9dafb275338a9bcbd74a8464c2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4MTA1Ng==", "bodyText": "updated!", "url": "https://github.com/apache/helix/pull/688#discussion_r375481056", "createdAt": "2020-02-05T20:07:58Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1275,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MTA3OQ=="}, "originalCommit": {"oid": "c36398e83e81bc9dafb275338a9bcbd74a8464c2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ0MjE0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzowNToxNlrOFmQ-Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjowMTowMVrOFnLjJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ==", "bodyText": "So while the client is reconnected, it will just reinstall the watcher without checking, right? Will we still see watcher leakage?", "url": "https://github.com/apache/helix/pull/688#discussion_r375668311", "createdAt": "2020-02-06T07:05:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMjM3Ng==", "bodyText": "Good question. I think with the default value, it will reinstall the watcher whatever left on the previous session; It's likely the node deletion happens after session expiry, in this case, it will leak; One mitigation approach is to perform EXISTS check when handling new session, but it's always possible a race-condition exists (that the node deletion happen after the exists check).  One good thing though comes with new session is that all the \"leaked\" watchers will be gone.\nDo you think a set of exists check on each path from original session should be performed or it's OK to trade-off between performance and excessive watchers.", "url": "https://github.com/apache/helix/pull/688#discussion_r376022376", "createdAt": "2020-02-06T19:00:21Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzOTcxMg==", "bodyText": "I still think the fix should be bumping up ZK version. If the concern is not super urgent, we should do that. Clean and no side effects.\nOtherwise, given this issue, a background GC thread would be easier. What I'm thinking is that we have a running timeout for the existing check-in that thread for each watched path.\n\n\nIf delete event, timeout set to zero and trigger GC immediately.\nOtherwise, the GC thread will validate the path after the timeout.", "url": "https://github.com/apache/helix/pull/688#discussion_r376039712", "createdAt": "2020-02-06T19:35:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNzQ0Ng==", "bodyText": "I don't think to bump up the ZK version and use the new API to delete ZK watcher explicitly would resolve the problem.\n\nLet me explain why: if the node is re-created after deleting the watcher request is submitted, without the parent path's child listener, there's no way the ZkClient would be able to receive new events from the path. It's the same dilemma this fix is currently facing.\n\nA background GC thread is an over-kill solution. First It's difficult to determine the right TTL; Second, it comes with the additional thread cost.\n\nMy argument point is that it's not always valid to say we need to be 100% stick to the old behavior, especially when the old behavior is incorrect and leading to the excessive amount of leakage.\nThe easiest way is to release a newer Helix version and educate the client with the caveat \"Once a node is deleted, the listener on the path will be inactive even the node is re-created; The workaround is to have a child listener on the parent path or re-subscribe the path\". The statement IMO makes sense to most clients.\nAs to how many clients will be suffering from the behavior change, I don't have a good answer but the experience told me the number is minor if the client is using Helix as a cluster management tool instead of a generic ZKClient proxy.\nDo these all make sense? @kaisun2000 @dasahcc please feel free to leave any thoughts about this, cause it will change the design fundamentally and won't be able to help Venice reduce the watcher pains in any near future.", "url": "https://github.com/apache/helix/pull/688#discussion_r376117446", "createdAt": "2020-02-06T22:27:30Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDUxNw==", "bodyText": "The first point is for us to simplify the GC. I agree it won't help with the listener becoming inactive case.\nAnd, about the second part, a behavior change is fine as long as it is reasonable. However, the main concern is that, even with the current design, leakage is still possible, right? Since the watcher removing depends on the notification, if no notification arrived, or the client missed, the watcher will be leaked. That's why I think this design is not good enough. Feel free to fix the current design if there is a way to avoid all leakages.", "url": "https://github.com/apache/helix/pull/688#discussion_r376124517", "createdAt": "2020-02-06T22:45:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNjg4MQ==", "bodyText": "If I understand correctly, @jiajunwang concern is that reconnect happen and fireAllEvent would be triggered and install the watcher for all the paths in subscriber list. The thing is that there can be case that in the disconnecting period, the zkpath can be deleted. This can still leak another path. This is very good point.\nThe first propose fix by @jiajunwang is:\n1/ use exists to re-subscribe in re-connecting phase anyway.\n2/ if path is not there, delete the watcher for this path.\nThis require 3.5 zk feature though. Not feasible now.\nFor the GC approach, what I can see is that this may still be a problem. First you check if the subscribe path is there. If it is not there, you delete it. The problem is that these are two steps operation to ZK. The problem is between the two steps, the user may create the path and install watcher as one operation. Now you delete it. This is even worse than leaking.\nThe second step of the first proposal has the same problem.\nActually I thought about this before, if Zookeeper does not have atomic check if the path not there then delete watcher, it is hard for us to implement this correctly.\n@jiajunwang, what is your take?\nMaybe let us note this issue and have an enhancement task to track it?", "url": "https://github.com/apache/helix/pull/688#discussion_r376126881", "createdAt": "2020-02-06T22:52:02Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODIzMg==", "bodyText": "@jiajunwang I agree that during re-connecting, it's still possible to leak the watcher if the in-memory listeners contain already deleted paths; I will think about the case and see if it can be overcome. But we all know at least the case here is not the major leakage point.\nIn fact, the long comment is more about the other one you claimed about changing the existing behavior cause I have to modify the integration test case.", "url": "https://github.com/apache/helix/pull/688#discussion_r376128232", "createdAt": "2020-02-06T22:55:43Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyODAwNA==", "bodyText": "Discussed offline and we reached the consensus that the leakage during session expiry is a potential issue and since the impact of it is minor, we'll create a ticket to track the fixing progress in the future", "url": "https://github.com/apache/helix/pull/688#discussion_r376628004", "createdAt": "2020-02-07T22:01:01Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ1NTc5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoxMzozMVrOFmRGjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjowMTo0NVrOFnLkOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MDQxMw==", "bodyText": "Usually, I'm very cautious about changing the existing test case. This indicates that we changed the behavior. So after this change, the user will need to resubscribe the watch once it is deleted, right? Regardless of the Helix reserved node that has children change listeners to cover, how about the other zk path that we allow the user to subscribe listener? The listeners will be idle after the node has been removed once, right? This breaks the feature IMO.\nOverall, I think we will need to make it optional. 1. It is fine that we change the behavior for the reserved patch with additional children change listener on the parent node. But for the other random path from user's requests, we should keep the old behavior.", "url": "https://github.com/apache/helix/pull/688#discussion_r375670413", "createdAt": "2020-02-06T07:13:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "diffHunk": "@@ -163,6 +163,8 @@ public void handleDataDeleted(String s) {\n       // expected to be here.\n     }\n \n+    // client B needs to re-install the data watch\n+    sharedZkClientB.watchForData(TEST_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMDMyOQ==", "bodyText": "Your concern is valid! To think about it, actually, it is the reason why native zookeeper has 2 sets of path related watcher: exists type and data type. To make a distinction between two, IMO, we either create a new subscribeXXXDataChange method or add a parameter like subscribeDataChange(xx, xx, boolean listenOnNonExistPath = True/False.\nWhat's your opinion? In fact, at the current stage,  do we have users listen on random paths? If not, I think we're creating problems for ourselves.", "url": "https://github.com/apache/helix/pull/688#discussion_r376010329", "createdAt": "2020-02-06T18:36:18Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "diffHunk": "@@ -163,6 +163,8 @@ public void handleDataDeleted(String s) {\n       // expected to be here.\n     }\n \n+    // client B needs to re-install the data watch\n+    sharedZkClientB.watchForData(TEST_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MDQxMw=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTM0Ng==", "bodyText": "One way is keeping the existing subscription methods the same. But we created some private/protected methods for the HelixManager to use.\nAlternatively, as you said, adding options to the method. It is not optimal but compared with adding more methods, I would prefer to keep it simple now. One improvement is that we extend the listeners so the one keeps existing after delete would be a different listener type internally. Then the callback knows what to do. It helps to keep the methods simple.", "url": "https://github.com/apache/helix/pull/688#discussion_r376041346", "createdAt": "2020-02-06T19:39:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "diffHunk": "@@ -163,6 +163,8 @@ public void handleDataDeleted(String s) {\n       // expected to be here.\n     }\n \n+    // client B needs to re-install the data watch\n+    sharedZkClientB.watchForData(TEST_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MDQxMw=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyODI4Mg==", "bodyText": "Discussed offline and we agreed that the behavior change is necessary and the client needs to be aware of the change.", "url": "https://github.com/apache/helix/pull/688#discussion_r376628282", "createdAt": "2020-02-07T22:01:45Z", "author": {"login": "i3wangyi"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "diffHunk": "@@ -163,6 +163,8 @@ public void handleDataDeleted(String s) {\n       // expected to be here.\n     }\n \n+    // client B needs to re-install the data watch\n+    sharedZkClientB.watchForData(TEST_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MDQxMw=="}, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1538, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}