{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjE5Mzg0", "number": 1129, "title": "Validate instance topology configuration before let it comes online ", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1042\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHelix does not check if an instance's topology config is defined correctly when the instance is added or joins cluster. This will cause Helix to fail the rebalance. This change adds the sanity check when\n\nInstance joins cluster\nUser update InstanceConfig using RestApi\nController prepares the topology structure for rebalance <-- Currently we only check here\n\nThis change also centralized the logic for topology sanity check.\nThere are 2 behavior change for AssignableNode.computeFaultZone. The new logic is the same as in class Topology. It is better to have a centralized util function for both places. The two behavior changes are:\n\nOriginally, if clusterConfig.topology is null and Instance zoneId is none, AssignableNode.computeFaultZone will use instance's name while the logic in Topology class throws exception.\nOriginally, if clusterConfig.topology is not null but clusterConfig.faultZoneType is null, AssignableNode.computeFaultZone will throw exception while the logic in Topology class uses the last valid type in clusterConfig.topology.\n\nThis changes makes the behavior consistent and use the logic in Topology class.\nTests\n\n\n The following tests are written for this issue:\nTestParticipantManager.testValidateDeltaInstanceConfigForUpdate\nTestPerInstanceAccessor.simpleIntegrationTestNeg\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nFailures:                                                                                                                                                 \n[ERROR]   TestResourceChangeDetector.testResetSnapshots:431 \u00bb ThreadTimeout Method org.t...                                                                       \n[ERROR] org.apache.helix.integration.TestDisablePartition.testDisableFullAuto(org.apache.helix.integration.TestDisablePartition)                                  \n[ERROR]   Run 1: TestDisablePartition.testDisableFullAuto:202 expected:<OFFLINE> but was:<LEADER>                                                                 \n[ERROR]   Run 2: TestDisablePartition.testDisableFullAuto:114 \u00bb ZkClient Failed to delete /Test...                                                                \n[INFO]\n[ERROR]   TestNoThrottleDisabledPartitions.testDisablingTopStateReplicaByDisablingInstance:98 expected:<false> but was:<true>                                     \n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected:<true> but was:<false>                                                \n[INFO]                                                                                                                                                            \n[ERROR] Tests run: 1162, Failures: 4, Errors: 0, Skipped: 1\n[INFO]                                                                                                                    \n\n[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 29.329 s - in org.apache.helix.controller.changedetector.TestResourceChangeDetector\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.066 s - in org.apache.helix.integration.TestDisablePartition                \n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.942 s - in org.apache.helix.integration.TestNoThrottleDisabledPartitions\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.773 s - in org.apache.helix.integration.controller.TestControllerLeadershipChange\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\nNA\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-29T06:10:45Z", "url": "https://github.com/apache/helix/pull/1129", "merged": true, "mergeCommit": {"oid": "0869e729530d83ba55228b2d44a79ae44175c081"}, "closed": true, "closedAt": "2020-08-12T18:35:46Z", "author": {"login": "xyuanlu"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwH4cXAFqTQzOTUxMTk5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc99APWABqjM2NDQ5NDAyMDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTExOTk0", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-439511994", "createdAt": "2020-06-29T21:25:25Z", "commit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNToyNlrOGqiyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNToyNlrOGqiyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzI5MQ==", "bodyText": "No validation of post results?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447263291", "createdAt": "2020-06-29T21:25:26Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")\n+  public void testValidateDeltaInstanceConfigForUpdate() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    // Enable Topology aware for the cluster\n+    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    String instanceName = CLUSTER_NAME + \"localhost_12918\";\n+    InstanceConfig instanceConfig = _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName);\n+\n+    // Update InstanceConfig with Topology Info\n+    String domain = \"Rack=rack1, Sub-Rack=Sub-Rack1, Host=Host-1\";\n+    ZNRecord record = instanceConfig.getRecord();\n+    record.getSimpleFields().put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), domain);\n+\n+    // Add these fields by way of \"update\"\n+    Entity entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    Response response = new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);\n+    // Check that the fields have been added\n+    Assert.assertEquals(response.getStatus(), 200);\n+    // Check the cluster config is updated\n+    Assert.assertEquals(\n+        _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName).getDomainAsString(), domain);\n+\n+    // set domain to an invalid value\n+    record.getSimpleFields()\n+        .put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), \"InvalidDomainValue\");\n+    entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    // Updating using an invalid domain value should return a non-OK response\n+    new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .expectedReturnStatusCode(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTEzMTQ4", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-439513148", "createdAt": "2020-06-29T21:27:25Z", "commit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNzoyNVrOGqi2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNzoyNVrOGqi2AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDI1Ng==", "bodyText": "If I understand correctly, we are testing changing instance config domain field via rest. Here, the validation of config is actually executed from rest server side, right?\nCan we add a small comment about the purpose of this test?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447264256", "createdAt": "2020-06-29T21:27:25Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/b9356d361522a26a897daf5d81d6d951603ed0f3", "committedDate": "2020-06-29T05:46:58Z", "message": "add test"}, "afterCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/73aa108ddddbb2186d76049898472661abd9c98e", "committedDate": "2020-07-15T00:23:35Z", "message": "minor update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDA3NDIy", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449407422", "createdAt": "2020-07-15T23:21:22Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMToyMlrOGyUnzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMToyMlrOGyUnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTg1NQ==", "bodyText": "Is this sanity check only for topology? If yes, let's name it as topoogy check for the perInstanceAccessor, because the sanity check should also involve the \"HELIX_PORT\" something like that in the simple field.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455419855", "createdAt": "2020-07-15T23:21:22Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -542,4 +558,23 @@ public Response getHealthReportsOnInstance(\n   private boolean validInstance(JsonNode node, String instanceName) {\n     return instanceName.equals(node.get(Properties.id.name()).getValueAsText());\n   }\n+\n+  private boolean validateDeltaInstanceConfigForUpdate(String clusterName, String instanceName,\n+      ConfigAccessor configAccessor, InstanceConfig newInstanceConfig, boolean isDelete)\n+      throws IllegalArgumentException {\n+    InstanceConfig originalInstanceConfigCopy =\n+        configAccessor.getInstanceConfig(clusterName, instanceName);\n+    if (isDelete) {\n+      for (Map.Entry<String, String> entry : newInstanceConfig.getRecord().getSimpleFields()\n+          .entrySet()) {\n+        originalInstanceConfigCopy.getRecord().getSimpleFields().remove(entry.getKey());\n+      }\n+    } else {\n+      originalInstanceConfigCopy.getRecord().update(newInstanceConfig.getRecord());\n+    }\n+\n+    return ConfigAccessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTY5NTEy", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449969512", "createdAt": "2020-07-16T15:35:31Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozNTozMVrOGywr0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozNTozMVrOGywr0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3OTYzNA==", "bodyText": "It should be okey to leave it \"instanceConfig\" instead of \"newInstanceConfig\", otherwise, you need to rename this parameter in all other \"set\" or \"update\" related methods to keep them consistent.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455879634", "createdAt": "2020-07-16T15:35:31Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -945,23 +947,23 @@ public void setInstanceConfig(String clusterName, String instanceName,\n    * replaced with the value of the same field in given config if it presents. If there is new field\n    * in given config but not in current config, the field will be added into the current config..\n    * The list fields and map fields will be replaced as a single entry.\n-   * The current Cluster config will be replaced with the given clusterConfig. WARNING: This is not\n+   * The current instanceConfig will be replaced with the given instanceConfig. WARNING: This is not\n    * thread-safe or concurrent updates safe.\n    * *\n    *\n    * @param clusterName\n    * @param instanceName\n-   * @param instanceConfig\n+   * @param newInstanceConfig\n    *\n    * @return\n    */\n   public void updateInstanceConfig(String clusterName, String instanceName,\n-      InstanceConfig instanceConfig) {\n-    updateInstanceConfig(clusterName, instanceName, instanceConfig, false);\n+      InstanceConfig newInstanceConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTc0MTg0", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449974184", "createdAt": "2020-07-16T15:40:41Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MDo0MlrOGyw5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MDo0MlrOGyw5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzIxMQ==", "bodyText": "Seems this method is not used by ConfigAccessor itself?  My suggestion is put this method into InstanceConfig (or ClusterConfig) and it does not have to be static (it can be called like myInstanceConfig.validateTopologySetting(String clusterTopologyString).", "url": "https://github.com/apache/helix/pull/1129#discussion_r455883211", "createdAt": "2020-07-16T15:40:42Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -1009,4 +1010,19 @@ public ConfigAccessor build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  /**\n+   * Validate if the topology related settings (Domain or ZoneId) in the given instanceConfig\n+   * are valid and align with current clusterConfig.\n+   * This function should be called when instance added to cluster or caller updates instanceConfig.\n+   *\n+   * @throws IllegalArgumentException\n+   */\n+  public static boolean validateTopologySettingInInstanceConfig(ClusterConfig clusterConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTc0ODY0", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449974864", "createdAt": "2020-07-16T15:41:27Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MToyN1rOGyw72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MToyN1rOGyw72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzczOA==", "bodyText": "Is this our new style to format a enum types?", "url": "https://github.com/apache/helix/pull/1129#discussion_r455883738", "createdAt": "2020-07-16T15:41:27Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -43,11 +43,11 @@\n  */\n public class Topology {\n   private static Logger logger = LoggerFactory.getLogger(Topology.class);\n+\n   public enum Types {\n-    ROOT,\n-    ZONE,\n-    INSTANCE\n+    ROOT, ZONE, INSTANCE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTg3NDEz", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449987413", "createdAt": "2020-07-16T15:55:11Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NToxMlrOGyxhpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NToxMlrOGyxhpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MzQxNQ==", "bodyText": "Should we check this also before line 207?", "url": "https://github.com/apache/helix/pull/1129#discussion_r455893415", "createdAt": "2020-07-16T15:55:12Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,26 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      _helixAdmin.addInstance(_clusterName, instanceConfig);\n+    } else {\n+      ConfigAccessor.validateTopologySettingInInstanceConfig(\n+          _configAccessor.getClusterConfig(_clusterName), _instanceName,\n+          _configAccessor.getInstanceConfig(_clusterName,_instanceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTkwNTgy", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449990582", "createdAt": "2020-07-16T15:58:46Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1ODo0NlrOGyxrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1ODo0NlrOGyxrdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTkyNA==", "bodyText": "My suggestion is to set doSanityCheck's default value being true, i.e, we should always validate the instance config unless it is explicitly override to not doing so.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455895924", "createdAt": "2020-07-16T15:58:46Z", "author": {"login": "lei-xia"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -287,6 +288,7 @@ public Response getInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n   @Path(\"configs\")\n   public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n       @PathParam(\"instanceName\") String instanceName, @QueryParam(\"command\") String commandStr,\n+      @DefaultValue(\"false\") @QueryParam(\"doSanityCheck\") boolean doSanityCheck,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTkxNzA2", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-449991706", "createdAt": "2020-07-16T16:00:02Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMDowMlrOGyxuxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMDowMlrOGyxuxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5Njc3NQ==", "bodyText": "If possible, let us return some useful error information to the caller, for example, where is the format error, such as \"Invalid topology setting\", etc.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455896775", "createdAt": "2020-07-16T16:00:02Z", "author": {"login": "lei-xia"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,19 +310,33 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n+    if (doSanityCheck && (command == Command.delete || command == Command.update)) {\n+      try {\n+        validateDeltaInstanceConfigForUpdate(clusterId, instanceName, configAccessor,\n+            instanceConfig, command == Command.delete);\n+      } catch (IllegalArgumentException ex) {\n+        LOG.error(\n+            String.format(\"Error in update instance config for instance: %s\", instanceName),\n+            ex);\n+        return serverError(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDE0NDE0", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-450014414", "createdAt": "2020-07-16T16:25:58Z", "commit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNTo1OFrOGyyzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNTo1OFrOGyyzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNDI3NA==", "bodyText": "Using input parameters to populate output values is generally not a best practice, maybe fine given this is just private method. But let us see if we find a better way to return these values.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455914274", "createdAt": "2020-07-16T16:25:58Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,16 +220,57 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate clusterTopologyKeys and defaultDomainPathValues from clusterConfig\n+   *\n+   * @param clusterTopologyKeys       out parameter. LinkedHashSet to be populated for cluster\n+   *                                  topology keys. The set will remain empty if topology aware is\n+   *                                  not enabled or this cluster uses zone instead of domains.\n+   * @param defaultDomainPathValues   out parameter. Map to be populated for all default path keys.\n+   *                                  The map will remain empty if topology aware is not enabled or\n+   *                                  this cluster uses zone instead of domains.\n+   * @return lastValidType in clusterConfig.topology\n+   */\n+  private static String populateClusterTopologySetting(ClusterConfig clusterConfig,\n+      LinkedHashSet<String> clusterTopologyKeys /*OUT*/,\n+      Map<String, String> defaultDomainPathValues /*OUT*/) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/73aa108ddddbb2186d76049898472661abd9c98e", "committedDate": "2020-07-15T00:23:35Z", "message": "minor update"}, "afterCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/aad37318e96e9d0a695ba2481d63898e0c00df69", "committedDate": "2020-07-19T19:04:33Z", "message": "address comment. refactor Topology.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTE2OTg3", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-452916987", "createdAt": "2020-07-22T00:29:00Z", "commit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoyOTowMFrOG1OcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMDowMVrOG1Odyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDQyMQ==", "bodyText": "I believe you meant to call computeInstanceTopologyMap() with a false in the end here, instead of the concrete function itself?", "url": "https://github.com/apache/helix/pull/1129#discussion_r458464421", "createdAt": "2020-07-22T00:29:00Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -204,8 +172,9 @@ private Node createClusterTree() {\n       InstanceConfig insConfig = _instanceConfigMap.get(instanceName);\n       try {\n         LinkedHashMap<String, String> instanceTopologyMap =\n-            computeInstanceTopologyMap(_clusterConfig.isTopologyAwareEnabled(), instanceName,\n-                insConfig, _clusterTopologyKeys);\n+            computeInstanceTopologyMapHelper(_clusterConfig.isTopologyAwareEnabled(), instanceName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDcxNQ==", "bodyText": "This comment should be for computeInstanceTopologyMap()? That public function needs an entire javadoc also.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458464715", "createdAt": "2020-07-22T00:30:01Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,20 +199,73 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate faultZone, endNodetype and and a LinkedHashMap containing pathKeys default values for\n+   * clusterConfig.Topology. The LinkedHashMap will be empty if clusterConfig.Topology is unset.\n+   *\n+   * @return an Instance of Topology.ClusterTopologyConfig.\n+   */\n+  private static ClusterTopologyConfig getClusterTopologySetting(ClusterConfig clusterConfig) {\n+\n+    ClusterTopologyConfig clusterTopologyConfig = new ClusterTopologyConfig();\n+    if (clusterConfig.isTopologyAwareEnabled()) {\n+      String topologyDef = clusterConfig.getTopology();\n+      if (topologyDef != null) {\n+        String[] topologyKeys = topologyDef.trim().split(\"/\");\n+        int lastValidTypeIdx = 0;\n+        for (int i = 0; i < topologyKeys.length; i++) {\n+          if (topologyKeys[i].length() != 0) {\n+            clusterTopologyConfig.topologyKeyDefaultValue\n+                .put(topologyKeys[i], DEFAULT_DOMAIN_PREFIX + topologyKeys[i]);\n+            lastValidTypeIdx = i;\n+          }\n+        }\n+        if (clusterTopologyConfig.topologyKeyDefaultValue.size() == 0) {\n+          throw new IllegalArgumentException(\"Invalid cluster topology definition \" + topologyDef);\n+        }\n+        clusterTopologyConfig.endNodeType = topologyKeys[lastValidTypeIdx];\n+        String faultZoneType = clusterConfig.getFaultZoneType();\n+        if (faultZoneType == null) {\n+          clusterTopologyConfig.faultZoneType = clusterTopologyConfig.endNodeType;\n+        } else if (!clusterTopologyConfig.topologyKeyDefaultValue.containsKey(faultZoneType)) {\n+          throw new HelixException(String\n+              .format(\"Invalid fault zone type %s, not present in topology definition %s.\",\n+                  faultZoneType, clusterConfig.getTopology()));\n+        } else {\n+          clusterTopologyConfig.faultZoneType = faultZoneType;\n+        }\n+      } else {\n+        // Use default cluster topology definition, i,e. /root/zone/instance\n+        clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+        clusterTopologyConfig.faultZoneType = Types.ZONE.name();\n+      }\n+    } else {\n+      clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+      clusterTopologyConfig.faultZoneType = Types.INSTANCE.name();\n+    }\n+    return clusterTopologyConfig;\n+  }\n+\n   /**\n    * This function returns a LinkedHashMap<String, String> object representing\n    * the topology path for an instance.\n    * LinkedHashMap is used here since the order of the path needs to be preserved\n    * when creating the topology tree.\n    *\n+   * @param clusterTopologyKeyDefaultValue  a LinkedHashMap where keys are cluster topology path and\n+   *                                       values are their corresponding default value. The entries\n+   *                                        are ordered by ClusterConfig.topology setting.\n+   * @param faultZoneForEarlyQuit   this flag is set to true only if caller wants the path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 180}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/aad37318e96e9d0a695ba2481d63898e0c00df69", "committedDate": "2020-07-19T19:04:33Z", "message": "address comment. refactor Topology.java"}, "afterCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/754256a84b459ff9feb086eaf7ce68670f93b858", "committedDate": "2020-07-22T01:55:53Z", "message": "addresss comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzM3NDU4", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-455337458", "createdAt": "2020-07-26T06:54:13Z", "commit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjo1NDoxM1rOG3J-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowMzozM1rOG3KBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODIzNA==", "bodyText": "Seems this import is unused?", "url": "https://github.com/apache/helix/pull/1129#discussion_r460488234", "createdAt": "2020-07-26T06:54:13Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -20,14 +20,17 @@\n  */\n \n import java.io.IOException;\n+import java.security.InvalidParameterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODU1OQ==", "bodyText": "IntelliJ formats the style. But maybe unnecessary. It is recommended to only format your changes. :)", "url": "https://github.com/apache/helix/pull/1129#discussion_r460488559", "createdAt": "2020-07-26T06:56:56Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -43,11 +43,11 @@\n  */\n public class Topology {\n   private static Logger logger = LoggerFactory.getLogger(Topology.class);\n+\n   public enum Types {\n-    ROOT,\n-    ZONE,\n-    INSTANCE\n+    ROOT, ZONE, INSTANCE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzczOA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTAyNQ==", "bodyText": "Usually runtime exception is not recommended to put in method signature. Having it in java doc is good enough.", "url": "https://github.com/apache/helix/pull/1129#discussion_r460489025", "createdAt": "2020-07-26T07:01:48Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java", "diffHunk": "@@ -637,4 +638,19 @@ public static InstanceConfig toInstanceConfig(String instanceId) {\n     }\n     return config;\n   }\n+\n+  /**\n+   * Validate if the topology related settings (Domain or ZoneId) in the given instanceConfig\n+   * are valid and align with current clusterConfig.\n+   * This function should be called when instance added to cluster or caller updates instanceConfig.\n+   *\n+   * @throws IllegalArgumentException\n+   */\n+  public boolean validateTopologySettingInInstanceConfig(ClusterConfig clusterConfig,\n+      String instanceName) throws IllegalArgumentException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTEzMw==", "bodyText": "Assert fail here to protect the test. Otherwise if expecting exception is not throw, the test will still pass. It should fail.", "url": "https://github.com/apache/helix/pull/1129#discussion_r460489133", "createdAt": "2020-07-26T07:03:33Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java", "diffHunk": "@@ -114,6 +118,50 @@ public void simpleIntegrationTest() throws Exception {\n     Assert.assertNull(accessor.getProperty(keyBuilder.controllerLeader()));\n   }\n \n+  @Test\n+  public void simpleIntegrationTestNeg() throws Exception {\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        4, // partitions per resource\n+        1, // number of nodes\n+        1, // replicas\n+        \"MasterSlave\", true); // do rebalance\n+\n+    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    configAccessor.setClusterConfig(clusterName, clusterConfig);\n+\n+\n+    String instanceName = \"localhost_12918\";\n+    HelixManager participant =\n+        new ZKHelixManager(clusterName, instanceName , InstanceType.PARTICIPANT, ZK_ADDR);\n+    participant.getStateMachineEngine().registerStateModelFactory(\"MasterSlave\",\n+        new MockMSModelFactory());\n+    // We are expecting an IllegalArgumentException since the domain is not set.\n+    try {\n+      participant.connect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzM4NzU3", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-455338757", "createdAt": "2020-07-26T07:15:01Z", "commit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNTowMVrOG3KF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNjoyNlrOG3KGfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDIxNA==", "bodyText": "I suggest changing the method signature a bit: boolean isDelete -> Command command. You could put if..else check in this private method.\nAn nice article to help with clean such boolean parameter : https://medium.com/@amlcurran/clean-code-the-curse-of-a-boolean-parameter-c237a830b7a3", "url": "https://github.com/apache/helix/pull/1129#discussion_r460490214", "createdAt": "2020-07-26T07:15:01Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDM2NA==", "bodyText": "Could make advantage of parameterized logging :)\nLOG.error(\"Invalid topology setting for Instance : {}\", instanceName, ex);", "url": "https://github.com/apache/helix/pull/1129#discussion_r460490364", "createdAt": "2020-07-26T07:16:26Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+            instanceConfig, command == Command.delete);\n+      }\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          // The new instanceConfig will be merged with existing one\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          HelixConfigScope instanceScope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n+                  .forCluster(clusterId).forParticipant(instanceName).build();\n+          configAccessor.remove(instanceScope, record);\n+          break;\n+        default:\n+          return badRequest(String.format(\"Unsupported command: %s\", command));\n       }\n+    } catch (IllegalArgumentException ex) {\n+      LOG.error(String.format(\"Invalid topology setting for Instance : %s. Fail the config update\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/754256a84b459ff9feb086eaf7ce68670f93b858", "committedDate": "2020-07-22T01:55:53Z", "message": "addresss comment"}, "afterCommit": {"oid": "cfe1c47d76af94007c4b87d915b592129ff9b7ac", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/cfe1c47d76af94007c4b87d915b592129ff9b7ac", "committedDate": "2020-07-28T23:02:10Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfe1c47d76af94007c4b87d915b592129ff9b7ac", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/cfe1c47d76af94007c4b87d915b592129ff9b7ac", "committedDate": "2020-07-28T23:02:10Z", "message": "address comments"}, "afterCommit": {"oid": "d69d0c454036cbeb16343c233187fa92f4952c06", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/d69d0c454036cbeb16343c233187fa92f4952c06", "committedDate": "2020-07-28T23:08:58Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d69d0c454036cbeb16343c233187fa92f4952c06", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/d69d0c454036cbeb16343c233187fa92f4952c06", "committedDate": "2020-07-28T23:08:58Z", "message": "address comments"}, "afterCommit": {"oid": "471064a8a037cdac30b18595d419a3dac8bdcf76", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/471064a8a037cdac30b18595d419a3dac8bdcf76", "committedDate": "2020-07-28T23:10:01Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "471064a8a037cdac30b18595d419a3dac8bdcf76", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/471064a8a037cdac30b18595d419a3dac8bdcf76", "committedDate": "2020-07-28T23:10:01Z", "message": "address comments"}, "afterCommit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/59da1aa03b2d662d62a5c29d2e34b0fda59ed07d", "committedDate": "2020-07-28T23:11:49Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODI3MzEx", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-457827311", "createdAt": "2020-07-29T19:34:00Z", "commit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTozNDowMFrOG5HIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTozNDowMFrOG5HIpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzODkxNg==", "bodyText": "I suggest not throwing IllegalArgumentException in the method signature because: an unchecked exception does not need to declare in the method signature. throws keyword is used for handling checked exception. There are some good articles about this, eg: https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html#throwstag\nI suggest put this info in javadoc like this\n@throws IllegalArugmentException  when it is thrown", "url": "https://github.com/apache/helix/pull/1129#discussion_r462538916", "createdAt": "2020-07-29T19:34:00Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -289,6 +310,29 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n     return instanceTopologyMap;\n   }\n \n+  /**\n+   * This function returns a LinkedHashMap<String, String> object representing\n+   * the topology path for an instance.\n+   * LinkedHashMap is used here since the order of the path needs to be preserved\n+   * when creating the topology tree.\n+   *\n+   * @param clusterConfig         clusterConfig of the given cluster.\n+   * @param instanceName          name of the instance.\n+   * @param instanceConfig        instanceConfig to be checked.\n+   * @param earlyQuitForFaultZone Set to true if we only need the path till faultZone.\n+   *\n+   * @return an LinkedHashMap object representing the topology path for the input instance.\n+   */\n+  public static LinkedHashMap<String, String> computeInstanceTopologyMap(\n+      ClusterConfig clusterConfig, String instanceName, InstanceConfig instanceConfig,\n+      boolean earlyQuitForFaultZone) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d"}, "originalPosition": 236}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/59da1aa03b2d662d62a5c29d2e34b0fda59ed07d", "committedDate": "2020-07-28T23:11:49Z", "message": "address comments"}, "afterCommit": {"oid": "094d77517a741f58c41620910bd8813d9178eedb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/094d77517a741f58c41620910bd8813d9178eedb", "committedDate": "2020-07-29T21:21:51Z", "message": "Address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "094d77517a741f58c41620910bd8813d9178eedb", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/094d77517a741f58c41620910bd8813d9178eedb", "committedDate": "2020-07-29T21:21:51Z", "message": "Address comment"}, "afterCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8e7a47458e3615fb78fece4b276a830eb49ed34b", "committedDate": "2020-07-31T02:01:56Z", "message": "--amend"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjM5OTgy", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-463639982", "createdAt": "2020-08-07T21:18:03Z", "commit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxODowM1rOG9oEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxOTo0NlrOG9oG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3Mjg2MQ==", "bodyText": "Why we dont call this in the switch case? It will make the code more clear. By doing that, you can let this validateDeltaTopologySettingInInstanceConfig, return a Config if it is valid. Otherwise, return null.\nSo the following code will based on the return result to do the write to ZK.", "url": "https://github.com/apache/helix/pull/1129#discussion_r467272861", "createdAt": "2020-08-07T21:18:03Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzQ2OQ==", "bodyText": "Why we dont validate it before we write to ZK?", "url": "https://github.com/apache/helix/pull/1129#discussion_r467273469", "createdAt": "2020-08-07T21:19:46Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,26 +187,28 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      _helixAdmin.addInstance(_clusterName, instanceConfig);\n     }\n+    _configAccessor.getInstanceConfig(_clusterName, _instanceName)\n+        .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8e7a47458e3615fb78fece4b276a830eb49ed34b", "committedDate": "2020-07-31T02:01:56Z", "message": "--amend"}, "afterCommit": {"oid": "b78f65ccac03935cab135b1c28fd758ccaa9baa3", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/b78f65ccac03935cab135b1c28fd758ccaa9baa3", "committedDate": "2020-08-08T02:06:24Z", "message": "--amend"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4d53d62ff53e4a25ca73d2ab78d5b3b1010b3f7", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/b4d53d62ff53e4a25ca73d2ab78d5b3b1010b3f7", "committedDate": "2020-08-08T03:06:35Z", "message": "address comment"}, "afterCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8498bc03bbb64284910a31c64fb7371f25d8b98e", "committedDate": "2020-08-08T05:45:01Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTE1MDcx", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-463915071", "createdAt": "2020-08-09T23:49:51Z", "commit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzo0OTo1MVrOG9-vOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzo0OTo1MVrOG9-vOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0NDIxOA==", "bodyText": "If the autoRegistration is false, but the autoJoin is true, then the instance config will be populated without zone information. In this case, will the validation fail? If it fails, meaning that we don't allow customers to use autoJoin if it's rack aware. This is different from what we provide now. Just make sure this is the behavior you want.", "url": "https://github.com/apache/helix/pull/1129#discussion_r467644218", "createdAt": "2020-08-09T23:49:51Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,25 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      instanceConfig\n+          .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTc5MjI0", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-464579224", "createdAt": "2020-08-10T20:52:22Z", "commit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1MjoyMlrOG-fYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1MjoyMlrOG-fYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTAwMQ==", "bodyText": "Do we need a if statement here?", "url": "https://github.com/apache/helix/pull/1129#discussion_r468179001", "createdAt": "2020-08-10T20:52:22Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -310,20 +311,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          /*\n+           * The new instanceConfig will be merged with existing one.\n+           * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+           * failure. We are doing the check whenever user updates InstanceConfig.\n+           */\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+              instanceConfig, command);\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTc5NTk5", "url": "https://github.com/apache/helix/pull/1129#pullrequestreview-464579599", "createdAt": "2020-08-10T20:52:57Z", "commit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8498bc03bbb64284910a31c64fb7371f25d8b98e", "committedDate": "2020-08-08T05:45:01Z", "message": "address comment"}, "afterCommit": {"oid": "acf174c28914aba7f3f164ac3bbe0bb299bd6265", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/acf174c28914aba7f3f164ac3bbe0bb299bd6265", "committedDate": "2020-08-11T18:12:06Z", "message": "address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1352ca2d9a758ccf2817e781cb77b032428cb19", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/e1352ca2d9a758ccf2817e781cb77b032428cb19", "committedDate": "2020-08-11T20:32:54Z", "message": "add sanity check before adding and updating an instance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9936750a9a7a3e8d5f794803d0b2fdaa8dccaa4", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a9936750a9a7a3e8d5f794803d0b2fdaa8dccaa4", "committedDate": "2020-08-11T20:32:54Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1873131c63cb7c20c6d70108065a3d787c14be44", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/1873131c63cb7c20c6d70108065a3d787c14be44", "committedDate": "2020-08-11T20:32:54Z", "message": "minor update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55d3b6cccd0bd4574692b1702a447e521871773b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/55d3b6cccd0bd4574692b1702a447e521871773b", "committedDate": "2020-08-11T20:32:54Z", "message": "address comment. refactor Topology.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2746715b1df34a5654bfee03aa701090403e64b5", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/2746715b1df34a5654bfee03aa701090403e64b5", "committedDate": "2020-08-11T20:32:54Z", "message": "addresss comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194eb7a7cfc983ac80e542a849b08507e9e6c12e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/194eb7a7cfc983ac80e542a849b08507e9e6c12e", "committedDate": "2020-08-11T20:32:54Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d117b28452576219027075a98a1b9099da9b769", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/7d117b28452576219027075a98a1b9099da9b769", "committedDate": "2020-08-11T20:32:54Z", "message": "Address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297170c07b3d18335f31cf9fbe3e48131e379e29", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/297170c07b3d18335f31cf9fbe3e48131e379e29", "committedDate": "2020-08-11T20:32:54Z", "message": "--amend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6cdb60b592da0b7b6e0375c26dec5cfb948fe47", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/f6cdb60b592da0b7b6e0375c26dec5cfb948fe47", "committedDate": "2020-08-11T20:32:54Z", "message": "address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acf174c28914aba7f3f164ac3bbe0bb299bd6265", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/acf174c28914aba7f3f164ac3bbe0bb299bd6265", "committedDate": "2020-08-11T18:12:06Z", "message": "address comment"}, "afterCommit": {"oid": "f6cdb60b592da0b7b6e0375c26dec5cfb948fe47", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/f6cdb60b592da0b7b6e0375c26dec5cfb948fe47", "committedDate": "2020-08-11T20:32:54Z", "message": "address comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4539, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}