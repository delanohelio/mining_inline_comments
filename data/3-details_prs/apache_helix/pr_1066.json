{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NjczOTIy", "number": 1066, "title": "Prevent parallel controller pipelines run causing two master replicas", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1027\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThere is a case that after controller leader switches, pipelines of both old Helix controller leader and new leader are running in parallel. Different assignment decisions are sent to different participants so there are double masters for a single partition.\nThe PR addresses this issue by blocking non-leader controller to send messages.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestNoMessageSentOnControllerLosesLeadership\n\n\nTestRawZkClient.testAsyncCreateByInvalidSession\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Tests run: 47, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 61.443 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 47, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:05 min\n[INFO] Finished at: 2020-10-04T21:39:20-07:00\n[INFO] ------------------------------------------------------------------------\n\n\n[WARNING] Tests run: 1211, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4,282.946 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[WARNING] Tests run: 1211, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:11 h\n[INFO] Finished at: 2020-10-06T04:14:23-07:00\n[INFO] ------------------------------------------------------------------------\n\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-05T19:08:37Z", "url": "https://github.com/apache/helix/pull/1066", "merged": true, "mergeCommit": {"oid": "fa8f4b676fc8cd81a80b2f8d8aa97d2cf5c5087f"}, "closed": true, "closedAt": "2020-10-07T02:43:51Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 91, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoXoKKAFqTQyNTU1OTUzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPztRBABqjM4NDQwMTQ5Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTU5NTMz", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-425559533", "createdAt": "2020-06-05T19:14:43Z", "commit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDo0NFrOGf6Y4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDo0NFrOGf6Y4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExNTY4Mg==", "bodyText": "Why do we need to wrap in a POJO? Wouldn't AtomicReference work here?", "url": "https://github.com/apache/helix/pull/1066#discussion_r436115682", "createdAt": "2020-06-05T19:14:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/ControllerLeaderSession.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.apache.helix.controller;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * A thin wrapper to include a ZK session. This is created for controller leader to retrieve ZK\n+ * session from Helix Manager in the mean time when checking leadership.\n+ */\n+public class ControllerLeaderSession {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjAzOTU4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-425603958", "createdAt": "2020-06-05T20:25:19Z", "commit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyNToxOVrOGf8V2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyNToxOVrOGf8V2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NzY3Mg==", "bodyText": "Got it. Thanks for pointing that out. I will get a better name for it. Maybe \"ZkSessionWrapper\". If you have a better name, please let me know.\n\u2026\nOn Fri, Jun 5, 2020 at 12:52 PM Lei Xia @.> wrote: @.* commented on this pull request. ------------------------------ In helix-core/src/main/java/org/apache/helix/HelixManager.java <#1066 (comment)>: > @@ -425,6 +426,19 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l / boolean isLeader(); + /* + * Checks if the cluster manager is leader and sets its ZK session in + * @.*** ControllerLeaderSession}. + * + * @param controllerLeaderSession To include ZK session of the cluster manager in return + * + * @return true if this is a controller and a leader of the cluster. Zk session of the cluster + * manager is set in controllerLeaderSession + */ + default boolean isLeader(ControllerLeaderSession controllerLeaderSession) {\n\n\nThis could be confusion because there is no \"leader\" concept for a Helix manager. Leader only applies to a controller instance, but HelixManager is a broader concept here.\n\nThinking in another aspect, the java doc also confuses. That's why I call it ControllerLeaderSession. Though we don't have a \"leader\" concept for helix manager, but a helix manager could be attached to a controller which could be a leader. And this is already public API, we could not change the name of the old API now. For this new one, maybe we could think of a new name. Maybe like isInstanceLeader()?\nLet me also fix the java doc to avoid any confusion.", "url": "https://github.com/apache/helix/pull/1066#discussion_r436147672", "createdAt": "2020-06-05T20:25:19Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -425,6 +426,19 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   boolean isLeader();\n \n+  /**\n+   * Checks if the cluster manager is leader and sets its ZK session in\n+   * {@link ControllerLeaderSession}.\n+   *\n+   * @param controllerLeaderSession To include ZK session of the cluster manager in return\n+   *\n+   * @return true if this is a controller and a leader of the cluster. Zk session of the cluster\n+   * manager is set in controllerLeaderSession\n+   */\n+  default boolean isLeader(ControllerLeaderSession controllerLeaderSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjMzNzI3", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-425633727", "createdAt": "2020-06-05T21:24:30Z", "commit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyNDozMFrOGf9wGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyNDozMFrOGf9wGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MDc3OQ==", "bodyText": "Shall we throw an exception to break the pipeline? If we know session is not matched. Then there is no reason to keep following pipeline based on stale data.", "url": "https://github.com/apache/helix/pull/1066#discussion_r436170779", "createdAt": "2020-06-05T21:24:30Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageDispatchStage.java", "diffHunk": "@@ -78,7 +78,13 @@ protected void processEvent(ClusterEvent event, MessageOutput messageOutput) thr\n         batchMessage(dataAccessor.keyBuilder(), messagesToSend, resourceMap, liveInstanceMap,\n             manager.getProperties());\n \n-    List<Message> messagesSent = sendMessages(dataAccessor, outputMessages);\n+    String expectedSession = event.getAttribute(AttributeName.CONTROLLER_LEADER_SESSION.name());\n+    // An early check for expected leader session. If the sessions don't match, it means the\n+    // controller lost leadership, then messages should not be sent. This potentially avoid\n+    // double masters for a single partition.\n+    List<Message> messagesSent = manager.getSessionId().equals(expectedSession)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDA4NzMx", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-427408731", "createdAt": "2020-06-09T17:58:13Z", "commit": {"oid": "a37e8119f5b5fa05e3c89f177edcb46ae877e1b0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1ODoxM1rOGhV_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1OTozM1rOGhWCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNjQ5Nw==", "bodyText": "Let's make the naming consistent. Better to be isLeader(Session).", "url": "https://github.com/apache/helix/pull/1066#discussion_r437616497", "createdAt": "2020-06-09T17:58:13Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -425,6 +426,20 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   boolean isLeader();\n \n+  /**\n+   * Checks whether the cluster manager is leader and sets its ZK session in param\n+   * {@link InstanceLeaderSession} if and only if it is leader.\n+   *\n+   * @param instanceLeaderSession To include ZK session ID of the cluster manager in return\n+   *\n+   * @return true if the instance is a leader of the cluster and Zk session of the cluster\n+   * manager is return in param {@link InstanceLeaderSession}\n+   */\n+  default boolean isInstanceLeader(InstanceLeaderSession instanceLeaderSession) {\n+    throw new UnsupportedOperationException(\n+        \"Checking leader and returning session is not supported.\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a37e8119f5b5fa05e3c89f177edcb46ae877e1b0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNzI0Nw==", "bodyText": "I think stopping the pipeline is much better. Because that saves you time if client reconnect with different session for next pipeline.\nI am OK to skip the change in the PR. But please add it to the TODO part. This is necessary especially when our pipeline takes much longer time for larger amount of resources computation.", "url": "https://github.com/apache/helix/pull/1066#discussion_r437617247", "createdAt": "2020-06-09T17:59:33Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageDispatchStage.java", "diffHunk": "@@ -78,7 +78,13 @@ protected void processEvent(ClusterEvent event, MessageOutput messageOutput) thr\n         batchMessage(dataAccessor.keyBuilder(), messagesToSend, resourceMap, liveInstanceMap,\n             manager.getProperties());\n \n-    List<Message> messagesSent = sendMessages(dataAccessor, outputMessages);\n+    String expectedSession = event.getAttribute(AttributeName.CONTROLLER_LEADER_SESSION.name());\n+    // An early check for expected leader session. If the sessions don't match, it means the\n+    // controller lost leadership, then messages should not be sent. This potentially avoid\n+    // double masters for a single partition.\n+    List<Message> messagesSent = manager.getSessionId().equals(expectedSession)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MDc3OQ=="}, "originalCommit": {"oid": "88c0153bdfd87890dc806014ca89498e6661b603"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d66ff6c04bf712d82f0c42251615e68289da263", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7d66ff6c04bf712d82f0c42251615e68289da263", "committedDate": "2020-06-09T23:53:32Z", "message": "Add test"}, "afterCommit": {"oid": "af7218cb4110b902bdb2c8f9f97deab16eaf7763", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/af7218cb4110b902bdb2c8f9f97deab16eaf7763", "committedDate": "2020-06-09T23:58:30Z", "message": "Add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76a8240307543bb7d02394254f2ed129f7882588", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/76a8240307543bb7d02394254f2ed129f7882588", "committedDate": "2020-06-10T00:06:06Z", "message": "Add comments"}, "afterCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/49845ece32a8d1528af381dc67a51c5ace87389d", "committedDate": "2020-06-10T00:09:03Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Nzc2NTU5", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-427776559", "createdAt": "2020-06-10T07:24:53Z", "commit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoyNDo1M1rOGhoC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzozOTozNlrOGholXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMjI3Nw==", "bodyText": "Instead of polluting the interface, shall we have a new interface called sessionAwareZkClient or something like that? Note that an implementation can implement multiple interfaces. So we just need to let the right class implement that interface. And this one won't need to have this ugly and not supported method.", "url": "https://github.com/apache/helix/pull/1066#discussion_r437912277", "createdAt": "2020-06-10T07:24:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/BaseDataAccessor.java", "diffHunk": "@@ -95,6 +95,24 @@\n    */\n   boolean[] createChildren(List<String> paths, List<T> records, int options);\n \n+  /**\n+   * Use it when creating children under a parent node with an expected ZK session.\n+   * <p>\n+   * This will use async api for better performance. If the children already exist it will return\n+   * false.\n+   *\n+   * @param paths the paths to the children ZNodes\n+   * @param records List of data to write to each of the path\n+   * @param options Set the type of ZNode see the valid values in {@link AccessOption}\n+   * @param expectedSession The expected ZK session to create children\n+   * @return For each child: true if creation succeeded, false otherwise (e.g. if the child exists)\n+   */\n+  default boolean[] createChildren(List<String> paths, List<T> records, int options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMjM0MQ==", "bodyText": "same here", "url": "https://github.com/apache/helix/pull/1066#discussion_r437912341", "createdAt": "2020-06-10T07:25:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixDataAccessor.java", "diffHunk": "@@ -188,6 +188,22 @@\n    */\n   <T extends HelixProperty> boolean[] createChildren(List<PropertyKey> keys, List<T> children);\n \n+  /**\n+   * Adds multiple children to a parent. If successful, the children will be created by the expected\n+   * ZK session. If current ZK session does not match expected session, the creation operation will\n+   * fail.\n+   *\n+   * @param keys property keys\n+   * @param children list of children znodes to be created\n+   * @param expectedSession expected ZK session to create the children znodes\n+   * @return array where true means the child was added and false means it was not\n+   */\n+  default <T extends HelixProperty> boolean[] createChildren(List<PropertyKey> keys, List<T> children,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMjQwOQ==", "bodyText": "Same here", "url": "https://github.com/apache/helix/pull/1066#discussion_r437912409", "createdAt": "2020-06-10T07:25:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -425,6 +426,20 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   boolean isLeader();\n \n+  /**\n+   * Checks whether the cluster manager is leader and sets its ZK session in param\n+   * {@link InstanceLeaderSession} if and only if it is leader.\n+   *\n+   * @param instanceLeaderSession To include ZK session ID of the cluster manager in return\n+   *\n+   * @return true if the instance is a leader of the cluster and Zk session of the cluster\n+   * manager is returned in param {@link InstanceLeaderSession}\n+   */\n+  default boolean isInstanceLeader(InstanceLeaderSession instanceLeaderSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMzQ2Nw==", "bodyText": "This can be more generic. Just call it event_session?\nAs you can imagine, this can be used in multiple ways.", "url": "https://github.com/apache/helix/pull/1066#discussion_r437913467", "createdAt": "2020-06-10T07:27:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -40,5 +40,6 @@\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n   ControllerDataProvider,\n-  STATEFUL_REBALANCER\n+  STATEFUL_REBALANCER,\n+  CONTROLLER_LEADER_SESSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNjAyNw==", "bodyText": "This may cause some issues. If the session is updated randomly, a new session may be populated before new session handling is done.", "url": "https://github.com/apache/helix/pull/1066#discussion_r437916027", "createdAt": "2020-06-10T07:32:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -401,6 +402,8 @@ void checkConnected(long timeout) {\n       throw new HelixException(\n           \"HelixManager is not connected within retry timeout for cluster \" + _clusterName);\n     }\n+\n+    _sessionId = ZKUtil.toHexSessionId(_zkclient.getSessionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMTExNg==", "bodyText": "This is a great idea!", "url": "https://github.com/apache/helix/pull/1066#discussion_r437921116", "createdAt": "2020-06-10T07:39:36Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2119,8 +2126,41 @@ private String getHexSessionId() {\n    * 2. create mode is EPHEMERAL or EPHEMERAL_SEQUENTIAL\n    */\n   private boolean isSessionAwareOperation(String expectedSessionId, CreateMode mode) {\n-    return expectedSessionId != null && !expectedSessionId.isEmpty() && (\n-        mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL);\n+    return expectedSessionId != null && !expectedSessionId.isEmpty() && mode.isEphemeral();\n+  }\n+\n+  private ZooKeeper getExpectedZookeeper(final String expectedSessionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDcxMTgw", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-428471180", "createdAt": "2020-06-10T22:27:42Z", "commit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoyNzo0MlrOGiIX5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoyNzo0MlrOGiIX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MTk1OQ==", "bodyText": "As we discussed,\n\nmake it private if not used anywhere else.\nmake it getSessionIdIfLeader() which returns an Optional object if the node is leader.", "url": "https://github.com/apache/helix/pull/1066#discussion_r438441959", "createdAt": "2020-06-10T22:27:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -901,6 +904,11 @@ public void addPreConnectCallback(PreConnectCallback callback) {\n \n   @Override\n   public boolean isLeader() {\n+    return isInstanceLeader(null);\n+  }\n+\n+  @Override\n+  public boolean isInstanceLeader(InstanceLeaderSession instanceLeaderSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b280faa762b90b016b4cc4e73aafcc9494e1b62", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8b280faa762b90b016b4cc4e73aafcc9494e1b62", "committedDate": "2020-06-11T01:24:10Z", "message": "UnsupportedOperationException message"}, "afterCommit": {"oid": "58c4eecc7debff5eeebc33f5c4482e0f5f8d202d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/58c4eecc7debff5eeebc33f5c4482e0f5f8d202d", "committedDate": "2020-06-11T01:37:49Z", "message": "UnsupportedOperationException message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58c4eecc7debff5eeebc33f5c4482e0f5f8d202d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/58c4eecc7debff5eeebc33f5c4482e0f5f8d202d", "committedDate": "2020-06-11T01:37:49Z", "message": "UnsupportedOperationException message"}, "afterCommit": {"oid": "4f6fc71575d312838675a494596b39769f01cdab", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4f6fc71575d312838675a494596b39769f01cdab", "committedDate": "2020-06-11T01:53:31Z", "message": "Refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f6fc71575d312838675a494596b39769f01cdab", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4f6fc71575d312838675a494596b39769f01cdab", "committedDate": "2020-06-11T01:53:31Z", "message": "Refactor"}, "afterCommit": {"oid": "3843fe4ad2b40decb8154eb3d672bc91318749d2", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3843fe4ad2b40decb8154eb3d672bc91318749d2", "committedDate": "2020-06-11T02:00:13Z", "message": "Refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3843fe4ad2b40decb8154eb3d672bc91318749d2", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3843fe4ad2b40decb8154eb3d672bc91318749d2", "committedDate": "2020-06-11T02:00:13Z", "message": "Refactor"}, "afterCommit": {"oid": "cd6553ac792e7d289de03a1037923cd6aa541b19", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/cd6553ac792e7d289de03a1037923cd6aa541b19", "committedDate": "2020-06-11T02:07:25Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd6553ac792e7d289de03a1037923cd6aa541b19", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/cd6553ac792e7d289de03a1037923cd6aa541b19", "committedDate": "2020-06-11T02:07:25Z", "message": "Resolve conflicts"}, "afterCommit": {"oid": "e447ad350228cfc6676847107b80248cd8d8a99c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e447ad350228cfc6676847107b80248cd8d8a99c", "committedDate": "2020-06-11T02:10:50Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e447ad350228cfc6676847107b80248cd8d8a99c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e447ad350228cfc6676847107b80248cd8d8a99c", "committedDate": "2020-06-11T02:10:50Z", "message": "Resolve conflicts"}, "afterCommit": {"oid": "f1448226f82a8618ffdc1d54ea2133cc9856cee4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f1448226f82a8618ffdc1d54ea2133cc9856cee4", "committedDate": "2020-06-11T20:48:21Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51475032fbd0c1f00207b8f4e8948c7e1a98e107", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/51475032fbd0c1f00207b8f4e8948c7e1a98e107", "committedDate": "2020-06-15T06:41:37Z", "message": "Add test asyncCreate"}, "afterCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971", "committedDate": "2020-06-15T07:02:21Z", "message": "Add test asyncCreate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODgyNjM4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-432882638", "createdAt": "2020-06-18T01:37:47Z", "commit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMTozNzo0OFrOGlcrqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzo0NTo1N1rOGlemrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMDQyNQ==", "bodyText": "After comparing options, I still think new interfaces would be easier.\nWe can have interfaces defined by extending the existing one, but have the additional methods.\nFor example,\npublic interface SessionAwareBaseDataAccessor<T> extends BaseDataAccessor<T> {}\nThe reason I prefer new interfaces is that the new methods do not make much sense for most of the external users. And the parameters are confusing for those who don't care about the session.\nWe shall try to keep the session aware accessors / clients as private as possible.", "url": "https://github.com/apache/helix/pull/1066#discussion_r441920425", "createdAt": "2020-06-18T01:37:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/BaseDataAccessor.java", "diffHunk": "@@ -95,6 +95,24 @@\n    */\n   boolean[] createChildren(List<String> paths, List<T> records, int options);\n \n+  /**\n+   * Use it when creating children under a parent node with an expected ZK session.\n+   * <p>\n+   * This will use async api for better performance. If the children already exist it will return\n+   * false.\n+   *\n+   * @param paths the paths to the children ZNodes\n+   * @param records List of data to write to each of the path\n+   * @param options Set the type of ZNode see the valid values in {@link AccessOption}\n+   * @param expectedSession The expected ZK session to create children\n+   * @return For each child: true if creation succeeded, false otherwise (e.g. if the child exists)\n+   */\n+  default boolean[] createChildren(List<String> paths, List<T> records, int options,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMjI3Nw=="}, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMjg0OQ==", "bodyText": "It's good to consider backward compatibility here. But I believe HeixManager is not a \"public\" interface, meaning we shall not assume the user will implement this class and send back to any of the Helix components to use. So I think we don't need to make it default and throws UnsupportedOperationException.\n@dasahcc and @lei-xia, what do you think?", "url": "https://github.com/apache/helix/pull/1066#discussion_r441922849", "createdAt": "2020-06-18T01:47:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +420,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code Optional<String>} session ID is present inside the {@code Optional} object\n+   * if the cluster manager is leader. Otherwise, returns an empty {@code Optional} object.\n+   */\n+  default Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMzgwMw==", "bodyText": "nit, safer to go reverse way. Since you already checked expectedSession is not null, so there is guarantee no NPE if you do expectedSession.equals(...)", "url": "https://github.com/apache/helix/pull/1066#discussion_r441923803", "createdAt": "2020-06-18T01:51:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageDispatchStage.java", "diffHunk": "@@ -78,7 +78,17 @@ protected void processEvent(ClusterEvent event, MessageOutput messageOutput) thr\n         batchMessage(dataAccessor.keyBuilder(), messagesToSend, resourceMap, liveInstanceMap,\n             manager.getProperties());\n \n-    List<Message> messagesSent = sendMessages(dataAccessor, outputMessages);\n+    String expectedSession = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    // An early check for expected leader session. If the sessions don't match, it means the\n+    // controller lost leadership, then messages should not be sent and the pipeline is stopped.\n+    // This potentially avoid double masters for a single partition.\n+    if (expectedSession != null && !manager.getSessionId().equals(expectedSession)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjg4MA==", "bodyText": "If the sessionId changes before handleNewSession() is done, I expect handleNewSession() should be able to handle the expired session because it is handling an expected session\n\nWhat if the session Id is changed before handleNewSession() get a chance to execute? This will update the session Id unexpectedly. This means the handlers are not correctly reset. I suggest not break this assumption.\nOn the other side, if we don't set this, then the operation will fail if they are session aware. Isn't that a result that we want?", "url": "https://github.com/apache/helix/pull/1066#discussion_r441936880", "createdAt": "2020-06-18T02:43:28Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -401,6 +402,8 @@ void checkConnected(long timeout) {\n       throw new HelixException(\n           \"HelixManager is not connected within retry timeout for cluster \" + _clusterName);\n     }\n+\n+    _sessionId = ZKUtil.toHexSessionId(_zkclient.getSessionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNjAyNw=="}, "originalCommit": {"oid": "49845ece32a8d1528af381dc67a51c5ace87389d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNzYzNw==", "bodyText": "Let's don't bother keeping the backward compatibility fo the test classes.\nMy suggestion is that we throw the exception by default. But change the test callers to catch it if necessary.\nIf this is not clean, then just add the additional parameters to the callers.", "url": "https://github.com/apache/helix/pull/1066#discussion_r441937637", "createdAt": "2020-06-18T02:46:28Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -788,14 +788,22 @@ protected void setupInstances(String clusterName, int[] instances) {\n     }\n   }\n \n-  protected void runPipeline(ClusterEvent event, Pipeline pipeline) {\n+  protected void runPipeline(ClusterEvent event, Pipeline pipeline) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0NjczMg==", "bodyText": "Why changing the name? I think datat stands for data type. In this scenario, it means this is an object with a certain data type. \"data\" is very generic so it might be less meaningful.\nI don't have a strong preference on the names. But if you are going to change it, please change all the datat in this java file at least : ) Or even better, the whole project.", "url": "https://github.com/apache/helix/pull/1066#discussion_r441946732", "createdAt": "2020-06-18T03:23:46Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1738,29 +1705,36 @@ public Stat writeDataGetStat(final String path, Object datat, final int expected\n     return writeDataReturnStat(path, datat, expectedVersion);\n   }\n \n-  public void asyncCreate(final String path, Object datat, final CreateMode mode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0NzQ0Mg==", "bodyText": "return zk?", "url": "https://github.com/apache/helix/pull/1066#discussion_r441947442", "createdAt": "2020-06-18T03:26:45Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2114,13 +2088,43 @@ private String getHexSessionId() {\n   }\n \n   /*\n-   * Session aware operation needs below requirements:\n-   * 1. the session id is NOT null or empty\n-   * 2. create mode is EPHEMERAL or EPHEMERAL_SEQUENTIAL\n+   * Gets the zookeeper instance that ensures its session ID matches the expected session ID.\n+   * It is used for write operations that suppose the znode to be created by the expected session.\n    */\n-  private boolean isSessionAwareOperation(String expectedSessionId, CreateMode mode) {\n-    return expectedSessionId != null && !expectedSessionId.isEmpty() && (\n-        mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL);\n+  private ZooKeeper getExpectedZookeeper(final String expectedSessionId) {\n+    ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+\n+    if (expectedSessionId == null || expectedSessionId.isEmpty()) {\n+      return zk;\n+    }\n+\n+    /*\n+     * 1. If operation is session aware, we have to check whether or not the\n+     * passed-in(expected) session id matches actual session's id.\n+     * If not, znode creation is failed. This validation is\n+     * critical to guarantee the znode is created by the expected ZK session.\n+     *\n+     * 2. Otherwise, the operation is NOT session aware.\n+     * In this case, we will use the actual zookeeper session to create the node.\n+     */\n+    acquireEventLock();\n+    try {\n+      final String actualSessionId = Long.toHexString(zk.getSessionId());\n+      if (!actualSessionId.equals(expectedSessionId)) {\n+        throw new ZkSessionMismatchedException(\n+            \"Failed to get expected zookeeper instance! There is a session id mismatch. Expected: \"\n+                + expectedSessionId + \". Actual: \" + actualSessionId);\n+      }\n+\n+      /*\n+       * Cache the zookeeper reference and make sure later zooKeeper.create() is being run\n+       * under this zookeeper connection. This is to avoid locking zooKeeper.create() which\n+       * may cause potential performance issue.\n+       */\n+      return ((ZkConnection) getConnection()).getZookeeper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0ODg3OQ==", "bodyText": "Another concern is getSessionId() would become less useful with this call. And would it be confusing for the caller which one to call?", "url": "https://github.com/apache/helix/pull/1066#discussion_r441948879", "createdAt": "2020-06-18T03:32:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +420,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code Optional<String>} session ID is present inside the {@code Optional} object\n+   * if the cluster manager is leader. Otherwise, returns an empty {@code Optional} object.\n+   */\n+  default Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMjg0OQ=="}, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MTkxNw==", "bodyText": "It's better to support this API for the dedicated zkclient only. For the other clients, especially the customer-facing ones, I would prefer not to open this API for now.", "url": "https://github.com/apache/helix/pull/1066#discussion_r441951917", "createdAt": "2020-06-18T03:45:57Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -372,6 +372,12 @@ public void asyncCreate(String path, Object datat, CreateMode mode,\n     _rawZkClient.asyncCreate(path, datat, mode, cb);\n   }\n \n+  @Override\n+  public void asyncCreate(String path, Object datat, CreateMode mode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8a5f405a7e5e93fd4f0c8479f070b0ad0d971"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTA1OTcy", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-437105972", "createdAt": "2020-06-25T01:12:31Z", "commit": {"oid": "506df964cf755939fdb51df09098254647cfe568"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxMjozMVrOGooK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxMjozMVrOGooK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NDM5NA==", "bodyText": "I assume we should invoke this one in ZkBaseDataAccessor#createChildren. But I did not see it.\nAm I missing something here?", "url": "https://github.com/apache/helix/pull/1066#discussion_r445254394", "createdAt": "2020-06-25T01:12:31Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1740,27 +1707,34 @@ public Stat writeDataGetStat(final String path, Object datat, final int expected\n \n   public void asyncCreate(final String path, Object datat, final CreateMode mode,\n       final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n+    asyncCreate(path, datat, mode, cb, null);\n+  }\n+\n+  public void asyncCreate(final String path, Object data, final CreateMode mode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506df964cf755939fdb51df09098254647cfe568"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTA2NzIx", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-437106721", "createdAt": "2020-06-25T01:15:07Z", "commit": {"oid": "506df964cf755939fdb51df09098254647cfe568"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxNTowN1rOGooNfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMToxNTowN1rOGooNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NTAzNg==", "bodyText": "Nit, I saw this non-essential beautification all the time. Let us not add them to divert the attention.", "url": "https://github.com/apache/helix/pull/1066#discussion_r445255036", "createdAt": "2020-06-25T01:15:07Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -149,8 +149,7 @@ public void handleSessionEstablishmentError(Throwable error) {\n    * Tests session expiry for the helix's IZkStateListener.\n    */\n   @Test\n-  void testSessionExpiry()\n-      throws Exception {\n+  void testSessionExpiry() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506df964cf755939fdb51df09098254647cfe568"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc7ca714daf9c4f9e39ae43e60909d5bf5d37593", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/cc7ca714daf9c4f9e39ae43e60909d5bf5d37593", "committedDate": "2020-07-17T09:32:06Z", "message": "Use message srcSession as expected session"}, "afterCommit": {"oid": "20e5f3b506d05359c3962c2f6f39c6c2a0a15b29", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/20e5f3b506d05359c3962c2f6f39c6c2a0a15b29", "committedDate": "2020-07-17T09:41:02Z", "message": "Use message srcSession as expected session"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20e5f3b506d05359c3962c2f6f39c6c2a0a15b29", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/20e5f3b506d05359c3962c2f6f39c6c2a0a15b29", "committedDate": "2020-07-17T09:41:02Z", "message": "Use message srcSession as expected session"}, "afterCommit": {"oid": "3d875ed7542f734887e0f9e1e59bef07196f53df", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3d875ed7542f734887e0f9e1e59bef07196f53df", "committedDate": "2020-07-17T09:47:20Z", "message": "Use message srcSession as expected session"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d875ed7542f734887e0f9e1e59bef07196f53df", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3d875ed7542f734887e0f9e1e59bef07196f53df", "committedDate": "2020-07-17T09:47:20Z", "message": "Use message srcSession as expected session"}, "afterCommit": {"oid": "ab57dd4c7efd4d2a249f83a230a031305d62976a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ab57dd4c7efd4d2a249f83a230a031305d62976a", "committedDate": "2020-07-17T09:49:16Z", "message": "Use message srcSession as expected session"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab57dd4c7efd4d2a249f83a230a031305d62976a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ab57dd4c7efd4d2a249f83a230a031305d62976a", "committedDate": "2020-07-17T09:49:16Z", "message": "Use message srcSession as expected session"}, "afterCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c0357b56f4e20b03713389760273665444df14d4", "committedDate": "2020-07-17T09:58:05Z", "message": "Use message srcSession as expected session"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODUyNDA2", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-450852406", "createdAt": "2020-07-17T17:55:49Z", "commit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NTo0OVrOGzcGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowMjowMVrOGzcTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDkxMQ==", "bodyText": "Sorry that if I asked this question before (this PR has been opened for a long time), but can we actually add the session Id to the ClusterEvent when it is constructed, and then use that session Id directly here?\nOr they are actually different Session Ids. 1. is the id that from which the HelixManger get events. 2. is the current HelixManager session Id.\nIf this is the case, then we shall not call it EVENT_SESSION. It would be misleading.\nI think that using the real EVENT session Id would be good enough. So we may don't need this Manger Session Id here.", "url": "https://github.com/apache/helix/pull/1066#discussion_r456590911", "createdAt": "2020-07-17T17:55:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -695,12 +695,19 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(),\n         _rebalancerRef.getRebalancer(manager));\n \n-    if (!manager.isLeader()) {\n-      logger.error(\"Cluster manager: \" + manager.getInstanceName() + \" is not leader for \" + manager\n-          .getClusterName() + \". Pipeline will not be invoked\");\n+    Optional<String> leaderSession = manager.getSessionIdIfLead();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MjU1Nw==", "bodyText": "Will \"data instanceof Message\" be simpler here?", "url": "https://github.com/apache/helix/pull/1066#discussion_r456592557", "createdAt": "2020-07-17T17:58:43Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2234,13 +2205,59 @@ private String getHexSessionId() {\n   }\n \n   /*\n-   * Session aware operation needs below requirements:\n-   * 1. the session id is NOT null or empty\n-   * 2. create mode is EPHEMERAL or EPHEMERAL_SEQUENTIAL\n+   * Gets the zookeeper instance that ensures its session ID matches the expected session ID.\n+   * It is used for write operations that suppose the znode to be created by the expected session.\n    */\n-  private boolean isSessionAwareOperation(String expectedSessionId, CreateMode mode) {\n-    return expectedSessionId != null && !expectedSessionId.isEmpty() && (\n-        mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL);\n+  private ZooKeeper getExpectedZookeeper(final String expectedSessionId) {\n+    /*\n+     * Cache the zookeeper reference and make sure later zooKeeper.create() is being run\n+     * under this zookeeper connection. This is to avoid zk session change after expected\n+     * session check.\n+     */\n+    ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+\n+    /*\n+     * The operation is NOT session aware, we will use the actual zookeeper session without\n+     * checking expected session.\n+     */\n+    if (expectedSessionId == null || expectedSessionId.isEmpty()) {\n+      return zk;\n+    }\n+\n+    /*\n+     * If operation is session aware (expectedSession is valid),\n+     * we have to check whether or not the passed-in(expected) session id\n+     * matches actual session's id.\n+     * If not, we should not return a zk object for the zk operation.\n+     */\n+    final String actualSessionId = Long.toHexString(zk.getSessionId());\n+    if (!actualSessionId.equals(expectedSessionId)) {\n+      throw new ZkSessionMismatchedException(\n+          \"Failed to get expected zookeeper instance! There is a session id mismatch. Expected: \"\n+              + expectedSessionId + \". Actual: \" + actualSessionId);\n+    }\n+\n+    return zk;\n+  }\n+\n+  private String parseExpectedSessionId(Object data) {\n+    if (data == null) {\n+      return null;\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = (ZNRecord) data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MzE4NA==", "bodyText": "So we only protect create but not write?", "url": "https://github.com/apache/helix/pull/1066#discussion_r456593184", "createdAt": "2020-07-17T17:59:45Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1827,18 +1796,20 @@ public void asyncCreate(final String path, Object datat, final CreateMode mode,\n           new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n       return;\n     }\n-    doAsyncCreate(path, data, mode, startT, cb);\n+    doAsyncCreate(path, data, mode, startT, cb, parseExpectedSessionId(datat));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDMxNg==", "bodyText": "This logic is Helix logic specific, not a good idea to put in ZkClient.\nTo make it generic, one way is adding a new interface of ZnRecord (SessionAwareZnRecordUpdateRequest, etc.) which provides a method such as getExpectedSessionId() to return this information.", "url": "https://github.com/apache/helix/pull/1066#discussion_r456594316", "createdAt": "2020-07-17T18:02:01Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2234,13 +2205,59 @@ private String getHexSessionId() {\n   }\n \n   /*\n-   * Session aware operation needs below requirements:\n-   * 1. the session id is NOT null or empty\n-   * 2. create mode is EPHEMERAL or EPHEMERAL_SEQUENTIAL\n+   * Gets the zookeeper instance that ensures its session ID matches the expected session ID.\n+   * It is used for write operations that suppose the znode to be created by the expected session.\n    */\n-  private boolean isSessionAwareOperation(String expectedSessionId, CreateMode mode) {\n-    return expectedSessionId != null && !expectedSessionId.isEmpty() && (\n-        mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL);\n+  private ZooKeeper getExpectedZookeeper(final String expectedSessionId) {\n+    /*\n+     * Cache the zookeeper reference and make sure later zooKeeper.create() is being run\n+     * under this zookeeper connection. This is to avoid zk session change after expected\n+     * session check.\n+     */\n+    ZooKeeper zk = ((ZkConnection) getConnection()).getZookeeper();\n+\n+    /*\n+     * The operation is NOT session aware, we will use the actual zookeeper session without\n+     * checking expected session.\n+     */\n+    if (expectedSessionId == null || expectedSessionId.isEmpty()) {\n+      return zk;\n+    }\n+\n+    /*\n+     * If operation is session aware (expectedSession is valid),\n+     * we have to check whether or not the passed-in(expected) session id\n+     * matches actual session's id.\n+     * If not, we should not return a zk object for the zk operation.\n+     */\n+    final String actualSessionId = Long.toHexString(zk.getSessionId());\n+    if (!actualSessionId.equals(expectedSessionId)) {\n+      throw new ZkSessionMismatchedException(\n+          \"Failed to get expected zookeeper instance! There is a session id mismatch. Expected: \"\n+              + expectedSessionId + \". Actual: \" + actualSessionId);\n+    }\n+\n+    return zk;\n+  }\n+\n+  private String parseExpectedSessionId(Object data) {\n+    if (data == null) {\n+      return null;\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = (ZNRecord) data;\n+    } catch (ClassCastException e) {\n+      LOG.debug(\"Failed to parse expected session id!\", e);\n+      return null;\n+    }\n+\n+    // Check it is a message and get src session id as expected session id for message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f18643d009e8942bd147f47d9112f8157a0fdcc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9f18643d009e8942bd147f47d9112f8157a0fdcc", "committedDate": "2020-07-20T06:15:40Z", "message": "Prevent parallel controller pipelines run causing two master replicas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00b13f6c70a090390064c1f58cc312ac1cee554", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f00b13f6c70a090390064c1f58cc312ac1cee554", "committedDate": "2020-07-20T06:15:43Z", "message": "Make some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c127f731b79c64278a6ce98656337329e77701", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e8c127f731b79c64278a6ce98656337329e77701", "committedDate": "2020-07-20T06:15:43Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819a33c501169d2371a31de5a999d2cf0f522d1a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/819a33c501169d2371a31de5a999d2cf0f522d1a", "committedDate": "2020-07-20T06:15:43Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a9a004852843545e73cd73a71bb1f007894bdc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b4a9a004852843545e73cd73a71bb1f007894bdc", "committedDate": "2020-07-20T06:15:43Z", "message": "getSessionIdIfLeader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc762381d6efa6e245cb12b1cc6b88ba0a36913", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2fc762381d6efa6e245cb12b1cc6b88ba0a36913", "committedDate": "2020-07-20T06:15:43Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2579d0de139b74490083594b12873d4368aa2dcf", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2579d0de139b74490083594b12873d4368aa2dcf", "committedDate": "2020-07-20T06:15:43Z", "message": "Add test asyncCreate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08370e0406472abb6fcb368e90f60496a2092e5", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/d08370e0406472abb6fcb368e90f60496a2092e5", "committedDate": "2020-07-20T06:15:43Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c21616aadbc3b32b9fc02be60789293734c8f3b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1c21616aadbc3b32b9fc02be60789293734c8f3b", "committedDate": "2020-07-20T06:15:43Z", "message": "Simplify getExpectedZookeeper() to remove locking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e1dee1ff611d2fbb47680c96da7fd745d2c467", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b4e1dee1ff611d2fbb47680c96da7fd745d2c467", "committedDate": "2020-07-20T06:15:43Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eece312c38609901d87e9a2d8009f62b66d873d8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/eece312c38609901d87e9a2d8009f62b66d873d8", "committedDate": "2020-07-20T06:15:43Z", "message": "Add testCreateChildren"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3db6f6e0cd790e0c6defbc844edaa89ba42c45f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c3db6f6e0cd790e0c6defbc844edaa89ba42c45f", "committedDate": "2020-07-20T06:15:43Z", "message": "Use message srcSession as expected session"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cd7a177f3bdf3c583d043eff81047f231973710", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8cd7a177f3bdf3c583d043eff81047f231973710", "committedDate": "2020-07-20T06:12:22Z", "message": "Expected session in ZNRecord"}, "afterCommit": {"oid": "5059cc364dc7a4945186ed07406cec69edb7828d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5059cc364dc7a4945186ed07406cec69edb7828d", "committedDate": "2020-07-20T06:15:43Z", "message": "Expected session in ZNRecord"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83de7aae9b1f2787d54ee0a2c5ce94382bc31cc9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/83de7aae9b1f2787d54ee0a2c5ce94382bc31cc9", "committedDate": "2020-07-20T06:22:23Z", "message": "Expected session in ZNRecord"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5059cc364dc7a4945186ed07406cec69edb7828d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5059cc364dc7a4945186ed07406cec69edb7828d", "committedDate": "2020-07-20T06:15:43Z", "message": "Expected session in ZNRecord"}, "afterCommit": {"oid": "83de7aae9b1f2787d54ee0a2c5ce94382bc31cc9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/83de7aae9b1f2787d54ee0a2c5ce94382bc31cc9", "committedDate": "2020-07-20T06:22:23Z", "message": "Expected session in ZNRecord"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7dc749c2cae1e141f4718de3938a6b1e25bc7a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8e7dc749c2cae1e141f4718de3938a6b1e25bc7a", "committedDate": "2020-07-20T19:25:11Z", "message": "Add event session when event is created"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bd0dd39cc72b186ea30491985032f59a7bbcb7c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/0bd0dd39cc72b186ea30491985032f59a7bbcb7c", "committedDate": "2020-07-22T18:34:30Z", "message": "Add interface SessionAwareZkWriteData"}, "afterCommit": {"oid": "7ffdc1f7f17b42fc0e1f8d5a1e92199cf6d53738", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7ffdc1f7f17b42fc0e1f8d5a1e92199cf6d53738", "committedDate": "2020-07-22T18:58:51Z", "message": "Add interface SessionAwareZkWriteData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cda4f80e1b08457d7d5cd29abc57b0f47a7bdf2", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1cda4f80e1b08457d7d5cd29abc57b0f47a7bdf2", "committedDate": "2020-07-22T19:08:33Z", "message": "Add interface SessionAwareZkWriteData"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ffdc1f7f17b42fc0e1f8d5a1e92199cf6d53738", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7ffdc1f7f17b42fc0e1f8d5a1e92199cf6d53738", "committedDate": "2020-07-22T18:58:51Z", "message": "Add interface SessionAwareZkWriteData"}, "afterCommit": {"oid": "1cda4f80e1b08457d7d5cd29abc57b0f47a7bdf2", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1cda4f80e1b08457d7d5cd29abc57b0f47a7bdf2", "committedDate": "2020-07-22T19:08:33Z", "message": "Add interface SessionAwareZkWriteData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1841b925db194e04a76038bb5a76c22b4451d725", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1841b925db194e04a76038bb5a76c22b4451d725", "committedDate": "2020-07-22T19:27:50Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "696effffc5e129c50ffae89ad853b0c3d3f61382", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/696effffc5e129c50ffae89ad853b0c3d3f61382", "committedDate": "2020-07-22T19:37:43Z", "message": "Init stat in message constructor"}, "afterCommit": {"oid": "a27d3dedbe89e0f3d6bd85675d344dc14fdf3f37", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a27d3dedbe89e0f3d6bd85675d344dc14fdf3f37", "committedDate": "2020-07-22T19:41:13Z", "message": "Init stat in message constructor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a27d3dedbe89e0f3d6bd85675d344dc14fdf3f37", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a27d3dedbe89e0f3d6bd85675d344dc14fdf3f37", "committedDate": "2020-07-22T19:41:13Z", "message": "Init stat in message constructor"}, "afterCommit": {"oid": "32c7315e122cea908a90f57bdfba6146b71b0ede", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/32c7315e122cea908a90f57bdfba6146b71b0ede", "committedDate": "2020-07-22T19:46:07Z", "message": "Init stat in message constructor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32c7315e122cea908a90f57bdfba6146b71b0ede", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/32c7315e122cea908a90f57bdfba6146b71b0ede", "committedDate": "2020-07-22T19:46:07Z", "message": "Init stat in message constructor"}, "afterCommit": {"oid": "b7185a3d7680c79f3b891516a5fc9a18d79a50c0", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b7185a3d7680c79f3b891516a5fc9a18d79a50c0", "committedDate": "2020-07-22T19:53:10Z", "message": "Init stat in message constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzIyMTU4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-452722158", "createdAt": "2020-07-21T18:27:19Z", "commit": {"oid": "8e7dc749c2cae1e141f4718de3938a6b1e25bc7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyNzoxOVrOG1El9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyNzoxOVrOG1El9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMjk2NQ==", "bodyText": "We agreed to protect all write operations, as well.", "url": "https://github.com/apache/helix/pull/1066#discussion_r458302965", "createdAt": "2020-07-21T18:27:19Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1827,18 +1796,20 @@ public void asyncCreate(final String path, Object datat, final CreateMode mode,\n           new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n       return;\n     }\n-    doAsyncCreate(path, data, mode, startT, cb);\n+    doAsyncCreate(path, data, mode, startT, cb, parseExpectedSessionId(datat));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MzE4NA=="}, "originalCommit": {"oid": "c0357b56f4e20b03713389760273665444df14d4"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7185a3d7680c79f3b891516a5fc9a18d79a50c0", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b7185a3d7680c79f3b891516a5fc9a18d79a50c0", "committedDate": "2020-07-22T19:53:10Z", "message": "Init stat in message constructor"}, "afterCommit": {"oid": "35619b2d6cab17aacc077e627a4bf32d67197885", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/35619b2d6cab17aacc077e627a4bf32d67197885", "committedDate": "2020-07-23T08:55:18Z", "message": "Init stat in message constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3fb7668c54a9f23ce5ee3862209e4db1efe781be", "committedDate": "2020-07-23T09:05:47Z", "message": "Init stat in message constructor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35619b2d6cab17aacc077e627a4bf32d67197885", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/35619b2d6cab17aacc077e627a4bf32d67197885", "committedDate": "2020-07-23T08:55:18Z", "message": "Init stat in message constructor"}, "afterCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3fb7668c54a9f23ce5ee3862209e4db1efe781be", "committedDate": "2020-07-23T09:05:47Z", "message": "Init stat in message constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDA1Nzkz", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454405793", "createdAt": "2020-07-23T18:48:26Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0ODoyNlrOG2XQJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0ODoyNlrOG2XQJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NzI1NQ==", "bodyText": "What is the difference between SrcSessionId and ExpectedSessionId?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459657255", "createdAt": "2020-07-23T18:48:26Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -445,7 +448,8 @@ private Message createStateTransitionCancellationMessage(HelixManager manager, R\n       message.setFromState(fromState);\n       message.setToState(toState);\n       message.setTgtSessionId(sessionId);\n-      message.setSrcSessionId(manager.getSessionId());\n+      message.setSrcSessionId(managerSessionId);\n+      message.setExpectedSessionId(managerSessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDA2ODAy", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454406802", "createdAt": "2020-07-23T18:49:56Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0OTo1NlrOG2XTXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0OTo1NlrOG2XTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1ODA3Ng==", "bodyText": "getSessionIdIfLeader?  Also, why do we need this if we already have manager.getSessionId?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459658076", "createdAt": "2020-07-23T18:49:56Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +420,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code Optional<String>} session ID is present inside the {@code Optional} object\n+   * if the cluster manager is leader. Otherwise, returns an empty {@code Optional} object.\n+   */\n+  default Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDExMjg2", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454411286", "createdAt": "2020-07-23T18:56:23Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NjoyM1rOG2XhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NjoyM1rOG2XhMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTYxNg==", "bodyText": "why change this?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459661616", "createdAt": "2020-07-23T18:56:23Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/HelixProperty.java", "diffHunk": "@@ -189,7 +200,7 @@ public final String getId() {\n    * Get the backing ZNRecord\n    * @return ZNRecord object associated with this property\n    */\n-  public final ZNRecord getRecord() {\n+  public ZNRecord getRecord() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDEyNDM5", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454412439", "createdAt": "2020-07-23T18:57:57Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1Nzo1OFrOG2XkqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1Nzo1OFrOG2XkqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjUwNQ==", "bodyText": "In HandleEvent you already check if the sessionId matches the expected sessionId, why do we check again here?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459662505", "createdAt": "2020-07-23T18:57:58Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -312,6 +312,17 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n     changeContext.setType(NotificationContext.Type.CALLBACK);\n     String uid = UUID.randomUUID().toString().substring(0, 8);\n     ClusterEvent event = new ClusterEvent(_clusterName, eventType, uid);\n+\n+    Optional<String> leaderSession = manager.getSessionIdIfLead();\n+    // If session is not present, this cluster manager is not leader for the cluster.\n+    if (!leaderSession.isPresent()) {\n+      logger.warn(\"Cluster manager {} is not leader for {}. Event {} is discarded.\",\n+          manager.getInstanceName(), manager.getClusterName(), event);\n+      return;\n+    }\n+\n+    // Pipeline should be run and Zk writes should be completed by the event session.\n+    event.addAttribute(AttributeName.EVENT_SESSION.name(), leaderSession.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDE0MzQ0", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454414344", "createdAt": "2020-07-23T19:00:47Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowMDo0N1rOG2XqXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowMDo0N1rOG2XqXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk2NA==", "bodyText": "if(eventSessionId != null && manager.getSessionId.equals(eventSessionId)) {\n...\n}", "url": "https://github.com/apache/helix/pull/1066#discussion_r459663964", "createdAt": "2020-07-23T19:00:47Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -757,9 +762,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     }\n     event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n \n-    logger.info(String.format(\"START: Invoking %s controller pipeline for cluster %s event: %s  %s\",\n-        manager.getClusterName(), dataProvider.getPipelineName(), event.getEventType(),\n-        event.getEventId()));\n+    String eventSessionId = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    if (eventSessionId != null) {\n+      String managerSessionId = manager.getSessionId();\n+      if (!eventSessionId.equals(managerSessionId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDE3NjM2", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454417636", "createdAt": "2020-07-23T19:05:34Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNTozNFrOG2X0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNTozNFrOG2X0bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjU0MA==", "bodyText": "This warn message is misleading, it does not necessarily mean the current controller is not the leader of the cluster. This just means we discarded event that was generated from an old session.", "url": "https://github.com/apache/helix/pull/1066#discussion_r459666540", "createdAt": "2020-07-23T19:05:34Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -757,9 +762,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     }\n     event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n \n-    logger.info(String.format(\"START: Invoking %s controller pipeline for cluster %s event: %s  %s\",\n-        manager.getClusterName(), dataProvider.getPipelineName(), event.getEventType(),\n-        event.getEventId()));\n+    String eventSessionId = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    if (eventSessionId != null) {\n+      String managerSessionId = manager.getSessionId();\n+      if (!eventSessionId.equals(managerSessionId)) {\n+        logger.warn(\n+            \"Controller pipeline is not invoked because cluster manager {} lost leadership for \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDE5NDY0", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454419464", "createdAt": "2020-07-23T19:08:15Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowODoxNVrOG2X53w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowODoxNVrOG2X53w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NzkzNQ==", "bodyText": "Seems we have multiple places to check this event session ID matches. In pushEventToQueue, in HandleEvent(), in ForceRebalance().  Do we really need to validate this everywhere?  Can we combine them together in one place?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459667935", "createdAt": "2020-07-23T19:08:15Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1360,8 +1390,20 @@ private boolean updateControllerState(NotificationContext changeContext, PauseSi\n         String uid = UUID.randomUUID().toString().substring(0, 8);\n         ClusterEvent event = new ClusterEvent(_clusterName, ClusterEventType.Resume,\n             String.format(\"%s_%s\", uid, Pipeline.Type.DEFAULT.name()));\n+\n+        HelixManager manager = changeContext.getManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDIwMTk5", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454420199", "createdAt": "2020-07-23T19:09:21Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowOToyMVrOG2X8CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowOToyMVrOG2X8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2ODQ4OA==", "bodyText": "Also using of manager.getSessionIdIfLead here could be confusing. We used getSessionId in other places, what is the difference?  Where we should use getSessionIdIfLead and where we should use getSessionId?", "url": "https://github.com/apache/helix/pull/1066#discussion_r459668488", "createdAt": "2020-07-23T19:09:21Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1360,8 +1390,20 @@ private boolean updateControllerState(NotificationContext changeContext, PauseSi\n         String uid = UUID.randomUUID().toString().substring(0, 8);\n         ClusterEvent event = new ClusterEvent(_clusterName, ClusterEventType.Resume,\n             String.format(\"%s_%s\", uid, Pipeline.Type.DEFAULT.name()));\n+\n+        HelixManager manager = changeContext.getManager();\n+        Optional<String> leaderSession = manager.getSessionIdIfLead();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDIxMjY4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454421268", "createdAt": "2020-07-23T19:11:06Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTowNlrOG2X_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTowNlrOG2X_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTM0Mg==", "bodyText": "should we do this for all Stage? or just messageDispatchStage?  If for all stages, maybe we should put this check before where each stage was called.", "url": "https://github.com/apache/helix/pull/1066#discussion_r459669342", "createdAt": "2020-07-23T19:11:06Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageDispatchStage.java", "diffHunk": "@@ -78,7 +78,17 @@ protected void processEvent(ClusterEvent event, MessageOutput messageOutput) thr\n         batchMessage(dataAccessor.keyBuilder(), messagesToSend, resourceMap, liveInstanceMap,\n             manager.getProperties());\n \n+    String expectedSession = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    // An early check for expected leader session. If the sessions don't match, it means the\n+    // controller lost leadership, then messages should not be sent and pipeline should stop.\n+    // This avoids potential double masters for a single partition.\n+    if (expectedSession != null && !expectedSession.equals(manager.getSessionId())) {\n+      throw new StageException(\n+          \"Controller: \" + manager.getInstanceName() + \" lost leadership! Expected session: \"\n+              + expectedSession + \", actual: \" + manager.getSessionId());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDIzNjE4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454423618", "createdAt": "2020-07-23T19:14:37Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDozN1rOG2YGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDozN1rOG2YGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTE3NA==", "bodyText": "I still do not think adding this new subtype ZNRecord is an elegant solution here, specially you put it as a private class here only for message could make it look a bit hacky. Let us discuss what other options here.", "url": "https://github.com/apache/helix/pull/1066#discussion_r459671174", "createdAt": "2020-07-23T19:14:37Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -953,4 +970,35 @@ public boolean isValid() {\n     }\n     return true;\n   }\n+\n+  // A class represents session aware ZNRecord for message. The message should be written to zk\n+  // by the expected session.\n+  // TODO: remove this class once public session-aware ZNRecord is available\n+  private static class SessionAwareZNRecord extends ZNRecord implements SessionAwareZkWriteData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDI1NTQ5", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-454425549", "createdAt": "2020-07-23T19:17:32Z", "commit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNzozMlrOG2YMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNzozMlrOG2YMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MjcxNQ==", "bodyText": "Again this name is confusing. What SessionAware exactly mean here?  And \"ZkWriteData\", does that mean I should only use this type when I write a data to ZK, should we return this type in a ZK read operation?   A better name could be SessionAwareZkDataType or SessionAwareZkDataRecord, something like that.", "url": "https://github.com/apache/helix/pull/1066#discussion_r459672715", "createdAt": "2020-07-23T19:17:32Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/SessionAwareZkWriteData.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.apache.helix.zookeeper.zkclient;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * An interface representing data being written to ZK is session aware:\n+ * data is supposed to be written by expected ZK session. If ZkClient's actual session\n+ * doesn't match expected session, data is not written to ZK.\n+ */\n+public interface SessionAwareZkWriteData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb7668c54a9f23ce5ee3862209e4db1efe781be"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "320d41b3b1eb6919975a9fed62309845b064043f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/320d41b3b1eb6919975a9fed62309845b064043f", "committedDate": "2020-07-24T07:33:48Z", "message": "Address comments"}, "afterCommit": {"oid": "8c98478b53e9069fd91641ec40a05fe28d72293b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8c98478b53e9069fd91641ec40a05fe28d72293b", "committedDate": "2020-07-24T08:30:53Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ff3cceaf95fb2f088a6a7f10a355260808352c1f", "committedDate": "2020-07-24T08:39:44Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c98478b53e9069fd91641ec40a05fe28d72293b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8c98478b53e9069fd91641ec40a05fe28d72293b", "committedDate": "2020-07-24T08:30:53Z", "message": "Address comments"}, "afterCommit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ff3cceaf95fb2f088a6a7f10a355260808352c1f", "committedDate": "2020-07-24T08:39:44Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDUyMjA0", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-455052204", "createdAt": "2020-07-24T17:11:21Z", "commit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMToyMVrOG23Sfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMToyMVrOG23Sfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjE0Mg==", "bodyText": "Again, why do we need a default constructor here?", "url": "https://github.com/apache/helix/pull/1066#discussion_r460182142", "createdAt": "2020-07-24T17:11:21Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/HelixProperty.java", "diffHunk": "@@ -148,7 +154,12 @@ public String toString() {\n     }\n   }\n \n-  private Stat _stat;\n+  protected Stat _stat;\n+\n+  public HelixProperty() {\n+    _record = DEFAULT_ZNRECORD;\n+    _stat = DEFAULT_STAT;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDYxNjg1", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-455061685", "createdAt": "2020-07-24T17:26:17Z", "commit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyNjoxN1rOG23vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyNjoxN1rOG23vyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4OTY0Mg==", "bodyText": "Still, if you think this is the name we are using, let us rename isLeader() to isLead(), just make them consistent :).", "url": "https://github.com/apache/helix/pull/1066#discussion_r460189642", "createdAt": "2020-07-24T17:26:17Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -971,19 +972,24 @@ public void addPreConnectCallback(PreConnectCallback callback) {\n \n   @Override\n   public boolean isLeader() {\n+    return getSessionIdIfLead().isPresent();\n+  }\n+\n+  @Override\n+  public Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c722e921a1c5e93300f24eeed29c3813a00292", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a7c722e921a1c5e93300f24eeed29c3813a00292", "committedDate": "2020-07-24T20:20:49Z", "message": "Check sessions in handleEvent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjUzMTAz", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-461253103", "createdAt": "2020-08-04T23:59:24Z", "commit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzo1OToyNFrOG71c6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzo1OToyNFrOG71c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NDkyMw==", "bodyText": "If I understand correctly, the sessionId here can still be stale. eventually, we need sessionaware write of zkclient used by ZkHelixManager to ensure correctness, right?", "url": "https://github.com/apache/helix/pull/1066#discussion_r465394923", "createdAt": "2020-08-04T23:59:24Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -757,9 +753,20 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     }\n     event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n \n-    logger.info(String.format(\"START: Invoking %s controller pipeline for cluster %s event: %s  %s\",\n-        manager.getClusterName(), dataProvider.getPipelineName(), event.getEventType(),\n-        event.getEventId()));\n+    // If manager session changes, no need to run pipeline for the stale event.\n+    Optional<String> eventSessionId = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    String managerSessionId = manager.getSessionId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjU3MDA0", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-461257004", "createdAt": "2020-08-05T00:11:08Z", "commit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxMTowOFrOG71qUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxMTowOFrOG71qUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5ODM1NA==", "bodyText": "This part is actually debatable? updateControllerState is used to pause or restart paused pipeline. Does it care about session? Can we lose this signal due to session check? How do we reason this one?\nI am not very familiar with this logic. @jiajunwang , @lei-xia, @dasahcc", "url": "https://github.com/apache/helix/pull/1066#discussion_r465398354", "createdAt": "2020-08-05T00:11:08Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1360,6 +1369,8 @@ private boolean updateControllerState(NotificationContext changeContext, PauseSi\n         String uid = UUID.randomUUID().toString().substring(0, 8);\n         ClusterEvent event = new ClusterEvent(_clusterName, ClusterEventType.Resume,\n             String.format(\"%s_%s\", uid, Pipeline.Type.DEFAULT.name()));\n+        event.addAttribute(AttributeName.EVENT_SESSION.name(),\n+            changeContext.getManager().getSessionIdIfLead());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ab8bf9ca2984a00f0a385ff603160882f35c9ed4", "committedDate": "2020-07-29T18:39:35Z", "message": "Merge branch 'master' of github.com:apache/helix into two-masters"}, "afterCommit": {"oid": "3bd89a68a842f53d39e55d7ccef0213428e03159", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/3bd89a68a842f53d39e55d7ccef0213428e03159", "committedDate": "2020-08-05T05:04:50Z", "message": "Check sessions in handleEvent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/45ab1177113be89d8cb601cc89442d7701fab7cb", "committedDate": "2020-08-07T23:25:21Z", "message": "Make SessionAwareZNRecord public"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ba31ca53d0d557063cea39aff1489708e37674b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7ba31ca53d0d557063cea39aff1489708e37674b", "committedDate": "2020-08-05T05:23:27Z", "message": "Add TODO"}, "afterCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/45ab1177113be89d8cb601cc89442d7701fab7cb", "committedDate": "2020-08-07T23:25:21Z", "message": "Make SessionAwareZNRecord public"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjk4NjAw", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-463698600", "createdAt": "2020-08-08T00:29:07Z", "commit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDoyOTowOFrOG9r_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0Mjo1OFrOG-a1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzA2MQ==", "bodyText": "Let me open another thread for this change. I would like to hear your idea.\nHigh-levelly, the Session Id is tightly bounded with ZK. But what if we have other HelixManager that are not based on ZK? So I am thinking that maybe we should make the session a more generic concept. For the management connection that has a session concept, we implement it and return real session. For the other management connection that does not care about session, we just return a fake constant session so no one needs to try catch on this method.", "url": "https://github.com/apache/helix/pull/1066#discussion_r467337061", "createdAt": "2020-08-08T00:29:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +420,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code Optional<String>} session ID is present inside the {@code Optional} object\n+   * if the cluster manager is leader. Otherwise, returns an empty {@code Optional} object.\n+   */\n+  default Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzIwMw==", "bodyText": "How about do this?\npublic HelixProperty(SessionAwareZNRecord record, String id) {\n_record = record;\n_stat = new Stat(_record.getVersion(), _record.getCreationTime(), _record.getModifiedTime(),\n_record.getEphemeralOwner());\n}", "url": "https://github.com/apache/helix/pull/1066#discussion_r468097203", "createdAt": "2020-08-10T18:29:15Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixProperty.java", "diffHunk": "@@ -148,7 +154,12 @@ public String toString() {\n     }\n   }\n \n-  private Stat _stat;\n+  protected Stat _stat;\n+\n+  public HelixProperty() {\n+    _record = DEFAULT_ZNRECORD;\n+    _stat = DEFAULT_STAT;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjE0Mg=="}, "originalCommit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5ODIwOA==", "bodyText": "Delaying this check might cause confusing and seems not necessary to this PR. Let's don't change it in this PR even if desired.", "url": "https://github.com/apache/helix/pull/1066#discussion_r468098208", "createdAt": "2020-08-10T18:31:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -695,12 +697,6 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(),\n         _rebalancerRef.getRebalancer(manager));\n \n-    if (!manager.isLeader()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMzQ0OA==", "bodyText": "This claim is not related to this field but with the internal logic. Let's just say this is the session that in which we get the event.", "url": "https://github.com/apache/helix/pull/1066#discussion_r468103448", "createdAt": "2020-08-10T18:41:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -40,5 +40,8 @@\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n   ControllerDataProvider,\n-  STATEFUL_REBALANCER\n+  STATEFUL_REBALANCER,\n+\n+  /** Event should be processed by the expected session. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNDQ1NQ==", "bodyText": "Is this one needed?", "url": "https://github.com/apache/helix/pull/1066#discussion_r468104455", "createdAt": "2020-08-10T18:42:51Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/datamodel/SessionAwareZNRecord.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.helix.zookeeper.datamodel;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+\n+/**\n+ * A class represents a session aware ZNRecord: the ZNRecord should be written to zk by\n+ * the expected zk session. When the ZNRecord is being written to zk, if the actual\n+ * zk session id doesn't match the expected zk session id set in the {@code SessionAwareZNRecord},\n+ * writing to zk will fail. It is supposed to be used within Helix only.\n+ * <p>\n+ * If this ZNRecord is not supposed to be written only by the expected zk session,\n+ * {@link ZNRecord} is recommended to use.\n+ */\n+public class SessionAwareZNRecord extends ZNRecord {\n+  @JsonIgnore\n+  private String expectedSessionId;\n+\n+  public SessionAwareZNRecord(String id) {\n+    super(id);\n+  }\n+\n+  public SessionAwareZNRecord(ZNRecord record) {\n+    super(record);\n+  }\n+\n+  public SessionAwareZNRecord(ZNRecord record, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNDUwNQ==", "bodyText": "Is this one needed?", "url": "https://github.com/apache/helix/pull/1066#discussion_r468104505", "createdAt": "2020-08-10T18:42:58Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/datamodel/SessionAwareZNRecord.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.helix.zookeeper.datamodel;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+\n+/**\n+ * A class represents a session aware ZNRecord: the ZNRecord should be written to zk by\n+ * the expected zk session. When the ZNRecord is being written to zk, if the actual\n+ * zk session id doesn't match the expected zk session id set in the {@code SessionAwareZNRecord},\n+ * writing to zk will fail. It is supposed to be used within Helix only.\n+ * <p>\n+ * If this ZNRecord is not supposed to be written only by the expected zk session,\n+ * {@link ZNRecord} is recommended to use.\n+ */\n+public class SessionAwareZNRecord extends ZNRecord {\n+  @JsonIgnore\n+  private String expectedSessionId;\n+\n+  public SessionAwareZNRecord(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e1c9b06ebd510934d2ad4d1c8fc856d260da8c", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c3e1c9b06ebd510934d2ad4d1c8fc856d260da8c", "committedDate": "2020-08-10T21:16:29Z", "message": "Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/87409eb28dabce4ed8461d29fef60a0c11cefce7", "committedDate": "2020-09-03T18:19:47Z", "message": "Rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjU2NDY3", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-482256467", "createdAt": "2020-09-03T23:00:57Z", "commit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzowMDo1N1rOHM6HOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzowMDo1N1rOHM6HOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzA4MA==", "bodyText": "How about giving us a break by keeping the existing method with shouldThrowException default to be false?\nSo you have much less changed files.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483297080", "createdAt": "2020-09-03T23:00:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -788,14 +788,18 @@ protected void setupInstances(String clusterName, int[] instances) {\n     }\n   }\n \n-  protected void runPipeline(ClusterEvent event, Pipeline pipeline) {\n+  protected void runPipeline(ClusterEvent event, Pipeline pipeline, boolean shouldThrowException)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjY4MjIx", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-482268221", "createdAt": "2020-09-03T23:35:43Z", "commit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzozNTo0M1rOHM6upg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDozMjozOVrOHM7qHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNzE3NA==", "bodyText": "Remove it.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483307174", "createdAt": "2020-09-03T23:35:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/DummyClusterManager.java", "diffHunk": "@@ -199,7 +208,7 @@ public String getMetadataStoreConnectionString() {\n   @Override\n   public String getInstanceName() {\n     // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTU2NQ==", "bodyText": "In this case, I guess you don't need public SessionAwareZNRecord(ZNRecord record) {} it can be transformed to SessionAwareZNRecord(record, record.getId()) without much overhead.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483309565", "createdAt": "2020-09-03T23:44:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/datamodel/SessionAwareZNRecord.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.helix.zookeeper.datamodel;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+\n+/**\n+ * A class represents a session aware ZNRecord: the ZNRecord should be written to zk by\n+ * the expected zk session. When the ZNRecord is being written to zk, if the actual\n+ * zk session id doesn't match the expected zk session id set in the {@code SessionAwareZNRecord},\n+ * writing to zk will fail. It is supposed to be used within Helix only.\n+ * <p>\n+ * If this ZNRecord is not supposed to be written only by the expected zk session,\n+ * {@link ZNRecord} is recommended to use.\n+ */\n+public class SessionAwareZNRecord extends ZNRecord {\n+  @JsonIgnore\n+  private String expectedSessionId;\n+\n+  public SessionAwareZNRecord(String id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNDUwNQ=="}, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMzk2NQ==", "bodyText": "How about the sync version of setting data? Maybe also multiOps, which we may start using soon.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483313965", "createdAt": "2020-09-03T23:59:53Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1967,18 +1937,19 @@ public void asyncSetData(final String path, Object datat, final int version,\n           new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n       return;\n     }\n-    doAsyncSetData(path, data, version, startT, cb);\n+    doAsyncSetData(path, data, version, startT, cb, parseExpectedSessionId(datat));\n   }\n \n   private void doAsyncSetData(final String path, byte[] data, final int version, final long startT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNzQ2Mw==", "bodyText": "This looks ugly.\nLet's do this,\npublic Message(ZNRecord record, String id) {\n_record = new SessionAwareZNRecord(record, id);\n_stat = new Stat(_record.getVersion(), _record.getCreationTime(), _record.getModifiedTime(),\n_record.getEphemeralOwner());\n}\nThen the other constructors refer to this one.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483317463", "createdAt": "2020-09-04T00:13:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -937,6 +946,13 @@ private boolean isNullOrEmpty(String data) {\n     return data == null || data.length() == 0 || data.trim().length() == 0;\n   }\n \n+  private void initStat() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNzcyNw==", "bodyText": "This seems not being used, just deprecate it?", "url": "https://github.com/apache/helix/pull/1066#discussion_r483317727", "createdAt": "2020-09-04T00:14:25Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/Message.java", "diffHunk": "@@ -206,10 +194,27 @@ public Message(ZNRecord record, String id) {\n    * @param id unique message identifier\n    */\n   public Message(Message message, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxODUwNQ==", "bodyText": "Can we skip the dispatch but continue the pipeline for the other stages?\nI'm not sure, this is a question.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483318505", "createdAt": "2020-09-04T00:16:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageDispatchStage.java", "diffHunk": "@@ -78,7 +79,17 @@ protected void processEvent(ClusterEvent event, MessageOutput messageOutput) thr\n         batchMessage(dataAccessor.keyBuilder(), messagesToSend, resourceMap, liveInstanceMap,\n             manager.getProperties());\n \n+    // An early check for expected leader session. If the sessions don't match, it means the\n+    // controller's session changes, then messages should not be sent and pipeline should stop.\n+    Optional<String> expectedSession = event.getAttribute(AttributeName.EVENT_SESSION.name());\n+    if (!expectedSession.isPresent() || !expectedSession.get().equals(manager.getSessionId())) {\n+      throw new StageException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMDQyNg==", "bodyText": "This is right, but the original logic was, if the manager is not leader, do not run the pipeline. Where is that logic going?", "url": "https://github.com/apache/helix/pull/1066#discussion_r483320426", "createdAt": "2020-09-04T00:24:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -703,9 +705,15 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n     event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(),\n         _rebalancerRef.getRebalancer(manager));\n \n-    if (!manager.isLeader()) {\n-      logger.error(\"Cluster manager: \" + manager.getInstanceName() + \" is not leader for \" + manager\n-          .getClusterName() + \". Pipeline will not be invoked\");\n+    // If manager session changes, no need to run pipeline for the stale event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87409eb28dabce4ed8461d29fef60a0c11cefce7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMjE5NA==", "bodyText": "I know there are multiple options. But how about the one that I mentioned above?", "url": "https://github.com/apache/helix/pull/1066#discussion_r483322194", "createdAt": "2020-09-04T00:31:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixProperty.java", "diffHunk": "@@ -148,7 +154,12 @@ public String toString() {\n     }\n   }\n \n-  private Stat _stat;\n+  protected Stat _stat;\n+\n+  public HelixProperty() {\n+    _record = DEFAULT_ZNRECORD;\n+    _stat = DEFAULT_STAT;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjE0Mg=="}, "originalCommit": {"oid": "ff3cceaf95fb2f088a6a7f10a355260808352c1f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMjM5Ng==", "bodyText": "Optional is not looking good here.\nIt might be overkill, but how about we define a \"private\" SessionAwareHelixManager interface? Which extends HelixManager but add getSessionIdIfLead() method.", "url": "https://github.com/apache/helix/pull/1066#discussion_r483322396", "createdAt": "2020-09-04T00:32:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +420,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code Optional<String>} session ID is present inside the {@code Optional} object\n+   * if the cluster manager is leader. Otherwise, returns an empty {@code Optional} object.\n+   */\n+  default Optional<String> getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzA2MQ=="}, "originalCommit": {"oid": "45ab1177113be89d8cb601cc89442d7701fab7cb"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a605e34892c21713a00a240d699fb35f86123e08", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a605e34892c21713a00a240d699fb35f86123e08", "committedDate": "2020-10-02T10:39:20Z", "message": "Address comments"}, "afterCommit": {"oid": "642043604afd044abbe243ba7289d504544d3da6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/642043604afd044abbe243ba7289d504544d3da6", "committedDate": "2020-10-02T16:50:37Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDg5ODQ5", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-501489849", "createdAt": "2020-10-02T23:09:24Z", "commit": {"oid": "642043604afd044abbe243ba7289d504544d3da6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzowOToyNFrOHb9sLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzowOToyNFrOHb9sLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NDMzNA==", "bodyText": "@pkuwm , here is the thing. If say when pause signal znode is added, the under old session S0, the event is put into zkclient queue. Then a new session establish for S1, would the controller under S1 for this logic, would not pause of the old event.\nThe question is that can you double check if the new session, controller would get another event of pausing due to controller cache refresh? This is to make sure pause will not be lost immediately followed by a controller change.", "url": "https://github.com/apache/helix/pull/1066#discussion_r499084334", "createdAt": "2020-10-02T23:09:24Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1360,6 +1369,8 @@ private boolean updateControllerState(NotificationContext changeContext, PauseSi\n         String uid = UUID.randomUUID().toString().substring(0, 8);\n         ClusterEvent event = new ClusterEvent(_clusterName, ClusterEventType.Resume,\n             String.format(\"%s_%s\", uid, Pipeline.Type.DEFAULT.name()));\n+        event.addAttribute(AttributeName.EVENT_SESSION.name(),\n+            changeContext.getManager().getSessionIdIfLead());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5ODM1NA=="}, "originalCommit": {"oid": "ab8bf9ca2984a00f0a385ff603160882f35c9ed4"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "642043604afd044abbe243ba7289d504544d3da6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/642043604afd044abbe243ba7289d504544d3da6", "committedDate": "2020-10-02T16:50:37Z", "message": "Address comments"}, "afterCommit": {"oid": "aa092e706d53fce5f848561be49a59651dc2f947", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/aa092e706d53fce5f848561be49a59651dc2f947", "committedDate": "2020-10-04T09:50:41Z", "message": "Rebase and fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa092e706d53fce5f848561be49a59651dc2f947", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/aa092e706d53fce5f848561be49a59651dc2f947", "committedDate": "2020-10-04T09:50:41Z", "message": "Rebase and fix tests"}, "afterCommit": {"oid": "4501c3fde5dd3e0fe274db83f070311ef142a450", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4501c3fde5dd3e0fe274db83f070311ef142a450", "committedDate": "2020-10-04T09:52:50Z", "message": "Rebase and fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4501c3fde5dd3e0fe274db83f070311ef142a450", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4501c3fde5dd3e0fe274db83f070311ef142a450", "committedDate": "2020-10-04T09:52:50Z", "message": "Rebase and fix tests"}, "afterCommit": {"oid": "f3ac41154bc4524c988771b7111d334c15174c36", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f3ac41154bc4524c988771b7111d334c15174c36", "committedDate": "2020-10-04T09:58:39Z", "message": "Rebase and fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3ac41154bc4524c988771b7111d334c15174c36", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f3ac41154bc4524c988771b7111d334c15174c36", "committedDate": "2020-10-04T09:58:39Z", "message": "Rebase and fix tests"}, "afterCommit": {"oid": "ef5f5fb9888fe37c761c48953c635c7a1ea80a1a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ef5f5fb9888fe37c761c48953c635c7a1ea80a1a", "committedDate": "2020-10-04T22:24:14Z", "message": "Rebase and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8cc5bca6125f7c80e1edc6d0a7290d4e8958cc8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a8cc5bca6125f7c80e1edc6d0a7290d4e8958cc8", "committedDate": "2020-10-04T22:50:50Z", "message": "Rebase and fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef5f5fb9888fe37c761c48953c635c7a1ea80a1a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ef5f5fb9888fe37c761c48953c635c7a1ea80a1a", "committedDate": "2020-10-04T22:24:14Z", "message": "Rebase and fix tests"}, "afterCommit": {"oid": "a8cc5bca6125f7c80e1edc6d0a7290d4e8958cc8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a8cc5bca6125f7c80e1edc6d0a7290d4e8958cc8", "committedDate": "2020-10-04T22:50:50Z", "message": "Rebase and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315ea159a9f6d6ccaaf5315e9bb75980238f17cb", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/315ea159a9f6d6ccaaf5315e9bb75980238f17cb", "committedDate": "2020-10-04T22:57:46Z", "message": "Merge branch 'master' of github.com:apache/helix into two-masters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzc1NTg2", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-502375586", "createdAt": "2020-10-05T19:58:01Z", "commit": {"oid": "315ea159a9f6d6ccaaf5315e9bb75980238f17cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1ODowMlrOHcrqug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1ODowMlrOHcrqug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzYyNg==", "bodyText": "This means the input record will directly be passed to the field. It breaks the original assumption.\nHow about doing this,\n_record = record instanceof SessionAwareZNRecord? new SessionAwareZNRecord(record, id) : new ZNRecord(record, id);\n_stat = new Stat(_record.getVersion(), _record.getCreationTime(), _record.getModifiedTime(),\n    _record.getEphemeralOwner());", "url": "https://github.com/apache/helix/pull/1066#discussion_r499837626", "createdAt": "2020-10-05T19:58:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixProperty.java", "diffHunk": "@@ -177,6 +178,15 @@ public HelixProperty(ZNRecord record, String id) {\n         _record.getEphemeralOwner());\n   }\n \n+  /*\n+   * Only used by Message which needs to be session-aware.\n+   */\n+  protected HelixProperty(SessionAwareZNRecord record, String id) {\n+    _record = record;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315ea159a9f6d6ccaaf5315e9bb75980238f17cb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDYwNzY4", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-502460768", "createdAt": "2020-10-05T22:19:58Z", "commit": {"oid": "315ea159a9f6d6ccaaf5315e9bb75980238f17cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxOTo1OFrOHcvsgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxOTo1OFrOHcvsgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMzYxNg==", "bodyText": "If you think my previous suggestion about the SessionAwareHelixManager interface is too much, then please still keep the Optional here.", "url": "https://github.com/apache/helix/pull/1066#discussion_r499903616", "createdAt": "2020-10-05T22:19:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManager.java", "diffHunk": "@@ -419,6 +419,17 @@ void addExternalViewChangeListener(org.apache.helix.ExternalViewChangeListener l\n    */\n   Long getSessionStartTime();\n \n+  /**\n+   * Checks whether the cluster manager is leader and returns the session ID associated to the\n+   * connection of cluster data store, if and only if it is leader.\n+   *\n+   * @return {@code String} session ID is a valid string if the cluster manager is leader.\n+   * Otherwise, returns null.\n+   */\n+  default String getSessionIdIfLead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315ea159a9f6d6ccaaf5315e9bb75980238f17cb"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTAzNzIx", "url": "https://github.com/apache/helix/pull/1066#pullrequestreview-502503721", "createdAt": "2020-10-06T00:15:46Z", "commit": {"oid": "27ebd926a1c8ae5715db65670e9963b8e6877693"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bd2a03965d4b1bd5fc1e73bb9094e94f53c04f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c5bd2a03965d4b1bd5fc1e73bb9094e94f53c04f", "committedDate": "2020-10-06T08:00:17Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27ebd926a1c8ae5715db65670e9963b8e6877693", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/27ebd926a1c8ae5715db65670e9963b8e6877693", "committedDate": "2020-10-06T00:03:39Z", "message": "Address comments"}, "afterCommit": {"oid": "c5bd2a03965d4b1bd5fc1e73bb9094e94f53c04f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c5bd2a03965d4b1bd5fc1e73bb9094e94f53c04f", "committedDate": "2020-10-06T08:00:17Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4456, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}