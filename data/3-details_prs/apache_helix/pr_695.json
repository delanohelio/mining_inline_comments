{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTY2MjQx", "number": 695, "title": "Modify participant manager to add cluster auto registration logic", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n(#694 )\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nHelix is adding a new feature in which a participant may auto register itself to the cluster after connects. Different from current auto join function, auto registration will not only set up all the config information for the instance, but also retrieve the fault domain information for the participant, and register all this information to the cluster. This PR changes the logic in ParticipantManager by adding the auto registration logic. Two flags are used to denote auto join and auto registration. AutoJoin flag must be true if we would like to allow autoRegstration.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,221.481 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  53:45 min\n[INFO] Finished at: 2020-01-22T09:57:03-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-22T17:07:25Z", "url": "https://github.com/apache/helix/pull/695", "merged": true, "mergeCommit": {"oid": "4a82b96c0864dfe8ad34c01c0628113652e9c592"}, "closed": true, "closedAt": "2020-02-07T23:41:37Z", "author": {"login": "zhangmeng916"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb84_VlgH2gAyMzY1OTY2MjQxOmI1ODgzNzVlYWU5YzM3ZDIxNjM4ZDA2OWYyYjM0MWU4MWViM2Y3ZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCIF9kgH2gAyMzY1OTY2MjQxOjljMzBlMzFmNzM1YThiNzNjN2ViZTk4MDc4MThkMTMwNDg3YzAwMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/b588375eae9c37d21638d069f2b341e81eb3f7d9", "committedDate": "2020-01-22T17:14:15Z", "message": "Modify participant manager to add cluster auto registration logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf127dcbd93502ef0d1526c4f49da31b705b7ce1", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/cf127dcbd93502ef0d1526c4f49da31b705b7ce1", "committedDate": "2020-01-22T17:01:06Z", "message": "Modify participant manager to add cluster auto registration logic"}, "afterCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/b588375eae9c37d21638d069f2b341e81eb3f7d9", "committedDate": "2020-01-22T17:14:15Z", "message": "Modify participant manager to add cluster auto registration logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDc0MTQy", "url": "https://github.com/apache/helix/pull/695#pullrequestreview-349074142", "createdAt": "2020-01-28T00:50:50Z", "commit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo1MDo1MVrOFiWYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo1MjoxNlrOFiWZ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjY2MQ==", "bodyText": "Can you add a log for this exception?", "url": "https://github.com/apache/helix/pull/695#discussion_r371562661", "createdAt": "2020-01-28T00:50:51Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzAwNw==", "bodyText": "Question: Why do we need to add instance config here?", "url": "https://github.com/apache/helix/pull/695#discussion_r371563007", "createdAt": "2020-01-28T00:52:16Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTI4MDM1", "url": "https://github.com/apache/helix/pull/695#pullrequestreview-350528035", "createdAt": "2020-01-30T01:04:25Z", "commit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMTowNDoyNVrOFjcpSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMTowNTozNlrOFjcqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxMzgwMA==", "bodyText": "I would suggest to refactor code to be:\nString domainInfo = null;\nif (autoRegistration) {\n..... do the logic as following\n}\naddInstanceConfig(domainInfo);\nPassing null explicit looks awkward to me.", "url": "https://github.com/apache/helix/pull/695#discussion_r372713800", "createdAt": "2020-01-30T01:04:25Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNDA5NA==", "bodyText": "Any reason to differentiate these exceptions? They looked like instantiation failure.", "url": "https://github.com/apache/helix/pull/695#discussion_r372714094", "createdAt": "2020-01-30T01:05:36Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {\n+            // fetch cloud instance information for the instance\n+            String cloudInstanceInformationProcessorClassName = CLOUD_PROCESSOR_PATH_PREFIX\n+                + _helixManagerProperty.getHelixCloudProperty().getCloudProvider().toLowerCase()\n+                + \".\" + cloudInstanceInformationProcessorName;\n+            Class processorClass = Class.forName(cloudInstanceInformationProcessorClassName);\n+            Constructor constructor = processorClass.getConstructor(HelixCloudProperty.class);\n+            CloudInstanceInformationProcessor processor =\n+                (CloudInstanceInformationProcessor) constructor\n+                    .newInstance(_helixManagerProperty.getHelixCloudProperty());\n+            List<String> responses = processor.fetchCloudInstanceInformation();\n+\n+            // parse cloud instance information for the participant\n+            CloudInstanceInformation cloudInstanceInformation =\n+                processor.parseCloudInstanceInformation(responses);\n+            String domain = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name());\n+            String cloudIdInRemote = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.INSTANCE_SET_NAME.name());\n+            String cloudIdInConfig = _configAccessor.getCloudConfig(_clusterName).getCloudID();\n+\n+            // validate that the instance is auto registering to the correct cluster\n+            if (!cloudIdInRemote.equals(cloudIdInConfig)) {\n+              throw new IllegalArgumentException(String.format(\n+                  \"cloudId in config: %s is not consistent with cloudId from remote: %s. The instance is auto registering to a wrong cluster.\",\n+                  cloudIdInConfig, cloudIdInRemote));\n+            }\n+            addInstanceConfig(domain);\n+          } catch (ClassNotFoundException ex) {\n+            throw new HelixException(\n+                \"Passed cloud instance information processor class is not found: \"\n+                    + cloudInstanceInformationProcessorName, ex);\n+          } catch (NoSuchMethodException ex) {\n+            throw new HelixException(\"Failed to get the constructor for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n+            throw new HelixException(\"Failed to create a new instance for the class: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTc0NjY0", "url": "https://github.com/apache/helix/pull/695#pullrequestreview-351174664", "createdAt": "2020-01-30T22:04:53Z", "commit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowNDo1NFrOFj7dXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoxNzo1M1rOFj7ylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODY1Mw==", "bodyText": "nit, final?", "url": "https://github.com/apache/helix/pull/695#discussion_r373218653", "createdAt": "2020-01-30T22:04:54Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -61,6 +67,7 @@\n  */\n public class ParticipantManager {\n   private static Logger LOG = LoggerFactory.getLogger(ParticipantManager.class);\n+  private static String CLOUD_PROCESSOR_PATH_PREFIX = \"org.apache.helix.cloud.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxOTI0NA==", "bodyText": "So cloud enabled == auto join?\nIf so, let's document it more clear.", "url": "https://github.com/apache/helix/pull/695#discussion_r373219244", "createdAt": "2020-01-30T22:06:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMDA3Mw==", "bodyText": "I think you can have more flat condition. elseif (..) will also work.", "url": "https://github.com/apache/helix/pull/695#discussion_r373220073", "createdAt": "2020-01-30T22:08:12Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMTkwOQ==", "bodyText": "This is a long and standalone logic just for cloud, I guess. Is it possible to hide them into the processor? I remember that we discussed if we can have a factory or builder for the property. It also applied to the processor. If we have one, we can just put all these logic there. And whoever reading participant manager code won't be distracted from the participant logic.", "url": "https://github.com/apache/helix/pull/695#discussion_r373221909", "createdAt": "2020-01-30T22:12:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNDA4NQ==", "bodyText": "I feel there has been such a logic. If not, it should be in util anyway.", "url": "https://github.com/apache/helix/pull/695#discussion_r373224085", "createdAt": "2020-01-30T22:17:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {\n+            // fetch cloud instance information for the instance\n+            String cloudInstanceInformationProcessorClassName = CLOUD_PROCESSOR_PATH_PREFIX\n+                + _helixManagerProperty.getHelixCloudProperty().getCloudProvider().toLowerCase()\n+                + \".\" + cloudInstanceInformationProcessorName;\n+            Class processorClass = Class.forName(cloudInstanceInformationProcessorClassName);\n+            Constructor constructor = processorClass.getConstructor(HelixCloudProperty.class);\n+            CloudInstanceInformationProcessor processor =\n+                (CloudInstanceInformationProcessor) constructor\n+                    .newInstance(_helixManagerProperty.getHelixCloudProperty());\n+            List<String> responses = processor.fetchCloudInstanceInformation();\n+\n+            // parse cloud instance information for the participant\n+            CloudInstanceInformation cloudInstanceInformation =\n+                processor.parseCloudInstanceInformation(responses);\n+            String domain = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name());\n+            String cloudIdInRemote = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.INSTANCE_SET_NAME.name());\n+            String cloudIdInConfig = _configAccessor.getCloudConfig(_clusterName).getCloudID();\n+\n+            // validate that the instance is auto registering to the correct cluster\n+            if (!cloudIdInRemote.equals(cloudIdInConfig)) {\n+              throw new IllegalArgumentException(String.format(\n+                  \"cloudId in config: %s is not consistent with cloudId from remote: %s. The instance is auto registering to a wrong cluster.\",\n+                  cloudIdInConfig, cloudIdInRemote));\n+            }\n+            addInstanceConfig(domain);\n+          } catch (ClassNotFoundException ex) {\n+            throw new HelixException(\n+                \"Passed cloud instance information processor class is not found: \"\n+                    + cloudInstanceInformationProcessorName, ex);\n+          } catch (NoSuchMethodException ex) {\n+            throw new HelixException(\"Failed to get the constructor for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n+            throw new HelixException(\"Failed to create a new instance for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          }\n         }\n-        instanceConfig.setHostName(hostName);\n-        instanceConfig.setPort(port);\n-        instanceConfig.setInstanceEnabled(true);\n-        _helixAdmin.addInstance(_clusterName, instanceConfig);\n       }\n     }\n   }\n \n+  private void addInstanceConfig(String domainInfo) {\n+    InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n+    String hostName = _instanceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f003d040f68740ca0ce445bf6305e609ac4f58c8", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f003d040f68740ca0ce445bf6305e609ac4f58c8", "committedDate": "2020-01-31T17:42:41Z", "message": "fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a6c02e3b05997562051e800a211c7592e96179", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/35a6c02e3b05997562051e800a211c7592e96179", "committedDate": "2020-02-06T17:11:10Z", "message": "comment out some logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NzM3MjU2", "url": "https://github.com/apache/helix/pull/695#pullrequestreview-354737256", "createdAt": "2020-02-06T20:07:34Z", "commit": {"oid": "35a6c02e3b05997562051e800a211c7592e96179"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35a6c02e3b05997562051e800a211c7592e96179", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/35a6c02e3b05997562051e800a211c7592e96179", "committedDate": "2020-02-06T17:11:10Z", "message": "comment out some logic"}, "afterCommit": {"oid": "67e455b80003e1076df500b5f4658b03ccb23939", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/67e455b80003e1076df500b5f4658b03ccb23939", "committedDate": "2020-02-07T23:32:40Z", "message": "comment out some logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67e455b80003e1076df500b5f4658b03ccb23939", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/67e455b80003e1076df500b5f4658b03ccb23939", "committedDate": "2020-02-07T23:32:40Z", "message": "comment out some logic"}, "afterCommit": {"oid": "35a6c02e3b05997562051e800a211c7592e96179", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/35a6c02e3b05997562051e800a211c7592e96179", "committedDate": "2020-02-06T17:11:10Z", "message": "comment out some logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34e0ed812d24e2a29f76661a51ce77a09a55eb40", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/34e0ed812d24e2a29f76661a51ce77a09a55eb40", "committedDate": "2020-02-07T23:38:48Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c30e31f735a8b73c7ebe9807818d130487c0013", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/9c30e31f735a8b73c7ebe9807818d130487c0013", "committedDate": "2020-02-07T23:39:41Z", "message": "fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4877, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}