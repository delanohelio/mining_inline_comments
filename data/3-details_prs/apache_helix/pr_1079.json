{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDk3NTI2", "number": 1079, "title": "Add delete for PropertyStore in Helix REST", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1048\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis commit adds the delete endpoint for PropertyStore in Helix REST.\nTests\n\n The following tests are written for this issue:\n\ntestDeletePropertyStore\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 162, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 38.947 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 162, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  45.025 s\n[INFO] Finished at: 2020-06-09T15:21:42-07:00\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-09T22:26:00Z", "url": "https://github.com/apache/helix/pull/1079", "merged": true, "mergeCommit": {"oid": "1c15d04efa65955e2b273515a655b77b79478790"}, "closed": true, "closedAt": "2020-06-09T23:04:20Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpssBYgH2gAyNDMyMDk3NTI2Ojc2Y2IxNmJmN2U1MWZiMzJlMGNhOWQwMDU4MGM4Zjk4NTBhNGYyOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcptOdfAH2gAyNDMyMDk3NTI2OjM4M2MyNDBhNjI5MDlkYTVhY2NjZDE5YWM5OTNjMTkyMTAyYjdkZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "committedDate": "2020-06-09T22:20:53Z", "message": "Add delete for PropertyStore in Helix REST\n\nThis commit adds the delete endpoint for PropertyStore in Helix REST."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTg4OTcx", "url": "https://github.com/apache/helix/pull/1079#pullrequestreview-427588971", "createdAt": "2020-06-09T22:28:10Z", "commit": {"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyODoxMFrOGhelRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjozMjozMVrOGherPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzI1NQ==", "bodyText": "Nit, long line? Maybe split it into two strings concatenation?", "url": "https://github.com/apache/helix/pull/1079#discussion_r437757255", "createdAt": "2020-06-09T22:28:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODEyNQ==", "bodyText": "Nit, ZkBaseDataAccessor -> BaseDataAccessor?", "url": "https://github.com/apache/helix/pull/1079#discussion_r437758125", "createdAt": "2020-06-09T22:30:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n+    }\n+    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n+    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODc4Mw==", "bodyText": "Nit, if I were a user, I would expect to see a clear response indicating the request is successful:\n{\n  \"success\": true\n}\n\nI think this is included in helix rest improvement plan.", "url": "https://github.com/apache/helix/pull/1079#discussion_r437758783", "createdAt": "2020-06-09T22:32:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n+    }\n+    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n+    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n+    if (!propertyStoreDataAccessor.remove(recordPath, AccessOption.PERSISTENT)) {\n+      return serverError(\"Failed to delete PropertyStore record in path: \" + path);\n+    }\n+    return OK();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "383c240a62909da5acccd19ac993c192102b7df7", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/383c240a62909da5acccd19ac993c192102b7df7", "committedDate": "2020-06-09T22:58:30Z", "message": "Use BaseDataAccessor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4476, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}