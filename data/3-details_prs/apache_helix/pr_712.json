{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODM0Mzkw", "number": 712, "title": "Upgrade ZkTestBase with multi-ZK support in helix-core", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #711\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nPrior to instrumenting Helix APIs and components so that they would be aware of multiple ZKs for horizontal scalability, we need to have a way to run all integration tests involving ZooKeeper in different environments: one with a single ZK and another with multiple ZKs.\nChangelist:\n\nImplement the logic in ZkTestBase so that in conjunction with maven-surefire-plugin configs, there will be two executions of the test suite\nRemove system property variable from default-test since it's unnecessary\n\nTests\n\n The following tests are written for this issue:\n\nManual testing by way of mvn test:\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\nStart zookeeper at localhost:2183 in thread main\nStart zookeeper at localhost:2184 in thread main\nStart zookeeper at localhost:2185 in thread main\nSpins up 3 ZKs as expected.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-core:\n1st run:\n\nShut down zookeeper at port 2183 in thread main\n[INFO] Tests run: 900, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,378.408 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 900, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n\n2nd run (multi-zk);\n\nShut down zookeeper at port 2183 in thread main\nShut down zookeeper at port 2183 in thread main\nShut down zookeeper at port 2184 in thread main\nShut down zookeeper at port 2185 in thread main\n[INFO] Tests run: 900, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,294.053 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 900, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:51 h\n[INFO] Finished at: 2020-01-31T19:23:32-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-01T01:27:14Z", "url": "https://github.com/apache/helix/pull/712", "merged": true, "mergeCommit": {"oid": "76d6260dd2eea03b1dab8b4a1f8a1a8b4f5d3255"}, "closed": true, "closedAt": "2020-02-04T20:10:52Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_5YEPAH2gAyMzY5ODM0MzkwOjNiNDY3N2Y4ZjRmODY2YzM1OWZmN2Q4Zjk3ZmUxNWIxNTNmNmNkMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBHBXZAH2gAyMzY5ODM0MzkwOjViZjIwMjkwMDVkMDQ1MDE2N2FkODk3MzljMGRkNTg4NDFlNGI3MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b4677f8f4f866c359ff7d8f97fe15b153f6cd36", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/3b4677f8f4f866c359ff7d8f97fe15b153f6cd36", "committedDate": "2020-02-01T01:23:02Z", "message": "Upgrade ZkTestBase with multi-ZK support\n\nPrior to instrumenting Helix APIs and components so that they would be aware of multiple ZKs for horizontal scalability, we need to have a way to run all integration tests involving ZooKeeper in different environments: one with a single ZK and another with multiple ZKs.\nChangelist:\n1. Implement the logic in ZkTestBase so that in conjunction with maven-surefire-plugin configs, there will be two executions of the test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/b322b1bff7dff0f49b020df63169d5cab893b874", "committedDate": "2020-02-01T01:28:14Z", "message": "Change print statement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODU2NzU4", "url": "https://github.com/apache/helix/pull/712#pullrequestreview-351856758", "createdAt": "2020-02-01T01:48:44Z", "commit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo0ODo0NFrOFkb0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo1MDoyMVrOFkb01w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODgzNQ==", "bodyText": "If someone expands the test environments and adds another environment, based on pom.xml content alone he/she might add <multiZk>false</multiZk>, then the if statement in ZkTestBase.java will be incorrectly triggered. Using boolean for the if statement seems better to me.", "url": "https://github.com/apache/helix/pull/712#discussion_r373748835", "createdAt": "2020-02-01T01:48:44Z", "author": {"login": "NealSun96"}, "path": "pom.xml", "diffHunk": "@@ -633,11 +633,6 @@ under the License.\n               </goals>\n               <id>default-test</id>\n               <phase>test</phase>\n-              <configuration>\n-                <systemPropertyVariables>\n-                  <multiZk>false</multiZk>\n-                </systemPropertyVariables>\n-              </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODk1MQ==", "bodyText": "Nit: could use values() to close without get() and checking every time.", "url": "https://github.com/apache/helix/pull/712#discussion_r373748951", "createdAt": "2020-02-01T01:50:21Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -154,8 +215,29 @@ public void afterSuite() throws IOException {\n       }\n     }\n \n+    // Close ZK-related resources\n+    _gSetupTool.close();\n+    _baseAccessor.close();\n     _gZkClient.close();\n     TestHelper.stopZkServer(_zkServer);\n+\n+    // If there are multiple ZooKeepers, close them all\n+    if (System.getProperty(MULTI_ZK_PROPERTY_KEY) != null) {\n+      for (int i = 0; i < _numZk; i++) {\n+        if (_baseDataAccessorMap != null && _baseDataAccessorMap.containsKey(i)) {\n+          _baseDataAccessorMap.get(i).close();\n+        }\n+        if (_clusterSetupMap != null && _clusterSetupMap.containsKey(i)) {\n+          _clusterSetupMap.get(i).close();\n+        }\n+        if (_helixZkClientMap != null && _helixZkClientMap.containsKey(i)) {\n+          _helixZkClientMap.get(i).close();\n+        }\n+        if (_zkServerMap != null && _zkServerMap.containsKey(i)) {\n+          TestHelper.stopZkServer(_zkServerMap.get(i));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f62c0edf335c2b4e685d3ade046039e07dca901", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/8f62c0edf335c2b4e685d3ade046039e07dca901", "committedDate": "2020-02-01T03:58:29Z", "message": "Check whether its true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "committedDate": "2020-02-01T07:34:51Z", "message": "better validation of configs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjAwOTE1", "url": "https://github.com/apache/helix/pull/712#pullrequestreview-353200915", "createdAt": "2020-02-04T18:26:05Z", "commit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyNjowNVrOFleqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyODozMFrOFlevVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDAwMA==", "bodyText": "Instead of multiple lists, can we have a class like a tuple in Python to hold the related objects? That would be much easier to use comparing if I need to remember the index in every test case.", "url": "https://github.com/apache/helix/pull/712#discussion_r374844000", "createdAt": "2020-02-04T18:26:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";\n+  private static final String ZK_PREFIX = \"localhost:\";\n+  private static final int ZK_START_PORT = 2183;\n   protected static final String CLUSTER_PREFIX = \"CLUSTER\";\n   protected static final String CONTROLLER_CLUSTER_PREFIX = \"CONTROLLER_CLUSTER\";\n   protected final String CONTROLLER_PREFIX = \"controller\";\n   protected final String PARTICIPANT_PREFIX = \"localhost\";\n   private static final long MANUAL_GC_PAUSE = 4000L;\n \n+  /*\n+   * Multiple ZK references\n+   */\n+  protected int _numZk = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDE4NQ==", "bodyText": "nit: ZK_ADD = ZK_PREFIX + ZK_START_PORT ?", "url": "https://github.com/apache/helix/pull/712#discussion_r374844185", "createdAt": "2020-02-04T18:26:28Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NTI2OQ==", "bodyText": "These are duplicate code. Can we just repeatedly call startZooKeeper() and return the tuple that I mentioned above for recording?", "url": "https://github.com/apache/helix/pull/712#discussion_r374845269", "createdAt": "2020-02-04T18:28:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -123,8 +136,45 @@ public void beforeSuite() throws Exception {\n     System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n     System.setProperty(SystemPropertyKeys.CONTROLLER_MESSAGE_PURGE_DELAY, \"3000\");\n \n+    // Start an in-memory ZooKeeper\n     _zkServer = TestHelper.startZkServer(ZK_ADDR);\n     AssertJUnit.assertNotNull(_zkServer);\n+    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+    clientConfig.setZkSerializer(new ZNRecordSerializer());\n+    _gZkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR), clientConfig);\n+    _gSetupTool = new ClusterSetup(_gZkClient);\n+    _baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    _numZk++; // Now we have 1 ZK\n+\n+    // If multi-ZooKeeper is enabled, start more ZKs\n+    String multiZkConfig = System.getProperty(MULTI_ZK_PROPERTY_KEY);\n+    if (multiZkConfig != null && multiZkConfig.equalsIgnoreCase(Boolean.TRUE.toString())) {\n+      String numZkFromConfig = System.getProperty(NUM_ZK_PROPERTY_KEY);\n+      if (numZkFromConfig != null) {\n+        try {\n+          int numZkFromConfigInt = Integer.parseInt(numZkFromConfig);\n+          // Initialize maps to track multiple ZK servers\n+          // Initialize maps to track multiple ZK servers\n+          _zkServerMap = new HashMap<>();\n+          _helixZkClientMap = new HashMap<>();\n+          _clusterSetupMap = new HashMap<>();\n+          _baseDataAccessorMap = new HashMap<>();\n+          _zkServerMap.put(0, _zkServer);\n+          _helixZkClientMap.put(0, _gZkClient);\n+          _clusterSetupMap.put(0, _gSetupTool);\n+          _baseDataAccessorMap.put(0, _baseAccessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1552f440ff13a2726bf66ffabf5068a9d1c81c8b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/1552f440ff13a2726bf66ffabf5068a9d1c81c8b", "committedDate": "2020-02-04T19:19:02Z", "message": "Remove duplicate code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjM4MzQ4", "url": "https://github.com/apache/helix/pull/712#pullrequestreview-353238348", "createdAt": "2020-02-04T19:23:38Z", "commit": {"oid": "1552f440ff13a2726bf66ffabf5068a9d1c81c8b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bf2029005d0450167ad89739c0dd58841e4b721", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/5bf2029005d0450167ad89739c0dd58841e4b721", "committedDate": "2020-02-04T19:50:50Z", "message": "fix bugs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4900, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}