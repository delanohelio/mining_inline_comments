{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTUzNDU2", "number": 1383, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyMDo0NlrOEl6MMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo0OFrOEoYflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg2MTYwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyMDo0NlrOHVpCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMzowMlrOHZU4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDQxNg==", "bodyText": "In case of an exception, the time will be also counted in the request duration, right? Is this what in the design? I think this will make the duration statistic less accurate.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492454416", "createdAt": "2020-09-22T03:20:46Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODUyNg==", "bodyText": "It won't make the duration statistic too bad, compared with network IO. CPU is really fast to process the exception. Actually we still need to use a try... finally block - same as this try.. with..resource.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318526", "createdAt": "2020-09-29T01:13:02Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDQxNg=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg2NDcwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyMjo0N1rOHVpDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjowMToyNVrOHZV4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDg0Nw==", "bodyText": "nit: variable name to be consistent with metric name to avoid misuse.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492454847", "createdAt": "2020-09-22T03:22:47Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDQ1MQ==", "bodyText": "It is lazily initialized, let's don't call it without a real error.\nI would prefer just coding like the following, so you don't need the extra local fields def.\nmetrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL).inc();", "url": "https://github.com/apache/helix/pull/1383#discussion_r495190451", "createdAt": "2020-09-25T19:30:20Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDg0Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNDg5MQ==", "bodyText": "Resolved.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496334891", "createdAt": "2020-09-29T02:01:25Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NDg0Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg2ODM4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyNTozMFrOHVpF1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNjoxNFrOHZVQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTM4MQ==", "bodyText": "More specifically, this is \"health\" check. Maybe you can make it more accurate in case you have other types of instance check metrics later and need to distinguish between them.\nSame for partition health check.", "url": "https://github.com/apache/helix/pull/1383#discussion_r492455381", "createdAt": "2020-09-22T03:25:30Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc5MQ==", "bodyText": "This naming is based on the method/function. It is a generic interface api getInstanceStoppableCheck, so no matter it is a health check or else, as long as it calls this api, we record it. What do you think?", "url": "https://github.com/apache/helix/pull/1383#discussion_r496324791", "createdAt": "2020-09-29T01:36:14Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTM4MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg3MTkyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzoyODowN1rOHVpH3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMTowN1rOHZU2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwMw==", "bodyText": "Shall we mark this as deprecated?", "url": "https://github.com/apache/helix/pull/1383#discussion_r492455903", "createdAt": "2020-09-22T03:28:07Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;\n   protected CustomRestClient _restClient;\n \n   public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODA0Mg==", "bodyText": "I was thinking other callers may use it. Within helix, only a mock class calls it. So I just changed it and deprecate this, assuming this constructor is supposed to be used within helix rest.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318042", "createdAt": "2020-09-29T01:11:07Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;\n   protected CustomRestClient _restClient;\n \n   public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwMw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTMzNzgzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToyMDo1MFrOHYPxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1ODoyMFrOHZln0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw==", "bodyText": "How do we determine the metric type (gauge or counter) later when we want to expose the MBean attribute to the monitoring system?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495186197", "createdAt": "2020-09-25T19:20:50Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDc3NQ==", "bodyText": "In the object name, there is a type property for us to know that: type=counters or type=gauges. Then we'll use the type property.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496314775", "createdAt": "2020-09-29T00:58:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQyMDQxMw==", "bodyText": "This is a good design actually. But it conflicts with our current assumption that the metric name contains GUAGE or COUNTER keyword. Please suggest how you think we shall let them work together? Or shall we modify our current metrics to include this type field too?", "url": "https://github.com/apache/helix/pull/1383#discussion_r496420413", "createdAt": "2020-09-29T05:25:21Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5Mjg0OQ==", "bodyText": "Helix-core is using keyword Counter/Gauge to represent the metric type. Either works. I'd like more inserting the type into object name, if we expect users to parse object names in mbean server. And it gives more flexibility/space to name a metric without Counter/Gauge. It can also be \"time\", \"latency\", \"total\", \"requests_queued\", etc..\nMore easily and concisely, I would suggest we can have a centralized metrics exposed to users so users can use the metrics class to get helix metrics.\nHelixRestMetrics { // or HelixCoreMetrics\n  public final Counter custom_call_request;\n  public final Gauge request_latency;\n}", "url": "https://github.com/apache/helix/pull/1383#discussion_r496592849", "createdAt": "2020-09-29T09:58:20Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjE5Nw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTM0MzI5OnYy", "diffSide": "LEFT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToyMjo1M1rOHYP0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozOToyNFrOHZVUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NzA2MQ==", "bodyText": "Why not clear?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495187061", "createdAt": "2020-09-25T19:22:53Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -222,7 +222,6 @@ public void shutdown() {\n       }\n     }\n     _jmxReporterList.forEach(JmxReporter::stop);\n-    _jmxReporterList.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTY1Ng==", "bodyText": "Somehow happened when rebasing/merging code from another local branch. Not intended.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496325656", "createdAt": "2020-09-29T01:39:24Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -222,7 +222,6 @@ public void shutdown() {\n       }\n     }\n     _jmxReporterList.forEach(JmxReporter::stop);\n-    _jmxReporterList.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NzA2MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTM2ODA3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTozMToyMlrOHYQDcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNTozMDozNVrOHZbVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDg5OQ==", "bodyText": "metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION).time() is enough? You are not using the timer object in the try code block anyway, right?", "url": "https://github.com/apache/helix/pull/1383#discussion_r495190899", "createdAt": "2020-09-25T19:31:22Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxOTY1Mw==", "bodyText": "Java 8 try..with..resource needs this variable, though we won't use it in the block :). Maybe a newer java supports it.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496319653", "createdAt": "2020-09-29T01:16:53Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDg5OQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQyNDI1MA==", "bodyText": "I see. It needs a local variable to do the trick. It looks strange but as long as it works, I'm good.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496424250", "createdAt": "2020-09-29T05:30:35Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -231,14 +252,22 @@ private StoppableCheck performHelixOwnInstanceCheck(String clusterId, String ins\n   private StoppableCheck performCustomInstanceCheck(String clusterId, String instanceName,\n       String baseUrl, Map<String, String> customPayLoads) {\n     LOG.info(\"Perform instance level client side health checks for {}/{}\", clusterId, instanceName);\n-    try {\n-      return new StoppableCheck(\n-          _customRestClient.getInstanceStoppableCheck(baseUrl, customPayLoads),\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL);\n+\n+    try (final Timer.Context timer = metrics.timer(CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5MDg5OQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ3NDYyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowOToxMlrOHYREpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTozMjo1MFrOHaC7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU5MQ==", "bodyText": "_namespace is not a must logic for the class, so I suggest adding a set method for it instead of adding a constructor.\nIf the namespace is not set, then just skip the metrics logic.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495207591", "createdAt": "2020-09-25T20:09:12Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjI0MA==", "bodyText": "In helix rest logic, I think we need to pass the namespace to this wrapper so partition check metrics could be namespaced, otherwise, we won't be able to record namespaced metrics for this partition check.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496326240", "createdAt": "2020-09-29T01:41:47Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU5MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzEzNg==", "bodyText": "High-levelly, I think we shall try our best to ensure that the metrics logic does not impact business logic. But the current implementation has 2 impacts at least.\n\nMore constructors, harder to use.\nWe enforce the business logic to have separate accessor wrapper for different namespaces. This does not make much sense if you consider the resource usage, object management, etc.\nOn the other hand, if we do not let the data accessor wrapper record the namespace, then the metrics can be recorded in the callers. This is a trade-off.\n\nWith the current implementation, I actually agree with put it inside the wrapper class. But we shall try to pass the namespace in a more direct way. For example, since we are enforcing the wrapper object serve for one namespace only, we can construct the wrapper object inside the InstanceServiceImpl. In this way, you are passing the namespace only once. And there is no way for the other devs to introduce inconsistent namespace parameters.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496437136", "createdAt": "2020-09-29T06:03:59Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU5MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3Mjk5MQ==", "bodyText": "This is a good suggestion. Previously I was not intended to change the constructor of InstanceServiceImpl. As you mentioned, helix rest is expected to be internal, so I think it is fine to change the signature. I have constructed the wrapper object inside the InstanceServiceImpl.", "url": "https://github.com/apache/helix/pull/1383#discussion_r497072991", "createdAt": "2020-09-29T21:32:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -54,15 +60,30 @@\n   public static final String IS_HEALTHY_KEY = \"IS_HEALTHY\";\n   public static final String EXPIRY_KEY = \"EXPIRE\";\n \n+  // Metric names for custom partition check\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_requests_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL = MetricRegistry\n+      .name(InstanceService.class, \"custom_partition_check_http_requests_error_total\");\n+  private static final String CUSTOM_PARTITION_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_partition_check_http_request_duration\");\n+\n   private final Map<PropertyKey, HelixProperty> _propertyCache = new HashMap<>();\n   private final Map<PropertyKey, List<String>> _batchNameCache = new HashMap<>();\n+  private String _namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU5MQ=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ3ODIyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMDoyOFrOHYRGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMDoyOFrOHYRGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODEzNA==", "bodyText": "Please check my comments for the instance accessor, the same here. Please lazily get and simplify the code whenever possible.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495208134", "createdAt": "2020-09-25T20:10:28Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -166,12 +187,18 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClie\n \n   private Map<String, Boolean> getHealthStatusFromRest(String instance, List<String> partitions,\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n-    try {\n+    MetricRegistry metrics = SharedMetricRegistries.getOrCreate(_namespace);\n+    Counter requestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_TOTAL);\n+    Counter errorRequestsTotal = metrics.counter(CUSTOM_PARTITION_CHECK_HTTP_REQUESTS_ERROR_TOTAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ4NDc0OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMjo0MlrOHYRKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToyNzoyMFrOHaCwZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw==", "bodyText": "You can get namespace from dataAccessor? Please try to ensure there is only one source of truth.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495209107", "createdAt": "2020-09-25T20:12:42Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMDExNw==", "bodyText": "Or do we share the same accessor across multiple service implementation? If that's the case, we need to reconsider the design.", "url": "https://github.com/apache/helix/pull/1383#discussion_r495210117", "createdAt": "2020-09-25T20:15:12Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODk4OA==", "bodyText": "No :) You got it. The first PR was a draft. A constructor with namespace is passed in, I didn't push the change yet when you saw this. Updated.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496318988", "createdAt": "2020-09-29T01:14:45Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzNzc0MA==", "bodyText": "As commented above, passing the namespace twice in one line of code is not a good design. If you are convinced that the wrapper object should be limited so serve only one service impl, then let's move it inside.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496437740", "createdAt": "2020-09-29T06:05:44Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MDE4MA==", "bodyText": "Moved. Thx.", "url": "https://github.com/apache/helix/pull/1383#discussion_r497070180", "createdAt": "2020-09-29T21:27:20Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,9 +63,18 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTEwNw=="}, "originalCommit": {"oid": "d9404665ac53876e1b977310684e528e1238c236"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc5Nzk4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo0OFrOHZcMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToyODowNVrOHaCyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODQwMw==", "bodyText": "I might be wrong, but helix-rest is not a module that we expect anyone to extend, so we shall be able to remove unnecessary methods directly.", "url": "https://github.com/apache/helix/pull/1383#discussion_r496438403", "createdAt": "2020-09-29T06:07:48Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,29 +62,44 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;\n   private final ConfigAccessor _configAccessor;\n   private final CustomRestClient _customRestClient;\n+  private String _namespace;\n   private boolean _skipZKRead;\n \n+  @Deprecated\n   public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor) {\n-    _dataAccessor = dataAccessor;\n-    _configAccessor = configAccessor;\n-    _customRestClient = CustomRestClientFactory.get();\n+    this(dataAccessor, configAccessor, false);\n   }\n \n-  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor, boolean skipZKRead) {\n-    this(dataAccessor,configAccessor);\n-    this._skipZKRead = skipZKRead;\n+  @Deprecated\n+  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor,\n+      boolean skipZKRead) {\n+    this(dataAccessor, configAccessor, skipZKRead, HelixRestNamespace.DEFAULT_NAMESPACE_NAME);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MDYzOA==", "bodyText": "Since helix is open source, I prefer to follow a standard process: deprecate first and then remove it.", "url": "https://github.com/apache/helix/pull/1383#discussion_r497070638", "createdAt": "2020-09-29T21:28:05Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -58,29 +62,44 @@\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n   private static final ExecutorService POOL = Executors.newCachedThreadPool();\n \n+  // Metric names for custom instance check\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUESTS_ERROR_TOTAL =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_requests_error_total\");\n+  private static final String CUSTOM_INSTANCE_CHECK_HTTP_REQUEST_DURATION =\n+      MetricRegistry.name(InstanceService.class, \"custom_instance_check_http_request_duration\");\n+\n   private final HelixDataAccessorWrapper _dataAccessor;\n   private final ConfigAccessor _configAccessor;\n   private final CustomRestClient _customRestClient;\n+  private String _namespace;\n   private boolean _skipZKRead;\n \n+  @Deprecated\n   public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor) {\n-    _dataAccessor = dataAccessor;\n-    _configAccessor = configAccessor;\n-    _customRestClient = CustomRestClientFactory.get();\n+    this(dataAccessor, configAccessor, false);\n   }\n \n-  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor, boolean skipZKRead) {\n-    this(dataAccessor,configAccessor);\n-    this._skipZKRead = skipZKRead;\n+  @Deprecated\n+  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor,\n+      boolean skipZKRead) {\n+    this(dataAccessor, configAccessor, skipZKRead, HelixRestNamespace.DEFAULT_NAMESPACE_NAME);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODQwMw=="}, "originalCommit": {"oid": "858a9474c01a5a1e03e3f767081b64337a6b7c1c"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 960, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}