{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTIxNzA0", "number": 1151, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo0NjoxNlrOEOcaTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDowMlrOEOddyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTgxMDA3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo0NjoxNlrOGxmhag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo0NjoxNlrOGxmhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NDU1NA==", "bodyText": "I don't think we need this list, just throw the exception on the first null IS.", "url": "https://github.com/apache/helix/pull/1151#discussion_r454664554", "createdAt": "2020-07-14T21:46:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,23 +1861,25 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n+    List<IdealState> idealStates = new ArrayList<>();\n+    List<PropertyKey> idealStateKeys = new ArrayList<>();\n     List<String> nullIdealStates = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4df2430de55b80df5cc62e79041707211e3a56c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTgyMTYxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1MDoyNFrOGxmopQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjowMDo0M1rOGxm6LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NjQwNQ==", "bodyText": "The original batch call is more efficient. Why do we want to change it?\nYou can still iterate the returned IS list but filter by the resourceNames list. Then check if any item in the resourceNames but not in the returned IS list.", "url": "https://github.com/apache/helix/pull/1151#discussion_r454666405", "createdAt": "2020-07-14T21:50:24Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,23 +1861,25 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n+    List<IdealState> idealStates = new ArrayList<>();\n+    List<PropertyKey> idealStateKeys = new ArrayList<>();\n     List<String> nullIdealStates = new ArrayList<>();\n-    for (int i = 0; i < idealStates.size(); i++) {\n-      if (idealStates.get(i) == null) {\n-        nullIdealStates.add(resourceNames.get(i));\n+    for (String resourceName : resourceNames) {\n+      PropertyKey key = keyBuilder.idealStates(resourceName);\n+      IdealState idealState = accessor.getProperty(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4df2430de55b80df5cc62e79041707211e3a56c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MDg5Mw==", "bodyText": "I agree, okay.", "url": "https://github.com/apache/helix/pull/1151#discussion_r454670893", "createdAt": "2020-07-14T22:00:43Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,23 +1861,25 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n+    List<IdealState> idealStates = new ArrayList<>();\n+    List<PropertyKey> idealStateKeys = new ArrayList<>();\n     List<String> nullIdealStates = new ArrayList<>();\n-    for (int i = 0; i < idealStates.size(); i++) {\n-      if (idealStates.get(i) == null) {\n-        nullIdealStates.add(resourceNames.get(i));\n+    for (String resourceName : resourceNames) {\n+      PropertyKey key = keyBuilder.idealStates(resourceName);\n+      IdealState idealState = accessor.getProperty(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NjQwNQ=="}, "originalCommit": {"oid": "e4df2430de55b80df5cc62e79041707211e3a56c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk3OTUzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MjozOVrOGxoGfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MjozOVrOGxoGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDQzMA==", "bodyText": "nit, use Set so the contains check is faster.", "url": "https://github.com/apache/helix/pull/1151#discussion_r454690430", "createdAt": "2020-07-14T22:52:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,24 +1861,28 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    List<IdealState> enabledIdealStates = new ArrayList<>();\n+    List<PropertyKey> enabledIdealStateKeys = new ArrayList<>();\n+    List<String> enabledResourceNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceda668f76718f50eb1e39205dd71d9f5cdb8849"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4MjgwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDowMlrOGxoIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo1OTo1N1rOGyJkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDkzMA==", "bodyText": "if (!enabledResourceNames.containsAll(resourceNames)) {\nthrow\n}", "url": "https://github.com/apache/helix/pull/1151#discussion_r454690930", "createdAt": "2020-07-14T22:54:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,24 +1861,28 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    List<IdealState> enabledIdealStates = new ArrayList<>();\n+    List<PropertyKey> enabledIdealStateKeys = new ArrayList<>();\n+    List<String> enabledResourceNames = new ArrayList<>();\n+\n     List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n-    List<String> nullIdealStates = new ArrayList<>();\n-    for (int i = 0; i < idealStates.size(); i++) {\n-      if (idealStates.get(i) == null) {\n-        nullIdealStates.add(resourceNames.get(i));\n-      } else {\n-        idealStates.get(i).setRebalancerClassName(WagedRebalancer.class.getName());\n-        idealStates.get(i).setRebalanceMode(RebalanceMode.FULL_AUTO);\n+    for (IdealState idealState : idealStates) {\n+      if (idealState != null && resourceNames.contains(idealState.getResourceName())) {\n+        idealState.setRebalancerClassName(WagedRebalancer.class.getName());\n+        idealState.setRebalanceMode(RebalanceMode.FULL_AUTO);\n+        enabledIdealStates.add(idealState);\n+        enabledIdealStateKeys.add(keyBuilder.idealStates(idealState.getResourceName()));\n+        enabledResourceNames.add(idealState.getResourceName());\n       }\n     }\n-    if (!nullIdealStates.isEmpty()) {\n+    List<String> resourcesNotFound =\n+        resourceNames.stream().filter(resourceName -> !enabledResourceNames.contains(resourceName))\n+            .collect(Collectors.toList());\n+    if (!resourcesNotFound.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceda668f76718f50eb1e39205dd71d9f5cdb8849"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzg3Nw==", "bodyText": "I want to show what resources don't have idealStates, otherwise I don't think it's informative enough.", "url": "https://github.com/apache/helix/pull/1151#discussion_r454703877", "createdAt": "2020-07-14T23:33:04Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,24 +1861,28 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    List<IdealState> enabledIdealStates = new ArrayList<>();\n+    List<PropertyKey> enabledIdealStateKeys = new ArrayList<>();\n+    List<String> enabledResourceNames = new ArrayList<>();\n+\n     List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n-    List<String> nullIdealStates = new ArrayList<>();\n-    for (int i = 0; i < idealStates.size(); i++) {\n-      if (idealStates.get(i) == null) {\n-        nullIdealStates.add(resourceNames.get(i));\n-      } else {\n-        idealStates.get(i).setRebalancerClassName(WagedRebalancer.class.getName());\n-        idealStates.get(i).setRebalanceMode(RebalanceMode.FULL_AUTO);\n+    for (IdealState idealState : idealStates) {\n+      if (idealState != null && resourceNames.contains(idealState.getResourceName())) {\n+        idealState.setRebalancerClassName(WagedRebalancer.class.getName());\n+        idealState.setRebalanceMode(RebalanceMode.FULL_AUTO);\n+        enabledIdealStates.add(idealState);\n+        enabledIdealStateKeys.add(keyBuilder.idealStates(idealState.getResourceName()));\n+        enabledResourceNames.add(idealState.getResourceName());\n       }\n     }\n-    if (!nullIdealStates.isEmpty()) {\n+    List<String> resourcesNotFound =\n+        resourceNames.stream().filter(resourceName -> !enabledResourceNames.contains(resourceName))\n+            .collect(Collectors.toList());\n+    if (!resourcesNotFound.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDkzMA=="}, "originalCommit": {"oid": "ceda668f76718f50eb1e39205dd71d9f5cdb8849"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzODgxNg==", "bodyText": "Make sense.", "url": "https://github.com/apache/helix/pull/1151#discussion_r455238816", "createdAt": "2020-07-15T17:59:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -1861,24 +1861,28 @@ public boolean enableWagedRebalance(String clusterName, List<String> resourceNam\n     HelixDataAccessor accessor =\n         new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    List<IdealState> enabledIdealStates = new ArrayList<>();\n+    List<PropertyKey> enabledIdealStateKeys = new ArrayList<>();\n+    List<String> enabledResourceNames = new ArrayList<>();\n+\n     List<IdealState> idealStates = accessor.getChildValues(keyBuilder.idealStates(), true);\n-    List<String> nullIdealStates = new ArrayList<>();\n-    for (int i = 0; i < idealStates.size(); i++) {\n-      if (idealStates.get(i) == null) {\n-        nullIdealStates.add(resourceNames.get(i));\n-      } else {\n-        idealStates.get(i).setRebalancerClassName(WagedRebalancer.class.getName());\n-        idealStates.get(i).setRebalanceMode(RebalanceMode.FULL_AUTO);\n+    for (IdealState idealState : idealStates) {\n+      if (idealState != null && resourceNames.contains(idealState.getResourceName())) {\n+        idealState.setRebalancerClassName(WagedRebalancer.class.getName());\n+        idealState.setRebalanceMode(RebalanceMode.FULL_AUTO);\n+        enabledIdealStates.add(idealState);\n+        enabledIdealStateKeys.add(keyBuilder.idealStates(idealState.getResourceName()));\n+        enabledResourceNames.add(idealState.getResourceName());\n       }\n     }\n-    if (!nullIdealStates.isEmpty()) {\n+    List<String> resourcesNotFound =\n+        resourceNames.stream().filter(resourceName -> !enabledResourceNames.contains(resourceName))\n+            .collect(Collectors.toList());\n+    if (!resourcesNotFound.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDkzMA=="}, "originalCommit": {"oid": "ceda668f76718f50eb1e39205dd71d9f5cdb8849"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}