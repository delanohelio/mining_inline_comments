{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMDgyMDk3", "number": 1534, "title": "Fix several tests with resource leakage", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nfix #1226\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFix several tests with resource leakage\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\ngithub run pending\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-11-17T01:46:20Z", "url": "https://github.com/apache/helix/pull/1534", "merged": true, "mergeCommit": {"oid": "540c53bd9913471baaaf8fade8489a5fffb1dc37"}, "closed": true, "closedAt": "2020-11-18T00:52:35Z", "author": {"login": "kaisun2000"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddOYhvAH2gAyNTIyMDgyMDk3OjdlYjNjMjgzM2NkYTI5YTc4MGFmZTQ0YzA2YmE3NmQwZGYzODQzZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddjUR4AH2gAyNTIyMDgyMDk3OjIzMmFmYzk4MWZjN2VhZGIwOTc4YjM5NzA3NGI2MTMyYjJkZjE1YmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7eb3c2833cda29a780afe44c06ba76d0df3843ff", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/7eb3c2833cda29a780afe44c06ba76d0df3843ff", "committedDate": "2020-11-17T00:26:30Z", "message": "fix resource leaks in several tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40aeab0c8fe9ce6060bf217a306d5b47cf6c0645", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/40aeab0c8fe9ce6060bf217a306d5b47cf6c0645", "committedDate": "2020-11-17T01:43:27Z", "message": "fix several tests with leaking resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3545f025a3224c7fcc7c902332a7951455625894", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/3545f025a3224c7fcc7c902332a7951455625894", "committedDate": "2020-11-17T02:29:36Z", "message": "two more thread leaking fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/fecc175a79d0a753bda63bd624572c6c420b06a5", "committedDate": "2020-11-17T03:39:39Z", "message": "add resource leak fix in TestDistControllerElection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjczODc5", "url": "https://github.com/apache/helix/pull/1534#pullrequestreview-532673879", "createdAt": "2020-11-17T18:34:29Z", "commit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODozNDozMFrOH1DirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODozNzo0OVrOH1DrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NDYwNA==", "bodyText": "nit, shutdown the controller first would be safer.", "url": "https://github.com/apache/helix/pull/1534#discussion_r525394604", "createdAt": "2020-11-17T18:34:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java", "diffHunk": "@@ -72,36 +73,45 @@ public void testController() throws Exception {\n     DistributedLeaderElection election =\n         new DistributedLeaderElection(manager, controller0, timerTasks);\n     NotificationContext context = new NotificationContext(manager);\n-    context.setType(NotificationContext.Type.INIT);\n-    election.onControllerChange(context);\n-\n-    // path = PropertyPathConfig.getPath(PropertyType.LEADER, clusterName);\n-    // ZNRecord leaderRecord = _gZkClient.<ZNRecord> readData(path);\n-    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n-    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n-    // AssertJUnit.assertNotNull(election.getController());\n-    // AssertJUnit.assertNull(election.getLeader());\n+    try {\n+      context.setType(NotificationContext.Type.INIT);\n+      election.onControllerChange(context);\n+\n+      // path = PropertyPathConfig.getPath(PropertyType.LEADER, clusterName);\n+      // ZNRecord leaderRecord = _gZkClient.<ZNRecord> readData(path);\n+      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n+      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n+      // AssertJUnit.assertNotNull(election.getController());\n+      // AssertJUnit.assertNull(election.getLeader());\n+    } finally {\n+      manager.disconnect();\n+      controller0.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTEzNg==", "bodyText": "Same here.", "url": "https://github.com/apache/helix/pull/1534#discussion_r525395136", "createdAt": "2020-11-17T18:35:19Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java", "diffHunk": "@@ -72,36 +73,45 @@ public void testController() throws Exception {\n     DistributedLeaderElection election =\n         new DistributedLeaderElection(manager, controller0, timerTasks);\n     NotificationContext context = new NotificationContext(manager);\n-    context.setType(NotificationContext.Type.INIT);\n-    election.onControllerChange(context);\n-\n-    // path = PropertyPathConfig.getPath(PropertyType.LEADER, clusterName);\n-    // ZNRecord leaderRecord = _gZkClient.<ZNRecord> readData(path);\n-    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n-    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n-    // AssertJUnit.assertNotNull(election.getController());\n-    // AssertJUnit.assertNull(election.getLeader());\n+    try {\n+      context.setType(NotificationContext.Type.INIT);\n+      election.onControllerChange(context);\n+\n+      // path = PropertyPathConfig.getPath(PropertyType.LEADER, clusterName);\n+      // ZNRecord leaderRecord = _gZkClient.<ZNRecord> readData(path);\n+      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n+      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n+      // AssertJUnit.assertNotNull(election.getController());\n+      // AssertJUnit.assertNull(election.getLeader());\n+    } finally {\n+      manager.disconnect();\n+      controller0.shutdown();\n+    }\n \n     manager =\n         new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n     GenericHelixController controller1 = new GenericHelixController();\n     election = new DistributedLeaderElection(manager, controller1, timerTasks);\n     context = new NotificationContext(manager);\n     context.setType(NotificationContext.Type.INIT);\n-    election.onControllerChange(context);\n-    // leaderRecord = _gZkClient.<ZNRecord> readData(path);\n-    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n-    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n-    // AssertJUnit.assertNull(election.getController());\n-    // AssertJUnit.assertNull(election.getLeader());\n-\n-    accessor.removeProperty(keyBuilder.controllerLeader());\n-    TestHelper.dropCluster(clusterName, _gZkClient);\n+    try {\n+      election.onControllerChange(context);\n+      // leaderRecord = _gZkClient.<ZNRecord> readData(path);\n+      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n+      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n+      // AssertJUnit.assertNull(election.getController());\n+      // AssertJUnit.assertNull(election.getLeader());\n+    } finally {\n+      manager.disconnect();\n+      controller1.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTkwNg==", "bodyText": "How about the managers? Please disconnect them too.", "url": "https://github.com/apache/helix/pull/1534#discussion_r525395906", "createdAt": "2020-11-17T18:36:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java", "diffHunk": "@@ -197,35 +218,42 @@ public void testCompeteLeadership() throws Exception {\n \n     // Create controller leaders\n     final Map<String, ZKHelixManager> managerList = new HashMap<>();\n+    final List<GenericHelixController> controllers = new ArrayList<>();\n     for (int i = 0; i < managerCount; i++) {\n       String controllerName = \"controller_\" + i;\n       ZKHelixManager manager =\n           new ZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, ZK_ADDR);\n       GenericHelixController controller0 = new GenericHelixController();\n       DistributedLeaderElection election =\n           new DistributedLeaderElection(manager, controller0, Collections.EMPTY_LIST);\n+      controllers.add(controller0);\n       manager.connect();\n       managerList.put(manager.getInstanceName(), manager);\n     }\n \n-    // Remove leader manager one by one, and verify if the leader node exists\n-    while(!managerList.isEmpty()) {\n-      // Ensure a controller successfully acquired leadership.\n-      Assert.assertTrue(TestHelper.verify(new TestHelper.Verifier() {\n-        @Override\n-        public boolean verify() {\n-          LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n-          if (liveInstance != null) {\n-            // disconnect the current leader manager\n-            managerList.remove(liveInstance.getInstanceName()).disconnect();\n-            return true;\n-          } else {\n-            return false;\n+    try {\n+      // Remove leader manager one by one, and verify if the leader node exists\n+      while (!managerList.isEmpty()) {\n+        // Ensure a controller successfully acquired leadership.\n+        Assert.assertTrue(TestHelper.verify(new TestHelper.Verifier() {\n+          @Override\n+          public boolean verify() {\n+            LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n+            if (liveInstance != null) {\n+              // disconnect the current leader manager\n+              managerList.remove(liveInstance.getInstanceName()).disconnect();\n+              return true;\n+            } else {\n+              return false;\n+            }\n           }\n-        }\n-      }, 1000));\n+        }, 1000));\n+      }\n+    } finally {\n+      for (GenericHelixController controller : controllers) {\n+        controller.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5Njc4MA==", "bodyText": "nit, you probably want to extract a private method for this section to reduce duplication.", "url": "https://github.com/apache/helix/pull/1534#discussion_r525396780", "createdAt": "2020-11-17T18:37:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java", "diffHunk": "@@ -73,44 +73,63 @@\n   public void beforeClass() throws Exception {\n     System.out\n         .println(\"START TestClusterSetup.beforeClass() \" + new Date(System.currentTimeMillis()));\n+    _clusterSetup = new ClusterSetup(ZK_ADDR);\n   }\n \n   @AfterClass()\n   public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n+    _clusterSetup.close();\n     System.out.println(\"END TestClusterSetup.afterClass() \" + new Date(System.currentTimeMillis()));\n   }\n \n   @BeforeMethod()\n   public void setup() {\n-\n-    _gZkClient.deleteRecursively(\"/\" + CLUSTER_NAME);\n-    _clusterSetup = new ClusterSetup(ZK_ADDR);\n-    _clusterSetup.addCluster(CLUSTER_NAME, true);\n+    try {\n+      _gZkClient.deleteRecursively(\"/\" + CLUSTER_NAME);\n+      _clusterSetup.addCluster(CLUSTER_NAME, true);\n+    } catch (Exception e) {\n+      System.out.println(\"@BeforeMethod TestClusterSetup exception:\" + e);\n+    }\n   }\n \n-  @Test\n+  // Note, with mvn 3.6.1, we have a nasty bug that running \"mvn test\" under helix-core,\n+  // all the bellow test will be invoked after other test including @AfterClass cleanup of this\n+  // This bug does not happen of running command as \"mvn test -Dtest=TestClusterSetup\". Nor does it\n+  // happen in intellij. The workaround found is to add dependsOnMethods attribute to all the rest.\n+  @Test(dependsOnMethods = \"testAddClusterWithValidCloudConfig\")\n   public void testZkAdminTimeout() {\n     boolean exceptionThrown = false;\n+    ZKHelixAdmin admin = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecc175a79d0a753bda63bd624572c6c420b06a5"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "407ed4fe2966e317b123518fe58975d8f0c5fa87", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/407ed4fe2966e317b123518fe58975d8f0c5fa87", "committedDate": "2020-11-17T20:28:24Z", "message": "some updates based on feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTEzMzY3", "url": "https://github.com/apache/helix/pull/1534#pullrequestreview-532913367", "createdAt": "2020-11-18T00:05:47Z", "commit": {"oid": "407ed4fe2966e317b123518fe58975d8f0c5fa87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDowNTo0N1rOH1QhIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDowNTo0N1rOH1QhIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNzIwMg==", "bodyText": "nit: Can we do\nAssert.assertTrue(_clusterVerifier.verify()); ?", "url": "https://github.com/apache/helix/pull/1534#discussion_r525607202", "createdAt": "2020-11-18T00:05:47Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/changedetector/TestResourceChangeDetector.java", "diffHunk": "@@ -431,8 +431,12 @@ public void testResetSnapshots() {\n             .setResources(new HashSet<>(_dataAccessor.getChildNames(_keyBuilder.idealStates())))\n             .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n             .build();\n-    Assert.assertTrue(_clusterVerifier.verify());\n-\n+    try {\n+      boolean result = _clusterVerifier.verify();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407ed4fe2966e317b123518fe58975d8f0c5fa87"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTIyODg3", "url": "https://github.com/apache/helix/pull/1534#pullrequestreview-532922887", "createdAt": "2020-11-18T00:29:20Z", "commit": {"oid": "407ed4fe2966e317b123518fe58975d8f0c5fa87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "232afc981fc7eadb0978b397074b6132b2df15bc", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/232afc981fc7eadb0978b397074b6132b2df15bc", "committedDate": "2020-11-18T00:49:52Z", "message": "address a nit."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4127, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}