{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjEyNzUx", "number": 892, "title": "Add integration tests for Helix Java APIs", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #891\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis commit adds a comprehensive integration test for Helix Java APIs. All Helix Java APIs are tested using regular resource rebalancing and task framework.\nThere are a few minor changes to Helix Java API code. Those will be a separate PR for easier reviewing. Note that this PR contains all of those changes.\nDepends on the following PRs:\n#893\n#894\n#895\n#896\nTests\n\n The following tests are written for this issue:\n\nTestMultiZkEnvironment\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestEnableCompression.testEnableCompressionResource:117 expected:<true> but was:<false>\n[INFO]\n[ERROR] Tests run: 1097, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:10 h\n[INFO] Finished at: 2020-03-16T21:31:06-07:00\n[INFO] ------------------------------------------------------------------------\n\nmvn test -Dtest=TestControllerLeadershipChange,TestEnableCompression\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.587 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:12 min\n[INFO] Finished at: 2020-03-13T14:02:11-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-13T06:24:31Z", "url": "https://github.com/apache/helix/pull/892", "merged": true, "mergeCommit": {"oid": "1faaaca379459eeaafcb49770582a3a731ad0439"}, "closed": true, "closedAt": "2020-03-17T17:35:44Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNZ5u3gBqjMxMjg3Mzc2NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOl7HogH2gAyMzg3NjEyNzUxOjg2MWEwM2RiNGIxNmE1YmNkMjM2YzlhYWM5NzcwMDI4ZjI0MWJlYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09f824b478b3e60be681ff429bb6a355541a8d1c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/09f824b478b3e60be681ff429bb6a355541a8d1c", "committedDate": "2020-03-13T06:14:39Z", "message": "asdfsfa"}, "afterCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/eb1e4546512cfcdf20c6c3104173a799cf4c7eda", "committedDate": "2020-03-14T00:37:22Z", "message": "asdfsfa"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjgwMTY0", "url": "https://github.com/apache/helix/pull/892#pullrequestreview-375680164", "createdAt": "2020-03-17T01:19:05Z", "commit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToxOTowNVrOF3K44g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToyNzoxOFrOF3LACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NDQwMg==", "bodyText": "Maybe it is more accurate for us to back up this system property and recover it after the test? If we simply clear the property after class, there may be a case that another test relying on this property. If the property is cleared, the test may fail. I understand the property should be set and cleared in each test class/method. But just in case.", "url": "https://github.com/apache/helix/pull/892#discussion_r393394402", "createdAt": "2020-03-17T01:19:05Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NTUyMg==", "bodyText": "Do we still need to keep this property after class?", "url": "https://github.com/apache/helix/pull/892#discussion_r393395522", "createdAt": "2020-03-17T01:24:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjIzMw==", "bodyText": "Just a corner case, if there is exception before clearProperty(), this property will be kept and may affect other tests? Usually what I do is using try...finally.", "url": "https://github.com/apache/helix/pull/892#discussion_r393396233", "createdAt": "2020-03-17T01:27:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {\n+  private static final int NUM_ZK = 3;\n+  private static final Map<String, ZkServer> ZK_SERVER_MAP = new HashMap<>();\n+  private static final Map<String, HelixZkClient> ZK_CLIENT_MAP = new HashMap<>();\n+  private static final Map<String, ClusterControllerManager> MOCK_CONTROLLERS = new HashMap<>();\n+  private static final Set<MockParticipantManager> MOCK_PARTICIPANTS = new HashSet<>();\n+  private static final List<String> CLUSTER_LIST =\n+      ImmutableList.of(\"CLUSTER_1\", \"CLUSTER_2\", \"CLUSTER_3\");\n+\n+  private MockMetadataStoreDirectoryServer _msds;\n+  private static final Map<String, Collection<String>> _rawRoutingData = new HashMap<>();\n+  private RealmAwareZkClient _zkClient;\n+  private HelixAdmin _zkHelixAdmin;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    // Create 3 in-memory zookeepers and routing mapping\n+    final String zkPrefix = \"localhost:\";\n+    final int zkStartPort = 8777;\n+\n+    for (int i = 0; i < NUM_ZK; i++) {\n+      String zkAddress = zkPrefix + (zkStartPort + i);\n+      ZK_SERVER_MAP.put(zkAddress, TestHelper.startZkServer(zkAddress));\n+      ZK_CLIENT_MAP.put(zkAddress, DedicatedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer())));\n+\n+      // One cluster per ZkServer created\n+      _rawRoutingData.put(zkAddress, Collections.singletonList(\"/\" + CLUSTER_LIST.get(i)));\n+    }\n+\n+    // Create a Mock MSDS\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    _msds = new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace,\n+        _rawRoutingData);\n+    _msds.startServer();\n+\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/multiZkTest\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n+        \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n+\n+    // Create a FederatedZkClient for admin work\n+    _zkClient =\n+        new FederatedZkClient(new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+            new RealmAwareZkClient.RealmAwareZkClientConfig());\n+  }\n+\n+  @AfterClass\n+  public void afterClass() throws Exception {\n+    // Kill all mock controllers and participants\n+    MOCK_CONTROLLERS.values().forEach(ClusterControllerManager::syncStop);\n+    MOCK_PARTICIPANTS.forEach(MockParticipantManager::syncStop);\n+\n+    // Tear down all clusters\n+    CLUSTER_LIST.forEach(cluster -> TestHelper.dropCluster(cluster, _zkClient));\n+\n+    // Verify that all clusters are gone in each zookeeper\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      for (Map.Entry<String, HelixZkClient> zkClientEntry : ZK_CLIENT_MAP.entrySet()) {\n+        List<String> children = zkClientEntry.getValue().getChildren(\"/\");\n+        if (children.stream().anyMatch(CLUSTER_LIST::contains)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }, TestHelper.WAIT_DURATION));\n+\n+    // Tear down zookeepers\n+    ZK_SERVER_MAP.forEach((zkAddress, zkServer) -> zkServer.shutdown());\n+\n+    // Stop MockMSDS\n+    _msds.stopServer();\n+\n+    // Turn off multiZK mode in System config\n+    System.clearProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78cc212ea93299c1f8bbe4fa78c7fefca2f1035e", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/78cc212ea93299c1f8bbe4fa78c7fefca2f1035e", "committedDate": "2020-03-17T03:18:12Z", "message": "asdfsfa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a87df8f6473402330ea8353039e773ec10cb96be", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/a87df8f6473402330ea8353039e773ec10cb96be", "committedDate": "2020-03-17T03:18:12Z", "message": "asdf"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b57ecca84353323cdafee9e2ad949ec448ff529", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/0b57ecca84353323cdafee9e2ad949ec448ff529", "committedDate": "2020-03-17T03:17:40Z", "message": "asdf"}, "afterCommit": {"oid": "a87df8f6473402330ea8353039e773ec10cb96be", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/a87df8f6473402330ea8353039e773ec10cb96be", "committedDate": "2020-03-17T03:18:12Z", "message": "asdf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njg0NDYx", "url": "https://github.com/apache/helix/pull/892#pullrequestreview-375684461", "createdAt": "2020-03-17T01:34:50Z", "commit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozNDo1MFrOF3LGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozNDo1MFrOF3LGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzk1OA==", "bodyText": "Nit, \"This test verifies that all Helix Java APIs work as expected.\" Looking at the comments and the class name, I am not sure if the test class name is accurate (it seems to the scope of MultiZkEnvironment is bigger), or something like TestMultiZkHelixJavaApis? Up to you.", "url": "https://github.com/apache/helix/pull/892#discussion_r393397958", "createdAt": "2020-03-17T01:34:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkEnvironment.java", "diffHunk": "@@ -0,0 +1,448 @@\n+package org.apache.helix.integration.multizk;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.api.config.RebalanceConfig;\n+import org.apache.helix.controller.rebalancer.DelayedAutoRebalancer;\n+import org.apache.helix.controller.rebalancer.strategy.CrushEdRebalanceStrategy;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.MockTask;\n+import org.apache.helix.integration.task.WorkflowGenerator;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.ClusterConfig;\n+import org.apache.helix.model.IdealState;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.store.HelixPropertyStore;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.task.WorkflowContext;\n+import org.apache.helix.tools.ClusterSetup;\n+import org.apache.helix.tools.ClusterVerifiers.BestPossibleExternalViewVerifier;\n+import org.apache.helix.tools.ClusterVerifiers.ZkHelixClusterVerifier;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.datamodel.serializer.ZNRecordSerializer;\n+import org.apache.helix.zookeeper.impl.client.FederatedZkClient;\n+import org.apache.helix.zookeeper.impl.factory.DedicatedZkClientFactory;\n+import org.apache.helix.zookeeper.zkclient.ZkServer;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * TestMultiZkEnvironment spins up multiple in-memory ZooKeepers with a pre-configured\n+ * cluster-Zk realm routing information.\n+ * This test verifies that all Helix Java APIs work as expected.\n+ */\n+public class TestMultiZkEnvironment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1e4546512cfcdf20c6c3104173a799cf4c7eda"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "861a03db4b16a5bcd236c9aac9770028f241bec7", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/861a03db4b16a5bcd236c9aac9770028f241bec7", "committedDate": "2020-03-17T17:12:05Z", "message": "Change name for the class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}