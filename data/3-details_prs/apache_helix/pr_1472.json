{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDg4ODky", "number": 1472, "title": "Fix connection leakage in CustomRestClient", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1471\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThere is connection leakage in CustomRestClientImpl and causes timeout waiting for connection.\nFix this issue by consuming entity and releasing stream and connection.\nTests\n\n The following tests are written for this issue:\n\nManually reproduce the issue locally. After the fix, the issue is gone.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 170, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 100.208 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 170, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:46 min\n[INFO] Finished at: 2020-10-16T15:20:24-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-16T20:33:09Z", "url": "https://github.com/apache/helix/pull/1472", "merged": true, "mergeCommit": {"oid": "c3515f4e05466580b2acaaea79bebbf21b1b1e58"}, "closed": true, "closedAt": "2020-10-16T22:35:03Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTMe3LABqjM4ODgwOTE3NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTOAywAFqTUxMDgyODIxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a682cc7ef9619cb0f8e9e11377d0017b9f8b99e3", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a682cc7ef9619cb0f8e9e11377d0017b9f8b99e3", "committedDate": "2020-10-16T20:26:17Z", "message": "Fix connection leakage in CustomRestClient"}, "afterCommit": {"oid": "82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "committedDate": "2020-10-16T20:34:13Z", "message": "Fix connection leakage in CustomRestClient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "committedDate": "2020-10-16T20:34:13Z", "message": "Fix connection leakage in CustomRestClient"}, "afterCommit": {"oid": "26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "committedDate": "2020-10-16T20:35:20Z", "message": "Fix connection leakage in CustomRestClient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "committedDate": "2020-10-16T20:35:20Z", "message": "Fix connection leakage in CustomRestClient"}, "afterCommit": {"oid": "c814d3adb107110d6417ebc7c4fdb0d0888852d9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c814d3adb107110d6417ebc7c4fdb0d0888852d9", "committedDate": "2020-10-16T20:48:58Z", "message": "Fix connection leakage in CustomRestClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a417c6722e64c8094cff5bca3bebd2ef9d45242e", "committedDate": "2020-10-16T20:53:56Z", "message": "Fix connection leakage in CustomRestClient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c814d3adb107110d6417ebc7c4fdb0d0888852d9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c814d3adb107110d6417ebc7c4fdb0d0888852d9", "committedDate": "2020-10-16T20:48:58Z", "message": "Fix connection leakage in CustomRestClient"}, "afterCommit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a417c6722e64c8094cff5bca3bebd2ef9d45242e", "committedDate": "2020-10-16T20:53:56Z", "message": "Fix connection leakage in CustomRestClient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODI0MjU1", "url": "https://github.com/apache/helix/pull/1472#pullrequestreview-510824255", "createdAt": "2020-10-16T22:09:35Z", "commit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowOTozNVrOHjRGEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowOTozNVrOHjRGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MjI5MA==", "bodyText": "Good catch.", "url": "https://github.com/apache/helix/pull/1472#discussion_r506742290", "createdAt": "2020-10-16T22:09:35Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -40,7 +40,7 @@\n import org.slf4j.LoggerFactory;\n \n class CustomRestClientImpl implements CustomRestClient {\n-  private static final Logger LOG = LoggerFactory.getLogger(CustomRestClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODI4MDE2", "url": "https://github.com/apache/helix/pull/1472#pullrequestreview-510828016", "createdAt": "2020-10-16T22:20:39Z", "commit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyMDozOVrOHjRSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyMDozOVrOHjRSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTQ5OA==", "bodyText": "handleResponse() handles the result from post() assuming post has not IO exception. That is the original author's thinking.  So looking at the response code previously is in handleResponse(). If sticking to the same line of thinking, we can add this warning log to handleResponse, instead in post() here.\nBut in reality, it does not really matter. More like a style of personal choice.", "url": "https://github.com/apache/helix/pull/1472#discussion_r506745498", "createdAt": "2020-10-16T22:20:39Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -116,25 +116,36 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       LOG.info(\"Expected HttpResponse statusCode: {}\", HttpStatus.SC_OK);\n       return jsonConverter.convert(getJsonObject(httpResponse));\n     } else {\n+      // Ensure entity is fully consumed so stream is closed.\n+      EntityUtils.consumeQuietly(httpResponse.getEntity());\n       throw new ClientProtocolException(\"Unexpected response status: \" + status + \", reason: \"\n           + httpResponse.getStatusLine().getReasonPhrase());\n     }\n   }\n \n   @VisibleForTesting\n   protected HttpResponse post(String url, Map<String, String> payloads) throws IOException {\n+    HttpPost postRequest = new HttpPost(url);\n     try {\n-      HttpPost postRequest = new HttpPost(url);\n       postRequest.setHeader(\"Accept\", ACCEPT_CONTENT_TYPE);\n       StringEntity entity = new StringEntity(OBJECT_MAPPER.writeValueAsString(payloads),\n           ContentType.APPLICATION_JSON);\n       postRequest.setEntity(entity);\n       LOG.info(\"Executing request: {}, headers: {}, entity: {}\", postRequest.getRequestLine(),\n           postRequest.getAllHeaders(), postRequest.getEntity());\n-      return _httpClient.execute(postRequest);\n+\n+      HttpResponse response = _httpClient.execute(postRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODI4MjE3", "url": "https://github.com/apache/helix/pull/1472#pullrequestreview-510828217", "createdAt": "2020-10-16T22:21:20Z", "commit": {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4363, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}