{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDUxMDI1", "number": 1028, "title": "Add Abnormal States Resolver interface and configuration item.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1027\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe Abnormal States Resolver defines a generic interface to find and recover if the partition has any abnormal current states. For example,\n\ndouble masters\napplication data out of sync\nThe interface shall be implemented according to the requirement.\n\nThe resolver is applied in the rebalance process according to the corresponding cluster config item. For example,\n\"ABNORMAL_STATES_RESOLVER_MAP\" : {\n\"MASTERSLAVE\" : \"org.apache.helix.api.rebalancer.constraint.MasterSlaveAbnormalStateReslovler\"\n}\nThe default behavior without any configuration is not doing any recovery work.\nTests\n\n The following tests are written for this issue:\n\nTestAbnormalStatesResolver\nTestClusterConfig.testAbnormalStatesResolverConfig()\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-rest, All passed\nhelix-core,\n[ERROR] Failures:\n[ERROR]   TestRebalanceRunningTask.testFixedTargetTaskAndEnabledRebalanceAndNodeAdded:330 expected: but was:\n[ERROR]   TestTaskThrottling.testTaskThrottle:98 expected:<10> but was:<0>\n[ERROR]   TestWorkflowTimeout.testWorkflowTimeoutWhenWorkflowCompleted:116 expected: but was:\n[INFO]\n[ERROR] Tests run: 1148, Failures: 3, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\nRerun\n[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 50.296 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 56.539 s\n[INFO] Finished at: 2020-05-27T09:53:49-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-05-26T20:38:09Z", "url": "https://github.com/apache/helix/pull/1028", "merged": true, "mergeCommit": {"oid": "ac0be01f69d411c06ac336f4e45b4ed6ba6badb1"}, "closed": true, "closedAt": "2020-05-28T22:55:34Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclKFKPAH2gAyNDIzNDUxMDI1OmU1OTBlMzQxMTIwMjVkMTRlMWJjNWViYWVjOTZjN2M3YTQ2OTY2YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl1wKHgFqTQyMDU0MDI3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e590e34112025d14e1bc5ebaec96c7c7a46966b4", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e590e34112025d14e1bc5ebaec96c7c7a46966b4", "committedDate": "2020-05-26T19:45:58Z", "message": "Add Abnormal States Resolver interface and configuration item.\n\nThe Abnormal States Resolver defines a generic interface to find and recover if the partition has any abnormal current states. For example,\n- double masters\n- application data out of sync\nThe interface shall be implemented according to the requirement.\n\nThe resolver is applied in the rebalance process according to the corresponding cluster config item. For example,\n\"ABNORMAL_STATES_RESOLVER_MAP\" : {\n \"MASTERSLAVE\" : \"org.apache.helix.api.rebalancer.constraint.MasterSlaveAbnormalStateReslovler\"\n}\nThe default behavior without any configuration is not doing any recovery work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4bc2d1136213c227771be33fab9c7042ae26ae", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/ed4bc2d1136213c227771be33fab9c7042ae26ae", "committedDate": "2020-05-27T18:14:23Z", "message": "Add license info."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTY2ODEx", "url": "https://github.com/apache/helix/pull/1028#pullrequestreview-419566811", "createdAt": "2020-05-27T20:02:41Z", "commit": {"oid": "ed4bc2d1136213c227771be33fab9c7042ae26ae"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoxMToxNVrOGbba8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyMDo0MFrOGbbtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNDAwMg==", "bodyText": "We can let it be info since I will not see ClusterConfig change so frequently.", "url": "https://github.com/apache/helix/pull/1028#discussion_r431414002", "createdAt": "2020-05-27T20:11:15Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -723,6 +729,43 @@ public void setAsyncTasksThreadPool(ExecutorService asyncTasksThreadPool) {\n     _asyncTasksThreadPool = asyncTasksThreadPool;\n   }\n \n+\n+  public AbnormalStateResolver getAbnormalStateResolver(String stateModel) {\n+    return _abnormalStateResolverMap\n+        .getOrDefault(stateModel, AbnormalStateResolver.DUMMY_STATE_RESOLVER);\n+  }\n+\n+  private void refreshAbnormalStateResolverMap(ClusterConfig clusterConfig) {\n+    if (clusterConfig == null) {\n+      logger.debug(\"Skip refreshing abnormal state resolvers because the ClusterConfig is missing\");\n+      return;\n+    }\n+    Map<String, String> resolverMap = clusterConfig.getAbnormalStateResolverMap();\n+    logger.debug(\"Start loading the abnormal state resolvers with configuration {}\", resolverMap);\n+    // Remove any resolver configuration that does not exist anymore.\n+    _abnormalStateResolverMap.keySet().retainAll(resolverMap.keySet());\n+    // Reload the resolver classes into cache based on the configuration.\n+    for (String stateModel : resolverMap.keySet()) {\n+      String resolverClassName = resolverMap.get(stateModel);\n+      if (resolverClassName == null || resolverClassName.isEmpty()) {\n+        // skip the empty definition.\n+        continue;\n+      }\n+      if (!resolverClassName.equals(getAbnormalStateResolver(stateModel).getClass().getName())) {\n+        try {\n+          AbnormalStateResolver resolver = AbnormalStateResolver.class\n+              .cast(HelixUtil.loadClass(getClass(), resolverClassName).newInstance());\n+          _abnormalStateResolverMap.put(stateModel, resolver);\n+        } catch (Exception e) {\n+          throw new HelixException(String\n+              .format(\"Failed to instantiate the abnormal state resolver %s for state model %s\",\n+                  resolverClassName, stateModel));\n+        }\n+      } // else, nothing to update since the same resolver class has been loaded.\n+    }\n+    logger.debug(\"Finish loading the abnormal state resolvers {}\", _abnormalStateResolverMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4bc2d1136213c227771be33fab9c7042ae26ae"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxODY1Nw==", "bodyText": "Are we changing the logic? For this change, we add optionalOverwrittenStates.isPresent(). This result could come from IS dropping or preference list is null. In this case, it will direct return.\nIf you are not returning, it will execute following code, which may have NPE or some errors?", "url": "https://github.com/apache/helix/pull/1028#discussion_r431418657", "createdAt": "2020-05-27T20:20:40Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java", "diffHunk": "@@ -276,39 +278,20 @@ public ResourceAssignment computeBestPossiblePartitionState(ResourceControllerDa\n     return partitionMapping;\n   }\n \n-  /**\n-   * compute best state for resource in AUTO ideal state mode\n-   * @param liveInstances\n-   * @param stateModelDef\n-   * @param preferenceList\n-   * @param currentStateOutput\n-   *          : instance->state for each partition\n-   * @param disabledInstancesForPartition\n-   * @param idealState\n-   * @param  clusterConfig\n-   * @param  partition\n-   * @return\n-   */\n   @Override\n   protected Map<String, String> computeBestPossibleStateForPartition(Set<String> liveInstances,\n       StateModelDefinition stateModelDef, List<String> preferenceList,\n       CurrentStateOutput currentStateOutput, Set<String> disabledInstancesForPartition,\n-      IdealState idealState, ClusterConfig clusterConfig, Partition partition) {\n-\n+      IdealState idealState, ClusterConfig clusterConfig, Partition partition,\n+      AbnormalStateResolver resolver) {\n+    Optional<Map<String, String>> optionalOverwrittenStates =\n+        computeStatesOverwriteForPartition(stateModelDef, preferenceList, currentStateOutput,\n+            idealState, partition, resolver);\n+    if (optionalOverwrittenStates.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4bc2d1136213c227771be33fab9c7042ae26ae"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515ff5b45b4da718cca7476f17eb7f8ebf3c5396", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/515ff5b45b4da718cca7476f17eb7f8ebf3c5396", "committedDate": "2020-05-27T21:13:06Z", "message": "Address comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTQwMjcz", "url": "https://github.com/apache/helix/pull/1028#pullrequestreview-420540273", "createdAt": "2020-05-28T22:38:51Z", "commit": {"oid": "515ff5b45b4da718cca7476f17eb7f8ebf3c5396"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4397, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}