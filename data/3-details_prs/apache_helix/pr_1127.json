{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTE1OTE5", "number": 1127, "title": "Fix validation logic in GenericApiBuilders and add usage tests", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1121\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nSome of the validation logic in GenericBaseDataAccessorBuilder and GenericZkHelixApiBuilder were confusing and there were no usage tests. This commit reviews the consistency between validate methods of BaseDataAccessor APIs and writes test cases to demonstrate how they should be used.\nAlso, connection timeout setting wasn't being honored in the createZkClient() methods, so this bug was fixed as well.\ncreateZkConnectionConfig() was removed from RealmAwareZkClient because the intended purpose of this method isn't clear and was not being used anywhere else.\nTests\n\n The following tests are written for this issue:\n\nTestMultiZkHelixJavaApis\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nzookeeper-api:\n[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 51.491 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 37, Failures: 0, Errors: 0, Skipped: 0\n\nhelix-core:\n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:116 \u00bb ThreadTimeout Method...\n[ERROR]   TestAutoRebalanceWithDisabledInstance.testDisableEnableInstanceAutoRebalance:69 expected:<true> but was:<false>\n[ERROR]   TestClusterInMaintenanceModeWhenReachingMaxPartition.testDisableCluster:119 expected:<true> but was:<false>\n[ERROR]   TestTaskPerformanceMetrics.testTaskPerformanceMetrics:128 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1149, Failures: 4, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n\nRan the failures individually:\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 50.52 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  56.059 s\n[INFO] Finished at: 2020-07-01T12:05:50-07:00\n\nhelix-rest:\n[INFO] Tests run: 163, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 33.513 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 163, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-28T21:21:00Z", "url": "https://github.com/apache/helix/pull/1127", "merged": true, "mergeCommit": {"oid": "7f012c265f12b86511ac52d31979fcadb5ef3294"}, "closed": true, "closedAt": "2020-07-05T21:37:55Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvzF4HAH2gAyNDQxMTE1OTE5OjRlZjc5MTM3YTVmZWYzZWU4MDllNTA4MzY2YzUzOWYzOWJlZTA4OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwugcXgFqTQ0MTEwMjM4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ef79137a5fef3ee809e508366c539f39bee088b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/4ef79137a5fef3ee809e508366c539f39bee088b", "committedDate": "2020-06-28T21:12:06Z", "message": "Fix validation logic in GenericApiBuilders and add usage tests\n\nSome of the validation logic in GenericBaseDataAccessorBuilder and GenericZkHelixApiBuilder were confusing and there were no usage tests. This commit reviews the consistency between validate methods of BaseDataAccessor APIs and writes test cases to demonstrate how they should be used.\n\nAlso, connection timeout setting wasn't being honored in the createZkClient() methods, so this bug was fixed as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac70f4805154f3e833465669645854a2c472d96a", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/ac70f4805154f3e833465669645854a2c472d96a", "committedDate": "2020-06-28T21:16:55Z", "message": "Clean up the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6123ca7d25b0dcc654862cf52cb8b4ffd13c5784", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/6123ca7d25b0dcc654862cf52cb8b4ffd13c5784", "committedDate": "2020-06-28T21:56:43Z", "message": "Fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTcwNTE1", "url": "https://github.com/apache/helix/pull/1127#pullrequestreview-439570515", "createdAt": "2020-06-29T23:33:17Z", "commit": {"oid": "6123ca7d25b0dcc654862cf52cb8b4ffd13c5784"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozMzoxN1rOGqmGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozMzoxN1rOGqmGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzYwOA==", "bodyText": "Do we have some default mode for it? Shall we make it default behavior as single realm?", "url": "https://github.com/apache/helix/pull/1127#discussion_r447317608", "createdAt": "2020-06-29T23:33:17Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericBaseDataAccessorBuilder.java", "diffHunk": "@@ -123,23 +124,26 @@ protected RealmAwareZkClient createZkClient(RealmAwareZkClient.RealmMode realmMo\n \n   /**\n    * Validate ZkClientType based on RealmMode.\n+   * If ZkClientType is DEDICATED or SHARED, the realm mode must be SINGLE-REALM.\n+   * If ZkClientType is FEDERATED, the realm mode must be MULTI-REALM.\n    * @param zkClientType\n    * @param realmMode\n    */\n   private void validateZkClientType(ZkClientType zkClientType,\n       RealmAwareZkClient.RealmMode realmMode) {\n-    boolean isZkClientTypeSet = zkClientType != null;\n-    // If ZkClientType is set, RealmMode must either be single-realm or not set.\n-    if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n-      throw new HelixException(\"ZkClientType cannot be set on multi-realm mode!\");\n+    if (realmMode == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6123ca7d25b0dcc654862cf52cb8b4ffd13c5784"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTgzNTI4", "url": "https://github.com/apache/helix/pull/1127#pullrequestreview-439583528", "createdAt": "2020-06-30T00:11:38Z", "commit": {"oid": "6123ca7d25b0dcc654862cf52cb8b4ffd13c5784"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxMTozOFrOGqm3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxMTozOFrOGqm3Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMDA4Mg==", "bodyText": "In this case, shall we merge the realm option into the enum item's fields? Then we don't need to check since the user cannot configure this option.", "url": "https://github.com/apache/helix/pull/1127#discussion_r447330082", "createdAt": "2020-06-30T00:11:38Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/ZkClientType.java", "diffHunk": "@@ -25,18 +25,24 @@\n    * creation, callback functionality, and session management. But note that this is more\n    * resource-heavy since it creates a dedicated ZK connection so should be used sparingly only\n    * when the aforementioned features are needed.\n+   *\n+   * Valid on SINGLE_REALM only.\n    */\n   DEDICATED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6123ca7d25b0dcc654862cf52cb8b4ffd13c5784"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721274e8c45aa0554bff5989a83e8b01212cc6bf", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/721274e8c45aa0554bff5989a83e8b01212cc6bf", "committedDate": "2020-06-30T22:45:22Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDM4MzUx", "url": "https://github.com/apache/helix/pull/1127#pullrequestreview-440438351", "createdAt": "2020-06-30T22:50:49Z", "commit": {"oid": "721274e8c45aa0554bff5989a83e8b01212cc6bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTAyMzg0", "url": "https://github.com/apache/helix/pull/1127#pullrequestreview-441102384", "createdAt": "2020-07-01T18:25:31Z", "commit": {"oid": "721274e8c45aa0554bff5989a83e8b01212cc6bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoyNTozMVrOGrw0_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoyNTozMVrOGrw0_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTk1MA==", "bodyText": "If you think this is a bug we should fix, then we need to make clear definition of what is single realm and what is multi realm. My original thought was if you are using sharding key to determine the ZK address then it is mutli realm.\nThen for dedicated zkclient, and shared zkclient, they can still use sharding key for searching zk address. Then it will be meaningless for dedicated/shared Zkclient to have the sharding key and they will only accept the ZK address. This conflict with what we have changed.", "url": "https://github.com/apache/helix/pull/1127#discussion_r448541950", "createdAt": "2020-07-01T18:25:31Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/GenericBaseDataAccessorBuilder.java", "diffHunk": "@@ -82,38 +82,28 @@ protected RealmAwareZkClient createZkClient(RealmAwareZkClient.RealmMode realmMo\n     switch (realmMode) {\n       case MULTI_REALM:\n         try {\n-          if (_zkClientType == ZkClientType.DEDICATED) {\n-            // Use a realm-aware dedicated zk client\n-            zkClient = DedicatedZkClientFactory.getInstance()\n-                .buildZkClient(connectionConfig, clientConfig);\n-          } else if (_zkClientType == ZkClientType.SHARED) {\n-            // Use a realm-aware shared zk client\n-            zkClient =\n-                SharedZkClientFactory.getInstance().buildZkClient(connectionConfig, clientConfig);\n-          } else {\n-            zkClient = new FederatedZkClient(connectionConfig, clientConfig);\n-          }\n-        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+          zkClient = new FederatedZkClient(connectionConfig, clientConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721274e8c45aa0554bff5989a83e8b01212cc6bf"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}