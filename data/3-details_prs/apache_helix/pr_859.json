{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTU1MDI1", "number": 859, "title": "Update customize state using updater", "bodyText": "Description\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCurrently the update customized state method is made synchronized for concurrency control. This PR modifies the implementation of update to leave the responsibility of concurrency control to ZooKeeper by using updater to update the customize state. With delete method already implemented with updater, we can prevent unexpected change of the customize state data.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n===============================================\nDefault Suite\nTotal tests run: 6, Failures: 0, Skips: 0\n===============================================\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-04T23:03:22Z", "url": "https://github.com/apache/helix/pull/859", "merged": true, "mergeCommit": {"oid": "db5bbd3ae8179559c459a168046b5a17ea3b1985"}, "closed": true, "closedAt": "2020-03-11T17:45:59Z", "author": {"login": "mgao0"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKfMlwAFqTM2OTE4OTk4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMH6ESAFqTM3MTYyMjEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTg5OTg5", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-369189989", "createdAt": "2020-03-04T23:06:08Z", "commit": {"oid": "e4412e194f2609cd51d9eb74bf50e5313ae9385e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzQyMTA0", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-369342104", "createdAt": "2020-03-05T07:25:33Z", "commit": {"oid": "e4412e194f2609cd51d9eb74bf50e5313ae9385e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzoyNTozM1rOFyIv8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzoyNTozM1rOFyIv8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExNjQ2Ng==", "bodyText": "Why we need the synchronized keyword at the first place? ZK should be the one who takes care of concurrent control, right?", "url": "https://github.com/apache/helix/pull/859#discussion_r388116466", "createdAt": "2020-03-05T07:25:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProvider.java", "diffHunk": "@@ -113,7 +113,7 @@ public CustomizedState getCustomizedState(String customizedStateName, String res\n   /**\n    * Delete the customized state for a specified resource and a specified partition\n    */\n-  public void deletePerPartitionCustomizedState(String customizedStateName, String resourceName,\n+  public synchronized void deletePerPartitionCustomizedState(String customizedStateName, String resourceName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4412e194f2609cd51d9eb74bf50e5313ae9385e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODAzNTcw", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-369803570", "createdAt": "2020-03-05T18:18:02Z", "commit": {"oid": "e4412e194f2609cd51d9eb74bf50e5313ae9385e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "650e9ab9c5667fe019853db768f1d1520565eadb", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/650e9ab9c5667fe019853db768f1d1520565eadb", "committedDate": "2020-03-07T00:11:54Z", "message": "Improve CustomizedStateProvider tests (#840)\n\nAdd tests to make CustomizedStateProvider tests comprehensive."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099d5d7216424df3c29a5278ca40d8831476ba29", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/099d5d7216424df3c29a5278ca40d8831476ba29", "committedDate": "2020-03-07T00:12:00Z", "message": "Add 'synchronized' key word to delete method in CustomizedStateProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9334d81b56ae320f2ffcb0326bb653b641e92f", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/5b9334d81b56ae320f2ffcb0326bb653b641e92f", "committedDate": "2020-03-07T00:12:07Z", "message": "Modify update customized state method to leverage ZNRecordUpdater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/790a19b427c336e5646ffc55c761d0b05a620b23", "committedDate": "2020-03-07T00:13:02Z", "message": "Updated commit author info"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76c105b0925f4ae810980a3f3c8804f67b64897d", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/76c105b0925f4ae810980a3f3c8804f67b64897d", "committedDate": "2020-03-06T03:19:47Z", "message": "Modify update customized state method to leverage ZNRecordUpdater"}, "afterCommit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/790a19b427c336e5646ffc55c761d0b05a620b23", "committedDate": "2020-03-07T00:13:02Z", "message": "Updated commit author info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDc2MTM5", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-371476139", "createdAt": "2020-03-09T19:43:12Z", "commit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0MzoxMlrOFz2y7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0MzoxMlrOFz2y7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxOTQ3MA==", "bodyText": "This could go to beforeClass, right?", "url": "https://github.com/apache/helix/pull/859#discussion_r389919470", "createdAt": "2020-03-09T19:43:12Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/paticipant/TestCustomizedStateUpdate.java", "diffHunk": "@@ -19,54 +19,84 @@\n  * under the License.\n  */\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n+\n import org.apache.helix.HelixDataAccessor;\n import org.apache.helix.HelixManager;\n import org.apache.helix.HelixManagerFactory;\n import org.apache.helix.InstanceType;\n import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n import org.apache.helix.customizedstate.CustomizedStateProvider;\n import org.apache.helix.customizedstate.CustomizedStateProviderFactory;\n import org.apache.helix.integration.common.ZkStandAloneCMTestBase;\n import org.apache.helix.model.CustomizedState;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n+\n public class TestCustomizedStateUpdate extends ZkStandAloneCMTestBase {\n   private static Logger LOG = LoggerFactory.getLogger(TestCustomizedStateUpdate.class);\n   private final String CUSTOMIZE_STATE_NAME = \"testState1\";\n   private final String PARTITION_NAME1 = \"testPartition1\";\n   private final String PARTITION_NAME2 = \"testPartition2\";\n   private final String RESOURCE_NAME = \"testResource1\";\n+  private final String PARTITION_STATE = \"partitionState\";\n+  private static HelixManager _manager;\n+  private static CustomizedStateProvider _mockProvider;\n \n-  @Test\n-  public void testUpdateCustomizedState() throws Exception {\n-    HelixManager manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"admin\",\n-        InstanceType.ADMINISTRATOR, ZK_ADDR);\n-    manager.connect();\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    super.beforeClass();\n+    _manager = HelixManagerFactory\n+        .getZKHelixManager(CLUSTER_NAME, \"admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n+    _manager.connect();\n     _participants[0].connect();\n+    _mockProvider = CustomizedStateProviderFactory.getInstance()\n+        .buildCustomizedStateProvider(_manager, _participants[0].getInstanceName());\n+  }\n+\n+  @AfterClass\n+  public void afterClass() throws Exception {\n+    super.afterClass();\n+    _manager.disconnect();\n+  }\n \n-    HelixDataAccessor dataAccessor = manager.getHelixDataAccessor();\n+  @BeforeMethod\n+  public void beforeMethod() {\n+    HelixDataAccessor dataAccessor = _manager.getHelixDataAccessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDc2ODgx", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-371476881", "createdAt": "2020-03-09T19:44:19Z", "commit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NDoxOVrOFz21Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NDoxOVrOFz21Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMDA3MQ==", "bodyText": "Not a good idea to use 'n's like this - please either make it a int constant or make it more descriptive.", "url": "https://github.com/apache/helix/pull/859#discussion_r389920071", "createdAt": "2020-03-09T19:44:19Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/paticipant/TestCustomizedStateUpdate.java", "diffHunk": "@@ -113,40 +143,176 @@ public void testUpdateCustomizedState() throws Exception {\n     Map<String, String> stateMap2 = new HashMap<>();\n     stateMap2.put(\"PREVIOUS_STATE\", \"STARTED\");\n     stateMap2.put(\"CURRENT_STATE\", \"END_OF_PUSH_RECEIVED\");\n-    mockProvider.updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2,\n-        stateMap2);\n+    _mockProvider\n+        .updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2, stateMap2);\n \n-    customizedState = mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n+    customizedState = _mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n     Assert.assertNotNull(customizedState);\n     Assert.assertEquals(customizedState.getId(), RESOURCE_NAME);\n     mapView = customizedState.getRecord().getMapFields();\n     Assert.assertEquals(mapView.keySet().size(), 2);\n-    Assert.assertEqualsNoOrder(mapView.keySet().toArray(), new String[] {\n-        PARTITION_NAME1, PARTITION_NAME2\n-    });\n+    Assert.assertEqualsNoOrder(mapView.keySet().toArray(),\n+        new String[]{PARTITION_NAME1, PARTITION_NAME2});\n \n-    Map<String, String> partitionMap1 = mockProvider\n+    Map<String, String> partitionMap1 = _mockProvider\n         .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1);\n     Assert.assertEquals(partitionMap1.keySet().size(), 2);\n     Assert.assertEquals(partitionMap1.get(\"PREVIOUS_STATE\"), \"END_OF_PUSH_RECEIVED\");\n     Assert.assertEquals(partitionMap1.get(\"CURRENT_STATE\"), \"COMPLETED\");\n \n-    Map<String, String> partitionMap2 = mockProvider\n+    Map<String, String> partitionMap2 = _mockProvider\n         .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2);\n     Assert.assertEquals(partitionMap2.keySet().size(), 2);\n     Assert.assertEquals(partitionMap2.get(\"PREVIOUS_STATE\"), \"STARTED\");\n     Assert.assertEquals(partitionMap2.get(\"CURRENT_STATE\"), \"END_OF_PUSH_RECEIVED\");\n \n     // test delete customized state for a partition\n-    mockProvider.deletePerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME,\n-        PARTITION_NAME1);\n-    customizedState = mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n+    _mockProvider\n+        .deletePerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1);\n+    customizedState = _mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n     Assert.assertNotNull(customizedState);\n     Assert.assertEquals(customizedState.getId(), RESOURCE_NAME);\n     mapView = customizedState.getRecord().getMapFields();\n     Assert.assertEquals(mapView.keySet().size(), 1);\n     Assert.assertEquals(mapView.keySet().iterator().next(), PARTITION_NAME2);\n+  }\n+\n+  @Test\n+  public void testUpdateSinglePartitionCustomizedState() {\n+    _mockProvider.updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1,\n+        PARTITION_STATE);\n+\n+    // get customized state\n+    CustomizedState customizedState =\n+        _mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n+    Assert.assertEquals(\n+        customizedState.getPartitionStateMap(CustomizedState.CustomizedStateProperty.CURRENT_STATE)\n+            .size(), 1);\n+    Map<String, String> map = new HashMap<>();\n+    map.put(PARTITION_NAME1, null);\n+    Assert.assertEquals(customizedState\n+        .getPartitionStateMap(CustomizedState.CustomizedStateProperty.PREVIOUS_STATE), map);\n+    Assert.assertEquals(\n+        customizedState.getPartitionStateMap(CustomizedState.CustomizedStateProperty.START_TIME),\n+        map);\n+    Assert.assertEquals(\n+        customizedState.getPartitionStateMap(CustomizedState.CustomizedStateProperty.END_TIME),\n+        map);\n+    Assert.assertEquals(customizedState.getState(PARTITION_NAME1), PARTITION_STATE);\n+    Assert.assertNull(customizedState.getState(PARTITION_NAME2));\n+    Assert.assertTrue(customizedState.isValid());\n+\n+    // get per partition customized state\n+    map = new HashMap<>();\n+    map.put(CustomizedState.CustomizedStateProperty.CURRENT_STATE.name(), PARTITION_STATE);\n+    Map<String, String> partitionCustomizedState = _mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1);\n+    Assert.assertEquals(partitionCustomizedState, map);\n+    Assert.assertNull(_mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2));\n+  }\n+\n+  @Test\n+  public void testUpdateSinglePartitionCustomizedStateWithNullField() {\n+    _mockProvider\n+        .updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1, (String) null);\n+\n+    // get customized state\n+    CustomizedState customizedState =\n+        _mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n+    Map<String, String> map = new HashMap<>();\n+    map.put(PARTITION_NAME1, null);\n+    Assert.assertEquals(\n+        customizedState.getPartitionStateMap(CustomizedState.CustomizedStateProperty.CURRENT_STATE),\n+        map);\n+    Assert.assertEquals(customizedState.getState(PARTITION_NAME1), null);\n+    Assert.assertTrue(customizedState.isValid());\n+\n+    // get per partition customized state\n+    map = new HashMap<>();\n+    map.put(CustomizedState.CustomizedStateProperty.CURRENT_STATE.name(), null);\n+    Map<String, String> partitionCustomizedState = _mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1);\n+    Assert.assertEquals(partitionCustomizedState, map);\n+    Assert.assertNull(_mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2));\n+  }\n+\n+  @Test\n+  public void testUpdateCustomizedStateWithEmptyMap() {\n+    _mockProvider.updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1,\n+        new HashMap<>());\n+\n+    // get customized state\n+    CustomizedState customizedState =\n+        _mockProvider.getCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME);\n+    Assert.assertNull(customizedState.getState(PARTITION_NAME1));\n+    Map<String, String> partitionStateMap =\n+        customizedState.getPartitionStateMap(CustomizedState.CustomizedStateProperty.CURRENT_STATE);\n+    Assert.assertNotNull(partitionStateMap);\n+    Assert.assertTrue(partitionStateMap.containsKey(PARTITION_NAME1));\n+    Assert.assertNull(partitionStateMap.get(PARTITION_NAME1));\n+    Assert.assertNull(customizedState.getState(PARTITION_NAME1));\n+    Assert.assertFalse(partitionStateMap.containsKey(PARTITION_NAME2));\n+    Assert.assertTrue(customizedState.isValid());\n+\n+    // get per partition customized state\n+    Map<String, String> partitionCustomizedState = _mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1);\n+    Assert.assertEquals(partitionCustomizedState.size(), 0);\n+    Assert.assertNull(_mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2));\n+  }\n+\n+  @Test\n+  public void testDeleteNonExistingPerPartitionCustomizedState() {\n+    _mockProvider.updateCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1,\n+        PARTITION_STATE);\n+    _mockProvider\n+        .deletePerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2);\n+    Assert.assertNotNull(_mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME1));\n+    Assert.assertNull(_mockProvider\n+        .getPerPartitionCustomizedState(CUSTOMIZE_STATE_NAME, RESOURCE_NAME, PARTITION_NAME2));\n+  }\n+\n+  @Test\n+  public void testSimultaneousUpdateCustomizedState() {\n+    int n = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "originalPosition": 274}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjAxMTQ3", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-371601147", "createdAt": "2020-03-09T23:53:26Z", "commit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo1MzoyNlrOFz9IgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo1MzoyNlrOFz9IgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMzI5Ng==", "bodyText": "It is not clear what the original code tries to do here. It seems trying to merge the map. But not really doing so. Can you confirm the original logic is right or not?\nThe concern is that the default update method is doing deep merge. That is if you have an existing state map with some stale states, even after merging, those stale states will be kept in the map. But I assume we should clean those stale states for updating?", "url": "https://github.com/apache/helix/pull/859#discussion_r390023296", "createdAt": "2020-03-09T23:53:26Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/customizedstate/CustomizedStateProvider.java", "diffHunk": "@@ -61,29 +61,16 @@ public synchronized void updateCustomizedState(String customizedStateName, Strin\n    * Update a specific customized state based on the resource name and partition name. The\n    * customized state is input as a map\n    */\n-  public synchronized void updateCustomizedState(String customizedStateName, String resourceName,\n+  public void updateCustomizedState(String customizedStateName, String resourceName,\n       String partitionName, Map<String, String> customizedStateMap) {\n     PropertyKey.Builder keyBuilder = _helixDataAccessor.keyBuilder();\n     PropertyKey propertyKey =\n         keyBuilder.customizedState(_instanceName, customizedStateName, resourceName);\n     ZNRecord record = new ZNRecord(resourceName);\n-    Map<String, Map<String, String>> mapFields = new HashMap<>();\n-    CustomizedState existingState = getCustomizedState(customizedStateName, resourceName);\n-    if (existingState != null\n-        && existingState.getRecord().getMapFields().containsKey(partitionName)) {\n-      Map<String, String> existingMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790a19b427c336e5646ffc55c761d0b05a620b23"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e587596dcb70693e524e433467bb46a2d68570b3", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/e587596dcb70693e524e433467bb46a2d68570b3", "committedDate": "2020-03-10T00:42:15Z", "message": "Clean up test code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e627a7a617cf898ffd358bf848480d4d2c51b1d0", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/e627a7a617cf898ffd358bf848480d4d2c51b1d0", "committedDate": "2020-03-10T00:37:58Z", "message": "Clean up test code"}, "afterCommit": {"oid": "e587596dcb70693e524e433467bb46a2d68570b3", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/e587596dcb70693e524e433467bb46a2d68570b3", "committedDate": "2020-03-10T00:42:15Z", "message": "Clean up test code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed640f4c712b207f69bb0cae87736ec5ef32d00", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/9ed640f4c712b207f69bb0cae87736ec5ef32d00", "committedDate": "2020-03-10T00:44:13Z", "message": "Merge branch 'customizeView' into customizeView"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjIyMTI1", "url": "https://github.com/apache/helix/pull/859#pullrequestreview-371622125", "createdAt": "2020-03-10T01:05:57Z", "commit": {"oid": "9ed640f4c712b207f69bb0cae87736ec5ef32d00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4663, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}