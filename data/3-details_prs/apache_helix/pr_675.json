{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDk3ODkw", "number": 675, "title": "Add REST API for Cluster Creation with CloudConfig", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR title:\nFixes #674\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nThis PR contains the relevant REST API calls for cluster creation.\nThis change allows user to create cluster with CloudConfig.\nMultiple tests have been added in order to check the functionality of REST calls.\n\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nNew tests have been added.\nTestCloudAccessor.testAddCloudConfigNonExistedCluster\nTestCloudAccessor.testAddCloudConfig\nTestCloudAccessor.testDeleteCloudConfig\nTestCloudAccessor.testUpdateCloudConfig\nTestClusterAccessor.testAddClusterWithCloudConfig\nTestClusterAccessor.testAddClusterWithInvalidCloudConfig\nTestClusterAccessor.testAddClusterWithInvalidCustomizedCloudConfig\nTestClusterAccessor.testAddClusterWithValidCustomizedCloudConfig\nTestClusterAccessor.testAddClusterWithCloudConfigDisabledCloud\n\nTest Result 1: helix-core: mvn test\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,444.069 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 904, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  57:29 min\n[INFO] Finished at: 2020-01-06T17:05:55-08:00\n[INFO] ------------------------------------------------------------------------\nTest Result 2: helix-rest: mvn test\n[INFO] Tests run: 99, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.832 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 99, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  32.481 s\n[INFO] Finished at: 2020-01-07T09:25:20-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-07T17:38:21Z", "url": "https://github.com/apache/helix/pull/675", "merged": true, "mergeCommit": {"oid": "2508d4853d558a3e786b4bf4eafd0135c6e37926"}, "closed": true, "closedAt": "2020-01-20T09:16:46Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4EFfFAH2gAyMzYwMDk3ODkwOjEyZjNjNjZiMWMyZTIwYjAxODM3NjE4MzIzODk1MTY4ZTliNWU0M2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb75bY9AFqTM0NTAwODA2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/12f3c66b1c2e20b01837618323895168e9b5e43d", "committedDate": "2020-01-07T17:20:18Z", "message": "Add REST API for Cluster Creation with CloudConfig\n\nThis commit contains the relevant REST cluster creation.\nThis change allows user to create cluster with CloudConfig.\nMultiple tests have been added in order to check the functionality of REST calls."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDIxODc4", "url": "https://github.com/apache/helix/pull/675#pullrequestreview-339421878", "createdAt": "2020-01-07T18:29:31Z", "commit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODoyOTozMlrOFbB6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTowNzozNlrOFbC32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4NzI0NA==", "bodyText": "Does this work? It conflict with ClusterAccessor. It would be better to merge the logic into ClusterAccessor.", "url": "https://github.com/apache/helix/pull/675#discussion_r363887244", "createdAt": "2020-01-07T18:29:32Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/CloudAccessor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.helix.rest.server.resources.helix;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/clusters\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NjczOQ==", "bodyText": "Let's reorganize the code. There are duplicated pieces.\nYou can:\n\nDefine CloudConfig object\nCreate this object if enabled and move this piece of code to a separate function. Otherwise, keep it as null.\nCall the addCluster with CloudConfig object.", "url": "https://github.com/apache/helix/pull/675#discussion_r363896739", "createdAt": "2020-01-07T18:52:10Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -132,18 +133,42 @@ public Response getClusterInfo(@PathParam(\"clusterId\") String clusterId) {\n   @PUT\n   @Path(\"{clusterId}\")\n   public Response createCluster(@PathParam(\"clusterId\") String clusterId,\n-      @DefaultValue(\"false\") @QueryParam(\"recreate\") String recreate) {\n+      @DefaultValue(\"false\") @QueryParam(\"recreate\") String recreate,\n+      @DefaultValue(\"false\") @QueryParam(\"addCloudConfig\") String addCloudConfig,\n+      String content) {\n+\n     boolean recreateIfExists = Boolean.valueOf(recreate);\n+    boolean cloudConfigIncluded = Boolean.valueOf(addCloudConfig);\n+\n+\n     ClusterSetup clusterSetup = getClusterSetup();\n \n-    try {\n-      clusterSetup.addCluster(clusterId, recreateIfExists);\n-    } catch (Exception ex) {\n-      _logger.error(\"Failed to create cluster \" + clusterId + \", exception: \" + ex);\n-      return serverError(ex);\n-    }\n+    if (!cloudConfigIncluded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NzE5NA==", "bodyText": "Let's make it as a general function in AbstractResourceAccessor since it has been widely used in the code.\nSame as following places", "url": "https://github.com/apache/helix/pull/675#discussion_r363897194", "createdAt": "2020-01-07T18:53:18Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/CloudAccessor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.helix.rest.server.resources.helix;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/clusters\")\n+public class CloudAccessor extends AbstractHelixResource {\n+  private static Logger _logger = LoggerFactory.getLogger(CloudAccessor.class.getName());\n+\n+  @PUT\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response addCloudConfig(@PathParam(\"clusterId\") String clusterId, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkwMTU4Mg==", "bodyText": "Let's have another catch for HelixException to differentiate it with other general error. It could be validation exception.\nSame as following places.", "url": "https://github.com/apache/helix/pull/675#discussion_r363901582", "createdAt": "2020-01-07T19:04:01Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/CloudAccessor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.helix.rest.server.resources.helix;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/clusters\")\n+public class CloudAccessor extends AbstractHelixResource {\n+  private static Logger _logger = LoggerFactory.getLogger(CloudAccessor.class.getName());\n+\n+  @PUT\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response addCloudConfig(@PathParam(\"clusterId\") String clusterId, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CloudConfig cloudConfig = new CloudConfig.Builder(record).build();\n+      admin.addCloudConfig(clusterId, cloudConfig);\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkwMjM5Ng==", "bodyText": "This is not a good practice here. User may get confused with 404 and without any other information here. Let's have clear message that cluster is not properly setup.\nSame as following places.", "url": "https://github.com/apache/helix/pull/675#discussion_r363902396", "createdAt": "2020-01-07T19:06:10Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/CloudAccessor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.helix.rest.server.resources.helix;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/clusters\")\n+public class CloudAccessor extends AbstractHelixResource {\n+  private static Logger _logger = LoggerFactory.getLogger(CloudAccessor.class.getName());\n+\n+  @PUT\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response addCloudConfig(@PathParam(\"clusterId\") String clusterId, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkwMjkzNw==", "bodyText": "move record read before command switch.", "url": "https://github.com/apache/helix/pull/675#discussion_r363902937", "createdAt": "2020-01-07T19:07:36Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/CloudAccessor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.helix.rest.server.resources.helix;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.IOException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZKUtil;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/clusters\")\n+public class CloudAccessor extends AbstractHelixResource {\n+  private static Logger _logger = LoggerFactory.getLogger(CloudAccessor.class.getName());\n+\n+  @PUT\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response addCloudConfig(@PathParam(\"clusterId\") String clusterId, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CloudConfig cloudConfig = new CloudConfig.Builder(record).build();\n+      admin.addCloudConfig(clusterId, cloudConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Error in adding a CloudConfig to cluster: \" + clusterId, ex);\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response getCloudConfig(@PathParam(\"clusterId\") String clusterId) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = new ConfigAccessor(zkClient);\n+    CloudConfig cloudConfig = configAccessor.getCloudConfig(clusterId);\n+\n+    if (cloudConfig != null) {\n+      return JSONRepresentation(cloudConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response updateCloudConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      switch (command) {\n+        case delete: {\n+          admin.removeCloudConfig(clusterId);\n+        }\n+        break;\n+        case update: {\n+          ZNRecord record;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f3c66b1c2e20b01837618323895168e9b5e43d"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9884f2829a3c0875acfea2fd1cefef22d7da4b6", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/d9884f2829a3c0875acfea2fd1cefef22d7da4b6", "committedDate": "2020-01-14T22:39:19Z", "message": "fix reviewer comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTUzNDU5", "url": "https://github.com/apache/helix/pull/675#pullrequestreview-343553459", "createdAt": "2020-01-15T22:04:50Z", "commit": {"oid": "d9884f2829a3c0875acfea2fd1cefef22d7da4b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjowNDo1MFrOFeH8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjowNDo1MFrOFeH8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMTY1MA==", "bodyText": "This is not badRequest. It may be something related to internal server error.", "url": "https://github.com/apache/helix/pull/675#discussion_r367131650", "createdAt": "2020-01-15T22:04:50Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -514,6 +533,119 @@ private boolean doesClusterExist(String cluster) {\n     return ZKUtil.isClusterSetup(cluster, zkClient);\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/cloudconfig\")\n+  public Response addCloudConfig(@PathParam(\"clusterId\") String clusterId, String content) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CloudConfig cloudConfig = new CloudConfig.Builder(record).build();\n+      admin.addCloudConfig(clusterId, cloudConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CloudConfig to cluster: \" + clusterId, ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CloudConfig to cluster: \" + clusterId, ex);\n+      return badRequest(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9884f2829a3c0875acfea2fd1cefef22d7da4b6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67d349a2b43c158a5adf4b5467c3b0b24efacf8", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/a67d349a2b43c158a5adf4b5467c3b0b24efacf8", "committedDate": "2020-01-16T03:04:42Z", "message": "change badrequest to server error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDA4MDYx", "url": "https://github.com/apache/helix/pull/675#pullrequestreview-345008061", "createdAt": "2020-01-19T15:10:58Z", "commit": {"oid": "a67d349a2b43c158a5adf4b5467c3b0b24efacf8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4848, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}