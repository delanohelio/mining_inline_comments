{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjE5Mzg0", "number": 1129, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNToyNVrOEJ1igg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1MjoyMlrOEW9a3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzQ5ODI2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNToyNlrOGqiyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTozMjoyOVrOGqi-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzI5MQ==", "bodyText": "No validation of post results?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447263291", "createdAt": "2020-06-29T21:25:26Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")\n+  public void testValidateDeltaInstanceConfigForUpdate() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    // Enable Topology aware for the cluster\n+    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    String instanceName = CLUSTER_NAME + \"localhost_12918\";\n+    InstanceConfig instanceConfig = _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName);\n+\n+    // Update InstanceConfig with Topology Info\n+    String domain = \"Rack=rack1, Sub-Rack=Sub-Rack1, Host=Host-1\";\n+    ZNRecord record = instanceConfig.getRecord();\n+    record.getSimpleFields().put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), domain);\n+\n+    // Add these fields by way of \"update\"\n+    Entity entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    Response response = new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);\n+    // Check that the fields have been added\n+    Assert.assertEquals(response.getStatus(), 200);\n+    // Check the cluster config is updated\n+    Assert.assertEquals(\n+        _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName).getDomainAsString(), domain);\n+\n+    // set domain to an invalid value\n+    record.getSimpleFields()\n+        .put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), \"InvalidDomainValue\");\n+    entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    // Updating using an invalid domain value should return a non-OK response\n+    new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .expectedReturnStatusCode(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2Mzk1MA==", "bodyText": "TFTR.\nRespond status code is validated at line 511. Maybe we could validate the exception body/message as well?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447263950", "createdAt": "2020-06-29T21:26:47Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")\n+  public void testValidateDeltaInstanceConfigForUpdate() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    // Enable Topology aware for the cluster\n+    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    String instanceName = CLUSTER_NAME + \"localhost_12918\";\n+    InstanceConfig instanceConfig = _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName);\n+\n+    // Update InstanceConfig with Topology Info\n+    String domain = \"Rack=rack1, Sub-Rack=Sub-Rack1, Host=Host-1\";\n+    ZNRecord record = instanceConfig.getRecord();\n+    record.getSimpleFields().put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), domain);\n+\n+    // Add these fields by way of \"update\"\n+    Entity entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    Response response = new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);\n+    // Check that the fields have been added\n+    Assert.assertEquals(response.getStatus(), 200);\n+    // Check the cluster config is updated\n+    Assert.assertEquals(\n+        _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName).getDomainAsString(), domain);\n+\n+    // set domain to an invalid value\n+    record.getSimpleFields()\n+        .put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), \"InvalidDomainValue\");\n+    entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    // Updating using an invalid domain value should return a non-OK response\n+    new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .expectedReturnStatusCode(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzI5MQ=="}, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NjA2Nw==", "bodyText": "I see.\nexpectedReturnStatusCode if get not expected code, what will happen? Did it throw an exception?\nBasically, will the 'mvn test' report the test as failure as the Assert failure will do?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447266067", "createdAt": "2020-06-29T21:31:21Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")\n+  public void testValidateDeltaInstanceConfigForUpdate() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    // Enable Topology aware for the cluster\n+    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    String instanceName = CLUSTER_NAME + \"localhost_12918\";\n+    InstanceConfig instanceConfig = _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName);\n+\n+    // Update InstanceConfig with Topology Info\n+    String domain = \"Rack=rack1, Sub-Rack=Sub-Rack1, Host=Host-1\";\n+    ZNRecord record = instanceConfig.getRecord();\n+    record.getSimpleFields().put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), domain);\n+\n+    // Add these fields by way of \"update\"\n+    Entity entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    Response response = new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);\n+    // Check that the fields have been added\n+    Assert.assertEquals(response.getStatus(), 200);\n+    // Check the cluster config is updated\n+    Assert.assertEquals(\n+        _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName).getDomainAsString(), domain);\n+\n+    // set domain to an invalid value\n+    record.getSimpleFields()\n+        .put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), \"InvalidDomainValue\");\n+    entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    // Updating using an invalid domain value should return a non-OK response\n+    new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .expectedReturnStatusCode(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzI5MQ=="}, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NjU1Ng==", "bodyText": "Yes it will.\nWhen I change the expected status to 200 in line 511 where the actual call returns 500, I got the following assertion error.\njava.lang.AssertionError: \nExpected :200\nActual   :500\n\n\tat org.testng.Assert.fail(Assert.java:89)\n\tat org.testng.Assert.failNotEquals(Assert.java:480)\n\tat org.testng.Assert.assertEquals(Assert.java:118)\n\tat org.testng.Assert.assertEquals(Assert.java:365)\n\tat org.testng.Assert.assertEquals(Assert.java:375)\n\tat org.apache.helix.rest.server.util.JerseyUriRequestBuilder.post(JerseyUriRequestBuilder.java:115)\n\tat org.apache.helix.rest.server.TestPerInstanceAccessor.testValidateDeltaInstanceConfigForUpdate(TestPerInstance\n        ......\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:110)", "url": "https://github.com/apache/helix/pull/1129#discussion_r447266556", "createdAt": "2020-06-29T21:32:29Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")\n+  public void testValidateDeltaInstanceConfigForUpdate() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    // Enable Topology aware for the cluster\n+    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    String instanceName = CLUSTER_NAME + \"localhost_12918\";\n+    InstanceConfig instanceConfig = _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName);\n+\n+    // Update InstanceConfig with Topology Info\n+    String domain = \"Rack=rack1, Sub-Rack=Sub-Rack1, Host=Host-1\";\n+    ZNRecord record = instanceConfig.getRecord();\n+    record.getSimpleFields().put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), domain);\n+\n+    // Add these fields by way of \"update\"\n+    Entity entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    Response response = new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);\n+    // Check that the fields have been added\n+    Assert.assertEquals(response.getStatus(), 200);\n+    // Check the cluster config is updated\n+    Assert.assertEquals(\n+        _configAccessor.getInstanceConfig(CLUSTER_NAME, instanceName).getDomainAsString(), domain);\n+\n+    // set domain to an invalid value\n+    record.getSimpleFields()\n+        .put(InstanceConfig.InstanceConfigProperty.DOMAIN.name(), \"InvalidDomainValue\");\n+    entity =\n+        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n+    // Updating using an invalid domain value should return a non-OK response\n+    new JerseyUriRequestBuilder(\n+        \"clusters/{}/instances/{}/configs?command=update&doSanityCheck=true\")\n+        .expectedReturnStatusCode(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+        .format(CLUSTER_NAME, INSTANCE_NAME).post(this, entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzI5MQ=="}, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzUwNDYwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToyNzoyNVrOGqi2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyMzo1MlrOG1L9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDI1Ng==", "bodyText": "If I understand correctly, we are testing changing instance config domain field via rest. Here, the validation of config is actually executed from rest server side, right?\nCan we add a small comment about the purpose of this test?", "url": "https://github.com/apache/helix/pull/1129#discussion_r447264256", "createdAt": "2020-06-29T21:27:25Z", "author": {"login": "kaisun2000"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2Nzg0Mw==", "bodyText": "This is correct. I will update.", "url": "https://github.com/apache/helix/pull/1129#discussion_r447867843", "createdAt": "2020-06-30T17:43:41Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDI1Ng=="}, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzU5OQ==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458423599", "createdAt": "2020-07-21T22:23:52Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -463,5 +464,53 @@ public void testValidateWeightForInstance()\n     // Must have the results saying they are all valid (true) because capacity keys are set\n     // in ClusterConfig\n     node.iterator().forEachRemaining(child -> Assert.assertTrue(child.getBooleanValue()));\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testValidateWeightForInstance\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDI1Ng=="}, "originalCommit": {"oid": "b9356d361522a26a897daf5d81d6d951603ed0f3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYzOTM0OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMToyMlrOGyUnzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNDo0NVrOG1L-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTg1NQ==", "bodyText": "Is this sanity check only for topology? If yes, let's name it as topoogy check for the perInstanceAccessor, because the sanity check should also involve the \"HELIX_PORT\" something like that in the simple field.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455419855", "createdAt": "2020-07-15T23:21:22Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -542,4 +558,23 @@ public Response getHealthReportsOnInstance(\n   private boolean validInstance(JsonNode node, String instanceName) {\n     return instanceName.equals(node.get(Properties.id.name()).getValueAsText());\n   }\n+\n+  private boolean validateDeltaInstanceConfigForUpdate(String clusterName, String instanceName,\n+      ConfigAccessor configAccessor, InstanceConfig newInstanceConfig, boolean isDelete)\n+      throws IllegalArgumentException {\n+    InstanceConfig originalInstanceConfigCopy =\n+        configAccessor.getInstanceConfig(clusterName, instanceName);\n+    if (isDelete) {\n+      for (Map.Entry<String, String> entry : newInstanceConfig.getRecord().getSimpleFields()\n+          .entrySet()) {\n+        originalInstanceConfigCopy.getRecord().getSimpleFields().remove(entry.getKey());\n+      }\n+    } else {\n+      originalInstanceConfigCopy.getRecord().update(newInstanceConfig.getRecord());\n+    }\n+\n+    return ConfigAccessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzk4NA==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458423984", "createdAt": "2020-07-21T22:24:45Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -542,4 +558,23 @@ public Response getHealthReportsOnInstance(\n   private boolean validInstance(JsonNode node, String instanceName) {\n     return instanceName.equals(node.get(Properties.id.name()).getValueAsText());\n   }\n+\n+  private boolean validateDeltaInstanceConfigForUpdate(String clusterName, String instanceName,\n+      ConfigAccessor configAccessor, InstanceConfig newInstanceConfig, boolean isDelete)\n+      throws IllegalArgumentException {\n+    InstanceConfig originalInstanceConfigCopy =\n+        configAccessor.getInstanceConfig(clusterName, instanceName);\n+    if (isDelete) {\n+      for (Map.Entry<String, String> entry : newInstanceConfig.getRecord().getSimpleFields()\n+          .entrySet()) {\n+        originalInstanceConfigCopy.getRecord().getSimpleFields().remove(entry.getKey());\n+      }\n+    } else {\n+      originalInstanceConfigCopy.getRecord().update(newInstanceConfig.getRecord());\n+    }\n+\n+    return ConfigAccessor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTg1NQ=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzU5NTM2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozNTozMVrOGywr0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNDo1NlrOG1L-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3OTYzNA==", "bodyText": "It should be okey to leave it \"instanceConfig\" instead of \"newInstanceConfig\", otherwise, you need to rename this parameter in all other \"set\" or \"update\" related methods to keep them consistent.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455879634", "createdAt": "2020-07-16T15:35:31Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -945,23 +947,23 @@ public void setInstanceConfig(String clusterName, String instanceName,\n    * replaced with the value of the same field in given config if it presents. If there is new field\n    * in given config but not in current config, the field will be added into the current config..\n    * The list fields and map fields will be replaced as a single entry.\n-   * The current Cluster config will be replaced with the given clusterConfig. WARNING: This is not\n+   * The current instanceConfig will be replaced with the given instanceConfig. WARNING: This is not\n    * thread-safe or concurrent updates safe.\n    * *\n    *\n    * @param clusterName\n    * @param instanceName\n-   * @param instanceConfig\n+   * @param newInstanceConfig\n    *\n    * @return\n    */\n   public void updateInstanceConfig(String clusterName, String instanceName,\n-      InstanceConfig instanceConfig) {\n-    updateInstanceConfig(clusterName, instanceName, instanceConfig, false);\n+      InstanceConfig newInstanceConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDA2Mw==", "bodyText": "Updated,", "url": "https://github.com/apache/helix/pull/1129#discussion_r458424063", "createdAt": "2020-07-21T22:24:56Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -945,23 +947,23 @@ public void setInstanceConfig(String clusterName, String instanceName,\n    * replaced with the value of the same field in given config if it presents. If there is new field\n    * in given config but not in current config, the field will be added into the current config..\n    * The list fields and map fields will be replaced as a single entry.\n-   * The current Cluster config will be replaced with the given clusterConfig. WARNING: This is not\n+   * The current instanceConfig will be replaced with the given instanceConfig. WARNING: This is not\n    * thread-safe or concurrent updates safe.\n    * *\n    *\n    * @param clusterName\n    * @param instanceName\n-   * @param instanceConfig\n+   * @param newInstanceConfig\n    *\n    * @return\n    */\n   public void updateInstanceConfig(String clusterName, String instanceName,\n-      InstanceConfig instanceConfig) {\n-    updateInstanceConfig(clusterName, instanceName, instanceConfig, false);\n+      InstanceConfig newInstanceConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3OTYzNA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzYxNzI5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MDo0MlrOGyw5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNTowMlrOG1L_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzIxMQ==", "bodyText": "Seems this method is not used by ConfigAccessor itself?  My suggestion is put this method into InstanceConfig (or ClusterConfig) and it does not have to be static (it can be called like myInstanceConfig.validateTopologySetting(String clusterTopologyString).", "url": "https://github.com/apache/helix/pull/1129#discussion_r455883211", "createdAt": "2020-07-16T15:40:42Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -1009,4 +1010,19 @@ public ConfigAccessor build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  /**\n+   * Validate if the topology related settings (Domain or ZoneId) in the given instanceConfig\n+   * are valid and align with current clusterConfig.\n+   * This function should be called when instance added to cluster or caller updates instanceConfig.\n+   *\n+   * @throws IllegalArgumentException\n+   */\n+  public static boolean validateTopologySettingInInstanceConfig(ClusterConfig clusterConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDExOA==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458424118", "createdAt": "2020-07-21T22:25:02Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -1009,4 +1010,19 @@ public ConfigAccessor build() {\n               _zkAddress), false);\n     }\n   }\n+\n+  /**\n+   * Validate if the topology related settings (Domain or ZoneId) in the given instanceConfig\n+   * are valid and align with current clusterConfig.\n+   * This function should be called when instance added to cluster or caller updates instanceConfig.\n+   *\n+   * @throws IllegalArgumentException\n+   */\n+  public static boolean validateTopologySettingInInstanceConfig(ClusterConfig clusterConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzIxMQ=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzYyMDQ2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0MToyN1rOGyw72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjo1Njo1NlrOG3J_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzczOA==", "bodyText": "Is this our new style to format a enum types?", "url": "https://github.com/apache/helix/pull/1129#discussion_r455883738", "createdAt": "2020-07-16T15:41:27Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -43,11 +43,11 @@\n  */\n public class Topology {\n   private static Logger logger = LoggerFactory.getLogger(Topology.class);\n+\n   public enum Types {\n-    ROOT,\n-    ZONE,\n-    INSTANCE\n+    ROOT, ZONE, INSTANCE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzQ5Nw==", "bodyText": "I think auto formatter changes this..", "url": "https://github.com/apache/helix/pull/1129#discussion_r458423497", "createdAt": "2020-07-21T22:23:34Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -43,11 +43,11 @@\n  */\n public class Topology {\n   private static Logger logger = LoggerFactory.getLogger(Topology.class);\n+\n   public enum Types {\n-    ROOT,\n-    ZONE,\n-    INSTANCE\n+    ROOT, ZONE, INSTANCE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzczOA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODU1OQ==", "bodyText": "IntelliJ formats the style. But maybe unnecessary. It is recommended to only format your changes. :)", "url": "https://github.com/apache/helix/pull/1129#discussion_r460488559", "createdAt": "2020-07-26T06:56:56Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -43,11 +43,11 @@\n  */\n public class Topology {\n   private static Logger logger = LoggerFactory.getLogger(Topology.class);\n+\n   public enum Types {\n-    ROOT,\n-    ZONE,\n-    INSTANCE\n+    ROOT, ZONE, INSTANCE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzczOA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY4MTcwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NToxMlrOGyxhpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNjozNlrOG1MBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MzQxNQ==", "bodyText": "Should we check this also before line 207?", "url": "https://github.com/apache/helix/pull/1129#discussion_r455893415", "createdAt": "2020-07-16T15:55:12Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,26 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      _helixAdmin.addInstance(_clusterName, instanceConfig);\n+    } else {\n+      ConfigAccessor.validateTopologySettingInInstanceConfig(\n+          _configAccessor.getClusterConfig(_clusterName), _instanceName,\n+          _configAccessor.getInstanceConfig(_clusterName,_instanceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDc2NA==", "bodyText": "The InstanceConfig is autogenerated for that branch before line 207. Do we also need to check that as well?", "url": "https://github.com/apache/helix/pull/1129#discussion_r458424764", "createdAt": "2020-07-21T22:26:36Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,26 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      _helixAdmin.addInstance(_clusterName, instanceConfig);\n+    } else {\n+      ConfigAccessor.validateTopologySettingInInstanceConfig(\n+          _configAccessor.getClusterConfig(_clusterName), _instanceName,\n+          _configAccessor.getInstanceConfig(_clusterName,_instanceName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MzQxNQ=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY5NzkxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1ODo0NlrOGyxrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNzoxNlrOG1MCzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTkyNA==", "bodyText": "My suggestion is to set doSanityCheck's default value being true, i.e, we should always validate the instance config unless it is explicitly override to not doing so.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455895924", "createdAt": "2020-07-16T15:58:46Z", "author": {"login": "lei-xia"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -287,6 +288,7 @@ public Response getInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n   @Path(\"configs\")\n   public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n       @PathParam(\"instanceName\") String instanceName, @QueryParam(\"command\") String commandStr,\n+      @DefaultValue(\"false\") @QueryParam(\"doSanityCheck\") boolean doSanityCheck,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNTAzOA==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458425038", "createdAt": "2020-07-21T22:27:16Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -287,6 +288,7 @@ public Response getInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n   @Path(\"configs\")\n   public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n       @PathParam(\"instanceName\") String instanceName, @QueryParam(\"command\") String commandStr,\n+      @DefaultValue(\"false\") @QueryParam(\"doSanityCheck\") boolean doSanityCheck,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTkyNA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzcwMzExOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMDowMlrOGyxuxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMDowMlrOGyxuxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5Njc3NQ==", "bodyText": "If possible, let us return some useful error information to the caller, for example, where is the format error, such as \"Invalid topology setting\", etc.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455896775", "createdAt": "2020-07-16T16:00:02Z", "author": {"login": "lei-xia"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,19 +310,33 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n+    if (doSanityCheck && (command == Command.delete || command == Command.update)) {\n+      try {\n+        validateDeltaInstanceConfigForUpdate(clusterId, instanceName, configAccessor,\n+            instanceConfig, command == Command.delete);\n+      } catch (IllegalArgumentException ex) {\n+        LOG.error(\n+            String.format(\"Error in update instance config for instance: %s\", instanceName),\n+            ex);\n+        return serverError(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzgxMjQyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNTo1OFrOGyyzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMToxODo1OFrOG1PRIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNDI3NA==", "bodyText": "Using input parameters to populate output values is generally not a best practice, maybe fine given this is just private method. But let us see if we find a better way to return these values.", "url": "https://github.com/apache/helix/pull/1129#discussion_r455914274", "createdAt": "2020-07-16T16:25:58Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,16 +220,57 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate clusterTopologyKeys and defaultDomainPathValues from clusterConfig\n+   *\n+   * @param clusterTopologyKeys       out parameter. LinkedHashSet to be populated for cluster\n+   *                                  topology keys. The set will remain empty if topology aware is\n+   *                                  not enabled or this cluster uses zone instead of domains.\n+   * @param defaultDomainPathValues   out parameter. Map to be populated for all default path keys.\n+   *                                  The map will remain empty if topology aware is not enabled or\n+   *                                  this cluster uses zone instead of domains.\n+   * @return lastValidType in clusterConfig.topology\n+   */\n+  private static String populateClusterTopologySetting(ClusterConfig clusterConfig,\n+      LinkedHashSet<String> clusterTopologyKeys /*OUT*/,\n+      Map<String, String> defaultDomainPathValues /*OUT*/) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3Nzg1OA==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458477858", "createdAt": "2020-07-22T01:18:58Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,16 +220,57 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate clusterTopologyKeys and defaultDomainPathValues from clusterConfig\n+   *\n+   * @param clusterTopologyKeys       out parameter. LinkedHashSet to be populated for cluster\n+   *                                  topology keys. The set will remain empty if topology aware is\n+   *                                  not enabled or this cluster uses zone instead of domains.\n+   * @param defaultDomainPathValues   out parameter. Map to be populated for all default path keys.\n+   *                                  The map will remain empty if topology aware is not enabled or\n+   *                                  this cluster uses zone instead of domains.\n+   * @return lastValidType in clusterConfig.topology\n+   */\n+  private static String populateClusterTopologySetting(ClusterConfig clusterConfig,\n+      LinkedHashSet<String> clusterTopologyKeys /*OUT*/,\n+      Map<String, String> defaultDomainPathValues /*OUT*/) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNDI3NA=="}, "originalCommit": {"oid": "73aa108ddddbb2186d76049898472661abd9c98e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk3OTU5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoyOTowMFrOG1OcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowMTo0M1rOG1rzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDQyMQ==", "bodyText": "I believe you meant to call computeInstanceTopologyMap() with a false in the end here, instead of the concrete function itself?", "url": "https://github.com/apache/helix/pull/1129#discussion_r458464421", "createdAt": "2020-07-22T00:29:00Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -204,8 +172,9 @@ private Node createClusterTree() {\n       InstanceConfig insConfig = _instanceConfigMap.get(instanceName);\n       try {\n         LinkedHashMap<String, String> instanceTopologyMap =\n-            computeInstanceTopologyMap(_clusterConfig.isTopologyAwareEnabled(), instanceName,\n-                insConfig, _clusterTopologyKeys);\n+            computeInstanceTopologyMapHelper(_clusterConfig.isTopologyAwareEnabled(), instanceName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4NTU0OA==", "bodyText": "TFTR. I think computeInstanceTopologyMap for users outside this function. They need to call 'computeInstanceTopologyMap' to construct the 'clusterTopologyConfig' (line 323) first and then build the instance topology path. Here in Topology it self, the 'clusterTopologyConfig' is computed in the constructor. So we need another layer of abstraction.\nI am open to discussion.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458485548", "createdAt": "2020-07-22T01:47:05Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -204,8 +172,9 @@ private Node createClusterTree() {\n       InstanceConfig insConfig = _instanceConfigMap.get(instanceName);\n       try {\n         LinkedHashMap<String, String> instanceTopologyMap =\n-            computeInstanceTopologyMap(_clusterConfig.isTopologyAwareEnabled(), instanceName,\n-                insConfig, _clusterTopologyKeys);\n+            computeInstanceTopologyMapHelper(_clusterConfig.isTopologyAwareEnabled(), instanceName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDQyMQ=="}, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NTQ2Ng==", "bodyText": "I see. Typically if a concrete function involves a null value, such as this case, it usually isn't called directly by outside callers and is only called by its wrapper. I'm not 100% certain with the convention here so I'll leave it to you to decide. Thank you for explaining!", "url": "https://github.com/apache/helix/pull/1129#discussion_r458945466", "createdAt": "2020-07-22T17:01:43Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -204,8 +172,9 @@ private Node createClusterTree() {\n       InstanceConfig insConfig = _instanceConfigMap.get(instanceName);\n       try {\n         LinkedHashMap<String, String> instanceTopologyMap =\n-            computeInstanceTopologyMap(_clusterConfig.isTopologyAwareEnabled(), instanceName,\n-                insConfig, _clusterTopologyKeys);\n+            computeInstanceTopologyMapHelper(_clusterConfig.isTopologyAwareEnabled(), instanceName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDQyMQ=="}, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk4MTY3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMDowMVrOG1Odyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTo1OTo1NFrOG1P9KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDcxNQ==", "bodyText": "This comment should be for computeInstanceTopologyMap()? That public function needs an entire javadoc also.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458464715", "createdAt": "2020-07-22T00:30:01Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,20 +199,73 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate faultZone, endNodetype and and a LinkedHashMap containing pathKeys default values for\n+   * clusterConfig.Topology. The LinkedHashMap will be empty if clusterConfig.Topology is unset.\n+   *\n+   * @return an Instance of Topology.ClusterTopologyConfig.\n+   */\n+  private static ClusterTopologyConfig getClusterTopologySetting(ClusterConfig clusterConfig) {\n+\n+    ClusterTopologyConfig clusterTopologyConfig = new ClusterTopologyConfig();\n+    if (clusterConfig.isTopologyAwareEnabled()) {\n+      String topologyDef = clusterConfig.getTopology();\n+      if (topologyDef != null) {\n+        String[] topologyKeys = topologyDef.trim().split(\"/\");\n+        int lastValidTypeIdx = 0;\n+        for (int i = 0; i < topologyKeys.length; i++) {\n+          if (topologyKeys[i].length() != 0) {\n+            clusterTopologyConfig.topologyKeyDefaultValue\n+                .put(topologyKeys[i], DEFAULT_DOMAIN_PREFIX + topologyKeys[i]);\n+            lastValidTypeIdx = i;\n+          }\n+        }\n+        if (clusterTopologyConfig.topologyKeyDefaultValue.size() == 0) {\n+          throw new IllegalArgumentException(\"Invalid cluster topology definition \" + topologyDef);\n+        }\n+        clusterTopologyConfig.endNodeType = topologyKeys[lastValidTypeIdx];\n+        String faultZoneType = clusterConfig.getFaultZoneType();\n+        if (faultZoneType == null) {\n+          clusterTopologyConfig.faultZoneType = clusterTopologyConfig.endNodeType;\n+        } else if (!clusterTopologyConfig.topologyKeyDefaultValue.containsKey(faultZoneType)) {\n+          throw new HelixException(String\n+              .format(\"Invalid fault zone type %s, not present in topology definition %s.\",\n+                  faultZoneType, clusterConfig.getTopology()));\n+        } else {\n+          clusterTopologyConfig.faultZoneType = faultZoneType;\n+        }\n+      } else {\n+        // Use default cluster topology definition, i,e. /root/zone/instance\n+        clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+        clusterTopologyConfig.faultZoneType = Types.ZONE.name();\n+      }\n+    } else {\n+      clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+      clusterTopologyConfig.faultZoneType = Types.INSTANCE.name();\n+    }\n+    return clusterTopologyConfig;\n+  }\n+\n   /**\n    * This function returns a LinkedHashMap<String, String> object representing\n    * the topology path for an instance.\n    * LinkedHashMap is used here since the order of the path needs to be preserved\n    * when creating the topology tree.\n    *\n+   * @param clusterTopologyKeyDefaultValue  a LinkedHashMap where keys are cluster topology path and\n+   *                                       values are their corresponding default value. The entries\n+   *                                        are ordered by ClusterConfig.topology setting.\n+   * @param faultZoneForEarlyQuit   this flag is set to true only if caller wants the path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4OTEyOQ==", "bodyText": "TFTR. Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r458489129", "createdAt": "2020-07-22T01:59:54Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -230,20 +199,73 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n         || !clusterConfig.getDisabledInstances().containsKey(instanceName)));\n   }\n \n+  /**\n+   * Populate faultZone, endNodetype and and a LinkedHashMap containing pathKeys default values for\n+   * clusterConfig.Topology. The LinkedHashMap will be empty if clusterConfig.Topology is unset.\n+   *\n+   * @return an Instance of Topology.ClusterTopologyConfig.\n+   */\n+  private static ClusterTopologyConfig getClusterTopologySetting(ClusterConfig clusterConfig) {\n+\n+    ClusterTopologyConfig clusterTopologyConfig = new ClusterTopologyConfig();\n+    if (clusterConfig.isTopologyAwareEnabled()) {\n+      String topologyDef = clusterConfig.getTopology();\n+      if (topologyDef != null) {\n+        String[] topologyKeys = topologyDef.trim().split(\"/\");\n+        int lastValidTypeIdx = 0;\n+        for (int i = 0; i < topologyKeys.length; i++) {\n+          if (topologyKeys[i].length() != 0) {\n+            clusterTopologyConfig.topologyKeyDefaultValue\n+                .put(topologyKeys[i], DEFAULT_DOMAIN_PREFIX + topologyKeys[i]);\n+            lastValidTypeIdx = i;\n+          }\n+        }\n+        if (clusterTopologyConfig.topologyKeyDefaultValue.size() == 0) {\n+          throw new IllegalArgumentException(\"Invalid cluster topology definition \" + topologyDef);\n+        }\n+        clusterTopologyConfig.endNodeType = topologyKeys[lastValidTypeIdx];\n+        String faultZoneType = clusterConfig.getFaultZoneType();\n+        if (faultZoneType == null) {\n+          clusterTopologyConfig.faultZoneType = clusterTopologyConfig.endNodeType;\n+        } else if (!clusterTopologyConfig.topologyKeyDefaultValue.containsKey(faultZoneType)) {\n+          throw new HelixException(String\n+              .format(\"Invalid fault zone type %s, not present in topology definition %s.\",\n+                  faultZoneType, clusterConfig.getTopology()));\n+        } else {\n+          clusterTopologyConfig.faultZoneType = faultZoneType;\n+        }\n+      } else {\n+        // Use default cluster topology definition, i,e. /root/zone/instance\n+        clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+        clusterTopologyConfig.faultZoneType = Types.ZONE.name();\n+      }\n+    } else {\n+      clusterTopologyConfig.endNodeType = Types.INSTANCE.name();\n+      clusterTopologyConfig.faultZoneType = Types.INSTANCE.name();\n+    }\n+    return clusterTopologyConfig;\n+  }\n+\n   /**\n    * This function returns a LinkedHashMap<String, String> object representing\n    * the topology path for an instance.\n    * LinkedHashMap is used here since the order of the path needs to be preserved\n    * when creating the topology tree.\n    *\n+   * @param clusterTopologyKeyDefaultValue  a LinkedHashMap where keys are cluster topology path and\n+   *                                       values are their corresponding default value. The entries\n+   *                                        are ordered by ClusterConfig.topology setting.\n+   * @param faultZoneForEarlyQuit   this flag is set to true only if caller wants the path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDcxNQ=="}, "originalCommit": {"oid": "aad37318e96e9d0a695ba2481d63898e0c00df69"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDM0MzM3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNjo1NDoxM1rOG3J-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoxOTowM1rOG4kMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODIzNA==", "bodyText": "Seems this import is unused?", "url": "https://github.com/apache/helix/pull/1129#discussion_r460488234", "createdAt": "2020-07-26T06:54:13Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -20,14 +20,17 @@\n  */\n \n import java.io.IOException;\n+import java.security.InvalidParameterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NjM4MQ==", "bodyText": "TFTR. Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r461966381", "createdAt": "2020-07-29T00:19:03Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -20,14 +20,17 @@\n  */\n \n import java.io.IOException;\n+import java.security.InvalidParameterException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODIzNA=="}, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDM0OTgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowMTo0OFrOG3KBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowMTo0OFrOG3KBQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTAyNQ==", "bodyText": "Usually runtime exception is not recommended to put in method signature. Having it in java doc is good enough.", "url": "https://github.com/apache/helix/pull/1129#discussion_r460489025", "createdAt": "2020-07-26T07:01:48Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java", "diffHunk": "@@ -637,4 +638,19 @@ public static InstanceConfig toInstanceConfig(String instanceId) {\n     }\n     return config;\n   }\n+\n+  /**\n+   * Validate if the topology related settings (Domain or ZoneId) in the given instanceConfig\n+   * are valid and align with current clusterConfig.\n+   * This function should be called when instance added to cluster or caller updates instanceConfig.\n+   *\n+   * @throws IllegalArgumentException\n+   */\n+  public boolean validateTopologySettingInInstanceConfig(ClusterConfig clusterConfig,\n+      String instanceName) throws IllegalArgumentException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDM1MDY0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowMzozM1rOG3KBrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowMzozM1rOG3KBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTEzMw==", "bodyText": "Assert fail here to protect the test. Otherwise if expecting exception is not throw, the test will still pass. It should fail.", "url": "https://github.com/apache/helix/pull/1129#discussion_r460489133", "createdAt": "2020-07-26T07:03:33Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java", "diffHunk": "@@ -114,6 +118,50 @@ public void simpleIntegrationTest() throws Exception {\n     Assert.assertNull(accessor.getProperty(keyBuilder.controllerLeader()));\n   }\n \n+  @Test\n+  public void simpleIntegrationTestNeg() throws Exception {\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        4, // partitions per resource\n+        1, // number of nodes\n+        1, // replicas\n+        \"MasterSlave\", true); // do rebalance\n+\n+    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+    clusterConfig.getRecord()\n+        .setListField(ClusterConfig.ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(),\n+            new ArrayList<>());\n+    clusterConfig.setTopologyAwareEnabled(true);\n+    clusterConfig.setTopology(\"/Rack/Sub-Rack/Host/Instance\");\n+    clusterConfig.setFaultZoneType(\"Host\");\n+    configAccessor.setClusterConfig(clusterName, clusterConfig);\n+\n+\n+    String instanceName = \"localhost_12918\";\n+    HelixManager participant =\n+        new ZKHelixManager(clusterName, instanceName , InstanceType.PARTICIPANT, ZK_ADDR);\n+    participant.getStateMachineEngine().registerStateModelFactory(\"MasterSlave\",\n+        new MockMSModelFactory());\n+    // We are expecting an IllegalArgumentException since the domain is not set.\n+    try {\n+      participant.connect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDM1OTUwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNTowMVrOG3KF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNTowMVrOG3KF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDIxNA==", "bodyText": "I suggest changing the method signature a bit: boolean isDelete -> Command command. You could put if..else check in this private method.\nAn nice article to help with clean such boolean parameter : https://medium.com/@amlcurran/clean-code-the-curse-of-a-boolean-parameter-c237a830b7a3", "url": "https://github.com/apache/helix/pull/1129#discussion_r460490214", "createdAt": "2020-07-26T07:15:01Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDM2MDczOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNjoyNlrOG3KGfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxNjoyNlrOG3KGfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDM2NA==", "bodyText": "Could make advantage of parameterized logging :)\nLOG.error(\"Invalid topology setting for Instance : {}\", instanceName, ex);", "url": "https://github.com/apache/helix/pull/1129#discussion_r460490364", "createdAt": "2020-07-26T07:16:26Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+            instanceConfig, command == Command.delete);\n+      }\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          // The new instanceConfig will be merged with existing one\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          HelixConfigScope instanceScope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n+                  .forCluster(clusterId).forParticipant(instanceName).build();\n+          configAccessor.remove(instanceScope, record);\n+          break;\n+        default:\n+          return badRequest(String.format(\"Unsupported command: %s\", command));\n       }\n+    } catch (IllegalArgumentException ex) {\n+      LOG.error(String.format(\"Invalid topology setting for Instance : %s. Fail the config update\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754256a84b459ff9feb086eaf7ce68670f93b858"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzc0ODQ1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTozNDowMFrOG5HIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo0Mzo0MlrOG5OAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzODkxNg==", "bodyText": "I suggest not throwing IllegalArgumentException in the method signature because: an unchecked exception does not need to declare in the method signature. throws keyword is used for handling checked exception. There are some good articles about this, eg: https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html#throwstag\nI suggest put this info in javadoc like this\n@throws IllegalArugmentException  when it is thrown", "url": "https://github.com/apache/helix/pull/1129#discussion_r462538916", "createdAt": "2020-07-29T19:34:00Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -289,6 +310,29 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n     return instanceTopologyMap;\n   }\n \n+  /**\n+   * This function returns a LinkedHashMap<String, String> object representing\n+   * the topology path for an instance.\n+   * LinkedHashMap is used here since the order of the path needs to be preserved\n+   * when creating the topology tree.\n+   *\n+   * @param clusterConfig         clusterConfig of the given cluster.\n+   * @param instanceName          name of the instance.\n+   * @param instanceConfig        instanceConfig to be checked.\n+   * @param earlyQuitForFaultZone Set to true if we only need the path till faultZone.\n+   *\n+   * @return an LinkedHashMap object representing the topology path for the input instance.\n+   */\n+  public static LinkedHashMap<String, String> computeInstanceTopologyMap(\n+      ClusterConfig clusterConfig, String instanceName, InstanceConfig instanceConfig,\n+      boolean earlyQuitForFaultZone) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MTQ5NA==", "bodyText": "TFTR. Updated.", "url": "https://github.com/apache/helix/pull/1129#discussion_r462651494", "createdAt": "2020-07-29T23:43:42Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java", "diffHunk": "@@ -289,6 +310,29 @@ private boolean isInstanceEnabled(ClusterConfig clusterConfig, String instanceNa\n     return instanceTopologyMap;\n   }\n \n+  /**\n+   * This function returns a LinkedHashMap<String, String> object representing\n+   * the topology path for an instance.\n+   * LinkedHashMap is used here since the order of the path needs to be preserved\n+   * when creating the topology tree.\n+   *\n+   * @param clusterConfig         clusterConfig of the given cluster.\n+   * @param instanceName          name of the instance.\n+   * @param instanceConfig        instanceConfig to be checked.\n+   * @param earlyQuitForFaultZone Set to true if we only need the path till faultZone.\n+   *\n+   * @return an LinkedHashMap object representing the topology path for the input instance.\n+   */\n+  public static LinkedHashMap<String, String> computeInstanceTopologyMap(\n+      ClusterConfig clusterConfig, String instanceName, InstanceConfig instanceConfig,\n+      boolean earlyQuitForFaultZone) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzODkxNg=="}, "originalCommit": {"oid": "59da1aa03b2d662d62a5c29d2e34b0fda59ed07d"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc3ODA5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxODowM1rOG9oEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxODowM1rOG9oEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3Mjg2MQ==", "bodyText": "Why we dont call this in the switch case? It will make the code more clear. By doing that, you can let this validateDeltaTopologySettingInInstanceConfig, return a Config if it is valid. Otherwise, return null.\nSo the following code will based on the return result to do the write to ZK.", "url": "https://github.com/apache/helix/pull/1129#discussion_r467272861", "createdAt": "2020-08-07T21:18:03Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -308,20 +309,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n+      /*\n+       * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+       * failure. We are doing the check whenever user updates InstanceConfig.\n+       */\n+      if (command == Command.delete || command == Command.update) {\n+        validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc4MjE2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxOTo0NlrOG9oG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxOTo0NlrOG9oG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzQ2OQ==", "bodyText": "Why we dont validate it before we write to ZK?", "url": "https://github.com/apache/helix/pull/1129#discussion_r467273469", "createdAt": "2020-08-07T21:19:46Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,26 +187,28 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      _helixAdmin.addInstance(_clusterName, instanceConfig);\n     }\n+    _configAccessor.getInstanceConfig(_clusterName, _instanceName)\n+        .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e7a47458e3615fb78fece4b276a830eb49ed34b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTU4NjM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzo0OTo1MVrOG9-vOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoyMDo0OVrOG-i-oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0NDIxOA==", "bodyText": "If the autoRegistration is false, but the autoJoin is true, then the instance config will be populated without zone information. In this case, will the validation fail? If it fails, meaning that we don't allow customers to use autoJoin if it's rack aware. This is different from what we provide now. Just make sure this is the behavior you want.", "url": "https://github.com/apache/helix/pull/1129#discussion_r467644218", "createdAt": "2020-08-09T23:49:51Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,25 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      instanceConfig\n+          .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4ODE1MQ==", "bodyText": "Discussed offline. This validation here means that we won't support a customer to use zone based topology and \"auto join\" function (no auto registration) at the same time. Participant will terminate in this case. This is different from current requirement, but logically correct.", "url": "https://github.com/apache/helix/pull/1129#discussion_r468188151", "createdAt": "2020-08-10T21:11:15Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,25 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      instanceConfig\n+          .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0NDIxOA=="}, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNzk4NQ==", "bodyText": "Thanks for the update Meng. I would like to add a point.\nI think if the autoRegistration is false, we only support Instance autoJoin if cluster level topology aware rebalance is set up false. If the cluster level topology aware is not false, then the following validation will fail (and vice versa).", "url": "https://github.com/apache/helix/pull/1129#discussion_r468237985", "createdAt": "2020-08-10T23:20:49Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -187,25 +187,31 @@ private void joinCluster() {\n       LOG.info(\"auto registration is false for cluster\" + _clusterName);\n     }\n \n+    InstanceConfig instanceConfig;\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n+      }\n+      if (!autoRegistration) {\n+        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n       } else {\n-        if (!autoRegistration) {\n-          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-          _helixAdmin.addInstance(_clusterName, HelixUtil.composeInstanceConfig(_instanceName));\n-        } else {\n-          LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n-          CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n-          String domain = cloudInstanceInformation\n-              .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n-\n-          InstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n-          instanceConfig.setDomain(domain);\n-          _helixAdmin.addInstance(_clusterName, instanceConfig);\n-        }\n+        LOG.info(_instanceName + \" is auto-registering cluster: \" + _clusterName);\n+        CloudInstanceInformation cloudInstanceInformation = getCloudInstanceInformation();\n+        String domain = cloudInstanceInformation\n+            .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name()) + _instanceName;\n+        instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\n+        instanceConfig.setDomain(domain);\n       }\n+      instanceConfig\n+          .validateTopologySettingInInstanceConfig(_configAccessor.getClusterConfig(_clusterName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0NDIxOA=="}, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTEwNDI5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1MjoyMlrOG-fYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODoxMzo1NVrOG_DlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTAwMQ==", "bodyText": "Do we need a if statement here?", "url": "https://github.com/apache/helix/pull/1129#discussion_r468179001", "createdAt": "2020-08-10T20:52:22Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -310,20 +311,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          /*\n+           * The new instanceConfig will be merged with existing one.\n+           * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+           * failure. We are doing the check whenever user updates InstanceConfig.\n+           */\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+              instanceConfig, command);\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MjM1NQ==", "bodyText": "validateDeltaTopologySettingInInstanceConfig will throw exception if the input is not valid. So If I understand it correctly, no need to have a if statement here. Maybe a comment is needed to avoid confusion?", "url": "https://github.com/apache/helix/pull/1129#discussion_r468242355", "createdAt": "2020-08-10T23:34:51Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -310,20 +311,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          /*\n+           * The new instanceConfig will be merged with existing one.\n+           * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+           * failure. We are doing the check whenever user updates InstanceConfig.\n+           */\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+              instanceConfig, command);\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTAwMQ=="}, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NzYzMg==", "bodyText": "Then let's modify the function definition and internal logic. It returns boolean value will be useless.", "url": "https://github.com/apache/helix/pull/1129#discussion_r468767632", "createdAt": "2020-08-11T18:05:41Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -310,20 +311,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          /*\n+           * The new instanceConfig will be merged with existing one.\n+           * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+           * failure. We are doing the check whenever user updates InstanceConfig.\n+           */\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+              instanceConfig, command);\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTAwMQ=="}, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MjIwMQ==", "bodyText": "TFTR. Updated.  Let me rerun the test and finalize.", "url": "https://github.com/apache/helix/pull/1129#discussion_r468772201", "createdAt": "2020-08-11T18:13:55Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PerInstanceAccessor.java", "diffHunk": "@@ -310,20 +311,34 @@ public Response updateInstanceConfig(@PathParam(\"clusterId\") String clusterId,\n     }\n     InstanceConfig instanceConfig = new InstanceConfig(record);\n     ConfigAccessor configAccessor = getConfigAccessor();\n+\n     try {\n       switch (command) {\n-      case update:\n-        configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n-        break;\n-      case delete:\n-        HelixConfigScope instanceScope =\n-            new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.PARTICIPANT)\n-                .forCluster(clusterId).forParticipant(instanceName).build();\n-        configAccessor.remove(instanceScope, record);\n-        break;\n-      default:\n-        return badRequest(String.format(\"Unsupported command: %s\", command));\n+        case update:\n+          /*\n+           * The new instanceConfig will be merged with existing one.\n+           * Even if the instance is disabled, non-valid instance topology config will cause rebalance\n+           * failure. We are doing the check whenever user updates InstanceConfig.\n+           */\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,\n+              instanceConfig, command);\n+          configAccessor.updateInstanceConfig(clusterId, instanceName, instanceConfig);\n+          break;\n+        case delete:\n+          validateDeltaTopologySettingInInstanceConfig(clusterId, instanceName, configAccessor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTAwMQ=="}, "originalCommit": {"oid": "8498bc03bbb64284910a31c64fb7371f25d8b98e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1216, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}