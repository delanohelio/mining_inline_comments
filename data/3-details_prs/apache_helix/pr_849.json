{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjUzMzEy", "number": 849, "title": "Add REST APIs for get, set, update RestConfig", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#848\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nAdded PUT to create, POST to upate, and GET to get the RestConfig for each cluster under CONFIGS.\nTested by unit tests.\nTests\n\n The following tests are written for this issue:\ntestSetRestConfig, testUpdateRestConfig\n\ntestCreateClusterRESTConfig, testUpdateClusterRESTConfig, testGetClusterRESTConfig\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nTests run: 102, Failures: 0, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  34.405 s\n[INFO] Finished at: 2020-03-03T15:48:27-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-03T23:44:59Z", "url": "https://github.com/apache/helix/pull/849", "merged": true, "mergeCommit": {"oid": "ecae2431c1cb9f8a4955ac89727ea9fe293d7fdf"}, "closed": true, "closedAt": "2020-03-12T20:18:15Z", "author": {"login": "mgao0"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKes6aAFqTM2OTE3MzAwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNBYwzgH2gAyMzgzMjUzMzEyOmZhZjlmYzUyY2E2ZjI3MTZiOTYwNGJhMjA1MDFlMzNhM2FlZTE2YmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTczMDAx", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-369173001", "createdAt": "2020-03-04T22:31:31Z", "commit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMTozMVrOFyAEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMTozMVrOFyAEsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDMyMA==", "bodyText": "We may also need a \"DELETE\" API. You can double check.", "url": "https://github.com/apache/helix/pull/849#discussion_r387974320", "createdAt": "2020-03-04T22:31:31Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.updateRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to update rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTczMzQ1", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-369173345", "createdAt": "2020-03-04T22:32:11Z", "commit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMjoxMlrOFyAFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMjoxMlrOFyAFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDU4Nw==", "bodyText": "try \"code reformat\" to see whether it'll look better.", "url": "https://github.com/apache/helix/pull/849#discussion_r387974587", "createdAt": "2020-03-04T22:32:12Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTE0MzU5", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-368514359", "createdAt": "2020-03-04T05:34:32Z", "commit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0MzoyN1rOFyAXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0MzoyN1rOFyAXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTExNg==", "bodyText": "I suggest using {} to make advantage of sl4j logging.", "url": "https://github.com/apache/helix/pull/849#discussion_r387979116", "createdAt": "2020-03-04T22:43:27Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzQ0Nzcz", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-369344773", "createdAt": "2020-03-05T07:32:20Z", "commit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozMjoyMFrOFyI4Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozNjo0MFrOFyI97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODU3NA==", "bodyText": "I see \"HelixUtil.getZkParentPath(zkPath)\" twice. I guess you are trying to use parentPath.", "url": "https://github.com/apache/helix/pull/849#discussion_r388118574", "createdAt": "2020-03-05T07:32:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQwNQ==", "bodyText": "Actually, if it is \"overwrite\", there is no need to check existence. Just call createOrReplace().\nIf it is not \"overwrite\", there is no need to check existence either, just call createOrUpdate().", "url": "https://github.com/apache/helix/pull/849#discussion_r388119405", "createdAt": "2020-03-05T07:34:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);\n+    if (!_zkClient.exists(HelixUtil.getZkParentPath(zkPath))) {\n+      ZKUtil.createOrMerge(_zkClient, parentPath, new ZNRecord(parentPath), true, true);\n+    }\n+\n+    if (overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDA0NA==", "bodyText": "Could it because of write failure? I'm not sure if the accessor could throw any HelixException as well?\nI know it probably lists details in the message, but the response type would be notfound in any case, which is not good.", "url": "https://github.com/apache/helix/pull/849#discussion_r388120044", "createdAt": "2020-03-05T07:36:40Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTEwOTM0", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-370510934", "createdAt": "2020-03-06T17:48:13Z", "commit": {"oid": "984dd1b203f31f0d3b3c983ddcbde7f938af7455"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0ODoxM1rOFzBweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0ODoxM1rOFzBweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDQ4OQ==", "bodyText": "Can you follow the style of ClusterConfig? We have entry update/delete operation with URL param.", "url": "https://github.com/apache/helix/pull/849#discussion_r389050489", "createdAt": "2020-03-06T17:48:13Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,107 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dd1b203f31f0d3b3c983ddcbde7f938af7455"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5271630a9351e26837e4f6cee42bf845dc81160f", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/5271630a9351e26837e4f6cee42bf845dc81160f", "committedDate": "2020-03-06T18:34:18Z", "message": "Put update and delete rest config under same endpoint with different commands"}, "afterCommit": {"oid": "1f5bac9afc609231ebce0ecf79d6ba9252afce72", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/1f5bac9afc609231ebce0ecf79d6ba9252afce72", "committedDate": "2020-03-07T01:28:23Z", "message": "Modified delete and update rest config methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f5bac9afc609231ebce0ecf79d6ba9252afce72", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/1f5bac9afc609231ebce0ecf79d6ba9252afce72", "committedDate": "2020-03-07T01:28:23Z", "message": "Modified delete and update rest config methods"}, "afterCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/57e62480d530b4b3d49e15e5b1172cfaa607eccf", "committedDate": "2020-03-07T01:30:59Z", "message": "Modified delete and update rest config methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDUzOTIw", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-371453920", "createdAt": "2020-03-09T19:07:35Z", "commit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTowNzozNlrOFz1tMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTowNzozNlrOFz1tMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMTYxOA==", "bodyText": "Is this necessary? We should have update function with scope arugment,right?", "url": "https://github.com/apache/helix/pull/849#discussion_r389901618", "createdAt": "2020-03-09T19:07:36Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDcxNDMy", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-371471432", "createdAt": "2020-03-09T19:35:30Z", "commit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNTozMFrOFz2jxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNTozMFrOFz2jxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTU5MA==", "bodyText": "Could we double-check if the ID for the restConfig is supposed to match up with the cluster name?", "url": "https://github.com/apache/helix/pull/849#discussion_r389915590", "createdAt": "2020-03-09T19:35:30Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDcyMDY5", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-371472069", "createdAt": "2020-03-09T19:36:30Z", "commit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNjozMFrOFz2l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNjozMFrOFz2l2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjEyMw==", "bodyText": "Nit: is there a reason we don't just say createRestConfig? Cluster seems a little redundant?", "url": "https://github.com/apache/helix/pull/849#discussion_r389916123", "createdAt": "2020-03-09T19:36:30Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDcyNDI3", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-371472427", "createdAt": "2020-03-09T19:37:03Z", "commit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNzowNFrOFz2m6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNzowNFrOFz2m6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjM5Mw==", "bodyText": "Initializing to null is redundant.", "url": "https://github.com/apache/helix/pull/849#discussion_r389916393", "createdAt": "2020-03-09T19:37:04Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getClusterRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjQyNzMx", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-372242731", "createdAt": "2020-03-10T19:06:09Z", "commit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowNjowOVrOF0dFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowNjowOVrOF0dFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Njc4Nw==", "bodyText": "There are lots of common code for updateRESTConfig, updateClusterConfig and so on. I am fine with this PR. But can you have another PR to abstract the logic to a private method to reduce the redundant code?", "url": "https://github.com/apache/helix/pull/849#discussion_r390546787", "createdAt": "2020-03-10T19:06:09Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjg3MTc3", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-372287177", "createdAt": "2020-03-10T20:13:47Z", "commit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoxMzo0N1rOF0fTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoxNzoxNlrOF0fZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MzA3OA==", "bodyText": "Failed to delete but finally returning OK response? Would 404 be more appropriate?", "url": "https://github.com/apache/helix/pull/849#discussion_r390583078", "createdAt": "2020-03-10T20:13:47Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,121 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;\n+    try {\n+      config = accessor.getRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\n+          \"Failed to get rest config for cluster \" + clusterId + \", cluster not found, Exception: \"\n+              + ex);\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to get rest config for cluster \" + clusterId + \" Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    if (config == null) {\n+      return notFound();\n+    }\n+    return JSONRepresentation(config.getRecord());\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response deleteRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    try {\n+      accessor.deleteRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\"Failed to delete rest config for cluster \" + clusterId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NDgyMQ==", "bodyText": "Is the test already ended?", "url": "https://github.com/apache/helix/pull/849#discussion_r390584821", "createdAt": "2020-03-10T20:17:16Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "diffHunk": "@@ -576,6 +577,70 @@ public void testEnableWagedRebalanceForAllResources() {\n     }\n   }\n \n+  @Test\n+  public void testCreateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:00\");\n+    put(\"clusters/\" + cluster + \"/restconfig\", null, Entity\n+        .entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+            MediaType.APPLICATION_JSON_TYPE), Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testCreateClusterRESTConfig\")\n+  public void testUpdateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    // Update an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:01\");\n+    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.update.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+\n+    // Delete an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, null);\n+    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.delete.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, new RESTConfig(cluster),\n+        \"rest config from response: \" + new RESTConfig(cluster) + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1e2233dca6a49888642a6d46ccf14c49a694b5", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/7c1e2233dca6a49888642a6d46ccf14c49a694b5", "committedDate": "2020-03-11T21:16:56Z", "message": "Add REST APIs for get, set, update RestConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd720c853529f54b667427a3e9d0cf67835539b8", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/dd720c853529f54b667427a3e9d0cf67835539b8", "committedDate": "2020-03-11T21:16:56Z", "message": "Added tests for config accessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3a57e23ba64a2789798a40a23a75f680351081", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/1a3a57e23ba64a2789798a40a23a75f680351081", "committedDate": "2020-03-11T21:16:56Z", "message": "Add delete REST config API and address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6ff92a235983d68cf434a1299e20eaedc56958", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/ca6ff92a235983d68cf434a1299e20eaedc56958", "committedDate": "2020-03-11T21:16:56Z", "message": "Put update and delete rest config under same endpoint with different commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef234d236b267126362bb6a24f581dd40be2f131", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/ef234d236b267126362bb6a24f581dd40be2f131", "committedDate": "2020-03-11T21:16:56Z", "message": "Modified delete and update rest config methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "269d9ae31108655b1eb0a2ec6293733c02fabd1a", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/269d9ae31108655b1eb0a2ec6293733c02fabd1a", "committedDate": "2020-03-11T21:16:56Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8026cecd19140ce25ca87768197ef57409b284f4", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/8026cecd19140ce25ca87768197ef57409b284f4", "committedDate": "2020-03-11T21:16:56Z", "message": "Remove ZNRecord id check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b8f03e586ce8ff643554ac4a1be8e53865c0bb", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/72b8f03e586ce8ff643554ac4a1be8e53865c0bb", "committedDate": "2020-03-11T21:16:56Z", "message": "Fixed for comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/ac314e33553725d0a68842f9c1f29b7c756dafef", "committedDate": "2020-03-11T21:16:56Z", "message": "Standardize the logging messages using parameterized messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc538eb03142aaa312ce5e65d7be84f893490f09", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/cc538eb03142aaa312ce5e65d7be84f893490f09", "committedDate": "2020-03-10T21:12:16Z", "message": "Fixed for comments"}, "afterCommit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/ac314e33553725d0a68842f9c1f29b7c756dafef", "committedDate": "2020-03-11T21:16:56Z", "message": "Standardize the logging messages using parameterized messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzQ3NjEx", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-373747611", "createdAt": "2020-03-12T17:12:48Z", "commit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzkyMjA3", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-373792207", "createdAt": "2020-03-12T18:13:46Z", "commit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzkyMzkz", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-373792393", "createdAt": "2020-03-12T18:14:04Z", "commit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNDowNFrOF1p5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNDowNFrOF1p5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTE4Nw==", "bodyText": "If there is a change to config accessor, should we add tests in TestConfigAccessor as well?", "url": "https://github.com/apache/helix/pull/849#discussion_r391805187", "createdAt": "2020-03-12T18:14:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -604,6 +605,61 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45f1ac6b94f60544b5f6c5cb6a32e670b948b517", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/45f1ac6b94f60544b5f6c5cb6a32e670b948b517", "committedDate": "2020-03-12T18:33:04Z", "message": "Add test cases to TestConfigAccessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODQ5MTU2", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-373849156", "createdAt": "2020-03-12T19:41:38Z", "commit": {"oid": "45f1ac6b94f60544b5f6c5cb6a32e670b948b517"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MTozOFrOF1soUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MTozOFrOF1soUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDA2NQ==", "bodyText": "Could you mark it clearly where the exception should be expected? Because it's not often easy to tell, I prefer the style of\ntry {\n//your logic\nAssert.fail(\"Exception expected!\");\ncatch (exception) {\n// Exception expected..\n}", "url": "https://github.com/apache/helix/pull/849#discussion_r391850065", "createdAt": "2020-03-12T19:41:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java", "diffHunk": "@@ -204,4 +207,56 @@ public void testSetNonexistentParticipantConfig() throws Exception {\n     configAccessor.close();\n     System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n   }\n+\n+  @Test\n+  public void testSetRestConfig() {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    ZKHelixAdmin admin = new ZKHelixAdmin(ZK_ADDR);\n+    admin.addCluster(clusterName, true);\n+    ConfigAccessor configAccessor = new ConfigAccessor(ZK_ADDR);\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    Assert.assertNull(configAccessor.getRESTConfig(clusterName));\n+\n+    RESTConfig restConfig = new RESTConfig(clusterName);\n+    restConfig.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"TEST_URL\");\n+    configAccessor.setRESTConfig(clusterName, restConfig);\n+    Assert.assertEquals(restConfig, configAccessor.getRESTConfig(clusterName));\n+  }\n+\n+  @Test (expectedExceptions = HelixException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f1ac6b94f60544b5f6c5cb6a32e670b948b517"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODQ5NzIx", "url": "https://github.com/apache/helix/pull/849#pullrequestreview-373849721", "createdAt": "2020-03-12T19:42:32Z", "commit": {"oid": "45f1ac6b94f60544b5f6c5cb6a32e670b948b517"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf9fc52ca6f2716b9604ba20501e33a3aee16bf", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/faf9fc52ca6f2716b9604ba20501e33a3aee16bf", "committedDate": "2020-03-12T20:04:03Z", "message": "Updated expected exception assertation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}