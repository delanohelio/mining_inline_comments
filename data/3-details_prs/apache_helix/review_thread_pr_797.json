{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTIzOTg3", "number": 797, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxNTo0NlrODiDZQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyM1rODik2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDMzNzkyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxNTo0NlrOFtInLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNjoyMVrOFtNwCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTM0Mw==", "bodyText": "This endpoint name is so difficult to read/write. Can you change it to snake-case: customized-state-xxx?", "url": "https://github.com/apache/helix/pull/797#discussion_r382871343", "createdAt": "2020-02-22T01:15:46Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUzMQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955531", "createdAt": "2020-02-23T01:36:21Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTM0Mw=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDM0NTc3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyNjoxMFrOFtIrpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNjoxMFrOFtNwBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjQ4Ng==", "bodyText": "For this exception, is it caused by a server error or a client error? It is good to make sure the response status code is appropriate.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872486", "createdAt": "2020-02-22T01:26:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUyNg==", "bodyText": "Actually this exception is not needed. Removed it.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955526", "createdAt": "2020-02-23T01:36:10Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjQ4Ng=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDM0NzExOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyNzo1MlrOFtIsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNjowMlrOFtNwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjY1OQ==", "bodyText": "I would remove {} for case blocks.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872659", "createdAt": "2020-02-22T01:27:52Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUyMg==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955522", "createdAt": "2020-02-23T01:36:02Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete: {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjY1OQ=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDM0NzU3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyODoyMFrOFtIskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNTo1N1rOFtNv_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjcyMQ==", "bodyText": "No need for else.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872721", "createdAt": "2020-02-22T01:28:20Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUxOQ==", "bodyText": "It is needed. If commandStr == null or commandStr.isEmpty() then we want to continued with the request and use update as default. We do not want to return badRequest.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955519", "createdAt": "2020-02-23T01:35:57Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjcyMQ=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDM0ODU1OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyOTozMVrOFtItGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNTo1MFrOFtNv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjg1Nw==", "bodyText": "I would suggest adding an error message to the response.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872857", "createdAt": "2020-02-22T01:29:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUwNw==", "bodyText": "Done. Thanks.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955507", "createdAt": "2020-02-23T01:35:50Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjg1Nw=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwMDkzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNjo1ODoxN1rOFtJ5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNTozNlrOFtNv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjQ2MA==", "bodyText": "I would suggest a PUT for this update request and delete type may not be supported in this request but in a delete request", "url": "https://github.com/apache/helix/pull/797#discussion_r382892460", "createdAt": "2020-02-22T06:58:17Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTQ3OQ==", "bodyText": "I just followed the convention here. PUT has been used to add a completely new config. DELETE for complete deletion of the config. POST for update the information.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955479", "createdAt": "2020-02-23T01:35:36Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjQ2MA=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwMjg4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzowMzozMlrOFtJ6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMTozNTo0NFrOFtNv5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjY4Ng==", "bodyText": "These lines could be in a private check method to reduce duplicate code.", "url": "https://github.com/apache/helix/pull/797#discussion_r382892686", "createdAt": "2020-02-22T07:03:32Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTQ5NA==", "bodyText": "Ok. Fixed.", "url": "https://github.com/apache/helix/pull/797#discussion_r382955494", "createdAt": "2020-02-23T01:35:44Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjY4Ng=="}, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzk4NzAxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Mzo0NFrOFtoGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozODoxN1rOFtpmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzE0MQ==", "bodyText": "NIP: to -> from", "url": "https://github.com/apache/helix/pull/797#discussion_r383387141", "createdAt": "2020-02-24T16:53:44Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTczOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/helix/pull/797#discussion_r383411738", "createdAt": "2020-02-24T17:38:17Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzE0MQ=="}, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzk5ODA3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Njo0OVrOFtoM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozODozNFrOFtpmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkyNg==", "bodyText": "The update here is confusing, especially this command is also called \"update\". Actually this is \"add\", right?", "url": "https://github.com/apache/helix/pull/797#discussion_r383388926", "createdAt": "2020-02-24T16:56:49Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case update:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTg3Mw==", "bodyText": "I added a new type with the name Add.", "url": "https://github.com/apache/helix/pull/797#discussion_r383411873", "createdAt": "2020-02-24T17:38:34Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case update:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkyNg=="}, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI2MDkwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowOTo1MlrOFt0Yww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyODozMFrOFuQNQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4ODU0Nw==", "bodyText": "Please use lower case to be consistent with \"delete\"", "url": "https://github.com/apache/helix/pull/797#discussion_r383588547", "createdAt": "2020-02-25T00:09:52Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -362,7 +362,7 @@ public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") S\n       case delete:\n         admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n         break;\n-      case update:\n+      case Add:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDM1Mw==", "bodyText": "Fixed.", "url": "https://github.com/apache/helix/pull/797#discussion_r384044353", "createdAt": "2020-02-25T18:28:30Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -362,7 +362,7 @@ public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") S\n       case delete:\n         admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n         break;\n-      case update:\n+      case Add:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4ODU0Nw=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTc5MDEzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/AbstractResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo0Nzo1M1rOFt5XZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNjozNVrOFuQI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDExOQ==", "bodyText": "This style may need to change: it does not follow either the current naming convention (add) to be consistent or Java enum naming convention (constant like ADD)", "url": "https://github.com/apache/helix/pull/797#discussion_r383670119", "createdAt": "2020-02-25T05:47:53Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/AbstractResource.java", "diffHunk": "@@ -62,6 +62,7 @@\n     enablePartitions,\n     disablePartitions,\n     update,\n+    Add,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzI1OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/helix/pull/797#discussion_r384043259", "createdAt": "2020-02-25T18:26:35Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/AbstractResource.java", "diffHunk": "@@ -62,6 +62,7 @@\n     enablePartitions,\n     disablePartitions,\n     update,\n+    Add,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDExOQ=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgwNzQ0OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo1ODoyN1rOFt5hgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyODo0MFrOFuQNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MjcwNA==", "bodyText": "{} is better than string concatenation.", "url": "https://github.com/apache/helix/pull/797#discussion_r383672704", "createdAt": "2020-02-25T05:58:27Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig from cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.Add; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case Add:\n+        admin.addTypeToCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      default:\n+        return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to \" + command + \" CustomizedStateAggregationConfig for cluster \" + clusterId + \" new type: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDQ3NA==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/797#discussion_r384044474", "createdAt": "2020-02-25T18:28:40Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig from cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.Add; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case Add:\n+        admin.addTypeToCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      default:\n+        return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to \" + command + \" CustomizedStateAggregationConfig for cluster \" + clusterId + \" new type: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MjcwNA=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgxMjA3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowMToxMlrOFt5kNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNjo0NVrOFuQJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MzM5OA==", "bodyText": "Unused.", "url": "https://github.com/apache/helix/pull/797#discussion_r383673398", "createdAt": "2020-02-25T06:01:12Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzM0Nw==", "bodyText": "Removed.", "url": "https://github.com/apache/helix/pull/797#discussion_r384043347", "createdAt": "2020-02-25T18:26:45Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MzM5OA=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgxNjMwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowMzoxMFrOFt5meg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyODoxOFrOFuQM0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Mzk3OA==", "bodyText": "Can we not catch a more specific exception? It seems there could be runtime HelixException?", "url": "https://github.com/apache/helix/pull/797#discussion_r383673978", "createdAt": "2020-02-25T06:03:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDI0Mg==", "bodyText": "Thanks for the comment. I still prefer to catch all the exception like we do in other functions.", "url": "https://github.com/apache/helix/pull/797#discussion_r384044242", "createdAt": "2020-02-25T18:28:18Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Mzk3OA=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgxODc2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyM1rOFt5nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODoyNzowMFrOFuQJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMxOA==", "bodyText": "This is a user input/client error, not a server error.  We don't have to log this especially on error level in server.", "url": "https://github.com/apache/helix/pull/797#discussion_r383674318", "createdAt": "2020-02-25T06:04:23Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzQ5NA==", "bodyText": "Removed the log.", "url": "https://github.com/apache/helix/pull/797#discussion_r384043494", "createdAt": "2020-02-25T18:27:00Z", "author": {"login": "alirezazamani"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMxOA=="}, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1672, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}