{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4ODMwNzU2", "number": 1068, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozOToyMVrOEDqXwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1OTozOFrOEE2POg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc1Mzk0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozOToyMVrOGgz7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo1MjoxNlrOGg5s1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw==", "bodyText": "When \"pendingMessage != null\" but \"currentState.equalsIgnoreCase(pendingMessage.getToState())\", the cancellation message will be replaced with the new ST message right? I think it works. But would it be better to send both of the cancellation message and the new one?\nIf we do this, will the participant discards the cancellation message, or proceed with both of them? It would be safer from Helix perspective since the pending message will be removed for sure with cancellation. But it could be complicated from the participant perspective since I think we might need some sync control on the participant side.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437058553", "createdAt": "2020-06-08T23:39:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzY1MA==", "bodyText": "Actually if looking at the generateCancellationMessageForPendingMessage logic, there is\nelse if (currentState.equalsIgnoreCase(pendingState)) { LogUtil.logInfo(logger, _eventId, \"Message hasn't been removed for \" + instanceName + \" to transit \" + resource .getResourceName() + \".\" + partition.getPartitionName() + \" to \" + pendingState + \", desiredState: \" + desiredState + \", isRelay: \" + pendingMessage.isRelayMessage()); }\nSo actually when currentState equals pendingState, there is no cancellation message generated.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437063650", "createdAt": "2020-06-08T23:57:17Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODQ3NA==", "bodyText": "Then it means the decision of canceling or not is purely in the generateCancellationMessageForPendingMessage(). And we don't have the option to send both of the messages for now.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437068474", "createdAt": "2020-06-09T00:15:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjE1OA==", "bodyText": "I was thinking if there is a way to avoid the same condition being checked inside generateCancellationMessageForPendingMessage and here. But it seems that there is no easy way.\nHowever, to avoid the possible unexpected overwrite (for instance, if we change the private method logic later), I think we can change as following,\nOption one,\nif (message == null && (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState()))) {\nWhich means if there is no cancellation message and the the pending message has been done then we generate new ST.\nOption two,\nRemove generateCancellationMessageForPendingMessage and move all if-else conditions back to the caller methods. Because you do need to handle those conditions with different logic. That seems to be a clearer logic.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437072158", "createdAt": "2020-06-09T00:30:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjIyNA==", "bodyText": "GenerateCancellationMessageForPendingMessage is used in different places. Doesn't look good to move that function back. We can guard it with \"message == null\" for now.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437152224", "createdAt": "2020-06-09T05:50:05Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1Mjk4Mg==", "bodyText": "I think the other place will never hit the other 2 conditions. But not 100% sure.\nAnyway, both options work.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437152982", "createdAt": "2020-06-09T05:52:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, "originalCommit": {"oid": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjU3OTM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozODoxMlrOGhZYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozOTowNlrOGhZaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjA5OA==", "bodyText": "Impressive!", "url": "https://github.com/apache/helix/pull/1068#discussion_r437672098", "createdAt": "2020-06-09T19:38:12Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java", "diffHunk": "@@ -172,7 +172,7 @@ public void testP2PStateTransitionEnabled() {\n     }\n \n     double ratio = ((double) p2pTrigged) / ((double) total);\n-    Assert.assertTrue(ratio > 0.6, String\n+    Assert.assertTrue(ratio == 1, String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjUyOA==", "bodyText": "nit, you can use Assert.assertEquals(p2pTrigged, total) now.", "url": "https://github.com/apache/helix/pull/1068#discussion_r437672528", "createdAt": "2020-06-09T19:39:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java", "diffHunk": "@@ -172,7 +172,7 @@ public void testP2PStateTransitionEnabled() {\n     }\n \n     double ratio = ((double) p2pTrigged) / ((double) total);\n-    Assert.assertTrue(ratio > 0.6, String\n+    Assert.assertTrue(ratio == 1, String", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjA5OA=="}, "originalCommit": {"oid": "dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTE4Mzk0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1OTozOFrOGiuksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1OTozOFrOGiuksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2NzgyNg==", "bodyText": "What happened to this condition?\nAren't they duplicate?", "url": "https://github.com/apache/helix/pull/1068#discussion_r439067826", "createdAt": "2020-06-11T20:59:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -225,6 +225,13 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n           // pending message's toState (no cancellation message should be generated in this case)\n           if (pendingMessage == null || (message == null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076b74b85a27e716d86538e0bdd21f34e349983b"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1136, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}