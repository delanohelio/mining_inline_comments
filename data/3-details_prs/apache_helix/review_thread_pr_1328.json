{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA5NzEw", "number": 1328, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MTo1NVrOEd2tTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo0MjowNVrOEiprlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzQwNDkyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MTo1NVrOHJRHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0MDozMVrOHPe37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA==", "bodyText": "Do you need System.currentTimeMillis()?  Will the log4j print out the timestamp?", "url": "https://github.com/apache/helix/pull/1328#discussion_r479479754", "createdAt": "2020-08-28T18:51:55Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MDQzNg==", "bodyText": "good point. Removed time stamp for all of them.", "url": "https://github.com/apache/helix/pull/1328#discussion_r480350436", "createdAt": "2020-08-31T19:29:50Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA=="}, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NjUyNQ==", "bodyText": "The timestamp seems not to be removed.\nAnd I really don't like these outputs even as debug. I think they are only useful when debugging. And we shall not add them to the repo.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485996525", "createdAt": "2020-09-10T00:40:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA=="}, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzQwODgxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MzozOFrOHJRKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyOToyMFrOHKGPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDQwOA==", "bodyText": "\"finished retrieving live instances\"", "url": "https://github.com/apache/helix/pull/1328#discussion_r479480408", "createdAt": "2020-08-28T18:53:38Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -245,13 +248,17 @@ protected synchronized boolean verifyState() {\n           return false;\n         }\n       }\n+      \n+      LOG.debug(\"Verifier finished live instances at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTk2NQ==", "bodyText": "changed.", "url": "https://github.com/apache/helix/pull/1328#discussion_r480349965", "createdAt": "2020-08-31T19:29:20Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -245,13 +248,17 @@ protected synchronized boolean verifyState() {\n           return false;\n         }\n       }\n+      \n+      LOG.debug(\"Verifier finished live instances at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDQwOA=="}, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTIzNDQ5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyOToxMFrOHM0mSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1OToxM1rOHPeLmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjcyOA==", "bodyText": "Why are we adding new \"Deprecated\" methods?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483206728", "createdAt": "2020-09-03T19:29:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTE3OQ==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985179", "createdAt": "2020-09-09T23:59:13Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjcyOA=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTIzNzQ4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMDowMlrOHM0oDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxNDoyOVrOHPebmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA==", "bodyText": "License and a comment for the class, please.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207180", "createdAt": "2020-09-03T19:30:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzU4NA==", "bodyText": "Moreover, my suggestion is that we put it to the test paths, not in the main.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207584", "createdAt": "2020-09-03T19:30:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTI3NA==", "bodyText": "changed the path and name. added license,", "url": "https://github.com/apache/helix/pull/1328#discussion_r485989274", "createdAt": "2020-09-10T00:14:29Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI0NzIwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMzoyMVrOHM0uPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo1NDowM1rOHQIbbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw==", "bodyText": "There are more verify methods, I think we shall add COOL_DOWN to all of them. Otherwise, this verifier will behave inconsistently.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483208767", "createdAt": "2020-09-03T19:33:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTI0NA==", "bodyText": "verify()\nverify(long timeout)\nverifyByZkCallback()\n\nall eventually boils down to verifyByZkCallback(long timeout)\nverifyByPolling() boils down to verifyByPolling(DEFAULT_TIMEOUT, DEFAULT_PERIOD).\nSo we only need to add cool down here.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485979244", "createdAt": "2020-09-09T23:38:51Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDkyOQ==", "bodyText": "But you didn't change \"verifyByZkCallback\", right?", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000929", "createdAt": "2020-09-10T00:57:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzM1Nw==", "bodyText": "I think we don't need to change verifyByZkCallback. To me, it won't help. What is your take?", "url": "https://github.com/apache/helix/pull/1328#discussion_r486677357", "createdAt": "2020-09-10T22:54:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI2OTc4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0MDo1MFrOHM08Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1ODo1NVrOHPeLQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjMwMw==", "bodyText": "Stack trace shall be debug log.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483212303", "createdAt": "2020-09-03T19:40:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,10 +237,14 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout, with stack trace {}\",\n+                Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTA5MA==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985090", "createdAt": "2020-09-09T23:58:55Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,10 +237,14 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout, with stack trace {}\",\n+                Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjMwMw=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4Mzg4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NToyMVrOHM1Exw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDozOTozMVrOHM7wrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUzNQ==", "bodyText": "I had a quick try, I think will work fine. You don't need to copy-paste all code.\npublic static class Builder extends BestPossibleExternalViewVerifier.Builder {\npublic Builder(String clusterName) {\nsuper(clusterName);\n}\n}", "url": "https://github.com/apache/helix/pull/1328#discussion_r483214535", "createdAt": "2020-09-03T19:45:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyNDA3OA==", "bodyText": "Good.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483324078", "createdAt": "2020-09-04T00:39:31Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUzNQ=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4NzMzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NjozMlrOHM1HCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxMzozOVrOHPeawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTExMw==", "bodyText": "TestBestPossibleExternalViewVerifier => BestPossibleExternalViewVerifierWithCoolDown?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215113", "createdAt": "2020-09-03T19:46:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTA1Ng==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485989056", "createdAt": "2020-09-10T00:13:39Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTExMw=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4NzkzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0Njo0NlrOHM1HgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1OToyMlrOHPeLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTIzMg==", "bodyText": "Make it configurable?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215232", "createdAt": "2020-09-03T19:46:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTIzMQ==", "bodyText": "done.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985231", "createdAt": "2020-09-09T23:59:22Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTIzMg=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg4NjMwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0Mjo0M1rOHPe6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozNjoyNFrOHQMLnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEwNA==", "bodyText": "This breaks the builder design pattern a little bit.\nI'm thinking if we have a better way.\nWhat if we add a configuration to the Verifier Builder called \"waitUntilVerify\"? It can be a generic configuration for all verifiers even production ones.\n\nIt is optional, so no backward compatibility issue.\nIt potentially helps our customers too, because they may face the same verify timing issue.\nIt requires the same amount of change as your current design. But no extra class introduced.\n\nPlease consider adding it to ZkHelixClusterVerifier.Builder, so all the verifier gets it.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485997104", "createdAt": "2020-09-10T00:42:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -105,7 +105,7 @@ public BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clus\n     _dataProvider = new ResourceControllerDataProvider();\n   }\n \n-  private BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+  protected BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODg0NA==", "bodyText": "refactored.", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738844", "createdAt": "2020-09-11T02:36:24Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -105,7 +105,7 @@ public BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clus\n     _dataProvider = new ResourceControllerDataProvider();\n   }\n \n-  private BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+  protected BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEwNA=="}, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTkwNzAwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDowN1rOHPfF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozNjowOVrOHQMLTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDExOQ==", "bodyText": "nit, keep the same log string style?\n\"LOG.error(\"verifier timeout out with timeout {}\", timeout);\"", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000119", "createdAt": "2020-09-10T00:54:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,6 +236,9 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODc2Nw==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738767", "createdAt": "2020-09-11T02:36:09Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,6 +236,9 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDExOQ=="}, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTkwNzg3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDozNFrOHPfGcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozNTo1OFrOHQMLCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI0MA==", "bodyText": "Remove?", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000240", "createdAt": "2020-09-10T00:54:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -19,6 +19,7 @@\n  * under the License.\n  */\n \n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODY5Nw==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738697", "createdAt": "2020-09-11T02:35:58Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -19,6 +19,7 @@\n  * under the License.\n  */\n \n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI0MA=="}, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY2NjcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDo1MVrOHQpeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo1MDowMFrOHQtd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODc1NQ==", "bodyText": "Let's just call it \"waitPeriodTillVerify. Cooldown is not an obvious name.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487218755", "createdAt": "2020-09-11T18:30:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -335,6 +352,11 @@ public B setZkAddr(String zkAddress) {\n       return setZkAddress(zkAddress);\n     }\n \n+    public B setWaitTillVerify(int waitPeriod) {\n+      _coolDown = waitPeriod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NDIyMg==", "bodyText": "changed", "url": "https://github.com/apache/helix/pull/1328#discussion_r487284222", "createdAt": "2020-09-11T20:50:00Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -335,6 +352,11 @@ public B setZkAddr(String zkAddress) {\n       return setZkAddress(zkAddress);\n     }\n \n+    public B setWaitTillVerify(int waitPeriod) {\n+      _coolDown = waitPeriod;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODc1NQ=="}, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY3NTM5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozNDowMFrOHQpjvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNTozNVrOHQsSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDE1OQ==", "bodyText": "As we discussed, please remove the debug logs if not absolutely necessary for long term usage.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487220159", "createdAt": "2020-09-11T18:34:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDgwMg==", "bodyText": "removed all", "url": "https://github.com/apache/helix/pull/1328#discussion_r487264802", "createdAt": "2020-09-11T20:05:35Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDE1OQ=="}, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY5OTQxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo0MjowNVrOHQpylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo1MDoxNFrOHQteWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMzk1OA==", "bodyText": "I believe you can and should add the same wait for verifyByZkCallback too.\nThe logic of verifyByZkCallback is that\n\nsubscribe to changes.\nno matter if change happens, verify the state for once.\nif subscription results in some notification, then verify in parallel.\nany of the paths succeed, then the verify succeeds.\n\nIn this case, we shall wait until the first subscribe to ensure the waitTillVerify config takes effect. This won't cause any problem with verifying logic. Since if the change happens before we subscribe, we are still fine because the first default verify check will be done once at least.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487223958", "createdAt": "2020-09-11T18:42:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -187,6 +190,14 @@ public boolean verifyByZkCallback() {\n    * @return\n    */\n   public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NDMxNA==", "bodyText": "make sense.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487284314", "createdAt": "2020-09-11T20:50:14Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -187,6 +190,14 @@ public boolean verifyByZkCallback() {\n    * @return\n    */\n   public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMzk1OA=="}, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}