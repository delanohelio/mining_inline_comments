{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODgxOTkz", "number": 686, "title": "Add resource partition weight gauge", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #685\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe would like to monitor the usage of each capacity for the resource partitions: gauge of the average partition weight for each CAPACITY key.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestUpdatePartitionWeight\n\n\ntestCalculateAveragePartitionWeight\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Results:\n[INFO]\n[WARNING] Tests run: 1063, Failures: 0, Errors: 0, Skipped: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:05 h\n[INFO] Finished at: 2020-01-21T19:15:51-08:00\n[INFO] ------------------------------------------------------------------------\n\n ./scripts/runSingleTest.sh TestDelayedAutoRebalanceWithDisabledInstance 1\n\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 44.566 s - in org.apache.helix.integration.rebalancer.DelayedAutoRebalancer.TestDelayedAutoRebalanceWithDisabledInstance\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  49.406 s\n[INFO] Finished at: 2020-01-22T10:48:30-08:00\n[INFO] ------------------------------------------------------------------------\n\n./scripts/runSingleTest.sh org.apache.helix.integration.rebalancer.DelayedAutoRebalancer.Test* 1\n\n[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 110.733 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:55 min\n[INFO] Finished at: 2020-01-22T10:51:51-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-16T22:41:55Z", "url": "https://github.com/apache/helix/pull/686", "merged": true, "mergeCommit": {"oid": "61c1fe8719eda7985cdb629ad3d8c501171ed3d1"}, "closed": true, "closedAt": "2020-01-22T18:58:08Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7CTrhABqjI5NTYzNjA0ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8qluMAH2gAyMzYzODgxOTkzOjg1NzkwZjYyNGViMjMzYjQzNGJmMDgxYTgzYTZiMzQ5MTk3YzYzYzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2031d2ba94b2f5ff0d991414db47149cf22d54f", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c2031d2ba94b2f5ff0d991414db47149cf22d54f", "committedDate": "2020-01-16T22:20:37Z", "message": "Add partition weight gauge."}, "afterCommit": {"oid": "9b2103357be244c0e2d3353646701d260557fb62", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9b2103357be244c0e2d3353646701d260557fb62", "committedDate": "2020-01-16T22:57:38Z", "message": "Add partition weight gauge."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b2103357be244c0e2d3353646701d260557fb62", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9b2103357be244c0e2d3353646701d260557fb62", "committedDate": "2020-01-16T22:57:38Z", "message": "Add partition weight gauge."}, "afterCommit": {"oid": "b4f9213770133a2368ae9f2e8bc4ab1c81aa9c09", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b4f9213770133a2368ae9f2e8bc4ab1c81aa9c09", "committedDate": "2020-01-16T22:58:19Z", "message": "Add partition weight gauge."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f9213770133a2368ae9f2e8bc4ab1c81aa9c09", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/b4f9213770133a2368ae9f2e8bc4ab1c81aa9c09", "committedDate": "2020-01-16T22:58:19Z", "message": "Add partition weight gauge."}, "afterCommit": {"oid": "ce2a1ee1000865f2c2b436e3c2d45aac2f665c6d", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ce2a1ee1000865f2c2b436e3c2d45aac2f665c6d", "committedDate": "2020-01-17T02:29:38Z", "message": "Add partition weight gauge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/df2f078a1db07bc7c892b810e10e34ec3846993b", "committedDate": "2020-01-17T03:01:56Z", "message": "Add partition weight gauge."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09cc8e17da46cea6faeeb3d9791013e91c00ddb8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/09cc8e17da46cea6faeeb3d9791013e91c00ddb8", "committedDate": "2020-01-17T02:51:46Z", "message": "Should not automatically register resource monitor in constructor."}, "afterCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/df2f078a1db07bc7c892b810e10e34ec3846993b", "committedDate": "2020-01-17T03:01:56Z", "message": "Add partition weight gauge."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTEwMDM3", "url": "https://github.com/apache/helix/pull/686#pullrequestreview-344910037", "createdAt": "2020-01-18T00:51:52Z", "commit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDo1MTo1MlrOFfInnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMToxMTozMFrOFfIxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MTM5MQ==", "bodyText": "getOrCreateResourceMonitor()", "url": "https://github.com/apache/helix/pull/686#discussion_r368191391", "createdAt": "2020-01-18T00:51:52Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -497,6 +497,25 @@ public void setResourceStatus(ExternalView externalView, IdealState idealState,\n     }\n   }\n \n+  /**\n+   * Updates metrics of average partition weight per capacity key for a resource. If a resource\n+   * monitor is not yet existed for this resource, a new resource monitor will be created for this\n+   * resource.\n+   *\n+   * @param resourceName The resource name for which partition weight is updated\n+   * @param averageWeightMap A map of average partition weight of each capacity key:\n+   *                         capacity key -> average partition weight\n+   */\n+  public void updatePartitionWeight(String resourceName, Map<String, Integer> averageWeightMap) {\n+    ResourceMonitor monitor = _resourceMonitorMap.get(resourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MTQ3Nw==", "bodyText": "Why?", "url": "https://github.com/apache/helix/pull/686#discussion_r368191477", "createdAt": "2020-01-18T00:52:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -519,7 +538,7 @@ public void updateRebalancerStats(String resourceName, long numPendingRecoveryRe\n     }\n   }\n \n-  private ResourceMonitor getOrCreateResourceMonitor(String resourceName) {\n+  ResourceMonitor getOrCreateResourceMonitor(String resourceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5Mjk0MA==", "bodyText": "long would be safer.", "url": "https://github.com/apache/helix/pull/686#discussion_r368192940", "createdAt": "2020-01-18T01:04:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/ResourceUsageCalculator.java", "diffHunk": "@@ -142,4 +142,97 @@ public static double measureBaselineDivergence(Map<String, ResourceAssignment> b\n     return numTotalBestPossibleReplicas == 0 ? 1.0d\n         : (1.0d - (double) numMatchedReplicas / (double) numTotalBestPossibleReplicas);\n   }\n+\n+  /**\n+   * Calculates average partition weight per capacity key for a resource config. Example as below:\n+   * Input =\n+   * {\n+   *   \"partition1\": {\n+   *     \"capacity1\": 20,\n+   *     \"capacity2\": 40\n+   *   },\n+   *   \"partition2\": {\n+   *     \"capacity1\": 30,\n+   *     \"capacity2\": 50\n+   *   },\n+   *   \"partition3\": {\n+   *     \"capacity1\": 16,\n+   *     \"capacity2\": 30\n+   *   }\n+   * }\n+   *\n+   * Total weight for key \"capacity1\" = 20 + 30 + 16 = 66;\n+   * Total weight for key \"capacity2\" = 40 + 50 + 30 = 120;\n+   * Total partitions = 3;\n+   * Average partition weight for \"capacity1\" = 66 / 3 = 22;\n+   * Average partition weight for \"capacity2\" = 120 / 3 = 40;\n+   *\n+   * Output =\n+   * {\n+   *   \"capacity1\": 22,\n+   *   \"capacity2\": 40\n+   * }\n+   *\n+   * @param partitionCapacityMap A map of partition capacity:\n+   *        <PartitionName or DEFAULT_PARTITION_KEY, <Capacity Key, Capacity Number>>\n+   * @return A map of partition weight: capacity key -> average partition weight\n+   */\n+  public static Map<String, Integer> calculateAveragePartitionWeight(\n+      Map<String, Map<String, Integer>> partitionCapacityMap) {\n+    Map<String, PartitionWeightCounterEntry> countPartitionWeightMap =\n+        aggregatePartitionWeight(partitionCapacityMap);\n+\n+    // capacity key -> average partition weight\n+    Map<String, Integer> averagePartitionWeightMap = new HashMap<>();\n+\n+    // Calculate average partition weight for each capacity key.\n+    // Per capacity key level:\n+    // average partition weight = (total partition weight) / (number of partitions)\n+    for (Map.Entry<String, PartitionWeightCounterEntry> entry\n+        : countPartitionWeightMap.entrySet()) {\n+      String capacityKey = entry.getKey();\n+      PartitionWeightCounterEntry weightEntry = entry.getValue();\n+      int averageWeight = weightEntry.getWeight() / weightEntry.getPartitions();\n+      averagePartitionWeightMap.put(capacityKey, averageWeight);\n+    }\n+\n+    return averagePartitionWeightMap;\n+  }\n+\n+  /*\n+   * Aggregates partition weight for each capacity key.\n+   */\n+  private static Map<String, PartitionWeightCounterEntry> aggregatePartitionWeight(\n+      Map<String, Map<String, Integer>> partitionCapacityMap) {\n+    // capacity key -> [number of partitions, total weight per capacity key]\n+    Map<String, PartitionWeightCounterEntry> countPartitionWeightMap = new HashMap<>();\n+\n+    partitionCapacityMap.values().forEach(partitionCapacityEntry ->\n+        partitionCapacityEntry.forEach((capacityKey, weight) -> countPartitionWeightMap\n+            .computeIfAbsent(capacityKey, counterEntry -> new PartitionWeightCounterEntry())\n+            .increase(1, weight)));\n+\n+    return countPartitionWeightMap;\n+  }\n+\n+  /*\n+   * Represents total number of partitions and total partition weight for a capacity key.\n+   */\n+  private static class PartitionWeightCounterEntry {\n+    private int partitions;\n+    private int weight;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MzI0OA==", "bodyText": "Let's simplify this by merging the 2 methods?", "url": "https://github.com/apache/helix/pull/686#discussion_r368193248", "createdAt": "2020-01-18T01:06:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/ResourceUsageCalculator.java", "diffHunk": "@@ -142,4 +142,97 @@ public static double measureBaselineDivergence(Map<String, ResourceAssignment> b\n     return numTotalBestPossibleReplicas == 0 ? 1.0d\n         : (1.0d - (double) numMatchedReplicas / (double) numTotalBestPossibleReplicas);\n   }\n+\n+  /**\n+   * Calculates average partition weight per capacity key for a resource config. Example as below:\n+   * Input =\n+   * {\n+   *   \"partition1\": {\n+   *     \"capacity1\": 20,\n+   *     \"capacity2\": 40\n+   *   },\n+   *   \"partition2\": {\n+   *     \"capacity1\": 30,\n+   *     \"capacity2\": 50\n+   *   },\n+   *   \"partition3\": {\n+   *     \"capacity1\": 16,\n+   *     \"capacity2\": 30\n+   *   }\n+   * }\n+   *\n+   * Total weight for key \"capacity1\" = 20 + 30 + 16 = 66;\n+   * Total weight for key \"capacity2\" = 40 + 50 + 30 = 120;\n+   * Total partitions = 3;\n+   * Average partition weight for \"capacity1\" = 66 / 3 = 22;\n+   * Average partition weight for \"capacity2\" = 120 / 3 = 40;\n+   *\n+   * Output =\n+   * {\n+   *   \"capacity1\": 22,\n+   *   \"capacity2\": 40\n+   * }\n+   *\n+   * @param partitionCapacityMap A map of partition capacity:\n+   *        <PartitionName or DEFAULT_PARTITION_KEY, <Capacity Key, Capacity Number>>\n+   * @return A map of partition weight: capacity key -> average partition weight\n+   */\n+  public static Map<String, Integer> calculateAveragePartitionWeight(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5Mzk0Mg==", "bodyText": "nit, static final and put to the class level?", "url": "https://github.com/apache/helix/pull/686#discussion_r368193942", "createdAt": "2020-01-18T01:11:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ResourceMonitor.java", "diffHunk": "@@ -382,6 +367,37 @@ public void updateRebalancerStats(long numPendingRecoveryRebalancePartitions,\n     _numLoadRebalanceThrottledPartitions.updateValue(numLoadRebalanceThrottledPartitions);\n   }\n \n+  /**\n+   * Updates partition weight metric. If the partition capacity keys are changed, all MBean\n+   * attributes will be updated accordingly: old capacity keys will be replaced with new capacity\n+   * keys in MBean server.\n+   *\n+   * @param partitionWeightMap A map of partition weight: capacity key -> partition weight\n+   */\n+  void updatePartitionWeightStats(Map<String, Integer> partitionWeightMap) {\n+    synchronized (_dynamicCapacityMetricsMap) {\n+      if (_dynamicCapacityMetricsMap.keySet().equals(partitionWeightMap.keySet())) {\n+        for (Map.Entry<String, Integer> entry : partitionWeightMap.entrySet()) {\n+          _dynamicCapacityMetricsMap.get(entry.getKey()).updateValue((long) entry.getValue());\n+        }\n+        return;\n+      }\n+\n+      // Capacity keys are changed, so capacity attribute map needs to be updated.\n+      _dynamicCapacityMetricsMap.clear();\n+      final String gaugeMetricSuffix = \"Gauge\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9691ed04d48a6a403b742528b926cc2bf4bb9c27", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9691ed04d48a6a403b742528b926cc2bf4bb9c27", "committedDate": "2020-01-21T21:38:13Z", "message": "Move test to TestResourceMonitor; Simplify code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e66f14088820b3e1068082952cdc093f0f49afe3", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e66f14088820b3e1068082952cdc093f0f49afe3", "committedDate": "2020-01-21T21:35:31Z", "message": "Move test to TestResourceMonitor; Simplify code."}, "afterCommit": {"oid": "9691ed04d48a6a403b742528b926cc2bf4bb9c27", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9691ed04d48a6a403b742528b926cc2bf4bb9c27", "committedDate": "2020-01-21T21:38:13Z", "message": "Move test to TestResourceMonitor; Simplify code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTYwNDMw", "url": "https://github.com/apache/helix/pull/686#pullrequestreview-346160430", "createdAt": "2020-01-21T20:12:44Z", "commit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxMjo0NFrOFgHXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxNDoyOVrOFgHaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxOTQwMw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/686#discussion_r369219403", "createdAt": "2020-01-21T20:12:44Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/ResourceUsageCalculator.java", "diffHunk": "@@ -142,4 +142,97 @@ public static double measureBaselineDivergence(Map<String, ResourceAssignment> b\n     return numTotalBestPossibleReplicas == 0 ? 1.0d\n         : (1.0d - (double) numMatchedReplicas / (double) numTotalBestPossibleReplicas);\n   }\n+\n+  /**\n+   * Calculates average partition weight per capacity key for a resource config. Example as below:\n+   * Input =\n+   * {\n+   *   \"partition1\": {\n+   *     \"capacity1\": 20,\n+   *     \"capacity2\": 40\n+   *   },\n+   *   \"partition2\": {\n+   *     \"capacity1\": 30,\n+   *     \"capacity2\": 50\n+   *   },\n+   *   \"partition3\": {\n+   *     \"capacity1\": 16,\n+   *     \"capacity2\": 30\n+   *   }\n+   * }\n+   *\n+   * Total weight for key \"capacity1\" = 20 + 30 + 16 = 66;\n+   * Total weight for key \"capacity2\" = 40 + 50 + 30 = 120;\n+   * Total partitions = 3;\n+   * Average partition weight for \"capacity1\" = 66 / 3 = 22;\n+   * Average partition weight for \"capacity2\" = 120 / 3 = 40;\n+   *\n+   * Output =\n+   * {\n+   *   \"capacity1\": 22,\n+   *   \"capacity2\": 40\n+   * }\n+   *\n+   * @param partitionCapacityMap A map of partition capacity:\n+   *        <PartitionName or DEFAULT_PARTITION_KEY, <Capacity Key, Capacity Number>>\n+   * @return A map of partition weight: capacity key -> average partition weight\n+   */\n+  public static Map<String, Integer> calculateAveragePartitionWeight(\n+      Map<String, Map<String, Integer>> partitionCapacityMap) {\n+    Map<String, PartitionWeightCounterEntry> countPartitionWeightMap =\n+        aggregatePartitionWeight(partitionCapacityMap);\n+\n+    // capacity key -> average partition weight\n+    Map<String, Integer> averagePartitionWeightMap = new HashMap<>();\n+\n+    // Calculate average partition weight for each capacity key.\n+    // Per capacity key level:\n+    // average partition weight = (total partition weight) / (number of partitions)\n+    for (Map.Entry<String, PartitionWeightCounterEntry> entry\n+        : countPartitionWeightMap.entrySet()) {\n+      String capacityKey = entry.getKey();\n+      PartitionWeightCounterEntry weightEntry = entry.getValue();\n+      int averageWeight = weightEntry.getWeight() / weightEntry.getPartitions();\n+      averagePartitionWeightMap.put(capacityKey, averageWeight);\n+    }\n+\n+    return averagePartitionWeightMap;\n+  }\n+\n+  /*\n+   * Aggregates partition weight for each capacity key.\n+   */\n+  private static Map<String, PartitionWeightCounterEntry> aggregatePartitionWeight(\n+      Map<String, Map<String, Integer>> partitionCapacityMap) {\n+    // capacity key -> [number of partitions, total weight per capacity key]\n+    Map<String, PartitionWeightCounterEntry> countPartitionWeightMap = new HashMap<>();\n+\n+    partitionCapacityMap.values().forEach(partitionCapacityEntry ->\n+        partitionCapacityEntry.forEach((capacityKey, weight) -> countPartitionWeightMap\n+            .computeIfAbsent(capacityKey, counterEntry -> new PartitionWeightCounterEntry())\n+            .increase(1, weight)));\n+\n+    return countPartitionWeightMap;\n+  }\n+\n+  /*\n+   * Represents total number of partitions and total partition weight for a capacity key.\n+   */\n+  private static class PartitionWeightCounterEntry {\n+    private int partitions;\n+    private int weight;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5Mjk0MA=="}, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxOTQ4Ng==", "bodyText": "Done", "url": "https://github.com/apache/helix/pull/686#discussion_r369219486", "createdAt": "2020-01-21T20:12:54Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/ResourceUsageCalculator.java", "diffHunk": "@@ -142,4 +142,97 @@ public static double measureBaselineDivergence(Map<String, ResourceAssignment> b\n     return numTotalBestPossibleReplicas == 0 ? 1.0d\n         : (1.0d - (double) numMatchedReplicas / (double) numTotalBestPossibleReplicas);\n   }\n+\n+  /**\n+   * Calculates average partition weight per capacity key for a resource config. Example as below:\n+   * Input =\n+   * {\n+   *   \"partition1\": {\n+   *     \"capacity1\": 20,\n+   *     \"capacity2\": 40\n+   *   },\n+   *   \"partition2\": {\n+   *     \"capacity1\": 30,\n+   *     \"capacity2\": 50\n+   *   },\n+   *   \"partition3\": {\n+   *     \"capacity1\": 16,\n+   *     \"capacity2\": 30\n+   *   }\n+   * }\n+   *\n+   * Total weight for key \"capacity1\" = 20 + 30 + 16 = 66;\n+   * Total weight for key \"capacity2\" = 40 + 50 + 30 = 120;\n+   * Total partitions = 3;\n+   * Average partition weight for \"capacity1\" = 66 / 3 = 22;\n+   * Average partition weight for \"capacity2\" = 120 / 3 = 40;\n+   *\n+   * Output =\n+   * {\n+   *   \"capacity1\": 22,\n+   *   \"capacity2\": 40\n+   * }\n+   *\n+   * @param partitionCapacityMap A map of partition capacity:\n+   *        <PartitionName or DEFAULT_PARTITION_KEY, <Capacity Key, Capacity Number>>\n+   * @return A map of partition weight: capacity key -> average partition weight\n+   */\n+  public static Map<String, Integer> calculateAveragePartitionWeight(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MzI0OA=="}, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxOTk2OQ==", "bodyText": "For test purpose. As I discussed offline, we will keep this private and just call monitor's register().", "url": "https://github.com/apache/helix/pull/686#discussion_r369219969", "createdAt": "2020-01-21T20:14:03Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java", "diffHunk": "@@ -519,7 +538,7 @@ public void updateRebalancerStats(String resourceName, long numPendingRecoveryRe\n     }\n   }\n \n-  private ResourceMonitor getOrCreateResourceMonitor(String resourceName) {\n+  ResourceMonitor getOrCreateResourceMonitor(String resourceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MTQ3Nw=="}, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMDE1OQ==", "bodyText": "OK.", "url": "https://github.com/apache/helix/pull/686#discussion_r369220159", "createdAt": "2020-01-21T20:14:29Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ResourceMonitor.java", "diffHunk": "@@ -382,6 +367,37 @@ public void updateRebalancerStats(long numPendingRecoveryRebalancePartitions,\n     _numLoadRebalanceThrottledPartitions.updateValue(numLoadRebalanceThrottledPartitions);\n   }\n \n+  /**\n+   * Updates partition weight metric. If the partition capacity keys are changed, all MBean\n+   * attributes will be updated accordingly: old capacity keys will be replaced with new capacity\n+   * keys in MBean server.\n+   *\n+   * @param partitionWeightMap A map of partition weight: capacity key -> partition weight\n+   */\n+  void updatePartitionWeightStats(Map<String, Integer> partitionWeightMap) {\n+    synchronized (_dynamicCapacityMetricsMap) {\n+      if (_dynamicCapacityMetricsMap.keySet().equals(partitionWeightMap.keySet())) {\n+        for (Map.Entry<String, Integer> entry : partitionWeightMap.entrySet()) {\n+          _dynamicCapacityMetricsMap.get(entry.getKey()).updateValue((long) entry.getValue());\n+        }\n+        return;\n+      }\n+\n+      // Capacity keys are changed, so capacity attribute map needs to be updated.\n+      _dynamicCapacityMetricsMap.clear();\n+      final String gaugeMetricSuffix = \"Gauge\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5Mzk0Mg=="}, "originalCommit": {"oid": "df2f078a1db07bc7c892b810e10e34ec3846993b"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjYyMTYx", "url": "https://github.com/apache/helix/pull/686#pullrequestreview-346262161", "createdAt": "2020-01-21T23:28:31Z", "commit": {"oid": "9691ed04d48a6a403b742528b926cc2bf4bb9c27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b1628de6eed11ca7143cd6e82e8fbeade784fd9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5b1628de6eed11ca7143cd6e82e8fbeade784fd9", "committedDate": "2020-01-22T00:12:38Z", "message": "Fix unit test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mjc3NjAw", "url": "https://github.com/apache/helix/pull/686#pullrequestreview-346277600", "createdAt": "2020-01-22T00:14:50Z", "commit": {"oid": "5b1628de6eed11ca7143cd6e82e8fbeade784fd9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoxNDo1MFrOFgNCnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoxNDo1MFrOFgNCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxMjQxMg==", "bodyText": "In this case, put it in finally block and check if monitor is null before unregister.", "url": "https://github.com/apache/helix/pull/686#discussion_r369312412", "createdAt": "2020-01-22T00:14:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestResourceMonitor.java", "diffHunk": "@@ -217,10 +217,13 @@ public void testReportData() throws JMException {\n     monitor.setRebalanceState(ResourceMonitor.RebalanceStatus.INTERMEDIATE_STATE_CAL_FAILED);\n     Assert.assertEquals(monitor.getRebalanceState(),\n         ResourceMonitor.RebalanceStatus.INTERMEDIATE_STATE_CAL_FAILED.name());\n+\n+    // Has to unregister this monitor to clean up. Otherwise, later tests may be affected and fail.\n+    monitor.unregister();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1628de6eed11ca7143cd6e82e8fbeade784fd9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85790f624eb233b434bf081a83a6b349197c63c6", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/85790f624eb233b434bf081a83a6b349197c63c6", "committedDate": "2020-01-22T00:27:36Z", "message": "Move monitor unregister to finally block."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4865, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}