{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjY5ODU3", "number": 1540, "title": "Move subscribeForChange out of critical section", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1539\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe found TaskScheduling stage is slow for task intensive workloads. From profiling result, we found the problem is:\nTaskSchedulingStage.scheduleWorkflows -> getHelixPropertyStore() and CallBackHandler.invoke() all synchronized on zkHelixManager object, witch makes TaskSchedulingStage extremely slow.\nThis PR moves CallBackHandler.subscribeForChange(), witch takes majority of the time in invoke() out of the critical section.\nTests\n\n The following tests are written for this issue:\n\nNA\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures: \n[ERROR]   TestBatchMessage.testParticipantIncompatibleWithBatchMsg:355 expected:<true> but was:<false>                                                                            \n[INFO]\n[ERROR] Tests run: 1250, Failures: 1, Errors: 0, Skipped: 0\nrerun:\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 13.508 s - in org.apache.helix.integration.messaging.TestBatchMessage\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-11-17T19:56:56Z", "url": "https://github.com/apache/helix/pull/1540", "merged": true, "mergeCommit": {"oid": "dac85828f59ca4ef1fee97bce5ba8d380b98b659"}, "closed": true, "closedAt": "2020-11-19T19:07:34Z", "author": {"login": "xyuanlu"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddjNPrgFqTUzMjkyNzg2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd4epkAFqTUzNDAxMjIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTI3ODY5", "url": "https://github.com/apache/helix/pull/1540#pullrequestreview-532927869", "createdAt": "2020-11-18T00:42:11Z", "commit": {"oid": "e1451a63843ba5250ff03f5ba0412b240a95d379"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDo0MjoxMVrOH1RSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDo0MjoxMVrOH1RSzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxOTkxOQ==", "bodyText": "nit, \"the listener\" -> \"the Helix Manager\"?\nAlso, let's add a TODO here since it might be overkill as we discussed.", "url": "https://github.com/apache/helix/pull/1540#discussion_r525619919", "createdAt": "2020-11-18T00:42:11Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -340,26 +340,28 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n   public void invoke(NotificationContext changeContext) throws Exception {\n     Type type = changeContext.getType();\n     long start = System.currentTimeMillis();\n+    if (logger.isInfoEnabled()) {\n+      logger.info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\",\n+          Thread.currentThread().getId(), _uid, _path, _listener, type);\n+    }\n \n-    // This allows the listener to work with one change at a time\n-    synchronized (_manager) {\n-      if (logger.isInfoEnabled()) {\n-        logger\n-            .info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\", Thread.currentThread().getId(),\n-                _uid, _path, _listener, type);\n-      }\n+    synchronized (this) {\n \n       if (!_expectTypes.contains(type)) {\n         logger.warn(\"Callback handler {} received event in wrong order. Listener: {}, path: {}, \"\n             + \"expected types: {}, but was {}\", _uid, _listener, _path, _expectTypes, type);\n         return;\n-\n       }\n       _expectTypes = nextNotificationType.get(type);\n \n       if (type == Type.INIT || type == Type.FINALIZE || changeContext.getIsChildChange()) {\n         subscribeForChanges(changeContext.getType(), _path, _watchChild);\n       }\n+    }\n+\n+    // This allows the listener to work with one change at a time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1451a63843ba5250ff03f5ba0412b240a95d379"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442d88190819b0c918dc2e49fba01880a8bc5970", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/442d88190819b0c918dc2e49fba01880a8bc5970", "committedDate": "2020-11-18T22:08:32Z", "message": "move subscribeForChange out of critical section"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1451a63843ba5250ff03f5ba0412b240a95d379", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/e1451a63843ba5250ff03f5ba0412b240a95d379", "committedDate": "2020-11-17T02:19:23Z", "message": "move subscribeForChange out of critical section"}, "afterCommit": {"oid": "c461e4443e606428d6ac1de5699e897ce330c668", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/c461e4443e606428d6ac1de5699e897ce330c668", "committedDate": "2020-11-18T22:08:32Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTc1NDg2", "url": "https://github.com/apache/helix/pull/1540#pullrequestreview-533975486", "createdAt": "2020-11-18T23:53:58Z", "commit": {"oid": "c461e4443e606428d6ac1de5699e897ce330c668"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1Mzo1OFrOH2HCAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1Mzo1OFrOH2HCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDM1NA==", "bodyText": "Why do we sync on this here? In fact, how do we reason it?\nAssuming no batch, the calling path would be from enqueueTask(), which is called by handleXXX from ZkClient event thread. And also init() and reset()\nAssuming batch, the calling path would be from _batchCallbackProcessor and also init() and reset().\ninit() is further called by either first time CallbackHandler construction or ZK session change.\nIt seems that  ZK session change is the only places that there would be race condition, right?", "url": "https://github.com/apache/helix/pull/1540#discussion_r526500354", "createdAt": "2020-11-18T23:53:58Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -340,26 +340,28 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n   public void invoke(NotificationContext changeContext) throws Exception {\n     Type type = changeContext.getType();\n     long start = System.currentTimeMillis();\n+    if (logger.isInfoEnabled()) {\n+      logger.info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\",\n+          Thread.currentThread().getId(), _uid, _path, _listener, type);\n+    }\n \n-    // This allows the listener to work with one change at a time\n-    synchronized (_manager) {\n-      if (logger.isInfoEnabled()) {\n-        logger\n-            .info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\", Thread.currentThread().getId(),\n-                _uid, _path, _listener, type);\n-      }\n-\n+    // TODO: Having subscribeForChanges here might be overkill. Maybe it could be moved out later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c461e4443e606428d6ac1de5699e897ce330c668"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c461e4443e606428d6ac1de5699e897ce330c668", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/c461e4443e606428d6ac1de5699e897ce330c668", "committedDate": "2020-11-18T22:08:32Z", "message": "address comment"}, "afterCommit": {"oid": "73102d7c2f75fc8083fe9223a8e6c1b1d32574ea", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/73102d7c2f75fc8083fe9223a8e6c1b1d32574ea", "committedDate": "2020-11-18T23:58:08Z", "message": "address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73102d7c2f75fc8083fe9223a8e6c1b1d32574ea", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/73102d7c2f75fc8083fe9223a8e6c1b1d32574ea", "committedDate": "2020-11-18T23:58:08Z", "message": "address comment"}, "afterCommit": {"oid": "4c778c5032940a941f01eb54213f123c7be991e2", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/4c778c5032940a941f01eb54213f123c7be991e2", "committedDate": "2020-11-19T00:02:05Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTc5OTkw", "url": "https://github.com/apache/helix/pull/1540#pullrequestreview-533979990", "createdAt": "2020-11-19T00:04:33Z", "commit": {"oid": "4c778c5032940a941f01eb54213f123c7be991e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowNDozM1rOH2HROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowNDozM1rOH2HROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNDI0OA==", "bodyText": "Why do we sync on this here? In fact, how do we reason it?\nAssuming no batch, the calling path would be from enqueueTask(), which is called by handleXXX from ZkClient event thread. And also init() and reset()\nAssuming batch, the calling path would be from _batchCallbackProcessor and also init() and reset().\ninit() is further called by either first time CallbackHandler construction or ZK session change.\nIt seems that ZK session change is the only places that there would be race condition, right?", "url": "https://github.com/apache/helix/pull/1540#discussion_r526504248", "createdAt": "2020-11-19T00:04:33Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -340,26 +340,29 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n   public void invoke(NotificationContext changeContext) throws Exception {\n     Type type = changeContext.getType();\n     long start = System.currentTimeMillis();\n+    if (logger.isInfoEnabled()) {\n+      logger.info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\",\n+          Thread.currentThread().getId(), _uid, _path, _listener, type);\n+    }\n \n-    // This allows the listener to work with one change at a time\n-    synchronized (_manager) {\n-      if (logger.isInfoEnabled()) {\n-        logger\n-            .info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\", Thread.currentThread().getId(),\n-                _uid, _path, _listener, type);\n-      }\n-\n+    // TODO: Having subscribeForChanges in critical section might be overkill.\n+    // Maybe it could be moved out later.\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c778c5032940a941f01eb54213f123c7be991e2"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e23d1bd1c9a193f0ebafe34293f60899668a25", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/81e23d1bd1c9a193f0ebafe34293f60899668a25", "committedDate": "2020-11-19T00:04:43Z", "message": "address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c778c5032940a941f01eb54213f123c7be991e2", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/4c778c5032940a941f01eb54213f123c7be991e2", "committedDate": "2020-11-19T00:02:05Z", "message": "address comment"}, "afterCommit": {"oid": "81e23d1bd1c9a193f0ebafe34293f60899668a25", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/81e23d1bd1c9a193f0ebafe34293f60899668a25", "committedDate": "2020-11-19T00:04:43Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTgxMjgx", "url": "https://github.com/apache/helix/pull/1540#pullrequestreview-533981281", "createdAt": "2020-11-19T00:07:44Z", "commit": {"oid": "81e23d1bd1c9a193f0ebafe34293f60899668a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowNzo0NFrOH2HVpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowNzo0NFrOH2HVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNTM4MA==", "bodyText": "why sync on _manager?\nby the same argument as sync(this) above, it seems that there is no across _manager race condition, aside from ZK session change. Or am I missing something?", "url": "https://github.com/apache/helix/pull/1540#discussion_r526505380", "createdAt": "2020-11-19T00:07:44Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -340,26 +340,28 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n   public void invoke(NotificationContext changeContext) throws Exception {\n     Type type = changeContext.getType();\n     long start = System.currentTimeMillis();\n+    if (logger.isInfoEnabled()) {\n+      logger.info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\",\n+          Thread.currentThread().getId(), _uid, _path, _listener, type);\n+    }\n \n-    // This allows the listener to work with one change at a time\n-    synchronized (_manager) {\n-      if (logger.isInfoEnabled()) {\n-        logger\n-            .info(\"{} START: CallbackHandler {}, INVOKE {} listener: {} type: {}\", Thread.currentThread().getId(),\n-                _uid, _path, _listener, type);\n-      }\n-\n+    synchronized (this) {\n       if (!_expectTypes.contains(type)) {\n         logger.warn(\"Callback handler {} received event in wrong order. Listener: {}, path: {}, \"\n             + \"expected types: {}, but was {}\", _uid, _listener, _path, _expectTypes, type);\n         return;\n-\n       }\n       _expectTypes = nextNotificationType.get(type);\n \n       if (type == Type.INIT || type == Type.FINALIZE || changeContext.getIsChildChange()) {\n         subscribeForChanges(changeContext.getType(), _path, _watchChild);\n       }\n+    }\n+\n+    // This allows the Helix Manager to work with one change at a time\n+    // TODO: Maybe we don't need to sync on _manager for all types of listener. PCould be a\n+    // potential improvement candidate.\n+    synchronized (_manager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e23d1bd1c9a193f0ebafe34293f60899668a25"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDEyMjI2", "url": "https://github.com/apache/helix/pull/1540#pullrequestreview-534012226", "createdAt": "2020-11-19T01:29:12Z", "commit": {"oid": "81e23d1bd1c9a193f0ebafe34293f60899668a25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4134, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}