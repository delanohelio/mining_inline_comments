{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDQwNzgx", "number": 1059, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNDoxOFrOEE3W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NDozOFrOEFP0aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM2NzQ1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNDoxOFrOGiwXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNDoxOFrOGiwXfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzIxMw==", "bodyText": "CONSTANT MBEAN_SERVER?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439097213", "createdAt": "2020-06-11T22:04:18Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM2NzkwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNDozMVrOGiwXyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1MDozMVrOGjW-aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA==", "bodyText": "long?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439097288", "createdAt": "2020-06-11T22:04:31Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwODMyNw==", "bodyText": "Object is required to use assertEquals.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439608327", "createdAt": "2020-06-12T19:36:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjcyMA==", "bodyText": "Did you mean beanServer.getAttribute() returns an Object and expectation needs a Long object as well?\nAssert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n    AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n        expectation);\n\nI think primitives work. And confirmed in your patch changing to long works.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439632720", "createdAt": "2020-06-12T20:40:27Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNTcwMQ==", "bodyText": "I'd rather introduce less hidden type convert in the test logic. Moreover, this is a test. We don't really care about the tiny performance difference. We care about test stability more than the other facts.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439635701", "createdAt": "2020-06-12T20:48:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNjMxNg==", "bodyText": "Actually, I believe the check will fail if using primitive types. The Assert thinks the values are different.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439636316", "createdAt": "2020-06-12T20:49:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTY5NQ==", "bodyText": "Regarding object type, I understand you would like to make sure Assert.assertEquals(Object, Object) is called, instead of auto boxing long type. I am totally fine here and wouldn't care about performance.\n\n\nActually, I believe the check will fail if using primitive types. The Assert thinks the values are different.\n\nThe check would not fail. As I said, it would automatically auto box the primitive value to a boxed primitive (Long). So I don't think (and run it without failure) the check would fail.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439729695", "createdAt": "2020-06-13T10:49:26Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTc2OA==", "bodyText": "We could close this discussion if you don't have different opinions :)", "url": "https://github.com/apache/helix/pull/1059#discussion_r439729768", "createdAt": "2020-06-13T10:50:31Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String\n+        .format(\"%s:%s=%s, %s=%s.%s\", MonitorDomainNames.Rebalancer, \"ClusterName\", clusterName,\n+            \"EntityName\", \"AbnormalStates\", MasterSlaveSMD.name);\n+    final ObjectName TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME =\n+        new ObjectName(TEST_RESOLVER_MONITOR_MBEAN_NAME);\n+\n+    Assert.assertFalse(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+\n+    // Update the resolver configuration for MasterSlave state model.\n+    MonitoredAbnormalResolver monitoredAbnormalResolver =\n+        new MonitoredAbnormalResolver(new MockAbnormalStateResolver(), clusterName,\n+            MasterSlaveSMD.name);\n+\n+    // Validate if the MBean has been registered\n+    Assert.assertTrue(beanServer.isRegistered(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME));\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.AbnormalStatePartitionCounter.name()),\n+        0L);\n+    Assert.assertEquals(beanServer.getAttribute(TEST_RESOLVER_MONITOR_MBEAN_OBJECT_NAME,\n+        AbnormalStatesMetricCollector.AbnormalStatesMetricNames.RecoveryAttemptCounter.name()), 0L);\n+    // Validate if the metrics recording methods work as expected\n+    Random ran = new Random(System.currentTimeMillis());\n+    Long expectation = 1L + ran.nextInt(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzI4OA=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM3MjMyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNjoxNlrOGiwaZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNjoxNlrOGiwaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5Nzk1OA==", "bodyText": "Apache lisence?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439097958", "createdAt": "2020-06-11T22:06:16Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.monitoring.metrics;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM3Mjc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowNjozNVrOGiwaww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo0MTozNVrOGjRFNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5ODA1MQ==", "bodyText": "Maybe some java doc for the public class to explain this monitor?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439098051", "createdAt": "2020-06-11T22:06:35Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.monitoring.metrics;\n+\n+import javax.management.JMException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.implementation.RebalanceCounter;\n+import org.apache.helix.monitoring.metrics.model.CountMetric;\n+\n+public class AbnormalStatesMetricCollector extends MetricCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMzIwNg==", "bodyText": "The class name kind of explaining itself.\nBut it is a good idea to add some comment to the metric names.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439633206", "createdAt": "2020-06-12T20:41:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.monitoring.metrics;\n+\n+import javax.management.JMException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.implementation.RebalanceCounter;\n+import org.apache.helix.monitoring.metrics.model.CountMetric;\n+\n+public class AbnormalStatesMetricCollector extends MetricCollector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5ODA1MQ=="}, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM3OTM3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowOTozMVrOGiwe6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjowOTozMVrOGiwe6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5OTExNQ==", "bodyText": "Hardcoded AbnormalStatesMetricCollector -> AbnormalStatesMetricCollector.class.getSimpleName()? Benefit is  when refactoring the class name we wouldn't miss this.", "url": "https://github.com/apache/helix/pull/1059#discussion_r439099115", "createdAt": "2020-06-11T22:09:31Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.monitoring.metrics;\n+\n+import javax.management.JMException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.implementation.RebalanceCounter;\n+import org.apache.helix.monitoring.metrics.model.CountMetric;\n+\n+public class AbnormalStatesMetricCollector extends MetricCollector {\n+  private static final String ABNORMAL_STATES_ENTITY_NAME = \"AbnormalStates\";\n+\n+  public enum AbnormalStatesMetricNames {\n+    AbnormalStatePartitionCounter, RecoveryAttemptCounter\n+  }\n+\n+  public AbnormalStatesMetricCollector(String clusterName, String stateModelDef) {\n+    super(MonitorDomainNames.Rebalancer.name(), clusterName,\n+        String.format(\"%s.%s\", ABNORMAL_STATES_ENTITY_NAME, stateModelDef));\n+    createMetrics();\n+    if (clusterName != null) {\n+      try {\n+        register();\n+      } catch (JMException e) {\n+        throw new HelixException(\"Failed to register MBean for the AbnormalStatesMetricCollector\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTM4NjIyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/MonitoredAbnormalResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoxMjo0NFrOGiwjVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoxMjo0NFrOGiwjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMDI0NQ==", "bodyText": "static final?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439100245", "createdAt": "2020-06-11T22:12:44Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/constraint/MonitoredAbnormalResolver.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.helix.api.rebalancer.constraint.AbnormalStateResolver;\n+import org.apache.helix.controller.stages.CurrentStateOutput;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.StateModelDefinition;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.apache.helix.monitoring.metrics.model.CountMetric;\n+\n+/**\n+ * A wrap class to add monitor functionality into an AbnormalStateResolver implementation.\n+ */\n+public class MonitoredAbnormalResolver implements AbnormalStateResolver {\n+  private final AbnormalStateResolver _resolver;\n+  private final AbnormalStatesMetricCollector _metricCollector;\n+\n+  /**\n+   * A placeholder which will be used when the resolver is not specified.\n+   * This is a dummy class that does not really functional.\n+   */\n+  public static MonitoredAbnormalResolver DUMMY_STATE_RESOLVER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d422e71640d537f8b9cd6003bdeb9c99c6f92c5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM3NDUwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1MjoyOFrOGjW-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0NDo0NVrOGj-VbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTkwNQ==", "bodyText": "Just curious. Why do you use this constant style var name for the local var even it is final?", "url": "https://github.com/apache/helix/pull/1059#discussion_r439729905", "createdAt": "2020-06-13T10:52:28Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer MBEAN_SERVER = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5486570ca6912b84e2a0ae90c85338aaf89c235"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NDYzNg==", "bodyText": "They were fields of the class, but constructing ObjectName requires the signature to include the exception. Then I moved it here.\nI shall change the name : )", "url": "https://github.com/apache/helix/pull/1059#discussion_r440374636", "createdAt": "2020-06-15T18:44:45Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/rebalancer/constraint/TestAbnormalStatesResolverMonitor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.apache.helix.controller.rebalancer.constraint;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Random;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.AbnormalStatesMetricCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestAbnormalStatesResolverMonitor {\n+  private static final MBeanServer MBEAN_SERVER = ManagementFactory.getPlatformMBeanServer();\n+\n+  @Test\n+  public void testMonitorResolver()\n+      throws MalformedObjectNameException, AttributeNotFoundException, MBeanException,\n+      ReflectionException, InstanceNotFoundException {\n+    final String clusterName = \"TestCluster\";\n+\n+    final String TEST_RESOLVER_MONITOR_MBEAN_NAME = String", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTkwNQ=="}, "originalCommit": {"oid": "a5486570ca6912b84e2a0ae90c85338aaf89c235"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM3NTE1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NDozOFrOGjW_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NDozOFrOGjW_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTk5Mw==", "bodyText": "Nit, maybe javadoc style /** comment */ so the comments would be shown in javadoc where it is supposed to be, as I see this as public and external user could see the javadoc? If you expect to expose the comments in javadoc", "url": "https://github.com/apache/helix/pull/1059#discussion_r439729993", "createdAt": "2020-06-13T10:54:38Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/monitoring/metrics/AbnormalStatesMetricCollector.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.apache.helix.monitoring.metrics;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import javax.management.JMException;\n+\n+import org.apache.helix.HelixException;\n+import org.apache.helix.monitoring.mbeans.MonitorDomainNames;\n+import org.apache.helix.monitoring.metrics.implementation.RebalanceCounter;\n+import org.apache.helix.monitoring.metrics.model.CountMetric;\n+\n+public class AbnormalStatesMetricCollector extends MetricCollector {\n+  private static final String ABNORMAL_STATES_ENTITY_NAME = \"AbnormalStates\";\n+\n+  public enum AbnormalStatesMetricNames {\n+    // The counter of the partitions that contains abnormal state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5486570ca6912b84e2a0ae90c85338aaf89c235"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}