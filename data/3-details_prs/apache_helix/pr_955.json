{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTMxNjQ3", "number": 955, "title": "Fix MSD routing data refreshing", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes part of #939\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\n\n\nRouting data update methods in ZkMetadataStoreDirectory writes routing data to ZK and refresh routing cache. However, it should not refresh routing data if writing to ZK fails. Refreshing routing should only be proceeded if writing to ZK is successful.\n\n\nThe test is flaky because of removing namespace when refreshing routing data. It is caused by race condition between the read request after updating and data change callback to refresh routing (which is second refresh). Namespace should only be removed when exception is thrown.\n\n\nTests\n\n The following tests are written for this issue:\n\nFix TestZkMetadataStoreDirectory\n\n The following is the result of the \"mvn test\" command on the appropriate module:\nBefore: TestZkMetadataStoreDirectory failed within 5 attempts.\nAfter: 50 attempts of running TestZkMetadataStoreDirectory passed\n\nIn helix-rest:\n[INFO] Tests run: 155, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 40.216 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 155, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  47.437 s\n[INFO] Finished at: 2020-04-22T17:39:58-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-04-15T04:18:05Z", "url": "https://github.com/apache/helix/pull/955", "merged": true, "mergeCommit": {"oid": "9106e884802a45722e7dc2068c3c51f2b730f90c"}, "closed": true, "closedAt": "2020-04-23T01:59:39Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX6sU3gFqTM5MzkzMDc0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaS-exgBqjMyNjMwNjUyMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTMwNzQ4", "url": "https://github.com/apache/helix/pull/955#pullrequestreview-393930748", "createdAt": "2020-04-15T16:17:46Z", "commit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzo0NlrOGGBajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo1NlrOGGB3Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgyMg==", "bodyText": "This if statement shouldn't be deleted. The reasoning is clearly shown in the logging: the callback could be triggered before ZKMetadataStoreDirectory is fully initialized. Removing this if statement leaves the rest of the logic unguarded.", "url": "https://github.com/apache/helix/pull/955#discussion_r408967822", "createdAt": "2020-04-15T16:17:46Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxNw==", "bodyText": "The raw data shouldn't be removed here. The raw data is allowed to contain invalid routing data.", "url": "https://github.com/apache/helix/pull/955#discussion_r408970017", "createdAt": "2020-04-15T16:21:08Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYwMA==", "bodyText": "As you pointed out yesterday, it's better to assign empty data here.", "url": "https://github.com/apache/helix/pull/955#discussion_r408970600", "createdAt": "2020-04-15T16:22:02Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAzNg==", "bodyText": "Overall, I think it's more clean to do try {overwriteOldData} catch {eraseOldData} for both blocks of the logic.", "url": "https://github.com/apache/helix/pull/955#discussion_r408971036", "createdAt": "2020-04-15T16:22:38Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n+      return;\n     }\n+\n+    _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+    _routingDataMap.put(namespace, trieRoutingData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEyMw==", "bodyText": "The meaning of the block on line 343 is \"ensure that an IllegalStateException is raised and the message is 'Failed to get...'\". Is this block ensuring a IllegalArgumentException is raised? That's not what this test case is testing.", "url": "https://github.com/apache/helix/pull/955#discussion_r408975123", "createdAt": "2020-04-15T16:28:56Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -344,6 +345,10 @@ public void testDataDeletionCallback() throws Exception {\n               + \" contains either empty or invalid routing data!\")) {\n             return false;\n           }\n+        } catch (IllegalArgumentException iae) {\n+          if (!iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDgwNzE3", "url": "https://github.com/apache/helix/pull/955#pullrequestreview-394080717", "createdAt": "2020-04-15T19:42:46Z", "commit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0Mjo0NlrOGGI3-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0Mjo0NlrOGGI3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDA0MA==", "bodyText": "I see your point now, thanks for the explanation. Was this test case flaky because of that? This is a very good catch! \ud83d\udc4d\nI think it makes more sense to replace \"anyKey\" with an actual existing key in the routing data; the handling of IllegalArgumentException is only caused by \"anyKey\", and is not what this test case should focus on. My point is that using \"anyKey\" is a mistake. We shouldn't change the test case to accommodate that mistake; we can just correct it by using something like TEST_SHARDING_KEYS.", "url": "https://github.com/apache/helix/pull/955#discussion_r409090040", "createdAt": "2020-04-15T19:42:46Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -344,6 +345,10 @@ public void testDataDeletionCallback() throws Exception {\n               + \" contains either empty or invalid routing data!\")) {\n             return false;\n           }\n+        } catch (IllegalArgumentException iae) {\n+          if (!iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEyMw=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODcwMTYy", "url": "https://github.com/apache/helix/pull/955#pullrequestreview-396870162", "createdAt": "2020-04-20T22:59:57Z", "commit": {"oid": "45e4aabc0cb301b9831164cc0dfe87e97ea7c2a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5c5a47c2d8c629e06d27260f14f5c76c60dcbf", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8c5c5a47c2d8c629e06d27260f14f5c76c60dcbf", "committedDate": "2020-04-23T01:54:26Z", "message": "Fix routing data refreshing in MSDS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e9deb2510c2f647d98e89617eeb29eca8803a01", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6e9deb2510c2f647d98e89617eeb29eca8803a01", "committedDate": "2020-04-23T01:44:57Z", "message": "Merge branch 'master' of github.com:apache/helix into msds"}, "afterCommit": {"oid": "8c5c5a47c2d8c629e06d27260f14f5c76c60dcbf", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8c5c5a47c2d8c629e06d27260f14f5c76c60dcbf", "committedDate": "2020-04-23T01:54:26Z", "message": "Fix routing data refreshing in MSDS"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4772, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}