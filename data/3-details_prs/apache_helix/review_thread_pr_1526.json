{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDkxMTAx", "number": 1526, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NjozMVrOE32kJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNTo0OVrOFHSy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDAxMTI2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NjozMVrOHxcIkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjowNTowM1rOHxf-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzIxNg==", "bodyText": "This implementation could be very confusing... Can we just make a ifelse statement and call the function explicitly?", "url": "https://github.com/apache/helix/pull/1526#discussion_r521603216", "createdAt": "2020-11-11T19:56:31Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +136,59 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API: if yes, use the paginated API; otherwise, fall back to\n+   * the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    checkPaginatedGetChildren();\n+    try {\n+      // This cast is correct because the list we're creating\n+      // is of the same type as the one passed in, which is List<String>.\n+      @SuppressWarnings(\"unchecked\")\n+      List<String> children = (List<String>) (_isPaginationSupported\n+          ? _getChildrenMethod.invoke(_zk, path, watch, -1, -1, -1)\n+          : _getChildrenMethod.invoke(_zk, path, watch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc151d92e5ace92b01c26ba90af5c65b7eba80d5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NjI3NQ==", "bodyText": "The code was updated. How about the current version? @dasahcc", "url": "https://github.com/apache/helix/pull/1526#discussion_r521666275", "createdAt": "2020-11-11T22:05:03Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +136,59 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API: if yes, use the paginated API; otherwise, fall back to\n+   * the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    checkPaginatedGetChildren();\n+    try {\n+      // This cast is correct because the list we're creating\n+      // is of the same type as the one passed in, which is List<String>.\n+      @SuppressWarnings(\"unchecked\")\n+      List<String> children = (List<String>) (_isPaginationSupported\n+          ? _getChildrenMethod.invoke(_zk, path, watch, -1, -1, -1)\n+          : _getChildrenMethod.invoke(_zk, path, watch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzIxNg=="}, "originalCommit": {"oid": "bc151d92e5ace92b01c26ba90af5c65b7eba80d5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEwMTk1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozMzowNlrOH4jiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTowMDoyM1rOH-8FAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ==", "bodyText": "Instead of calling this every time when client getChildren, can we just initialize the method when constructing the ZkConnection?", "url": "https://github.com/apache/helix/pull/1526#discussion_r529064541", "createdAt": "2020-11-23T23:33:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MDc1MQ==", "bodyText": "I also thought about it and tried.\n\nI was thinking not every client will be using getChildren so just no need to use reflection to parse the getChildren method every time in constructor.\nSince we will reset the method cache in reconnect, if we don't call the lookup method here, we still need to call lookup in reconnect and also connect (if close then connect). It means there will be 3 places (constructor, connect, reconnect) calling this method. I'd prefer to just call this method in one place to be simple and not easy to go wrong. If the method is cached, the lookup will just return.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535490751", "createdAt": "2020-12-03T18:45:35Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwNDE4NA==", "bodyText": "Please consider this point together with the question that if we want to have a fallback logic in case the server-side is actually on the older version.\n\nif fallback logic is required, then always check here is not a good idea. Because it will change back the method if we just executed a fallback. Instead, we need to adjust the cached method in multiple places following the slightly different logic depends on whether the proposed method is executable or not.\nif fallback logic is not required, then I don't think we need to reset the cached method on reconnect. The only possibility is our user uses reflection to replace the native zookeeper class at runtime, right? If they are going to that route, then the cached method won't be valid anyway. And we cannot use cache.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535604184", "createdAt": "2020-12-03T20:56:50Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NDE2Ng==", "bodyText": "Because it will change back the method if we just executed a fallback how is it changed back the method? I mean we have if (method != null) return so if the method is already cached, we don\u2019t go further to parse the zookeeper class and change the method cache.\nThe reason we need to reset the cache in reconnect is, when server upgrades to pagination and session expires, it could have a chance to detect server pagination is available. This is the benefit. If we don\u2019t want it, reset in reconnect is unnecessary.\n\nNow, there are multiple places to change the method:\n\nreconnect / close, invalidate the cache: method = null\nin getChildren:\na. if method == null: lookup. else: continue to use the cached method.\nb. if method is unimplemented in server, fallback\n\nWith this strategy, we only have one place in getChildren to lookup the paginated method. Only the case is not able to dynamically detected: server upgrades to pagination from non pagination and there is no session re-establish. For this, we expect clients to restart to be able to use pagination.\n@jiajunwang I am not sure if I fully get your point and answer it. Let me know if I don't. Thanks for the point.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535744166", "createdAt": "2020-12-04T00:23:02Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1ODA4MA==", "bodyText": "As discussed, I think this logic looks good for now. Let's just keep it.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535758080", "createdAt": "2020-12-04T01:00:23Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -132,10 +139,41 @@ public boolean exists(String path, boolean watch) throws KeeperException, Interr\n     return _zk.exists(path, watch) != null;\n   }\n \n+  /**\n+   * Returns a list of children of the given path.\n+   * <p>\n+   * If the watch is non-null and the call is successful (no exception is thrown),\n+   * a watch will be left on the node with the given path.\n+   * <p>\n+   * The implementation uses java reflection to check whether the native zk supports\n+   * paginated getChildren API:\n+   * <p>- if yes, and {@link #GETCHILDREN_PAGINATION_DISABLED} is false, call the paginated API;\n+   * <p>- otherwise, fall back to the non-paginated API.\n+   *\n+   * @param path the path of the node\n+   * @param watch a boolean flag to indicate whether the watch should be added to the node\n+   * @return a list of children of the given path\n+   * @throws KeeperException if the server signals an error with a non-zero error code\n+   * @throws InterruptedException if the server transaction is interrupted\n+   */\n   @Override\n   public List<String> getChildren(final String path, final boolean watch)\n       throws KeeperException, InterruptedException {\n-    return _zk.getChildren(path, watch);\n+    lookupGetChildrenMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDU0MQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEwNjUxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozNTowM1rOH4jlHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNzoxOFrOH-v9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NTI0Ng==", "bodyText": "Just throw an exception. Fail earlier to block the whole logic from starting up. This is much safer than allowing a partially working client.", "url": "https://github.com/apache/helix/pull/1526#discussion_r529065246", "createdAt": "2020-11-23T23:35:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1OTU1OQ==", "bodyText": "If this is not supported, later then it is called, exception will also be thrown.\nWe should not expect this exception as all zk versions support this method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535559559", "createdAt": "2020-12-03T20:17:18Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NTI0Ng=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODExNDA3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozODoxMFrOH4jpsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxOToxMFrOH-wF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NjQxOA==", "bodyText": "nit, how about the following logic?\nif (! GETCHILDREN_PAGINATION_DISABLED) {\ntry {\n_getChildrenMethod =\nZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\nreturn;\n} catch (...) {\nlog...\n}\n}\nlookupNonPaginatedGetChildren();\nreturn;", "url": "https://github.com/apache/helix/pull/1526#discussion_r529066418", "createdAt": "2020-11-23T23:38:10Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2MTcwMA==", "bodyText": "I thought about it. The reason for this is I'd like to include the logging in the end. If we return before logging, there is no logging.\nSince you also prefer this, I have wrapped the code block into a private method so logging is after the method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535561700", "createdAt": "2020-12-03T20:19:10Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NjQxOA=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyMjcyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0MTo0OVrOH4jvHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo0NDowMVrOIHWMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ==", "bodyText": "In this case, do you want to retry the operation?", "url": "https://github.com/apache/helix/pull/1526#discussion_r529067805", "createdAt": "2020-11-23T23:41:49Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0NzkwNw==", "bodyText": "Right. That's the purpose of the next line throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\nWhen the KeeperException.UnimplementedException is thrown from the server, it is a connection loss, so just throw it to ZkClient and its retry logic will retry the getChildren operation appropriately.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535547907", "createdAt": "2020-12-03T20:04:07Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYyMDMzMQ==", "bodyText": "I think the retry should be done here with some fallback logic (which changes the cached method). Otherwise, the caller's retry will fail too, right? So why bother?", "url": "https://github.com/apache/helix/pull/1526#discussion_r535620331", "createdAt": "2020-12-03T21:07:51Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY0NTA4Mw==", "bodyText": "The cached method is changed here, and later when zkClient retries calling getChildren(), it'll used the fallback API.\nWe cannot retry calling zk server right now because the connection is loss. ZkClient has to wait for re-connected. So zkclient is the right place to retry the operation.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535645083", "createdAt": "2020-12-03T21:33:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc2MDg4Nw==", "bodyText": "This is hacky but I don't have any better way. Let's add a TODO here for the record. But the logic itself should be safe.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535760887", "createdAt": "2020-12-04T01:07:46Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NDUzOQ==", "bodyText": "@jiajunwang Here's the log (#1525 (comment)) that proves the disconnection after UnimplementedException is returned from server.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544574539", "createdAt": "2020-12-16T19:44:01Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)\n+      throws KeeperException, InterruptedException {\n+    if (cause instanceof KeeperException.UnimplementedException) {\n+      LOG.warn(\"Paginated getChildren is unimplemented in ZK server! \"\n+          + \"Falling back to non-paginated getChildren\");\n+      lookupNonPaginatedGetChildren();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzgwNQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyODE2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0NDowNlrOH4jyfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NzoyMlrOH-x-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODY3MA==", "bodyText": "Just to confirm, as we discussed, if the ZK server is upgraded in between, the client shall be able to leverage the new API immediately, right? In this case, I assume we expect the ZkConnection object to be recreated. And I believe this is the case when we handle new session creation.\nBut what if the server upgrade is fast and the session is not expired? In this case, since you update the method here (and fallback to the older one), then the client will never use pagination call unless we restart the client.", "url": "https://github.com/apache/helix/pull/1526#discussion_r529068670", "createdAt": "2020-11-23T23:44:06Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1MDU0MQ==", "bodyText": "Just to confirm, as we discussed, if the ZK server is upgraded in between, the client shall be able to leverage the new API immediately, right? In this case, I assume we expect the ZkConnection object to be recreated. And I believe this is the case when we handle new session creation.\n\nIf zk server is upgraded after the client has been created, we can not guarantee the client will always know server has enabled pagination. The example is what you said \"what if the server upgrade is fast and the session is not expired\". If session expires during the upgrade, client can reset the cache and re-detect the pagination. It cannot solving the problem of completely auto detecting.\n\nBut what if the server upgrade is fast and the session is not expired? In this case, since you update the method here (and fallback to the older one), then the client will never use pagination call unless we restart the client.\n\nZkClient cannot automatically and dynamically handle this case. The agreement is, to enable pagination, ZK server should be supposed to upgrade to have pagination as the first step. If client has pagination first but server upgrades later, client should be expected to bounce.\nTo detect the server has enabled the pagination without a session change, every time the client's getChildren call must try pagination first. This is inefficient and not what we want. We have to trade off. And obviously we'd expect clients to restart if this case happens.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535550541", "createdAt": "2020-12-03T20:08:41Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODY3MA=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4OTA2Mw==", "bodyText": "One possible way is that, once the call throws an unsupported exception, we fallback to the old getChildren method.\nThen on every new session establishment, we reset it based on the configuration and zk client lib method availability.\nThe concern is that the \"agreement\" is difficult for users to use. And considering we might need to rollback ZK server version if any bugs found, it could cause many troubles.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535589063", "createdAt": "2020-12-03T20:44:04Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODY3MA=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5MjYxMg==", "bodyText": "This can only solve the case when session is re-established, not the case when server is upgrade but no session re-establishing. Yes, we've invalidated the cache each time session is changed.", "url": "https://github.com/apache/helix/pull/1526#discussion_r535592612", "createdAt": "2020-12-03T20:47:22Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +230,53 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+    try {\n+      if (GETCHILDREN_PAGINATION_DISABLED) {\n+        lookupNonPaginatedGetChildren();\n+      } else {\n+        // Lookup the paginated getChildren API\n+        _getChildrenMethod =\n+            ZooKeeper.class.getMethod(\"getAllChildrenPaginated\", String.class, boolean.class);\n+      }\n+    } catch (NoSuchMethodException e1) {\n+      // Pagination API is not supported, fall back to non-paginated API\n+      lookupNonPaginatedGetChildren();\n+    }\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void lookupNonPaginatedGetChildren() {\n+    try {\n+      _getChildrenMethod = ZooKeeper.class.getMethod(\"getChildren\", String.class, boolean.class);\n+    } catch (NoSuchMethodException e2) {\n+      // We should not expect this exception here.\n+      LOG.error(\"getChildren is not supported in this zookeeper version!\");\n+    }\n+  }\n+\n+  private void handleInvokedMethodException(Throwable cause)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODY3MA=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjUyMTQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0NTozOFrOH8Ge2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1Nzo0M1rOIINrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ==", "bodyText": "If our code can automatically detect the new API, why do we need this config option?", "url": "https://github.com/apache/helix/pull/1526#discussion_r532782809", "createdAt": "2020-11-30T17:45:38Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MjY1NA==", "bodyText": "It's offered to completely disable pagination even though pagination is supported in ZK. It is helpful for deployment: if something is wrong in application after pagination deployed, application can quickly disable pagination by using this system config, without changing the zk lib or roll back zk server.\nAnd if an application wants to use LinkedIn zk but doesn't want to use paginated getChildren, this is an option to disable it as well.", "url": "https://github.com/apache/helix/pull/1526#discussion_r532792654", "createdAt": "2020-11-30T18:00:37Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0Njk1Nw==", "bodyText": "On my understanding, this is more for our internal debugging purposes. If the feature is rock solid then we don't need it.\nSo the question here is how confident are we about the pagination feature?\nAnd I think the worst case is that we allow this one to temporarily exist. We need a TODO here to remove it once the feature is stable.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544746957", "createdAt": "2020-12-17T01:38:33Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjQ3Nw==", "bodyText": "I think it's not only about internal debugging purpose. This option can be used to disable calling pagination if users want to. It can help roll back the pagination easily without users downgrade the zk lib or server. I think the flexibility is helpful. If there is a case that users still prefer to always use the non-paginated getChildren, this option can help.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544762477", "createdAt": "2020-12-17T02:22:35Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMzU1OA==", "bodyText": "The question here is why the users will ever want to disable it? In theory, we can make all functions diable-able, but the project will be out of control. When you debug a user cluster, you need to check dozens of true or false options, then try to combine these variables in your mind, then check the log...\nI think I cannot manage that kind of support.\nSo if it is not absolutely necessary, I suggest not making these options permanent.\nObviously, we need it for now. My point is that it should be temporary.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545323558", "createdAt": "2020-12-17T18:50:25Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MzYzMg==", "bodyText": "Added a note in java doc to indicate the config is temporary - can be deprecated after pagination is deployed and stable.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545483632", "createdAt": "2020-12-17T23:57:43Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -63,4 +63,18 @@\n \n   /** System property key for jute.maxbuffer */\n   public static final String JUTE_MAXBUFFER = \"jute.maxbuffer\";\n+\n+  /**\n+   * Setting this property to {@code true} in system properties will force Helix ZkClient to use\n+   * the <b>non-paginated</b> {@code getChildren} API, no matter if zookeeper supports pagination\n+   * or not.\n+   * <p>\n+   * Given both the zookeeper client and server support <b>paginated</b> {@code getChildren} API as\n+   * a prerequisite, if set to {@code false}, it will enable Helix ZkClient's {@code getChildren}\n+   * API to call zookeeper's <b>paginated</b> {@code getChildren} API.\n+   * <p>\n+   * The default value is {@code false}.\n+   */\n+  public static final String ZK_GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjgwOQ=="}, "originalCommit": {"oid": "6ba6f4d87bd5846c1bde4ceb0ac5931612fb062f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njk2NzAxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDoxMTowM1rOIBAvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyNDowMFrOIBySGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMTY5Mg==", "bodyText": "If people are using the original patch, is this going to be problem?", "url": "https://github.com/apache/helix/pull/1526#discussion_r537931692", "createdAt": "2020-12-08T00:11:03Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMTA1NQ==", "bodyText": "for this reflection way to determine the code used. there are three possibilities of server.\n1/ normal server 2/ server with your patch 3/ server with original path.\nThe point I thinking is that if 3/ is used by some team, make sure it can work with our client same as 1/?", "url": "https://github.com/apache/helix/pull/1526#discussion_r538731055", "createdAt": "2020-12-08T19:05:08Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMTY5Mg=="}, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MzMyMQ==", "bodyText": "Thanks, @kaisun2000 for the clarification!\nI don\u2019t think we have to do this. Firstly, we are solving the case for internal use cases. So we have our own ZK with pagination. Helix is by default still using apache ZK.\nIf the external users customize their ZK by directly using the original patch, I don\u2019t think they would expect helix to be compatible with their custom ZK. So Helix will still call the non-paginated getChildren API that is supposed to be in their custom ZK. If they really want the pagination API in helix, it's recommended to use linkedin ZK or our patch, so helix will be compatible with that.", "url": "https://github.com/apache/helix/pull/1526#discussion_r538743321", "createdAt": "2020-12-08T19:24:00Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMTY5Mg=="}, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzQyMjI5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo1NDoxNlrOIHhDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1Njo0OFrOIINp-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ==", "bodyText": "One suggestion here, returning the method here so the _getChildrenMethod is only referred in this method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544752511", "createdAt": "2020-12-17T01:54:16Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNjM4MQ==", "bodyText": "I am not sure if I fully understand your point. I guess your point is to reduce the places where _getChildrenMethod is referred. I just tried and realized that the code is not as clean as current way, because lookupNonPaginatedGetChildren is called twice. It won't achieve \"the _getChildrenMethod is only referred in this method\".\nSince it is an internal variable/cache, I think it's fine to refer it multiple places as current way.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544836381", "createdAt": "2020-12-17T06:10:12Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNjc4NA==", "bodyText": "This is more about style. Overall, private methods shall not directly refer to the private fields unless it is the method to update them.\nThere are 2 main benefits, from my perspective:\n\nThe private method is independent of the private field. If one side is changed, the code will either not build or work fine. In either case, we will not introduce hidden bugs.\nIn the case that we want to modulize things further, an independent private method is much easier to maintain. For example, if you want to make it a uitl method, or if you want to add more concurrent control there.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545326784", "createdAt": "2020-12-17T18:54:42Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MzI1Ng==", "bodyText": "Synced with @jiajunwang offline. The style change is not a must. Also updated the style to reduce the reference places.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545483256", "createdAt": "2020-12-17T23:56:48Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjUxMQ=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzQyNTMwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo1NToyMlrOIHhFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMjozOFrOIIEw9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw==", "bodyText": "Can we just move it to the lookupGetChildrenMethod() method? I don't see any other callers of it.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544752927", "createdAt": "2020-12-17T01:55:22Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3ODA3Mg==", "bodyText": "This is to clean up the code a bit. Ref discussion thread: #1526 (comment)", "url": "https://github.com/apache/helix/pull/1526#discussion_r544778072", "createdAt": "2020-12-17T03:07:37Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMDU4MA==", "bodyText": "I don't get it. The comment was about the if the condition itself. I don't see any relationship between that suggestion and making it a private method.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545330580", "createdAt": "2020-12-17T19:00:45Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNzU4OA==", "bodyText": "Synced with Huizhi, it helps to ensure the return won't prematurely end the method so we don't see the log. I think it is fine.", "url": "https://github.com/apache/helix/pull/1526#discussion_r545337588", "createdAt": "2020-12-17T19:12:38Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,60 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {\n+    if (_getChildrenMethod != null) {\n+      // Method is already cached.\n+      return;\n+    }\n+\n+    doLookUpGetChildrenMethod();\n+\n+    LOG.info(\"Pagination config {}={}, method to be invoked: {}\",\n+        ZkSystemPropertyKeys.ZK_GETCHILDREN_PAGINATION_DISABLED, GETCHILDREN_PAGINATION_DISABLED,\n+        _getChildrenMethod.getName());\n+  }\n+\n+  private void doLookUpGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MjkyNw=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzQ2NDM0OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoxMTowMlrOIHhaiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo0MjoxNVrOIHm5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1ODQwOQ==", "bodyText": "Not sure if this will cause some race condition issues?\nFor example, the reconnect() cleans up the method here. And in the other application thread, the operation is about to use this object (with the same reference), then it will be an NPE.", "url": "https://github.com/apache/helix/pull/1526#discussion_r544758409", "createdAt": "2020-12-17T02:11:02Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -102,6 +112,7 @@ protected void reconnect(Watcher watcher) throws InterruptedException {\n         LOG.debug(\"Creating new ZookKeeper instance to reconnect to \" + _servers + \".\");\n         _zk = new ZooKeeper(_servers, _sessionTimeOut, watcher);\n         prevZk.close();\n+        _getChildrenMethod = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0ODI0NQ==", "bodyText": "Theoretically it could happen, though the possibility is almost 0. It\u2019s like\nif (a == null) { a = xxx; }\na.call();\n\nBetween these two lines.\nNPE does not cause correctness issue, the operation just fails. NPE could also happen now: like zkclient is closed, another thread is still trying the zk operation, it could also get NPE, as zk = null in close()\nThere are a few options to avoid it:\n\nlock the method reference. Obviously we don\u2019t want it as it\u2019s not nice. Would ask why only getChildren is locked but not other APIs. Kind of weird..\nInstead of setting method = null in reconnect, we do lookup() and assign a value to it, so null is avoided. This is something I considered before when comparing it with setting to null (I felt setting to null might be risky not a good practice at least..)\nJust don\u2019t reset method in reconnect. The purpose of resetting is for client has pagination zk version first, and then zk server upgrades, so client can reset and detect server supports it then client can start to use pagination. But it could not cover all cases, like if servers can upgrade really fast without expiring client session, client can still not detect server\u2019s upgrade. So I think the right way is, if we want to onboard pagination, always expect server upgrades first then client. Vice versa, pagination is not leveraged in helix client.\n\n2 is doable, but I prefer 3, because we always follow the rule: \"if we want to onboard pagination, always expect server upgrades first then client\".  2 is not transparent or consistent: sometimes it can detect and sometimes not.\nWhat do you think?", "url": "https://github.com/apache/helix/pull/1526#discussion_r544848245", "createdAt": "2020-12-17T06:42:15Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -102,6 +112,7 @@ protected void reconnect(Watcher watcher) throws InterruptedException {\n         LOG.debug(\"Creating new ZookKeeper instance to reconnect to \" + _servers + \".\");\n         _zk = new ZooKeeper(_servers, _sessionTimeOut, watcher);\n         prevZk.close();\n+        _getChildrenMethod = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1ODQwOQ=="}, "originalCommit": {"oid": "546f5d54fde413ee8a13f0c7b6051c31bd53fc3d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTkxODk4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNDozOVrOIItePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyNTowMVrOIIt22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDU0Mg==", "bodyText": "Would this cause problem if default is enabled? Let's say server version is not supporting that. Then our getChildren will keep failing in looking up the method?", "url": "https://github.com/apache/helix/pull/1526#discussion_r546004542", "createdAt": "2020-12-18T18:14:39Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -36,16 +38,23 @@\n import org.apache.zookeeper.ZooKeeper.States;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n-\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ZkConnection implements IZkConnection {\n-  private static final Logger LOG = Logger.getLogger(ZkConnection.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkConnection.class);\n \n   /** It is recommended to use quite large sessions timeouts for ZooKeeper. */\n   private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n \n+  // A config to force disabling using ZK's paginated getChildren.\n+  // By default the value is false.\n+  private static final boolean GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxMDg0MQ==", "bodyText": "It won't have a problem. If server does not support the feature, it will handle the UnimplementedException from server and fallback to the non-paginated API.", "url": "https://github.com/apache/helix/pull/1526#discussion_r546010841", "createdAt": "2020-12-18T18:25:01Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -36,16 +38,23 @@\n import org.apache.zookeeper.ZooKeeper.States;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n-\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ZkConnection implements IZkConnection {\n-  private static final Logger LOG = Logger.getLogger(ZkConnection.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkConnection.class);\n \n   /** It is recommended to use quite large sessions timeouts for ZooKeeper. */\n   private static final int DEFAULT_SESSION_TIMEOUT = 30000;\n \n+  // A config to force disabling using ZK's paginated getChildren.\n+  // By default the value is false.\n+  private static final boolean GETCHILDREN_PAGINATION_DISABLED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDU0Mg=="}, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTkyMjg1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNTo0OVrOIItgkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOToxMToxMlrOIIvaLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNTEzOA==", "bodyText": "Is this one time look up? Why we dont do it at initial stage and make it final?", "url": "https://github.com/apache/helix/pull/1526#discussion_r546005138", "createdAt": "2020-12-18T18:15:49Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzNjI2OQ==", "bodyText": "It is a two step lookup: lookup the client lib, and call server. If we do lookup at the construction stage, we have to call server to know if server supports pagination or not. This is an extra call.\nWe'd like to save this extra call by using lazy init.\na. only when the first getChildren call, we get the method from client zk, then send it to server\nb. If server does not support, we fallback to non-paginated. And cache it.\nc. Future calls, it\u2019ll always use the cached method to getChildren\n\nSynced with @dasahcc offline, he agreed.", "url": "https://github.com/apache/helix/pull/1526#discussion_r546036269", "createdAt": "2020-12-18T19:11:12Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkConnection.java", "diffHunk": "@@ -192,4 +234,59 @@ public String getServers() {\n   public void addAuthInfo(String scheme, byte[] auth) {\n     _zk.addAuthInfo(scheme, auth);\n   }\n+\n+  private void lookupGetChildrenMethod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNTEzOA=="}, "originalCommit": {"oid": "8dec5018e49eace3202d189c9506034ce795500e"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 800, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}