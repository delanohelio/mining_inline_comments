{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTMwNTE3", "number": 1185, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo1Njo0MVrOETHqdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTo1NzowOFrOEVjlBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDgzOTU5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo1Njo0MVrOG4rEYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDoxMzoxMFrOG5yNlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTA3Mw==", "bodyText": "@kaisun2000 Could you rebase this PR with master?", "url": "https://github.com/apache/helix/pull/1185#discussion_r462079073", "createdAt": "2020-07-29T06:56:41Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NDY5Mw==", "bodyText": "rebased.", "url": "https://github.com/apache/helix/pull/1185#discussion_r463244693", "createdAt": "2020-07-30T20:13:10Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTA3Mw=="}, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDg1MDI5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowMDowOFrOG4rKvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNjowNVrOG73jZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg==", "bodyText": "It seems this log is for your debugging. Do we want to remove it then?", "url": "https://github.com/apache/helix/pull/1185#discussion_r462080702", "createdAt": "2020-07-29T07:00:08Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -74,7 +81,8 @@ public void syncStart() {\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n+        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNTYyNw==", "bodyText": "No, we don't. We specifically need this. This is a building block to identify leakage.", "url": "https://github.com/apache/helix/pull/1185#discussion_r463215627", "createdAt": "2020-07-30T19:16:20Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -74,7 +81,8 @@ public void syncStart() {\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n+        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxOTExNg==", "bodyText": "What's the usage of stacktrace? If this is for human debug, I would suggest making it debug log.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465419116", "createdAt": "2020-08-05T01:28:40Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -74,7 +81,8 @@ public void syncStart() {\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n+        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyOTM1MQ==", "bodyText": "This is testing code. Make it info won't pollute log. Will change to debug anyway.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465429351", "createdAt": "2020-08-05T02:06:05Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -74,7 +81,8 @@ public void syncStart() {\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n+        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}, "originalCommit": {"oid": "bf8abba3d01aa0623c3d289426708f3f9997b66b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg5MjY1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToyMjo0NVrOG720_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxMjozNVrOG73p3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNzQ3MA==", "bodyText": "AfterSuite is done after all test classes have been executed. So if you attach the class name, it won't be very informative, IMHO. What's the usage of this log?", "url": "https://github.com/apache/helix/pull/1185#discussion_r465417470", "createdAt": "2020-08-05T01:22:45Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -200,6 +200,7 @@ private void startZooKeeper(int i)\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMTAwNg==", "bodyText": "Removed.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465431006", "createdAt": "2020-08-05T02:12:35Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -200,6 +200,7 @@ private void startZooKeeper(int i)\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNzQ3MA=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg5ODc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToyNTozNFrOG724TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxNDoyNVrOG73rsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODMxNw==", "bodyText": "Just curious, why somewhere we use _gZkCLient, but other places we keep using the ZK_ADDR?\nIf this is because of the test creates more ZKServers, then will the people who add more verifiers with the raw address make more leakage later?", "url": "https://github.com/apache/helix/pull/1185#discussion_r465418317", "createdAt": "2020-08-05T01:25:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestDriver.java", "diffHunk": "@@ -246,7 +246,11 @@ public static void verifyCluster(String uniqClusterName, long beginTime, long ti\n \n     ZkHelixClusterVerifier verifier =\n         new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMTQ3NA==", "bodyText": "Note, here, in TestDriver, we don't have _gZkClient as it is not a subclass of ZkTestBase.java", "url": "https://github.com/apache/helix/pull/1185#discussion_r465431474", "createdAt": "2020-08-05T02:14:25Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestDriver.java", "diffHunk": "@@ -246,7 +246,11 @@ public static void verifyCluster(String uniqClusterName, long beginTime, long ti\n \n     ZkHelixClusterVerifier verifier =\n         new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODMxNw=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjkwMjE2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToyNzozN1rOG726Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxNzo0NVrOG73vLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODgyNw==", "bodyText": "I don't think watcher is created here. It was created when sync start is called.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465418827", "createdAt": "2020-08-05T01:27:37Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -51,6 +55,9 @@ protected ClusterManager(String zkAddr, String clusterName, String instanceName,\n     _clusterName = clusterName;\n     _instanceName = instanceName;\n     _type = type;\n+    _uid = UID.getAndIncrement();\n+\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} created, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjM2NA==", "bodyText": "You are right. Originally, the idea is that sync_start time, you don't see which one is created as you want the creation context of the object, not the creation context of the starting thread. Later, it turned the two places are the same test class. so it does not really matter. Let me remove this one.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465432364", "createdAt": "2020-08-05T02:17:45Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -51,6 +55,9 @@ protected ClusterManager(String zkAddr, String clusterName, String instanceName,\n     _clusterName = clusterName;\n     _instanceName = instanceName;\n     _type = type;\n+    _uid = UID.getAndIncrement();\n+\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} created, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODgyNw=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk0ODEyOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1MjoyNlrOG73UtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoxMToxOVrOG74kBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA==", "bodyText": "This is not testing code, please be careful not to pollute the log in production. I think recording this info in the related thread would be good enough to support detecting leakage in test.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425588", "createdAt": "2020-08-05T01:52:26Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNDcwNA==", "bodyText": "There are many time when I debugged, I wish to know where the zkclient is created when I look at the zkclient event thread logs. I think this is actually very useful. In fact, I would event want to add the _uid to each line of logs from Zkclient. It would save a lot time.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465434704", "createdAt": "2020-08-05T02:26:55Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQyNQ==", "bodyText": "Basically, for a log from a thread, such as ZkClient event thread or asycn retry thread, you have the thread id in the log. grepping thread id, you will find the _uid, grepping the _uid, you see the context of where the zkclient is created, such from zkhelixmanager or whatever other Helix java api. This is basically also the technique used to track the watcher leakage.\nThe log would not be excessive as only one zkclient creation has 3 more lines.\nFor now, let me change it to debug, if this is ok. We can discussed adding this thing to callbackhandler and zkclient later.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465436425", "createdAt": "2020-08-05T02:33:40Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTg5Mw==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445893", "createdAt": "2020-08-05T03:11:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk0ODkxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1Mjo1M1rOG73VMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoxMTozM1rOG74kNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTcxNQ==", "bodyText": "Same here", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425715", "createdAt": "2020-08-05T01:52:53Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());\n+    }\n+\n     _connection = zkConnection;\n     _pathBasedZkSerializer = zkSerializer;\n     _operationRetryTimeoutInMillis = operationRetryTimeout;\n     _isNewSessionEventFired = false;\n \n     _asyncCallRetryThread = new ZkAsyncRetryThread(zkConnection.getServers());\n     _asyncCallRetryThread.start();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTk0Mw==", "bodyText": "changed to debug", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445943", "createdAt": "2020-08-05T03:11:33Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());\n+    }\n+\n     _connection = zkConnection;\n     _pathBasedZkSerializer = zkSerializer;\n     _operationRetryTimeoutInMillis = operationRetryTimeout;\n     _isNewSessionEventFired = false;\n \n     _asyncCallRetryThread = new ZkAsyncRetryThread(zkConnection.getServers());\n     _asyncCallRetryThread.start();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTcxNQ=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk0OTEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1Mjo1OVrOG73VVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoxMTo0M1rOG74kYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTc0OA==", "bodyText": "Same here", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425748", "createdAt": "2020-08-05T01:52:59Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2157,6 +2166,8 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n       _eventThread.start();\n \n+      LOG.info(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTk4NA==", "bodyText": "changed to debug", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445984", "createdAt": "2020-08-05T03:11:43Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2157,6 +2166,8 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n       _eventThread.start();\n \n+      LOG.info(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTc0OA=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk1NTY1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/resources/log4j.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1NjoyM1rOG73ZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMjoyNlrOG73z3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNjcwMw==", "bodyText": "Remove", "url": "https://github.com/apache/helix/pull/1185#discussion_r465426703", "createdAt": "2020-08-05T01:56:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -37,5 +38,6 @@ log4j.logger.org.I0Itec=ERROR\n log4j.logger.org.apache=ERROR\n log4j.logger.com.noelios=ERROR\n log4j.logger.org.restlet=ERROR\n+#log4j.logger.org.apache.helix=INFO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzU2Nw==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465433567", "createdAt": "2020-08-05T02:22:26Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -37,5 +38,6 @@ log4j.logger.org.I0Itec=ERROR\n log4j.logger.org.apache=ERROR\n log4j.logger.com.noelios=ERROR\n log4j.logger.org.restlet=ERROR\n+#log4j.logger.org.apache.helix=INFO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNjcwMw=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk2MTgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/resources/log4j.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1OTo0MlrOG73cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMjowMVrOG73zgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzYxNQ==", "bodyText": "Do we need this by default? If this is just for human investigation, please don't enable it.\nIMO, the only condition we need the file is when we have a bot exam the log file and print some critical information automatically.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465427615", "createdAt": "2020-08-05T01:59:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -17,7 +17,7 @@\n # under the License.\n #\n # Set root logger level to DEBUG and its only appender to R.\n-log4j.rootLogger=ERROR, C\n+log4j.rootLogger=ERROR, C, R", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzI5NQ==", "bodyText": "That is the idea. Even for current test, in order to record the log, other wise, you need to do something like mvn test > test.log 2>&1 without this one.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465433295", "createdAt": "2020-08-05T02:21:23Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -17,7 +17,7 @@\n # under the License.\n #\n # Set root logger level to DEBUG and its only appender to R.\n-log4j.rootLogger=ERROR, C\n+log4j.rootLogger=ERROR, C, R", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzYxNQ=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzQ3NQ==", "bodyText": "anyway, let me remove it for now. Let us get this diff in to trunk first.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465433475", "createdAt": "2020-08-05T02:22:01Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -17,7 +17,7 @@\n # under the License.\n #\n # Set root logger level to DEBUG and its only appender to R.\n-log4j.rootLogger=ERROR, C\n+log4j.rootLogger=ERROR, C, R", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzYxNQ=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk2MjUxOnYy", "diffSide": "RIGHT", "path": "helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowMDowMlrOG73dCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMjo1N1rOG730Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzcyMQ==", "bodyText": "Same here, what's the usage of this output?", "url": "https://github.com/apache/helix/pull/1185#discussion_r465427721", "createdAt": "2020-08-05T02:00:02Z", "author": {"login": "jiajunwang"}, "path": "helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java", "diffHunk": "@@ -76,6 +76,7 @@ public void beforeMethod() {\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzY4Ng==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465433686", "createdAt": "2020-08-05T02:22:57Z", "author": {"login": "kaisun2000"}, "path": "helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java", "diffHunk": "@@ -76,6 +76,7 @@ public void beforeMethod() {\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzcyMQ=="}, "originalCommit": {"oid": "14cb3603449c0339a3390e667cf5e7957ede41db"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDM3ODAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTo1NTowNFrOG8YX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTo1NTowNFrOG8YX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NzA3Ng==", "bodyText": "Remove?", "url": "https://github.com/apache/helix/pull/1185#discussion_r465967076", "createdAt": "2020-08-05T19:55:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java", "diffHunk": "@@ -81,7 +81,8 @@ public void beforeClass() throws Exception {\n     _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n     _controller.syncStart();\n \n-    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n+    //_clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDM4NDcwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/resources/log4j.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTo1NzowOFrOG8YcMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMzo0OFrOG8YqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2ODE3Nw==", "bodyText": "What's the motivation for this change? Did we hit the limitation?\nOnce we have the test log cleaned up, we will have a smaller log and fit the default file size, right?", "url": "https://github.com/apache/helix/pull/1185#discussion_r465968177", "createdAt": "2020-08-05T19:57:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -27,6 +27,7 @@ log4j.appender.R=org.apache.log4j.RollingFileAppender\n log4j.appender.R.layout=org.apache.log4j.PatternLayout\n log4j.appender.R.layout.ConversionPattern=%5p [%C:%M] (%F:%L) - %m%n\n log4j.appender.R.File=target/ClusterManagerLogs/log.txt\n+log4j.appender.R.MaxBackupIndex=20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MTkwNQ==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1185#discussion_r465971905", "createdAt": "2020-08-05T20:03:48Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/resources/log4j.properties", "diffHunk": "@@ -27,6 +27,7 @@ log4j.appender.R=org.apache.log4j.RollingFileAppender\n log4j.appender.R.layout=org.apache.log4j.PatternLayout\n log4j.appender.R.layout.ConversionPattern=%5p [%C:%M] (%F:%L) - %m%n\n log4j.appender.R.File=target/ClusterManagerLogs/log.txt\n+log4j.appender.R.MaxBackupIndex=20", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2ODE3Nw=="}, "originalCommit": {"oid": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1272, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}