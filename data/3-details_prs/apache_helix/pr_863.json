{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDYzNTY0", "number": 863, "title": "Make ZkCacheBaseDataAccessor and ZkHelixPropertyStore realm-aware", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #862\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis commit makes both ZkCacheBaseDataAccessor and ZkHelixPropertyStore realm-aware by choosing the appropriate realm-aware ZkClients in the constructor. Also, we add a Builder here to give users options to set Connection config and Client config.\nNote that ZkHelixPropertyStore extends CacheBaseDataAccessor so there is no change needed.\nTests\n\n The following tests are written for this issue:\n\nThe following tests cover ZkCacheBaseDataAccessor:\nTestZkCacheAsyncOpSingleThread,TestZkCacheSyncOpSingleThread,TestWtCacheSyncOpSingleThread,TestWtCacheAsyncOpMultiThread\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nmvn test -Dtest=TestZkCacheAsyncOpSingleThread,TestZkCacheSyncOpSingleThread,TestWtCacheSyncOpSingleThread,TestWtCacheAsyncOpMultiThread\n\n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 21.875 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  49.191 s\n[INFO] Finished at: 2020-03-04T20:33:05-08:00\n[INFO] ------------------------------------------------------------------------\n\nhelix-core:\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:108 expected:<true> but was:<false>\n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1083, Failures: 2, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:09 h\n[INFO] Finished at: 2020-03-04T21:54:11-08:00\n[INFO] ------------------------------------------------------------------------\n\nmvn test -Dtest=TestEnableCompression,TestControllerLeadershipChange\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 33.611 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:15 min\n[INFO] Finished at: 2020-03-04T21:56:37-08:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-05T04:41:26Z", "url": "https://github.com/apache/helix/pull/863", "merged": true, "mergeCommit": {"oid": "5cad48929de1a78815483f7ca326b8d70401ac78"}, "closed": true, "closedAt": "2020-03-12T02:44:27Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK43QnAFqTM2OTkxMTEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMyeS3gBqjMxMjEyMDEzNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTExMTMw", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-369911130", "createdAt": "2020-03-05T21:01:58Z", "commit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzoxM1rOFykEaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzoxM1rOFykEaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDA3Mw==", "bodyText": "static constant for \"/\" to reduce objects created?", "url": "https://github.com/apache/helix/pull/863#discussion_r388564073", "createdAt": "2020-03-05T21:03:13Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -58,7 +61,15 @@\n   protected ZkCallbackCache<T> _zkCache;\n \n   final ZkBaseDataAccessor<T> _baseAccessor;\n-  final Map<String, Cache<T>> _cacheMap;\n+\n+  // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n+  // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n+  // comes first\n+  final Map<String, Cache<T>> _cacheMap = new TreeMap<>((o1, o2) -> {\n+    int len1 = o1.split(\"/\").length;\n+    int len2 = o2.split(\"/\").length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTIxMDYz", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-370121063", "createdAt": "2020-03-06T07:16:35Z", "commit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxNjozNlrOFyvGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxNjozNlrOFyvGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NDgwMw==", "bodyText": "Do we need to validate zk address before falling back to single realm mode?", "url": "https://github.com/apache/helix/pull/863#discussion_r388744803", "createdAt": "2020-03-06T07:16:36Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -146,17 +161,55 @@ public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n+    start();\n+  }\n+\n+  /**\n+   * Constructor using a Builder that allows users to set connection and client configs.\n+   * @param builder\n+   */\n+  private ZkCacheBaseDataAccessor(Builder builder) {\n+    _chrootPath = builder._chrootPath;\n+    _wtCachePaths = builder._wtCachePaths;\n+    _zkCachePaths = builder._zkCachePaths;\n+\n+    RealmAwareZkClient zkClient;\n+    switch (builder._realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          zkClient = new FederatedZkClient(builder._realmAwareZkConnectionConfig,\n+              builder._realmAwareZkClientConfig);\n+          break; // Must break out of the switch statement here\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a817bb55579042bf24a89e8df0ab0598d75b92"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTI0NTEx", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-370924511", "createdAt": "2020-03-09T05:31:38Z", "commit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNTozMTozOFrOFzbVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNTozMTozOFrOFzbVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTQ1MQ==", "bodyText": "This Builder code is very similar across all Helix APIs, I do recommend us to find some way to consolidate them.\nFor existing use case (who do not care about realm, or who is not  going to shard to multiple ZK), do they need to change anything in their code?", "url": "https://github.com/apache/helix/pull/863#discussion_r389469451", "createdAt": "2020-03-09T05:31:38Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzU2Mjk1", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-371356295", "createdAt": "2020-03-09T16:54:00Z", "commit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1NDowMVrOFzw7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1NDowMVrOFzw7vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyMzQyMg==", "bodyText": "This is not very clear. Do you mean whatever type I set here, it will change the API to single-realm mode?  Then if call builder. setRealmMode(multi-realm).setZkClientType(type), what will happen?", "url": "https://github.com/apache/helix/pull/863#discussion_r389823422", "createdAt": "2020-03-09T16:54:01Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -842,4 +894,116 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String _zkAddress;\n+    private RealmAwareZkClient.RealmMode _realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig _realmAwareZkClientConfig;\n+\n+    /** ZkCacheBaseDataAccessor-specific parameters */\n+    private String _chrootPath;\n+    private List<String> _wtCachePaths;\n+    private List<String> _zkCachePaths;\n+    private ZkBaseDataAccessor.ZkClientType _zkClientType;\n+\n+    public Builder() {\n+    }\n+\n+    public Builder setZkAddress(String zkAddress) {\n+      _zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      _realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      _realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      _realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public Builder setChrootPath(String chrootPath) {\n+      _chrootPath = chrootPath;\n+      return this;\n+    }\n+\n+    public Builder setWtCachePaths(List<String> wtCachePaths) {\n+      _wtCachePaths = wtCachePaths;\n+      return this;\n+    }\n+\n+    public Builder setZkCachePaths(List<String> zkCachePaths) {\n+      _zkCachePaths = zkCachePaths;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the ZkClientType. If this is set, ZkCacheBaseDataAccessor will be created on\n+     * single-realm mode.\n+     * @param zkClientType\n+     * @return\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f17cca0aaf24bdd6be374bbd8b57032ee8693a"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDU1MTA4", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-372455108", "createdAt": "2020-03-11T03:27:41Z", "commit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNzo0MlrOF0oHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNzo0MlrOF0oHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzUzNA==", "bodyText": "Note: current FederatedZkClient doesn't support waitUntilConnected() because of multiple raw zkClients. We shall move waitUntilConnected to only single-realm mode.", "url": "https://github.com/apache/helix/pull/863#discussion_r390727534", "createdAt": "2020-03-11T03:27:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkCacheBaseDataAccessor.java", "diffHunk": "@@ -90,50 +104,62 @@ public ZkCacheBaseDataAccessor(ZkBaseDataAccessor<T> baseAccessor, String chroot\n     _wtCachePaths = wtCachePaths;\n     _zkCachePaths = zkCachePaths;\n \n-    // TODO: need to make sure no overlap between wtCachePaths and zkCachePaths\n-    // TreeMap key is ordered by key string length, so more general (i.e. short) prefix\n-    // comes first\n-    _cacheMap = new TreeMap<>(new Comparator<String>() {\n-      @Override\n-      public int compare(String o1, String o2) {\n-        int len1 = o1.split(\"/\").length;\n-        int len2 = o2.split(\"/\").length;\n-        return len1 - len2;\n-      }\n-    });\n-\n     start();\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, null, null,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey) {\n     this(zkAddress, serializer, chrootPath, wtCachePaths, zkCachePaths, monitorType, monitorkey,\n         ZkBaseDataAccessor.ZkClientType.SHARED);\n   }\n \n+  @Deprecated\n   public ZkCacheBaseDataAccessor(String zkAddress, ZkSerializer serializer, String chrootPath,\n       List<String> wtCachePaths, List<String> zkCachePaths, String monitorType, String monitorkey,\n       ZkBaseDataAccessor.ZkClientType zkClientType) {\n-    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n-    clientConfig.setZkSerializer(serializer).setMonitorType(monitorType).setMonitorKey(monitorkey);\n-    switch (zkClientType) {\n-    case DEDICATED:\n-      _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n-          new HelixZkClient.ZkConnectionConfig(zkAddress),\n-          new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n-      break;\n-    case SHARED:\n-    default:\n-      _zkClient = SharedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n-    }\n-    _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+    // If the multi ZK config is enabled, use multi-realm mode with FederatedZkClient\n+    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {\n+      try {\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder connectionConfigBuilder =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder();\n+        RealmAwareZkClient.RealmAwareZkClientConfig clientConfig =\n+            new RealmAwareZkClient.RealmAwareZkClientConfig();\n+        clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+            .setMonitorKey(monitorkey);\n+        // Use a federated zk client\n+        _zkClient = new FederatedZkClient(connectionConfigBuilder.build(), clientConfig);\n+      } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+        // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be\n+        // found\n+        throw new HelixException(\"Failed to create ZkCacheBaseDataAccessor!\", e);\n+      }\n+    } else {\n+      HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+      clientConfig.setZkSerializer(serializer).setMonitorType(monitorType)\n+          .setMonitorKey(monitorkey);\n+      switch (zkClientType) {\n+        case DEDICATED:\n+          _zkClient = DedicatedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+                  new HelixZkClient.ZkClientConfig().setZkSerializer(serializer));\n+          break;\n+        case SHARED:\n+        default:\n+          _zkClient = SharedZkClientFactory.getInstance()\n+              .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress), clientConfig);\n+      }\n+      _zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTc0MDU3", "url": "https://github.com/apache/helix/pull/863#pullrequestreview-373174057", "createdAt": "2020-03-11T22:38:34Z", "commit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebe28e3af9ec60cc285b550a2789d9b69c5d88b1", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/ebe28e3af9ec60cc285b550a2789d9b69c5d88b1", "committedDate": "2020-03-12T02:37:29Z", "message": "Make ZkCacheBaseDataAccessor realm-aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "548fe21e946af8bc846b57549049d81b12250da1", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/548fe21e946af8bc846b57549049d81b12250da1", "committedDate": "2020-03-12T02:37:29Z", "message": "sadf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc410662751e4ac977c1c04979026bfc5f2f7f5f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/bc410662751e4ac977c1c04979026bfc5f2f7f5f", "committedDate": "2020-03-12T02:37:30Z", "message": "update removing the fallback logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d108156437753f1f24746a96d5427c999d59f13", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/5d108156437753f1f24746a96d5427c999d59f13", "committedDate": "2020-03-12T02:37:30Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c5ee26ab21b3012cd0dc334e8a4955e195da64", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/88c5ee26ab21b3012cd0dc334e8a4955e195da64", "committedDate": "2020-03-12T02:37:30Z", "message": "Deprecate all constructors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a1ef024b982d85cb39479b9ff698e8cdc323b65", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/6a1ef024b982d85cb39479b9ff698e8cdc323b65", "committedDate": "2020-03-11T01:08:47Z", "message": "Deprecate all constructors"}, "afterCommit": {"oid": "88c5ee26ab21b3012cd0dc334e8a4955e195da64", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/88c5ee26ab21b3012cd0dc334e8a4955e195da64", "committedDate": "2020-03-12T02:37:30Z", "message": "Deprecate all constructors"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4670, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}