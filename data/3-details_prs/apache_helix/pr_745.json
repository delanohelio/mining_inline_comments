{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTE4NTM0", "number": 745, "title": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #760\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nRealmAwareZkClient and RealmAwareZkClientFactory are going to be the top-level interfaces for other realm-aware ZkClient APIs (think FederatedZkClient, DedicatedZkClient, etc.).\nRealmAwareZkClient will support all the existing interface methods that HelixZkClient supports.\nRealmAwareZkClientFactory will be the interface implemented by SharedZkClientFactory and DedicatedZkClientFactory.\nTests\n\n The following tests are written for this issue:\n\nInterface methods without logic - no tests added.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nbuild passed.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-11T07:57:25Z", "url": "https://github.com/apache/helix/pull/745", "merged": true, "mergeCommit": {"oid": "551ed63f98cf75b9953615386a0a9e1a9a566e33"}, "closed": true, "closedAt": "2020-02-14T01:27:11Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDbURXAFqTM1NzExOTIyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEFM73AH2gAyMzczNTE4NTM0OjJhN2U4ZjQ4N2JkMzJjZDZlOGJmMmQ0YTNjMmRkNjE4NTlhYjhkMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTE5MjI2", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-357119226", "createdAt": "2020-02-12T00:37:26Z", "commit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDozNzoyNlrOFoeNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDozNzoyNlrOFoeNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MjI0Nw==", "bodyText": "Just a note, this means that we need to use the RealmAwareZkClientConfig to generate HelixZkClient.ZkConnectionConfig.\nHelixZkClient.ZkConnectionConfig is pair {zkServerAddress, sessiontimeout} .\nzkServerAddress can be derived from shardingKey in RealAwareZkClientConfig. However, sessiontimout can not.\nSo here, shall we  do:\n1/ add sessiontimeout to  RealmAwareZkClientConfig?\nor\n2/ having another parameter to specify a sessiontimeout to the interface method buildZkClient?", "url": "https://github.com/apache/helix/pull/745#discussion_r377982247", "createdAt": "2020-02-12T00:37:26Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,14 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,\n+      RealmAwareZkClient.RealmAwareZkClientConfig config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTI0MzQ3", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-357124347", "createdAt": "2020-02-12T00:53:00Z", "commit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1MzowMFrOFoeeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1MzowMFrOFoeeJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjU5Ng==", "bodyText": "mode is redundant, it is already presented in RealmAwareZkClientConfig", "url": "https://github.com/apache/helix/pull/745#discussion_r377986596", "createdAt": "2020-02-12T00:53:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,14 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTI1OTY1", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-357125965", "createdAt": "2020-02-12T00:57:59Z", "commit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Nzo1OVrOFoejdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Nzo1OVrOFoejdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Nzk1Ng==", "bodyText": "Do we want to deprecate the following?\npublic abstract HelixZkClient buildZkClient(HelixZkClient.ZkConnectionConfig connectionConfig, HelixZkClient.ZkClientConfig clientConfig)\nOr put it another way, user later should not directly create non-real aware zkclient from this factory?", "url": "https://github.com/apache/helix/pull/745#discussion_r377987956", "createdAt": "2020-02-12T00:57:59Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/impl/factory/HelixZkClientFactory.java", "diffHunk": "@@ -28,7 +29,7 @@\n /**\n  * Abstract class of the ZkClient factory.\n  */\n-abstract class HelixZkClientFactory {\n+abstract class HelixZkClientFactory implements RealmAwareZkClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODk0MzEy", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-357894312", "createdAt": "2020-02-13T01:02:02Z", "commit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowMjowMlrOFpD5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowMjowMlrOFpD5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5OTY4Nw==", "bodyText": "Shall we change the name to RealmAwareConnectionConfig? Conceptually this is the same as HelixZkClient.ZkConnectionConfig. In HelixZkClient the ClientConfig is about the monitor key, serializer etc. Let us keep the naming to concept consistent, otherwise, it can be confusing.", "url": "https://github.com/apache/helix/pull/745#discussion_r378599687", "createdAt": "2020-02-13T01:02:02Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -305,159 +314,12 @@ public int hashCode() {\n     }\n   }\n \n-  /**\n-   * Configuration for creating a new ZkConnection.\n-   */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n-\n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-      if (obj == this) {\n-        return true;\n-      }\n-      if (!(obj instanceof HelixZkClient.ZkConnectionConfig)) {\n-        return false;\n-      }\n-      HelixZkClient.ZkConnectionConfig configObj = (HelixZkClient.ZkConnectionConfig) obj;\n-      return (_zkServers == null && configObj._zkServers == null ||\n-          _zkServers != null && _zkServers.equals(configObj._zkServers)) &&\n-          _sessionTimeout == configObj._sessionTimeout;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-      return _sessionTimeout * 31 + _zkServers.hashCode();\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return (_zkServers + \"_\" + _sessionTimeout).replaceAll(\"[\\\\W]\", \"_\");\n-    }\n-\n-    public HelixZkClient.ZkConnectionConfig setSessionTimeout(Integer sessionTimeout) {\n-      this._sessionTimeout = sessionTimeout;\n-      return this;\n-    }\n-\n-    public String getZkServers() {\n-      return _zkServers;\n-    }\n-\n-    public int getSessionTimeout() {\n-      return _sessionTimeout;\n-    }\n-  }\n-\n-  /**\n-   * Configuration for creating a new RealmAwareZkClient with serializer and monitor.\n-   */\n-  class ZkClientConfig {\n-    // For client to init the connection\n-    private long _connectInitTimeout = HelixZkClient.DEFAULT_CONNECTION_TIMEOUT;\n-\n-    // Data access configs\n-    private long _operationRetryTimeout = HelixZkClient.DEFAULT_OPERATION_TIMEOUT;\n-\n-    // Others\n-    private PathBasedZkSerializer _zkSerializer;\n-\n-    // Monitoring\n-    private String _monitorType;\n-    private String _monitorKey;\n-    private String _monitorInstanceName = null;\n-    private boolean _monitorRootPathOnly = true;\n-\n-    public HelixZkClient.ZkClientConfig setZkSerializer(PathBasedZkSerializer zkSerializer) {\n-      this._zkSerializer = zkSerializer;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setZkSerializer(ZkSerializer zkSerializer) {\n-      this._zkSerializer = new BasicZkSerializer(zkSerializer);\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n-     *\n-     * @param monitorType\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorType(String monitorType) {\n-      this._monitorType = monitorType;\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n-     *\n-     * @param monitorKey\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorKey(String monitorKey) {\n-      this._monitorKey = monitorKey;\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is optional.\n-     *\n-     * @param instanceName\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorInstanceName(String instanceName) {\n-      this._monitorInstanceName = instanceName;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setMonitorRootPathOnly(Boolean monitorRootPathOnly) {\n-      this._monitorRootPathOnly = monitorRootPathOnly;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setOperationRetryTimeout(Long operationRetryTimeout) {\n-      this._operationRetryTimeout = operationRetryTimeout;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setConnectInitTimeout(long _connectInitTimeout) {\n-      this._connectInitTimeout = _connectInitTimeout;\n-      return this;\n-    }\n-\n-    public PathBasedZkSerializer getZkSerializer() {\n-      if (_zkSerializer == null) {\n-        _zkSerializer = new BasicZkSerializer(new SerializableSerializer());\n-      }\n-      return _zkSerializer;\n-    }\n-\n-    public long getOperationRetryTimeout() {\n-      return _operationRetryTimeout;\n-    }\n-\n-    public String getMonitorType() {\n-      return _monitorType;\n-    }\n-\n-    public String getMonitorKey() {\n-      return _monitorKey;\n-    }\n-\n-    public String getMonitorInstanceName() {\n-      return _monitorInstanceName;\n-    }\n-\n-    public boolean isMonitorRootPathOnly() {\n-      return _monitorRootPathOnly;\n-    }\n-\n-    public long getConnectInitTimeout() {\n-      return _connectInitTimeout;\n+  class RealmAwareZkClientConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3878f4017e448783fee01f7610eff6ce2a23a868", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/3878f4017e448783fee01f7610eff6ce2a23a868", "committedDate": "2020-02-13T02:03:40Z", "message": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e577b3a5e96d7659fdb05cd5801c78715ec1a427", "committedDate": "2020-02-11T19:28:49Z", "message": "Complete javadoc"}, "afterCommit": {"oid": "3878f4017e448783fee01f7610eff6ce2a23a868", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/3878f4017e448783fee01f7610eff6ce2a23a868", "committedDate": "2020-02-13T02:03:40Z", "message": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc608bcb47bc8cf6de027eaa921ab03626ec632b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/fc608bcb47bc8cf6de027eaa921ab03626ec632b", "committedDate": "2020-02-13T02:10:40Z", "message": "Fix config extends"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3878f4017e448783fee01f7610eff6ce2a23a868", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/3878f4017e448783fee01f7610eff6ce2a23a868", "committedDate": "2020-02-13T02:03:40Z", "message": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces"}, "afterCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e577b3a5e96d7659fdb05cd5801c78715ec1a427", "committedDate": "2020-02-11T19:28:49Z", "message": "Complete javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e577b3a5e96d7659fdb05cd5801c78715ec1a427", "committedDate": "2020-02-11T19:28:49Z", "message": "Complete javadoc"}, "afterCommit": {"oid": "fc608bcb47bc8cf6de027eaa921ab03626ec632b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/fc608bcb47bc8cf6de027eaa921ab03626ec632b", "committedDate": "2020-02-13T02:10:40Z", "message": "Fix config extends"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "744aa8d30dc439b2c18065579b7f963dda81270f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/744aa8d30dc439b2c18065579b7f963dda81270f", "committedDate": "2020-02-13T02:14:45Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "committedDate": "2020-02-13T02:28:32Z", "message": "Add missing methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDcwMDQz", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-358470043", "createdAt": "2020-02-13T18:56:44Z", "commit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1Njo0NVrOFpftWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1Njo0NVrOFpftWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NTQ1MA==", "bodyText": "Another choice is to let ZkClientConfig inherit RealmAwareZkClient.RealmAwareZkClientConfig as the implementation of this two class are implementation are exactly the same. This way, no duplicate code. What is your take?", "url": "https://github.com/apache/helix/pull/745#discussion_r379055450", "createdAt": "2020-02-13T18:56:45Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java", "diffHunk": "@@ -19,8 +19,178 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.zkclient.serialize.BasicZkSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.PathBasedZkSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.SerializableSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.ZkSerializer;\n+\n+\n /**\n+ * Deprecated - please use RealmAwareZkClient instead.\n+ *\n  * HelixZkClient interface that follows the supported API structure of RealmAwareZkClient.\n  */\n+@Deprecated\n public interface HelixZkClient extends RealmAwareZkClient {\n+\n+  /**\n+   * Deprecated - please use RealmAwareZkClient and RealmAwareZkConnectionConfig instead.\n+   *\n+   * Configuration for creating a new ZkConnection.\n+   */\n+  @Deprecated\n+  class ZkConnectionConfig {\n+    // Connection configs\n+    private final String _zkServers;\n+    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+\n+    public ZkConnectionConfig(String zkServers) {\n+      _zkServers = zkServers;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+      if (obj == this) {\n+        return true;\n+      }\n+      if (!(obj instanceof HelixZkClient.ZkConnectionConfig)) {\n+        return false;\n+      }\n+      HelixZkClient.ZkConnectionConfig configObj = (HelixZkClient.ZkConnectionConfig) obj;\n+      return (_zkServers == null && configObj._zkServers == null || _zkServers != null && _zkServers\n+          .equals(configObj._zkServers)) && _sessionTimeout == configObj._sessionTimeout;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return _sessionTimeout * 31 + _zkServers.hashCode();\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return (_zkServers + \"_\" + _sessionTimeout).replaceAll(\"[\\\\W]\", \"_\");\n+    }\n+\n+    public HelixZkClient.ZkConnectionConfig setSessionTimeout(Integer sessionTimeout) {\n+      this._sessionTimeout = sessionTimeout;\n+      return this;\n+    }\n+\n+    public String getZkServers() {\n+      return _zkServers;\n+    }\n+\n+    public int getSessionTimeout() {\n+      return _sessionTimeout;\n+    }\n+  }\n+\n+  /**\n+   * Deprecated - please use RealmAwareZkClient and RealmAwareZkClientConfig instead.\n+   *\n+   * Configuration for creating a new HelixZkClient with serializer and monitor.\n+   */\n+  @Deprecated\n+  class ZkClientConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDcyNDQ5", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-358472449", "createdAt": "2020-02-13T19:00:16Z", "commit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTowMDoxNlrOFpf0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTowMDoxNlrOFpf0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NzI4MQ==", "bodyText": "To achieve feature parity of HelixZkClientInterface, shall we add this constructor too?\n   public RealmAwareZkClient buildZkClient( RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig) { return buildZkClient(connectConfig, new RealmAwareZkClient.RealmAwareZkClientConfig()); }", "url": "https://github.com/apache/helix/pull/745#discussion_r379057281", "createdAt": "2020-02-13T19:00:16Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,13 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "committedDate": "2020-02-13T19:23:37Z", "message": "Add another interface method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTEwNjUy", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-358510652", "createdAt": "2020-02-13T19:59:18Z", "commit": {"oid": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTo1OToxOVrOFphqNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTo1OToxOVrOFphqNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4NzQxMg==", "bodyText": "If we think MODE is already encoded in the Type (class hierarchy), we don't need this in the constructor.  Based on looking at the psuedo code I drew, I don't fee we really need to pass this in.", "url": "https://github.com/apache/helix/pull/745#discussion_r379087412", "createdAt": "2020-02-13T19:59:19Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -306,48 +326,63 @@ public int hashCode() {\n   }\n \n   /**\n-   * Configuration for creating a new ZkConnection.\n+   * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+  class RealmAwareZkConnectionConfig {\n+    /**\n+     * mode: Which mode the RealmAwareZkClientConfig should be created in\n+     */\n+    private final MODE _mode;\n+    /**\n+     * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n+     * NOTE: this field will be ignored if MODE is MULTI_REALM!\n+     */\n+    private final String _zkRealmShardingKey;\n+    private int _sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n \n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n+    public RealmAwareZkConnectionConfig(MODE mode, String zkRealmShardingKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917794795b38115860e48d37f612d3407f2de9be", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/917794795b38115860e48d37f612d3407f2de9be", "committedDate": "2020-02-13T21:10:22Z", "message": "asdf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDg4MDY4", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-358488068", "createdAt": "2020-02-13T19:24:43Z", "commit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyNDo0M1rOFpgkkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo0NDoxMVrOFpkmhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2OTU4Ng==", "bodyText": "Make the second one separate line.", "url": "https://github.com/apache/helix/pull/745#discussion_r379069586", "createdAt": "2020-02-13T19:24:43Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -40,7 +41,24 @@\n import org.apache.zookeeper.data.Stat;\n \n \n+/**\n+ * The Realm-aware ZkClient interface.\n+ * NOTE: \"Realm-aware\" does not necessarily mean that the RealmAwareZkClient instance will be connecting to multiple ZK realms.\n+ * On single-realm mode, RealmAwareZkClient will reject requests going out to other ZK realms than the one set at initialization.\n+ * On multi-realm mode, RealmAwareZkClient will connect to multiple ZK realms but will reject EPHEMERAL AccessMode operations.\n+ */\n public interface RealmAwareZkClient {\n+\n+  /**\n+   * Specifies which mode to run this RealmAwareZkClient on.\n+   *\n+   * SINGLE_REALM: CRUD, change subscription, and EPHEMERAL CreateMode are supported.\n+   * MULTI_REALM: CRUD and change subscription are supported. Operations involving EPHEMERAL CreateMode will throw an UnsupportedOperationException.\n+   */\n+  enum MODE {\n+    SINGLE_REALM, MULTI_REALM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDk5OQ==", "bodyText": "Shall we remove Helix word?", "url": "https://github.com/apache/helix/pull/745#discussion_r379134999", "createdAt": "2020-02-13T21:42:54Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -250,21 +268,22 @@ default long waitForEstablishedSession(long timeout, TimeUnit timeUnit) {\n    * This is for backward compatibility and to avoid breaking the original implementation of\n    * {@link org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener}.\n    */\n-  class I0ItecIZkStateListenerHelixImpl\n-      implements org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener {\n+  class I0ItecIZkStateListenerHelixImpl implements org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNTYyMA==", "bodyText": "Seemed to me the connection is per zk realm. Then the routing logic should be at Factory layer, right?", "url": "https://github.com/apache/helix/pull/745#discussion_r379135620", "createdAt": "2020-02-13T21:44:11Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -306,48 +326,63 @@ public int hashCode() {\n   }\n \n   /**\n-   * Configuration for creating a new ZkConnection.\n+   * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+  class RealmAwareZkConnectionConfig {\n+    /**\n+     * mode: Which mode the RealmAwareZkClientConfig should be created in\n+     */\n+    private final MODE _mode;\n+    /**\n+     * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n+     * NOTE: this field will be ignored if MODE is MULTI_REALM!\n+     */\n+    private final String _zkRealmShardingKey;\n+    private int _sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n \n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n+    public RealmAwareZkConnectionConfig(MODE mode, String zkRealmShardingKey) {\n+      if (mode == null) {\n+        throw new ZkClientException(\"Mode cannot be null!\");\n+      }\n+      _mode = mode;\n+      _zkRealmShardingKey = zkRealmShardingKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a806ac85806c3970f2cd3952500dffd15c687c0f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/a806ac85806c3970f2cd3952500dffd15c687c0f", "committedDate": "2020-02-13T21:47:12Z", "message": "remove mode'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTc5NTIw", "url": "https://github.com/apache/helix/pull/745#pullrequestreview-358579520", "createdAt": "2020-02-13T21:54:39Z", "commit": {"oid": "a806ac85806c3970f2cd3952500dffd15c687c0f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f5ba2a653fc7cc9d267d2f7cd41dccf6f7e4c9", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/14f5ba2a653fc7cc9d267d2f7cd41dccf6f7e4c9", "committedDate": "2020-02-13T22:51:13Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7e8f487bd32cd6e8bf2d4a3c2dd61859ab8d35", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2a7e8f487bd32cd6e8bf2d4a3c2dd61859ab8d35", "committedDate": "2020-02-14T01:25:26Z", "message": "Tested"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4950, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}