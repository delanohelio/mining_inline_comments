{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQ3MzU2", "number": 1107, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyNDoyMVrOEHUjLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyOTozN1rOEHUkFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEyMTc1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBucketDataAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyNDoyMVrOGmomnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo0Mzo0NFrOGnTYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDMxNw==", "bodyText": "ensure that the...?", "url": "https://github.com/apache/helix/pull/1107#discussion_r443164317", "createdAt": "2020-06-20T22:24:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBucketDataAccessor.java", "diffHunk": "@@ -126,8 +133,17 @@ public void testMultipleWrites() throws Exception {\n     // Use Verifier because GC can take ZK delay\n     Assert.assertTrue(TestHelper.verify(() -> {\n       List<String> children = _zkBaseDataAccessor.getChildNames(PATH, AccessOption.PERSISTENT);\n-      return children.size() == 3;\n-    }, 60 * 1000L));\n+      return children.size() == 3 && children.containsAll(ImmutableList\n+          .of(LAST_SUCCESSFUL_WRITE_KEY, LAST_WRITE_KEY,\n+              new Long(lastSuccessfulWriteVer).toString()));\n+    }, VERSION_TTL_MS * 2));\n+\n+    // Wait one more TTL to ensure that the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NTE3Ng==", "bodyText": "Good catch. I missed this part.", "url": "https://github.com/apache/helix/pull/1107#discussion_r443865176", "createdAt": "2020-06-22T22:43:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBucketDataAccessor.java", "diffHunk": "@@ -126,8 +133,17 @@ public void testMultipleWrites() throws Exception {\n     // Use Verifier because GC can take ZK delay\n     Assert.assertTrue(TestHelper.verify(() -> {\n       List<String> children = _zkBaseDataAccessor.getChildNames(PATH, AccessOption.PERSISTENT);\n-      return children.size() == 3;\n-    }, 60 * 1000L));\n+      return children.size() == 3 && children.containsAll(ImmutableList\n+          .of(LAST_SUCCESSFUL_WRITE_KEY, LAST_WRITE_KEY,\n+              new Long(lastSuccessfulWriteVer).toString()));\n+    }, VERSION_TTL_MS * 2));\n+\n+    // Wait one more TTL to ensure that the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDMxNw=="}, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEyNDA2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBucketDataAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyOTozN1rOGmonwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo1Mjo0MlrOGnTjHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDYwOA==", "bodyText": "Do we really need to cancel? What if that causes incomplete deletion of stale versions? I think we should let it queue up?", "url": "https://github.com/apache/helix/pull/1107#discussion_r443164608", "createdAt": "2020-06-20T22:29:37Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBucketDataAccessor.java", "diffHunk": "@@ -329,32 +330,34 @@ public void close() {\n     disconnect();\n   }\n \n-  private void updateGCTimer(String rootPath, String currentVersion) {\n-    TimerTask gcTask = new TimerTask() {\n-      @Override\n-      public void run() {\n+  private synchronized void updateGCTimer(String rootPath, long currentVersion) {\n+    if (_gcTaskFuture != null) {\n+      _gcTaskFuture.cancel(false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NzkzNQ==", "bodyText": "This cancel will only cancel the pending tasks. For the pending tasks that are queued up, they will only cause extra children list read. The later operation will be the same. And if there is risk of incomplete deleting, then that concern lives no matter we let it queued up or not. That issue (if exists) should be addressed separately.", "url": "https://github.com/apache/helix/pull/1107#discussion_r443867935", "createdAt": "2020-06-22T22:52:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBucketDataAccessor.java", "diffHunk": "@@ -329,32 +330,34 @@ public void close() {\n     disconnect();\n   }\n \n-  private void updateGCTimer(String rootPath, String currentVersion) {\n-    TimerTask gcTask = new TimerTask() {\n-      @Override\n-      public void run() {\n+  private synchronized void updateGCTimer(String rootPath, long currentVersion) {\n+    if (_gcTaskFuture != null) {\n+      _gcTaskFuture.cancel(false);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDYwOA=="}, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1180, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}