{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjgyNjQy", "number": 1031, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNzoxNFrOEANG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNjo1NlrOEAstCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjUwMjMyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/ReadOnlyWagedRebalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozNzoxNFrOGbV2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTozNTozNVrOGbeAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMjYyNw==", "bodyText": "Let's put this in the util or tool package? It should not be used as a rebalancer.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431322627", "createdAt": "2020-05-27T17:37:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/ReadOnlyWagedRebalancer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.apache.helix.controller.rebalancer.waged;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NjMzNw==", "bodyText": "I'm not sure if that's a good idea. I've considered that option and that might even be more confusing.\nNote that users do not use rebalancers directly anyway. So I think this would be the appropriate package to put it in along with the original WagedRebalancer.\nI'm also making it clear that this class is to be used for testing or tooling purposes in the JavaDoc.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431456337", "createdAt": "2020-05-27T21:35:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/ReadOnlyWagedRebalancer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.apache.helix.controller.rebalancer.waged;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyMjYyNw=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjUxNDkwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0MDo0NFrOGbV97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjowMjoxNlrOGbeu3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNDY1Mw==", "bodyText": "I feel RebalanceUtil is a better placement, although the existing method is already in the HelixUtil. What do you think?", "url": "https://github.com/apache/helix/pull/1031#discussion_r431324653", "createdAt": "2020-05-27T17:40:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMjI1OA==", "bodyText": "If it will be exposed to customers, let's put it HelixUtil. It is better to have some centralized place for user using that.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431412258", "createdAt": "2020-05-27T20:07:45Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNDY1Mw=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2ODI1Mw==", "bodyText": "Already reviewed that option, but if we were to place this in RebalanceUtil, we should move the existing function there too, but that would cause a backward-incompatible change. Let's keep it in here for consistency.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431468253", "createdAt": "2020-05-27T22:02:16Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNDY1Mw=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjUzNDQ2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0NjowNFrOGbWKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjowOToxMVrOGbe5wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNzgwNQ==", "bodyText": "The WAGED rebalancer considers all resources, so if the \"newResourceConfigs\" only contains user-specified items and we overwrite the cached map with this input map, it may return a different result. The other list/map fields have a similar concern.\n\nCan we do merge instead of overwriting? This serves for the users who want to add or modify some items.\nHow to handle requests to remove some items? I didn't have the answer yet. Will update if I have a good idea.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431327805", "createdAt": "2020-05-27T17:46:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MTA0MQ==", "bodyText": "@jiajunwang\nI've considered the case you mentioned, and what we have here is I believe the right thing to do. We should overwrite completely (replace), that way, we could allow users to keep, modify, or remove certain items in the Collection. Users still have the ability to retrieve the existing ResourceConfigs in the cluster, so that's not a big concern.\nMoreover, this fits nicely with the API methods already provided in the DataProvider interface. If we want to support merge or remove, that would require further change in the DataProvider interface, which is undesirable because we'd be making API changes for the sake of having a util method or for testing.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431471041", "createdAt": "2020-05-27T22:09:11Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNzgwNQ=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjUzODk0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0NzoyMlrOGbWNOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxMDoyN1rOGbe7yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyODU3MA==", "bodyText": "If the process fails before runStage, for example, while refreshing the cache, this accessor connection will be leaked.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431328570", "createdAt": "2020-05-27T17:47:22Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n+        .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n+    dataProvider.setLiveInstances(\n+        liveInstances.stream().map(LiveInstance::new).collect(Collectors.toList()));\n+    dataProvider.setIdealStates(newIdealStates);\n+    dataProvider.setResourceConfigMap(newResourceConfigs.stream()\n+        .collect(Collectors.toMap(ResourceConfig::getResourceName, Function.identity())));\n+\n+    // Create an instance of read-only WAGED rebalancer\n+    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n+        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n+            clusterConfig.getGlobalRebalancePreference());\n+\n+    // Use a dummy event to run the required stages for BestPossibleState calculation\n+    // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n+    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n+    event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(), readOnlyWagedRebalancer);\n+\n+    try {\n+      // Run the required stages to obtain the BestPossibleOutput\n+      RebalanceUtil.runStage(event, new ResourceComputationStage());\n+      RebalanceUtil.runStage(event, new CurrentStateComputationStage());\n+      RebalanceUtil.runStage(event, new BestPossibleStateCalcStage());\n+    } catch (Exception e) {\n+      LOG.error(\"getIdealAssignmentForWagedFullAuto(): Failed to compute ResourceAssignments!\", e);\n+    } finally {\n+      // Close all ZK connections\n+      baseDataAccessor.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MTU2Mw==", "bodyText": "It shouldn't fail, but I can wrap the entire logic in a try-catch as well.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431471563", "createdAt": "2020-05-27T22:10:27Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,81 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates\n+   * @param newResourceConfigs\n+   * @return\n+   */\n+  public static Map<String, ResourceAssignment> getIdealAssignmentForWagedFullAuto(\n+      String metadataStoreAddress, ClusterConfig clusterConfig,\n+      List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n+      List<IdealState> newIdealStates, List<ResourceConfig> newResourceConfigs) {\n+    // Prepare a data accessor for a dataProvider (cache) refresh\n+    BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n+    HelixDataAccessor helixDataAccessor =\n+        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+\n+    // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n+    ResourceControllerDataProvider dataProvider =\n+        new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+    dataProvider.requireFullRefresh();\n+    dataProvider.refresh(helixDataAccessor);\n+    dataProvider.setClusterConfig(clusterConfig);\n+    dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n+        .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n+    dataProvider.setLiveInstances(\n+        liveInstances.stream().map(LiveInstance::new).collect(Collectors.toList()));\n+    dataProvider.setIdealStates(newIdealStates);\n+    dataProvider.setResourceConfigMap(newResourceConfigs.stream()\n+        .collect(Collectors.toMap(ResourceConfig::getResourceName, Function.identity())));\n+\n+    // Create an instance of read-only WAGED rebalancer\n+    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n+        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n+            clusterConfig.getGlobalRebalancePreference());\n+\n+    // Use a dummy event to run the required stages for BestPossibleState calculation\n+    // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n+    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    event.addAttribute(AttributeName.ControllerDataProvider.name(), dataProvider);\n+    event.addAttribute(AttributeName.STATEFUL_REBALANCER.name(), readOnlyWagedRebalancer);\n+\n+    try {\n+      // Run the required stages to obtain the BestPossibleOutput\n+      RebalanceUtil.runStage(event, new ResourceComputationStage());\n+      RebalanceUtil.runStage(event, new CurrentStateComputationStage());\n+      RebalanceUtil.runStage(event, new BestPossibleStateCalcStage());\n+    } catch (Exception e) {\n+      LOG.error(\"getIdealAssignmentForWagedFullAuto(): Failed to compute ResourceAssignments!\", e);\n+    } finally {\n+      // Close all ZK connections\n+      baseDataAccessor.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyODU3MA=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjU5NTY2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo1Njo1OVrOGbWu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxMjoyOVrOGbe_IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNzE4OQ==", "bodyText": "It might be better if we have a runStages method as util. It would be easier to use, and more generic.\nOf course, we will have to refactor calcBestPossState() in the verifier to make the change.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431337189", "createdAt": "2020-05-27T17:56:59Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java", "diffHunk": "@@ -164,4 +167,25 @@ public static void scheduleOnDemandPipeline(String clusterName, long delay,\n           clusterName);\n     }\n   }\n+\n+  /**\n+   * runStage allows the run of individual stages. It can be used to mock a part of the Controller\n+   * pipeline run.\n+   *\n+   * An example usage is as follows:\n+   *       runStage(event, new ResourceComputationStage());\n+   *       runStage(event, new CurrentStateComputationStage());\n+   *       runStage(event, new BestPossibleStateCalcStage());\n+   * By running these stages, we are able to obtain BestPossibleStateOutput in the event object.\n+   * @param event\n+   * @param stage\n+   * @throws Exception\n+   */\n+  public static void runStage(ClusterEvent event, Stage stage) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MjQxNg==", "bodyText": "I have considered this option, and I decided against it because we lose generality. The nature of runStage sometimes requires the modification of which stages to run and depending on the test, it requires the tests to add/modify/remove Attributes in ClusterEvent. So this is the right granularity.\nIf we provide some composite method like runStages that runs multiple stages, the use case for it would be limited and not as configurable.", "url": "https://github.com/apache/helix/pull/1031#discussion_r431472416", "createdAt": "2020-05-27T22:12:29Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java", "diffHunk": "@@ -164,4 +167,25 @@ public static void scheduleOnDemandPipeline(String clusterName, long delay,\n           clusterName);\n     }\n   }\n+\n+  /**\n+   * runStage allows the run of individual stages. It can be used to mock a part of the Controller\n+   * pipeline run.\n+   *\n+   * An example usage is as follows:\n+   *       runStage(event, new ResourceComputationStage());\n+   *       runStage(event, new CurrentStateComputationStage());\n+   *       runStage(event, new BestPossibleStateCalcStage());\n+   * By running these stages, we are able to obtain BestPossibleStateOutput in the event object.\n+   * @param event\n+   * @param stage\n+   * @throws Exception\n+   */\n+  public static void runStage(ClusterEvent event, Stage stage) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNzE4OQ=="}, "originalCommit": {"oid": "121bddbc0e61f1393335e0370313388a0452235c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY3MzI4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNDoxMFrOGcJA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxODozMFrOGcjcIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDk4OA==", "bodyText": "nit, but why the other tests need to depend on testRebalanceTool?", "url": "https://github.com/apache/helix/pull/1031#discussion_r432160988", "createdAt": "2020-05-28T22:34:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -164,7 +214,7 @@ public void testWithInstanceTag() throws Exception {\n     validate(_replica);\n   }\n \n-  @Test(dependsOnMethods = \"test\")\n+  @Test(dependsOnMethods = \"testRebalanceTool\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NTMwMg==", "bodyText": "Doesn't have to depend on testRebalanceTool, but I like to enforce strict ordering for the tests I write..", "url": "https://github.com/apache/helix/pull/1031#discussion_r432165302", "createdAt": "2020-05-28T22:47:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -164,7 +214,7 @@ public void testWithInstanceTag() throws Exception {\n     validate(_replica);\n   }\n \n-  @Test(dependsOnMethods = \"test\")\n+  @Test(dependsOnMethods = \"testRebalanceTool\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDk4OA=="}, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NjkwMw==", "bodyText": "I would prefer to configure the tests in a way of real logic dependencies. Easier for us to maintain.\nMoreover, I think we won't remember why it was initially done like this. Let do it in a meaningful way the first time.", "url": "https://github.com/apache/helix/pull/1031#discussion_r432166903", "createdAt": "2020-05-28T22:52:18Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -164,7 +214,7 @@ public void testWithInstanceTag() throws Exception {\n     validate(_replica);\n   }\n \n-  @Test(dependsOnMethods = \"test\")\n+  @Test(dependsOnMethods = \"testRebalanceTool\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDk4OA=="}, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5Mzk1NQ==", "bodyText": "Okay. I reverted this change.", "url": "https://github.com/apache/helix/pull/1031#discussion_r432593955", "createdAt": "2020-05-29T16:18:30Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -164,7 +214,7 @@ public void testWithInstanceTag() throws Exception {\n     validate(_replica);\n   }\n \n-  @Test(dependsOnMethods = \"test\")\n+  @Test(dependsOnMethods = \"testRebalanceTool\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDk4OA=="}, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY3ODgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNjo1NlrOGcJELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo0Nzo1OFrOGcJSPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTgzOQ==", "bodyText": "The \"new\" here might be confusing. So the requirement here is, actually, the caller should include all the resource IS/Configs into the input, right?", "url": "https://github.com/apache/helix/pull/1031#discussion_r432161839", "createdAt": "2020-05-28T22:36:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,82 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NTQzOA==", "bodyText": "Yes. Let me rename them. I'll be removing \"new\".", "url": "https://github.com/apache/helix/pull/1031#discussion_r432165438", "createdAt": "2020-05-28T22:47:58Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -140,6 +160,82 @@ public static String serializeByComma(List<String> objects) {\n     }\n   }\n \n+  /**\n+   * Returns the expected ideal ResourceAssignments for the given resources in the cluster\n+   * calculated using the read-only WAGED rebalancer.\n+   * @param metadataStoreAddress\n+   * @param clusterConfig\n+   * @param instanceConfigs\n+   * @param liveInstances\n+   * @param newIdealStates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTgzOQ=="}, "originalCommit": {"oid": "7c1f0abb492dae074399305bb8f52e8d6df33afc"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1076, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}