{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MzQ5NjE2", "number": 1468, "title": "Implement deleteTask API", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1467\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, the changes that needed to delete an existing task from a general job have been added to TaskDriver.\nAlso, the changes that needed on the controller side to drop the task from the instances and removing the task from the\ncontext has been implemented.\n\nTests\n\n\n The following tests are written for this issue:\nTestAddDeleteTask\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Tests run: 1242, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,182.218 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1242, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:26 h\n[INFO] Finished at: 2020-10-31T15:48:43-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-15T19:48:22Z", "url": "https://github.com/apache/helix/pull/1468", "merged": true, "mergeCommit": {"oid": "fbd3aab36415476a91aa3e7c8ee628c834e44c58"}, "closed": true, "closedAt": "2020-11-03T01:39:37Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS3OvUgBqjM4ODMzMDM3MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYsW2eAH2gAyNTA0MzQ5NjE2OmRkMDdlZTQ3ZTJmNDI5ZGExNTRiNThlYjk3YTNhYzljNjk2MDkxMjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c457c5a57da462555a3b79b4179e81976434a80", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/7c457c5a57da462555a3b79b4179e81976434a80", "committedDate": "2020-10-15T17:54:15Z", "message": "Implement deleteTask API\n\nIn this commit, the changes that needed to delete an existing\ntask from a general job has been added to TaskDriver.\nAlso, the changes that needed on the controller side to drop\nthe task from the instances and removing the task from the\ncontext have been implemented."}, "afterCommit": {"oid": "13cbfffeadeae7a56c06eecfebbec1f9b5412944", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/13cbfffeadeae7a56c06eecfebbec1f9b5412944", "committedDate": "2020-10-15T19:46:52Z", "message": "Implement deleteTask API\n\nIn this commit, the changes that needed to delete an existing\ntask from a general job has been added to TaskDriver.\nAlso, the changes that needed on the controller side to drop\nthe task from the instances and removing the task from the\ncontext have been implemented."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDAzNDk4", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-511003498", "createdAt": "2020-10-17T17:49:00Z", "commit": {"oid": "13cbfffeadeae7a56c06eecfebbec1f9b5412944"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNzo0OTowMFrOHjezjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNzo0OTowMFrOHjezjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NjkyNw==", "bodyText": "Helix exception? While illegal argument exception is caught.", "url": "https://github.com/apache/helix/pull/1468#discussion_r506966927", "createdAt": "2020-10-17T17:49:00Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestAddDeleteTask.java", "diffHunk": "@@ -89,9 +100,16 @@ public void testAddJobMissing() throws Exception {\n     } catch (IllegalArgumentException e) {\n       // Helix Exception is expected because job config is missing\n     }\n+\n+    try {\n+      _driver.deleteTask(workflowName, jobName, task.getId());\n+      Assert.fail(\"Exception is expected because job config is missing\");\n+    } catch (IllegalArgumentException e) {\n+      // Helix Exception is expected because job config is missing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cbfffeadeae7a56c06eecfebbec1f9b5412944"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a41a856197060c07d4ba4b1405494d71970cba1c", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/a41a856197060c07d4ba4b1405494d71970cba1c", "committedDate": "2020-10-19T03:03:38Z", "message": "Change the comments"}, "afterCommit": {"oid": "41b49d2420fee177a9015bedc7e9d6b3c90579b6", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/41b49d2420fee177a9015bedc7e9d6b3c90579b6", "committedDate": "2020-10-19T03:10:13Z", "message": "Change the comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjcxMTI1", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-514271125", "createdAt": "2020-10-22T00:01:56Z", "commit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDowMTo1NlrOHmL4sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1NzoxNlrOHmM12w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMjY3Mw==", "bodyText": "I think we introduced these \"new\" path patterns for the purpose of refactoring TF structure. While I believe this is still the future design, I agree that we want to make them work first. Can we add a TODO here?", "url": "https://github.com/apache/helix/pull/1468#discussion_r509802673", "createdAt": "2020-10-22T00:01:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java", "diffHunk": "@@ -169,17 +170,16 @@\n         \"/{clusterName}/PROPERTYSTORE/TaskRebalancer/{workflowName}/Context\"); // Old\n     // WorkflowContext\n     // path\n-    addEntry(PropertyType.TASK_CONFIG_ROOT, 1, \"/{clusterName}/CONFIGS/TASK\");\n-    addEntry(PropertyType.WORKFLOW_CONFIG, 3,\n-        \"/{clusterName}/CONFIGS/TASK/{workflowName}/{workflowName}\");\n-    addEntry(PropertyType.JOB_CONFIG, 4,\n-        \"/{clusterName}/CONFIGS/TASK/{workflowName}/{jobName}/{jobName}\");\n+    addEntry(PropertyType.TASK_CONFIG_ROOT, 1, \"/{clusterName}/CONFIGS/RESOURCE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMjgwOA==", "bodyText": "nit, taskSeqNumber?", "url": "https://github.com/apache/helix/pull/1468#discussion_r509802808", "createdAt": "2020-10-22T00:02:27Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobContext.java", "diffHunk": "@@ -313,4 +313,12 @@ public long getExecutionStartTime() {\n     }\n     return map;\n   }\n+\n+  /**\n+   * Remove the task from the map field of job context.\n+   * @param taskNumber\n+   */\n+  public void removeTask(int taskNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzYzNA==", "bodyText": "Moreover, according to the naming convention of this class, I guess we are using \"partition\" instead of \"task\".", "url": "https://github.com/apache/helix/pull/1468#discussion_r509803634", "createdAt": "2020-10-22T00:05:12Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobContext.java", "diffHunk": "@@ -313,4 +313,12 @@ public long getExecutionStartTime() {\n     }\n     return map;\n   }\n+\n+  /**\n+   * Remove the task from the map field of job context.\n+   * @param taskNumber\n+   */\n+  public void removeTask(int taskNumber) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMjgwOA=="}, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMDg1MA==", "bodyText": "ass => add", "url": "https://github.com/apache/helix/pull/1468#discussion_r509810850", "createdAt": "2020-10-22T00:29:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -478,4 +482,61 @@ private TaskAssignmentCalculator getAssignmentCalculator(JobConfig jobConfig,\n     }\n     return new FixedTargetTaskAssignmentCalculator(assignableInstanceManager);\n   }\n+\n+  /**\n+   * Find the tasks that have been removed from job config, ass them to tasksToDrop. If task's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxMzI4NQ==", "bodyText": "I think the calculation should be done in the taskAssignmentCal, so that allPartitions won't contains the removed tasks at all. Then the following logic is simple and we only match the current assignment with the expected task list. Anything mismatch, then we add or remove accordingly.", "url": "https://github.com/apache/helix/pull/1468#discussion_r509813285", "createdAt": "2020-10-22T00:39:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -238,6 +238,10 @@ private ResourceAssignment computeResourceMapping(String jobResource,\n \n     updateInstanceToTaskAssignmentsFromContext(jobCtx, currentInstanceToTaskAssignments);\n \n+    // Find the tasks that have been removed form the config, add them to TasksToDrop\n+    handleDeletedTasks(jobResource, jobCfg, jobCtx, currentInstanceToTaskAssignments, tasksToDrop,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNzI2Nw==", "bodyText": "Simple code is what I like : ) It also applies to addTask().\nif (workflowContext != null && jobContext != null (maybe remove the 2nd condition?)) {\n TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n  if (jobState != null && ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n      throw new HelixException(\"Job \" + nameSpaceJobName\n          + \" is in illegal state for task deletion. Job State is \" + jobState);\n  }\n}\ndeleteTaskFromJobConfig(workflowName, jobName, taskID, endTime);", "url": "https://github.com/apache/helix/pull/1468#discussion_r509817267", "createdAt": "2020-10-22T00:53:24Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -607,14 +615,101 @@ public void addTask(String workflowName, String jobName, TaskConfig taskConfig,\n     addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n   }\n \n+  /**\n+   * Delete an existing task from a running (IN-PROGRESS) job or a job which has not started yet.\n+   * Timeout for this operation is the default timeout which is 5 minutes.\n+   * {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be deleted from the job which is in an illegal state. Task can be deleted\n+   * from the job if the job is in-progress or it has not started yet.\n+   * Note2: The tasks can only be deleted from non-targeted jobs.\n+   * Note3: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully deleted or not.\n+   * Note4: timeout is the time that this API checks whether the task has been successfully deleted\n+   * or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskID\n+   * @throws TimeoutException if the outcome of the task deletion is unknown and cannot be verified\n+   * @throws IllegalArgumentException if the inputs are invalid\n+   * @throws HelixException if the job is not in the states to accept a new task or if there is any\n+   *           issue in updating jobConfig.\n+   */\n+  public void deleteTask(String workflowName, String jobName, String taskID)\n+      throws TimeoutException, InterruptedException {\n+    deleteTask(workflowName, jobName, taskID, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Delete an existing task from a running (IN-PROGRESS) job or a job which has not started yet.\n+   * Note1: Task cannot be deleted from the job which is in an illegal state. Task can be deleted\n+   * from the job if the job is in-progress or it has not started yet.\n+   * Note2: The tasks can only be deleted from non-targeted jobs.\n+   * Note3: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully deleted or not.\n+   * Note4: timeout is the time that this API checks whether the task has been successfully deleted\n+   * or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskID\n+   * @param timeoutMs\n+   * @throws TimeoutException if the outcome of the task deletion is unknown and cannot be verified\n+   * @throws IllegalArgumentException if the inputs are invalid\n+   * @throws HelixException if the job is not in the states to accept a new task or if there is any\n+   *           issue in updating jobConfig.\n+   */\n+  public void deleteTask(String workflowName, String jobName, String taskID, long timeoutMs)\n+      throws TimeoutException, InterruptedException {\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = getJobConfig(nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new IllegalArgumentException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    TaskConfig taskConfig = null;\n+    Map<String, TaskConfig> allTaskConfigs = jobConfig.getTaskConfigMap();\n+    for (Map.Entry<String, TaskConfig> entry : allTaskConfigs.entrySet()) {\n+      if (entry.getKey().equals(taskID)) {\n+        taskConfig = entry.getValue();\n+      }\n+    }\n+\n+    validateConfigsForTaskModifications(workflowName, jobName, taskConfig);\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxODMzMQ==", "bodyText": "I haven't reviewed these code completely. But my guess is that this method is different from addTaskToJobConfig() for only the updater part. All the rest are the same. Could you please merge?", "url": "https://github.com/apache/helix/pull/1468#discussion_r509818331", "createdAt": "2020-10-22T00:57:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -699,6 +798,73 @@ private void addTaskToJobConfig(String workflowName, String jobName, TaskConfig\n     throw new TimeoutException(\"An unexpected issue happened while task being added to the job!\");\n   }\n \n+  /**\n+   * A helper method which deletes an existing task from the job config and verifies if task is\n+   * deleted from the context by the controller.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskID\n+   * @param endTime\n+   * @throws InterruptedException\n+   * @throws TimeoutException\n+   */\n+  private void deleteTaskFromJobConfig(String workflowName, String jobName, String taskID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25e9a6a81976fe4403064f4be4d871d0c1735e6"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTI5MDIz", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-515929023", "createdAt": "2020-10-23T18:54:51Z", "commit": {"oid": "b97c6a569a49ab50c5e1a0bc2a009f6fd02a7787"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo1NDo1MVrOHnaEeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxNToyOFrOHnaz5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4MzY0MA==", "bodyText": "\"from\"", "url": "https://github.com/apache/helix/pull/1468#discussion_r511083640", "createdAt": "2020-10-23T18:54:51Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -238,6 +238,10 @@ private ResourceAssignment computeResourceMapping(String jobResource,\n \n     updateInstanceToTaskAssignmentsFromContext(jobCtx, currentInstanceToTaskAssignments);\n \n+    // Find the tasks that have been removed form the config, add them to TasksToDrop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97c6a569a49ab50c5e1a0bc2a009f6fd02a7787"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NDYyNA==", "bodyText": "We dont need to loop everything. We can do\nSet partitionRemoved = new HashSet<>(jobContext.getPartitionSet());\npartitionRemoved.removeAll(jobConfig.getTaskConfigMap().keySet());\nIn this case, we save some checks and some loops.", "url": "https://github.com/apache/helix/pull/1468#discussion_r511094624", "createdAt": "2020-10-23T19:14:08Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -478,4 +482,61 @@ private TaskAssignmentCalculator getAssignmentCalculator(JobConfig jobConfig,\n     }\n     return new FixedTargetTaskAssignmentCalculator(assignableInstanceManager);\n   }\n+\n+  /**\n+   * Find the tasks that have been removed from job config, add them to tasksToDrop. If task's\n+   * currentState and pending message have been removed, delete the task from job context.\n+   * @param jobName\n+   * @param jobConfig\n+   * @param jobContext\n+   * @param currentInstanceToTaskAssignments\n+   * @param tasksToDrop\n+   * @param currStateOutput\n+   * @param allPartitions\n+   */\n+  private void handleDeletedTasks(String jobName, JobConfig jobConfig, JobContext jobContext,\n+      Map<String, SortedSet<Integer>> currentInstanceToTaskAssignments,\n+      Map<String, Set<Integer>> tasksToDrop, CurrentStateOutput currStateOutput,\n+      Set<Integer> allPartitions) {\n+    if (TaskUtil.isGenericTaskJob(jobConfig)) {\n+      // Get all partitions existed in the context\n+      Set<Integer> contextPartitions = jobContext.getPartitionSet();\n+      // Check whether the tasks have been deleted from jobConfig\n+      for (Integer partition : contextPartitions) {\n+        String partitionID = jobContext.getTaskIdForPartition(partition);\n+        if (!jobConfig.getTaskConfigMap().containsKey(partitionID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97c6a569a49ab50c5e1a0bc2a009f6fd02a7787"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NTc4MQ==", "bodyText": "Can we do some pre process work? Make it as task -> list instances. So we dont have to loop all the instances again and again.", "url": "https://github.com/apache/helix/pull/1468#discussion_r511095781", "createdAt": "2020-10-23T19:15:28Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -478,4 +482,61 @@ private TaskAssignmentCalculator getAssignmentCalculator(JobConfig jobConfig,\n     }\n     return new FixedTargetTaskAssignmentCalculator(assignableInstanceManager);\n   }\n+\n+  /**\n+   * Find the tasks that have been removed from job config, add them to tasksToDrop. If task's\n+   * currentState and pending message have been removed, delete the task from job context.\n+   * @param jobName\n+   * @param jobConfig\n+   * @param jobContext\n+   * @param currentInstanceToTaskAssignments\n+   * @param tasksToDrop\n+   * @param currStateOutput\n+   * @param allPartitions\n+   */\n+  private void handleDeletedTasks(String jobName, JobConfig jobConfig, JobContext jobContext,\n+      Map<String, SortedSet<Integer>> currentInstanceToTaskAssignments,\n+      Map<String, Set<Integer>> tasksToDrop, CurrentStateOutput currStateOutput,\n+      Set<Integer> allPartitions) {\n+    if (TaskUtil.isGenericTaskJob(jobConfig)) {\n+      // Get all partitions existed in the context\n+      Set<Integer> contextPartitions = jobContext.getPartitionSet();\n+      // Check whether the tasks have been deleted from jobConfig\n+      for (Integer partition : contextPartitions) {\n+        String partitionID = jobContext.getTaskIdForPartition(partition);\n+        if (!jobConfig.getTaskConfigMap().containsKey(partitionID)) {\n+          boolean hasCurrentState = false;\n+          for (Map.Entry<String, SortedSet<Integer>> instanceToPartitions : currentInstanceToTaskAssignments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97c6a569a49ab50c5e1a0bc2a009f6fd02a7787"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjA2OTM5", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-517206939", "createdAt": "2020-10-26T21:58:49Z", "commit": {"oid": "59054675fbfe93752e5db090ece47a0a26a8c018"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1ODo0OVrOHoj9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjowMDowM1rOHokAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDMxMQ==", "bodyText": "The method is private, we may not bother to add the param with empty descriptions? I suggest we just remove them.", "url": "https://github.com/apache/helix/pull/1468#discussion_r512294311", "createdAt": "2020-10-26T21:58:49Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -478,4 +485,52 @@ private TaskAssignmentCalculator getAssignmentCalculator(JobConfig jobConfig,\n     }\n     return new FixedTargetTaskAssignmentCalculator(assignableInstanceManager);\n   }\n+\n+  /**\n+   * Add the removed task to tasksToDrop to drop its current state. If task's currentState and\n+   * pending message have been removed, delete the task from job context.\n+   * @param jobName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59054675fbfe93752e5db090ece47a0a26a8c018"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDk3Nw==", "bodyText": "If !hasCurrentState is also added to this if condition, when it is true, we don't need to new Partition() for later checks?", "url": "https://github.com/apache/helix/pull/1468#discussion_r512294977", "createdAt": "2020-10-26T22:00:03Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -478,4 +485,52 @@ private TaskAssignmentCalculator getAssignmentCalculator(JobConfig jobConfig,\n     }\n     return new FixedTargetTaskAssignmentCalculator(assignableInstanceManager);\n   }\n+\n+  /**\n+   * Add the removed task to tasksToDrop to drop its current state. If task's currentState and\n+   * pending message have been removed, delete the task from job context.\n+   * @param jobName\n+   * @param jobContext\n+   * @param currentInstanceToTaskAssignments\n+   * @param tasksToDrop\n+   * @param currStateOutput\n+   * @param allPartitions\n+   */\n+  private void handleDeletedTasks(String jobName, JobContext jobContext,\n+      Map<String, SortedSet<Integer>> currentInstanceToTaskAssignments,\n+      Map<String, Set<Integer>> tasksToDrop, CurrentStateOutput currStateOutput,\n+      Set<Integer> allPartitions, Set<Integer> removedPartitions) {\n+    for (Integer partition : removedPartitions) {\n+      boolean hasCurrentState = false;\n+      for (Map.Entry<String, SortedSet<Integer>> instanceToPartitions : currentInstanceToTaskAssignments\n+          .entrySet()) {\n+        String instance = instanceToPartitions.getKey();\n+        if (instanceToPartitions.getValue().contains(partition)) {\n+          LOG.info(\n+              \"Task {} should be removed from job {}. Current State should be removed from instance {} as well!\",\n+              partition, jobName, instance);\n+          if (!tasksToDrop.containsKey(instance)) {\n+            tasksToDrop.put(instance, new HashSet<>());\n+          }\n+          tasksToDrop.get(instance).add(partition);\n+\n+          // If current state or pending message have not been removed yet, we should not\n+          // delete the context and leave unclean currentState\n+          String pName = pName(jobName, partition);\n+          if (currStateOutput.getCurrentState(jobName, new Partition(pName), instance) != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59054675fbfe93752e5db090ece47a0a26a8c018"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjQzMjk1", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-519243295", "createdAt": "2020-10-29T00:54:13Z", "commit": {"oid": "ac7a787a807249d2eddf9df9bd6d8c7dddd671d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDo1NDoxM1rOHqCtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDo1NDoxM1rOHqCtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0NjY2OA==", "bodyText": "nit: can probably be condensed to one line.", "url": "https://github.com/apache/helix/pull/1468#discussion_r513846668", "createdAt": "2020-10-29T00:54:13Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java", "diffHunk": "@@ -123,6 +124,17 @@ public FixedTargetTaskAssignmentCalculator(AssignableInstanceManager assignableI\n     return taskPartitions;\n   }\n \n+  @Override\n+  public Set<Integer> getRemovedPartitions(JobConfig jobConfig, JobContext jobContext, Set<Integer> allPartitions) {\n+    Set<Integer> deletedPartitions = new HashSet<>();\n+    for (Integer partition : jobContext.getPartitionSet()) {\n+      if (!allPartitions.contains(partition)) {\n+        deletedPartitions.add(partition);\n+      }\n+    }\n+    return deletedPartitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7a787a807249d2eddf9df9bd6d8c7dddd671d0"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e7e6476876abd5c89438e7390e7d6ae942bc26", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/a5e7e6476876abd5c89438e7390e7d6ae942bc26", "committedDate": "2020-10-30T05:58:49Z", "message": "Implement deleteTask API\n\nIn this commit, the changes that needed to delete an existing\ntask from a general job has been added to TaskDriver.\nAlso, the changes that needed on the controller side to drop\nthe task from the instances and removing the task from the\ncontext have been implemented."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f1c41f43915dbbc438df2554e1096a2ac7c340", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/a5f1c41f43915dbbc438df2554e1096a2ac7c340", "committedDate": "2020-10-30T05:58:49Z", "message": "Change the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3204001e03c025e4cc03ad0d837943ba7358737", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/f3204001e03c025e4cc03ad0d837943ba7358737", "committedDate": "2020-10-30T05:58:49Z", "message": "Fix Task related paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df3beba55774db6e4d449ea13a8866ba9be31613", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/df3beba55774db6e4d449ea13a8866ba9be31613", "committedDate": "2020-10-30T05:58:49Z", "message": "Address the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36802bd3d42809fd641e3b6151c885a2b661b3bf", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/36802bd3d42809fd641e3b6151c885a2b661b3bf", "committedDate": "2020-10-30T05:58:49Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9429e219367e1832a79781879b98b24c2c96069", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/e9429e219367e1832a79781879b98b24c2c96069", "committedDate": "2020-10-30T05:58:49Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a490a44b4c5584f6c59f3ac1c2a970454275363", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/7a490a44b4c5584f6c59f3ac1c2a970454275363", "committedDate": "2020-10-30T05:58:49Z", "message": "new comments being addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/fc331157fbbf3b1935af075f4ca11cfcbcb58c99", "committedDate": "2020-10-30T05:58:49Z", "message": "Address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ab62fd580e5958e045d7541790e592d8d8e293b", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/8ab62fd580e5958e045d7541790e592d8d8e293b", "committedDate": "2020-10-29T22:50:48Z", "message": "Address comment"}, "afterCommit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/fc331157fbbf3b1935af075f4ca11cfcbcb58c99", "committedDate": "2020-10-30T05:58:49Z", "message": "Address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTMxOTgz", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-521931983", "createdAt": "2020-11-02T19:29:21Z", "commit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyOToyMlrOHsSsig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0ODo1OFrOHsTUMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNTcwNg==", "bodyText": "We can save the loop operation by set operation as:\nSet deletedPartitions = new HashSet<>(jobContext.getPartitionSet());\ndeletedPartitions.removeAll(jobConfig.getTaskConfigMap().keySet());", "url": "https://github.com/apache/helix/pull/1468#discussion_r516205706", "createdAt": "2020-11-02T19:29:22Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java", "diffHunk": "@@ -95,6 +97,20 @@\n     return placement.computeMapping(jobCfg, jobContext, partitionNums, resourceId);\n   }\n \n+  @Override\n+  public Set<Integer> getRemovedPartitions(JobConfig jobConfig, JobContext jobContext, Set<Integer> allPartitions) {\n+    // Get all partitions existed in the context\n+    Set<Integer> deletedPartitions = new HashSet<>();\n+    // Check whether the tasks have been deleted from jobConfig\n+    for (Integer partition : jobContext.getPartitionSet()) {\n+      String partitionID = jobContext.getTaskIdForPartition(partition);\n+      if (!jobConfig.getTaskConfigMap().containsKey(partitionID)) {\n+        deletedPartitions.add(partition);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjUzNw==", "bodyText": "Since this is same implementation as generic one, can we have this implementation as default implement in abstract class? Then if we need difference implementation, let override it.", "url": "https://github.com/apache/helix/pull/1468#discussion_r516212537", "createdAt": "2020-11-02T19:42:47Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/ThreadCountBasedTaskAssignmentCalculator.java", "diffHunk": "@@ -146,6 +147,20 @@ public ThreadCountBasedTaskAssignmentCalculator(TaskAssigner taskAssigner,\n     return taskAssignment;\n   }\n \n+  @Override\n+  public Set<Integer> getRemovedPartitions(JobConfig jobConfig, JobContext jobContext, Set<Integer> allPartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTE2MA==", "bodyText": "Please make sure user understand it. If they have the delay scheduling between tasks or if there are dependencies, this add may fail. Also we do not do \"rollback\" for added tasks.", "url": "https://github.com/apache/helix/pull/1468#discussion_r516215160", "createdAt": "2020-11-02T19:47:35Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -585,36 +585,195 @@ public void addTask(String workflowName, String jobName, TaskConfig taskConfig,\n \n     long endTime = System.currentTimeMillis() + timeoutMs;\n \n-    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+    validateConfigsForTaskModifications(workflowName, jobName, taskConfig);\n \n     String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n     WorkflowContext workflowContext = getWorkflowContext(workflowName);\n     JobContext jobContext = getJobContext(nameSpaceJobName);\n+    // If workflow context or job context is null. It means job has not been started. Hence task can\n+    // be added to the job\n+    if (workflowContext != null && jobContext != null) {\n+      TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+      if (jobState != null && ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n+        throw new HelixException(\"Job \" + nameSpaceJobName\n+            + \" is in illegal state for task addition. Job State is \" + jobState);\n+      }\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.error(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    updateTaskInJobConfig(workflowName, jobName, updater);\n+\n+    workflowContext =\n+        _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+    jobContext =\n+        _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+\n     if (workflowContext == null || jobContext == null) {\n-      // Workflow context or job context is null. It means job has not been started. Hence task can\n-      // be added to the job\n-      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n       return;\n     }\n \n-    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      jobContext =\n+          _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+      workflowContext =\n+          _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+      if (jobContext.getTaskIdPartitionMap().containsKey(taskID)\n+          && workflowContext.getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTg1OA==", "bodyText": "This condition may not be correct. If this is the only task, job can be completed or something.", "url": "https://github.com/apache/helix/pull/1468#discussion_r516215858", "createdAt": "2020-11-02T19:48:58Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -585,36 +585,195 @@ public void addTask(String workflowName, String jobName, TaskConfig taskConfig,\n \n     long endTime = System.currentTimeMillis() + timeoutMs;\n \n-    validateAddTaskConfigs(workflowName, jobName, taskConfig);\n+    validateConfigsForTaskModifications(workflowName, jobName, taskConfig);\n \n     String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = TaskUtil.getJobConfig(_accessor, nameSpaceJobName);\n+    for (String taskEntry : jobConfig.getMapConfigs().keySet()) {\n+      if (taskEntry.equals(taskConfig.getId())) {\n+        throw new HelixException(\n+            \"Task cannot be added because another task with the same ID already exists!\");\n+      }\n+    }\n+\n     WorkflowContext workflowContext = getWorkflowContext(workflowName);\n     JobContext jobContext = getJobContext(nameSpaceJobName);\n+    // If workflow context or job context is null. It means job has not been started. Hence task can\n+    // be added to the job\n+    if (workflowContext != null && jobContext != null) {\n+      TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+      if (jobState != null && ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n+        throw new HelixException(\"Job \" + nameSpaceJobName\n+            + \" is in illegal state for task addition. Job State is \" + jobState);\n+      }\n+    }\n+\n+    DataUpdater<ZNRecord> updater = currentData -> {\n+      if (currentData != null) {\n+        currentData.setMapField(taskConfig.getId(), taskConfig.getConfigMap());\n+      } else {\n+        LOG.error(\"JobConfig DataUpdater: Fails to update JobConfig. CurrentData is null.\");\n+      }\n+      return currentData;\n+    };\n+\n+    updateTaskInJobConfig(workflowName, jobName, updater);\n+\n+    workflowContext =\n+        _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+    jobContext =\n+        _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+\n     if (workflowContext == null || jobContext == null) {\n-      // Workflow context or job context is null. It means job has not been started. Hence task can\n-      // be added to the job\n-      addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n       return;\n     }\n \n-    TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+    String taskID = taskConfig.getId();\n+    while (System.currentTimeMillis() <= endTime) {\n+      jobContext =\n+          _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+      workflowContext =\n+          _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+      if (jobContext.getTaskIdPartitionMap().containsKey(taskID)\n+          && workflowContext.getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {\n+        return;\n+      }\n \n-    if (ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n-      throw new HelixException(\n-          String.format(\"Job %s is in illegal state to accept new task. Job State is %s\",\n-              nameSpaceJobName, jobState));\n+      Thread.sleep(DEFAULT_SLEEP);\n+    }\n+    throw new TimeoutException(\"An unexpected issue happened while task being added to the job!\");\n+  }\n+\n+  /**\n+   * Delete an existing task from a running (IN-PROGRESS) job or a job which has not started yet.\n+   * Timeout for this operation is the default timeout which is 5 minutes.\n+   * {@link TaskDriver#DEFAULT_TIMEOUT}\n+   * Note1: Task cannot be deleted from the job which is in an illegal state. Task can be deleted\n+   * from the job if the job is in-progress or it has not started yet.\n+   * Note2: The tasks can only be deleted from non-targeted jobs.\n+   * Note3: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully deleted or not.\n+   * Note4: timeout is the time that this API checks whether the task has been successfully deleted\n+   * or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskID\n+   * @throws TimeoutException if the outcome of the task deletion is unknown and cannot be verified\n+   * @throws IllegalArgumentException if the inputs are invalid\n+   * @throws HelixException if the job is not in the states to accept a new task or if there is any\n+   *           issue in updating jobConfig.\n+   */\n+  public void deleteTask(String workflowName, String jobName, String taskID)\n+      throws TimeoutException, InterruptedException {\n+    deleteTask(workflowName, jobName, taskID, DEFAULT_TIMEOUT);\n+  }\n+\n+  /**\n+   * Delete an existing task from a running (IN-PROGRESS) job or a job which has not started yet.\n+   * Note1: Task cannot be deleted from the job which is in an illegal state. Task can be deleted\n+   * from the job if the job is in-progress or it has not started yet.\n+   * Note2: The tasks can only be deleted from non-targeted jobs.\n+   * Note3: In case of timeout exception, it is the user's responsibility to check whether the task\n+   * has been successfully deleted or not.\n+   * Note4: timeout is the time that this API checks whether the task has been successfully deleted\n+   * or not.\n+   * @param workflowName\n+   * @param jobName\n+   * @param taskID\n+   * @param timeoutMs\n+   * @throws TimeoutException if the outcome of the task deletion is unknown and cannot be verified\n+   * @throws IllegalArgumentException if the inputs are invalid\n+   * @throws HelixException if the job is not in the states to accept a new task or if there is any\n+   *           issue in updating jobConfig.\n+   */\n+  public void deleteTask(String workflowName, String jobName, String taskID, long timeoutMs)\n+      throws TimeoutException, InterruptedException {\n+    long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+    String nameSpaceJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n+    JobConfig jobConfig = getJobConfig(nameSpaceJobName);\n+    if (jobConfig == null) {\n+      throw new IllegalArgumentException(\"Job \" + nameSpaceJobName + \" config does not exist!\");\n+    }\n+\n+    TaskConfig taskConfig = null;\n+    Map<String, TaskConfig> allTaskConfigs = jobConfig.getTaskConfigMap();\n+    for (Map.Entry<String, TaskConfig> entry : allTaskConfigs.entrySet()) {\n+      if (entry.getKey().equals(taskID)) {\n+        taskConfig = entry.getValue();\n+      }\n+    }\n+\n+    validateConfigsForTaskModifications(workflowName, jobName, taskConfig);\n+\n+    WorkflowContext workflowContext = getWorkflowContext(workflowName);\n+    JobContext jobContext = getJobContext(nameSpaceJobName);\n+    // If workflow context or job context is null. It means job has not been started. Hence task can\n+    // be deleted from the job\n+    if (workflowContext != null && jobContext != null) {\n+      TaskState jobState = workflowContext.getJobState(nameSpaceJobName);\n+      if (jobState != null && ILLEGAL_JOB_STATES_FOR_TASK_MODIFICATION.contains(jobState)) {\n+        throw new HelixException(\"Job \" + nameSpaceJobName\n+            + \" is in illegal state for task deletion. Job State is \" + jobState);\n+      }\n+    }\n+\n+    DataUpdater<ZNRecord> taskRemover = new DataUpdater<ZNRecord>() {\n+      @Override\n+      public ZNRecord update(ZNRecord currentData) {\n+        if (currentData != null) {\n+          Map<String, Map<String, String>> taskMap = currentData.getMapFields();\n+          if (taskMap == null) {\n+            LOG.warn(\"Could not update the jobConfig: \" + jobName + \" Znode MapField is null.\");\n+            return null;\n+          }\n+          Map<String, Map<String, String>> newTaskMap = new HashMap<String, Map<String, String>>();\n+          for (Map.Entry<String, Map<String, String>> entry : taskMap.entrySet()) {\n+            if (!entry.getKey().equals(taskID)) {\n+              newTaskMap.put(entry.getKey(), entry.getValue());\n+            }\n+          }\n+          currentData.setMapFields(newTaskMap);\n+        }\n+        return currentData;\n+      }\n+    };\n+\n+    updateTaskInJobConfig(workflowName, jobName, taskRemover);\n+\n+    workflowContext =\n+        _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+    jobContext =\n+        _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+\n+    if (workflowContext == null || jobContext == null) {\n+      return;\n     }\n-    addTaskToJobConfig(workflowName, jobName, taskConfig, endTime);\n+\n+    while (System.currentTimeMillis() <= endTime) {\n+      jobContext =\n+          _accessor.getProperty(_accessor.keyBuilder().jobContextZNode(workflowName, jobName));\n+      workflowContext =\n+          _accessor.getProperty(_accessor.keyBuilder().workflowContextZNode(workflowName));\n+      if (!jobContext.getTaskIdPartitionMap().containsKey(taskID)\n+          && workflowContext.getJobState(nameSpaceJobName) == TaskState.IN_PROGRESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTQ1MzY3", "url": "https://github.com/apache/helix/pull/1468#pullrequestreview-521945367", "createdAt": "2020-11-02T19:50:04Z", "commit": {"oid": "fc331157fbbf3b1935af075f4ca11cfcbcb58c99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd07ee47e2f429da154b58eb97a3ac9c69609120", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/dd07ee47e2f429da154b58eb97a3ac9c69609120", "committedDate": "2020-11-02T22:32:12Z", "message": "Address final comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4357, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}