{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzE3ODcx", "number": 1083, "title": "Fix waitToStop method in TaskDriver", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR title:\nFixes #1082\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, waitToStop has been changed to make sure workflow/queue is in stopped state if waitToStop returns successfully without Exception. When the queue targetState is set to stop, the queue will go to STOPPING state. STOPPING state is a transient state which means some of the jobs has not ben completely stopped or in terminal state. In other words, some of that tasks within the jobs have not reached the terminal state yet.\n\nTests\n\n The following tests are written for this issue:\nTestStoppingQueueFailToStop\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-core:\n[ERROR] Tests run: 1140, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 5,244.233 s <<< FAILURE! - in TestSuite\n[ERROR] testJobQueueAutoCleanUp(org.apache.helix.integration.task.TestJobQueueCleanUp)  Time elapsed: 300.016 s  <<< FAILURE!\norg.testng.internal.thread.ThreadTimeoutException: Method org.testng.internal.TestNGMethod.testJobQueueAutoCleanUp() didn't finish within the time-out 300000\n\n[ERROR] testControllerSwitch(org.apache.helix.task.TestAssignableInstanceManagerControllerSwitch)  Time elapsed: 1.352 s  <<< FAILURE!\njava.lang.AssertionError: expected:<5> but was:<0>\n\tat org.apache.helix.task.TestAssignableInstanceManagerControllerSwitch.testControllerSwitch(TestAssignableInstanceManagerControllerSwitch.java:105)\n\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\n[ERROR]   TestAssignableInstanceManagerControllerSwitch.testControllerSwitch:105 expected:<5> but was:<0>\n[INFO] \n[ERROR] Tests run: 1140, Failures: 2, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:27 h\n[INFO] Finished at: 2020-06-10T14:07:27-07:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test succeed when run individually.\nmvn test -Dtest=\"TestJobQueueCleanUp,TestAssignableInstanceManagerControllerSwitch\"\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.077 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  25.503 s\n[INFO] Finished at: 2020-06-10T14:37:42-07:00\n[INFO] ------------------------------------------------------------------------\n\nhelix-rest:\n[INFO] Tests run: 162, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 46.785 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 162, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  52.195 s\n[INFO] Finished at: 2020-06-10T14:36:25-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-06-10T21:41:24Z", "url": "https://github.com/apache/helix/pull/1083", "merged": true, "mergeCommit": {"oid": "010a93b0d76452e8d120b7b85f52ef54b0a83ed3"}, "closed": true, "closedAt": "2020-06-15T17:53:17Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqAxc9gH2gAyNDMyNzE3ODcxOmRkYzUyYjI5MGFjYjY3YzM5ODYyOTlmZDk1MzMwM2Q1MjEzNjc1NmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrSoVDABqjM0NDIwNDE3ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/ddc52b290acb67c3986299fd953303d52136756d", "committedDate": "2020-06-10T21:44:55Z", "message": "Fix waitToStop in TaskDriver\n\nMake sure that queue is stopped in waitToStop method."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1e90844af6ece83b100e567422c882622fa3cc2", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/e1e90844af6ece83b100e567422c882622fa3cc2", "committedDate": "2020-06-10T21:39:29Z", "message": "Fix waitToStop in TaskDriver\n\nMake sure that queue is stopped in waitToStop method."}, "afterCommit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/ddc52b290acb67c3986299fd953303d52136756d", "committedDate": "2020-06-10T21:44:55Z", "message": "Fix waitToStop in TaskDriver\n\nMake sure that queue is stopped in waitToStop method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDYxNDA1", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-428461405", "createdAt": "2020-06-10T22:06:42Z", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTA4MjUx", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-428508251", "createdAt": "2020-06-11T00:06:58Z", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowNjo1OFrOGiKPJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowNjo1OFrOGiKPJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MjQ4NQ==", "bodyText": "Is this unused?", "url": "https://github.com/apache/helix/pull/1083#discussion_r438472485", "createdAt": "2020-06-11T00:06:58Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestStoppingQueueFailToStop.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManagerFactory;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskCallbackContext;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.TaskUtil;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Sets;\n+\n+\n+/**\n+ * Test to check if waitToStop method correctly throws an Exception if Queue stuck in STOPPING\n+ * state.\n+ */\n+public class TestStoppingQueueFailToStop extends TaskTestBase {\n+  private static final String DATABASE = WorkflowGenerator.DEFAULT_TGT_DB;\n+  protected HelixDataAccessor _accessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTA4Nzkz", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-428508793", "createdAt": "2020-06-11T00:08:38Z", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowODozOFrOGiKQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowODozOFrOGiKQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3Mjk0NA==", "bodyText": "Why upper case for a private field?", "url": "https://github.com/apache/helix/pull/1083#discussion_r438472944", "createdAt": "2020-06-11T00:08:38Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestStoppingQueueFailToStop.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManagerFactory;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskCallbackContext;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.TaskUtil;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Sets;\n+\n+\n+/**\n+ * Test to check if waitToStop method correctly throws an Exception if Queue stuck in STOPPING\n+ * state.\n+ */\n+public class TestStoppingQueueFailToStop extends TaskTestBase {\n+  private static final String DATABASE = WorkflowGenerator.DEFAULT_TGT_DB;\n+  protected HelixDataAccessor _accessor;\n+  private boolean TASK_STOPPABLE = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTEzNDIz", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-428513423", "createdAt": "2020-06-11T00:23:29Z", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMzoyOVrOGiKgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMzoyOVrOGiKgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3Njk2MQ==", "bodyText": "This while-loop-sleep doesn't look the best option. Would a countdown solve this wait better?", "url": "https://github.com/apache/helix/pull/1083#discussion_r438476961", "createdAt": "2020-06-11T00:23:29Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestStoppingQueueFailToStop.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManagerFactory;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskCallbackContext;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.TaskUtil;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Sets;\n+\n+\n+/**\n+ * Test to check if waitToStop method correctly throws an Exception if Queue stuck in STOPPING\n+ * state.\n+ */\n+public class TestStoppingQueueFailToStop extends TaskTestBase {\n+  private static final String DATABASE = WorkflowGenerator.DEFAULT_TGT_DB;\n+  protected HelixDataAccessor _accessor;\n+  private boolean TASK_STOPPABLE = false;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 3;\n+    super.beforeClass();\n+    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n+        InstanceType.ADMINISTRATOR, ZK_ADDR);\n+\n+    // Stop participants that have been started in super class\n+    for (int i = 0; i < _numNodes; i++) {\n+      super.stopParticipant(i);\n+      Assert.assertFalse(_participants[i].isConnected());\n+    }\n+\n+    // Start new participants that have new TaskStateModel (NewMockTask) information\n+    _participants = new MockParticipantManager[_numNodes];\n+    for (int i = 0; i < _numNodes; i++) {\n+      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n+      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n+      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n+      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n+\n+      // Register a Task state model factory.\n+      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n+      stateMachine.registerStateModelFactory(\"Task\",\n+          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n+      _participants[i].syncStart();\n+    }\n+\n+    _manager.connect();\n+    _driver = new TaskDriver(_manager);\n+  }\n+\n+  @Test\n+  public void testStoppingQueueFailToStop() throws Exception {\n+    String jobQueueName = TestHelper.getTestMethodName();\n+    JobConfig.Builder jobBuilder0 =\n+        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n+            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n+            .setCommand(MockTask.TASK_COMMAND)\n+            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n+\n+    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n+    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n+    _driver.start(jobQueue.build());\n+    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\"),\n+        TaskState.IN_PROGRESS);\n+    boolean exceptionHappened = false;\n+    try {\n+      _driver.waitToStop(jobQueueName, 5000);\n+    } catch (HelixException e) {\n+      exceptionHappened = true;\n+    }\n+    _driver.pollForWorkflowState(jobQueueName, TaskState.STOPPING);\n+    Assert.assertTrue(exceptionHappened);\n+    TASK_STOPPABLE = true;\n+  }\n+\n+  /**\n+   * A mock task that extents MockTask class and stuck in running when cancel is called.\n+   */\n+  private class NewMockTask extends MockTask {\n+\n+    NewMockTask(TaskCallbackContext context) {\n+      super(context);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+      while (!TASK_STOPPABLE) {\n+        try {\n+          Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTEzNzA5", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-428513709", "createdAt": "2020-06-11T00:24:30Z", "commit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNDozMFrOGiKhkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNDozMFrOGiKhkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzIwMA==", "bodyText": "It doesn't seem these imports are formatted by helix-style?", "url": "https://github.com/apache/helix/pull/1083#discussion_r438477200", "createdAt": "2020-06-11T00:24:30Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestStoppingQueueFailToStop.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManagerFactory;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskCallbackContext;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.TaskUtil;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddc52b290acb67c3986299fd953303d52136756d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cdd52597aa4ea9fabfb7f8dee21c4e6282e4823", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/1cdd52597aa4ea9fabfb7f8dee21c4e6282e4823", "committedDate": "2020-06-11T17:17:23Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTI5MjA3", "url": "https://github.com/apache/helix/pull/1083#pullrequestreview-430129207", "createdAt": "2020-06-13T10:13:19Z", "commit": {"oid": "1cdd52597aa4ea9fabfb7f8dee21c4e6282e4823"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMzoxOVrOGjW1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMzoxOVrOGjW1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzUyMA==", "bodyText": "If I understand the logic here right, Countdown latch does exactly the job you need and does it better. Countdown latch could await until latch is release. I may not have insisted this since it is a test. But I am curious. Could you help understand why countdown latch doesn\u2019t solve this? Isn\u2019t it better than this high cpu switch  sleep polling?", "url": "https://github.com/apache/helix/pull/1083#discussion_r439727520", "createdAt": "2020-06-13T10:13:19Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestStoppingQueueFailToStop.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManagerFactory;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.model.MasterSlaveSMD;\n+import org.apache.helix.participant.StateMachineEngine;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.JobQueue;\n+import org.apache.helix.task.TaskCallbackContext;\n+import org.apache.helix.task.TaskDriver;\n+import org.apache.helix.task.TaskFactory;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskStateModelFactory;\n+import org.apache.helix.task.TaskUtil;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Test to check if waitToStop method correctly throws an Exception if Queue stuck in STOPPING\n+ * state.\n+ */\n+public class TestStoppingQueueFailToStop extends TaskTestBase {\n+  private static final String DATABASE = WorkflowGenerator.DEFAULT_TGT_DB;\n+  private boolean _taskStoppable = false;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 3;\n+    super.beforeClass();\n+    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n+        InstanceType.ADMINISTRATOR, ZK_ADDR);\n+\n+    // Stop participants that have been started in super class\n+    for (int i = 0; i < _numNodes; i++) {\n+      super.stopParticipant(i);\n+      Assert.assertFalse(_participants[i].isConnected());\n+    }\n+\n+    // Start new participants that have new TaskStateModel (NewMockTask) information\n+    _participants = new MockParticipantManager[_numNodes];\n+    for (int i = 0; i < _numNodes; i++) {\n+      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n+      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n+      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n+      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n+\n+      // Register a Task state model factory.\n+      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n+      stateMachine.registerStateModelFactory(\"Task\",\n+          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n+      _participants[i].syncStart();\n+    }\n+\n+    _manager.connect();\n+    _driver = new TaskDriver(_manager);\n+  }\n+\n+  @Test\n+  public void testStoppingQueueFailToStop() throws Exception {\n+    String jobQueueName = TestHelper.getTestMethodName();\n+    JobConfig.Builder jobBuilder0 =\n+        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n+            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n+            .setCommand(MockTask.TASK_COMMAND)\n+            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n+\n+    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n+    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n+    _driver.start(jobQueue.build());\n+    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\"),\n+        TaskState.IN_PROGRESS);\n+    boolean exceptionHappened = false;\n+    try {\n+      _driver.waitToStop(jobQueueName, 5000L);\n+    } catch (HelixException e) {\n+      exceptionHappened = true;\n+    }\n+    _driver.pollForWorkflowState(jobQueueName, TaskState.STOPPING);\n+    Assert.assertTrue(exceptionHappened);\n+    _taskStoppable = true;\n+  }\n+\n+  /**\n+   * A mock task that extents MockTask class and stuck in running when cancel is called.\n+   */\n+  private class NewMockTask extends MockTask {\n+\n+    NewMockTask(TaskCallbackContext context) {\n+      super(context);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+      while (!_taskStoppable) {\n+        try {\n+          Thread.sleep(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdd52597aa4ea9fabfb7f8dee21c4e6282e4823"}, "originalPosition": 124}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d357eb1da5717d2091b38340b715585730eba26", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/6d357eb1da5717d2091b38340b715585730eba26", "committedDate": "2020-06-14T17:09:43Z", "message": "Address comments"}, "afterCommit": {"oid": "702f5f4e0ace7582b4edf981959bb7a03f5b5ff1", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/702f5f4e0ace7582b4edf981959bb7a03f5b5ff1", "committedDate": "2020-06-14T21:03:19Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "911a4475c9e7e5d5c2a78fbf8f15b2cbff8c6ee6", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/911a4475c9e7e5d5c2a78fbf8f15b2cbff8c6ee6", "committedDate": "2020-06-14T21:07:00Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "702f5f4e0ace7582b4edf981959bb7a03f5b5ff1", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/702f5f4e0ace7582b4edf981959bb7a03f5b5ff1", "committedDate": "2020-06-14T21:03:19Z", "message": "Address comments"}, "afterCommit": {"oid": "911a4475c9e7e5d5c2a78fbf8f15b2cbff8c6ee6", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/911a4475c9e7e5d5c2a78fbf8f15b2cbff8c6ee6", "committedDate": "2020-06-14T21:07:00Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}