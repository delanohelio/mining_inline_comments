{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTcwNzM4", "number": 819, "title": "Make RealmAwareZkClient implementations use HttpRoutingDataReader for routing data", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #818\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe want all implementations of RealmAwareZkClient to do a one-time query to Metadata Store Directory Service for routing data and cache it in memory. In order to accomplish that, we have introduced HttpRoutingDataReader, which is a Singleton class that makes a REST call to read routing data and caches it in memory. This diff updates the initialization logic in RealmAwareZkClients accordingly.\nChangelist:\n\nUpdate all RealmAwareZkClient initialization logic\nFix tests\n\nTests\n\n The following tests are written for this issue:\n\nTestDedicatedZkClient\nTestSharedZkClient\nTestFederatedZkClient\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nmetadata-store-directory-common\n\n\n[INFO] Tests run: 30, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.322 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 30, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.531 s\n[INFO] Finished at: 2020-03-03T18:02:00-08:00\n[INFO] ------------------------------------------------------------------------\n\n\nzookeeper-api\n\n[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.57 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  7.604 s\n[INFO] Finished at: 2020-03-03T18:02:21-08:00\n[INFO] ------------------------------------------------------------------------\n\n\nhelix-rest\n\n[INFO] Tests run: 136, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 25.661 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 136, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] \n\n\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml (helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-02-27T00:11:39Z", "url": "https://github.com/apache/helix/pull/819", "merged": true, "mergeCommit": {"oid": "4c593e9c118d083424dc3cb0eb51ff237cb67305"}, "closed": true, "closedAt": "2020-03-04T08:01:40Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIkpKQgFqTM2NjA4OTQxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKR4AUgH2gAyMzgwNTcwNzM4OmY3MGU4NDYwZDliYzMyZmM1NTU3MDc0MjllMmJkY2VkOWUxYTE1NGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDg5NDE0", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-366089414", "createdAt": "2020-02-28T00:19:00Z", "commit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxOTowMVrOFvlsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDoxOTowMVrOFvlsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NTA2Nw==", "bodyText": "Document when/why IOExeption would be thrown and why InvalidRoutingDataException would be thrown.\nSeem from HttpRoutingDataReader code, if we can't get data/parse data from http respone, it would be IO exception, if constructing the trie based on parse http reponse failed, it is InvalidRoutingDataException.", "url": "https://github.com/apache/helix/pull/819#discussion_r385445067", "createdAt": "2020-02-28T00:19:01Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -31,25 +34,21 @@\n    * Build a RealmAwareZkClient using specified connection config and client config.\n    * @param connectionConfig\n    * @param clientConfig\n-   * @param metadataStoreRoutingData\n    * @return HelixZkClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTAwMjE0", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-366100214", "createdAt": "2020-02-28T00:52:54Z", "commit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1Mjo1NFrOFvmR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1Mjo1NFrOFvmR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDU2NQ==", "bodyText": "This would be a conflict. Now my change is in, we need a rebase for this one.", "url": "https://github.com/apache/helix/pull/819#discussion_r385454565", "createdAt": "2020-02-28T00:52:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/SharedZkClientFactory.java", "diffHunk": "@@ -45,21 +45,12 @@ protected SharedZkClientFactory() {\n   @Override\n   public RealmAwareZkClient buildZkClient(\n       RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTAwNzE4", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-366100718", "createdAt": "2020-02-28T00:54:35Z", "commit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1NDozNVrOFvmTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo1NDozNVrOFvmTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDk5NQ==", "bodyText": "A little off topic. Do we have a issue to track this one? If we need to enhance this part, this is the number one issue in my opinion.", "url": "https://github.com/apache/helix/pull/819#discussion_r385454995", "createdAt": "2020-02-28T00:54:35Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/util/HttpRoutingDataReader.java", "diffHunk": "@@ -102,7 +102,8 @@ public static MetadataStoreRoutingData getMetadataStoreRoutingData()\n    * @throws IOException\n    */\n   private static String getAllRoutingData() throws IOException {\n-    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point of failure if it's backed by a single IP address/host\n+    // Note that MSDS_ENDPOINT should provide high-availability - it risks becoming a single point\n+    // of failure if it's backed by a single IP address/host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74ba53f0f773021eb2b14a540c212ff3c118ea34", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/74ba53f0f773021eb2b14a540c212ff3c118ea34", "committedDate": "2020-02-27T01:18:12Z", "message": "fix job"}, "afterCommit": {"oid": "3a9d91c8be4955943a2d4dbd86e551b18cb4105e", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/3a9d91c8be4955943a2d4dbd86e551b18cb4105e", "committedDate": "2020-03-01T03:56:16Z", "message": "Fix merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzEyMzg3", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-367712387", "createdAt": "2020-03-03T05:34:05Z", "commit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTozNDowNVrOFw43Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTozNDowNVrOFw43Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA==", "bodyText": "It may not be a good idea to declare exception in a constructor which I would try to avoid. For this case, I suggest catching them and throwing an IllegalStateException.", "url": "https://github.com/apache/helix/pull/819#discussion_r386807578", "createdAt": "2020-03-03T05:34:05Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9e9978ece4c96d547d11e3d2cdc4ec1f5d7b9c", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/1b9e9978ece4c96d547d11e3d2cdc4ec1f5d7b9c", "committedDate": "2020-03-04T01:29:56Z", "message": "Make DedicatedZkClient use HttpRoutingDataReader for routing data\n\nWe want all implementations of RealmAwareZkClient to do a one-time query to Metadata Store Directory Service for routing data and cache it in memory. In order to accomplish that, we have introduced HttpRoutingDataReader, which is a Singleton class that makes a REST call to read routing data and caches it in memory. This diff updates the initialization logic in DedicatedZkClient accordingly.\nChangelist:\n1. Update DedicatedZkClient initialization logic\n2. Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4057d357319751fead08abce9c4e610dbd0ed4ab", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/4057d357319751fead08abce9c4e610dbd0ed4ab", "committedDate": "2020-03-04T01:29:56Z", "message": "Update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996547c53f8bc33821b40b21db811d32a0912821", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/996547c53f8bc33821b40b21db811d32a0912821", "committedDate": "2020-03-04T01:30:27Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3640a70d78106650d817a1da8b500299d3289b1", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/c3640a70d78106650d817a1da8b500299d3289b1", "committedDate": "2020-03-04T01:30:27Z", "message": "fix job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b6cdec2bac7324f2effce42a0987d4529bcd83b", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/8b6cdec2bac7324f2effce42a0987d4529bcd83b", "committedDate": "2020-03-04T01:30:27Z", "message": "Fix merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d041e917f0ff03f5970b5ba8db5a5df830747d", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/64d041e917f0ff03f5970b5ba8db5a5df830747d", "committedDate": "2020-03-04T01:30:27Z", "message": "asdf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ddff6720959a6b3f5e95ea93a803db1a45f12c3", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2ddff6720959a6b3f5e95ea93a803db1a45f12c3", "committedDate": "2020-03-04T01:30:27Z", "message": "Federated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc917bf1d53c1760d6e13e95e6cbed03c840aad", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/8fc917bf1d53c1760d6e13e95e6cbed03c840aad", "committedDate": "2020-03-04T01:31:14Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e781b6a4953a4ebd1b7ec6c6b124b86646747bde", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e781b6a4953a4ebd1b7ec6c6b124b86646747bde", "committedDate": "2020-03-04T01:36:35Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af42da82f6406e27687711cf6a22e8f67506701d", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/af42da82f6406e27687711cf6a22e8f67506701d", "committedDate": "2020-03-04T01:26:45Z", "message": "fix tests"}, "afterCommit": {"oid": "e781b6a4953a4ebd1b7ec6c6b124b86646747bde", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/e781b6a4953a4ebd1b7ec6c6b124b86646747bde", "committedDate": "2020-03-04T01:36:35Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af0a015bf158b97ccf06dc038de944ab7d56da5", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2af0a015bf158b97ccf06dc038de944ab7d56da5", "committedDate": "2020-03-04T01:59:12Z", "message": "conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/2fb55e2c2cd089386dd803576c9c224aaf803fa3", "committedDate": "2020-03-04T02:30:19Z", "message": "remove"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDk2MzYx", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-368496361", "createdAt": "2020-03-04T04:21:43Z", "commit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoyMTo0M1rOFxflMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo0MjoyMFrOFxf08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTk2OQ==", "bodyText": "Typo in exception message. Should be RealmAwareZkClientConfig", "url": "https://github.com/apache/helix/pull/819#discussion_r387441969", "createdAt": "2020-03-04T04:21:43Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -56,32 +59,42 @@\n   private final ZkClient _rawZkClient;\n   private final MetadataStoreRoutingData _metadataStoreRoutingData;\n   private final String _zkRealmShardingKey;\n-  private final String _zkRealmAddress;\n \n-  // TODO: Remove MetadataStoreRoutingData from constructor\n+  /**\n+   * DedicatedZkClient connects to a single ZK realm and supports full ZkClient functionalities\n+   * such as CRUD, change callback, and ephemeral operations for a single ZkRealmShardingKey.\n+   * @param connectionConfig\n+   * @param clientConfig\n+   * @throws IOException\n+   * @throws InvalidRoutingDataException\n+   */\n   public DedicatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n-      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n     if (connectionConfig == null) {\n       throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n-    _zkRealmShardingKey = connectionConfig.getZkRealmShardingKey();\n+    if (clientConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MjQ3NQ==", "bodyText": "Nit, Shall we move this condition check out of try...catch block? I understand it not may be unrelated to your change. But since you already touch it and change the name :)\nOne more thing: This could throw NPE. _zkRealmShardingKey could be null if it is not set in connectionConfig when the user expects it to be a multi-realm mode by default.", "url": "https://github.com/apache/helix/pull/819#discussion_r387442475", "createdAt": "2020-03-04T04:24:22Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/DedicatedZkClient.java", "diffHunk": "@@ -457,17 +470,17 @@ public PathBasedZkSerializer getZkSerializer() {\n    * @return\n    */\n   private void checkIfPathContainsShardingKey(String path) {\n-    // TODO: replace with the singleton MetadataStoreRoutingData\n     try {\n-      String zkRealmForPath = _metadataStoreRoutingData.getMetadataStoreRealm(path);\n-      if (!_zkRealmAddress.equals(zkRealmForPath)) {\n-        throw new IllegalArgumentException(\"Given path: \" + path + \"'s ZK realm: \" + zkRealmForPath\n-            + \" does not match the ZK realm: \" + _zkRealmAddress + \" and sharding key: \"\n-            + _zkRealmShardingKey + \" for this DedicatedZkClient!\");\n+      String targetShardingKey = _metadataStoreRoutingData.getShardingKeyInPath(path);\n+      if (!_zkRealmShardingKey.equals(targetShardingKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTE2Ng==", "bodyText": "Like I said, personally, hiding failure type in this case is more user-friendly than floating these exceptions up. And I also understand and respect your opinion.\nI am not sure how Helix Java APIs could handle these 2 exceptions differently when constructing this FederatedZkClient. Regarding a few other users, we could get opinions from them. I will be OK if we can get options from other users/committers and they think floating exceptions are better :)", "url": "https://github.com/apache/helix/pull/819#discussion_r387445166", "createdAt": "2020-03-04T04:37:58Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,17 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n-    }\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNzU3OA=="}, "originalCommit": {"oid": "215ecf7549b27ff4c02c3e7763c0c7381154eb38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTQxNQ==", "bodyText": "Client config in message.", "url": "https://github.com/apache/helix/pull/819#discussion_r387445415", "createdAt": "2020-03-04T04:39:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/client/FederatedZkClient.java", "diffHunk": "@@ -80,19 +83,27 @@\n   private PathBasedZkSerializer _pathBasedZkSerializer;\n \n   // TODO: support capacity of ZkClient number in one FederatedZkClient and do garbage collection.\n-  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkClientConfig clientConfig,\n-      MetadataStoreRoutingData metadataStoreRoutingData) {\n-    if (metadataStoreRoutingData == null) {\n-      throw new IllegalArgumentException(\"MetadataStoreRoutingData cannot be null!\");\n+  public FederatedZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig)\n+      throws IOException, InvalidRoutingDataException {\n+    if (connectionConfig == null) {\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");\n     }\n     if (clientConfig == null) {\n-      throw new IllegalArgumentException(\"Client config cannot be null!\");\n+      throw new IllegalArgumentException(\"RealmAwareZkConnectionConfig cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjAwMg==", "bodyText": "static final?", "url": "https://github.com/apache/helix/pull/819#discussion_r387446002", "createdAt": "2020-03-04T04:42:20Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/constant/TestConstants.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.zookeeper.constant;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * Constants to be used for testing.\n+ */\n+public class TestConstants {\n+  // ZK hostname prefix and port to be used throughout the zookeeper-api module\n+  public static final String ZK_PREFIX = \"localhost:\";\n+  public static final int ZK_START_PORT = 2127;\n+\n+  // Based on the ZK hostname constants, construct a set of fake routing data mappings\n+  public static Map<String, Collection<String>> FAKE_ROUTING_DATA = ImmutableMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTE4Njcx", "url": "https://github.com/apache/helix/pull/819#pullrequestreview-368518671", "createdAt": "2020-03-04T05:50:07Z", "commit": {"oid": "2fb55e2c2cd089386dd803576c9c224aaf803fa3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70e8460d9bc32fc555707429e2bdced9e1a154f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/f70e8460d9bc32fc555707429e2bdced9e1a154f", "committedDate": "2020-03-04T07:34:53Z", "message": "addresscomments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}