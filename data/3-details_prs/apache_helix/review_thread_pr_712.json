{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODM0Mzkw", "number": 712, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo0ODo0NFrODcZYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyODozMFrODdFPhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTAyNTU5OnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo0ODo0NFrOFkb0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzoxMjowMFrOFkcH8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODgzNQ==", "bodyText": "If someone expands the test environments and adds another environment, based on pom.xml content alone he/she might add <multiZk>false</multiZk>, then the if statement in ZkTestBase.java will be incorrectly triggered. Using boolean for the if statement seems better to me.", "url": "https://github.com/apache/helix/pull/712#discussion_r373748835", "createdAt": "2020-02-01T01:48:44Z", "author": {"login": "NealSun96"}, "path": "pom.xml", "diffHunk": "@@ -633,11 +633,6 @@ under the License.\n               </goals>\n               <id>default-test</id>\n               <phase>test</phase>\n-              <configuration>\n-                <systemPropertyVariables>\n-                  <multiZk>false</multiZk>\n-                </systemPropertyVariables>\n-              </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Mzg0MQ==", "bodyText": "Good point! I'll add the explicit check for the string value \"true\".", "url": "https://github.com/apache/helix/pull/712#discussion_r373753841", "createdAt": "2020-02-01T03:12:00Z", "author": {"login": "narendly"}, "path": "pom.xml", "diffHunk": "@@ -633,11 +633,6 @@ under the License.\n               </goals>\n               <id>default-test</id>\n               <phase>test</phase>\n-              <configuration>\n-                <systemPropertyVariables>\n-                  <multiZk>false</multiZk>\n-                </systemPropertyVariables>\n-              </configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODgzNQ=="}, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTAyNjM5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTo1MDoyMVrOFkb01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzoxMjoyM1rOFkcH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODk1MQ==", "bodyText": "Nit: could use values() to close without get() and checking every time.", "url": "https://github.com/apache/helix/pull/712#discussion_r373748951", "createdAt": "2020-02-01T01:50:21Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -154,8 +215,29 @@ public void afterSuite() throws IOException {\n       }\n     }\n \n+    // Close ZK-related resources\n+    _gSetupTool.close();\n+    _baseAccessor.close();\n     _gZkClient.close();\n     TestHelper.stopZkServer(_zkServer);\n+\n+    // If there are multiple ZooKeepers, close them all\n+    if (System.getProperty(MULTI_ZK_PROPERTY_KEY) != null) {\n+      for (int i = 0; i < _numZk; i++) {\n+        if (_baseDataAccessorMap != null && _baseDataAccessorMap.containsKey(i)) {\n+          _baseDataAccessorMap.get(i).close();\n+        }\n+        if (_clusterSetupMap != null && _clusterSetupMap.containsKey(i)) {\n+          _clusterSetupMap.get(i).close();\n+        }\n+        if (_helixZkClientMap != null && _helixZkClientMap.containsKey(i)) {\n+          _helixZkClientMap.get(i).close();\n+        }\n+        if (_zkServerMap != null && _zkServerMap.containsKey(i)) {\n+          TestHelper.stopZkServer(_zkServerMap.get(i));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Mzg0OQ==", "bodyText": "Null checks are necessary, and your point about .values() is a matter of style and I think either way is fine.", "url": "https://github.com/apache/helix/pull/712#discussion_r373753849", "createdAt": "2020-02-01T03:12:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -154,8 +215,29 @@ public void afterSuite() throws IOException {\n       }\n     }\n \n+    // Close ZK-related resources\n+    _gSetupTool.close();\n+    _baseAccessor.close();\n     _gZkClient.close();\n     TestHelper.stopZkServer(_zkServer);\n+\n+    // If there are multiple ZooKeepers, close them all\n+    if (System.getProperty(MULTI_ZK_PROPERTY_KEY) != null) {\n+      for (int i = 0; i < _numZk; i++) {\n+        if (_baseDataAccessorMap != null && _baseDataAccessorMap.containsKey(i)) {\n+          _baseDataAccessorMap.get(i).close();\n+        }\n+        if (_clusterSetupMap != null && _clusterSetupMap.containsKey(i)) {\n+          _clusterSetupMap.get(i).close();\n+        }\n+        if (_helixZkClientMap != null && _helixZkClientMap.containsKey(i)) {\n+          _helixZkClientMap.get(i).close();\n+        }\n+        if (_zkServerMap != null && _zkServerMap.containsKey(i)) {\n+          TestHelper.stopZkServer(_zkServerMap.get(i));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODk1MQ=="}, "originalCommit": {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODIwNDAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyNjowNVrOFleqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToxMDozMFrOFlgDxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDAwMA==", "bodyText": "Instead of multiple lists, can we have a class like a tuple in Python to hold the related objects? That would be much easier to use comparing if I need to remember the index in every test case.", "url": "https://github.com/apache/helix/pull/712#discussion_r374844000", "createdAt": "2020-02-04T18:26:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";\n+  private static final String ZK_PREFIX = \"localhost:\";\n+  private static final int ZK_START_PORT = 2183;\n   protected static final String CLUSTER_PREFIX = \"CLUSTER\";\n   protected static final String CONTROLLER_CLUSTER_PREFIX = \"CONTROLLER_CLUSTER\";\n   protected final String CONTROLLER_PREFIX = \"controller\";\n   protected final String PARTICIPANT_PREFIX = \"localhost\";\n   private static final long MANUAL_GC_PAUSE = 4000L;\n \n+  /*\n+   * Multiple ZK references\n+   */\n+  protected int _numZk = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Njg4NA==", "bodyText": "Discussed offline.\nMaking this\n\nprotected Map<String, ZkServer> _zkServerMap = new HashMap<>();\nprotected Map<String, HelixZkClient> _helixZkClientMap = new HashMap<>();\nprotected Map<String, ClusterSetup> _clusterSetupMap = new HashMap<>();\nprotected Map<String, BaseDataAccessor> _baseDataAccessorMap = new HashMap<>();\nfor the time being.", "url": "https://github.com/apache/helix/pull/712#discussion_r374866884", "createdAt": "2020-02-04T19:10:30Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";\n+  private static final String ZK_PREFIX = \"localhost:\";\n+  private static final int ZK_START_PORT = 2183;\n   protected static final String CLUSTER_PREFIX = \"CLUSTER\";\n   protected static final String CONTROLLER_CLUSTER_PREFIX = \"CONTROLLER_CLUSTER\";\n   protected final String CONTROLLER_PREFIX = \"controller\";\n   protected final String PARTICIPANT_PREFIX = \"localhost\";\n   private static final long MANUAL_GC_PAUSE = 4000L;\n \n+  /*\n+   * Multiple ZK references\n+   */\n+  protected int _numZk = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDAwMA=="}, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODIwNTA5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyNjoyOFrOFlerGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTowOTo1OVrOFlgCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDE4NQ==", "bodyText": "nit: ZK_ADD = ZK_PREFIX + ZK_START_PORT ?", "url": "https://github.com/apache/helix/pull/712#discussion_r374844185", "createdAt": "2020-02-04T18:26:28Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NjYzNA==", "bodyText": "Changed.", "url": "https://github.com/apache/helix/pull/712#discussion_r374866634", "createdAt": "2020-02-04T19:09:59Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDE4NQ=="}, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODIxMTkxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyODozMFrOFlevVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToxMDo0NFrOFlgENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NTI2OQ==", "bodyText": "These are duplicate code. Can we just repeatedly call startZooKeeper() and return the tuple that I mentioned above for recording?", "url": "https://github.com/apache/helix/pull/712#discussion_r374845269", "createdAt": "2020-02-04T18:28:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -123,8 +136,45 @@ public void beforeSuite() throws Exception {\n     System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n     System.setProperty(SystemPropertyKeys.CONTROLLER_MESSAGE_PURGE_DELAY, \"3000\");\n \n+    // Start an in-memory ZooKeeper\n     _zkServer = TestHelper.startZkServer(ZK_ADDR);\n     AssertJUnit.assertNotNull(_zkServer);\n+    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+    clientConfig.setZkSerializer(new ZNRecordSerializer());\n+    _gZkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR), clientConfig);\n+    _gSetupTool = new ClusterSetup(_gZkClient);\n+    _baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    _numZk++; // Now we have 1 ZK\n+\n+    // If multi-ZooKeeper is enabled, start more ZKs\n+    String multiZkConfig = System.getProperty(MULTI_ZK_PROPERTY_KEY);\n+    if (multiZkConfig != null && multiZkConfig.equalsIgnoreCase(Boolean.TRUE.toString())) {\n+      String numZkFromConfig = System.getProperty(NUM_ZK_PROPERTY_KEY);\n+      if (numZkFromConfig != null) {\n+        try {\n+          int numZkFromConfigInt = Integer.parseInt(numZkFromConfig);\n+          // Initialize maps to track multiple ZK servers\n+          // Initialize maps to track multiple ZK servers\n+          _zkServerMap = new HashMap<>();\n+          _helixZkClientMap = new HashMap<>();\n+          _clusterSetupMap = new HashMap<>();\n+          _baseDataAccessorMap = new HashMap<>();\n+          _zkServerMap.put(0, _zkServer);\n+          _helixZkClientMap.put(0, _gZkClient);\n+          _clusterSetupMap.put(0, _gSetupTool);\n+          _baseDataAccessorMap.put(0, _baseAccessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Njk5OA==", "bodyText": "Removed duplicate code", "url": "https://github.com/apache/helix/pull/712#discussion_r374866998", "createdAt": "2020-02-04T19:10:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -123,8 +136,45 @@ public void beforeSuite() throws Exception {\n     System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n     System.setProperty(SystemPropertyKeys.CONTROLLER_MESSAGE_PURGE_DELAY, \"3000\");\n \n+    // Start an in-memory ZooKeeper\n     _zkServer = TestHelper.startZkServer(ZK_ADDR);\n     AssertJUnit.assertNotNull(_zkServer);\n+    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+    clientConfig.setZkSerializer(new ZNRecordSerializer());\n+    _gZkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR), clientConfig);\n+    _gSetupTool = new ClusterSetup(_gZkClient);\n+    _baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    _numZk++; // Now we have 1 ZK\n+\n+    // If multi-ZooKeeper is enabled, start more ZKs\n+    String multiZkConfig = System.getProperty(MULTI_ZK_PROPERTY_KEY);\n+    if (multiZkConfig != null && multiZkConfig.equalsIgnoreCase(Boolean.TRUE.toString())) {\n+      String numZkFromConfig = System.getProperty(NUM_ZK_PROPERTY_KEY);\n+      if (numZkFromConfig != null) {\n+        try {\n+          int numZkFromConfigInt = Integer.parseInt(numZkFromConfig);\n+          // Initialize maps to track multiple ZK servers\n+          // Initialize maps to track multiple ZK servers\n+          _zkServerMap = new HashMap<>();\n+          _helixZkClientMap = new HashMap<>();\n+          _clusterSetupMap = new HashMap<>();\n+          _baseDataAccessorMap = new HashMap<>();\n+          _zkServerMap.put(0, _zkServer);\n+          _helixZkClientMap.put(0, _gZkClient);\n+          _clusterSetupMap.put(0, _gSetupTool);\n+          _baseDataAccessorMap.put(0, _baseAccessor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NTI2OQ=="}, "originalCommit": {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}