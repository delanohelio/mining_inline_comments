{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTMxNjQ3", "number": 955, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzo0NlrODyJV4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo1NlrODyJm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4NDUxOnYy", "diffSide": "LEFT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzo0NlrOGGBajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo0MDoxNFrOGHFMOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgyMg==", "bodyText": "This if statement shouldn't be deleted. The reasoning is clearly shown in the logging: the callback could be triggered before ZKMetadataStoreDirectory is fully initialized. Removing this if statement leaves the rest of the logic unguarded.", "url": "https://github.com/apache/helix/pull/955#discussion_r408967822", "createdAt": "2020-04-15T16:17:46Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjk4NQ==", "bodyText": "Can you help me understand in what case the callback could be triggered before ZKMetadataStoreDirectory is fully initialized?", "url": "https://github.com/apache/helix/pull/955#discussion_r409022985", "createdAt": "2020-04-15T17:46:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgyMg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTI1MA==", "bodyText": "When the ZkMetadataStoreDirectory is initialized, it initializes ZkRoutingDataReader which subscribe to ZNode changes and calls refreshRoutingData() when an event happens. It's possible that an event comes in before ZkMetadataStoreDirectory finishes initialization, which we don't want to handle.\nThis is my understanding to it. This was introduced to me first by @narendly , and he was also the first to write this statement so he could provide further comments if necessary.", "url": "https://github.com/apache/helix/pull/955#discussion_r409085250", "createdAt": "2020-04-15T19:33:52Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgyMg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA3ODI2NQ==", "bodyText": "@NealSun96 Thanks for the explanation.\nAfter I check the code carefully, I don't see what you said is the case. ZkRoutingDataReader is initialized after the maps are created. So I think this check is safe to remove.", "url": "https://github.com/apache/helix/pull/955#discussion_r410078265", "createdAt": "2020-04-17T08:40:14Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgyMg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5Nzc3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTowOFrOGGBjIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTowOFrOGGBjIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxNw==", "bodyText": "The raw data shouldn't be removed here. The raw data is allowed to contain invalid routing data.", "url": "https://github.com/apache/helix/pull/955#discussion_r408970017", "createdAt": "2020-04-15T16:21:08Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwMTAyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMjowMlrOGGBlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo0NDo1N1rOGHFWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYwMA==", "bodyText": "As you pointed out yesterday, it's better to assign empty data here.", "url": "https://github.com/apache/helix/pull/955#discussion_r408970600", "createdAt": "2020-04-15T16:22:02Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDI3Nw==", "bodyText": "I keep it here because if it is assigned empty data, one other test TestRoutingDataUpdate would fail because it assumes routing namespace is deleted. Let's have more careful discussion about the behavior before we change it here.", "url": "https://github.com/apache/helix/pull/955#discussion_r409024277", "createdAt": "2020-04-15T17:48:42Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYwMA=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTk5Nw==", "bodyText": "My understanding is that you prefer not deleting namespaces, and I agree with your point, so it's safe to change that behavior. We can modify the test cases to reflect that.", "url": "https://github.com/apache/helix/pull/955#discussion_r409085997", "createdAt": "2020-04-15T19:35:14Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYwMA=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MDc5MQ==", "bodyText": "Discussed offline. I've changed to assign an empty map to _realmToShardingKeysMap namespace. And the tests pass.", "url": "https://github.com/apache/helix/pull/955#discussion_r410080791", "createdAt": "2020-04-17T08:44:57Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYwMA=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwMzYyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMjozOFrOGGBnHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo0Njo1MlrOGHFacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAzNg==", "bodyText": "Overall, I think it's more clean to do try {overwriteOldData} catch {eraseOldData} for both blocks of the logic.", "url": "https://github.com/apache/helix/pull/955#discussion_r408971036", "createdAt": "2020-04-15T16:22:38Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n+      return;\n     }\n+\n+    _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+    _routingDataMap.put(namespace, trieRoutingData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTA3Ng==", "bodyText": "My logic here is like a validation first and update. We will discuss the behavior first and make the change.", "url": "https://github.com/apache/helix/pull/955#discussion_r409025076", "createdAt": "2020-04-15T17:49:59Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n+      return;\n     }\n+\n+    _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+    _routingDataMap.put(namespace, trieRoutingData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAzNg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NjQzNA==", "bodyText": "The validation process = the exception. If something is caught it means the data is invalid. So validation will always go first before update.", "url": "https://github.com/apache/helix/pull/955#discussion_r409086434", "createdAt": "2020-04-15T19:36:08Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n+      return;\n     }\n+\n+    _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+    _routingDataMap.put(namespace, trieRoutingData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAzNg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MTkwNw==", "bodyText": "I prefer to catch the exception specifically for this operation trieRoutingData = new TrieRoutingData(rawRoutingData); to make it clean.", "url": "https://github.com/apache/helix/pull/955#discussion_r410081907", "createdAt": "2020-04-17T08:46:52Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -304,42 +314,35 @@ public boolean deleteShardingKey(String namespace, String realm, String sharding\n    */\n   @Override\n   public void refreshRoutingData(String namespace) {\n-    // Safe to ignore the callback if any of the maps are null.\n-    // If routingDataMap is null, then it will be populated by the constructor anyway\n-    // If routingDataMap is not null, then it's safe for the callback function to update it\n-    if (_routingZkAddressMap == null || _realmToShardingKeysMap == null\n-        || _routingDataReaderMap == null || _routingDataWriterMap == null) {\n-      LOG.warn(\n-          \"refreshRoutingData callback called before ZKMetadataStoreDirectory was fully initialized. Skipping refresh!\");\n-      return;\n-    }\n-\n     // Check if namespace exists; otherwise, return as a NOP and log it\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n       return;\n     }\n \n-    // Remove the raw data first in case of failure on creation\n-    _realmToShardingKeysMap.remove(namespace);\n-    // Remove routing data first in case of failure on creation\n-    _routingDataMap.remove(namespace);\n-\n     Map<String, List<String>> rawRoutingData;\n     try {\n       rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n-      _realmToShardingKeysMap.put(namespace, rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n       return;\n     }\n \n+    TrieRoutingData trieRoutingData;\n     try {\n-      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+      trieRoutingData = new TrieRoutingData(rawRoutingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.warn(\"TrieRoutingData is not created for namespace {}\", namespace, e);\n+      _realmToShardingKeysMap.remove(namespace);\n+      _routingDataMap.remove(namespace);\n+      return;\n     }\n+\n+    _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+    _routingDataMap.put(namespace, trieRoutingData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAzNg=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyODIzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo1NlrOGGB3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0Mjo0NlrOGGI3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEyMw==", "bodyText": "The meaning of the block on line 343 is \"ensure that an IllegalStateException is raised and the message is 'Failed to get...'\". Is this block ensuring a IllegalArgumentException is raised? That's not what this test case is testing.", "url": "https://github.com/apache/helix/pull/955#discussion_r408975123", "createdAt": "2020-04-15T16:28:56Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -344,6 +345,10 @@ public void testDataDeletionCallback() throws Exception {\n               + \" contains either empty or invalid routing data!\")) {\n             return false;\n           }\n+        } catch (IllegalArgumentException iae) {\n+          if (!iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMTgxOQ==", "bodyText": "Refreshing routing has a delay. And this is why TestHelper.verify() is used. Before routing is deleted in cached, namespace is still in cache, right? So the request still goes to TrieRouting, and IllegalArgumentException would be thrown because anyKey is invalid. In this case, we should catch the exception and retry, right?\nThe better I think is this. I will update PR.\n    Assert.assertTrue(TestHelper.verify(() -> {\n      for (String namespace : _routingZkAddrMap.keySet()) {\n        try {\n          _metadataStoreDirectory.getMetadataStoreRealm(namespace, \"anyKey\");\n          Assert.fail(\"Should not successfully get routing data\");\n        } catch (IllegalStateException e) {\n          // If other IllegalStateException, it is unexpected and this test should fail.\n          if (!e.getMessage().equals(\"Failed to get metadata store realm: Namespace \" + namespace\n              + \" contains either empty or invalid routing data!\")) {\n            throw e;\n          }\n        } catch (IllegalArgumentException iae) {\n          // If routing data is not yet refreshed, return false and retry.\n          if (iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n            return false;\n          }\n          // If other IllegalArgumentException, it is not expected and this test should fail.\n          throw iae;\n        }\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION));", "url": "https://github.com/apache/helix/pull/955#discussion_r409031819", "createdAt": "2020-04-15T18:01:23Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -344,6 +345,10 @@ public void testDataDeletionCallback() throws Exception {\n               + \" contains either empty or invalid routing data!\")) {\n             return false;\n           }\n+        } catch (IllegalArgumentException iae) {\n+          if (!iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEyMw=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDA0MA==", "bodyText": "I see your point now, thanks for the explanation. Was this test case flaky because of that? This is a very good catch! \ud83d\udc4d\nI think it makes more sense to replace \"anyKey\" with an actual existing key in the routing data; the handling of IllegalArgumentException is only caused by \"anyKey\", and is not what this test case should focus on. My point is that using \"anyKey\" is a mistake. We shouldn't change the test case to accommodate that mistake; we can just correct it by using something like TEST_SHARDING_KEYS.", "url": "https://github.com/apache/helix/pull/955#discussion_r409090040", "createdAt": "2020-04-15T19:42:46Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -344,6 +345,10 @@ public void testDataDeletionCallback() throws Exception {\n               + \" contains either empty or invalid routing data!\")) {\n             return false;\n           }\n+        } catch (IllegalArgumentException iae) {\n+          if (!iae.getMessage().equals(\"Provided path is not a valid Zookeeper path: anyKey\")) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEyMw=="}, "originalCommit": {"oid": "290cddcc6f715353e20c8f75bac6b2412e74981c"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1450, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}