{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTM3NDcx", "number": 858, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMTo0NVrODlQGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMzo0MVrODlQH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg3NjkwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMTo0NVrOFyCknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1MDowNVrOFyD6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTI2MQ==", "bodyText": "This won't make things fail, will it? Since we are doing a continue, I don't think this would be necessary.", "url": "https://github.com/apache/helix/pull/858#discussion_r388015261", "createdAt": "2020-03-05T00:31:45Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "diffHunk": "@@ -266,6 +269,9 @@ public static boolean isInstanceStable(HelixDataAccessor dataAccessor, String in\n       IdealState idealState = dataAccessor.getProperty(keyBuilder.idealStates(idealStateName));\n       if (idealState == null || !idealState.isEnabled() || !idealState.isValid()\n           || TaskConstants.STATE_MODEL_NAME.equals(idealState.getStateModelDefRef())) {\n+        _logger.warn(\n+            \"idealState is either null, not enabled, not valid, or has Task as stateModelDefRef. IdealState: {}\",\n+            instanceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyMjc1Mg==", "bodyText": "While this block doesn't fail the code, it's triggered in situations where idealState is null or is invalid. Just like the logs I did in InstanceServiceImpl.java, I think it's a good idea to log these unusual situations for debug purposes.", "url": "https://github.com/apache/helix/pull/858#discussion_r388022752", "createdAt": "2020-03-05T00:57:42Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "diffHunk": "@@ -266,6 +269,9 @@ public static boolean isInstanceStable(HelixDataAccessor dataAccessor, String in\n       IdealState idealState = dataAccessor.getProperty(keyBuilder.idealStates(idealStateName));\n       if (idealState == null || !idealState.isEnabled() || !idealState.isValid()\n           || TaskConstants.STATE_MODEL_NAME.equals(idealState.getStateModelDefRef())) {\n+        _logger.warn(\n+            \"idealState is either null, not enabled, not valid, or has Task as stateModelDefRef. IdealState: {}\",\n+            instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTI2MQ=="}, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyODMzMg==", "bodyText": "This block mostly exists to filter out non-existing IdealStates and Task Framework idealStates. The reason I pointed this out is because I don't think it will add much in debugging and it will just end up making the log file large. Let's not log this.", "url": "https://github.com/apache/helix/pull/858#discussion_r388028332", "createdAt": "2020-03-05T01:17:03Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "diffHunk": "@@ -266,6 +269,9 @@ public static boolean isInstanceStable(HelixDataAccessor dataAccessor, String in\n       IdealState idealState = dataAccessor.getProperty(keyBuilder.idealStates(idealStateName));\n       if (idealState == null || !idealState.isEnabled() || !idealState.isValid()\n           || TaskConstants.STATE_MODEL_NAME.equals(idealState.getStateModelDefRef())) {\n+        _logger.warn(\n+            \"idealState is either null, not enabled, not valid, or has Task as stateModelDefRef. IdealState: {}\",\n+            instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTI2MQ=="}, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTczMA==", "bodyText": "I mostly want to ensure the case of idealState == null is caught. That situation shouldn't happen.\nRegardless, I don't have a strong opinion about this.", "url": "https://github.com/apache/helix/pull/858#discussion_r388035730", "createdAt": "2020-03-05T01:44:46Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "diffHunk": "@@ -266,6 +269,9 @@ public static boolean isInstanceStable(HelixDataAccessor dataAccessor, String in\n       IdealState idealState = dataAccessor.getProperty(keyBuilder.idealStates(idealStateName));\n       if (idealState == null || !idealState.isEnabled() || !idealState.isValid()\n           || TaskConstants.STATE_MODEL_NAME.equals(idealState.getStateModelDefRef())) {\n+        _logger.warn(\n+            \"idealState is either null, not enabled, not valid, or has Task as stateModelDefRef. IdealState: {}\",\n+            instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTI2MQ=="}, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzIxNA==", "bodyText": "You're not catching anything here, right? Also if IdealState is null, you skip over that resource, right? Would that ever cause a problem?", "url": "https://github.com/apache/helix/pull/858#discussion_r388037214", "createdAt": "2020-03-05T01:50:05Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/util/InstanceValidationUtil.java", "diffHunk": "@@ -266,6 +269,9 @@ public static boolean isInstanceStable(HelixDataAccessor dataAccessor, String in\n       IdealState idealState = dataAccessor.getProperty(keyBuilder.idealStates(idealStateName));\n       if (idealState == null || !idealState.isEnabled() || !idealState.isValid()\n           || TaskConstants.STATE_MODEL_NAME.equals(idealState.getStateModelDefRef())) {\n+        _logger.warn(\n+            \"idealState is either null, not enabled, not valid, or has Task as stateModelDefRef. IdealState: {}\",\n+            instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTI2MQ=="}, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg4MDk1OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMzo0MVrOFyCm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDo1ODowOVrOFyDCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTg1OA==", "bodyText": "LiveInstance?", "url": "https://github.com/apache/helix/pull/858#discussion_r388015858", "createdAt": "2020-03-05T00:33:41Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -101,9 +103,15 @@ public InstanceInfo getInstanceInfo(String clusterId, String instanceName,\n             _dataAccessor.keyBuilder().currentState(instanceName, sessionId, resourceName));\n         if (currentState != null && currentState.getPartitionStateMap() != null) {\n           partitions.addAll(currentState.getPartitionStateMap().keySet());\n+        } else {\n+          LOG.warn(\n+              \"Current state is either null or partitionStateMap is missing. InstanceName: {}, SessionId: {}, ResourceName: {}\",\n+              instanceName, sessionId, resourceName);\n         }\n       }\n       instanceInfoBuilder.partitions(partitions);\n+    } else {\n+      LOG.warn(\"Missing instance config for {}\", instanceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyMjg3Ng==", "bodyText": "Oops, let me fix that.", "url": "https://github.com/apache/helix/pull/858#discussion_r388022876", "createdAt": "2020-03-05T00:58:09Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -101,9 +103,15 @@ public InstanceInfo getInstanceInfo(String clusterId, String instanceName,\n             _dataAccessor.keyBuilder().currentState(instanceName, sessionId, resourceName));\n         if (currentState != null && currentState.getPartitionStateMap() != null) {\n           partitions.addAll(currentState.getPartitionStateMap().keySet());\n+        } else {\n+          LOG.warn(\n+              \"Current state is either null or partitionStateMap is missing. InstanceName: {}, SessionId: {}, ResourceName: {}\",\n+              instanceName, sessionId, resourceName);\n         }\n       }\n       instanceInfoBuilder.partitions(partitions);\n+    } else {\n+      LOG.warn(\"Missing instance config for {}\", instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTg1OA=="}, "originalCommit": {"oid": "77512846d2b9cd6a0f5b55f47445fa3f53849a77"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1338, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}