{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDI2NDgw", "number": 1197, "title": "Support option to skip direct ZK read for health check API", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes (#1196)\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis change support the option \"skipZKRead\" in multiple health check API call.\nIf the option is true, Helix will directly query custom partition health from provided source instead of ZK read.\nTests\n\n The following tests are written for this issue:\n\nTestInstanceService.testCustomPartitionCheckWithSkipZKRead\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 164, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 53.755 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 164, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:00 min\n[INFO] Finished at: 2020-07-31T12:17:50-07:00\n[INFO] Final Memory: 30M/838M\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-31T19:23:56Z", "url": "https://github.com/apache/helix/pull/1197", "merged": true, "mergeCommit": {"oid": "ccc5ccfab46fe195c348dae068d5006736c2ccf8"}, "closed": true, "closedAt": "2020-08-06T18:46:27Z", "author": {"login": "junkaixue"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6ZPs6AH2gAyNDYwNDI2NDgwOmI5ZmMwNWI5NzYyZDg4MDU2ZjIyYzY4ZjY0ZGM5OGI3ZDcyZmFkMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8TyqIAFqTQ2Mjc1NzU2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a", "author": {"user": {"login": "junkaixue", "name": "Junkai Xue"}}, "url": "https://github.com/apache/helix/commit/b9fc05b9762d88056f22c68f64dc98b7d72fad0a", "committedDate": "2020-07-31T19:18:28Z", "message": "Support option to skip direct ZK read for health check API\n\nThis change support the option \"skipZKRead\" in multiple health check API call.\nIf the option is true, Helix will directly query custom partition health from provided source instead of ZK read."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjIyMTgx", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459622181", "createdAt": "2020-08-02T05:50:28Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNTo1MDoyOFrOG6ieig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwNjozNDoxM1rOG6irpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNTQ2Ng==", "bodyText": "Could it use Interface instead: ZKHelixDataAccessor -> HelixDataAccessor?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464035466", "createdAt": "2020-08-02T05:50:28Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -64,22 +65,38 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {\n     _restClient = CustomRestClientFactory.get();\n   }\n \n+  public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClient customRestClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNTYyMQ==", "bodyText": "Not used in this file?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464035621", "createdAt": "2020-08-02T05:52:37Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -19,6 +19,7 @@\n  * under the License.\n  */\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzNzk0Nw==", "bodyText": "Remove these unused imports?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464037947", "createdAt": "2020-08-02T06:22:50Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestPerInstanceAccessor.java", "diffHunk": "@@ -33,9 +33,15 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import org.apache.helix.ConfigAccessor;\n import org.apache.helix.HelixDataAccessor;\n import org.apache.helix.HelixException;\n import org.apache.helix.TestHelper;\n+import org.apache.helix.model.RESTConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAzODgyMQ==", "bodyText": "Nit: since parameter is boolean type, Boolean.valueOf -> Boolean.parseBoolean()?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464038821", "createdAt": "2020-08-02T06:34:13Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java", "diffHunk": "@@ -172,7 +172,7 @@ public Response instancesOperations(@PathParam(\"clusterId\") String clusterId,\n         admin.enableInstance(clusterId, enableInstances, false);\n         break;\n       case stoppable:\n-        return batchGetStoppableInstances(clusterId, node);\n+        return batchGetStoppableInstances(clusterId, node, Boolean.valueOf(skipZKRead));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYxMTgz", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459761183", "createdAt": "2020-08-03T05:47:41Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0Nzo0MVrOG6s2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0Nzo0MVrOG6s2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTMyNQ==", "bodyText": "Add a JavaDoc for a public method. Here, we should explain what skipZkRead parameter does, and its implications.", "url": "https://github.com/apache/helix/pull/1197#discussion_r464205325", "createdAt": "2020-08-03T05:47:41Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -64,22 +65,38 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {\n     _restClient = CustomRestClientFactory.get();\n   }\n \n+  public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClient customRestClient) {\n+    super(dataAccessor);\n+    _restClient = customRestClient;\n+  }\n+\n   public Map<String, Map<String, Boolean>> getAllPartitionsHealthOnLiveInstance(\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n+    return getAllPartitionsHealthOnLiveInstance(restConfig, customPayLoads, false);\n+  }\n+\n+  public Map<String, Map<String, Boolean>> getAllPartitionsHealthOnLiveInstance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYxNTkx", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459761591", "createdAt": "2020-08-03T05:49:01Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0OTowMVrOG6s3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0OTowMVrOG6s3XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTY2MA==", "bodyText": "I suggest we use something like onlyUseZkAsSource or something as the boolean flag, and use the same name all throughout since having skipZkRead and requireFullRead here and there could be confusing down the road.", "url": "https://github.com/apache/helix/pull/1197#discussion_r464205660", "createdAt": "2020-08-03T05:49:01Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -101,7 +118,7 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {\n   }\n \n   private Map<String, Boolean> getPartitionsHealth(String instance, ZNRecord partitionHealthRecord,\n-      RESTConfig restConfig, Map<String, String> customPayLoads) {\n+      RESTConfig restConfig, Map<String, String> customPayLoads, boolean requireFullRead) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYxODE4", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459761818", "createdAt": "2020-08-03T05:49:44Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0OTo0NVrOG6s4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo0OTo0NVrOG6s4FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTg0NA==", "bodyText": "Suggest we consolidate the nomenclature for the boolean flag (as explained above).", "url": "https://github.com/apache/helix/pull/1197#discussion_r464205844", "createdAt": "2020-08-03T05:49:45Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java", "diffHunk": "@@ -144,7 +144,7 @@ public Response getAllInstances(@PathParam(\"clusterId\") String clusterId,\n \n   @POST\n   public Response instancesOperations(@PathParam(\"clusterId\") String clusterId,\n-      @QueryParam(\"command\") String command, String content) {\n+      @QueryParam(\"skipZKRead\") String skipZKRead, @QueryParam(\"command\") String command, String content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYxOTUx", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459761951", "createdAt": "2020-08-03T05:50:09Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MDoxMFrOG6s4hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MDoxMFrOG6s4hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTk1Nw==", "bodyText": "Nit: format?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464205957", "createdAt": "2020-08-03T05:50:10Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/InstancesAccessor.java", "diffHunk": "@@ -218,7 +218,8 @@ private Response batchGetStoppableInstances(String clusterId, JsonNode node) thr\n       ObjectNode failedStoppableInstances = result.putObject(\n           InstancesAccessor.InstancesProperties.instance_not_stoppable_with_reasons.name());\n       InstanceService instanceService =\n-          new InstanceServiceImpl(new HelixDataAccessorWrapper((ZKHelixDataAccessor) getDataAccssor(clusterId)), getConfigAccessor());\n+          new InstanceServiceImpl(new HelixDataAccessorWrapper((ZKHelixDataAccessor) getDataAccssor(clusterId)), getConfigAccessor(),\n+              skipZKRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYyMjQy", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459762242", "createdAt": "2020-08-03T05:51:07Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MTowN1rOG6s5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MTowN1rOG6s5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNjE5Ng==", "bodyText": "Should this field be final?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464206196", "createdAt": "2020-08-03T05:51:07Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -61,19 +61,32 @@\n   private final HelixDataAccessorWrapper _dataAccessor;\n   private final ConfigAccessor _configAccessor;\n   private final CustomRestClient _customRestClient;\n+  private boolean _skipZKRead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYyNDAx", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459762401", "createdAt": "2020-08-03T05:51:39Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MTo0MFrOG6s6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MTo0MFrOG6s6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNjM0Nw==", "bodyText": "Could we remove this constructor since you added a more comprehensive one below?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464206347", "createdAt": "2020-08-03T05:51:40Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/service/InstanceServiceImpl.java", "diffHunk": "@@ -61,19 +61,32 @@\n   private final HelixDataAccessorWrapper _dataAccessor;\n   private final ConfigAccessor _configAccessor;\n   private final CustomRestClient _customRestClient;\n+  private boolean _skipZKRead;\n \n   public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor) {\n     _dataAccessor = dataAccessor;\n     _configAccessor = configAccessor;\n     _customRestClient = CustomRestClientFactory.get();\n   }\n \n+  public InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor, boolean skipZKRead) {\n+    this(dataAccessor,configAccessor);\n+    this._skipZKRead = skipZKRead;\n+  }\n+\n   @VisibleForTesting\n   InstanceServiceImpl(HelixDataAccessorWrapper dataAccessor, ConfigAccessor configAccessor,\n       CustomRestClient customRestClient) {\n+    this(dataAccessor, configAccessor, customRestClient, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYyNzE1", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459762715", "createdAt": "2020-08-03T05:52:42Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1Mjo0MlrOG6s7GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1Mjo0MlrOG6s7GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNjYxNw==", "bodyText": "Typo: siblingInstance", "url": "https://github.com/apache/helix/pull/1197#discussion_r464206617", "createdAt": "2020-08-03T05:52:42Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/service/TestInstanceService.java", "diffHunk": "@@ -140,6 +151,70 @@ public void testGetInstanceStoppableCheckConnectionRefused() throws IOException\n     Assert.assertEquals(actual.getFailedChecks().get(0), expectedFailedCheck);\n   }\n \n+  @Test\n+  public void testCustomPartitionCheckWithSkipZKRead() throws IOException {\n+    // Let ZK result is health, but http request is unhealthy.\n+    // We expect the check fail if we skipZKRead.\n+\n+    String testPartition = \"PARTITION_0\";\n+    String slibilingInstance = \"instance0.linkedin.com_1236\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzYyODQ2", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-459762846", "createdAt": "2020-08-03T05:53:07Z", "commit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MzowOFrOG6s7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1MzowOFrOG6s7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNjcyMA==", "bodyText": "Why does this jsonContent need multiple string concatenations?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464206720", "createdAt": "2020-08-03T05:53:08Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/service/TestInstanceService.java", "diffHunk": "@@ -140,6 +151,70 @@ public void testGetInstanceStoppableCheckConnectionRefused() throws IOException\n     Assert.assertEquals(actual.getFailedChecks().get(0), expectedFailedCheck);\n   }\n \n+  @Test\n+  public void testCustomPartitionCheckWithSkipZKRead() throws IOException {\n+    // Let ZK result is health, but http request is unhealthy.\n+    // We expect the check fail if we skipZKRead.\n+\n+    String testPartition = \"PARTITION_0\";\n+    String slibilingInstance = \"instance0.linkedin.com_1236\";\n+    String jsonContent = \"{\\n\" + \"   \\\"param1\\\": \\\"value1\\\",\\n\" + \"\\\"param2\\\": \\\"value2\\\"\\n\" + \"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc05b9762d88056f22c68f64dc98b7d72fad0a"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a35971916d24868dfd5519214e409009ea01b11c", "author": {"user": {"login": "junkaixue", "name": "Junkai Xue"}}, "url": "https://github.com/apache/helix/commit/a35971916d24868dfd5519214e409009ea01b11c", "committedDate": "2020-08-03T18:38:24Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMzQ4NzI3", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-460348727", "createdAt": "2020-08-03T21:20:10Z", "commit": {"oid": "a35971916d24868dfd5519214e409009ea01b11c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMDoxMFrOG7JGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMDoxMFrOG7JGTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODIzOA==", "bodyText": "Why we cannot combine this case together with the case where skipZKRead is set to true? Is that because backward compatibility make it harder to code?", "url": "https://github.com/apache/helix/pull/1197#discussion_r464668238", "createdAt": "2020-08-03T21:20:10Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/common/HelixDataAccessorWrapper.java", "diffHunk": "@@ -64,24 +63,47 @@ public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor) {\n     _restClient = CustomRestClientFactory.get();\n   }\n \n+  public HelixDataAccessorWrapper(ZKHelixDataAccessor dataAccessor, CustomRestClient customRestClient) {\n+    super(dataAccessor);\n+    _restClient = customRestClient;\n+  }\n+\n   public Map<String, Map<String, Boolean>> getAllPartitionsHealthOnLiveInstance(\n       RESTConfig restConfig, Map<String, String> customPayLoads) {\n+    return getAllPartitionsHealthOnLiveInstance(restConfig, customPayLoads, false);\n+  }\n+\n+  /**\n+   * Retrieve partition health status for each live instances combined with reading health partition report from ZK\n+   * and customized REST API call.\n+   *\n+   * @param restConfig        restConfig for the cluster contains customize REST API endpoint\n+   * @param customPayLoads    user passed in customized payloads\n+   * @param skipZKRead        skip the ZK read if this flag is true\n+   * @return                  A map of instance -> partition -> healthy or not (boolean).\n+   */\n+  public Map<String, Map<String, Boolean>> getAllPartitionsHealthOnLiveInstance(\n+      RESTConfig restConfig, Map<String, String> customPayLoads, boolean skipZKRead) {\n     // Only checks the instances are online with valid reports\n     List<String> liveInstances = getChildNames(keyBuilder().liveInstances());\n     // Make a parallel batch call for getting all healthreports from ZK.\n-    List<HelixProperty> zkHealthReports = getProperty(liveInstances.stream()\n-        .map(instance -> keyBuilder().healthReport(instance, PARTITION_HEALTH_KEY))\n-        .collect(Collectors.toList()), false);\n+    List<HelixProperty> zkHealthReports;\n+    if (!skipZKRead) {\n+      zkHealthReports = getProperty(liveInstances.stream()\n+          .map(instance -> keyBuilder().healthReport(instance, PARTITION_HEALTH_KEY))\n+          .collect(Collectors.toList()), false);\n+    } else {\n+      zkHealthReports =\n+          liveInstances.stream().map(instance -> new HelixProperty(instance)).collect(Collectors.toList());\n+    }\n     Map<String, Future<Map<String, Boolean>>> parallelTasks = new HashMap<>();\n     for (int i = 0; i < liveInstances.size(); i++) {\n       String liveInstance = liveInstances.get(i);\n-      Optional<ZNRecord> maybeHealthRecord =\n-          Optional.ofNullable(zkHealthReports.get(i)).map(HelixProperty::getRecord);\n-      parallelTasks.put(liveInstance,\n-          POOL.submit(() -> maybeHealthRecord\n-              .map(record -> getPartitionsHealth(liveInstance, record, restConfig, customPayLoads))\n-              .orElseGet(() -> getHealthStatusFromRest(liveInstance, Collections.emptyList(),\n-                  restConfig, customPayLoads))));\n+      Optional<ZNRecord> maybeHealthRecord = Optional.ofNullable(zkHealthReports.get(i)).map(HelixProperty::getRecord);\n+      parallelTasks.put(liveInstance, POOL.submit(() -> maybeHealthRecord.map(\n+          record -> getPartitionsHealthFromCustomAPI(liveInstance, record, restConfig, customPayLoads, skipZKRead))\n+          .orElseGet(\n+              () -> getHealthStatusFromRest(liveInstance, Collections.emptyList(), restConfig, customPayLoads))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35971916d24868dfd5519214e409009ea01b11c"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTAwMTY2", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-462100166", "createdAt": "2020-08-05T23:58:05Z", "commit": {"oid": "a35971916d24868dfd5519214e409009ea01b11c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzU3NTYw", "url": "https://github.com/apache/helix/pull/1197#pullrequestreview-462757560", "createdAt": "2020-08-06T18:05:04Z", "commit": {"oid": "a35971916d24868dfd5519214e409009ea01b11c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4610, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}