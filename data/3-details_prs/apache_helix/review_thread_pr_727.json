{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjc3ODAw", "number": 727, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoxNjozMlrODdlSHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxNDoxOVrODepATQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzQ2MTQwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoxNjozMlrOFmRJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMzoyNzo0OFrOFnXqaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTI0OA==", "bodyText": "Fundamentally, I think this is not an efficient way for purpose of control of centralized work. This may increase the traffic to ZK.\nIt will be better to work as Helix leader controller. One of the REST server become write REST server (acquire the lock once). Write request to read-only server forward the request to write server for write purpose.", "url": "https://github.com/apache/helix/pull/727#discussion_r375671248", "createdAt": "2020-02-06T07:16:32Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.DistributedLock;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLock;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final DistributedLock _routingDataLock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff9c2ed7eeb861d707f4c019c4ec88fad627182"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NTUwMg==", "bodyText": "@dasahcc\nI agree that making Helix API service (Helix REST) an Helix application is a clever solution, but I have some concerns about that approach - wouldn't we be creating a circular dependency? As in, Helix cluster has problems, which causes problems with REST's single writer invariant, and you need to use REST endpoints to fix Helix cluster but REST has problems... and so on.\nAlso, there was an agreement on this approach with users of Helix because we have an assumption that write operations are rare. Ideally, all operations provided by the writer would be ACL-ed and will only be done by admin. In that sense, I believe this is an appropriate approach since it is simple, self-contained without any other dependency (say Helix controller), and it follows the distributed lock recipe that ZooKeeper is very well-known and tested for.", "url": "https://github.com/apache/helix/pull/727#discussion_r375675502", "createdAt": "2020-02-06T07:31:05Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.DistributedLock;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLock;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final DistributedLock _routingDataLock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTI0OA=="}, "originalCommit": {"oid": "cff9c2ed7eeb861d707f4c019c4ec88fad627182"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyNjQ3NQ==", "bodyText": "Update: using distributed leader election.", "url": "https://github.com/apache/helix/pull/727#discussion_r376826475", "createdAt": "2020-02-09T23:27:48Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.DistributedLock;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLock;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final DistributedLock _routingDataLock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTI0OA=="}, "originalCommit": {"oid": "cff9c2ed7eeb861d707f4c019c4ec88fad627182"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTc2MTEwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzo1MzoxMlrOFnNgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDowMzo0MlrOFnNomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1OTk4Mw==", "bodyText": "Did you mean to get the hostname here instead of using the dummy hostname?", "url": "https://github.com/apache/helix/pull/727#discussion_r376659983", "createdAt": "2020-02-07T23:53:12Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MjE2OQ==", "bodyText": "This item is a TODO: I'll have to get this from Systems property. Dummy is good for now.", "url": "https://github.com/apache/helix/pull/727#discussion_r376662169", "createdAt": "2020-02-08T00:03:42Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1OTk4Mw=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTc2NTYzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzo1NjoxN1rOFnNitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDowNDozMVrOFnNpSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MDY2MQ==", "bodyText": "Can you create a variable for the path so you don't need to repeatedly type it out?", "url": "https://github.com/apache/helix/pull/727#discussion_r376660661", "createdAt": "2020-02-07T23:56:17Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MjM0NA==", "bodyText": "Will do.", "url": "https://github.com/apache/helix/pull/727#discussion_r376662344", "createdAt": "2020-02-08T00:04:31Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MDY2MQ=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTc4Mzk2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMDowNVrOFnNtbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo1MTozNlrOFnXeaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MzQwNg==", "bodyText": "try catch so no need to check if the path exists?", "url": "https://github.com/apache/helix/pull/727#discussion_r376663406", "createdAt": "2020-02-08T00:10:05Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord =\n+            _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        if (!_zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {\n+          LOG.error(\n+              \"Failed to delete existing routing data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm);\n+          return false;\n+        }\n+      }\n+\n+      // For each ZkRealm, write the given routing data to ZooKeeper\n+      for (Map.Entry<String, List<String>> routingDataEntry : routingData.entrySet()) {\n+        String zkRealm = routingDataEntry.getKey();\n+        List<String> shardingKeyList = routingDataEntry.getValue();\n+\n+        ZNRecord znRecord = new ZNRecord(zkRealm);\n+        znRecord\n+            .setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY, shardingKeyList);\n+        try {\n+          if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTM3MA==", "bodyText": "I believe @narendly 's logic here is to not write on top of an existing node, therefore the if statement is necessary even with try catch.\nHowever, this check is unnecessary for another reason: this is a synchronized function and each loop of routingData guarantees a different zkRealm, therefore the node will never already exist here. Correct me if I'm wrong, please.", "url": "https://github.com/apache/helix/pull/727#discussion_r376675370", "createdAt": "2020-02-08T01:31:45Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord =\n+            _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        if (!_zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {\n+          LOG.error(\n+              \"Failed to delete existing routing data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm);\n+          return false;\n+        }\n+      }\n+\n+      // For each ZkRealm, write the given routing data to ZooKeeper\n+      for (Map.Entry<String, List<String>> routingDataEntry : routingData.entrySet()) {\n+        String zkRealm = routingDataEntry.getKey();\n+        List<String> shardingKeyList = routingDataEntry.getValue();\n+\n+        ZNRecord znRecord = new ZNRecord(zkRealm);\n+        znRecord\n+            .setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY, shardingKeyList);\n+        try {\n+          if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MzQwNg=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzQwMQ==", "bodyText": "It's not completely necessary, but it's better to be safe since exists() calls are relatively cheap. I'd rather have an exist() call here than risk getting a ZkNoNodeException.", "url": "https://github.com/apache/helix/pull/727#discussion_r376823401", "createdAt": "2020-02-09T22:51:36Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord =\n+            _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        if (!_zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {\n+          LOG.error(\n+              \"Failed to delete existing routing data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm);\n+          return false;\n+        }\n+      }\n+\n+      // For each ZkRealm, write the given routing data to ZooKeeper\n+      for (Map.Entry<String, List<String>> routingDataEntry : routingData.entrySet()) {\n+        String zkRealm = routingDataEntry.getKey();\n+        List<String> shardingKeyList = routingDataEntry.getValue();\n+\n+        ZNRecord znRecord = new ZNRecord(zkRealm);\n+        znRecord\n+            .setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY, shardingKeyList);\n+        try {\n+          if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MzQwNg=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTg2MjA4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMToyNzozMFrOFnOaYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0Njo0OVrOFnXc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NDkxMg==", "bodyText": "Nit: can we recursively delete MetadataStoreRoutingConstants.ROUTING_DATA_PATH here?", "url": "https://github.com/apache/helix/pull/727#discussion_r376674912", "createdAt": "2020-02-08T01:27:30Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord =\n+            _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzAzNw==", "bodyText": "No: Deletion of MetadataStoreRoutingConstants.ROUTING_DATA_PATH is not necessary, and it could cause ZkNoNodeException.", "url": "https://github.com/apache/helix/pull/727#discussion_r376823037", "createdAt": "2020-02-09T22:46:49Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.metadatastore.exceptions.ZkLockException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      if (!_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord =\n+            _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NDkxMg=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTg2ODA3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMTozNTo0OVrOFnOdsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo1ODoyNlrOFnXgXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTc2Mw==", "bodyText": "IMO the test cases are not complete. Each of the test cases should at least cover both true and false situations. The test for setRoutingData needs to make sure it overwrites.", "url": "https://github.com/apache/helix/pull/727#discussion_r376675763", "createdAt": "2020-02-08T01:35:49Z", "author": {"login": "NealSun96"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.junit.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestZkRoutingDataWriter extends AbstractTestClass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzkwMw==", "bodyText": "setRoutingData now checks for strict equality.", "url": "https://github.com/apache/helix/pull/727#discussion_r376823903", "createdAt": "2020-02-09T22:58:26Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.junit.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestZkRoutingDataWriter extends AbstractTestClass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTc2Mw=="}, "originalCommit": {"oid": "b6214bf75d25adabe3bb947382f6cee94e6072c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzg0MDI3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToxMDowOFrOFnyHtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1Njo0OVrOFn3CPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1OTk1OA==", "bodyText": "This logic looks good to me. I just would like to ask a further question. Let's say user failed to add realm due to non-exists namespace. Then the user would like to add the namespace, how they can do it?", "url": "https://github.com/apache/helix/pull/727#discussion_r377259958", "createdAt": "2020-02-10T19:10:08Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -132,26 +131,38 @@ public String getMetadataStoreRealm(String namespace, String shardingKey) {\n \n   @Override\n   public boolean addMetadataStoreRealm(String namespace, String realm) {\n-    // TODO implement when MetadataStoreRoutingDataWriter is ready\n-    throw new UnsupportedOperationException();\n+    if (!_routingDataWriterMap.containsKey(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MDQ3OA==", "bodyText": "Namespaces are defined in the System config and therefore are static throughout the lifecycle of the deployment.\nIt would require a restart of the service.", "url": "https://github.com/apache/helix/pull/727#discussion_r377340478", "createdAt": "2020-02-10T21:56:49Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -132,26 +131,38 @@ public String getMetadataStoreRealm(String namespace, String shardingKey) {\n \n   @Override\n   public boolean addMetadataStoreRealm(String namespace, String realm) {\n-    // TODO implement when MetadataStoreRoutingDataWriter is ready\n-    throw new UnsupportedOperationException();\n+    if (!_routingDataWriterMap.containsKey(namespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1OTk1OA=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzg0MzM5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/MetadataStoreRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToxMTowN1rOFnyJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1Nzo0OVrOFn3EVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2MDQ1NA==", "bodyText": "Is there possible an operation to rename realm/sharding key?", "url": "https://github.com/apache/helix/pull/727#discussion_r377260454", "createdAt": "2020-02-10T19:11:07Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/MetadataStoreRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * An interface for a DAO that writes to the metadata store that stores routing data.\n+ * Note: Each data writer connects to a single namespace.\n+ */\n+public interface MetadataStoreRoutingDataWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MTAxNQ==", "bodyText": "That is not allowed. One would have to delete and create with a new name.", "url": "https://github.com/apache/helix/pull/727#discussion_r377341015", "createdAt": "2020-02-10T21:57:49Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/MetadataStoreRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * An interface for a DAO that writes to the metadata store that stores routing data.\n+ * Note: Each data writer connects to a single namespace.\n+ */\n+public interface MetadataStoreRoutingDataWriter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2MDQ1NA=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzg1MDI3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToxMzoyMFrOFnyN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1OToyOVrOFn3H7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2MTU2Ng==", "bodyText": "If you got ZkNodeExistsException, it means creation failed. Would you like to add it again? Why not use _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, true) to create its parent?", "url": "https://github.com/apache/helix/pull/727#discussion_r377261566", "createdAt": "2020-02-10T19:13:20Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MTkzNQ==", "bodyText": "MetadataStoreRoutingConstants.ROUTING_DATA_PATH is not a nested path and does not have a parent path.\nIf ZkNodeExistsException occurs, that means the path exists already.", "url": "https://github.com/apache/helix/pull/727#discussion_r377341935", "createdAt": "2020-02-10T21:59:29Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2MTU2Ng=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE2MTYwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo1NjoxN1rOFn1QyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxMjoyNlrOFn5BSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMTQzMw==", "bodyText": "Can we combine these try catches into one and handle the problem by different exceptions?", "url": "https://github.com/apache/helix/pull/727#discussion_r377311433", "createdAt": "2020-02-10T20:56:17Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    // TODO: Fill in when Helix REST implementations are ready\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm;\n+      if (!_zkClient.exists(realmPath)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord = _zkClient.readData(realmPath);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient.writeData(realmPath, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ1Mg==", "bodyText": "This was considered, but raw zookeeper is not very clear about the kind of exceptions it throws (it throws Exception).\nNote that as soon as we encounter an exception, we need to return and should not proceed. Otherwise, we might risk getting an NPE.", "url": "https://github.com/apache/helix/pull/727#discussion_r377356452", "createdAt": "2020-02-10T22:31:15Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    // TODO: Fill in when Helix REST implementations are ready\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm;\n+      if (!_zkClient.exists(realmPath)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord = _zkClient.readData(realmPath);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient.writeData(realmPath, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMTQzMw=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MzAwMA==", "bodyText": "Then let's have a todo here. Since we are working the ZKClient module. Let's have clear different exceptions for different errors. It will benefit the coding convention with that.", "url": "https://github.com/apache/helix/pull/727#discussion_r377373000", "createdAt": "2020-02-10T23:12:26Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    // TODO: Fill in when Helix REST implementations are ready\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm;\n+      if (!_zkClient.exists(realmPath)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord = _zkClient.readData(realmPath);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient.writeData(realmPath, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMTQzMw=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIwNDEyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMDozNFrOFn1rGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjowMDoxMFrOFn3JLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODE2OQ==", "bodyText": "else clause may not need for this case.", "url": "https://github.com/apache/helix/pull/727#discussion_r377318169", "createdAt": "2020-02-10T21:10:34Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    // TODO: Fill in when Helix REST implementations are ready\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm;\n+      if (!_zkClient.exists(realmPath)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord = _zkClient.readData(realmPath);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient.writeData(realmPath, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        if (!_zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {\n+          LOG.error(\n+              \"Failed to delete existing routing data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm);\n+          return false;\n+        }\n+      }\n+\n+      // For each ZkRealm, write the given routing data to ZooKeeper\n+      for (Map.Entry<String, List<String>> routingDataEntry : routingData.entrySet()) {\n+        String zkRealm = routingDataEntry.getKey();\n+        List<String> shardingKeyList = routingDataEntry.getValue();\n+\n+        ZNRecord znRecord = new ZNRecord(zkRealm);\n+        znRecord\n+            .setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY, shardingKeyList);\n+\n+        String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm;\n+        try {\n+          if (!_zkClient.exists(realmPath)) {\n+            _zkClient.createPersistent(realmPath);\n+          }\n+          _zkClient.writeData(realmPath, znRecord);\n+        } catch (Exception e) {\n+          LOG.error(\"Failed to write data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm, e);\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized void close() {\n+    _zkClient.close();\n+  }\n+\n+  /**\n+   * Creates a ZK realm ZNode and populates it with an empty ZNRecord if it doesn't exist already.\n+   * @param realm\n+   * @return\n+   */\n+  private boolean createZkRealm(String realm) {\n+    if (_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+      LOG.warn(\"createZkRealm() called for realm: {}, but this realm already exists! Namespace: {}\",\n+          realm, _namespace);\n+      return true;\n+    } else {\n+      try {\n+        _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+        _zkClient.writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm,\n+            new ZNRecord(realm));\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to create ZkRealm: {}, Namespace: \", realm, _namespace);\n+        return false;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MjI1Mg==", "bodyText": "Will remove.", "url": "https://github.com/apache/helix/pull/727#discussion_r377342252", "createdAt": "2020-02-10T22:00:10Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -0,0 +1,253 @@\n+package org.apache.helix.rest.metadatastore.accessor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.concurrency.ZkDistributedLeaderElection;\n+import org.apache.helix.rest.metadatastore.constant.MetadataStoreRoutingConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkRoutingDataWriter implements MetadataStoreRoutingDataWriter {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n+\n+  private final String _namespace;\n+  private final HelixZkClient _zkClient;\n+  private final ZkDistributedLeaderElection _leaderElection;\n+\n+  public ZkRoutingDataWriter(String namespace, String zkAddress) {\n+    if (namespace == null || namespace.isEmpty()) {\n+      throw new IllegalArgumentException(\"namespace cannot be null or empty!\");\n+    }\n+    _namespace = namespace;\n+    if (zkAddress == null || zkAddress.isEmpty()) {\n+      throw new IllegalArgumentException(\"Zk address cannot be null or empty!\");\n+    }\n+    _zkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+            new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+\n+    // Ensure that ROUTING_DATA_PATH exists in ZK. If not, create\n+    // create() semantic will fail if it already exists\n+    try {\n+      _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n+    } catch (ZkNodeExistsException e) {\n+      // This is okay\n+    }\n+\n+    // Get the hostname (REST endpoint) from System property\n+    // TODO: Fill in when Helix REST implementations are ready\n+    ZNRecord myServerInfo = new ZNRecord(\"dummy hostname\");\n+    _leaderElection = new ZkDistributedLeaderElection(_zkClient,\n+        MetadataStoreRoutingConstants.LEADER_ELECTION_ZNODE, myServerInfo);\n+  }\n+\n+  @Override\n+  public synchronized boolean addMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return createZkRealm(realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteMetadataStoreRealm(String realm) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      return _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean addShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      // If the realm does not exist already, then create the realm\n+      String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm;\n+      if (!_zkClient.exists(realmPath)) {\n+        // Create the realm\n+        if (!createZkRealm(realm)) {\n+          // Failed to create the realm - log and return false\n+          LOG.error(\n+              \"Failed to add sharding key because ZkRealm creation failed! Namespace: {}, Realm: {}, Sharding key: {}\",\n+              _namespace, realm, shardingKey);\n+          return false;\n+        }\n+      }\n+\n+      // Add the sharding key to an empty ZNRecord\n+      ZNRecord znRecord;\n+      try {\n+        znRecord = _zkClient.readData(realmPath);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to read the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      znRecord.setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY,\n+          Collections.singletonList(shardingKey));\n+      try {\n+        _zkClient.writeData(realmPath, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the realm ZNRecord in addShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean deleteShardingKey(String realm, String shardingKey) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      ZNRecord znRecord =\n+          _zkClient.readData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, true);\n+      if (znRecord == null || !znRecord\n+          .getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .contains(shardingKey)) {\n+        // This realm does not exist or shardingKey doesn't exist. Return true!\n+        return true;\n+      }\n+      znRecord.getListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY)\n+          .remove(shardingKey);\n+      // Overwrite this ZNRecord with the sharding key removed\n+      try {\n+        _zkClient\n+            .writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm, znRecord);\n+      } catch (Exception e) {\n+        LOG.error(\n+            \"Failed to write the data back in deleteShardingKey()! Namespace: {}, Realm: {}, ShardingKey: {}\",\n+            _namespace, realm, shardingKey, e);\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized boolean setRoutingData(Map<String, List<String>> routingData) {\n+    if (_leaderElection.isLeader()) {\n+      if (_zkClient.isClosed()) {\n+        throw new IllegalStateException(\"ZkClient is closed!\");\n+      }\n+      if (routingData == null) {\n+        throw new IllegalArgumentException(\"routingData given is null!\");\n+      }\n+\n+      // Remove existing routing data\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        if (!_zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm)) {\n+          LOG.error(\n+              \"Failed to delete existing routing data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm);\n+          return false;\n+        }\n+      }\n+\n+      // For each ZkRealm, write the given routing data to ZooKeeper\n+      for (Map.Entry<String, List<String>> routingDataEntry : routingData.entrySet()) {\n+        String zkRealm = routingDataEntry.getKey();\n+        List<String> shardingKeyList = routingDataEntry.getValue();\n+\n+        ZNRecord znRecord = new ZNRecord(zkRealm);\n+        znRecord\n+            .setListField(MetadataStoreRoutingConstants.ZNRECORD_LIST_FIELD_KEY, shardingKeyList);\n+\n+        String realmPath = MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm;\n+        try {\n+          if (!_zkClient.exists(realmPath)) {\n+            _zkClient.createPersistent(realmPath);\n+          }\n+          _zkClient.writeData(realmPath, znRecord);\n+        } catch (Exception e) {\n+          LOG.error(\"Failed to write data in setRoutingData()! Namespace: {}, Realm: {}\",\n+              _namespace, zkRealm, e);\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    // TODO: Forward the request to leader\n+    return true;\n+  }\n+\n+  @Override\n+  public synchronized void close() {\n+    _zkClient.close();\n+  }\n+\n+  /**\n+   * Creates a ZK realm ZNode and populates it with an empty ZNRecord if it doesn't exist already.\n+   * @param realm\n+   * @return\n+   */\n+  private boolean createZkRealm(String realm) {\n+    if (_zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm)) {\n+      LOG.warn(\"createZkRealm() called for realm: {}, but this realm already exists! Namespace: {}\",\n+          realm, _namespace);\n+      return true;\n+    } else {\n+      try {\n+        _zkClient.createPersistent(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm);\n+        _zkClient.writeData(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + realm,\n+            new ZNRecord(realm));\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to create ZkRealm: {}, Namespace: \", realm, _namespace);\n+        return false;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODE2OQ=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIxNjMwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNDozMVrOFn1yZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxODoxOFrOFn6QGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMDAzOA==", "bodyText": "Shall we make it as singleton?", "url": "https://github.com/apache/helix/pull/727#discussion_r377320038", "createdAt": "2020-02-10T21:14:31Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MzE3Ng==", "bodyText": "Discussed offline. This class doesn't need to be a singleton because we could use it elsewhere.", "url": "https://github.com/apache/helix/pull/727#discussion_r377393176", "createdAt": "2020-02-11T00:18:18Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMDAzOA=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyMzYzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo1OFrOFn128A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNDo1OVrOFn6W9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTIwMA==", "bodyText": "Shall we create this ephemeral node first instead of creating storing structure?", "url": "https://github.com/apache/helix/pull/727#discussion_r377321200", "createdAt": "2020-02-10T21:16:58Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3ODI1NQ==", "bodyText": "What do you mean by storing structure?", "url": "https://github.com/apache/helix/pull/727#discussion_r377378255", "createdAt": "2020-02-10T23:28:21Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTIwMA=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDkzMw==", "bodyText": "Clarified offline. This is needed.", "url": "https://github.com/apache/helix/pull/727#discussion_r377394933", "createdAt": "2020-02-11T00:24:59Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTIwMA=="}, "originalCommit": {"oid": "6aabd9a6b560a2e41c0f0a8e65f80dab31ca077d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUzNTc5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowNToxMVrOFn43Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNToyMFrOFn6XUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MDQ0Nw==", "bodyText": "Should this be state change? There should not be any case of ZNode data change, right?", "url": "https://github.com/apache/helix/pull/727#discussion_r377370447", "createdAt": "2020-02-10T23:05:11Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient\n+        .create(_basePath + \"/\" + PREFIX, _participantInfo, CreateMode.EPHEMERAL_SEQUENTIAL);\n+    if (_myEphemeralSequentialPath == null) {\n+      throw new IllegalStateException(\n+          \"Unable to create ephemeral sequential node at path: \" + _basePath);\n+    }\n+    tryAcquiringLeadership();\n+  }\n+\n+  private void tryAcquiringLeadership() {\n+    List<String> children = _zkClient.getChildren(_basePath);\n+    Collections.sort(children);\n+    String leaderName = children.get(0);\n+    ZNRecord leaderInfo = _zkClient.readData(_basePath + \"/\" + leaderName, true);\n+\n+    String[] myNameArray = _myEphemeralSequentialPath.split(\"/\");\n+    String myName = myNameArray[myNameArray.length - 1];\n+\n+    if (leaderName.equals(myName)) {\n+      // My turn for leadership\n+      _isLeader = true;\n+      _currentLeaderInfo = leaderInfo;\n+      LOG.info(\"{} acquired leadership! Info: {}\", myName, leaderInfo);\n+    } else {\n+      // Watch the ephemeral ZNode before me for a deletion event\n+      String beforeMe = children.get(children.indexOf(myName) - 1);\n+      _zkClient.subscribeDataChanges(_basePath + \"/\" + beforeMe, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8302d3f8df671f18cfe39dce668cccd4a75cfcbd"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTAyNg==", "bodyText": "DataChange includes deletion event as noted in the comment below.", "url": "https://github.com/apache/helix/pull/727#discussion_r377395026", "createdAt": "2020-02-11T00:25:20Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient\n+        .create(_basePath + \"/\" + PREFIX, _participantInfo, CreateMode.EPHEMERAL_SEQUENTIAL);\n+    if (_myEphemeralSequentialPath == null) {\n+      throw new IllegalStateException(\n+          \"Unable to create ephemeral sequential node at path: \" + _basePath);\n+    }\n+    tryAcquiringLeadership();\n+  }\n+\n+  private void tryAcquiringLeadership() {\n+    List<String> children = _zkClient.getChildren(_basePath);\n+    Collections.sort(children);\n+    String leaderName = children.get(0);\n+    ZNRecord leaderInfo = _zkClient.readData(_basePath + \"/\" + leaderName, true);\n+\n+    String[] myNameArray = _myEphemeralSequentialPath.split(\"/\");\n+    String myName = myNameArray[myNameArray.length - 1];\n+\n+    if (leaderName.equals(myName)) {\n+      // My turn for leadership\n+      _isLeader = true;\n+      _currentLeaderInfo = leaderInfo;\n+      LOG.info(\"{} acquired leadership! Info: {}\", myName, leaderInfo);\n+    } else {\n+      // Watch the ephemeral ZNode before me for a deletion event\n+      String beforeMe = children.get(children.indexOf(myName) - 1);\n+      _zkClient.subscribeDataChanges(_basePath + \"/\" + beforeMe, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MDQ0Nw=="}, "originalCommit": {"oid": "8302d3f8df671f18cfe39dce668cccd4a75cfcbd"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU1NjkzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxNDoxOVrOFn5D6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoyNzozN1rOFn5U1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MzY3NQ==", "bodyText": "Was data delete referring the content of ZNode instead of ZNode it self?", "url": "https://github.com/apache/helix/pull/727#discussion_r377373675", "createdAt": "2020-02-10T23:14:19Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient\n+        .create(_basePath + \"/\" + PREFIX, _participantInfo, CreateMode.EPHEMERAL_SEQUENTIAL);\n+    if (_myEphemeralSequentialPath == null) {\n+      throw new IllegalStateException(\n+          \"Unable to create ephemeral sequential node at path: \" + _basePath);\n+    }\n+    tryAcquiringLeadership();\n+  }\n+\n+  private void tryAcquiringLeadership() {\n+    List<String> children = _zkClient.getChildren(_basePath);\n+    Collections.sort(children);\n+    String leaderName = children.get(0);\n+    ZNRecord leaderInfo = _zkClient.readData(_basePath + \"/\" + leaderName, true);\n+\n+    String[] myNameArray = _myEphemeralSequentialPath.split(\"/\");\n+    String myName = myNameArray[myNameArray.length - 1];\n+\n+    if (leaderName.equals(myName)) {\n+      // My turn for leadership\n+      _isLeader = true;\n+      _currentLeaderInfo = leaderInfo;\n+      LOG.info(\"{} acquired leadership! Info: {}\", myName, leaderInfo);\n+    } else {\n+      // Watch the ephemeral ZNode before me for a deletion event\n+      String beforeMe = children.get(children.indexOf(myName) - 1);\n+      _zkClient.subscribeDataChanges(_basePath + \"/\" + beforeMe, this);\n+    }\n+  }\n+\n+  public synchronized boolean isLeader() {\n+    return _isLeader;\n+  }\n+\n+  public synchronized ZNRecord getCurrentLeaderInfo() {\n+    return _currentLeaderInfo;\n+  }\n+\n+  @Override\n+  public synchronized void handleStateChanged(Watcher.Event.KeeperState state) {\n+    if (state == Watcher.Event.KeeperState.SyncConnected) {\n+      init();\n+    }\n+  }\n+\n+  @Override\n+  public void handleNewSession(String sessionId) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleSessionEstablishmentError(Throwable error) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleDataChange(String s, Object o) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleDataDeleted(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8302d3f8df671f18cfe39dce668cccd4a75cfcbd"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3ODAwNg==", "bodyText": "I'm not sure what you're asking about exactly...\n\nprivate void fireDataChangedEvents(final String path, Set listeners,\nfinal OptionalLong notificationTime) {\ntry {\nfinal ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n// Trigger listener callbacks\nfor (final IZkDataListenerEntry listener : listeners) {\n_eventThread.send(new ZkEvent(\"Data of \" + path + \" changed sent to \"\n+ listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n@OverRide\npublic void run() throws Exception {\n// Reinstall watch before listener callbacks to check the znode status\nif (!pathStatRecord.pathChecked()) {\npathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n}\nif (!pathStatRecord.pathExists()) {\n// no znode found at the path, trigger data deleted handler.\nlistener.getDataListener().handleDataDeleted(path);\n} else {\nObject data = null;\nif (listener.isPrefetchData()) {\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"Prefetch data for path: {}\", path);\n}\ntry {\ndata = readData(path, null, true);\n} catch (ZkNoNodeException e) {\nLOG.warn(\"Prefetch data for path: {} failed.\", path, e);\nlistener.getDataListener().handleDataDeleted(path);\nreturn;\n}\n}\nlistener.getDataListener().handleDataChange(path, data);\n}\n}\n});\n}\n\nDoes this help?", "url": "https://github.com/apache/helix/pull/727#discussion_r377378006", "createdAt": "2020-02-10T23:27:37Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/concurrency/ZkDistributedLeaderElection.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.apache.helix.rest.metadatastore.concurrency;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.I0Itec.zkclient.IZkDataListener;\n+import org.I0Itec.zkclient.exception.ZkNodeExistsException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.manager.zk.zookeeper.IZkStateListener;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ZkDistributedLeaderElection implements IZkDataListener, IZkStateListener {\n+  private static final Logger LOG = LoggerFactory.getLogger(ZkDistributedLeaderElection.class);\n+  private static final String PREFIX = \"MSDS_SERVER_\";\n+\n+  private final HelixZkClient _zkClient;\n+  private final String _basePath;\n+  private final ZNRecord _participantInfo;\n+  private ZNRecord _currentLeaderInfo;\n+\n+  private String _myEphemeralSequentialPath;\n+  private volatile boolean _isLeader;\n+\n+  public ZkDistributedLeaderElection(HelixZkClient zkClient, String basePath,\n+      ZNRecord participantInfo) {\n+    synchronized (this) {\n+      if (zkClient == null || zkClient.isClosed()) {\n+        throw new IllegalArgumentException(\"ZkClient cannot be null or closed!\");\n+      }\n+      _zkClient = zkClient;\n+      _zkClient.setZkSerializer(new ZNRecordSerializer());\n+      if (basePath == null || basePath.isEmpty()) {\n+        throw new IllegalArgumentException(\"lockBasePath cannot be null or empty!\");\n+      }\n+      _basePath = basePath;\n+      _participantInfo = participantInfo;\n+      _isLeader = false;\n+    }\n+    init();\n+  }\n+\n+  /**\n+   * Create the base path if it doesn't exist and create an ephemeral sequential ZNode.\n+   */\n+  private void init() {\n+    try {\n+      _zkClient.createPersistent(_basePath, true);\n+    } catch (ZkNodeExistsException e) {\n+      // Okay if it exists already\n+    }\n+\n+    // Create my ephemeral sequential node with my information\n+    _myEphemeralSequentialPath = _zkClient\n+        .create(_basePath + \"/\" + PREFIX, _participantInfo, CreateMode.EPHEMERAL_SEQUENTIAL);\n+    if (_myEphemeralSequentialPath == null) {\n+      throw new IllegalStateException(\n+          \"Unable to create ephemeral sequential node at path: \" + _basePath);\n+    }\n+    tryAcquiringLeadership();\n+  }\n+\n+  private void tryAcquiringLeadership() {\n+    List<String> children = _zkClient.getChildren(_basePath);\n+    Collections.sort(children);\n+    String leaderName = children.get(0);\n+    ZNRecord leaderInfo = _zkClient.readData(_basePath + \"/\" + leaderName, true);\n+\n+    String[] myNameArray = _myEphemeralSequentialPath.split(\"/\");\n+    String myName = myNameArray[myNameArray.length - 1];\n+\n+    if (leaderName.equals(myName)) {\n+      // My turn for leadership\n+      _isLeader = true;\n+      _currentLeaderInfo = leaderInfo;\n+      LOG.info(\"{} acquired leadership! Info: {}\", myName, leaderInfo);\n+    } else {\n+      // Watch the ephemeral ZNode before me for a deletion event\n+      String beforeMe = children.get(children.indexOf(myName) - 1);\n+      _zkClient.subscribeDataChanges(_basePath + \"/\" + beforeMe, this);\n+    }\n+  }\n+\n+  public synchronized boolean isLeader() {\n+    return _isLeader;\n+  }\n+\n+  public synchronized ZNRecord getCurrentLeaderInfo() {\n+    return _currentLeaderInfo;\n+  }\n+\n+  @Override\n+  public synchronized void handleStateChanged(Watcher.Event.KeeperState state) {\n+    if (state == Watcher.Event.KeeperState.SyncConnected) {\n+      init();\n+    }\n+  }\n+\n+  @Override\n+  public void handleNewSession(String sessionId) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleSessionEstablishmentError(Throwable error) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleDataChange(String s, Object o) {\n+    return;\n+  }\n+\n+  @Override\n+  public void handleDataDeleted(String s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MzY3NQ=="}, "originalCommit": {"oid": "8302d3f8df671f18cfe39dce668cccd4a75cfcbd"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1597, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}