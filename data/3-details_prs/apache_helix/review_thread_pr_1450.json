{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTkwNDY3", "number": 1450, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxNTowNlrOErUlfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyNDo0OFrOErc34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYxNTAyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxNTowNlrOHeB6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowOTo0OFrOHeForQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MDcwMA==", "bodyText": "This stack trace would be printed in one line, right? It'd be difficult to read. How about using\nnew Throwable().printStackTrace();", "url": "https://github.com/apache/helix/pull/1450#discussion_r501250700", "createdAt": "2020-10-07T19:15:06Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMTY2MQ==", "bodyText": "This belongs to https://github.com/apache/helix/pull/1447/files.\nThe using one line is intentional as we don't want to mix this one with an exception thrown which has multiple lines.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501311661", "createdAt": "2020-10-07T21:09:48Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MDcwMA=="}, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYyODA1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxOTowOVrOHeCCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowNzo1MVrOHeFk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MjgwMQ==", "bodyText": "Assert result", "url": "https://github.com/apache/helix/pull/1450#discussion_r501252801", "createdAt": "2020-10-07T19:19:09Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -195,19 +205,27 @@ public void testScopedConfigChangeListener() throws Exception {\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n-    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMDcxOA==", "bodyText": "Good catch. This is actually addressed in https://github.com/apache/helix/pull/1447/files. This file change also belongs there.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501310718", "createdAt": "2020-10-07T21:07:51Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -195,19 +205,27 @@ public void testScopedConfigChangeListener() throws Exception {\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n-    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MjgwMQ=="}, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYzNDUyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyMDo1NlrOHeCGuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToxMDowOVrOHeFpig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MzgxNg==", "bodyText": "Assert it", "url": "https://github.com/apache/helix/pull/1450#discussion_r501253816", "createdAt": "2020-10-07T19:20:56Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java", "diffHunk": "@@ -114,10 +115,10 @@ public void testDisableCluster() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(1000L);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    boolean result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMTg4Mg==", "bodyText": "Good catch. This is actually addressed in https://github.com/apache/helix/pull/1447/files. This file change also belongs there", "url": "https://github.com/apache/helix/pull/1450#discussion_r501311882", "createdAt": "2020-10-07T21:10:09Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java", "diffHunk": "@@ -114,10 +115,10 @@ public void testDisableCluster() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(1000L);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    boolean result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MzgxNg=="}, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODYzODQ2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyMjowNlrOHeCJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowODowMVrOHeFlUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDQ1NA==", "bodyText": "Assert it", "url": "https://github.com/apache/helix/pull/1450#discussion_r501254454", "createdAt": "2020-10-07T19:22:06Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier =\n+        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n+            .build();\n+    Assert.assertTrue(clusterVerifier.verifyByPolling());\n+\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMDgwMQ==", "bodyText": "Good catch. This is actually addressed in https://github.com/apache/helix/pull/1447/files. This file change also belongs there.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501310801", "createdAt": "2020-10-07T21:08:01Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier =\n+        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n+            .build();\n+    Assert.assertTrue(clusterVerifier.verifyByPolling());\n+\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDQ1NA=="}, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODY0MDA4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyMjozNVrOHeCKOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowODoxMlrOHeFlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDcxMw==", "bodyText": "Assert", "url": "https://github.com/apache/helix/pull/1450#discussion_r501254713", "createdAt": "2020-10-07T19:22:35Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -165,17 +171,18 @@ public void testWithOfflineInstancesLimit() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     _participants.get(i).syncStop();\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMDg5Nw==", "bodyText": "Good catch. This is actually addressed in https://github.com/apache/helix/pull/1447/files. This file change also belongs there.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501310897", "createdAt": "2020-10-07T21:08:12Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -165,17 +171,18 @@ public void testWithOfflineInstancesLimit() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     _participants.get(i).syncStop();\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDcxMw=="}, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTk3MjIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalanceFaultZone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyNDoyOVrOHeOZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNTo1ODowMVrOHePBtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTM1NQ==", "bodyText": "This won't be necessary anymore.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501455355", "createdAt": "2020-10-08T05:24:29Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalanceFaultZone.java", "diffHunk": "@@ -349,7 +352,9 @@ public void afterMethod() throws Exception {\n     // waiting for all DB be dropped.\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ2NTUyNA==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501465524", "createdAt": "2020-10-08T05:58:01Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalanceFaultZone.java", "diffHunk": "@@ -349,7 +352,9 @@ public void afterMethod() throws Exception {\n     // waiting for all DB be dropped.\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTM1NQ=="}, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTk3MjgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyNDo0OFrOHeOaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNTo1ODoxMlrOHePB6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTQ0Mw==", "bodyText": "This is not necessary anymore.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501455443", "createdAt": "2020-10-08T05:24:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -748,7 +753,9 @@ public void afterMethod() throws Exception {\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ2NTU3Ng==", "bodyText": "removed.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501465576", "createdAt": "2020-10-08T05:58:12Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -748,7 +753,9 @@ public void afterMethod() throws Exception {\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTQ0Mw=="}, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1010, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}