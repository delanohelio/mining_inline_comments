{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNTk3MDU1", "number": 1357, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowODoxNlrOEjXoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo1NTo1OVrOEl3imA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIyNzY5OnYy", "diffSide": "RIGHT", "path": "helix-core/helix-core-1.0.2-SNAPSHOT.ivy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowODoxNlrOHRrxiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowODoxNlrOHRrxiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNTAzMw==", "bodyText": "Can 4.1.12 work as we discussed offline?", "url": "https://github.com/apache/helix/pull/1357#discussion_r488305033", "createdAt": "2020-09-15T00:08:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/helix-core-1.0.2-SNAPSHOT.ivy", "diffHunk": "@@ -62,7 +62,7 @@ under the License.\n     <dependency org=\"com.google.guava\" name=\"guava\" rev=\"15.0\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n     <dependency org=\"org.yaml\" name=\"snakeyaml\" rev=\"1.12\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n     <dependency org=\"commons-logging\" name=\"commons-logging-api\" rev=\"1.1\" conf=\"compile->compile(*),master(*);runtime->runtime(*)\"/>\n-    <dependency org=\"io.dropwizard.metrics\" name=\"metrics-core\" rev=\"3.2.3\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n+    <dependency org=\"io.dropwizard.metrics\" name=\"metrics-core\" rev=\"4.1.11\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIzNjIyOnYy", "diffSide": "RIGHT", "path": "helix-rest/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDoxMjo1NFrOHRr2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDoxMjo1NFrOHRr2ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjI3Nw==", "bodyText": "Why we need these dependencies in the other modules (helix-core and metric-core)? I assume we are just going to use it for helix-rest, no?", "url": "https://github.com/apache/helix/pull/1357#discussion_r488306277", "createdAt": "2020-09-15T00:12:54Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/pom.xml", "diffHunk": "@@ -154,6 +154,17 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>io.dropwizard.metrics</groupId>\n+      <artifactId>metrics-jersey2</artifactId>\n+      <version>4.1.11</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTI3MjkwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDozMDo1MFrOHRsK5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDozODoxOVrOHVhjyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ==", "bodyText": "Given this is an internally used class, do we expect any value that needs quote?", "url": "https://github.com/apache/helix/pull/1357#discussion_r488311525", "createdAt": "2020-09-15T00:30:50Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\", \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  public ObjectName createName(String type, String domainNameSpace, String name) {\n+    String[] splits = domainNameSpace.split(\":\");\n+    String domain = splits[0];\n+    String namespace = splits[1];\n+\n+    try {\n+      Hashtable<String, String> properties = new Hashtable<>();\n+      properties.put(KEY_NAME, name);\n+      properties.put(KEY_TYPE, type);\n+      properties.put(KEY_NAMESPACE, namespace);\n+\n+      /*\n+       * The only way we can find out if we need to quote the properties is by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDI4OQ==", "bodyText": "I don't think it hurts to have the quote check. Eg. if we use regex, quote is needed: new ObjectName(\"helix*\")", "url": "https://github.com/apache/helix/pull/1357#discussion_r491244289", "createdAt": "2020-09-19T00:30:55Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\", \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  public ObjectName createName(String type, String domainNameSpace, String name) {\n+    String[] splits = domainNameSpace.split(\":\");\n+    String domain = splits[0];\n+    String namespace = splits[1];\n+\n+    try {\n+      Hashtable<String, String> properties = new Hashtable<>();\n+      properties.put(KEY_NAME, name);\n+      properties.put(KEY_TYPE, type);\n+      properties.put(KEY_NAMESPACE, namespace);\n+\n+      /*\n+       * The only way we can find out if we need to quote the properties is by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0ODg2Nw==", "bodyText": "I personally prefer less protection so the logic fails earlier during test.\nBut no strong preference here.", "url": "https://github.com/apache/helix/pull/1357#discussion_r492248867", "createdAt": "2020-09-21T18:03:12Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\", \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  public ObjectName createName(String type, String domainNameSpace, String name) {\n+    String[] splits = domainNameSpace.split(\":\");\n+    String domain = splits[0];\n+    String namespace = splits[1];\n+\n+    try {\n+      Hashtable<String, String> properties = new Hashtable<>();\n+      properties.put(KEY_NAME, name);\n+      properties.put(KEY_TYPE, type);\n+      properties.put(KEY_NAMESPACE, namespace);\n+\n+      /*\n+       * The only way we can find out if we need to quote the properties is by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMTk3OA==", "bodyText": "I will keep it then.", "url": "https://github.com/apache/helix/pull/1357#discussion_r492331978", "createdAt": "2020-09-21T20:38:19Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\", \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  public ObjectName createName(String type, String domainNameSpace, String name) {\n+    String[] splits = domainNameSpace.split(\":\");\n+    String domain = splits[0];\n+    String namespace = splits[1];\n+\n+    try {\n+      Hashtable<String, String> properties = new Hashtable<>();\n+      properties.put(KEY_NAME, name);\n+      properties.put(KEY_TYPE, type);\n+      properties.put(KEY_NAMESPACE, namespace);\n+\n+      /*\n+       * The only way we can find out if we need to quote the properties is by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}, "originalCommit": {"oid": "5343c88c91713b39600eba7e0ab23db287f04574"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDUxNDYwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNToyMlrOHVckBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo0Mzo1OVrOHVhvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDExOQ==", "bodyText": "If you ignore 2 types of info out of 3, then this ObjectName probably does not help us monitoring. So just throw Exception?", "url": "https://github.com/apache/helix/pull/1357#discussion_r492250119", "createdAt": "2020-09-21T18:05:22Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();\n+\n+    properties.put(KEY_NAME, name);\n+    properties.put(KEY_TYPE, type);\n+    properties.put(KEY_NAMESPACE, _namespace);\n+\n+    try {\n+      /*\n+       * The only way we can find out if we need to quote the properties is by\n+       * checking an ObjectName that we've constructed. Eg. when regex is used in\n+       * object name, quoting is needed.\n+       */\n+      ObjectName objectName = new ObjectName(domain, properties);\n+      boolean needQuote = false;\n+\n+      if (objectName.isDomainPattern()) {\n+        domain = ObjectName.quote(domain);\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_NAME)) {\n+        properties.put(KEY_NAME, ObjectName.quote(name));\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_TYPE)) {\n+        properties.put(KEY_TYPE, ObjectName.quote(type));\n+        needQuote = true;\n+      }\n+\n+      return needQuote ? new ObjectName(domain, properties) : objectName;\n+    } catch (MalformedObjectNameException e) {\n+      try {\n+        return new ObjectName(domain, KEY_NAME, ObjectName.quote(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNDg3MA==", "bodyText": "Yep. HelixException is thrown, instead.", "url": "https://github.com/apache/helix/pull/1357#discussion_r492334870", "createdAt": "2020-09-21T20:43:59Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();\n+\n+    properties.put(KEY_NAME, name);\n+    properties.put(KEY_TYPE, type);\n+    properties.put(KEY_NAMESPACE, _namespace);\n+\n+    try {\n+      /*\n+       * The only way we can find out if we need to quote the properties is by\n+       * checking an ObjectName that we've constructed. Eg. when regex is used in\n+       * object name, quoting is needed.\n+       */\n+      ObjectName objectName = new ObjectName(domain, properties);\n+      boolean needQuote = false;\n+\n+      if (objectName.isDomainPattern()) {\n+        domain = ObjectName.quote(domain);\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_NAME)) {\n+        properties.put(KEY_NAME, ObjectName.quote(name));\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_TYPE)) {\n+        properties.put(KEY_TYPE, ObjectName.quote(type));\n+        needQuote = true;\n+      }\n+\n+      return needQuote ? new ObjectName(domain, properties) : objectName;\n+    } catch (MalformedObjectNameException e) {\n+      try {\n+        return new ObjectName(domain, KEY_NAME, ObjectName.quote(name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDExOQ=="}, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDUxNjg2OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNjowNVrOHVclaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDozOToxNlrOHVhlmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDQ3Mw==", "bodyText": "Do we allow null string input or not?", "url": "https://github.com/apache/helix/pull/1357#discussion_r492250473", "createdAt": "2020-09-21T18:06:05Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMjQ0Mw==", "bodyText": "No. Hashtable has the null check. If any property is null, NPE will be thrown.", "url": "https://github.com/apache/helix/pull/1357#discussion_r492332443", "createdAt": "2020-09-21T20:39:16Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDQ3Mw=="}, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDUyMTg0OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNzozNFrOHVcojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo0MzoyN1rOHVhuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTI3OQ==", "bodyText": "When this one is called? Do we need concurrency control?", "url": "https://github.com/apache/helix/pull/1357#discussion_r492251279", "createdAt": "2020-09-21T18:07:34Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -162,6 +168,24 @@ protected ResourceConfig getResourceConfig(HelixRestNamespace namespace, Servlet\n     return cfg;\n   }\n \n+  /*\n+   * Initialize metric registry and jmx reporter for each namespace.\n+   */\n+  private void initMetricRegistry(ResourceConfig cfg, String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNDU5Nw==", "bodyText": "This will be called after a servlet is init. We don't need concurrency control same as initServlet()", "url": "https://github.com/apache/helix/pull/1357#discussion_r492334597", "createdAt": "2020-09-21T20:43:27Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -162,6 +168,24 @@ protected ResourceConfig getResourceConfig(HelixRestNamespace namespace, Servlet\n     return cfg;\n   }\n \n+  /*\n+   * Initialize metric registry and jmx reporter for each namespace.\n+   */\n+  private void initMetricRegistry(ResourceConfig cfg, String namespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTI3OQ=="}, "originalCommit": {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTQyNzQ0OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjo1NTo1OVrOHVlMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDowNDo1OVrOHVmcrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MTQ0Nw==", "bodyText": "What if it throw exception, will it break servlet start or something? I did not see the place to use it.", "url": "https://github.com/apache/helix/pull/1357#discussion_r492391447", "createdAt": "2020-09-21T22:55:59Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.apache.helix.HelixException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94389493c268bbc49312012dcffcc4737f90c03a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMjA3Ng==", "bodyText": "@dasahcc Good question. If exception is thrown, servlet/rest server won't be able to start. This method is used in metrics lib's JmxReporter", "url": "https://github.com/apache/helix/pull/1357#discussion_r492412076", "createdAt": "2020-09-22T00:04:59Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.apache.helix.HelixException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MTQ0Nw=="}, "originalCommit": {"oid": "94389493c268bbc49312012dcffcc4737f90c03a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}