{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjUzMzEy", "number": 849, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMTozMVrODlOhFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MTozOFrODnmZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYxNzUwOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMTozMVrOFyAEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzo0Mjo1OVrOFyoDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDMyMA==", "bodyText": "We may also need a \"DELETE\" API. You can double check.", "url": "https://github.com/apache/helix/pull/849#discussion_r387974320", "createdAt": "2020-03-04T22:31:31Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.updateRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to update rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyOTM4NA==", "bodyText": "I added the \"DELETE\" API, please help me review again. Thank you.", "url": "https://github.com/apache/helix/pull/849#discussion_r388629384", "createdAt": "2020-03-05T23:42:59Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.updateRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to update rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDMyMA=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYxOTE4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMjoxMlrOFyAFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDoyNlrOFyf_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDU4Nw==", "bodyText": "try \"code reformat\" to see whether it'll look better.", "url": "https://github.com/apache/helix/pull/849#discussion_r387974587", "createdAt": "2020-03-04T22:32:12Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzIzNQ==", "bodyText": "I think it's because I used the old style sheet, will update to the new style sheet. Thanks.", "url": "https://github.com/apache/helix/pull/849#discussion_r388497235", "createdAt": "2020-03-05T19:00:26Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDU4Nw=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY0NzEyOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0MzoyN1rOFyAXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0MDoyMlrOFzDP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTExNg==", "bodyText": "I suggest using {} to make advantage of sl4j logging.", "url": "https://github.com/apache/helix/pull/849#discussion_r387979116", "createdAt": "2020-03-04T22:43:27Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NjM1Mw==", "bodyText": "I searched for sl4j logging, but couldn't find materials for what you referred to as using{}, could you please provide an example?", "url": "https://github.com/apache/helix/pull/849#discussion_r388496353", "createdAt": "2020-03-05T18:58:56Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTExNg=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwNjQ2Mw==", "bodyText": "I think he meant something like this:\nlogger.info(\"Initialized {} pipeline\", Pipeline.Type.TASK.name());", "url": "https://github.com/apache/helix/pull/849#discussion_r388706463", "createdAt": "2020-03-06T04:19:58Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTExNg=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NDkyMA==", "bodyText": "I see. Thank you for explanation @zhangmeng916. @pkuwm Here I'm following the format that is used by other methods in this class. But the way you suggested does provide a clearer and easier way to form the message. Later we can have a separate PR to change all the log messages in Helix to adopt the sl4j {} function.", "url": "https://github.com/apache/helix/pull/849#discussion_r389074920", "createdAt": "2020-03-06T18:40:22Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTExNg=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDU0ODg0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozMjoyMFrOFyI4Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDoyMFrOFyf_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODU3NA==", "bodyText": "I see \"HelixUtil.getZkParentPath(zkPath)\" twice. I guess you are trying to use parentPath.", "url": "https://github.com/apache/helix/pull/849#discussion_r388118574", "createdAt": "2020-03-05T07:32:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDE3Nw==", "bodyText": "You are right. I'm trying to use the parentPath. I'm trying to resolve the problem that when we want to update the rest config in the path \"/{clusterId}/CONFIGS/REST{clusterId}\", the parent path \"/{clusterId}/CONFIGS/REST\" doesn't exist yet, so I would create the parentPath first.", "url": "https://github.com/apache/helix/pull/849#discussion_r388494177", "createdAt": "2020-03-05T18:55:13Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODU3NA=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzE5Nw==", "bodyText": "What I meant is that line 637 could be:\n_zkClient.exists(parentPath)", "url": "https://github.com/apache/helix/pull/849#discussion_r388497197", "createdAt": "2020-03-05T19:00:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODU3NA=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDU1NDEyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozNDo0NlrOFyI7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMzo0NVrOFygGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQwNQ==", "bodyText": "Actually, if it is \"overwrite\", there is no need to check existence. Just call createOrReplace().\nIf it is not \"overwrite\", there is no need to check existence either, just call createOrUpdate().", "url": "https://github.com/apache/helix/pull/849#discussion_r388119405", "createdAt": "2020-03-05T07:34:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);\n+    if (!_zkClient.exists(HelixUtil.getZkParentPath(zkPath))) {\n+      ZKUtil.createOrMerge(_zkClient, parentPath, new ZNRecord(parentPath), true, true);\n+    }\n+\n+    if (overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTA5Mw==", "bodyText": "Please see the comment above, I checked the existence of parent path, not current path.", "url": "https://github.com/apache/helix/pull/849#discussion_r388495093", "createdAt": "2020-03-05T18:56:43Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);\n+    if (!_zkClient.exists(HelixUtil.getZkParentPath(zkPath))) {\n+      ZKUtil.createOrMerge(_zkClient, parentPath, new ZNRecord(parentPath), true, true);\n+    }\n+\n+    if (overwrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQwNQ=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODk4Nw==", "bodyText": "I see.", "url": "https://github.com/apache/helix/pull/849#discussion_r388498987", "createdAt": "2020-03-05T19:03:45Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,45 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {\n+    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n+      throw new HelixException(\"fail to update REST config. cluster: \" + clusterName + \" is NOT setup.\");\n+    }\n+\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    String zkPath = scope.getZkPath();\n+\n+    // Create \"/{clusterId}/CONFIGS/REST\" if it does not exist\n+    String parentPath = HelixUtil.getZkParentPath(zkPath);\n+    if (!_zkClient.exists(HelixUtil.getZkParentPath(zkPath))) {\n+      ZKUtil.createOrMerge(_zkClient, parentPath, new ZNRecord(parentPath), true, true);\n+    }\n+\n+    if (overwrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQwNQ=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDU1ODI5OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozNjo0MFrOFyI97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNjo0NFrOFygNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDA0NA==", "bodyText": "Could it because of write failure? I'm not sure if the accessor could throw any HelixException as well?\nI know it probably lists details in the message, but the response type would be notfound in any case, which is not good.", "url": "https://github.com/apache/helix/pull/849#discussion_r388120044", "createdAt": "2020-03-05T07:36:40Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTYxOQ==", "bodyText": "I checked, all the exceptions are caught in ZKUtil.createOrMerge/Replace/Update, and only log the errors, including the write failure or other types of errors. Only one case would throw HelixException which is ZKUtil.isClusterSetup(clusterName, _zkClient) returns false, so I used the notFound response type.  Please let me know if you still think it is an issue and we should fix it some other way. Thanks.", "url": "https://github.com/apache/helix/pull/849#discussion_r388491619", "createdAt": "2020-03-05T18:50:46Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDA0NA=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMDc2OQ==", "bodyText": "It's better to have a more precise exception for notFound error. Or, if we use HelixException, we should use a more generic error accordingly.\nSince this is a common issue, I'm fine if you add a TODO here. We can address this later.", "url": "https://github.com/apache/helix/pull/849#discussion_r388500769", "createdAt": "2020-03-05T19:06:44Z", "author": {"login": "jiajunwang"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,89 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDA0NA=="}, "originalCommit": {"oid": "b6cb4cb915c64274c3795171c8cc740f3fa4ed2f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUyOTkzOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0ODoxM1rOFzBweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToxOToyMlrOFzHyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDQ4OQ==", "bodyText": "Can you follow the style of ClusterConfig? We have entry update/delete operation with URL param.", "url": "https://github.com/apache/helix/pull/849#discussion_r389050489", "createdAt": "2020-03-06T17:48:13Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,107 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984dd1b203f31f0d3b3c983ddcbde7f938af7455"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NTMzMQ==", "bodyText": "I have updated the PR. Can you review again? Thanks.", "url": "https://github.com/apache/helix/pull/849#discussion_r389075331", "createdAt": "2020-03-06T18:41:08Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,107 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDQ4OQ=="}, "originalCommit": {"oid": "984dd1b203f31f0d3b3c983ddcbde7f938af7455"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTI5MA==", "bodyText": "I think you have missunderstanding about delete the Config and delete entry of the Config.", "url": "https://github.com/apache/helix/pull/849#discussion_r389149290", "createdAt": "2020-03-06T21:19:22Z", "author": {"login": "junkaixue"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,107 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDQ4OQ=="}, "originalCommit": {"oid": "984dd1b203f31f0d3b3c983ddcbde7f938af7455"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjIwMjM2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTowNzozNlrOFz1tMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxODo1N1rOFz2DTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMTYxOA==", "bodyText": "Is this necessary? We should have update function with scope arugment,right?", "url": "https://github.com/apache/helix/pull/849#discussion_r389901618", "createdAt": "2020-03-09T19:07:36Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNzI3Nw==", "bodyText": "I've adopted the pattern for ClusterConfig here. The overwrite is to be called to distinguish set and update operations. The RESTConfig instance passed in gives us the information to be used to set/update the rest config, and the scope can be derived from information in RESTConfig in the implementation.", "url": "https://github.com/apache/helix/pull/849#discussion_r389907277", "createdAt": "2020-03-09T19:18:57Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMTYxOA=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI5MDIxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNTozMFrOFz2jxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNTo0N1rOF0Y5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTU5MA==", "bodyText": "Could we double-check if the ID for the restConfig is supposed to match up with the cluster name?", "url": "https://github.com/apache/helix/pull/849#discussion_r389915590", "createdAt": "2020-03-09T19:35:30Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDM5Ng==", "bodyText": "This check is not imposed on rest config id, this is to check the if the id of ZNRecord user uses to update the rest config matches the cluster name. I'm not sure what our users are doing right now, but this could prevent accidentally update the wrong cluster.", "url": "https://github.com/apache/helix/pull/849#discussion_r390030396", "createdAt": "2020-03-10T00:19:30Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTU5MA=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODIyMQ==", "bodyText": "Since it is a not necessary check. I removed it so it is easier for users to use.", "url": "https://github.com/apache/helix/pull/849#discussion_r390478221", "createdAt": "2020-03-10T17:15:47Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTU5MA=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI5MzY1OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNjozMFrOFz2l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyMjowM1rOFz9muw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjEyMw==", "bodyText": "Nit: is there a reason we don't just say createRestConfig? Cluster seems a little redundant?", "url": "https://github.com/apache/helix/pull/849#discussion_r389916123", "createdAt": "2020-03-09T19:36:30Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMTAzNQ==", "bodyText": "I've changed the method names.", "url": "https://github.com/apache/helix/pull/849#discussion_r390031035", "createdAt": "2020-03-10T00:22:03Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjEyMw=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI5NTM3OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNzowNFrOFz2m6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NDoxNFrOF0gSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjM5Mw==", "bodyText": "Initializing to null is redundant.", "url": "https://github.com/apache/helix/pull/849#discussion_r389916393", "createdAt": "2020-03-09T19:37:04Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getClusterRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMTc4Mw==", "bodyText": "I initialize the config to null mainly to check later if the accessor got the config successfully. If there is an Exception, we catch these exceptions, so by comparing if the config is null we know if there is error in fetching the information.", "url": "https://github.com/apache/helix/pull/849#discussion_r390031783", "createdAt": "2020-03-10T00:25:00Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getClusterRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjM5Mw=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2ODIzNw==", "bodyText": "Please read https://docs.oracle.com/javase/specs/jls/se7/jls7.pdf\nObject references not initialized default to null. So initializing to null is redundant.", "url": "https://github.com/apache/helix/pull/849#discussion_r390568237", "createdAt": "2020-03-10T19:45:46Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getClusterRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjM5Mw=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTIzNQ==", "bodyText": "I tried it, the code doesn't compile after removing \"=null\". I agree that initialization to null is functional redundant, but it benefits the style check and readability of the code, so I would keep it here.", "url": "https://github.com/apache/helix/pull/849#discussion_r390599235", "createdAt": "2020-03-10T20:44:14Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,125 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateClusterRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getClusterRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjM5Mw=="}, "originalCommit": {"oid": "57e62480d530b4b3d49e15e5b1172cfaa607eccf"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI5NzI4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowNjowOVrOF0dFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyNzo0MFrOF0d0eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Njc4Nw==", "bodyText": "There are lots of common code for updateRESTConfig, updateClusterConfig and so on. I am fine with this PR. But can you have another PR to abstract the logic to a private method to reduce the redundant code?", "url": "https://github.com/apache/helix/pull/849#discussion_r390546787", "createdAt": "2020-03-10T19:06:09Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1ODg0Mg==", "bodyText": "Ok. I'll create another PR to abstract the logic.", "url": "https://github.com/apache/helix/pull/849#discussion_r390558842", "createdAt": "2020-03-10T19:27:40Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -605,6 +606,62 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**\n+   * Set RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the RestConfig to be set to the cluster\n+   */\n+  public void setRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, true);\n+  }\n+\n+  /**\n+   * Update RestConfig of a given cluster\n+   * @param clusterName the cluster id\n+   * @param restConfig the new RestConfig to be set to the cluster\n+   */\n+  public void updateRESTConfig(String clusterName, RESTConfig restConfig) {\n+    updateRESTConfig(clusterName, restConfig, false);\n+  }\n+\n+  private void updateRESTConfig(String clusterName, RESTConfig restConfig, boolean overwrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Njc4Nw=="}, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDUyMzkxOnYy", "diffSide": "RIGHT", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoxMzo0N1rOF0fTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NTo1NlrOF0gVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MzA3OA==", "bodyText": "Failed to delete but finally returning OK response? Would 404 be more appropriate?", "url": "https://github.com/apache/helix/pull/849#discussion_r390583078", "createdAt": "2020-03-10T20:13:47Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,121 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;\n+    try {\n+      config = accessor.getRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\n+          \"Failed to get rest config for cluster \" + clusterId + \", cluster not found, Exception: \"\n+              + ex);\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to get rest config for cluster \" + clusterId + \" Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    if (config == null) {\n+      return notFound();\n+    }\n+    return JSONRepresentation(config.getRecord());\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response deleteRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    try {\n+      accessor.deleteRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\"Failed to delete rest config for cluster \" + clusterId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDEyNw==", "bodyText": "I was considering returns OK would be fine since what you want to delete is already not there. But on second thought, return NOT_FOUND probably is more intuitive for the users. Changing it to NOT_FOUND.", "url": "https://github.com/apache/helix/pull/849#discussion_r390600127", "createdAt": "2020-03-10T20:45:56Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -511,6 +512,121 @@ public Response removeClusterStateModelDefinition(@PathParam(\"clusterId\") String\n     return OK();\n   }\n \n+  @PUT\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response createRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    if (!record.getId().equals(clusterId)) {\n+      return badRequest(\"ID does not match the cluster name in input!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      configAccessor.setRESTConfig(clusterId, config);\n+    } catch (HelixException ex) {\n+      // TODO: Could use a more generic error for HelixException\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to create rest config, cluster \" + clusterId + \" new config: \" + content\n+          + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response updateRESTConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, String content) {\n+    Command command;\n+    try {\n+      command = getCommand(commandStr);\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    }\n+\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a valid ZNRecord!\");\n+    }\n+\n+    RESTConfig config = new RESTConfig(record);\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    try {\n+      switch (command) {\n+        case update:\n+          configAccessor.updateRESTConfig(clusterId, config);\n+          break;\n+        case delete: {\n+          HelixConfigScope scope =\n+              new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.REST)\n+                  .forCluster(clusterId).build();\n+          configAccessor.remove(scope, config.getRecord());\n+        }\n+        break;\n+        default:\n+          return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (HelixException ex) {\n+      return notFound(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\n+          \"Failed to \" + command + \" rest config, cluster \" + clusterId + \" new config: \" + content\n+              + \", Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response getRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    RESTConfig config = null;\n+    try {\n+      config = accessor.getRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\n+          \"Failed to get rest config for cluster \" + clusterId + \", cluster not found, Exception: \"\n+              + ex);\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to get rest config for cluster \" + clusterId + \" Exception: \" + ex);\n+      return serverError(ex);\n+    }\n+    if (config == null) {\n+      return notFound();\n+    }\n+    return JSONRepresentation(config.getRecord());\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/restconfig\")\n+  public Response deleteRESTConfig(@PathParam(\"clusterId\") String clusterId) {\n+    ConfigAccessor accessor = getConfigAccessor();\n+    try {\n+      accessor.deleteRESTConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.info(\"Failed to delete rest config for cluster \" + clusterId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MzA3OA=="}, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDUzNDg4OnYy", "diffSide": "RIGHT", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoxNzoxNlrOF0fZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NzoxMFrOF0gYNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NDgyMQ==", "bodyText": "Is the test already ended?", "url": "https://github.com/apache/helix/pull/849#discussion_r390584821", "createdAt": "2020-03-10T20:17:16Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "diffHunk": "@@ -576,6 +577,70 @@ public void testEnableWagedRebalanceForAllResources() {\n     }\n   }\n \n+  @Test\n+  public void testCreateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:00\");\n+    put(\"clusters/\" + cluster + \"/restconfig\", null, Entity\n+        .entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+            MediaType.APPLICATION_JSON_TYPE), Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testCreateClusterRESTConfig\")\n+  public void testUpdateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    // Update an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:01\");\n+    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.update.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+\n+    // Delete an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, null);\n+    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.delete.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, new RESTConfig(cluster),\n+        \"rest config from response: \" + new RESTConfig(cluster) + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDc1OA==", "bodyText": "Added one more test after the first draft. Moving it down.", "url": "https://github.com/apache/helix/pull/849#discussion_r390600758", "createdAt": "2020-03-10T20:47:10Z", "author": {"login": "mgao0"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "diffHunk": "@@ -576,6 +577,70 @@ public void testEnableWagedRebalanceForAllResources() {\n     }\n   }\n \n+  @Test\n+  public void testCreateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:00\");\n+    put(\"clusters/\" + cluster + \"/restconfig\", null, Entity\n+        .entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+            MediaType.APPLICATION_JSON_TYPE), Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n+  }\n+\n+  @Test(dependsOnMethods = \"testCreateClusterRESTConfig\")\n+  public void testUpdateClusterRESTConfig() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = _clusters.iterator().next();\n+    RESTConfig restConfigRest = new RESTConfig(cluster);\n+    // Update an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"http://*:01\");\n+    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.update.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    RESTConfig restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, restConfigRest,\n+        \"rest config from response: \" + restConfigRest + \" vs rest config actually: \"\n+            + restConfigZK);\n+\n+    // Delete an entry\n+    restConfigRest.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, null);\n+    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(restConfigRest.getRecord()),\n+        MediaType.APPLICATION_JSON_TYPE);\n+    post(\"clusters/\" + cluster + \"/restconfig\", ImmutableMap.of(\"command\", Command.delete.name()),\n+        entity, Response.Status.OK.getStatusCode());\n+    restConfigZK = _configAccessor.getRESTConfig(cluster);\n+    Assert.assertEquals(restConfigZK, new RESTConfig(cluster),\n+        \"rest config from response: \" + new RESTConfig(cluster) + \" vs rest config actually: \"\n+            + restConfigZK);\n+    System.out.println(\"End test :\" + TestHelper.getTestMethodName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NDgyMQ=="}, "originalCommit": {"oid": "671d762d9e53c69e931fa68350016b92e46653a9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODIyNjg4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNDowNFrOF1p5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozNDozN1rOF1qkNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTE4Nw==", "bodyText": "If there is a change to config accessor, should we add tests in TestConfigAccessor as well?", "url": "https://github.com/apache/helix/pull/849#discussion_r391805187", "createdAt": "2020-03-12T18:14:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -604,6 +605,61 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNjI0NA==", "bodyText": "There are tests for rest config covering set and update in TestConfigAccessor. I just added a few more cases for delete.", "url": "https://github.com/apache/helix/pull/849#discussion_r391816244", "createdAt": "2020-03-12T18:34:37Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -604,6 +605,61 @@ public RESTConfig getRESTConfig(String clusterName) {\n     return new RESTConfig(record);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTE4Nw=="}, "originalCommit": {"oid": "ac314e33553725d0a68842f9c1f29b7c756dafef"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODUwMjY3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MTozOFrOF1soUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MTozOFrOF1soUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDA2NQ==", "bodyText": "Could you mark it clearly where the exception should be expected? Because it's not often easy to tell, I prefer the style of\ntry {\n//your logic\nAssert.fail(\"Exception expected!\");\ncatch (exception) {\n// Exception expected..\n}", "url": "https://github.com/apache/helix/pull/849#discussion_r391850065", "createdAt": "2020-03-12T19:41:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java", "diffHunk": "@@ -204,4 +207,56 @@ public void testSetNonexistentParticipantConfig() throws Exception {\n     configAccessor.close();\n     System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n   }\n+\n+  @Test\n+  public void testSetRestConfig() {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+\n+    ZKHelixAdmin admin = new ZKHelixAdmin(ZK_ADDR);\n+    admin.addCluster(clusterName, true);\n+    ConfigAccessor configAccessor = new ConfigAccessor(ZK_ADDR);\n+    HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n+    Assert.assertNull(configAccessor.getRESTConfig(clusterName));\n+\n+    RESTConfig restConfig = new RESTConfig(clusterName);\n+    restConfig.set(RESTConfig.SimpleFields.CUSTOMIZED_HEALTH_URL, \"TEST_URL\");\n+    configAccessor.setRESTConfig(clusterName, restConfig);\n+    Assert.assertEquals(restConfig, configAccessor.getRESTConfig(clusterName));\n+  }\n+\n+  @Test (expectedExceptions = HelixException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f1ac6b94f60544b5f6c5cb6a32e670b948b517"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1323, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}