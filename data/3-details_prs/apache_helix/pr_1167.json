{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjQ4OTE0", "number": 1167, "title": "Change getBaselineAasignment/getBestPossibleAssignment to account for partial-WAGED clusters", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1166\nDescription\n\n\n The following tests are written for this issue:\ntestPartialBaselineAvailability\n\n\n Here are some details about my PR, including screenshots of any UI changes:\n\n\nWAGED Rebalancer by design only supports one-off migration of resources. As a result, its getBaselineAssignment() did not consider the case of a cluster that's partially managed by WAGED. It tries to get baselines for all resources from the cluster; if there's no baseline data, it gets current states for all resources as a fallback. It doesn't care for resources that don't have baseline while other resources have baselines - when that's the case, the resources that don't have baseline will not fallback to their current states; they will simply not have baselines. A similar problem happens to getBestPossibleAssignment().\nThe logic is now changed to a per resource level. If a resource has baseline, the baseline will be used; else, the current state will be used. getBestPossibleAssignment() will be fixed the same way.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Tests run: 1155, Failures: 5, Errors: 0, Skipped: 1, Time elapsed: 4,324.66 s <<< FAILURE! - in TestSuite\n[ERROR] testResourceSubset(org.apache.helix.tools.TestClusterStateVerifier)  Time elapsed: 1.025 s  <<< FAILURE!\norg.apache.helix.HelixException: Failed to create pause signal\n        at org.apache.helix.tools.TestClusterStateVerifier.testResourceSubset(TestClusterStateVerifier.java:115)\n\n[ERROR] afterMethod(org.apache.helix.tools.TestClusterStateVerifier)  Time elapsed: 1.062 s  <<< FAILURE!\njava.lang.IllegalStateException: ZkClient already closed!\n        at org.apache.helix.tools.TestClusterStateVerifier.afterMethod(TestClusterStateVerifier.java:98)\n\n[ERROR] testCustomizedViewAggregation(org.apache.helix.integration.TestCustomizedViewAggregation)  Time elapsed: 12.133 s  <<< FAILURE!\njava.lang.AssertionError: expected:<true> but was:<false>\n        at org.apache.helix.integration.TestCustomizedViewAggregation.validateAggregationSnapshot(TestCustomizedViewAggregation.java:238)\n        at org.apache.helix.integration.TestCustomizedViewAggregation.testCustomizedViewAggregation(TestCustomizedViewAggregation.java:394)\n\n[ERROR] testStateTransitionTimeOut(org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource)  Time elapsed: 36.061 s  <<< FAILURE!\njava.lang.AssertionError: expected:<true> but was:<false>\n        at org.apache.helix.integration.paticipant.TestStateTransitionTimeoutWithResource.testStateTransitionTimeOut(TestStateTransitionTimeoutWithResource.java:171)\n\n[ERROR] testPeriodicRefresh(org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh)  Time elapsed: 2.015 s  <<< FAILURE!\njava.lang.AssertionError: expected:<7> but was:<6>\n        at org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh(TestRoutingTableProviderPeriodicRefresh.java:192)\n\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestCustomizedViewAggregation.testCustomizedViewAggregation:394->validateAggregationSnapshot:238 expected:<true> but was:<false>\n[ERROR]   TestStateTransitionTimeoutWithResource.testStateTransitionTimeOut:171 expected:<true> but was:<false>\n[ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:192 expected:<7> but was:<6>\n[ERROR]   TestClusterStateVerifier.afterMethod:98 \u00bb IllegalState ZkClient already closed...\n[ERROR]   TestClusterStateVerifier.testResourceSubset:115 \u00bb Helix Failed to create pause...\n[INFO] \n[ERROR] Tests run: 1155, Failures: 5, Errors: 0, Skipped: 1\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:12 h\n[INFO] Finished at: 2020-07-22T18:49:39-07:00\n[INFO] ------------------------------------------------------------------------\n\nRerun\n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 38.505 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  43.912 s\n[INFO] Finished at: 2020-07-22T19:12:42-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-22T17:14:23Z", "url": "https://github.com/apache/helix/pull/1167", "merged": true, "mergeCommit": {"oid": "e218607e24b8dab08c8494876f9acae9b3a72faa"}, "closed": true, "closedAt": "2020-07-23T18:02:57Z", "author": {"login": "NealSun96"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3MqEuAH2gAyNDU1MjQ4OTE0OjU0MTM1MWU1NzkwYjIyNzk5MTRhYTA3OGQ3MmMyNWQwYzE2YzYyZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3kqUDgFqTQ1Mzc3Nzc1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "541351e5790b2279914aa078d72c25d0c16c62f5", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/541351e5790b2279914aa078d72c25d0c16c62f5", "committedDate": "2020-07-21T20:56:44Z", "message": "initial change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "committedDate": "2020-07-21T21:57:25Z", "message": "Make modifiable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTI2Njcy", "url": "https://github.com/apache/helix/pull/1167#pullrequestreview-453526672", "createdAt": "2020-07-22T17:19:10Z", "commit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxOToxMFrOG1sckg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyMzo1MVrOG1snqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NTkyMg==", "bodyText": "The current baseline assignment record does not contain all resources assignment....", "url": "https://github.com/apache/helix/pull/1167#discussion_r458955922", "createdAt": "2020-07-22T17:19:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1Njc3Mw==", "bodyText": "containsAll() will iterate through resources anyway. So just do the loop without check here.", "url": "https://github.com/apache/helix/pull/1167#discussion_r458956773", "createdAt": "2020-07-22T17:20:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NzAyNQ==", "bodyText": "currentBaseline.putIfAbsent() ?", "url": "https://github.com/apache/helix/pull/1167#discussion_r458957025", "createdAt": "2020-07-22T17:20:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");\n-      currentBaseline = currentStateOutput.getAssignment(resources);\n+      for (Map.Entry<String, ResourceAssignment> entry : currentStateOutput.getAssignment(resources)\n+          .entrySet()) {\n+        if (resources.contains(entry.getKey()) && !currentBaseline.containsKey(entry.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODc2MA==", "bodyText": "getAssignment() is very expensive, let's do it for the missing resources only. If you do it for all resources, the algorithm performance would be impacted.", "url": "https://github.com/apache/helix/pull/1167#discussion_r458958760", "createdAt": "2020-07-22T17:23:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");\n-      currentBaseline = currentStateOutput.getAssignment(resources);\n+      for (Map.Entry<String, ResourceAssignment> entry : currentStateOutput.getAssignment(resources)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d92c0a82767b570f4db56213f172e3e036a682", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/b3d92c0a82767b570f4db56213f172e3e036a682", "committedDate": "2020-07-22T18:46:10Z", "message": "Modify getBestPossible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjAyNzQw", "url": "https://github.com/apache/helix/pull/1167#pullrequestreview-453602740", "createdAt": "2020-07-22T19:03:15Z", "commit": {"oid": "b3d92c0a82767b570f4db56213f172e3e036a682"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af8f136455679c3352201d4781fcb3ebb35f73c", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/4af8f136455679c3352201d4781fcb3ebb35f73c", "committedDate": "2020-07-23T00:35:43Z", "message": "Added test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzc3NzUw", "url": "https://github.com/apache/helix/pull/1167#pullrequestreview-453777750", "createdAt": "2020-07-23T00:54:43Z", "commit": {"oid": "4af8f136455679c3352201d4781fcb3ebb35f73c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}