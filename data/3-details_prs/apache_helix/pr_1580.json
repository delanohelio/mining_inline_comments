{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0ODM1NjY0", "number": 1580, "title": "Update the internal fields of the Data Providr when overriding the data through set methods.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1578\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nIt was observed that the set methods in the Helix Data Provider classes, which are used but the Helix tools or tests, are not updating the derived fields.\nThis makes the override incomplete and it causes some potential issues when the tools are used.\nThis PR ensures that the set methods are modifying important derived fields.\nTests\n\n The following tests are written for this issue:\n\nThe main changed logic has been covered by the existing tests.\nIt is hard, and maybe not a good idea to cover all the possible util tool usages.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures:\n[ERROR]   TestDisableCustomCodeRunner.test:236 expected: but was:\n[INFO]\n[ERROR] Tests run: 1252, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:32 h\n[INFO] Finished at: 2020-12-08T16:37:00-08:00\n[INFO] ------------------------------------------------------------------------\nRerun the failed test:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.117 s - in org.apache.helix.integration.TestDisableCustomCodeRunner\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 18.469 s\n[INFO] Finished at: 2020-12-08T17:36:03-08:00\n[INFO] ------------------------------------------------------------------------\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-12-09T01:38:19Z", "url": "https://github.com/apache/helix/pull/1580", "merged": true, "mergeCommit": {"oid": "367523124896b6af737f25b1fb5f7deffac35582"}, "closed": true, "closedAt": "2020-12-16T18:36:57Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkQbXkgH2gAyNTM0ODM1NjY0OmI5NDFhM2M2NWRjYWU5Mjk5MGQwYWE1MmJiMDA1MjM4MDE3MzMyNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmzVvqAFqTU1Mzk3NDQ5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/b941a3c65dcae92990d0aa52bb00523801733250", "committedDate": "2020-12-08T20:46:53Z", "message": "Update the internal fields of the Data Providr when overriding the data through set methods.\n\nIt was observed that the set methods, which are used but the Helix tools or tests, are not updating the derived fields.\nThis makes the override incomplete and it causes some potential issues when the tools are used.\nThis PR ensures that the set methods are modifying important derived fields."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjY3NDEw", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-548667410", "createdAt": "2020-12-09T22:29:14Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoyOToxNVrOICscdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoyOToxNVrOICscdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5NjI0Nw==", "bodyText": "why here we use getClusterConfig() while later in setClusterConfig we use _clusterConfig?\nIn fact,\n  public ClusterConfig getClusterConfig() {\n    return _clusterConfig;\n  }\n\nany specific reason?", "url": "https://github.com/apache/helix/pull/1580#discussion_r539696247", "createdAt": "2020-12-09T22:29:15Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -384,8 +384,8 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _instanceMessagesCache.updateRelayMessages(_liveInstanceCache.getPropertyMap(),\n         _currentStateCache.getParticipantStatesMap());\n \n-    updateIdealRuleMap();\n-    updateDisabledInstances();\n+    updateIdealRuleMap(getClusterConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Njc2Mzkw", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-548676390", "createdAt": "2020-12-09T22:44:34Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0NDozNFrOICs8bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0NDozNFrOICs8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNDQzMQ==", "bodyText": "again, is clusterConfig passed in would always to the same as _clusterConfig?", "url": "https://github.com/apache/helix/pull/1580#discussion_r539704431", "createdAt": "2020-12-09T22:44:34Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -744,30 +747,31 @@ private void updateOfflineInstanceHistory(HelixDataAccessor accessor) {\n     _updateInstanceOfflineTime = false;\n   }\n \n-  private void updateDisabledInstances() {\n+  private void updateDisabledInstances(Collection<InstanceConfig> instanceConfigs,\n+      ClusterConfig clusterConfig) {\n     // Move the calculating disabled instances to refresh\n     _disabledInstanceForPartitionMap.clear();\n     _disabledInstanceSet.clear();\n-    for (InstanceConfig config : _instanceConfigCache.getPropertyMap().values()) {\n+    for (InstanceConfig config : instanceConfigs) {\n       Map<String, List<String>> disabledPartitionMap = config.getDisabledPartitionsMap();\n       if (!config.getInstanceEnabled()) {\n         _disabledInstanceSet.add(config.getInstanceName());\n       }\n       for (String resource : disabledPartitionMap.keySet()) {\n         if (!_disabledInstanceForPartitionMap.containsKey(resource)) {\n-          _disabledInstanceForPartitionMap.put(resource, new HashMap<String, Set<String>>());\n+          _disabledInstanceForPartitionMap.put(resource, new HashMap<>());\n         }\n         for (String partition : disabledPartitionMap.get(resource)) {\n           if (!_disabledInstanceForPartitionMap.get(resource).containsKey(partition)) {\n-            _disabledInstanceForPartitionMap.get(resource).put(partition, new HashSet<String>());\n+            _disabledInstanceForPartitionMap.get(resource).put(partition, new HashSet<>());\n           }\n           _disabledInstanceForPartitionMap.get(resource).get(partition)\n               .add(config.getInstanceName());\n         }\n       }\n     }\n-    if (_clusterConfig != null && _clusterConfig.getDisabledInstances() != null) {\n-      _disabledInstanceSet.addAll(_clusterConfig.getDisabledInstances().keySet());\n+    if (clusterConfig != null && clusterConfig.getDisabledInstances() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Njc5Nzg0", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-548679784", "createdAt": "2020-12-09T22:50:55Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1MDo1NVrOICtItg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1MDo1NVrOICtItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNzU3NA==", "bodyText": "This seems to be non-essential too, right? The problem is in the setClusterConfig and setInstanceConfig", "url": "https://github.com/apache/helix/pull/1580#discussion_r539707574", "createdAt": "2020-12-09T22:50:55Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -384,8 +384,8 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _instanceMessagesCache.updateRelayMessages(_liveInstanceCache.getPropertyMap(),\n         _currentStateCache.getParticipantStatesMap());\n \n-    updateIdealRuleMap();\n-    updateDisabledInstances();\n+    updateIdealRuleMap(getClusterConfig());\n+    updateDisabledInstances(getInstanceConfigMap().values(), getClusterConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTQwOTg4", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-549540988", "createdAt": "2020-12-10T19:40:47Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo0MDo0OFrOIDaNGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo0MDo0OFrOIDaNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0NTk3Nw==", "bodyText": "Then why this place we don't use getClusterConfig().\nEither way it is find to me. But please do use one approach.", "url": "https://github.com/apache/helix/pull/1580#discussion_r540445977", "createdAt": "2020-12-10T19:40:48Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -418,6 +418,8 @@ public ClusterConfig getClusterConfig() {\n   public void setClusterConfig(ClusterConfig clusterConfig) {\n     _clusterConfig = clusterConfig;\n     refreshAbnormalStateResolverMap(_clusterConfig);\n+    updateIdealRuleMap(_clusterConfig);\n+    updateDisabledInstances(getInstanceConfigMap().values(), _clusterConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjU1NTk4", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-549655598", "createdAt": "2020-12-10T22:28:03Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTc0NDk3", "url": "https://github.com/apache/helix/pull/1580#pullrequestreview-553974497", "createdAt": "2020-12-16T18:35:16Z", "commit": {"oid": "b941a3c65dcae92990d0aa52bb00523801733250"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4163, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}