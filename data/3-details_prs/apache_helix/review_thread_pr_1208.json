{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODg2NjEw", "number": 1208, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMTowNFrOEUejrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0N1rOEU1A0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTA3NjMwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMTowNFrOG6tD5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozODozOFrOG7AnRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA==", "bodyText": "Is there a reason DynamicTaskConfig doesn't use inheritance here?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464208868", "createdAt": "2020-08-03T06:01:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzOTM4NA==", "bodyText": "The reason is that when reading the config using BaseDataAccessor, a ZNRecord is returned and at runtime a ClassCastException is thrown when trying to cast it to DynamicTaskConfig.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464439384", "createdAt": "2020-08-03T14:12:11Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA=="}, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTIyMA==", "bodyText": "In that case, this field should be final.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529220", "createdAt": "2020-08-03T16:38:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA=="}, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE2NTYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTowNFrOG7AoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1OTowMVrOG7DW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTQzMw==", "bodyText": "What are these getters and setters for?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529433", "createdAt": "2020-08-03T16:39:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NDE4NQ==", "bodyText": "The setter should be removed due to making _taskConfig final. But the getter is needed to be passed to create() in BaseDataAccessor when first writing the ZNRecord to ZK.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464574185", "createdAt": "2020-08-03T17:59:01Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTQzMw=="}, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE2NzQ3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTozNlrOG7ApOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOTozNlrOG7ApOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTcyMg==", "bodyText": "JarFilePath? or getLocalJarFilePath? Let's try to use descriptive variable/method names.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529722", "createdAt": "2020-08-03T16:39:36Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE2ODk3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MDowMlrOG7AqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNzoxMVrOG7Dm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTk1OA==", "bodyText": "Typo.\nAlso, why do you ever need to set the task version after-the-fact?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529958", "createdAt": "2020-08-03T16:40:02Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Set the address of the JAR file containing the task\n+   * @param jarFile\n+   */\n+  public void setJarFile(String jarFile) {\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Set the task version\n+   * @param taskVersion\n+   */\n+  public void seTaskVersion(String taskVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODI3MA==", "bodyText": "There was a misunderstanding on my part, all the setters should be removed. Thank you for pointing it out.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464578270", "createdAt": "2020-08-03T18:07:11Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Set the address of the JAR file containing the task\n+   * @param jarFile\n+   */\n+  public void setJarFile(String jarFile) {\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Set the task version\n+   * @param taskVersion\n+   */\n+  public void seTaskVersion(String taskVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTk1OA=="}, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3MjQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTowNFrOG7AsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTowNFrOG7AsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDUxOQ==", "bodyText": "Overall, let's go over this class and make sure we do not have methods (Getters and setters) that we don't/shouldn't need. Think about which fields should be immutable?\nAlso, let's put a focus on descriptive variable/method names as well.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464530519", "createdAt": "2020-08-03T16:41:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjcyMDY4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MjoyNVrOG7PMjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MjoyNVrOG7PMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODE0Mw==", "bodyText": "Nit: Rename to getTaskConfigZNRecord?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768143", "createdAt": "2020-08-04T02:52:25Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjcyMjAyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MzoyM1rOG7PNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDowOTowN1rOG7QWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ==", "bodyText": "Since we have a TaskFactory - Task Class mapping, do we want a map here instead of two separate lists? How do we match them up otherwise?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768369", "createdAt": "2020-08-04T02:53:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTUyNA==", "bodyText": "My reasoning here was that there must be a single TaskFactory, but there could be multiple Task classes (to be invoked depending on the command parameters). So only Task is a list but TaskFactory is a String. Is the assumption flawed?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464769524", "createdAt": "2020-08-04T02:57:40Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3Mjg0MQ==", "bodyText": "I see. Thanks for the clarification. In that case, this makes sense. Basically, this factory refers to the factory that can instantiate any implementations of Task.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464772841", "createdAt": "2020-08-04T03:10:34Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NzEwOA==", "bodyText": "Yes, exactly.", "url": "https://github.com/apache/helix/pull/1208#discussion_r464787108", "createdAt": "2020-08-04T04:09:07Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjcyMjgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1Mzo1NlrOG7PN8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1Mzo1NlrOG7PN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODQ5Ng==", "bodyText": "Nit: TASK_FACTORY for consistency?", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768496", "createdAt": "2020-08-04T02:53:56Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjc1NTM3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0N1rOG7PhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0N1rOG7PhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM4NQ==", "bodyText": "Let's rename TASK_PATH to DYNAMICALLY_LOADED_TASK_PATH or something. TASK_PATH might add confusion because we actually use /PROPERTYSTORE/TaskRebalancer/", "url": "https://github.com/apache/helix/pull/1208#discussion_r464773385", "createdAt": "2020-08-04T03:12:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";\n+  /**\n+   * The path for dynamic task configs\n+   */\n+  public static final String TASK_PATH = \"/TASK_DEFINITION\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a579b70c8b39295670a84ed922666590b319331"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1299, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}