{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzU1MzI2", "number": 1456, "title": "Fix Periodic rebalancer Timer leak", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n#1453 Race condition cause Timer leak in GenericHelixController\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nWe found a periodic rebalance's Timer leakage issue during log analysis. In current startPeriodRebalance, two thread may interference with each other. This may result in one timer got canceled twice, two timers are created with one timer leaked.\n\n  void startPeriodRebalance(long period, HelixManager manager) {\n    if (period != _timerPeriod) {\n      logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n      if (_periodicalRebalanceTimer != null) {\n        _periodicalRebalanceTimer.cancel();                  <<<------ \n      } \n      _periodicalRebalanceTimer =\n          new Timer(\"GenericHelixController_\" + _clusterName + \"_periodical_Timer\", true);     <<<-----\n     ......\n  }\n\nThis PR changes Timer to use a SingleThreadScheduledExecutor and adds a synchronized block in start/stop PeriodRebalance.\nTests\n\n The following tests are written for this issue:\n\nNA\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures: \n[ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:214 expected:<4> but was:<3>\n[INFO]\n[ERROR] Tests run: 1234, Failures: 1, Errors: 0, Skipped: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:23 h\n\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-09T18:30:45Z", "url": "https://github.com/apache/helix/pull/1456", "merged": true, "mergeCommit": {"oid": "41c4d48b263128e65f36c3243bfb1b2fdab9f038"}, "closed": true, "closedAt": "2020-10-26T19:13:59Z", "author": {"login": "xyuanlu"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR_QINgFqTUwNzAyMjUwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVKmXWABqjM5MTE1MTUzMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDIyNTA5", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-507022509", "createdAt": "2020-10-13T02:13:13Z", "commit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoxMzoxM1rOHgS9vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjozNToxNVrOHgTTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzE5OQ==", "bodyText": "Just lock the _periodicalRebalanceExecutor?\n&\nHave you tried the atomic reference solution that we discussed? I think that one is easier.", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627199", "createdAt": "2020-10-13T02:13:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n   long _timerPeriod = Long.MAX_VALUE;\n+  private final Object _lock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzgyMQ==", "bodyText": "Is this check necessary?", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627821", "createdAt": "2020-10-13T02:15:29Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n-      if (_periodicalRebalanceTimer != null) {\n-        _periodicalRebalanceTimer.cancel();\n+      ScheduledFuture lastScheduledFuture = null;\n+      synchronized (_lock) {\n+        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg==", "bodyText": "I think this check needs to be included in the critical section too.", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627992", "createdAt": "2020-10-13T02:16:09Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODQ2NA==", "bodyText": "This changes the logic. Keep it as it was, please.\nInterrupt it may cause some unexpected result. One example, the newly scheduled rebalance is scheduled with a delay. If you cancel the previous one by interrupt, then there might be a very long period that no rebalance is triggered.", "url": "https://github.com/apache/helix/pull/1456#discussion_r503628464", "createdAt": "2020-10-13T02:18:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n-      if (_periodicalRebalanceTimer != null) {\n-        _periodicalRebalanceTimer.cancel();\n+      ScheduledFuture lastScheduledFuture = null;\n+      synchronized (_lock) {\n+        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {\n+          lastScheduledFuture = _periodicRebalancerFutureTasks;\n+        }\n+        _timerPeriod = period;\n+        _periodicRebalancerFutureTasks = _periodicalRebalanceExecutor\n+            .scheduleAtFixedRate(new RebalanceTask(manager, ClusterEventType.PeriodicalRebalance),\n+                _timerPeriod, _timerPeriod, TimeUnit.MILLISECONDS);\n+      }\n+      if (lastScheduledFuture != null) {\n+        lastScheduledFuture.cancel(true /* mayInterruptIfRunning */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODUyNw==", "bodyText": "Same here.", "url": "https://github.com/apache/helix/pull/1456#discussion_r503628527", "createdAt": "2020-10-13T02:18:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -352,11 +361,11 @@ void startPeriodRebalance(long period, HelixManager manager) {\n    */\n   void stopPeriodRebalance() {\n     logger.info(\"Controller stopping periodical rebalance timer at period \" + _timerPeriod);\n-    if (_periodicalRebalanceTimer != null) {\n-      _periodicalRebalanceTimer.cancel();\n-      _periodicalRebalanceTimer = null;\n-      _timerPeriod = Long.MAX_VALUE;\n-      logger.info(\"Controller stopped periodical rebalance timer at period \" + _timerPeriod);\n+    synchronized (_lock) {\n+      if (_periodicRebalancerFutureTasks != null && !_periodicRebalancerFutureTasks.isCancelled()) {\n+        _periodicRebalancerFutureTasks.cancel(true /* mayInterruptIfRunning */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMjY0Mg==", "bodyText": "Why need to cancel the task while stopPeriodRebalance is called here?", "url": "https://github.com/apache/helix/pull/1456#discussion_r503632642", "createdAt": "2020-10-13T02:35:15Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1299,6 +1308,10 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n   }\n \n   public void shutdown() throws InterruptedException {\n+    if (_periodicRebalancerFutureTasks != null) {\n+      _periodicRebalancerFutureTasks.cancel(false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDkzNzY5", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-507093769", "createdAt": "2020-10-13T06:07:27Z", "commit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowNzoyN1rOHgWqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowNzoyN1rOHgWqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NzgwMg==", "bodyText": "We totally only have one SingleThreadScheduledExecutor at most for each genericHelixController object, right? This sounds like per resource group has one. Can we make it clear the life cycle of SingleThreadScheduledExecutor is the same as genericHelixController?", "url": "https://github.com/apache/helix/pull/1456#discussion_r503687802", "createdAt": "2020-10-13T06:07:27Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDk1NTQx", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-507095541", "createdAt": "2020-10-13T06:11:24Z", "commit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMToyNFrOHgWwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMToyNFrOHgWwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA==", "bodyText": "Does this shutdown kill the thread immediately? I think not.\nShall we provide an shutDownNow which kill the thread immediately? That would be useful for tests.", "url": "https://github.com/apache/helix/pull/1456#discussion_r503689234", "createdAt": "2020-10-13T06:11:24Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1299,6 +1308,10 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n   }\n \n   public void shutdown() throws InterruptedException {\n+    if (_periodicRebalancerFutureTasks != null) {\n+      _periodicRebalancerFutureTasks.cancel(false);\n+    }\n+    _periodicalRebalanceExecutor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NjQwMzg0", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-507640384", "createdAt": "2020-10-13T16:46:22Z", "commit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NjoyMlrOHgwTgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NjoyMlrOHgwTgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzkwNQ==", "bodyText": "_periodicRebalancerFutureTasks -> _periodicRebalancerFutureTask?  Should there always be only 1 (periodical) task?", "url": "https://github.com/apache/helix/pull/1456#discussion_r504107905", "createdAt": "2020-10-13T16:46:22Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private ScheduledFuture _periodicRebalancerFutureTasks = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/31885df1202f73bbd9068926463f0f6b5f59d74e", "committedDate": "2020-10-09T18:26:43Z", "message": "fix timer"}, "afterCommit": {"oid": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/dc09da01da783f6e9d83aa6351b5e9271b71ba10", "committedDate": "2020-10-14T20:55:32Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d45c59c39f960d8ec64b22b92755188e78490168", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/d45c59c39f960d8ec64b22b92755188e78490168", "committedDate": "2020-10-15T17:49:21Z", "message": "address comments"}, "afterCommit": {"oid": "8acfd63559737493d24a361121485abe47747591", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8acfd63559737493d24a361121485abe47747591", "committedDate": "2020-10-15T17:51:07Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8acfd63559737493d24a361121485abe47747591", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8acfd63559737493d24a361121485abe47747591", "committedDate": "2020-10-15T17:51:07Z", "message": "address comments"}, "afterCommit": {"oid": "8f2fd94e54349da2153dbe861440ba5111cd9c3e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8f2fd94e54349da2153dbe861440ba5111cd9c3e", "committedDate": "2020-10-20T19:43:19Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f2fd94e54349da2153dbe861440ba5111cd9c3e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/8f2fd94e54349da2153dbe861440ba5111cd9c3e", "committedDate": "2020-10-20T19:43:19Z", "message": "address comments"}, "afterCommit": {"oid": "a0564e9c46578fb6507b8448fd6d45b36541b4a6", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0564e9c46578fb6507b8448fd6d45b36541b4a6", "committedDate": "2020-10-20T19:44:21Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTQ4ODQy", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-513148842", "createdAt": "2020-10-20T21:29:30Z", "commit": {"oid": "a0564e9c46578fb6507b8448fd6d45b36541b4a6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyOTozMFrOHlR1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjowMTo0NVrOHlSxmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTUzNg==", "bodyText": "Should we use shutDownNow() here then? You could add something like this:\n _periodicalRebalanceExecutor.shutdown();\n stopPeriodRebalance();\nshutdownOnDemandTimer();\nif (!_periodicalRebalanceExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\n          _periodicalRebalanceExecutor.shutdownNow(); }\nThis is also suggested here https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html. This way you could make sure there's no leakage.", "url": "https://github.com/apache/helix/pull/1456#discussion_r508851536", "createdAt": "2020-10-20T21:29:30Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1299,6 +1308,10 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n   }\n \n   public void shutdown() throws InterruptedException {\n+    if (_periodicRebalancerFutureTasks != null) {\n+      _periodicRebalancerFutureTasks.cancel(false);\n+    }\n+    _periodicalRebalanceExecutor.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw==", "bodyText": "When you initialize the executor service, you might want to setRemoveOnCancelPolicy to true, so the cancelled tasks are immediately removed from the work queue at time of cancellation. Otherwise, there could be memory leak in the work queue, might be a minor issue if we don't cancel tasks for many times, but if we cancel tasks frequently, you should consider adding this.", "url": "https://github.com/apache/helix/pull/1456#discussion_r508861643", "createdAt": "2020-10-20T21:50:19Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,13 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0564e9c46578fb6507b8448fd6d45b36541b4a6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2Njk3MQ==", "bodyText": "Second JJ's comment. IMO since the set of this value is inside critical section, the read should be included too. Theoretically you could get a bad value.", "url": "https://github.com/apache/helix/pull/1456#discussion_r508866971", "createdAt": "2020-10-20T22:01:45Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg=="}, "originalCommit": {"oid": "31885df1202f73bbd9068926463f0f6b5f59d74e"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0564e9c46578fb6507b8448fd6d45b36541b4a6", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0564e9c46578fb6507b8448fd6d45b36541b4a6", "committedDate": "2020-10-20T19:44:21Z", "message": "address comments"}, "afterCommit": {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "committedDate": "2020-10-21T00:58:14Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDU1NzM3", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-514055737", "createdAt": "2020-10-21T18:24:55Z", "commit": {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyNDo1NVrOHl8hJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyNDo1NVrOHl8hJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MDg4Ng==", "bodyText": "Could supurious wake up can impact this?  I am not sure why we would like to wait here? Are we worrying about the partial task running? If it wakes up and return false, it will kill thread immediately. There is no difference as we kill it at first beginning.", "url": "https://github.com/apache/helix/pull/1456#discussion_r509550886", "createdAt": "2020-10-21T18:24:55Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1307,6 +1315,11 @@ public void shutdown() throws InterruptedException {\n     logger.info(\"Shutting down {} pipeline\", Pipeline.Type.TASK.name());\n     shutdownPipeline(_taskEventThread, _taskEventQueue);\n \n+    if (!_periodicalRebalanceExecutor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjY0NTQ2", "url": "https://github.com/apache/helix/pull/1456#pullrequestreview-514264546", "createdAt": "2020-10-21T23:42:53Z", "commit": {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e22bd24ca7036135f77f59165617a66566c79e", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/18e22bd24ca7036135f77f59165617a66566c79e", "committedDate": "2020-10-22T23:30:15Z", "message": "fix timer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5238c130ffc4369a601addf137a37ffafad612c6", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/5238c130ffc4369a601addf137a37ffafad612c6", "committedDate": "2020-10-22T23:30:15Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0655c421cbadf8310183d054e83266dbcd1ec47c", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/0655c421cbadf8310183d054e83266dbcd1ec47c", "committedDate": "2020-10-22T23:30:15Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a554574079fc68fba97cbbd0621b4cb224410a", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/89a554574079fc68fba97cbbd0621b4cb224410a", "committedDate": "2020-10-22T23:30:15Z", "message": "address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "committedDate": "2020-10-21T00:58:14Z", "message": "address comments"}, "afterCommit": {"oid": "89a554574079fc68fba97cbbd0621b4cb224410a", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/89a554574079fc68fba97cbbd0621b4cb224410a", "committedDate": "2020-10-22T23:30:15Z", "message": "address comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}