{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NTkxMTE0", "number": 1329, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxMjo1MlrOEd5vXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxNDoyOVrOEd5wfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzkwMTcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxMjo1MlrOHJVw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjozNDo0MVrOHJWHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NTgxNg==", "bodyText": "This is the same as recordJob2?", "url": "https://github.com/apache/helix/pull/1329#discussion_r479555816", "createdAt": "2020-08-28T22:12:52Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {\n+  protected HelixDataAccessor _accessor;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 1;\n+    super.beforeClass();\n+  }\n+\n+  @AfterClass()\n+  public void afterClass() throws Exception {\n+    super.afterClass();\n+  }\n+\n+  @Test\n+  public void testCurrentStateNull() throws Exception {\n+    String workflowName1 = TestHelper.getTestMethodName() + \"_1\";\n+    String workflowName2 = TestHelper.getTestMethodName() + \"_2\";\n+\n+    Workflow.Builder builder1 = new Workflow.Builder(workflowName1);\n+    Workflow.Builder builder2 = new Workflow.Builder(workflowName2);\n+\n+    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName1)\n+        .setNumberOfTasks(5).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    JobConfig.Builder jobBuilder2 = new JobConfig.Builder().setWorkflow(workflowName2)\n+        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    builder1.addJob(\"JOB0\", jobBuilder1);\n+    builder2.addJob(\"JOB0\", jobBuilder2);\n+\n+    _driver.start(builder1.build());\n+    _driver.start(builder2.build());\n+\n+    String namespacedJobName1 = TaskUtil.getNamespacedJobName(workflowName1, \"JOB0\");\n+    String namespacedJobName2 = TaskUtil.getNamespacedJobName(workflowName2, \"JOB0\");\n+\n+    _driver.pollForJobState(workflowName1, namespacedJobName1, TaskState.IN_PROGRESS);\n+    _driver.pollForJobState(workflowName2, namespacedJobName2, TaskState.IN_PROGRESS);\n+\n+    // Get the current states of Participant0\n+    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n+    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n+    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n+    String jobCurrentStatePath1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName1;\n+    String jobCurrentStatePath2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName2;\n+\n+    // Read the current states of Participant0 and make sure they have been created\n+    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n+      ZNRecord recordJob1 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath1, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordJob2 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath2, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordTask = _manager.getHelixDataAccessor().getBaseDataAccessor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MTUyMw==", "bodyText": "Correct. Fixed. Thanks.", "url": "https://github.com/apache/helix/pull/1329#discussion_r479561523", "createdAt": "2020-08-28T22:34:41Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {\n+  protected HelixDataAccessor _accessor;\n+\n+  @BeforeClass\n+  public void beforeClass() throws Exception {\n+    _numPartitions = 1;\n+    _numNodes = 1;\n+    super.beforeClass();\n+  }\n+\n+  @AfterClass()\n+  public void afterClass() throws Exception {\n+    super.afterClass();\n+  }\n+\n+  @Test\n+  public void testCurrentStateNull() throws Exception {\n+    String workflowName1 = TestHelper.getTestMethodName() + \"_1\";\n+    String workflowName2 = TestHelper.getTestMethodName() + \"_2\";\n+\n+    Workflow.Builder builder1 = new Workflow.Builder(workflowName1);\n+    Workflow.Builder builder2 = new Workflow.Builder(workflowName2);\n+\n+    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName1)\n+        .setNumberOfTasks(5).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    JobConfig.Builder jobBuilder2 = new JobConfig.Builder().setWorkflow(workflowName2)\n+        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n+        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n+\n+    builder1.addJob(\"JOB0\", jobBuilder1);\n+    builder2.addJob(\"JOB0\", jobBuilder2);\n+\n+    _driver.start(builder1.build());\n+    _driver.start(builder2.build());\n+\n+    String namespacedJobName1 = TaskUtil.getNamespacedJobName(workflowName1, \"JOB0\");\n+    String namespacedJobName2 = TaskUtil.getNamespacedJobName(workflowName2, \"JOB0\");\n+\n+    _driver.pollForJobState(workflowName1, namespacedJobName1, TaskState.IN_PROGRESS);\n+    _driver.pollForJobState(workflowName2, namespacedJobName2, TaskState.IN_PROGRESS);\n+\n+    // Get the current states of Participant0\n+    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n+    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n+    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n+    String jobCurrentStatePath1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName1;\n+    String jobCurrentStatePath2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0\n+        + \"/CURRENTSTATES/\" + sessionIdP0 + \"/\" + namespacedJobName2;\n+\n+    // Read the current states of Participant0 and make sure they have been created\n+    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n+      ZNRecord recordJob1 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath1, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordJob2 = _manager.getHelixDataAccessor().getBaseDataAccessor()\n+          .get(jobCurrentStatePath2, new Stat(), AccessOption.PERSISTENT);\n+      ZNRecord recordTask = _manager.getHelixDataAccessor().getBaseDataAccessor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NTgxNg=="}, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzkwNDYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxNDoyOVrOHJVyjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoyMjoyOVrOHJV7Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NjIzNg==", "bodyText": "I understand that this is meant to be like an Integration test, but would it make more sense to stay in TestAssignableInstanceManager? Or should there be a unit test in TestAssignableInstanceManager?", "url": "https://github.com/apache/helix/pull/1329#discussion_r479556236", "createdAt": "2020-08-28T22:14:29Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1ODQxNQ==", "bodyText": "Your point is somehow valid. But I prefer to keep as integration test and make sure pipeline runs no matter what currentState is. This way we can make sure null currentState will not effect any other stage as well.", "url": "https://github.com/apache/helix/pull/1329#discussion_r479558415", "createdAt": "2020-08-28T22:22:29Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/java/org/apache/helix/integration/task/TestTaskCurrentStateNull.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.apache.helix.integration.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.model.CurrentState;\n+import org.apache.helix.task.JobConfig;\n+import org.apache.helix.task.TaskState;\n+import org.apache.helix.task.TaskUtil;\n+import org.apache.helix.task.Workflow;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.helix.zookeeper.impl.client.ZkClient;\n+import org.apache.zookeeper.data.Stat;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This test makes sure that controller will not be blocked if there exists null current states.\n+ */\n+public class TestTaskCurrentStateNull extends TaskTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NjIzNg=="}, "originalCommit": {"oid": "ae6452bb6f34e06eecbc300c3bdc2ae557ff4c17"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}