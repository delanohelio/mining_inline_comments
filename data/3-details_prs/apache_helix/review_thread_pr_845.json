{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjY5MzUz", "number": 845, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0MzoyMFrODkegaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxMDozM1rODke0kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc1MTQ3OnYy", "diffSide": "LEFT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0MzoyMFrOFw0kgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxNTo1NVrOFw1J7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzI4MQ==", "bodyText": "Don't forget to remove unused import for ZkClientException", "url": "https://github.com/apache/helix/pull/845#discussion_r386737281", "createdAt": "2020-03-03T00:43:20Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java", "diffHunk": "@@ -516,7 +514,7 @@ public void testZNRecordStreamingSerializerWriteSizeLimit() throws Exception {\n       try {\n         zkClient.writeData(path, largeRecord);\n         Assert.fail(\"Data should not written to ZK because data size exceeds writeSizeLimit!\");\n-      } catch (ZkClientException expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0Njg2MA==", "bodyText": "It is still used by deletePath().", "url": "https://github.com/apache/helix/pull/845#discussion_r386746860", "createdAt": "2020-03-03T01:15:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java", "diffHunk": "@@ -516,7 +514,7 @@ public void testZNRecordStreamingSerializerWriteSizeLimit() throws Exception {\n       try {\n         zkClient.writeData(path, largeRecord);\n         Assert.fail(\"Data should not written to ZK because data size exceeds writeSizeLimit!\");\n-      } catch (ZkClientException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzI4MQ=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc1NTkzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0NTozOVrOFw0nOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxNjozOFrOFw1K8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzk3OQ==", "bodyText": "You prefer 1204 over 1024? :)", "url": "https://github.com/apache/helix/pull/845#discussion_r386737979", "createdAt": "2020-03-03T00:45:39Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzEyMA==", "bodyText": "This is to leave some buffer space. 1024 will fail due to the additional metadata info in the node.", "url": "https://github.com/apache/helix/pull/845#discussion_r386747120", "createdAt": "2020-03-03T01:16:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzk3OQ=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc3Njk5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo1Njo0MVrOFw0zwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxNzozOVrOFw1L7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MTE4Ng==", "bodyText": "Nit: maybe it is good to use verify() and Assert to make sure the path is deleted? Do we also need to consider deleting \"/tmp\" if it did not exist originally as you would create it?", "url": "https://github.com/apache/helix/pull/845#discussion_r386741186", "createdAt": "2020-03-03T00:56:41Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');\n+      }\n+      String buf = sb.toString();\n+      for (int i = 0; i < 1024; i++) {\n+        oversizeZNRecord.setSimpleField(Integer.toString(i), buf);\n+      }\n+\n+      // ensure /tmp exists for the test\n+      if (!zkClient.exists(\"/tmp\")) {\n+        zkClient.create(\"/tmp\", null, CreateMode.PERSISTENT);\n+      }\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler\n+          createCallback = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler();\n+      zkClient.asyncCreate(\"/tmp/async\", null, CreateMode.PERSISTENT, createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), 0);\n+\n+      // try to create oversize node, should fail\n+      zkClient.asyncCreate(\"/tmp/asyncOversize\", oversizeZNRecord, CreateMode.PERSISTENT,\n+          createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), KeeperException.Code.MarshallingError);\n+\n+      ZNRecord normalZNRecord = new ZNRecord(\"normal\");\n+      normalZNRecord.setSimpleField(\"key\", buf);\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.SetDataCallbackHandler\n+          setDataCallbackHandler = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.SetDataCallbackHandler();\n+      zkClient.asyncSetData(\"/tmp/async\", normalZNRecord, -1, setDataCallbackHandler);\n+      setDataCallbackHandler.waitForSuccess();\n+      Assert.assertEquals(setDataCallbackHandler.getRc(), 0);\n+\n+      zkClient.asyncSetData(\"/tmp/async\", oversizeZNRecord, -1, setDataCallbackHandler);\n+      setDataCallbackHandler.waitForSuccess();\n+      Assert.assertEquals(setDataCallbackHandler.getRc(), KeeperException.Code.MarshallingError);\n+    } finally {\n+      if (originSizeLimit == null) {\n+        System.clearProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+      } else {\n+        System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES,\n+            originSizeLimit);\n+      }\n+      zkClient.delete(\"/tmp/async\");\n+      zkClient.delete(\"/tmp/asyncOversize\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzM3NA==", "bodyText": "It has been taken care of by after method call. And if the delete fails, there is nothing I can do except to fail the test. But it is not really this test is testing for. So let's don't over test here.", "url": "https://github.com/apache/helix/pull/845#discussion_r386747374", "createdAt": "2020-03-03T01:17:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');\n+      }\n+      String buf = sb.toString();\n+      for (int i = 0; i < 1024; i++) {\n+        oversizeZNRecord.setSimpleField(Integer.toString(i), buf);\n+      }\n+\n+      // ensure /tmp exists for the test\n+      if (!zkClient.exists(\"/tmp\")) {\n+        zkClient.create(\"/tmp\", null, CreateMode.PERSISTENT);\n+      }\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler\n+          createCallback = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler();\n+      zkClient.asyncCreate(\"/tmp/async\", null, CreateMode.PERSISTENT, createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), 0);\n+\n+      // try to create oversize node, should fail\n+      zkClient.asyncCreate(\"/tmp/asyncOversize\", oversizeZNRecord, CreateMode.PERSISTENT,\n+          createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), KeeperException.Code.MarshallingError);\n+\n+      ZNRecord normalZNRecord = new ZNRecord(\"normal\");\n+      normalZNRecord.setSimpleField(\"key\", buf);\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.SetDataCallbackHandler\n+          setDataCallbackHandler = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.SetDataCallbackHandler();\n+      zkClient.asyncSetData(\"/tmp/async\", normalZNRecord, -1, setDataCallbackHandler);\n+      setDataCallbackHandler.waitForSuccess();\n+      Assert.assertEquals(setDataCallbackHandler.getRc(), 0);\n+\n+      zkClient.asyncSetData(\"/tmp/async\", oversizeZNRecord, -1, setDataCallbackHandler);\n+      setDataCallbackHandler.waitForSuccess();\n+      Assert.assertEquals(setDataCallbackHandler.getRc(), KeeperException.Code.MarshallingError);\n+    } finally {\n+      if (originSizeLimit == null) {\n+        System.clearProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+      } else {\n+        System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES,\n+            originSizeLimit);\n+      }\n+      zkClient.delete(\"/tmp/async\");\n+      zkClient.delete(\"/tmp/asyncOversize\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MTE4Ng=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc5MDUxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMTowMzo1N1rOFw071A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTowMToxMVrOFw4ahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MzI1Mg==", "bodyText": "Nit: It seems this is redundant? Do you want to make the byte[] array final? If so, you may do declare data as final without initializing it to null.\nfinal byte[] data;", "url": "https://github.com/apache/helix/pull/845#discussion_r386743252", "createdAt": "2020-03-03T01:03:57Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1720,33 +1721,43 @@ public Stat writeDataGetStat(final String path, Object datat, final int expected\n   public void asyncCreate(final String path, Object datat, final CreateMode mode,\n       final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = (datat == null ? null : serialize(datat, path));\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper()\n-            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                // Arrays.asList(DEFAULT_ACL),\n-                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                    data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = (datat == null ? null : serialize(datat, path));\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;\n+    retryUntilConnected(() -> {\n+      ((ZkConnection) getConnection()).getZookeeper()\n+          .create(path, finalData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n+              // Arrays.asList(DEFAULT_ACL),\n+              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n+                  finalData == null ? 0 : finalData.length, false));\n+      return null;\n     });\n   }\n \n   // Async Data Accessors\n   public void asyncSetData(final String path, Object datat, final int version,\n       final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = serialize(datat, path);\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n-            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = serialize(datat, path);\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0Nzk3MQ==", "bodyText": "The thing is that I don't want to put the retryUntilConnected() method into the try catch block.\nWith the current structure, final data is not possible.", "url": "https://github.com/apache/helix/pull/845#discussion_r386747971", "createdAt": "2020-03-03T01:19:40Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1720,33 +1721,43 @@ public Stat writeDataGetStat(final String path, Object datat, final int expected\n   public void asyncCreate(final String path, Object datat, final CreateMode mode,\n       final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = (datat == null ? null : serialize(datat, path));\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper()\n-            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                // Arrays.asList(DEFAULT_ACL),\n-                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                    data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = (datat == null ? null : serialize(datat, path));\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;\n+    retryUntilConnected(() -> {\n+      ((ZkConnection) getConnection()).getZookeeper()\n+          .create(path, finalData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n+              // Arrays.asList(DEFAULT_ACL),\n+              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n+                  finalData == null ? 0 : finalData.length, false));\n+      return null;\n     });\n   }\n \n   // Async Data Accessors\n   public void asyncSetData(final String path, Object datat, final int version,\n       final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = serialize(datat, path);\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n-            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = serialize(datat, path);\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MzI1Mg=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMDI2Mw==", "bodyText": "I think it is possible:\nfinal byte[] data;\ntry {\n  data = serialize(datat, path);\n} catch (ZkMarshallingError e) {\n  cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n     new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n  return;\n}\n\nretryUntilConnected();", "url": "https://github.com/apache/helix/pull/845#discussion_r386800263", "createdAt": "2020-03-03T05:01:11Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1720,33 +1721,43 @@ public Stat writeDataGetStat(final String path, Object datat, final int expected\n   public void asyncCreate(final String path, Object datat, final CreateMode mode,\n       final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = (datat == null ? null : serialize(datat, path));\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper()\n-            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                // Arrays.asList(DEFAULT_ACL),\n-                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                    data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = (datat == null ? null : serialize(datat, path));\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;\n+    retryUntilConnected(() -> {\n+      ((ZkConnection) getConnection()).getZookeeper()\n+          .create(path, finalData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n+              // Arrays.asList(DEFAULT_ACL),\n+              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n+                  finalData == null ? 0 : finalData.length, false));\n+      return null;\n     });\n   }\n \n   // Async Data Accessors\n   public void asyncSetData(final String path, Object datat, final int version,\n       final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n     final long startT = System.currentTimeMillis();\n-    final byte[] data = serialize(datat, path);\n-    retryUntilConnected(new Callable<Object>() {\n-      @Override\n-      public Object call() throws Exception {\n-        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n-            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n-                data == null ? 0 : data.length, false));\n-        return null;\n-      }\n+    byte[] data = null;\n+    try {\n+      data = serialize(datat, path);\n+    } catch (ZkMarshallingError e) {\n+      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n+          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n+      return;\n+    }\n+    final byte[] finalData = data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MzI1Mg=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc5ODk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMTowODoxMVrOFw1A4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyMjozNFrOFw1R2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NDU0NQ==", "bodyText": "Nit: Do you also want to check before and after: if the node exists or not to double check the node is not created?", "url": "https://github.com/apache/helix/pull/845#discussion_r386744545", "createdAt": "2020-03-03T01:08:11Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');\n+      }\n+      String buf = sb.toString();\n+      for (int i = 0; i < 1024; i++) {\n+        oversizeZNRecord.setSimpleField(Integer.toString(i), buf);\n+      }\n+\n+      // ensure /tmp exists for the test\n+      if (!zkClient.exists(\"/tmp\")) {\n+        zkClient.create(\"/tmp\", null, CreateMode.PERSISTENT);\n+      }\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler\n+          createCallback = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler();\n+      zkClient.asyncCreate(\"/tmp/async\", null, CreateMode.PERSISTENT, createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), 0);\n+\n+      // try to create oversize node, should fail\n+      zkClient.asyncCreate(\"/tmp/asyncOversize\", oversizeZNRecord, CreateMode.PERSISTENT,\n+          createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), KeeperException.Code.MarshallingError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODg4OQ==", "bodyText": "Good idea, let me add it.", "url": "https://github.com/apache/helix/pull/845#discussion_r386748889", "createdAt": "2020-03-03T01:22:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');\n+      }\n+      String buf = sb.toString();\n+      for (int i = 0; i < 1024; i++) {\n+        oversizeZNRecord.setSimpleField(Integer.toString(i), buf);\n+      }\n+\n+      // ensure /tmp exists for the test\n+      if (!zkClient.exists(\"/tmp\")) {\n+        zkClient.create(\"/tmp\", null, CreateMode.PERSISTENT);\n+      }\n+\n+      org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler\n+          createCallback = new org.apache.helix.zookeeper.zkclient.callback.ZkAsyncCallbacks.CreateCallbackHandler();\n+      zkClient.asyncCreate(\"/tmp/async\", null, CreateMode.PERSISTENT, createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), 0);\n+\n+      // try to create oversize node, should fail\n+      zkClient.asyncCreate(\"/tmp/asyncOversize\", oversizeZNRecord, CreateMode.PERSISTENT,\n+          createCallback);\n+      createCallback.waitForSuccess();\n+      Assert.assertEquals(createCallback.getRc(), KeeperException.Code.MarshallingError);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NDU0NQ=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgwMzA0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxMDozM1rOFw1DbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzo1MjoxMVrOFxa2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NTE5Nw==", "bodyText": "Random is good to make sure compressed data is not that small!", "url": "https://github.com/apache/helix/pull/845#discussion_r386745197", "createdAt": "2020-03-03T01:10:33Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NDQyMg==", "bodyText": "@jiajunwang sb.append(ran.nextInt(26) + 'a'); doesn't add a char to the string builder but an integer.\nWe still have to cast it: sb.append((char) (ran.nextInt(26) + 'a'));", "url": "https://github.com/apache/helix/pull/845#discussion_r387364422", "createdAt": "2020-03-03T23:52:11Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -745,4 +749,65 @@ public void testWaitForEstablishedSession() {\n     // Recover zk server for later tests.\n     _zkServer.start();\n   }\n+\n+  @Test\n+  public void testAsyncWriteOperations() {\n+    ZkClient zkClient = new ZkClient(ZK_ADDR);\n+    String originSizeLimit =\n+        System.getProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES);\n+    System.setProperty(ZkSystemPropertyKeys.ZK_SERIALIZER_ZNRECORD_WRITE_SIZE_LIMIT_BYTES, \"2000\");\n+    try {\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+      ZNRecord oversizeZNRecord = new ZNRecord(\"Oversize\");\n+      StringBuilder sb = new StringBuilder(1204);\n+      Random ran = new Random();\n+      for (int i = 0; i < 1024; i++) {\n+        sb.append(ran.nextInt(26) + 'a');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NTE5Nw=="}, "originalCommit": {"oid": "f4ac3d31ee3480ffb457aabe57f8b0480191dbef"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1315, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}