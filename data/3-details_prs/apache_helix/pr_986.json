{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzI5MDgx", "number": 986, "title": "Adjust the auto rebalancer state assignment logic to reduce top state transition.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#985\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe old state assignment logic assign the states to selected nodes according to the priority of the current replica state that is on the instance. Moreover, the sorting algorithm is designed to prioritize both current topstate and current secondary states equally. The result is that we will have premature mastership handoff to a current seconardy state host before the real desired master host is ready. For example,\n\nThe current states are: [N1:M, N2:S, N3,S]\nThe desired states are: [N4:M, N2:S, N1:S]\nDue to the sorting logic based on current states, we will have a transient preference list ordered like: [N2, N1, N4]. In which case, the controller will assign master to N2 before N4 has a slave state replica.\nWhen N4 finishes the Offline to Slave transition, the same sorting logic will sort the preference list to be: [N4, N2, N1]. Then we have another mastership handoff.\nTo be clear, we don't want step 3. But only the state transition in step 4.\n\nIn this PR, we refactor the sorting logic so that it will only move the master whenever the candidate has a \"ready\" state replica, in which case, only one mastership handoff happens.\nTests\n\n The following tests are written for this issue:\n\nAdd the test scenario to TestAbstractRebalancer.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\n[ERROR]   TestWorkflowTimeout.testWorkflowTimeoutWhenWorkflowCompleted:116 expected: but was:\n[INFO]\n[ERROR] Tests run: 1145, Failures: 2, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:21 h\n[INFO] Finished at: 2020-04-30T23:30:07-07:00\n[INFO] ------------------------------------------------------------------------\nRerun:\n[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 30.931 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 37.212 s\n[INFO] Finished at: 2020-04-30T23:32:13-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-05-01T22:48:13Z", "url": "https://github.com/apache/helix/pull/986", "merged": true, "mergeCommit": {"oid": "a1aba60a6701692f42ed650cae88827a26e93183"}, "closed": true, "closedAt": "2020-05-06T22:48:16Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdKLq4gFqTQwNDQ0NDk0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcewdckgBqjMzMTA1Mjg4ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDQ0OTQ5", "url": "https://github.com/apache/helix/pull/986#pullrequestreview-404444949", "createdAt": "2020-05-01T23:21:40Z", "commit": {"oid": "30816eece784e18df6fedc1412a27bf39d6cd9f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyMTo0MFrOGPYG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyMTo0MFrOGPYG3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3Njc5Ng==", "bodyText": "I think you already sorted the preference list based on the state. Why not just replace the looping of preference list with the sorted list but add this logic?\nThis logic makes two order of preference list intersected each other that logic is not very clear.", "url": "https://github.com/apache/helix/pull/986#discussion_r418776796", "createdAt": "2020-05-01T23:21:40Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java", "diffHunk": "@@ -305,45 +305,60 @@ public static int getStateCount(String state, StateModelDefinition stateModelDef\n     Set<String> liveAndEnabled = new HashSet<>(liveInstances);\n     liveAndEnabled.removeAll(disabledInstancesForPartition);\n \n-    for (String state : statesPriorityList) {\n-      // Use the the specially ordered preferenceList for choosing instance for top state.\n-      if (state.equals(statesPriorityList.get(0))) {\n-        List<String> preferenceListForTopState = new ArrayList<>(preferenceList);\n-        Collections.sort(preferenceListForTopState,\n-            new TopStatePreferenceListComparator(currentStateMap, stateModelDef));\n-        preferenceList = preferenceListForTopState;\n-      }\n+    // Sort the instances based on replicas' state priority in the current state\n+    List<String> sortedPreferenceList = new ArrayList<>(preferenceList);\n+    sortedPreferenceList.sort(new StatePriorityComparator(currentStateMap, stateModelDef));\n \n+    // Assign the state to the instances that appear in the preference list.\n+    for (String state : statesPriorityList) {\n       int stateCount =\n           getStateCount(state, stateModelDef, liveAndEnabled.size(), preferenceList.size());\n       for (String instance : preferenceList) {\n         if (stateCount <= 0) {\n-          break;\n+          break; // continue assigning for the next state\n+        }\n+        if (assigned.contains(instance) || !liveAndEnabled.contains(instance)) {\n+          continue; // continue checking for the next available instance\n         }\n-        if (!assigned.contains(instance) && liveAndEnabled.contains(instance)) {\n-          if (HelixDefinedState.ERROR.toString().equals(currentStateMap.get(instance))) {\n-            bestPossibleStateMap.put(instance, HelixDefinedState.ERROR.toString());\n-          } else {\n-            bestPossibleStateMap.put(instance, state);\n-            stateCount--;\n+        String proposedInstance = instance;\n+        // Additional check and alternate the assignment for reducing top state handoff.\n+        if (state.equals(stateModelDef.getTopState()) && !stateModelDef.getSecondTopStates()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30816eece784e18df6fedc1412a27bf39d6cd9f2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODUwMzUw", "url": "https://github.com/apache/helix/pull/986#pullrequestreview-406850350", "createdAt": "2020-05-06T17:50:45Z", "commit": {"oid": "30816eece784e18df6fedc1412a27bf39d6cd9f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ce5da03d9341174794d00fbb49d914383b7d98", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/89ce5da03d9341174794d00fbb49d914383b7d98", "committedDate": "2020-05-06T22:30:49Z", "message": "Adjust the auto rebalancer state assignment logic to reduce top state transition.\n\nThe old state assignment logic assign the states to selected nodes according to the priority of the current replica state that is on the instance. Moreover, the sorting algorithm is designed to prioritize both current topstate and current secondary states equally. The result is that we will have premature mastership handoff to a current seconardy state host before the real desired master host is ready. For example,\n1. The current states are: [N1:M, N2:S, N3,S]\n2. The desired states are: [N4:M, N2:S, N1:S]\n3. Due to the sorting logic based on current states, we will have a transient preference list ordered like: [N2, N1, N4]. In which case, the controller will assign master to N2 before N4 has a slave state replica.\n4. When N4 finishes the Offline to Slave transition, the same sorting logic will sort the preference list to be: [N4, N2, N1]. Then we have another mastership handoff.\nTo be clear, we don't want step 3. But only the state transition in step 4.\n\nIn this PR, we refactor the sorting logic so that it will only move the master whenever the candidate has a \"ready\" state replica, in which case, only one mastership handoff happens."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30816eece784e18df6fedc1412a27bf39d6cd9f2", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/30816eece784e18df6fedc1412a27bf39d6cd9f2", "committedDate": "2020-05-01T21:02:45Z", "message": "Adjust the auto rebalancer state assignment logic to reduce top state transition.\n\nThe old state assignment logic assign the states to selected nodes according to the priority of the current replica state that is on the instance. Moreover, the sorting algorithm is designed to prioritize both current topstate and current secondary states equally. The result is that we will have premature mastership handoff to a current seconardy state host before the real desired master host is ready. For example,\n1. The current states are: [N1:M, N2:S, N3,S]\n2. The desired states are: [N4:M, N2:S, N1:S]\n3. Due to the sorting logic based on current states, we will have a transient preference list ordered like: [N2, N1, N4]. In which case, the controller will assign master to N2 before N4 has a slave state replica.\n4. When N4 finishes the Offline to Slave transition, the same sorting logic will sort the preference list to be: [N4, N2, N1]. Then we have another mastership handoff.\nTo be clear, we don't want step 3. But only the state transition in step 4.\n\nIn this PR, we refactor the sorting logic so that it will only move the master whenever the candidate has a \"ready\" state replica, in which case, only one mastership handoff happens."}, "afterCommit": {"oid": "89ce5da03d9341174794d00fbb49d914383b7d98", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/89ce5da03d9341174794d00fbb49d914383b7d98", "committedDate": "2020-05-06T22:30:49Z", "message": "Adjust the auto rebalancer state assignment logic to reduce top state transition.\n\nThe old state assignment logic assign the states to selected nodes according to the priority of the current replica state that is on the instance. Moreover, the sorting algorithm is designed to prioritize both current topstate and current secondary states equally. The result is that we will have premature mastership handoff to a current seconardy state host before the real desired master host is ready. For example,\n1. The current states are: [N1:M, N2:S, N3,S]\n2. The desired states are: [N4:M, N2:S, N1:S]\n3. Due to the sorting logic based on current states, we will have a transient preference list ordered like: [N2, N1, N4]. In which case, the controller will assign master to N2 before N4 has a slave state replica.\n4. When N4 finishes the Offline to Slave transition, the same sorting logic will sort the preference list to be: [N4, N2, N1]. Then we have another mastership handoff.\nTo be clear, we don't want step 3. But only the state transition in step 4.\n\nIn this PR, we refactor the sorting logic so that it will only move the master whenever the candidate has a \"ready\" state replica, in which case, only one mastership handoff happens."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4800, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}