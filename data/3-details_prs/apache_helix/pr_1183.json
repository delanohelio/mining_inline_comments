{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTEwMzQw", "number": 1183, "title": "Add HelixManager constructor with RealmAwareZkConnectionConfig", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #1182\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nPreviously, there wasn't a way to use HelixManager with a custom routing data ZK connection config. This new way of constructing HelixManager allows users to use HelixManager with a custom RealmAwareZkConnectionConfig.\nTests\n\n The following tests are written for this issue:\n\ntestZKHelixManager\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nzookeeper-api:\n[ERROR] Failures: \n[ERROR]   TestRawZkClient.testGetChildrenOnLargeNumChildren:908 Should not successfully get children.\n[INFO] \n[ERROR] Tests run: 39, Failures: 1, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n\nThis is a known failure due to #1186\nhelix-core:\n[ERROR] Failures: \n[ERROR]   TestZKCallback.testInvocation:188\n[ERROR]   TestEnableCompression.testEnableCompressionResource:117 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1156, Failures: 2, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n\n\nFor the two failures, the tests were run individually.\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.056 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-28T23:28:54Z", "url": "https://github.com/apache/helix/pull/1183", "merged": true, "mergeCommit": {"oid": "eeb738dbd8090516bf81b783b41b770774f92a76"}, "closed": true, "closedAt": "2020-08-13T22:31:25Z", "author": {"login": "narendly"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5gSd_AFqTQ1NzExODQ5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8tyK-AFqTQ2MzY5NzI4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTE4NDk0", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-457118494", "createdAt": "2020-07-29T00:34:41Z", "commit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDozNDo0MlrOG4kc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDo0NDo1N1rOG4kngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw==", "bodyText": "I think the plan is only allowing the property construct through HelixPropertyFactory. Shall we just make this constructor package-private? Also the other set methods.\n@zhangmeng916 Please correct me if this is not the plan.", "url": "https://github.com/apache/helix/pull/1183#discussion_r461970673", "createdAt": "2020-07-29T00:34:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated\n   public HelixManagerProperty(Properties helixManagerProperties, CloudConfig cloudConfig) {\n     _helixCloudProperty = new HelixCloudProperty(cloudConfig);\n     setVersion(helixManagerProperties.getProperty(SystemPropertyKeys.HELIX_MANAGER_VERSION));\n     setHealthReportLatency(\n         helixManagerProperties.getProperty(SystemPropertyKeys.PARTICIPANT_HEALTH_REPORT_LATENCY));\n   }\n \n+  public HelixManagerProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDc2OQ==", "bodyText": "I agree with this change.", "url": "https://github.com/apache/helix/pull/1183#discussion_r461970769", "createdAt": "2020-07-29T00:35:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzM3OA==", "bodyText": "helixManagerProperty.RealmAwareZkConnectionConfig now contains zk connection information that possibly conflicts with zkAddress. This is dangerous.\nActually, I already see one potential bug in the method getMetadataStoreConnectionString. Which always returns the zkAddress only without checking the connectionConfig.\nPlease ensure we are only recording realmAwareZkConnectionConfig. Let's try to remove _zkAddress for good. Or at least update this field according to the realmAwareZkConnectionConfig input.\nOther configurations such as sessionTimeout are in the same situation.", "url": "https://github.com/apache/helix/pull/1183#discussion_r461973378", "createdAt": "2020-07-29T00:44:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -225,9 +226,24 @@ public ZKHelixManager(String clusterName, String instanceName, InstanceType inst\n       String zkAddress, HelixManagerStateListener stateListener,\n       HelixManagerProperty helixManagerProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Njk3NzE3", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-457697717", "createdAt": "2020-07-29T16:36:55Z", "commit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjozNjo1NlrOG5AzEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTo0MFrOG5CAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNTA5MA==", "bodyText": "The doc is not written in a coherent way.", "url": "https://github.com/apache/helix/pull/1183#discussion_r462435090", "createdAt": "2020-07-29T16:36:56Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +68,38 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig. HelixManagerProperty given must contain a valid ZkConnectionConfig.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDA2NQ==", "bodyText": "This flexibility is a bit weird. I don't know whether users would follow it. Can we force them to have only one set up instead of using the override, like to validate the input.", "url": "https://github.com/apache/helix/pull/1183#discussion_r462440065", "createdAt": "2020-07-29T16:45:22Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +68,38 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig. HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig is given in HelixManagerProperty, zkAddr field will be overriden.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr will be overriden if a valid ZkConnectionConfig is given in helixManagerProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MTUxOQ==", "bodyText": "The original plan was to let users only get the manager property through getHelixManagerProperty with default value, and then allow them to make modification to override the fields in it. I remember there was some concern about users accidentally changing it. We can revisit the assumption though.", "url": "https://github.com/apache/helix/pull/1183#discussion_r462451519", "createdAt": "2020-07-29T17:04:11Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated\n   public HelixManagerProperty(Properties helixManagerProperties, CloudConfig cloudConfig) {\n     _helixCloudProperty = new HelixCloudProperty(cloudConfig);\n     setVersion(helixManagerProperties.getProperty(SystemPropertyKeys.HELIX_MANAGER_VERSION));\n     setHealthReportLatency(\n         helixManagerProperties.getProperty(SystemPropertyKeys.PARTICIPANT_HEALTH_REPORT_LATENCY));\n   }\n \n+  public HelixManagerProperty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDg0NQ==", "bodyText": "fyi, the reason that we have a couple of fields like \"version\", \"latency\" here is just to give an example of how to migrate system properties to Helix manager property. A \"TODO\" should have been added here for completeness in future work.", "url": "https://github.com/apache/helix/pull/1183#discussion_r462454845", "createdAt": "2020-07-29T17:09:40Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated\n   public HelixManagerProperty(Properties helixManagerProperties, CloudConfig cloudConfig) {\n     _helixCloudProperty = new HelixCloudProperty(cloudConfig);\n     setVersion(helixManagerProperties.getProperty(SystemPropertyKeys.HELIX_MANAGER_VERSION));\n     setHealthReportLatency(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a76cff42bb7020cdb7286b0f3871df0234c682f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b797f2b9e2d28b8ef55c349c22d2d3f22c8fdb0", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/1b797f2b9e2d28b8ef55c349c22d2d3f22c8fdb0", "committedDate": "2020-07-29T23:58:19Z", "message": "Add HelixManager constructor that accepts RealmAwareZkConnectionConfig via HelixManagerProperty\n\nPreviously, there wasn't a way to use HelixManager with a custom routing data ZK connection config. This new way of constructing HelixManager allows users to use HelixManager with a custom RealmAwareZkConnectionConfig."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10f34323428e220ad55d97aa74f5fa99d7bf2b07", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/10f34323428e220ad55d97aa74f5fa99d7bf2b07", "committedDate": "2020-07-29T23:58:19Z", "message": "Add validation for zkAddress and ZkConnectionConfig in HelixMananger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f623770bd0bb8b5c39a6a3905f32451be8fac14", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/5f623770bd0bb8b5c39a6a3905f32451be8fac14", "committedDate": "2020-07-29T23:58:19Z", "message": "Deprecate HelixPropertyFactory and add HelixManagerProperty.Builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2284264c1efd9b8d0055fa3c1ffa0ad9cd4b38f", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/b2284264c1efd9b8d0055fa3c1ffa0ad9cd4b38f", "committedDate": "2020-07-29T23:58:19Z", "message": "Update logging and handle zkAddress = null case in BucketDataAccessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778c8e41fc76860d8ee3db0c2118c705d4889209", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/778c8e41fc76860d8ee3db0c2118c705d4889209", "committedDate": "2020-07-29T23:58:19Z", "message": "Add more logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjU3MjU4", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-458657258", "createdAt": "2020-07-30T18:34:12Z", "commit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNDoxMlrOG5vFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo1MToyN1rOG5vqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw==", "bodyText": "Can we get rid of this constructor by allowing setup zkAddr in the HelixManagerProperty or in the RealmAwareZkConnectionConfig?", "url": "https://github.com/apache/helix/pull/1183#discussion_r463193523", "createdAt": "2020-07-30T18:34:12Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +64,39 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * NOTE: if both zkAddr and a valid ZkConnectionConfig are given in HelixManagerProperty, the\n+   * instantiation will fail - only one is required.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr\n+   * @param stateListener\n+   * @param helixManagerProperty\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, String zkAddr, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDE0Ng==", "bodyText": "extra *", "url": "https://github.com/apache/helix/pull/1183#discussion_r463194146", "createdAt": "2020-07-30T18:35:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixPropertyFactory.java", "diffHunk": "@@ -33,7 +33,7 @@\n import org.slf4j.LoggerFactory;\n \n \n-/**\n+/***", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NjE2OA==", "bodyText": "In addition, if we do so, then the HelixPropertyFactory can call the property builder to build a property even for the existing getHelixProperty API, right?\nSo it would be clean,\n\nCallers only call factory methods to get property.\nThe factory calls the property builder to get the new object.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463196168", "createdAt": "2020-07-30T18:39:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +64,39 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * NOTE: if both zkAddr and a valid ZkConnectionConfig are given in HelixManagerProperty, the\n+   * instantiation will fail - only one is required.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr\n+   * @param stateListener\n+   * @param helixManagerProperty\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, String zkAddr, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMjgxNg==", "bodyText": "As I pinged you in slack, if we can let RealmAwareZkConnectionConfig backward supports _zkAddress, then we can save tons of validations and branches code in this class.\nMoreover, we can simplify the code following this principle,\n\nnew APIs only accept RealmAwareZkConnectionConfig, we don't use zkAddress directly.\nfor older API, we create default RealmAwareZkConnectionConfig based on the zkAddress. So we don't have 2 possibilities in the internal code implementations.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463202816", "createdAt": "2020-07-30T18:51:27Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -131,6 +131,7 @@\n   private int _reportLatency;\n \n   protected RealmAwareZkClient _zkclient;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Njg1MzQ2", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-458685346", "createdAt": "2020-07-30T19:16:17Z", "commit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxNjoxN1rOG5wb8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxOTo0NVrOG5witw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNTYwMA==", "bodyText": "This description is not quite easy to follow.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463215600", "createdAt": "2020-07-30T19:16:17Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -19,19 +19,18 @@\n  * under the License.\n  */\n \n-/**\n- * factory that creates cluster managers\n- *\n- * for zk-based cluster managers, the getZKXXX(..zkClient) that takes a zkClient parameter\n- *   are intended for session expiry test purpose\n- */\n import org.apache.helix.manager.zk.HelixManagerStateListener;\n import org.apache.helix.manager.zk.ZKHelixManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n  * Obtain one of a set of Helix cluster managers, organized by the backing system.\n+ * factory that creates cluster managers\n+ *  *\n+ *  * for zk-based cluster managers, the getZKXXX(..zkClient) that takes a zkClient parameter\n+ *  *   are intended for session expiry test purpose", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNzMzNQ==", "bodyText": "Seems we will need to follow this patten:\nif (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED) || zkAddr == null)\nin a couple of different places. Is there a better way to represent? The first one is self explanatory, but the second one does not look straightforward. The doc for explanation is also in another file.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463217335", "createdAt": "2020-07-30T19:19:45Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/HelixPropertyFactory.java", "diffHunk": "@@ -88,8 +88,9 @@ private CloudConfig getCloudConfig(String zkAddress, String clusterName) {\n     CloudConfig cloudConfig;\n     RealmAwareZkClient dedicatedZkClient = null;\n     try {\n-      if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)) {\n-        // If the multi ZK config is enabled, use multi-realm mode with DedicatedZkClient\n+      if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED) || zkAddress == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "committedDate": "2020-07-30T20:04:21Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "committedDate": "2020-07-29T23:51:14Z", "message": "Add more logging"}, "afterCommit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "committedDate": "2020-07-30T20:04:21Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ2MTY5", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-458846169", "createdAt": "2020-07-31T00:23:30Z", "commit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyMzozMFrOG54HdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozMTo1N1rOG54QNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTQyOA==", "bodyText": "I think we shall not be blocked on this zkAddress argument. It can be discussed later.\nHow about this, to ensure we are not introducing more confusing, we don't this specific method. So for this class, either you give a zkAddress to get HM or you give a HelixManagerProperty to get the HM.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463341428", "createdAt": "2020-07-31T00:23:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +64,39 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * NOTE: if both zkAddr and a valid ZkConnectionConfig are given in HelixManagerProperty, the\n+   * instantiation will fail - only one is required.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr\n+   * @param stateListener\n+   * @param helixManagerProperty\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, String zkAddr, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, "originalCommit": {"oid": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTc3OQ==", "bodyText": "No need to remove final right?", "url": "https://github.com/apache/helix/pull/1183#discussion_r463341779", "createdAt": "2020-07-31T00:24:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -111,7 +111,7 @@\n   public static final int DEFAULT_MAX_DISCONNECT_THRESHOLD = 600; // Default to be a large number\n   private static final int DEFAULT_WAIT_CONNECTED_TIMEOUT = 10 * 1000;  // wait until connected for up to 10 seconds.\n \n-  protected final String _zkAddress;\n+  protected String _zkAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQ3Mw==", "bodyText": "Can we make this field final too? Since it is an input config.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463342473", "createdAt": "2020-07-31T00:27:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -131,6 +131,7 @@\n   private int _reportLatency;\n \n   protected RealmAwareZkClient _zkclient;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzE0Mw==", "bodyText": "Let's be strict here, I think even empty string is not allowed. The zkAddress shall be completely untouched.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463343143", "createdAt": "2020-07-31T00:29:56Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1464,4 +1471,48 @@ private RealmAwareZkClient resolveZkClient(HelixZkClientFactory zkClientFactory,\n   private String buildShardingKey() {\n     return _clusterName.charAt(0) == '/' ? _clusterName : \"/\" + _clusterName;\n   }\n+\n+  /**\n+   * Check that not both zkAddress and ZkConnectionConfig are set.\n+   * If zkAddress is not given and ZkConnectionConfig is given, check that ZkConnectionConfig has\n+   * a ZK path sharding key set because HelixManager must work on single-realm mode.\n+   * @param zkAddress\n+   * @param helixManagerProperty\n+   */\n+  private void validateZkConnectionSettings(String zkAddress,\n+      HelixManagerProperty helixManagerProperty) {\n+    if (helixManagerProperty != null && helixManagerProperty.getZkConnectionConfig() != null) {\n+      if (zkAddress != null && !zkAddress.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzY2OA==", "bodyText": "nit, I think just return \"None\" is enough. Since otherwise, the log string will look strange.", "url": "https://github.com/apache/helix/pull/1183#discussion_r463343668", "createdAt": "2020-07-31T00:31:57Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1464,4 +1471,48 @@ private RealmAwareZkClient resolveZkClient(HelixZkClientFactory zkClientFactory,\n   private String buildShardingKey() {\n     return _clusterName.charAt(0) == '/' ? _clusterName : \"/\" + _clusterName;\n   }\n+\n+  /**\n+   * Check that not both zkAddress and ZkConnectionConfig are set.\n+   * If zkAddress is not given and ZkConnectionConfig is given, check that ZkConnectionConfig has\n+   * a ZK path sharding key set because HelixManager must work on single-realm mode.\n+   * @param zkAddress\n+   * @param helixManagerProperty\n+   */\n+  private void validateZkConnectionSettings(String zkAddress,\n+      HelixManagerProperty helixManagerProperty) {\n+    if (helixManagerProperty != null && helixManagerProperty.getZkConnectionConfig() != null) {\n+      if (zkAddress != null && !zkAddress.isEmpty()) {\n+        throw new HelixException(\n+            \"ZKHelixManager: cannot have both ZkAddress and ZkConnectionConfig set!\");\n+      }\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+          helixManagerProperty.getZkConnectionConfig();\n+      if (connectionConfig.getZkRealmShardingKey() == null || connectionConfig\n+          .getZkRealmShardingKey().isEmpty()) {\n+        throw new HelixException(\n+            \"ZKHelixManager::ZK path sharding key must be set for ZKHelixManager! ZKHelixManager \"\n+                + \"is only available on single-realm mode.\");\n+      }\n+      _realmAwareZkConnectionConfig = connectionConfig;\n+    }\n+  }\n+\n+  /**\n+   * Resolve ZK connection info for logging purposes.\n+   * @return\n+   */\n+  private String getZkConnectionInfo() {\n+    String zkConnectionInfo;\n+    if (_zkAddress == null) {\n+      if (_helixManagerProperty != null && _helixManagerProperty.getZkConnectionConfig() != null) {\n+        zkConnectionInfo = _helixManagerProperty.getZkConnectionConfig().toString();\n+      } else {\n+        zkConnectionInfo = \"ZkAddr and ZkConnectionConfig are null!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03215cd849683c5ec9a28325c0c64c042c8b2476", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/03215cd849683c5ec9a28325c0c64c042c8b2476", "committedDate": "2020-08-06T22:50:42Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74b9022004337bc20d2e31e79cfef99f9260d20", "author": {"user": {"login": "narendly", "name": "Hunter Lee"}}, "url": "https://github.com/apache/helix/commit/a74b9022004337bc20d2e31e79cfef99f9260d20", "committedDate": "2020-08-06T23:05:08Z", "message": "add null checks for zkAddress"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjk3Mjgy", "url": "https://github.com/apache/helix/pull/1183#pullrequestreview-463697282", "createdAt": "2020-08-08T00:22:04Z", "commit": {"oid": "a74b9022004337bc20d2e31e79cfef99f9260d20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4593, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}