{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzcwMzE0", "number": 741, "title": "Fix ConcurrentModification exception in Workflow Garbage Collection", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR title:\nFixes #738\n\nDescription\n\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn workflow Garbage collection, there is possibility that we see ConcurrentMod exception\nwhile looping through the contexts. The reason behind this exception is that the contexts can be modified using other thread (i.e. controller's main thread or other Garbage Collection threads). This commit fixes this issue by first making a copy of the contexts and then leveraging try catch to avoid such exceptions.\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[ERROR] Tests run: 1083, Failures: 1, Errors: 0, Skipped: 2, Time elapsed: 4,194.441 s <<< FAILURE! - in TestSuite\n[ERROR] testSubscribeDataChange(org.apache.helix.manager.zk.TestZKWatch)  Time elapsed: 0.023 s  <<< FAILURE!\njava.lang.AssertionError: expected:<0> but was:<1>\nat org.apache.helix.manager.zk.TestZKWatch.testSubscribeDataChange(TestZKWatch.java:81)\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestZKWatch.testSubscribeDataChange:81 expected:<0> but was:<1>\n[INFO]\n[ERROR] Tests run: 1083, Failures: 1, Errors: 0, Skipped: 2\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:09 h\n[INFO] Finished at: 2020-02-10T13:27:31-08:00\n[INFO] ------------------------------------------------------------------------\nmvn test -Dtest=\"TestZKWatch\" result:\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.918 s - in org.apache.helix.manager.zk.TestZKWatch\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  6.069 s\n[INFO] Finished at: 2020-02-10T13:27:54-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-10T21:47:09Z", "url": "https://github.com/apache/helix/pull/741", "merged": true, "mergeCommit": {"oid": "12f11a357d4ee8859a408357c57b1cad854ed841"}, "closed": true, "closedAt": "2020-02-12T19:44:54Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDEiTygH2gAyMzczMzcwMzE0OjA4NDgyNTlhNjhmYzc3ZGJkMjNiODg0NDJlOGRhZWUxODE5ZGM1MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHXKtcAFqTM2MzE3OTg0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0848259a68fc77dbd23b88442e8daee1819dc522", "committedDate": "2020-02-10T22:04:57Z", "message": "Fix the possibile ConcurrentMod exception in Workflow Garbage Collection\n\nIn workflow Garbage collection, there is possbility that we see ConcurrentMod exception\nwhile looping through the context. This commit fixes this issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd655d56d6b027f3595544751b0d20f1d03c62e2", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/bd655d56d6b027f3595544751b0d20f1d03c62e2", "committedDate": "2020-02-10T22:02:06Z", "message": "mend"}, "afterCommit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0848259a68fc77dbd23b88442e8daee1819dc522", "committedDate": "2020-02-10T22:04:57Z", "message": "Fix the possibile ConcurrentMod exception in Workflow Garbage Collection\n\nIn workflow Garbage collection, there is possbility that we see ConcurrentMod exception\nwhile looping through the context. This commit fixes this issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzA2NTk0", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-356306594", "createdAt": "2020-02-10T22:18:40Z", "commit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxODo0MFrOFn3qAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMToxM1rOFn3unQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MDY1Nw==", "bodyText": "Can you merge these two if's?", "url": "https://github.com/apache/helix/pull/741#discussion_r377350657", "createdAt": "2020-02-10T22:18:40Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTE0MQ==", "bodyText": "Use {}\nYou can input the exception as the second parameter. You don't have to do e.getMessage().", "url": "https://github.com/apache/helix/pull/741#discussion_r377351141", "createdAt": "2020-02-10T22:19:41Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {\n+              toBeDeletedWorkflows.add(entry);\n+            }\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(String.format(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTgzNw==", "bodyText": "Use one \"!'.", "url": "https://github.com/apache/helix/pull/741#discussion_r377351837", "createdAt": "2020-02-10T22:21:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,35 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n+            if (cfg == null) {\n+              toBeDeletedWorkflows.add(entry);\n+            }\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(String.format(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!! Reason: %s\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0848259a68fc77dbd23b88442e8daee1819dc522"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/9694b81f701ac2ab8b2b43b8a6325fcf636697ea", "committedDate": "2020-02-11T02:03:25Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzkxNzQ4", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-356391748", "createdAt": "2020-02-11T02:33:02Z", "commit": {"oid": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjozMzowMlrOFn8G1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjozMzowMlrOFn8G1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMzU3NA==", "bodyText": "Do you clearly understand why and where ConcurrentModificationException is happening? This looks like we're just masking it with a try-catch. I don't think that's a fix. Could we identify why and where clearly first and could you please update the description with your findings? Then this try-catch shouldn't be necessary.", "url": "https://github.com/apache/helix/pull/741#discussion_r377423574", "createdAt": "2020-02-11T02:33:02Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,33 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    // toBeDeletedWorkflows is a set that contains the name of the workflows that their contexts\n+    // should be deleted.\n     Set<String> toBeDeletedWorkflows = new HashSet<>();\n-    for (Map.Entry<String, ZNRecord> entry : contexts.entrySet()) {\n-      if (entry.getValue() != null\n-          && entry.getValue().getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW)) {\n-        if (dataProvider.getWorkflowConfig(entry.getKey()) == null) {\n-          toBeDeletedWorkflows.add(entry.getKey());\n+    try {\n+      Set<String> existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+      for (String entry : existingWorkflowContexts) {\n+        if (entry != null) {\n+          WorkflowConfig cfg = dataProvider.getWorkflowConfig(entry);\n+          WorkflowContext ctx = dataProvider.getWorkflowContext(entry);\n+          if (ctx != null && ctx.getId().equals(TaskUtil.WORKFLOW_CONTEXT_KW) && cfg == null) {\n+            toBeDeletedWorkflows.add(entry);\n+          }\n         }\n       }\n+    } catch (Exception e) {\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9694b81f701ac2ab8b2b43b8a6325fcf636697ea"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/de0f8fb4506a2891b326542657b1e72576e97d31", "committedDate": "2020-02-11T18:10:41Z", "message": "fix reviewer comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDYzNjg4", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-357063688", "createdAt": "2020-02-11T23:08:45Z", "commit": {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowODo0NVrOFocfXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowODo0NVrOFocfXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDE0Mw==", "bodyText": "move this to where try-catch is?\nExplain why Map.keySet() throws CME w regards to copy constructor?", "url": "https://github.com/apache/helix/pull/741#discussion_r377954143", "createdAt": "2020-02-11T23:08:45Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1040,26 +1040,39 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n   /**\n    * The function that loops through the all existing workflow contexts and removes IdealState and\n    * workflow context of the workflow whose workflow config does not exist.\n+   * Try-catch has been used to avoid concurrent modification exception while doing deep copy. Since\n+   * Map.keySet() can produce concurrent modification exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDYzODk5", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-357063899", "createdAt": "2020-02-11T23:09:10Z", "commit": {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowOToxMFrOFocgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowOToxMFrOFocgBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDMxMA==", "bodyText": "\"workflow context names\"", "url": "https://github.com/apache/helix/pull/741#discussion_r377954310", "createdAt": "2020-02-11T23:09:10Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1040,26 +1040,39 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n   /**\n    * The function that loops through the all existing workflow contexts and removes IdealState and\n    * workflow context of the workflow whose workflow config does not exist.\n+   * Try-catch has been used to avoid concurrent modification exception while doing deep copy. Since\n+   * Map.keySet() can produce concurrent modification exception.\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    Set<String> existingWorkflowContexts;\n+    try {\n+      existingWorkflowContexts = new HashSet<>(dataProvider.getContexts().keySet());\n+    } catch (Exception e) {\n+      LOG.warn(\n+          \"Exception occurred while creating a list of all existing contexts with missing config!\",\n+          e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de0f8fb4506a2891b326542657b1e72576e97d31"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d5a284262b34ddc5dadecd623b96dfed9308a39", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/1d5a284262b34ddc5dadecd623b96dfed9308a39", "committedDate": "2020-02-12T00:51:25Z", "message": "Comment fixes"}, "afterCommit": {"oid": "db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "committedDate": "2020-02-12T00:54:14Z", "message": "Comment fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0c4f575e376e509e57e0d1bc617500449e5be047", "committedDate": "2020-02-12T00:56:42Z", "message": "Comment fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/db44ab0ca83b1cf79b9dd378f9937f9d14a221d9", "committedDate": "2020-02-12T00:54:14Z", "message": "Comment fixes"}, "afterCommit": {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/0c4f575e376e509e57e0d1bc617500449e5be047", "committedDate": "2020-02-12T00:56:42Z", "message": "Comment fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTQ3NzM4", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-357147738", "createdAt": "2020-02-12T02:11:07Z", "commit": {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTc5ODQ3", "url": "https://github.com/apache/helix/pull/741#pullrequestreview-363179847", "createdAt": "2020-02-24T06:00:41Z", "commit": {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowMDo0MlrOFtWSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowMDo0MlrOFtWSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTM4Mg==", "bodyText": "@alirezazamani Is there a specific reason why we don't change the contexts map below to a concurrent hash map and make it thread safe?\n  private Map<String, ZNRecord> _contextMap = new HashMap<>();\n\nWhat I can only see is performance concern when contexts modification is blocked by this copying. If performance is not that bad, I believe changing the contextMap to a concurrent hash map is the right fix.", "url": "https://github.com/apache/helix/pull/741#discussion_r383095382", "createdAt": "2020-02-24T06:00:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1043,23 +1043,40 @@ public static void purgeExpiredJobs(String workflow, WorkflowConfig workflowConf\n    * @param dataProvider\n    * @param manager\n    */\n-  public static void workflowGarbageCollection(WorkflowControllerDataProvider dataProvider,\n+  public static void workflowGarbageCollection(final WorkflowControllerDataProvider dataProvider,\n       final HelixManager manager) {\n     // Garbage collections for conditions where workflow context exists but config is missing.\n-    Map<String, ZNRecord> contexts = dataProvider.getContexts();\n-    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n-    HelixPropertyStore<ZNRecord> propertyStore = manager.getHelixPropertyStore();\n \n+    Set<String> existingContexts;\n+    /*\n+     * Here try-catch is used to avoid concurrent modification exception while doing deep copy.\n+     * Map.keySet() can produce concurrent modification exception.\n+     * Reason: If the map is modified while an iteration over the set is in progress, concurrent\n+     * modification exception will be thrown.\n+     */\n+    try {\n+      existingContexts = new HashSet<>(dataProvider.getContexts().keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4f575e376e509e57e0d1bc617500449e5be047"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}