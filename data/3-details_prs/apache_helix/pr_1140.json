{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzM2MzA2", "number": 1140, "title": "Shutdown the TaskStateModelFactory threads created in the tests.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1139\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe TaskStateModelFactory initialization creates a thread pool. The expectation is that the application code closes the thread pool and the threads when the participant instance is shutting down. In most cases, this means the JVM is going to be shutdown. So this operation is not a must. However, in the test cases, these thread pools leak thousands of threads.\nThis PR adds cleanup logic to shutdown thread pools that are created for the participant instances. Note that there is still thread leakage when the participants are created separately instead of using the general methods.\nTests\n\n The following tests are written for this issue:\n\nNo new tests.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nThis PR allows my MacBook to finish the tests. There are still some failures but it is the first time I saw the full test suite finishes without OutOfMemory! For sure we can fix those failures next.\nThe following result is what I got from the Linux desktop.\nhelix-core\n[ERROR] Failures:\n[ERROR]   TestTaskSchedulingTwoCurrentStates.testTargetedTaskTwoCurrentStates:150 expected: but was:\n[INFO]\n[ERROR] Tests run: 1151, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:17 h\n[INFO] Finished at: 2020-07-04T13:56:23-07:00\n[INFO] ------------------------------------------------------------------------\nrerun:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.791 s - in org.apache.helix.integration.task.TestTaskSchedulingTwoCurrentStates\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 25.598 s\n[INFO] Finished at: 2020-07-04T15:40:37-07:00\n[INFO] ------------------------------------------------------------------------\nhelix-rest\n[INFO] Tests run: 163, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 46.031 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 163, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 52.914 s\n[INFO] Finished at: 2020-07-04T15:55:23-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-04T22:58:25Z", "url": "https://github.com/apache/helix/pull/1140", "merged": true, "mergeCommit": {"oid": "3fc870815219d910c6e357b6b4ba843b2244c776"}, "closed": true, "closedAt": "2020-07-07T18:05:57Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxv9TSAH2gAyNDQ0MzM2MzA2OmNkY2JjNTA3NzZhZWQzOGM1MGFmMDQ5ZjBiNWZkOWIwMWY5NDdjZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcypishAH2gAyNDQ0MzM2MzA2OmY3OWQ2Y2ExZTAzNjlhMWM0NWUwMGFlNTViZTg1ZmRkNmI1MjQxMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cdcbc50776aed38c50af049f0b5fd9b01f947cdf", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/cdcbc50776aed38c50af049f0b5fd9b01f947cdf", "committedDate": "2020-07-04T22:40:52Z", "message": "Shutdown the TaskStateModelFactory threads created in the tests.\n\nThe TaskStateModelFactory initialization creates threadpool. The expectation is that the application code closes the threadpool and the threads when the participant instance is shuting down. In most cases, this means the JVM is going to be shutdown. So this operation is not a must. However, in the test cases, these threadpools leak thousands of the threads.\nThis PR adds cleanup logic to shutdown threadpools that are created for the partcipant instances. Note that there are still threads leakage when the participants are created separately instead of using the general methods."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA4NDc3", "url": "https://github.com/apache/helix/pull/1140#pullrequestreview-442708477", "createdAt": "2020-07-05T21:41:20Z", "commit": {"oid": "cdcbc50776aed38c50af049f0b5fd9b01f947cdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMTo0MToyMFrOGtFClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMTo0MToyMFrOGtFClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMTY4Ng==", "bodyText": "Nit: use the constant in TaskConstants instead of hard-coded string", "url": "https://github.com/apache/helix/pull/1140#discussion_r449921686", "createdAt": "2020-07-05T21:41:20Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java", "diffHunk": "@@ -181,12 +186,22 @@ protected void stopParticipants() {\n \n   protected void stopParticipant(int i) {\n     if (_participants.length <= i) {\n-      throw new HelixException(\n-          String.format(\"Can't stop participant %s, only %s participants\" + \"were set up.\", i,\n+      throw new HelixException(String\n+          .format(\"Can't stop participant %s, only %s participants\" + \"were set up.\", i,\n               _participants.length));\n     }\n-    if (_participants[i] != null && _participants[i].isConnected()) {\n-      _participants[i].syncStop();\n+    if (_participants[i] != null) {\n+      if (_participants[i].isConnected()) {\n+        _participants[i].syncStop();\n+      }\n+      // Shutdown the state model factories to close all threads.\n+      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n+      if (stateMachine != null) {\n+        StateModelFactory stateModelFactory = stateMachine.getStateModelFactory(\"Task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdcbc50776aed38c50af049f0b5fd9b01f947cdf"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA4NTA5", "url": "https://github.com/apache/helix/pull/1140#pullrequestreview-442708509", "createdAt": "2020-07-05T21:41:55Z", "commit": {"oid": "cdcbc50776aed38c50af049f0b5fd9b01f947cdf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79d6ca1e0369a1c45e00ae55be85fdd6b52412a", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/f79d6ca1e0369a1c45e00ae55be85fdd6b52412a", "committedDate": "2020-07-07T17:46:18Z", "message": "Address comment."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}