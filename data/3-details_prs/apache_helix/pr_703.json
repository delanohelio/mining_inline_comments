{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTMwMzI0", "number": 703, "title": "Created Helix distributed lock interface", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#702\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCreated a Helix distributed lock design with acquire, release, and getInfo functionalities.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n(Copy & paste the result of \"mvn test\")\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-23T19:36:46Z", "url": "https://github.com/apache/helix/pull/703", "merged": true, "mergeCommit": {"oid": "f029f96dcdc368dc4b656a05b2793bb3b0f62d36"}, "closed": true, "closedAt": "2020-01-30T21:39:17Z", "author": {"login": "mgao0"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9Pi4TgH2gAyMzY2NTMwMzI0OjlhZDA2NzUyNTY3YzZmYWI2ZjgxY2Q1Y2Q0ZjZkYjkxMTRlNjYzNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_ewJdAFqTM1MTA0MDY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/9ad06752567c6fab6f81cd5cd4f6db9114e66354", "committedDate": "2020-01-23T19:30:59Z", "message": "Created Helix distributed lock design (apache#702)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTYyNTQ5", "url": "https://github.com/apache/helix/pull/703#pullrequestreview-347562549", "createdAt": "2020-01-23T19:47:18Z", "commit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0NzoxOFrOFhKjCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0NzoxOFrOFhKjCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw==", "bodyText": "should this getLockInfo return a defined type (for example, LockInfo)?    Also, how does a piece of code check whether it owns the lock or not?", "url": "https://github.com/apache/helix/pull/703#discussion_r370320137", "createdAt": "2020-01-23T19:47:18Z", "author": {"login": "lei-xia"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was released, false if it could not be released\n+   */\n+  public boolean releaseLock();\n+\n+  /**\n+   * Retrieve the lock information, e.g. lock timeout, lock message, etc.\n+   * @return lock information\n+   */\n+  public Object getLockInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjgxMzcz", "url": "https://github.com/apache/helix/pull/703#pullrequestreview-347681373", "createdAt": "2020-01-23T23:44:53Z", "commit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo0NDo1M1rOFhQPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo0NDo1M1rOFhQPCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMzMyMw==", "bodyText": "Do we want public modifier here because the interface is already public? I don't think it is necessary. All abstract, default, and static methods in an interface are implicitly public, so you can omit the public modifier.\nDo we really need to return a boolean? I think it makes sense to return a boolean for a tryAcquire, but for acquire, I think void is enough and clean.\nHow about just naming acquire\nDo we want a tryAcquire with timeout?", "url": "https://github.com/apache/helix/pull/703#discussion_r370413323", "createdAt": "2020-01-23T23:44:53Z", "author": {"login": "huizhilu"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTU4MDA5", "url": "https://github.com/apache/helix/pull/703#pullrequestreview-348158009", "createdAt": "2020-01-24T18:57:58Z", "commit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1Nzo1OFrOFhnRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1OTo1NVrOFhnU2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ==", "bodyText": "Let's mention if this call is blocking or not in the comment.", "url": "https://github.com/apache/helix/pull/703#discussion_r370790821", "createdAt": "2020-01-24T18:57:58Z", "author": {"login": "jiajunwang"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTE3OA==", "bodyText": "What's the return if we release a new lock object?\nOr we try to lock a lock twice?", "url": "https://github.com/apache/helix/pull/703#discussion_r370791178", "createdAt": "2020-01-24T18:58:48Z", "author": {"login": "jiajunwang"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was released, false if it could not be released", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTY0Mg==", "bodyText": "This should be part of the API design. Please either create that class with full Java doc, or upload the design doc to github wiki.", "url": "https://github.com/apache/helix/pull/703#discussion_r370791642", "createdAt": "2020-01-24T18:59:55Z", "author": {"login": "jiajunwang"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was released, false if it could not be released\n+   */\n+  public boolean releaseLock();\n+\n+  /**\n+   * Retrieve the lock information, e.g. lock timeout, lock message, etc.\n+   * @return lock information\n+   */\n+  public Object getLockInfo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw=="}, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "committedDate": "2020-01-24T23:33:04Z", "message": "Added LockInfo interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Njk1OTgy", "url": "https://github.com/apache/helix/pull/703#pullrequestreview-348695982", "createdAt": "2020-01-27T14:21:00Z", "commit": {"oid": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDoyMTowMVrOFiEQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDoyMzoxNlrOFiEV2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NTc0OA==", "bodyText": "If we design the method for both types, it may end up with only one implementation at a time. What if user may have both use cases for same lock object?", "url": "https://github.com/apache/helix/pull/703#discussion_r371265748", "createdAt": "2020-01-27T14:21:01Z", "author": {"login": "junkaixue"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ=="}, "originalCommit": {"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2Njc3NA==", "bodyText": "Do we consider privilege override or something else? What is the scope of locking", "url": "https://github.com/apache/helix/pull/703#discussion_r371266774", "createdAt": "2020-01-27T14:22:48Z", "author": {"login": "junkaixue"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock for both nonblocking and blocking calls\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was successfully acquired,\n+   * false if the lock could not be acquired\n+   */\n+  boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was successfully released,\n+   * false if the locked is not locked or is not locked by the user,\n+   * or the lock could not be released\n+   */\n+  boolean releaseLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NzAzNA==", "bodyText": "the method name is too generic.", "url": "https://github.com/apache/helix/pull/703#discussion_r371267034", "createdAt": "2020-01-27T14:23:16Z", "author": {"login": "junkaixue"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/LockInfo.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.helix.lock;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * Generic interface for a map contains the Helix lock information\n+ * @param <T> The type of the LockInfo value\n+ */\n+public interface LockInfo<T> {\n+\n+  /**\n+   * Create a single filed of LockInfo, or update the value of the field if it already exists\n+   * @param key the key of the LockInfo field\n+   * @param value the value of the LockInfo field\n+   */\n+  void setValue(String key, T value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce07964e69f45b82ca8f576860de278d78e06cf", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/8ce07964e69f45b82ca8f576860de278d78e06cf", "committedDate": "2020-01-27T21:51:59Z", "message": "Modified method name in LockInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225cf46af4a37d5738a2dec41f57ec412450c962", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/225cf46af4a37d5738a2dec41f57ec412450c962", "committedDate": "2020-01-30T17:51:55Z", "message": "Added details in comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDQwNjU2", "url": "https://github.com/apache/helix/pull/703#pullrequestreview-351040656", "createdAt": "2020-01-30T18:21:48Z", "commit": {"oid": "225cf46af4a37d5738a2dec41f57ec412450c962"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMTo0OFrOFj1F5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMTo0OFrOFj1F5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNDM0MA==", "bodyText": "Optional for this PR. But do we consider some mandatory fields to be here? For example, timeout, owner ID, etc.", "url": "https://github.com/apache/helix/pull/703#discussion_r373114340", "createdAt": "2020-01-30T18:21:48Z", "author": {"login": "jiajunwang"}, "path": "helix-lock/src/main/java/org/apache/helix/lock/LockInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.helix.lock;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * Generic interface for a map contains the Helix lock information\n+ * @param <T> The type of the LockInfo value\n+ */\n+public interface LockInfo<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225cf46af4a37d5738a2dec41f57ec412450c962"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4891, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}