{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODcwODcx", "number": 1190, "title": "Add Helix rest Zookeeper delete API to allow removing ephemeral ZNode", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1189\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nAdd a new Helix rest API in the ZookeeperAccessor for deleting an ephemeral ZNode.\nNote that before we have ACL/audit support in the Helix rest, allowing raw ZK write operation is dangerous.\nThis API is introduced prematurely for resolving the issue of \"zombie\" participant (the instance has an active zk connection, but refuse to do any work). Currently, the existence of such a node may block the normal state transitions and then impact the cluster's availability. This PR restricts that only an ephemeral node can be deleted to minimize the risk.\nTests\n\n The following tests are written for this issue:\n\nTestZooKeeperAccessor.testDelete()\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-rest\n[INFO] Tests run: 164, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 49.55 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 164, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 55.836 s\n[INFO] Finished at: 2020-07-30T15:40:28-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-30T04:47:07Z", "url": "https://github.com/apache/helix/pull/1190", "merged": true, "mergeCommit": {"oid": "b13d872bfc2711c10b90504caeea167ebc49257a"}, "closed": true, "closedAt": "2020-08-04T00:10:47Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc57MovAFqTQ1ODE3MDEyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7XK6agBqjM2MTcyOTA2NjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTcwMTIy", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-458170122", "createdAt": "2020-07-30T07:59:26Z", "commit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1OToyNlrOG5YO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxNzo1NVrOG5Y2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTA3MA==", "bodyText": "Missing %s?", "url": "https://github.com/apache/helix/pull/1190#discussion_r462819070", "createdAt": "2020-07-30T07:59:26Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -192,7 +196,29 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n           .entity(String.format(\"The ZNode at path %s does not exist!\", path)).build());\n     }\n     Map<String, String> result = ZKUtil.fromStatToMap(stat);\n-    result.put(\"path\", path);\n+    result.put(PATH_STR, path);\n+    return JSONRepresentation(result);\n+  }\n+\n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+    // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+    // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat != null && stat.getEphemeralOwner() <= 0) {\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non ephemeral node is not allowed\", path)).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyOTIzOA==", "bodyText": "Would this go to a \"DELETE\" HTTP verb?", "url": "https://github.com/apache/helix/pull/1190#discussion_r462829238", "createdAt": "2020-07-30T08:17:55Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -94,6 +96,8 @@ public Response get(@PathParam(\"path\") String path, @QueryParam(\"command\") Strin\n         return getChildren(_zkBaseDataAccessor, path);\n       case getStat:\n         return getStat(_zkBaseDataAccessor, path);\n+      case delete:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTc3MTEy", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-458577112", "createdAt": "2020-07-30T16:43:38Z", "commit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0MzozOVrOG5rP5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0MzozOVrOG5rP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA==", "bodyText": "I think it would be smarter to use deleteEphemeral and rename your methods accordingly because it seems that it's  not the general delete you're trying to support.", "url": "https://github.com/apache/helix/pull/1190#discussion_r463130598", "createdAt": "2020-07-30T16:43:39Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -52,12 +51,15 @@\n   private static final Logger LOG = LoggerFactory.getLogger(ZooKeeperAccessor.class.getName());\n   private BaseDataAccessor<byte[]> _zkBaseDataAccessor;\n \n+  private static final String PATH_STR = \"path\";\n+\n   public enum ZooKeeperCommand {\n     exists,\n     getBinaryData,\n     getStringData,\n     getChildren,\n-    getStat\n+    getStat,\n+    delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTc3NzM2", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-458577736", "createdAt": "2020-07-30T16:44:23Z", "commit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0NDoyM1rOG5rR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0NDoyM1rOG5rR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMTA5Mw==", "bodyText": "Would zkBaseDataAccessor.remove(path, AccessOption.EPHEMERAL) be an option?", "url": "https://github.com/apache/helix/pull/1190#discussion_r463131093", "createdAt": "2020-07-30T16:44:23Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -192,7 +196,29 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n           .entity(String.format(\"The ZNode at path %s does not exist!\", path)).build());\n     }\n     Map<String, String> result = ZKUtil.fromStatToMap(stat);\n-    result.put(\"path\", path);\n+    result.put(PATH_STR, path);\n+    return JSONRepresentation(result);\n+  }\n+\n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+    // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+    // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat != null && stat.getEphemeralOwner() <= 0) {\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non ephemeral node is not allowed\", path)).build());\n+    }\n+\n+    Boolean ret = zkBaseDataAccessor.remove(path, AccessOption.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Njk0OTc2", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-458694976", "createdAt": "2020-07-30T19:31:10Z", "commit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTozMToxMFrOG5w5uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTozMToxMFrOG5w5uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMzIyNA==", "bodyText": "Question here (may not related to your change).\nIs the second param here in exists(String path, int options) useful? I did not find it being considered in any implementation of BaseDataAccessor.", "url": "https://github.com/apache/helix/pull/1190#discussion_r463223224", "createdAt": "2020-07-30T19:31:10Z", "author": {"login": "xyuanlu"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestZooKeeperAccessor.java", "diffHunk": "@@ -192,4 +191,33 @@ public void testGetStat() throws IOException {\n     // Clean up\n     _testBaseDataAccessor.remove(path, AccessOption.PERSISTENT);\n   }\n+\n+  @Test\n+  public void testDelete() throws IOException {\n+    String path = \"/path\";\n+    String deletePath = path + \"/delete\";\n+\n+    try {\n+      // 1. Create a persistent node. Delete shall fail.\n+      _testBaseDataAccessor.create(deletePath, null, AccessOption.PERSISTENT);\n+      // Verify with the REST endpoint\n+      new JerseyUriRequestBuilder(\"zookeeper{}?command=delete\").format(deletePath)\n+          .expectedReturnStatusCode(Response.Status.FORBIDDEN.getStatusCode());\n+      Assert.assertTrue(_testBaseDataAccessor.exists(deletePath, AccessOption.PERSISTENT));\n+\n+      // 2. Create a ephemeral node. Delete shall be done successfully.\n+      _testBaseDataAccessor.remove(deletePath, AccessOption.PERSISTENT);\n+      _testBaseDataAccessor.create(deletePath, null, AccessOption.EPHEMERAL);\n+      // Verify with the REST endpoint\n+      String data = new JerseyUriRequestBuilder(\"zookeeper{}?command=delete\").format(deletePath)\n+          .isBodyReturnExpected(true).get(this);\n+      Map<String, String> result = OBJECT_MAPPER.readValue(data, HashMap.class);\n+      Assert.assertEquals(result.get(\"path\"), deletePath);\n+      Assert.assertEquals(result.get(\"delete\"), new Boolean(true).toString());\n+      Assert.assertFalse(_testBaseDataAccessor.exists(deletePath, AccessOption.PERSISTENT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e19fde7aff92f92bb8a5d4c907529174d9d144"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTk2MjIx", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-458996221", "createdAt": "2020-07-31T08:17:24Z", "commit": {"oid": "6857c1786c35c314a7a442413ebdb99e122e5d1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoxNzoyNFrOG6ACCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoxNzoyNFrOG6ACCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3MTExMg==", "bodyText": "Actually if we set the root path as below, we don't need to prepend the root slash, which is not that clean.\n@Path(\"/zookeeper{path: /.+}\")\npublic class ZooKeeperAccessor extends AbstractResource {", "url": "https://github.com/apache/helix/pull/1190#discussion_r463471112", "createdAt": "2020-07-31T08:17:24Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -101,6 +100,26 @@ public Response get(@PathParam(\"path\") String path, @QueryParam(\"command\") Strin\n     }\n   }\n \n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response delete(@PathParam(\"path\") String path) {\n+    // Lazily initialize ZkBaseDataAccessor\n+    ServerContext _serverContext =\n+        (ServerContext) _application.getProperties().get(ContextPropertyKeys.SERVER_CONTEXT.name());\n+    _zkBaseDataAccessor = _serverContext.getByteArrayZkBaseDataAccessor();\n+\n+    path = prependPath(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6857c1786c35c314a7a442413ebdb99e122e5d1b"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbbfb0ab08dd03f960285bfd3ea5be9cec7fab9b", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/bbbfb0ab08dd03f960285bfd3ea5be9cec7fab9b", "committedDate": "2020-07-31T17:41:49Z", "message": "Address more comments."}, "afterCommit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "committedDate": "2020-08-01T00:18:06Z", "message": "Address more comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTM3NjU4", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-459537658", "createdAt": "2020-08-01T01:11:31Z", "commit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMToxMTozMlrOG6aT0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMToxOToxOFrOG6aXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwMTY0OA==", "bodyText": "Could we add a msg to this as well: (\"Path %s does not exist\", path)? I think it gives a user a better idea. Otherwise the msg returned is unfriendly if we use curl endpoint in terminal.\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\"/>\n<title>Error 404 </title>\n</head>\n<body>\n<h2>HTTP ERROR: 404</h2>\n<p>Problem accessing /admin/v2/zookeeper/aa. Reason:\n<pre>    Not Found</pre></p>\n<hr /><a href=\"http://eclipse.org/jetty\">Powered by Jetty:// 9.4.12.v20180830</a><hr/>\n</body>\n</html>\n\nVS\n{\n  \"message\" : \"Path /aa does not exist\",\n  \"status\": 404\n}", "url": "https://github.com/apache/helix/pull/1190#discussion_r463901648", "createdAt": "2020-08-01T01:11:32Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat == null) {\n+      return notFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwMjQ5MQ==", "bodyText": "At least add a message OK(\"Success\")?", "url": "https://github.com/apache/helix/pull/1190#discussion_r463902491", "createdAt": "2020-08-01T01:19:18Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat == null) {\n+      return notFound();\n+    } else if (stat.getEphemeralOwner() <= 0) {\n+      // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+      // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+      // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non-ephemeral node is not allowed.\")).build());\n+    }\n+\n+    if (zkBaseDataAccessor.remove(path, AccessOption.PERSISTENT)) {\n+      return OK();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTUyOTI3", "url": "https://github.com/apache/helix/pull/1190#pullrequestreview-459552927", "createdAt": "2020-08-01T04:52:32Z", "commit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDo1MjozM1rOG6blPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDo1MjozM1rOG6blPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMjQ5Mg==", "bodyText": "I'm not seeing how this is any different from using delete. This is no better than using delete for two different types of delete's - delete and deleteEphemeral.\nPerhaps you could add a commandStr here to differentiate two different types of deletes, and when you want to add an endpoint for regular delete backed by ACL checks, then just implement that if that becomes necessary? I don't think this adds any more work/difficulty for the purposes of this PR? (If any, it saves you the work of adding a TODO)\nMy point was not about what kind of REST verb we should use - it's pretty clear we should use DELETE in this case. But it's more about following a good API design which, again, is something that is hard to misuse by not embedding hidden assumptions or TODOs that may cause a behavior change down the road. Also, seen from another angle, supporting it as deleteEphemeral gives the user a clear meaning to the command string as opposed to just calling it a HTTP verb DELETE, which might leave the user confused and question the meaning of the API when it fails to delete regular ZNodes.\nYou could add two commands, delete and deleteEphemeral, and make the default commandStr delete, and throw a not authorized or not supported, and only let deleteEphemeral go through. This way, when we do decide to support delete operation with ACL, there's no confusion or change in behavior.", "url": "https://github.com/apache/helix/pull/1190#discussion_r463922492", "createdAt": "2020-08-01T04:52:33Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "951cc336f1da18fd6c19d022d7a0cd728ea4cacf", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/951cc336f1da18fd6c19d022d7a0cd728ea4cacf", "committedDate": "2020-08-03T19:27:05Z", "message": "Add Helix Rest Zookeeper operation API to allow removing ephemeral ZNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c22f79b54e0e6a6230746d71d34bfde3528ebaf7", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/c22f79b54e0e6a6230746d71d34bfde3528ebaf7", "committedDate": "2020-08-03T19:27:05Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fda948960b60c7494bbecddc72b9e8b5d4a4a7f", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/9fda948960b60c7494bbecddc72b9e8b5d4a4a7f", "committedDate": "2020-08-03T19:27:05Z", "message": "Revert unnecessary changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2afc4b718075ccc287d5e7366497b2445840aae", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/d2afc4b718075ccc287d5e7366497b2445840aae", "committedDate": "2020-08-03T19:27:05Z", "message": "Address more comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "committedDate": "2020-08-01T00:18:06Z", "message": "Address more comments."}, "afterCommit": {"oid": "d2afc4b718075ccc287d5e7366497b2445840aae", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/d2afc4b718075ccc287d5e7366497b2445840aae", "committedDate": "2020-08-03T19:27:05Z", "message": "Address more comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4606, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}