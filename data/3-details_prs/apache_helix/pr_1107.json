{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQ3MzU2", "number": 1107, "title": "Fix ZkBucketDataAccessor failure due to concurrent modification.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#767\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nConcurrent modification causes two issues.\n\nRegular GC task fails due to concurrent list modification and the stale versions are not removed at all.\nIf, by coincident, there is a newer version in the list other then the current version, then because of the modification of the list inside the loop, the final element (the newer version) won't be filtered but being left in the to-be-removed list. Then the GC task removes the most recent version. For example,\na) Input, current version \"2\"\nb) Children = [1, 2, 3]\nc) The task avoids checking \"2\", so the list for loop is: [1, 3]\nd) When checking \"1\", it is removed from the list. So the list becomes [3]. Then the loop ends, because the first item has already been looped from the for iteration perspective.\ne) The version to be removed is \"3\"!\n\nThis PR fixes the issue by avoiding concurrent modifications. Also, it simplifies the logic so as to reduce the pending GC tasks.\nThe test is also updated accordingly.\nTests\n\n The following tests are written for this issue:\n\nTestZkBucketDataAccessor\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp:111 Sets differ: expected [testJobQueueAutoCleanUp_JOB8, testJobQueueAutoCleanUp_JOB7, testJobQueueAutoCleanUp_JOB6, testJobQueueAutoCleanUp_JOB5, testJobQueueAutoCleanUp_JOB9] but got [testJobQueueAutoCleanUp_JOB4, testJobQueueAutoCleanUp_JOB8, testJobQueueAutoCleanUp_JOB7, testJobQueueAutoCleanUp_JOB6, testJobQueueAutoCleanUp_JOB5, testJobQueueAutoCleanUp_JOB9]\n[INFO]\n[ERROR] Tests run: 1145, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:19 h\n[INFO] Finished at: 2020-06-19T19:27:46-07:00\n[INFO] ------------------------------------------------------------------------\nRerun\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.293 s - in org.apache.helix.integration.task.TestJobQueueCleanUp\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 21.621 s\n[INFO] Finished at: 2020-06-19T21:53:23-07:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-20T01:33:42Z", "url": "https://github.com/apache/helix/pull/1107", "merged": true, "mergeCommit": {"oid": "2be97cd08a020ae4c722ce12dea34acfed71555c"}, "closed": true, "closedAt": "2020-06-23T00:04:17Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctAVoVAH2gAyNDM3MzQ3MzU2OjVjZjJiNjc3ZTljN2E0ODllMDQ0ZTNkYTQwZGI5ZWMyNmM4ZTAwMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct55osgFqTQzNTM1MTQ4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/5cf2b677e9c7a489e044e3da40db9ec26c8e0037", "committedDate": "2020-06-20T04:56:18Z", "message": "Fix ZkBucketDataAccessor failure due to concurrent modification.\n\nThe concurrent modification causes two issues.\n1. Regular GC task fails due to concurrent list modification and the stale versions are not removed at all.\n2. If, by coincident, there is newer version in the list other then the current version, then because of the modification of the list inside the loop, the final element (the newer version) won't be filtered but being left in the to-be-removed list. Then the GC task removes the most recent version. For example,\n  a) Input, current version \"2\"\n  b) Children = [1, 2, 3]\n  c) The task avoids checking \"2\", so the list for loop is: [1, 3]\n  d) When check \"1\", it is removed from the list. So the list becomes [3]. Then the loop ends, because the first item has already been looped from the for iteration perspective.\n  e) The version to be removed is \"3\"!\n\nThis PR fix the issue by avoiding concurrent modification. Also it simplies the logic so as to reduce the pending GC tasks.\nThe test is also updated accordingly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66b6bc1c28817fdd92d7f7b8975e9d1889d89741", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/66b6bc1c28817fdd92d7f7b8975e9d1889d89741", "committedDate": "2020-06-20T00:43:25Z", "message": "Fix ZkBucketDataAccessor failure due to concurrent modification.\n\nThe concurrent modification causes two issues.\n1. Regular GC task fails due to concurrent list modification and the stale versions are not removed at all.\n2. If, by coincident, there is newer version in the list other then the current version, then because of the modification of the list inside the loop, the final element (the newer version) won't be filtered but being left in the to-be-removed list. Then the GC task removes the most recent version. For example,\n  a) Input, current version \"2\"\n  b) Children = [1, 2, 3]\n  c) The task avoids checking \"2\", so the list for loop is: [1, 3]\n  d) When check \"1\", it is removed from the list. So the list becomes [3]. Then the loop ends, because the first item has already been looped from the for iteration perspective.\n  e) The version to be removed is \"3\"!\n\nThis PR fix the issue by avoiding concurrent modification. Also it simplies the logic so as to reduce the pending GC tasks.\nThe test is also updated accordingly."}, "afterCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/5cf2b677e9c7a489e044e3da40db9ec26c8e0037", "committedDate": "2020-06-20T04:56:18Z", "message": "Fix ZkBucketDataAccessor failure due to concurrent modification.\n\nThe concurrent modification causes two issues.\n1. Regular GC task fails due to concurrent list modification and the stale versions are not removed at all.\n2. If, by coincident, there is newer version in the list other then the current version, then because of the modification of the list inside the loop, the final element (the newer version) won't be filtered but being left in the to-be-removed list. Then the GC task removes the most recent version. For example,\n  a) Input, current version \"2\"\n  b) Children = [1, 2, 3]\n  c) The task avoids checking \"2\", so the list for loop is: [1, 3]\n  d) When check \"1\", it is removed from the list. So the list becomes [3]. Then the loop ends, because the first item has already been looped from the for iteration perspective.\n  e) The version to be removed is \"3\"!\n\nThis PR fix the issue by avoiding concurrent modification. Also it simplies the logic so as to reduce the pending GC tasks.\nThe test is also updated accordingly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDU3MTU2", "url": "https://github.com/apache/helix/pull/1107#pullrequestreview-434457156", "createdAt": "2020-06-20T22:24:21Z", "commit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyNDoyMVrOGmomnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyNDoyMVrOGmomnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDMxNw==", "bodyText": "ensure that the...?", "url": "https://github.com/apache/helix/pull/1107#discussion_r443164317", "createdAt": "2020-06-20T22:24:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBucketDataAccessor.java", "diffHunk": "@@ -126,8 +133,17 @@ public void testMultipleWrites() throws Exception {\n     // Use Verifier because GC can take ZK delay\n     Assert.assertTrue(TestHelper.verify(() -> {\n       List<String> children = _zkBaseDataAccessor.getChildNames(PATH, AccessOption.PERSISTENT);\n-      return children.size() == 3;\n-    }, 60 * 1000L));\n+      return children.size() == 3 && children.containsAll(ImmutableList\n+          .of(LAST_SUCCESSFUL_WRITE_KEY, LAST_WRITE_KEY,\n+              new Long(lastSuccessfulWriteVer).toString()));\n+    }, VERSION_TTL_MS * 2));\n+\n+    // Wait one more TTL to ensure that the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDU3MjIx", "url": "https://github.com/apache/helix/pull/1107#pullrequestreview-434457221", "createdAt": "2020-06-20T22:26:11Z", "commit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDU3MzYy", "url": "https://github.com/apache/helix/pull/1107#pullrequestreview-434457362", "createdAt": "2020-06-20T22:29:37Z", "commit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyOTozN1rOGmonwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoyOTozN1rOGmonwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDYwOA==", "bodyText": "Do we really need to cancel? What if that causes incomplete deletion of stale versions? I think we should let it queue up?", "url": "https://github.com/apache/helix/pull/1107#discussion_r443164608", "createdAt": "2020-06-20T22:29:37Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBucketDataAccessor.java", "diffHunk": "@@ -329,32 +330,34 @@ public void close() {\n     disconnect();\n   }\n \n-  private void updateGCTimer(String rootPath, String currentVersion) {\n-    TimerTask gcTask = new TimerTask() {\n-      @Override\n-      public void run() {\n+  private synchronized void updateGCTimer(String rootPath, long currentVersion) {\n+    if (_gcTaskFuture != null) {\n+      _gcTaskFuture.cancel(false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf2b677e9c7a489e044e3da40db9ec26c8e0037"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231764292d0671af21017e99613a09941bc638d2", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/231764292d0671af21017e99613a09941bc638d2", "committedDate": "2020-06-22T22:44:07Z", "message": "Fix the comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzUxNDg4", "url": "https://github.com/apache/helix/pull/1107#pullrequestreview-435351488", "createdAt": "2020-06-23T00:00:13Z", "commit": {"oid": "231764292d0671af21017e99613a09941bc638d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4501, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}