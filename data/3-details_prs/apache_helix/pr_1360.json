{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDU5NzYy", "number": 1360, "title": "Use the DelayedAutoRebalancer as the default rebalancer.", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolves #1349\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR depends on #1359 , please reviewing that PR first.\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n\nWe need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\nThis behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\nIf any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nTests\n\n The following tests are written for this issue:\n\nMultiple related tests have been updated to cover the new change.\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Failures:\n[ERROR]   TestP2PNoDuplicatedMessage.testP2PStateTransitionEnabled:174 expected:<2200> but was:<2187>\n[INFO]\n[ERROR] Tests run: 1200, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:13 h\n[INFO] Finished at: 2020-09-16T00:42:16-07:00\n[INFO] ------------------------------------------------------------------------\nRerun\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:01 min\n[INFO] Finished at: 2020-09-16T11:10:08-07:00\n[INFO] ------------------------------------------------------------------------\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-09-11T21:06:11Z", "url": "https://github.com/apache/helix/pull/1360", "merged": true, "mergeCommit": {"oid": "a28a31ebacadc5a6af7afd5e5ea06e9ecc6ce53b"}, "closed": true, "closedAt": "2020-09-22T21:30:31Z", "author": {"login": "jiajunwang"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJLhdDgBqjM3Njk1OTg0MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLe4QWAFqTQ5Mzg2MDQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/5e90e3767fbf5851b60a73a902b8ef6d77a6ca04", "committedDate": "2020-09-11T01:32:51Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}, "afterCommit": {"oid": "042576f316ddc00ddf7893ef1eef64369d9e02a9", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/042576f316ddc00ddf7893ef1eef64369d9e02a9", "committedDate": "2020-09-15T17:45:45Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "042576f316ddc00ddf7893ef1eef64369d9e02a9", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/042576f316ddc00ddf7893ef1eef64369d9e02a9", "committedDate": "2020-09-15T17:45:45Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}, "afterCommit": {"oid": "a954e836805b16247f7d0fc3be828c12277bfc50", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/a954e836805b16247f7d0fc3be828c12277bfc50", "committedDate": "2020-09-16T06:25:48Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a954e836805b16247f7d0fc3be828c12277bfc50", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/a954e836805b16247f7d0fc3be828c12277bfc50", "committedDate": "2020-09-16T06:25:48Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}, "afterCommit": {"oid": "0db8a214fd109b71d4cb3203227c8485efe54fe9", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0db8a214fd109b71d4cb3203227c8485efe54fe9", "committedDate": "2020-09-17T00:10:06Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjYxOTg0", "url": "https://github.com/apache/helix/pull/1360#pullrequestreview-488261984", "createdAt": "2020-09-15T01:33:19Z", "commit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozMzoxOVrOHRtPqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDoxMToyOVrOHRv1Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyOTEzMQ==", "bodyText": "Let us make sure I understand this test fix correctly. With #1359 fix, the net effect is that previous missing \"rebalance error\" metric is added. Also, avoid setting empty best possible state to the output which is used by later rebalance stage.\nIn this test, we did not assert anything about rebalance error metrics; thus, even missing one rebalance failure metrics, it would cause this test not stable. So why do we need the change in this test?\nPut it another way, what caused the this test unstable?", "url": "https://github.com/apache/helix/pull/1360#discussion_r488329131", "createdAt": "2020-09-15T01:33:19Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java", "diffHunk": "@@ -118,18 +120,25 @@ public void beforeMethod() throws IOException {\n \n   @Test\n   public void testParticipantUnavailable() throws Exception {\n-    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n-        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.name());\n+    IdealState idealState = new FullAutoModeISBuilder(testDb)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzMDc5MA==", "bodyText": "I see, this assertion may not work, if pipeline run another cycle?\n    pollForError(accessor, errorNodeKey);\n    checkRebalanceFailureGauge(true);\n    checkResourceBestPossibleCalFailureState(\n        ResourceMonitor.RebalanceStatus.BEST_POSSIBLE_STATE_CAL_FAILED, testDb);", "url": "https://github.com/apache/helix/pull/1360#discussion_r488330790", "createdAt": "2020-09-15T01:39:29Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java", "diffHunk": "@@ -118,18 +120,25 @@ public void beforeMethod() throws IOException {\n \n   @Test\n   public void testParticipantUnavailable() throws Exception {\n-    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n-        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.name());\n+    IdealState idealState = new FullAutoModeISBuilder(testDb)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyOTEzMQ=="}, "originalCommit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ==", "bodyText": "Previously, we use AutoRebalancer with AutoRebalanceStrategy. With this change, we use DelayedAutoRebalancer with CrushEd strategy.\nThe question is that now, by default with this change, we will use DelayedAutoRebalancer by default. If we forget to add CrushEdRebalanceStrategy, the default seems to be AutoRebalanceStrategy. Will that work?", "url": "https://github.com/apache/helix/pull/1360#discussion_r488368555", "createdAt": "2020-09-15T03:59:41Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java", "diffHunk": "@@ -161,7 +170,8 @@ public void testParticipantUnavailable() throws Exception {\n   @Test(dependsOnMethods = \"testParticipantUnavailable\")\n   public void testTagSetIncorrect() throws Exception {\n     _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n-        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MTQ5MQ==", "bodyText": "why remove this line?", "url": "https://github.com/apache/helix/pull/1360#discussion_r488371491", "createdAt": "2020-09-15T04:11:29Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java", "diffHunk": "@@ -128,8 +128,10 @@ public void testLoadBalanceMetrics() {\n     event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n     setupLiveInstances(4);\n \n-    runStage(event, new ReadClusterDataStage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0db8a214fd109b71d4cb3203227c8485efe54fe9", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0db8a214fd109b71d4cb3203227c8485efe54fe9", "committedDate": "2020-09-17T00:10:06Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail."}, "afterCommit": {"oid": "e68722168fd031b6d754f122195b6562ff69849b", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e68722168fd031b6d754f122195b6562ff69849b", "committedDate": "2020-09-21T19:18:21Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "committedDate": "2020-09-22T18:44:33Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e68722168fd031b6d754f122195b6562ff69849b", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/e68722168fd031b6d754f122195b6562ff69849b", "committedDate": "2020-09-21T19:18:21Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config."}, "afterCommit": {"oid": "0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "author": {"user": {"login": "jiajunwang", "name": "Jiajun Wang"}}, "url": "https://github.com/apache/helix/commit/0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "committedDate": "2020-09-22T18:44:33Z", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODYwNDEz", "url": "https://github.com/apache/helix/pull/1360#pullrequestreview-493860413", "createdAt": "2020-09-22T21:29:00Z", "commit": {"oid": "0414df2afaf9a4dcfca94c83bd50cab6a584fcf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}