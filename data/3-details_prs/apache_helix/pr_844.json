{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjU3Mzk1", "number": 844, "title": "Implement setRoutingData for MetadataStoreDirectoryService", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #841, #842, #843\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR implements setRoutingData, which was an endpoint that was defined but not finished. It allows users to overwrite whatever routing data there is for a namespace and replace it with a new set of data. This endpoint was designed with convenience in mind because it allows users to specify the routing data in one call instead of making multiple calls to create zkrealms and add sharding keys. This endpoint was originally designed to validate the input but now it doesn't, please refer #842 for the reasoning.\nRelated to this PR, we also discovered that there are problems related to the construction of TrieRoutingData in MetadataStoreDirectory. Please see #841 .\nLastly, we are also fixing the race conditions of writing operations in MetadataStoreDirectory which are discovered during the development. Please see #843.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 140, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.602 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 140, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  53.115 s\n[INFO] Finished at: 2020-03-02T14:38:49-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-03-02T23:14:13Z", "url": "https://github.com/apache/helix/pull/844", "merged": true, "mergeCommit": {"oid": "1ebf942909f040fecdc664c90dbcc9838fae1a91"}, "closed": true, "closedAt": "2020-03-04T01:37:16Z", "author": {"login": "NealSun96"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ1oyNgH2gAyMzgyNjU3Mzk1OjMxOWJmY2I4YzlhNGJlMDFlNmE4ZmJkYWE5MmU4ZGI4MjQzOTlkNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKK3XbgFqTM2ODM5OTY5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "319bfcb8c9a4be01e6a8fbdaa92e8db824399d42", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/319bfcb8c9a4be01e6a8fbdaa92e8db824399d42", "committedDate": "2020-03-02T22:40:55Z", "message": "Implement setRoutingData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/955eea975b244652347b02aaab8bf4b1cc6526f6", "committedDate": "2020-03-02T23:14:26Z", "message": "nit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjA2MTE0", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367606114", "createdAt": "2020-03-02T23:31:19Z", "commit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozMToyMFrOFwzLYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozODoyNVrOFwzU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNDQ2Ng==", "bodyText": "Do we want to throw any exception or log this?", "url": "https://github.com/apache/helix/pull/844#discussion_r386714466", "createdAt": "2020-03-02T23:31:20Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -113,10 +113,14 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n           _routingDataWriterMap.put(namespace, new ZkRoutingDataWriter(namespace, zkAddress));\n \n           // Populate realmToShardingKeys with ZkRoutingDataReader\n-          _realmToShardingKeysMap\n-              .put(namespace, _routingDataReaderMap.get(namespace).getRoutingData());\n-          _routingDataMap\n-              .put(namespace, new TrieRoutingData(_realmToShardingKeysMap.get(namespace)));\n+          Map<String, List<String>> rawRoutingData =\n+              _routingDataReaderMap.get(namespace).getRoutingData();\n+          _realmToShardingKeysMap.put(namespace, rawRoutingData);\n+          try {\n+            _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+          } catch (InvalidRoutingDataException e) {\n+            // Do not create TrieRoutingData if the routing data is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNTYyNQ==", "bodyText": "This is like double lock checking. You may also want to check it before synchronized which also improves performance.\nConsidering namespace is not changed, you don\u2019t have to check it in within synchronized block.", "url": "https://github.com/apache/helix/pull/844#discussion_r386715625", "createdAt": "2020-03-02T23:34:32Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -155,6 +159,19 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n     return routingData;\n   }\n \n+  @Override\n+  public boolean setNamespaceRoutingData(String namespace, Map<String, List<String>> routingData) {\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNjE0Mg==", "bodyText": "move it before synchronized", "url": "https://github.com/apache/helix/pull/844#discussion_r386716142", "createdAt": "2020-03-02T23:36:04Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -169,72 +186,102 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n \n   @Override\n   public Map<String, String> getAllMappingUnderPath(String namespace, String path) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get all mapping under path: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get all mapping under path: Namespace \" + namespace\n+          + \" contains invalid routing data!\");\n+    }\n     return _routingDataMap.get(namespace).getAllMappingUnderPath(path);\n   }\n \n   @Override\n   public String getMetadataStoreRealm(String namespace, String shardingKey) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get metadata store realm: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get metadata store realm: Namespace \" + namespace\n+          + \" contains invalid routing data!\");\n+    }\n     return _routingDataMap.get(namespace).getMetadataStoreRealm(shardingKey);\n   }\n \n   @Override\n   public boolean addMetadataStoreRealm(String namespace, String realm) {\n-    if (!_routingDataWriterMap.containsKey(namespace)) {\n-      // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n-      // status code in the Accessor level\n-      throw new NoSuchElementException(\n-          \"Failed to add metadata store realm: Namespace \" + namespace + \" is not found!\");\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {\n+        // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n+        // status code in the Accessor level\n+        throw new NoSuchElementException(\n+            \"Failed to add metadata store realm: Namespace \" + namespace + \" is not found!\");\n+      }\n+      boolean result = _routingDataWriterMap.get(namespace).addMetadataStoreRealm(realm);\n+      refreshRoutingData(namespace);\n+      return result;\n     }\n-    return _routingDataWriterMap.get(namespace).addMetadataStoreRealm(realm);\n   }\n \n   @Override\n   public boolean deleteMetadataStoreRealm(String namespace, String realm) {\n-    if (!_routingDataWriterMap.containsKey(namespace)) {\n-      // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n-      // status code in the Accessor level\n-      throw new NoSuchElementException(\n-          \"Failed to delete metadata store realm: Namespace \" + namespace + \" is not found!\");\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {\n+        // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n+        // status code in the Accessor level\n+        throw new NoSuchElementException(\n+            \"Failed to delete metadata store realm: Namespace \" + namespace + \" is not found!\");\n+      }\n+      boolean result = _routingDataWriterMap.get(namespace).deleteMetadataStoreRealm(realm);\n+      refreshRoutingData(namespace);\n+      return result;\n     }\n-    return _routingDataWriterMap.get(namespace).deleteMetadataStoreRealm(realm);\n   }\n \n   @Override\n   public boolean addShardingKey(String namespace, String realm, String shardingKey) {\n-    if (!_routingDataWriterMap.containsKey(namespace) || !_routingDataMap.containsKey(namespace)) {\n-      // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n-      // status code in the Accessor level\n-      throw new NoSuchElementException(\n-          \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n-    }\n-    if (_routingDataMap.get(namespace).containsKeyRealmPair(shardingKey, realm)) {\n-      return true;\n-    }\n-    if (!_routingDataMap.get(namespace).isShardingKeyInsertionValid(shardingKey)) {\n-      throw new IllegalArgumentException(\n-          \"Failed to add sharding key: Adding sharding key \" + shardingKey\n-              + \" makes routing data invalid!\");\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {\n+        // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n+        // status code in the Accessor level\n+        throw new NoSuchElementException(\n+            \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n+      }\n+      if (_routingDataMap.containsKey(namespace) && _routingDataMap.get(namespace)\n+          .containsKeyRealmPair(shardingKey, realm)) {\n+        return true;\n+      }\n+      if (_routingDataMap.containsKey(namespace) && !_routingDataMap.get(namespace)\n+          .isShardingKeyInsertionValid(shardingKey)) {\n+        throw new IllegalArgumentException(\n+            \"Failed to add sharding key: Adding sharding key \" + shardingKey\n+                + \" makes routing data invalid!\");\n+      }\n+      boolean result = _routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey);\n+      refreshRoutingData(namespace);\n+      return result;\n     }\n-    return _routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey);\n   }\n \n   @Override\n   public boolean deleteShardingKey(String namespace, String realm, String shardingKey) {\n-    if (!_routingDataWriterMap.containsKey(namespace)) {\n-      // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n-      // status code in the Accessor level\n-      throw new NoSuchElementException(\n-          \"Failed to delete sharding key: Namespace \" + namespace + \" is not found!\");\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNjg5OQ==", "bodyText": "Before synchronized", "url": "https://github.com/apache/helix/pull/844#discussion_r386716899", "createdAt": "2020-03-02T23:38:25Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -169,72 +186,102 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n \n   @Override\n   public Map<String, String> getAllMappingUnderPath(String namespace, String path) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get all mapping under path: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get all mapping under path: Namespace \" + namespace\n+          + \" contains invalid routing data!\");\n+    }\n     return _routingDataMap.get(namespace).getAllMappingUnderPath(path);\n   }\n \n   @Override\n   public String getMetadataStoreRealm(String namespace, String shardingKey) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get metadata store realm: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get metadata store realm: Namespace \" + namespace\n+          + \" contains invalid routing data!\");\n+    }\n     return _routingDataMap.get(namespace).getMetadataStoreRealm(shardingKey);\n   }\n \n   @Override\n   public boolean addMetadataStoreRealm(String namespace, String realm) {\n-    if (!_routingDataWriterMap.containsKey(namespace)) {\n-      // throwing NoSuchElementException instead of IllegalArgumentException to differentiate the\n-      // status code in the Accessor level\n-      throw new NoSuchElementException(\n-          \"Failed to add metadata store realm: Namespace \" + namespace + \" is not found!\");\n+    synchronized (this) {\n+      if (!_routingDataWriterMap.containsKey(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955eea975b244652347b02aaab8bf4b1cc6526f6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/2a46bd3975f47b6f1d094a0fc763f69e1e1ee819", "committedDate": "2020-03-03T01:08:17Z", "message": "Namespace check outside of synchronized"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjYzNzMw", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367663730", "createdAt": "2020-03-03T02:23:41Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyMzo0MVrOFw2SIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyMzo0MVrOFw2SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NTM0NA==", "bodyText": "Could we rephrase this to say, the routing data is either empty or invalid?", "url": "https://github.com/apache/helix/pull/844#discussion_r386765344", "createdAt": "2020-03-03T02:23:41Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -169,19 +186,31 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n \n   @Override\n   public Map<String, String> getAllMappingUnderPath(String namespace, String path) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get all mapping under path: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get all mapping under path: Namespace \" + namespace\n+          + \" contains invalid routing data!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjYzOTUz", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367663953", "createdAt": "2020-03-03T02:24:23Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyNDoyM1rOFw2S2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyNDoyM1rOFw2S2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NTUzMA==", "bodyText": "Same as above :)", "url": "https://github.com/apache/helix/pull/844#discussion_r386765530", "createdAt": "2020-03-03T02:24:23Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -169,19 +186,31 @@ private void init(String namespace, String zkAddress) throws InvalidRoutingDataE\n \n   @Override\n   public Map<String, String> getAllMappingUnderPath(String namespace, String path) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get all mapping under path: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get all mapping under path: Namespace \" + namespace\n+          + \" contains invalid routing data!\");\n+    }\n     return _routingDataMap.get(namespace).getAllMappingUnderPath(path);\n   }\n \n   @Override\n   public String getMetadataStoreRealm(String namespace, String shardingKey) {\n-    if (!_routingDataMap.containsKey(namespace)) {\n+    // Check _routingZkAddressMap first to see if namespace is included\n+    if (!_routingZkAddressMap.containsKey(namespace)) {\n       throw new NoSuchElementException(\n           \"Failed to get metadata store realm: Namespace \" + namespace + \" is not found!\");\n     }\n+    // If namespace is included but not routing data, it means the routing data is invalid\n+    if (!_routingDataMap.containsKey(namespace)) {\n+      throw new IllegalStateException(\"Failed to get metadata store realm: Namespace \" + namespace\n+          + \" contains invalid routing data!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY0Njcx", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367664671", "createdAt": "2020-03-03T02:26:40Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyNjo0MVrOFw2VTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyNjo0MVrOFw2VTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NjE1Nw==", "bodyText": "Probably a good idea to add a warn log here?", "url": "https://github.com/apache/helix/pull/844#discussion_r386766157", "createdAt": "2020-03-03T02:26:41Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -262,17 +309,22 @@ public void refreshRoutingData(String namespace) {\n     if (!_routingZkAddressMap.containsKey(namespace)) {\n       LOG.error(\n           \"Failed to refresh internally-cached routing data! Namespace not found: \" + namespace);\n+      return;\n     }\n \n+    Map<String, List<String>> rawRoutingData;\n     try {\n-      Map<String, List<String>> rawRoutingData =\n-          _routingDataReaderMap.get(namespace).getRoutingData();\n+      rawRoutingData = _routingDataReaderMap.get(namespace).getRoutingData();\n       _realmToShardingKeysMap.put(namespace, rawRoutingData);\n-\n-      MetadataStoreRoutingData routingData = new TrieRoutingData(rawRoutingData);\n-      _routingDataMap.put(namespace, routingData);\n     } catch (InvalidRoutingDataException e) {\n       LOG.error(\"Failed to refresh cached routing data for namespace {}\", namespace, e);\n+      return;\n+    }\n+\n+    try {\n+      _routingDataMap.put(namespace, new TrieRoutingData(rawRoutingData));\n+    } catch (InvalidRoutingDataException e) {\n+      // Do not create TrieRoutingData if the routing data is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY1MTI5", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367665129", "createdAt": "2020-03-03T02:28:23Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyODoyM1rOFw2W4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyODoyM1rOFw2W4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NjU2MQ==", "bodyText": "Could we create a constant variable ObjectMapper instead of creating one every time this endpoint is called?\nprivate static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\nand you could use this throughout the class :)", "url": "https://github.com/apache/helix/pull/844#discussion_r386766561", "createdAt": "2020-03-03T02:28:23Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -209,8 +214,20 @@ public synchronized boolean setRoutingData(Map<String, List<String>> routingData\n       return true;\n     }\n \n-    // TODO: Forward the request to leader\n-    return true;\n+    String leaderHostName = _leaderElection.getCurrentLeaderInfo().getId();\n+    String url = leaderHostName + constructUrlSuffix(\n+        MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    HttpPut httpPut = new HttpPut(url);\n+    String routingDataJsonString;\n+    try {\n+      routingDataJsonString = new ObjectMapper().writeValueAsString(routingData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY1NDQy", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367665442", "createdAt": "2020-03-03T02:29:30Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyOTozMVrOFw2X1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjoyOTozMVrOFw2X1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NjgwNQ==", "bodyText": "shouldWeUseCamelCaseFor request_method?", "url": "https://github.com/apache/helix/pull/844#discussion_r386766805", "createdAt": "2020-03-03T02:29:31Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -332,8 +349,9 @@ private String constructUrlSuffix(String... urlParams) {\n     return String.join(\"\", allUrlParameters);\n   }\n \n-  private boolean forwardRequestToLeader(String urlSuffix, HttpConstants.RestVerbs request_method,\n-      int expectedResponseCode) throws IllegalArgumentException {\n+  private boolean buildAndSendRequestToLeader(String urlSuffix,\n+      HttpConstants.RestVerbs request_method, int expectedResponseCode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY1Nzk2", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367665796", "createdAt": "2020-03-03T02:30:39Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMDozOVrOFw2ZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMDozOVrOFw2ZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NzE3Mg==", "bodyText": "Same thing as above. We can create ObjectMapper once and use it over and over.", "url": "https://github.com/apache/helix/pull/844#discussion_r386767172", "createdAt": "2020-03-03T02:30:39Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -220,6 +228,24 @@ public Response getRoutingData() {\n     return JSONRepresentation(responseMap);\n   }\n \n+  @PUT\n+  @Path(\"/routing-data\")\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  public Response setRoutingData(String jsonContent) {\n+    try {\n+      Map<String, List<String>> routingData = new ObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY2Mjkz", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367666293", "createdAt": "2020-03-03T02:32:18Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMjoxOFrOFw2a5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMjoxOFrOFw2a5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NzU4OQ==", "bodyText": "Nit: Outside of helix-core module, we should try to use ZkClient instead of BaseDataAccessor.", "url": "https://github.com/apache/helix/pull/844#discussion_r386767589", "createdAt": "2020-03-03T02:32:18Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -130,17 +116,11 @@ public void testGetRoutingDataMSRDChildEmptyValue() {\n     }\n   }\n \n-  private void deleteRoutingDataPath() throws Exception {\n-    Assert.assertTrue(TestHelper.verify(() -> {\n-      ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n-          .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n-\n-      if (ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n-          .exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n-        return false;\n-      }\n-\n-      return true;\n-    }, TestHelper.WAIT_DURATION), \"Routing data path should be deleted after the tests.\");\n+  private void clearRoutingDataPath() {\n+    for (String zkRealm : _baseAccessor\n+        .getChildNames(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, AccessOption.PERSISTENT)) {\n+      _baseAccessor.remove(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm,\n+          AccessOption.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY2NTIw", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367666520", "createdAt": "2020-03-03T02:33:06Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMzowNlrOFw2bkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMzowNlrOFw2bkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2Nzc2MA==", "bodyText": "Could we use a pre-defined constant instead of \"PUT\"? (Cue: HttpVerbs..) Same applies below.", "url": "https://github.com/apache/helix/pull/844#discussion_r386767760", "createdAt": "2020-03-03T02:33:06Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataWriter.java", "diffHunk": "@@ -132,61 +132,86 @@ public void testSetRoutingData() {\n   public void testAddMetadataStoreRealmNonLeader() {\n     MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n     mockWriter.addMetadataStoreRealm(DUMMY_REALM);\n-    Assert.assertEquals(\"PUT\", mockWriter.calledRequest.getMethod());\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"PUT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY2Njcw", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367666670", "createdAt": "2020-03-03T02:33:33Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMzozNFrOFw2cIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozMzozNFrOFw2cIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2NzkwNA==", "bodyText": "It would be better to stick with ZkClient if possible outside of helix-core module.", "url": "https://github.com/apache/helix/pull/844#discussion_r386767904", "createdAt": "2020-03-03T02:33:34Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataWriter.java", "diffHunk": "@@ -132,61 +132,86 @@ public void testSetRoutingData() {\n   public void testAddMetadataStoreRealmNonLeader() {\n     MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n     mockWriter.addMetadataStoreRealm(DUMMY_REALM);\n-    Assert.assertEquals(\"PUT\", mockWriter.calledRequest.getMethod());\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"PUT\");\n     List<String> expectedUrlParams = Arrays\n         .asList(MetadataStoreRoutingConstants.MSDS_NAMESPACES_URL_PREFIX, DUMMY_NAMESPACE,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_REALMS_ENDPOINT, DUMMY_REALM);\n     String expectedUrl =\n         getBaseUri().toString() + String.join(\"/\", expectedUrlParams).replaceAll(\"//\", \"/\")\n             .substring(1);\n-    Assert.assertEquals(expectedUrl, mockWriter.calledRequest.getURI().toString());\n+    Assert.assertEquals(mockWriter.calledRequest.getURI().toString(), expectedUrl);\n     mockWriter.close();\n   }\n \n   @Test(dependsOnMethods = \"testAddMetadataStoreRealmNonLeader\")\n   public void testDeleteMetadataStoreRealmNonLeader() {\n     MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n     mockWriter.deleteMetadataStoreRealm(DUMMY_REALM);\n-    Assert.assertEquals(\"DELETE\", mockWriter.calledRequest.getMethod());\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"DELETE\");\n     List<String> expectedUrlParams = Arrays\n         .asList(MetadataStoreRoutingConstants.MSDS_NAMESPACES_URL_PREFIX, DUMMY_NAMESPACE,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_REALMS_ENDPOINT, DUMMY_REALM);\n     String expectedUrl =\n         getBaseUri().toString() + String.join(\"/\", expectedUrlParams).replaceAll(\"//\", \"/\")\n             .substring(1);\n-    Assert.assertEquals(expectedUrl, mockWriter.calledRequest.getURI().toString());\n+    Assert.assertEquals(mockWriter.calledRequest.getURI().toString(), expectedUrl);\n     mockWriter.close();\n   }\n \n   @Test(dependsOnMethods = \"testDeleteMetadataStoreRealmNonLeader\")\n   public void testAddShardingKeyNonLeader() {\n     MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n     mockWriter.addShardingKey(DUMMY_REALM, DUMMY_SHARDING_KEY);\n-    Assert.assertEquals(\"PUT\", mockWriter.calledRequest.getMethod());\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"PUT\");\n     List<String> expectedUrlParams = Arrays\n         .asList(MetadataStoreRoutingConstants.MSDS_NAMESPACES_URL_PREFIX, DUMMY_NAMESPACE,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_REALMS_ENDPOINT, DUMMY_REALM,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_SHARDING_KEYS_ENDPOINT, DUMMY_SHARDING_KEY);\n     String expectedUrl =\n         getBaseUri().toString() + String.join(\"/\", expectedUrlParams).replaceAll(\"//\", \"/\")\n             .substring(1);\n-    Assert.assertEquals(expectedUrl, mockWriter.calledRequest.getURI().toString());\n+    Assert.assertEquals(mockWriter.calledRequest.getURI().toString(), expectedUrl);\n     mockWriter.close();\n   }\n \n   @Test(dependsOnMethods = \"testAddShardingKeyNonLeader\")\n   public void testDeleteShardingKeyNonLeader() {\n     MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n     mockWriter.deleteShardingKey(DUMMY_REALM, DUMMY_SHARDING_KEY);\n-    Assert.assertEquals(\"DELETE\", mockWriter.calledRequest.getMethod());\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"DELETE\");\n     List<String> expectedUrlParams = Arrays\n         .asList(MetadataStoreRoutingConstants.MSDS_NAMESPACES_URL_PREFIX, DUMMY_NAMESPACE,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_REALMS_ENDPOINT, DUMMY_REALM,\n             MetadataStoreRoutingConstants.MSDS_GET_ALL_SHARDING_KEYS_ENDPOINT, DUMMY_SHARDING_KEY);\n     String expectedUrl =\n         getBaseUri().toString() + String.join(\"/\", expectedUrlParams).replaceAll(\"//\", \"/\")\n             .substring(1);\n-    Assert.assertEquals(expectedUrl, mockWriter.calledRequest.getURI().toString());\n+    Assert.assertEquals(mockWriter.calledRequest.getURI().toString(), expectedUrl);\n     mockWriter.close();\n   }\n+\n+  @Test(dependsOnMethods = \"testDeleteShardingKeyNonLeader\")\n+  public void testSetRoutingDataNonLeader() {\n+    MockWriter mockWriter = new MockWriter(DUMMY_NAMESPACE, ZK_ADDR);\n+    Map<String, List<String>> testRoutingDataMap =\n+        ImmutableMap.of(DUMMY_REALM, Collections.singletonList(DUMMY_SHARDING_KEY));\n+    mockWriter.setRoutingData(testRoutingDataMap);\n+    Assert.assertEquals(mockWriter.calledRequest.getMethod(), \"PUT\");\n+    List<String> expectedUrlParams = Arrays\n+        .asList(MetadataStoreRoutingConstants.MSDS_NAMESPACES_URL_PREFIX, DUMMY_NAMESPACE,\n+            MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    String expectedUrl =\n+        getBaseUri().toString() + String.join(\"/\", expectedUrlParams).replaceAll(\"//\", \"/\")\n+            .substring(1);\n+    Assert.assertEquals(mockWriter.calledRequest.getURI().toString(), expectedUrl);\n+    mockWriter.close();\n+  }\n+\n+  private void clearRoutingDataPath() {\n+    for (String zkRealm : _baseAccessor\n+        .getChildNames(MetadataStoreRoutingConstants.ROUTING_DATA_PATH, AccessOption.PERSISTENT)) {\n+      _baseAccessor.remove(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm,\n+          AccessOption.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY3MTA3", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367667107", "createdAt": "2020-03-03T02:35:01Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNTowMlrOFw2djA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNTowMlrOFw2djA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2ODI2OA==", "bodyText": "We shouldn't remove the TestHelper block. Could we add that back? In general, please try to add a verify() block after cleanup.", "url": "https://github.com/apache/helix/pull/844#discussion_r386768268", "createdAt": "2020-03-03T02:35:02Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/MetadataStoreDirectoryAccessorTestBase.java", "diffHunk": "@@ -100,23 +100,19 @@ public void beforeClass() throws Exception {\n   @AfterClass\n   public void afterClass() throws Exception {\n     System.clearProperty(MetadataStoreRoutingConstants.MSDS_SERVER_HOSTNAME_KEY);\n+    _routingDataReader.close();\n     deleteRoutingDataPath();\n   }\n \n-  protected void deleteRoutingDataPath() throws Exception {\n-    Assert.assertTrue(TestHelper.verify(() -> {\n-      _zkList.forEach(zk -> ZK_SERVER_MAP.get(zk).getZkClient()\n-          .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH));\n-\n-      for (String zk : _zkList) {\n-        if (ZK_SERVER_MAP.get(zk).getZkClient()\n-            .exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n-          return false;\n+  protected void deleteRoutingDataPath() {\n+    for (String zk : _zkList) {\n+      ZkClient zkClient = ZK_SERVER_MAP.get(zk).getZkClient();\n+      if (zkClient.exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        for (String zkRealm : zkClient.getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+          zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY3Mzkw", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367667390", "createdAt": "2020-03-03T02:35:50Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNTo1MVrOFw2ebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNTo1MVrOFw2ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2ODQ5NQ==", "bodyText": "Please create a constant OBJECT_MAPPER and use it throughout.", "url": "https://github.com/apache/helix/pull/844#discussion_r386768495", "createdAt": "2020-03-03T02:35:51Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestMetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -452,6 +454,43 @@ public void testDeleteShardingKey() throws InvalidRoutingDataException {\n     Assert.assertEquals(getAllShardingKeysInTestRealm1(), expectedShardingKeysSet);\n   }\n \n+  @Test(dependsOnMethods = \"testDeleteShardingKey\")\n+  public void testSetRoutingData() throws InvalidRoutingDataException, IOException {\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    routingData.put(TEST_REALM_1, TEST_SHARDING_KEYS_2);\n+    routingData.put(TEST_REALM_2, TEST_SHARDING_KEYS_1);\n+    String routingDataString = new ObjectMapper().writeValueAsString(routingData);\n+\n+    Map<String, String> badFormatRoutingData = new HashMap<>();\n+    badFormatRoutingData.put(TEST_REALM_1, TEST_REALM_2);\n+    badFormatRoutingData.put(TEST_REALM_2, TEST_REALM_1);\n+    String badFormatRoutingDataString = new ObjectMapper().writeValueAsString(badFormatRoutingData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjY3NjAx", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-367667601", "createdAt": "2020-03-03T02:36:35Z", "commit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNjozNVrOFw2fKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNjozNVrOFw2fKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2ODY4Mw==", "bodyText": "Question: we still want to throw an exception when the data is empty, right?", "url": "https://github.com/apache/helix/pull/844#discussion_r386768683", "createdAt": "2020-03-03T02:36:35Z", "author": {"login": "narendly"}, "path": "metadata-store-directory-common/src/main/java/org/apache/helix/msdcommon/datamodel/TrieRoutingData.java", "diffHunk": "@@ -167,8 +167,8 @@ private TrieNode getLongestPrefixNodeAlongPath(String path) {\n   }\n \n   /*\n-   * Checks for the edge case when the only sharding key in provided routing data is the delimiter\n-   * or an empty string. When this is the case, the trie is valid and contains only one node, which\n+   * Checks for the edge case when the only sharding key in provided routing data is the delimiter.\n+   * When this is the case, the trie is valid and contains only one node, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a46bd3975f47b6f1d094a0fc763f69e1e1ee819"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/7ccecb57571c93a45c8b854f43577f5d30209789", "committedDate": "2020-03-03T19:16:03Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjk5NTE0", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-368299514", "createdAt": "2020-03-03T20:27:12Z", "commit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyNzoxMlrOFxVViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyNzoxMlrOFxVViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NDEyMA==", "bodyText": "Do we need to log the exception here? Otherwise you'd be failing silently.", "url": "https://github.com/apache/helix/pull/844#discussion_r387274120", "createdAt": "2020-03-03T20:27:12Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -209,8 +215,20 @@ public synchronized boolean setRoutingData(Map<String, List<String>> routingData\n       return true;\n     }\n \n-    // TODO: Forward the request to leader\n-    return true;\n+    String leaderHostName = _leaderElection.getCurrentLeaderInfo().getId();\n+    String url = leaderHostName + constructUrlSuffix(\n+        MetadataStoreRoutingConstants.MSDS_GET_ALL_ROUTING_DATA_ENDPOINT);\n+    HttpPut httpPut = new HttpPut(url);\n+    String routingDataJsonString;\n+    try {\n+      routingDataJsonString = OBJECT_MAPPER.writeValueAsString(routingData);\n+    } catch (JsonGenerationException | JsonMappingException e) {\n+      throw new IllegalArgumentException(e.getMessage());\n+    } catch (IOException e) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzAwMTE0", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-368300114", "createdAt": "2020-03-03T20:28:12Z", "commit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyODoxM1rOFxVXfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyODoxM1rOFxVXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NDYyMg==", "bodyText": "I think it would be better to throw an exception here because this is not supposed to happen.", "url": "https://github.com/apache/helix/pull/844#discussion_r387274622", "createdAt": "2020-03-03T20:28:13Z", "author": {"login": "narendly"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/accessor/ZkRoutingDataWriter.java", "diffHunk": "@@ -332,20 +350,21 @@ private String constructUrlSuffix(String... urlParams) {\n     return String.join(\"\", allUrlParameters);\n   }\n \n-  private boolean forwardRequestToLeader(String urlSuffix, HttpConstants.RestVerbs request_method,\n-      int expectedResponseCode) throws IllegalArgumentException {\n+  private boolean buildAndSendRequestToLeader(String urlSuffix,\n+      HttpConstants.RestVerbs requestMethod, int expectedResponseCode)\n+      throws IllegalArgumentException {\n     String leaderHostName = _leaderElection.getCurrentLeaderInfo().getId();\n     String url = leaderHostName + urlSuffix;\n     HttpUriRequest request;\n-    switch (request_method) {\n+    switch (requestMethod) {\n       case PUT:\n         request = new HttpPut(url);\n         break;\n       case DELETE:\n         request = new HttpDelete(url);\n         break;\n       default:\n-        LOG.error(\"Unsupported request_method: \" + request_method.name());\n+        LOG.error(\"Unsupported requestMethod: \" + requestMethod.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzAxNzI2", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-368301726", "createdAt": "2020-03-03T20:30:52Z", "commit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDozMDo1MlrOFxVcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDozMDo1MlrOFxVcmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTkyOA==", "bodyText": "Could we add a retry logic on false?", "url": "https://github.com/apache/helix/pull/844#discussion_r387275928", "createdAt": "2020-03-03T20:30:52Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkMetadataStoreDirectory.java", "diffHunk": "@@ -277,4 +315,27 @@ public void testChildChangeCallback() throws Exception {\n       return false;\n     }, TestHelper.WAIT_DURATION));\n   }\n+\n+  private void clearRoutingData() throws Exception {\n+    Assert.assertTrue(TestHelper.verify(() -> {\n+      for (String zk : _zkList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzAzMDg0", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-368303084", "createdAt": "2020-03-03T20:33:05Z", "commit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDozMzowNVrOFxVg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDozMzowNVrOFxVg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NzAxMQ==", "bodyText": "Need a retry while block", "url": "https://github.com/apache/helix/pull/844#discussion_r387277011", "createdAt": "2020-03-03T20:33:05Z", "author": {"login": "narendly"}, "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/accessor/TestZkRoutingDataReader.java", "diffHunk": "@@ -130,17 +123,14 @@ public void testGetRoutingDataMSRDChildEmptyValue() {\n     }\n   }\n \n-  private void deleteRoutingDataPath() throws Exception {\n+  private void clearRoutingDataPath() throws Exception {\n     Assert.assertTrue(TestHelper.verify(() -> {\n-      ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n-          .deleteRecursively(MetadataStoreRoutingConstants.ROUTING_DATA_PATH);\n-\n-      if (ZK_SERVER_MAP.get(ZK_ADDR).getZkClient()\n-          .exists(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n-        return false;\n+      for (String zkRealm : _zkClient\n+          .getChildren(MetadataStoreRoutingConstants.ROUTING_DATA_PATH)) {\n+        _zkClient.delete(MetadataStoreRoutingConstants.ROUTING_DATA_PATH + \"/\" + zkRealm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ccecb57571c93a45c8b854f43577f5d30209789"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c900f8d8ab1a543c9d83de6f766c16c4fda5de", "author": {"user": {"login": "NealSun96", "name": "Neal Sun"}}, "url": "https://github.com/apache/helix/commit/21c900f8d8ab1a543c9d83de6f766c16c4fda5de", "committedDate": "2020-03-03T22:14:38Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mzk5Njk2", "url": "https://github.com/apache/helix/pull/844#pullrequestreview-368399696", "createdAt": "2020-03-03T23:24:51Z", "commit": {"oid": "21c900f8d8ab1a543c9d83de6f766c16c4fda5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4634, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}