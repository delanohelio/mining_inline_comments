{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzQ5MjI0", "number": 1109, "title": "ZkClient should not keep retrying getChildren() due to large number of children", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #962\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nFor ZkClient's getChildren() operation, if there are a large number of children and the response packet size exceeds jute.maxbuffer default value 4MB on zk client side, ZkClient will get a ConnectionLossException and keep retrying connecting to ZK. The consequence is, the infinite retry may cause heavy GC on ZK server and kill ZK server.\nWe could consider getting number of children in the path and check if it exceeds the limit. If it exceeds the children limit, there is no need to retry and then exist retry.\nThe default children limit is set for helix messages length using UUID. Packet length of 100K messages doesn't exceed 4 MB.\nThis PR is the first phase to fix the issue: a workaround to exit retry loop. Once we have a better way to solve the problem on ZK server side, we should remove this check.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestGetChildrenOnLargeNumChildren\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nzookeeper-api\n\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 54.839 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  58.964 s\n[INFO] Finished at: 2020-07-22T16:12:28-07:00\n[INFO] ------------------------------------------------------------------------\n\nhelix-core\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestCustomizedViewAggregation.testCustomizedViewAggregation:389->validateAggregationSnapshot:233 expected:<true> but was:<false>\n[ERROR]   TestJobQueueCleanUp.testJobQueueAutoCleanUp \u00bb ThreadTimeout Method org.testng....\n[ERROR]   TestRebalanceRunningTask.testFixedTargetTaskAndEnabledRebalanceAndNodeAdded:330 expected:<true> but was:<false>\n[INFO]\n[ERROR] Tests run: 1145, Failures: 3, Errors: 0, Skipped: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:23 h\n[INFO] Finished at: 2020-07-22T17:39:02-07:00\n[INFO] ------------------------------------------------------------------------\n\n\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.157 s - in org.apache.helix.integration.task.TestRebalanceRunningTask\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.442 s - in org.apache.helix.integration.TestCustomizedViewAggregation\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n\n\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.025 s - in org.apache.helix.integration.task.TestJobQueueCleanUp\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-06-22T07:44:34Z", "url": "https://github.com/apache/helix/pull/1109", "merged": true, "mergeCommit": {"oid": "23905dd751eea8cba6f0916e1c577c80109adc9f"}, "closed": true, "closedAt": "2020-07-23T18:03:55Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctr9_RABqjM0NjcwMTkxNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3iNFjgFqTQ1MzcxNzE3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e5ccab636d2432c20e0caeed70514521e188a3", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e2e5ccab636d2432c20e0caeed70514521e188a3", "committedDate": "2020-06-22T06:48:36Z", "message": "Stat check for listing children"}, "afterCommit": {"oid": "ef6c44bf124840296e0b602a0fe5f3121c90a0b3", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ef6c44bf124840296e0b602a0fe5f3121c90a0b3", "committedDate": "2020-06-22T07:46:10Z", "message": "Stat check for listing children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef6c44bf124840296e0b602a0fe5f3121c90a0b3", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ef6c44bf124840296e0b602a0fe5f3121c90a0b3", "committedDate": "2020-06-22T07:46:10Z", "message": "Stat check for listing children"}, "afterCommit": {"oid": "50672b93dc92d978bae3775b31a09134abb51316", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/50672b93dc92d978bae3775b31a09134abb51316", "committedDate": "2020-06-22T08:14:15Z", "message": "Stat check for listing children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50672b93dc92d978bae3775b31a09134abb51316", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/50672b93dc92d978bae3775b31a09134abb51316", "committedDate": "2020-06-22T08:14:15Z", "message": "Stat check for listing children"}, "afterCommit": {"oid": "fa8b75f1127685fc5dfa1addbc097f289143783e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/fa8b75f1127685fc5dfa1addbc097f289143783e", "committedDate": "2020-06-22T08:17:50Z", "message": "Stat check for listing children"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/088d8cffca6f373ed4f7a7070454288523fd8471", "committedDate": "2020-06-22T08:28:18Z", "message": "Stat check for listing children"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa8b75f1127685fc5dfa1addbc097f289143783e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/fa8b75f1127685fc5dfa1addbc097f289143783e", "committedDate": "2020-06-22T08:17:50Z", "message": "Stat check for listing children"}, "afterCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/088d8cffca6f373ed4f7a7070454288523fd8471", "committedDate": "2020-06-22T08:28:18Z", "message": "Stat check for listing children"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQ4ODkw", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435048890", "createdAt": "2020-06-22T15:41:39Z", "commit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0MTozOVrOGnGZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0MTozOVrOGnGZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjU1Ng==", "bodyText": "Please add a TODO item here to state this is just a workaround fix because zookeeper does not return the failure reason if it fails to read a large children list.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443652556", "createdAt": "2020-06-22T15:41:39Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +108,17 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDUxMDkw", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435051090", "createdAt": "2020-06-22T15:44:08Z", "commit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDowOFrOGnGgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDowOFrOGnGgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDMwNQ==", "bodyText": "If we say there is no existing exception that can reflect the real failure here, why not extend a new ZookeeperException here?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443654305", "createdAt": "2020-06-22T15:44:08Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount[0];\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount[0] >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null && stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                        + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                    NUM_CHILDREN_LIMIT);\n+                // There is not an accurate KeeperException for the purpose.\n+                // MarshallingErrorException could represent transport error,\n+                // so use it to exit retry loop and tell that zk is not able to\n+                // transport the data because packet length is too large.\n+                throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDUxNTIy", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435051522", "createdAt": "2020-06-22T15:44:37Z", "commit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDozN1rOGnGhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDozN1rOGnGhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw==", "bodyText": "? this pattern looks very confusing, why not use a regular integer, what do you try to achieve here?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443654607", "createdAt": "2020-06-22T15:44:37Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDU1OTkz", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435055993", "createdAt": "2020-06-22T15:49:39Z", "commit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c716568af44563c1e920d043f32c35531c18c7fc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c716568af44563c1e920d043f32c35531c18c7fc", "committedDate": "2020-06-22T17:19:28Z", "message": "Reset connection loss count if num children is less than limit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTMwOTU3", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435130957", "createdAt": "2020-06-22T17:25:26Z", "commit": {"oid": "c716568af44563c1e920d043f32c35531c18c7fc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyNToyN1rOGnKOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyNzo0NFrOGnKTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNTE3Mg==", "bodyText": "I added a TODO at getChildren() so when we remove that code part at getChildren(), we will also remove this private LIMIT. To make it clear, I also add a TODO for NUM_CHILDREN_LIMIT.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443715172", "createdAt": "2020-06-22T17:25:27Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +108,17 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjU1Ng=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNjQ0Mw==", "bodyText": "This variable needs to be accessed in inner class Callable so it needs to be final.\nAnd since it is final, we could not increment the value if we make a an integer. So we need this one element array to change value of this final variable. I understand it looks a bit ugly, but since we are removing the code part in a few months once we have a better way in zk server, I wanted to make it simple without creating a wrapper class.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443716443", "createdAt": "2020-06-22T17:27:44Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fb62b0a6d8cf61f62e8fc8223d22d942874413", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e1fb62b0a6d8cf61f62e8fc8223d22d942874413", "committedDate": "2020-06-22T17:50:57Z", "message": "Simplify comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/a4c674d96f3989f84af620d208de905a15e80901", "committedDate": "2020-06-22T20:30:40Z", "message": "Move connection loss count to callable."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzY0OTE2", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-435364916", "createdAt": "2020-06-23T00:44:25Z", "commit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo0NDoyNVrOGnVejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMTowMjo1MVrOGnVxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ==", "bodyText": "What's the reason we choose to use static block for initing NUM_CHILDREN_LIMIT but leaving MAX_RECONNECT_INTERVAL_MS as a static final var?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443899535", "createdAt": "2020-06-23T00:44:25Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA==", "bodyText": "BadArgumentsException looks better than this one.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443904314", "createdAt": "2020-06-23T01:02:51Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/54b2e0af1f526415f81ed68933ba409348eb1a86", "committedDate": "2020-06-23T05:47:40Z", "message": "Clear comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f7c6a2aea6ca639471b7b3371cc91a232bcf09e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2f7c6a2aea6ca639471b7b3371cc91a232bcf09e", "committedDate": "2020-06-23T05:45:03Z", "message": "Clear comments"}, "afterCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/54b2e0af1f526415f81ed68933ba409348eb1a86", "committedDate": "2020-06-23T05:47:40Z", "message": "Clear comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTc1ODA2", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-436175806", "createdAt": "2020-06-23T21:36:01Z", "commit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozNjowMlrOGn7gKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozNjowMlrOGn7gKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMjUzOA==", "bodyText": "Do we need this? If it is connection loss, @jiajunwang 's improvement for retry at zk event thread layer can handle that, right?", "url": "https://github.com/apache/helix/pull/1109#discussion_r444522538", "createdAt": "2020-06-23T21:36:02Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQ5ODcx", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-437049871", "createdAt": "2020-06-24T22:28:54Z", "commit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyODo1NFrOGolRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoyODozNlrOGomcdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNjc5Nw==", "bodyText": "This test relies on implementation detail of ZKClient. Can we just simulate the real scenario by creating say 10K children with name 100 bytes? Something would stand for longer time.", "url": "https://github.com/apache/helix/pull/1109#discussion_r445206797", "createdAt": "2020-06-24T22:28:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -799,4 +802,66 @@ public void testAsyncWriteOperations() {\n       zkClient.delete(\"/tmp/asyncOversize\");\n     }\n   }\n+\n+  /*\n+   * Tests getChildren() when there are an excessive number of children and connection loss happens,\n+   * the operation should terminate and exit retry loop.\n+   */\n+  @Test\n+  public void testGetChildrenOnLargeNumChildren() throws Exception {\n+    // Default packetLen is 4M. It is static final and initialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNjEwMw==", "bodyText": "As discussed offline. Here is the basic principle inherited from IOITech\nthis layer, we see KeeperException,\nuser see ZkException,\nretryUntilConnected, throw convert KeeperException to ZkException and throw ZkException.\nAnd user of ZkClient sees and handles various subtype of ZkException\nHere is an idea:\nSo maybe we can just add another type of ZkException say TooManyChildrenZkException and convert this from retryUntilConnect to this new ZkException. User of ZkClient can handle this TooManyChidrenZkException with whatever logic they want.", "url": "https://github.com/apache/helix/pull/1109#discussion_r445226103", "createdAt": "2020-06-24T23:28:36Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTcwNTkw", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-439570590", "createdAt": "2020-06-29T23:33:29Z", "commit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozMzoyOVrOGqmGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzo1MDozMFrOGqmctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzY5NA==", "bodyText": "I think we removed this because many clients complaining that this retry log floods their log file. Please make it debug or don't add it.", "url": "https://github.com/apache/helix/pull/1109#discussion_r447317694", "createdAt": "2020-06-29T23:33:29Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1503,12 +1555,14 @@ private void acquireEventLock() {\n         } catch (Exception e) {\n           throw ExceptionUtil.convertToRuntimeException(e);\n         }\n+\n         // before attempting a retry, check whether retry timeout has elapsed\n         if (System.currentTimeMillis() - operationStartTime > _operationRetryTimeoutInMillis) {\n           throw new ZkTimeoutException(\"Operation cannot be retried because of retry timeout (\"\n               + _operationRetryTimeoutInMillis + \" milli seconds). Retry was caused by \"\n               + retryCauseCode);\n         }\n+        LOG.warn(\"Retrying operation, caused by {}\", retryCauseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODQwMw==", "bodyText": "Let's make the comment clear.\n\"Failed to get children for path {} because of connection loss. Stop retrying because the number of children exceeds......\"", "url": "https://github.com/apache/helix/pull/1109#discussion_r447318403", "createdAt": "2020-06-29T23:35:27Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTU1MQ==", "bodyText": "I think you might want to keep checking the children's number on any retries after the first 3. Or, what if the children are increased during the retry, right?\nSo just make the logic like,\nif (count < 3 || getChildrenCount() < limit) {\ncount++;\nretry;\n} else {\nexist;\n}", "url": "https://github.com/apache/helix/pull/1109#discussion_r447319551", "createdAt": "2020-06-29T23:39:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // MarshallingErrorException could represent transport error: exceeding the\n+                  // Jute buffer size. So use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();\n+                } else {\n+                  // No need to do stat again for next connection loss.\n+                  connectionLossRetryCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzMxNw==", "bodyText": "This is a recursive retryUntilConnect call inside. I think it shall work. But it would be better if we can avoid this recursive call. Basically what you need to do is,\n\nwait until connected.\ncall the native exits() call for the state.\n\nThe benefit is mainly avoiding potential issues if we have retryuntilconnect inside another retry.", "url": "https://github.com/apache/helix/pull/1109#discussion_r447323317", "createdAt": "2020-06-29T23:50:30Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb3bcdce4c781b98fcdec5c0fbc2038900b610e1", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/cb3bcdce4c781b98fcdec5c0fbc2038900b610e1", "committedDate": "2020-07-03T06:14:55Z", "message": "Remove retry warn log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e0d1a3f9976288e7f3284ef35ca6e3d3b3c4e45", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1e0d1a3f9976288e7f3284ef35ca6e3d3b3c4e45", "committedDate": "2020-07-03T06:04:21Z", "message": "Remove retry warn log"}, "afterCommit": {"oid": "cb3bcdce4c781b98fcdec5c0fbc2038900b610e1", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/cb3bcdce4c781b98fcdec5c0fbc2038900b610e1", "committedDate": "2020-07-03T06:14:55Z", "message": "Remove retry warn log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1921623b97f103b4965af5d3c1d7d98a926a5c88", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/1921623b97f103b4965af5d3c1d7d98a926a5c88", "committedDate": "2020-07-22T20:52:30Z", "message": "Simplify comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e5aee6c0192dfd370bb87921da64e793aeffa4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/90e5aee6c0192dfd370bb87921da64e793aeffa4", "committedDate": "2020-07-22T21:24:53Z", "message": "Wrap private method checkNumChildren"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5937dd7f37c419b6e129c8d702f5e1d876329481", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5937dd7f37c419b6e129c8d702f5e1d876329481", "committedDate": "2020-07-22T21:20:19Z", "message": "Wrap private method checkNumChildren"}, "afterCommit": {"oid": "90e5aee6c0192dfd370bb87921da64e793aeffa4", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/90e5aee6c0192dfd370bb87921da64e793aeffa4", "committedDate": "2020-07-22T21:24:53Z", "message": "Wrap private method checkNumChildren"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjk3MzM5", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-453697339", "createdAt": "2020-07-22T21:26:19Z", "commit": {"oid": "5937dd7f37c419b6e129c8d702f5e1d876329481"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyNzoxOVrOG102uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyNzoxOVrOG102uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5MzY4OA==", "bodyText": "I just noticed this issue. So you only check on connection loss exception. What if when you call this exists, the connection has not been recovered yet? This is very possible since there is no other operation or waits between the error and this exists() call.\nIn this case, the check will throw an exception, and the retry until connect call will also return unexpectedly.\nI think we need to wait until connected here.", "url": "https://github.com/apache/helix/pull/1109#discussion_r459093688", "createdAt": "2020-07-22T21:27:19Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2253,25 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void checkNumChildren(String path) throws KeeperException, InterruptedException {\n+    Stat stat = ((ZkConnection) getConnection()).getZookeeper().exists(path, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e5aee6c0192dfd370bb87921da64e793aeffa4"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e01d4d4e765860a9b77531e26023001129db256", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/0e01d4d4e765860a9b77531e26023001129db256", "committedDate": "2020-07-22T21:47:21Z", "message": "getStat()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzE3MTcz", "url": "https://github.com/apache/helix/pull/1109#pullrequestreview-453717173", "createdAt": "2020-07-22T22:02:59Z", "commit": {"oid": "0e01d4d4e765860a9b77531e26023001129db256"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}