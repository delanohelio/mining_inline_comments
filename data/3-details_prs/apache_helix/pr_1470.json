{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MzcwMDYx", "number": 1470, "title": "ExpiredJob Workaround for Selective Update Race Conditions", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1469\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nCache selective update is a two step procedure. It first \"lists\", which gets all the ZNodes, and then it \"updates\" by comparing ZNode metadata to determine which ZNodes have been changed. Job enqueue is also a two step procedure, where it adds all JobConfigs one by one, and update WorkflowConfig's DAG in the end.\nIf selective update \"lists\" before all JobConfigs are added, and \"updates\" after the WorkflowConfig is done updating, it's possible to read in a DAG containing more jobs than JobConfigs that are seen by selective update. This causes TaskGarbageCollection to remove the jobs that are \"missing\" JobConfigs, even though their JobConfigs actually exist. This PR implements a workaround for determining expired jobs while avoiding this case of cache \"phantom read\": if JobConfig doesn't exist in the cache, check ZK directly.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[ERROR] Tests run: 1234, Failures: 1, Errors: 0, Skipped: 1, Time elapsed: 4,885.942 s <<< FAILURE! - in TestSuite\n[ERROR] testPeriodicRefresh(org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh)  Time elapsed: 2.022 s  <<< FAILURE!\njava.lang.AssertionError: expected:<4> but was:<3>\n        at org.apache.helix.integration.spectator.TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh(TestRoutingTableProviderPeriodicRefresh.java:214)\n\n[INFO] \n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:214 expected:<4> but was:<3>\n[INFO] \n[ERROR] Tests run: 1234, Failures: 1, Errors: 0, Skipped: 1\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:21 h\n[INFO] Finished at: 2020-10-21T12:14:46-07:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-15T20:28:54Z", "url": "https://github.com/apache/helix/pull/1470", "merged": true, "mergeCommit": {"oid": "2c615543bd86e50d76dd4d7006d1c90e130e9755"}, "closed": true, "closedAt": "2020-10-21T22:31:03Z", "author": {"login": "NealSun96"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTOYAGgFqTUxMDgzNTY0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU08HngFqTUxNDIyNTk4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODM1NjQw", "url": "https://github.com/apache/helix/pull/1470#pullrequestreview-510835640", "createdAt": "2020-10-16T22:46:41Z", "commit": {"oid": "16feb8925efeb60aa15053d69c2cb3b2d57e0059"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTY5NDEz", "url": "https://github.com/apache/helix/pull/1470#pullrequestreview-512169413", "createdAt": "2020-10-19T21:22:27Z", "commit": {"oid": "16feb8925efeb60aa15053d69c2cb3b2d57e0059"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjoyN1rOHkiJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNzo1NFrOHkiT9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDMzNg==", "bodyText": "This is a public API change. If there is other place using this API, the compilation may fail.", "url": "https://github.com/apache/helix/pull/1470#discussion_r508070336", "createdAt": "2020-10-19T21:22:27Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -789,14 +789,19 @@ protected static boolean removeJobsFromWorkflow(final HelixDataAccessor dataAcce\n    */\n   public static Set<String> getExpiredJobsFromCache(\n       WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n-      WorkflowContext workflowContext) {\n+      WorkflowContext workflowContext, HelixManager manager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16feb8925efeb60aa15053d69c2cb3b2d57e0059"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3Mjk1MA==", "bodyText": "This is public API change. I know it is added recently, but are we sure this won't break some other code using TaskUtil?\nThe other way can be simply add a check after line 85 to see if any expiredJobs are in the config and remove them from the expiredJob set.", "url": "https://github.com/apache/helix/pull/1470#discussion_r508072950", "createdAt": "2020-10-19T21:27:54Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/TaskGarbageCollectionStage.java", "diffHunk": "@@ -81,8 +81,8 @@ public void process(ClusterEvent event) throws Exception {\n         if (nextPurgeTime <= currentTime) {\n           nextPurgeTime = currentTime + purgeInterval;\n           // Find jobs that are ready to be purged\n-          Set<String> expiredJobs =\n-              TaskUtil.getExpiredJobsFromCache(dataProvider, workflowConfig, workflowContext);\n+          Set<String> expiredJobs = TaskUtil\n+              .getExpiredJobsFromCache(dataProvider, workflowConfig, workflowContext, manager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16feb8925efeb60aa15053d69c2cb3b2d57e0059"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0206ef3178313f498602796f75d3392306254f9", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/b0206ef3178313f498602796f75d3392306254f9", "committedDate": "2020-10-21T17:51:11Z", "message": "Add ZK fallback when JobConfig is missing during Garbage Collection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16feb8925efeb60aa15053d69c2cb3b2d57e0059", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/16feb8925efeb60aa15053d69c2cb3b2d57e0059", "committedDate": "2020-10-15T17:37:32Z", "message": "Add ZK fallback when JobConfig is missing during Garbage Collection"}, "afterCommit": {"oid": "b0206ef3178313f498602796f75d3392306254f9", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/b0206ef3178313f498602796f75d3392306254f9", "committedDate": "2020-10-21T17:51:11Z", "message": "Add ZK fallback when JobConfig is missing during Garbage Collection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjI1OTg4", "url": "https://github.com/apache/helix/pull/1470#pullrequestreview-514225988", "createdAt": "2020-10-21T22:16:27Z", "commit": {"oid": "b0206ef3178313f498602796f75d3392306254f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}