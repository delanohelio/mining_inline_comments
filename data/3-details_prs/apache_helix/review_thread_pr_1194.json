{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjgwMDU3", "number": 1194, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNjoxNlrOET44tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyNToxOFrOEUe28Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkwNDIxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNjoxNlrOG54KXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTowMDo0OVrOG7FNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ==", "bodyText": "can we delete parent path here without child node deleted?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342175", "createdAt": "2020-07-31T00:26:16Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NTEwMA==", "bodyText": "No, we cannot because there would be node not empty exception.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463345100", "createdAt": "2020-07-31T00:37:36Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0ODUxNw==", "bodyText": "My concern is this:\nif using deleteRecursively(), it won't work because list all the children znode name would cause \"marshalling\" error as what happened in GCN, right?\nif using delete as you do here, I think it would throw another exception as not empty. So this does not work here. Or am I missing something?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463348517", "createdAt": "2020-07-31T00:50:01Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzY2Nw==", "bodyText": "delete() returns boolean. Should handle ZkException here as I've removed deleteRecursively().", "url": "https://github.com/apache/helix/pull/1194#discussion_r463353667", "createdAt": "2020-07-31T01:10:00Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTgwOQ==", "bodyText": "So in this case, it would always throw exception, right?\nThen why bother. Just leave the znode there anyway.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463355809", "createdAt": "2020-07-31T01:18:10Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1ODM1Mg==", "bodyText": "As a good practice, a unit test should cleanup itself and avoid other tests.\nIt won't always throw exception. If you carefully understand the code, you'll find the tips of using ephemeral nodes and closing the zkClient to delete the ephemeral nodes for cleanup. The exception handling here is just in case zk server doesn't remove ephemeral nodes yet.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463358352", "createdAt": "2020-07-31T01:28:04Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NDYxNg==", "bodyText": "My question is that is this exception always thrown? I believe it would always be thrown. Can you verify?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463364616", "createdAt": "2020-07-31T01:53:47Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3MDQzNA==", "bodyText": "Can we also re-open this comment thread?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463370434", "createdAt": "2020-07-31T02:18:08Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5MDA0OQ==", "bodyText": "What do you mean by always thrown?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463390049", "createdAt": "2020-07-31T03:45:36Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMzA2OQ==", "bodyText": "String path = \"/\" + TestHelper.getTestMethodName() is path value.\nNow at the time this line of code _zkClient.delete(path); , there are a lot of znodes underlying this path. So the delete should always fail, with exception such as NoEmpty right?  Or am I understanding this wrong?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463413069", "createdAt": "2020-07-31T05:32:22Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNDk5MQ==", "bodyText": "@kaisun2000 I've replied you: they are ephemeral znodes.\n\nIt won't always throw exception. If you carefully understand the code, you'll find the tips of using ephemeral nodes and closing the zkClient to delete the ephemeral nodes for cleanup. The exception handling here is just in case zk server doesn't remove ephemeral nodes yet.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463934991", "createdAt": "2020-08-01T07:34:57Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNDU2Mg==", "bodyText": "I see. Did not notice this ephemeral node. So closing the _zkClient delete the nodes. The second delete is just to delete the parent path. This looks good.", "url": "https://github.com/apache/helix/pull/1194#discussion_r464604562", "createdAt": "2020-08-03T19:00:49Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkwNjAwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNzoyMVrOG54LYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOToyODo1NlrOG7GAxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ==", "bodyText": "why do we need this? is it 30sec?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342435", "createdAt": "2020-07-31T00:27:21Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NTg0Nw==", "bodyText": "30 * 1000L ms.\nA good practice would be: if the test relies on an external system(zk here), it'd be good to have a timeout. Otherwise, if the connection hangs, the test also hangs. Eg., if the operation multi() hangs since it is sync, it hangs there forever?\nTimeout makes the test process continue for other tests.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463345847", "createdAt": "2020-07-31T00:40:45Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzU1MQ==", "bodyText": "Another thing is that in these 4 secs, is it possible another test would time out the session of _zkClient. Shall we use a dedicated ZkClient by creating one and later close it.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463347551", "createdAt": "2020-07-31T00:47:10Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzYzOA==", "bodyText": "also for safety, make it 60secs?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463347638", "createdAt": "2020-07-31T00:47:30Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTA0NA==", "bodyText": "This _zkClient is created within this class. While this test is running, there is no other thread referencing this _zkClient to close it.\nI considered using another zkClient. But it just adds one more connection to so for this case there will be two connections at the same time. I believe reuse this one is good enough.\nI ran it in my laptop as well, 30s is good enough. If it's more than 30s, something is wrong and it should timeout to fail.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463351044", "createdAt": "2020-07-31T00:59:26Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTMzNQ==", "bodyText": "You laptop runs on SSD. Desktop or TMC machines can be slower. Leave some room for error is safe here IMO.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463355335", "createdAt": "2020-07-31T01:16:16Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1OTQxMg==", "bodyText": "30s has already good room for this test. In my tests, it completes in ~5s. If it really exceeds 30s, maybe 60s don't even help.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463359412", "createdAt": "2020-07-31T01:32:18Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2NDc4MA==", "bodyText": "Can you the whole test under helix in desktop to make sure this 30s is safe?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463364780", "createdAt": "2020-07-31T01:54:27Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2ODA4Mg==", "bodyText": "I did zookeeper-api in both desktop and laptop. Is this what you meant?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463368082", "createdAt": "2020-07-31T02:08:12Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2OTY0Mw==", "bodyText": "No, run all test from helix. That is what TMC is doing I guess. This is to simulate that test environment. We don't want that your fix working here but later it turned out this test still not working TMC. Note the cost over there is way higher than changing it here.\nIn fact, I noticed in our test, there are failed test due to Timed out from time to time. Those failure are likely before the machine may not be able to schedule the thread to run while the timer is ticking. I don't think it is a good idea to add a time out here.\nBy the way, can you re-open this comment thread.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463369643", "createdAt": "2020-07-31T02:14:48Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4Nzg5Mg==", "bodyText": "I actually didn't resolve this thread... I intended to keep it open for discussion.\nRunning all helix tests is not necessary. This is a separate module. Even running in the test machine, tests in different modules are independent.\nTimeout is good practice. Just an example. https://github.com/apache/zookeeper/blob/fe940cdd8fb23ba09684cefb73233d570f4a20fa/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java#L165\nHow could you ensure 60s would not timeout then? Then how about 10 minutes, 1 hour?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463387892", "createdAt": "2020-07-31T03:35:13Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxNDAwOA==", "bodyText": "Yes, then remove this timeout. The test has a default timeout 300sec. In my opinion, relying on 300sec default is much safer. Testing under your own laptop may not fit a lot other environment.\nSee this:\n[ERROR] testLostZkConnection(org.apache.helix.integration.TestZkConnectionLost) Time elapsed: 300.015 s <<< FAILURE!\norg.testng.internal.thread.ThreadTimeoutException: Method org.testng.internal.TestNGMethod.testLostZkConnection() didn't finish within the time-out 300000", "url": "https://github.com/apache/helix/pull/1194#discussion_r463414008", "createdAt": "2020-07-31T05:36:14Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNDg3Mg==", "bodyText": "Please let me remind you that the default timeout 300sec is set only for helix-core's tests, not in zookeeper-api.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463934872", "createdAt": "2020-08-01T07:33:35Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwOTUzMw==", "bodyText": "where is the place to config the 300secs. Shall we just configure the same in zooscalability-api?", "url": "https://github.com/apache/helix/pull/1194#discussion_r464609533", "createdAt": "2020-08-03T19:11:25Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNzY2OQ==", "bodyText": "It is in test config file: testng.xml\nConfiguring the timeout for test suit for zookeeper-api is out of scope of this PR. If we want to do that, I would prefer to do it in another PR.", "url": "https://github.com/apache/helix/pull/1194#discussion_r464617669", "createdAt": "2020-08-03T19:28:56Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkwODEzOnYy", "diffSide": "LEFT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyODo0NlrOG54MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo0NTozNFrOG54dXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0Mjc3Mg==", "bodyText": "what is the difference of using this static block vs initalization at declaration?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342772", "createdAt": "2020-07-31T00:28:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -119,19 +115,6 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n-  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjAwMA==", "bodyText": "If you read the comment you'll know :)\n// Set it here for unit test to use reflection to change value\n// because compilers optimize constants by replacing them inline.\nSince we don't need reflection, we change it.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463346000", "createdAt": "2020-07-31T00:41:23Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -119,19 +115,6 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n-  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0Mjc3Mg=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NzAzOQ==", "bodyText": "I see.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463347039", "createdAt": "2020-07-31T00:45:34Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -119,19 +115,6 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n-  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0Mjc3Mg=="}, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk1MjUxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjowMFrOG54liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMDoyNFrOG54t-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTEzMQ==", "bodyText": "How about let us construct a new zkclient here. Is it possible _zkClient would be session timeout by another test or thread?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463349131", "createdAt": "2020-07-31T00:52:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTI4OA==", "bodyText": "Replied above. Won't be closed by another thread. It is created in this class, not from a base class.", "url": "https://github.com/apache/helix/pull/1194#discussion_r463351288", "createdAt": "2020-07-31T01:00:24Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTEzMQ=="}, "originalCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk1MzI5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoyMFrOG54l_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoyMFrOG54l_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTI0NQ==", "bodyText": "60 secs?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463349245", "createdAt": "2020-07-31T00:52:20Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTExMzEwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoxOTo0OVrOG6tY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoxOTo0OVrOG6tY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNDI1Mg==", "bodyText": "Nit: childPath", "url": "https://github.com/apache/helix/pull/1194#discussion_r464214252", "createdAt": "2020-08-03T06:19:49Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTExODg1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMjoxMFrOG6tcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMjoxMFrOG6tcHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNTA2OQ==", "bodyText": "Nit: let's say this a little more clearly:\nSomething on the lines of \"Should fail because listing 110K znodes with UUID names should cause packet length exceeded error, causing a connection loss.\"", "url": "https://github.com/apache/helix/pull/1194#discussion_r464215069", "createdAt": "2020-08-03T06:22:10Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTEyNTYxOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyNToxOFrOG6tf8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzowNjo1NVrOG7PbhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNjA1MA==", "bodyText": "Shouldn't you delete recursively? Wouldn't this fail because of children nodes?", "url": "https://github.com/apache/helix/pull/1194#discussion_r464216050", "createdAt": "2020-08-03T06:25:18Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n-        return !_zkClient.exists(path);\n+        try {\n+          return _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwODI4Ng==", "bodyText": "They are ephemeral nodes and closing the zkClient deletes the ephemeral nodes for cleanup.", "url": "https://github.com/apache/helix/pull/1194#discussion_r464608286", "createdAt": "2020-08-03T19:08:49Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n-        return !_zkClient.exists(path);\n+        try {\n+          return _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNjA1MA=="}, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MTk3Mw==", "bodyText": "I think this is fine for testing purposes, but here are some scenarios we can think about that gets us from, say, 95% to 99% stability:\n\n\ndoesn't the packet len error cause the session to be terminated? Or does your fix change that behavior? In this case if my assumption is true, the client that created the ephemeral nodes will lose its session and the ephemerals tied to the session will be gone anyway, so the nodes will be gone before zkclient.close()?\n\n\nthis is a rare scenario and probably being extra nitpicky, but sometimes we observe in-memory local clients lose connection for some unknown reason. What impact would that have on the test since that would cause ephemerals to be gone prematurely?\n\n\nIf we really wanted to be right and thorough, I would write persistent nodes, and check that the numChildren field comes out to 110K from Stats with an Assert statement, and then do the explicit deletion at the end. This would guard against any potential client-side and server-side glitches and failures.", "url": "https://github.com/apache/helix/pull/1194#discussion_r464771973", "createdAt": "2020-08-04T03:06:55Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n-        return !_zkClient.exists(path);\n+        try {\n+          return _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNjA1MA=="}, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1286, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}