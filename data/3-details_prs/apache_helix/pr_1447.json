{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODk5ODA5", "number": 1447, "title": "Replace Thread.sleep() with TestHelper.verify() to fix the flaky unit tests", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nfix #1446\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nQuite some unit test still use Thread.sleep(xxx) to wait for a\ncondition to happen. This is a source of falkiness of test. This\nmay also make the test running unnecessarily long. We address\nthis issue with TestHelper.verify() method.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhttps://github.com/apache/helix/runs/1218717184?check_suite_focus=true\nSee above link. All test passed.\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-07T00:04:40Z", "url": "https://github.com/apache/helix/pull/1447", "merged": true, "mergeCommit": {"oid": "aaa6a7c900408ff7becfe49449e038bf09cb72f4"}, "closed": true, "closedAt": "2020-10-08T00:12:35Z", "author": {"login": "kaisun2000"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQCKd6AFqTUwMzQ1MTMxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQWJhSABqjM4NTI5NjU3Nzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDUxMzEx", "url": "https://github.com/apache/helix/pull/1447#pullrequestreview-503451311", "createdAt": "2020-10-07T00:40:33Z", "commit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MDozM1rOHdepTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0OTo0MVrOHdeyZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjg0Nw==", "bodyText": "nit, \"== true\" is not necessary.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500672847", "createdAt": "2020-10-07T00:40:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestZKCallback.java", "diffHunk": "@@ -165,8 +166,10 @@ public void testInvocation() throws Exception {\n \n       ExternalView extView = new ExternalView(\"db-12345\");\n       accessor.setProperty(keyBuilder.externalView(\"db-12345\"), extView);\n-      Thread.sleep(100);\n-      AssertJUnit.assertTrue(testListener.externalViewChangeReceived);\n+      boolean result = TestHelper.verify(() -> {\n+        return testListener.externalViewChangeReceived == true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Mjk4OQ==", "bodyText": "nit, \"== true\" is not necessary.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500672989", "createdAt": "2020-10-07T00:41:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -131,22 +131,28 @@ public void testConfigChangeListeners() throws Exception {\n     TestConfigListener listener = new TestConfigListener();\n     listener.reset();\n     _manager.addInstanceConfigChangeListener(listener);\n-    Assert.assertTrue(listener._instanceConfigChanged,\n-        \"Should get initial instanceConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._instanceConfigChanged == true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU5Mg==", "bodyText": "This reminds me that we are not testing for the latency for now. For example, if the callback does not happen within one second, then we may want to fail the test.\nWill it be a good idea to have at least 2 Duration?\nPipeline_Wait_Duration = 60000;\nCallback_Wait_Duration = 2000;", "url": "https://github.com/apache/helix/pull/1447#discussion_r500673592", "createdAt": "2020-10-07T00:43:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n public class TestHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(TestHelper.class);\n-  public static final long WAIT_DURATION = 20 * 1000L; // 20 seconds\n+  public static final long WAIT_DURATION = 60 * 1000L; // 60 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDA5OQ==", "bodyText": "This changes the original test logic. We shall only need one pipeline run after the delay. And it shall guarantee the operation is done correctly.\nIf there is a concern about the delay time, we can wait for 2 * DEFAULT_OBSELETE_MSG_PURGE_DELAY.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500674099", "createdAt": "2020-10-07T00:45:26Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java", "diffHunk": "@@ -152,15 +152,15 @@ public void testDuplicateMsg() throws Exception {\n     Assert.assertTrue(messages.get(0).getFromState().equalsIgnoreCase(\"SLAVE\"));\n     Assert.assertTrue(messages.get(0).getToState().equalsIgnoreCase(\"MASTER\"));\n \n-    runPipeline(event, dataRefresh);\n-\n+    Thread.sleep(MessageGenerationPhase.DEFAULT_OBSELETE_MSG_PURGE_DELAY);\n     // Verify the stale message should be deleted\n     Assert.assertTrue(TestHelper.verify(() -> {\n+      runPipeline(event, dataRefresh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTE3Mw==", "bodyText": "Please mind the naming of the variables. A meaningful name is required in all cases.", "url": "https://github.com/apache/helix/pull/1447#discussion_r500675173", "createdAt": "2020-10-07T00:49:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier1 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7be1ae37325e48f0061d84c4259ad859fbf5fd"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b55c0d32973baed5ef832f80cdd6358246f543e", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/7b55c0d32973baed5ef832f80cdd6358246f543e", "committedDate": "2020-10-07T04:27:12Z", "message": "some enhancement based on jj's feedback."}, "afterCommit": {"oid": "77bd5533f3c8aafd0edf9d7db9d86a7f20b19e08", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/77bd5533f3c8aafd0edf9d7db9d86a7f20b19e08", "committedDate": "2020-10-07T04:29:02Z", "message": "some enhancement based on jj's feedback."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77bd5533f3c8aafd0edf9d7db9d86a7f20b19e08", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/77bd5533f3c8aafd0edf9d7db9d86a7f20b19e08", "committedDate": "2020-10-07T04:29:02Z", "message": "some enhancement based on jj's feedback."}, "afterCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/fdfc11248e7ac32eafab0b350b55748c6c3b1415", "committedDate": "2020-10-07T04:34:24Z", "message": "some enhancement based on jj's feedback."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2193523f9f98ccef6be96017375030ea9ddd2426", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/2193523f9f98ccef6be96017375030ea9ddd2426", "committedDate": "2020-10-07T05:18:19Z", "message": "fix #1448 part 2\n\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state.\n\nWe fix this issue by adding waitTillVerify() timeout in\nconstruction time of verifier."}, "afterCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/fdfc11248e7ac32eafab0b350b55748c6c3b1415", "committedDate": "2020-10-07T04:34:24Z", "message": "some enhancement based on jj's feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTg1Mjgy", "url": "https://github.com/apache/helix/pull/1447#pullrequestreview-504185282", "createdAt": "2020-10-07T19:07:00Z", "commit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowNzowMFrOHeBpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTowNzowMFrOHeBpqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjM3OQ==", "bodyText": "nit, this one shall assert the result.", "url": "https://github.com/apache/helix/pull/1447#discussion_r501246379", "createdAt": "2020-10-07T19:07:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -206,21 +206,24 @@ public void testScopedConfigChangeListener() throws Exception {\n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n     boolean result = TestHelper.verify(()-> {\n-      return listener._configChanged == true;\n+      return listener._configChanged;\n     }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n     Assert.assertTrue(listener._configChanged,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdfc11248e7ac32eafab0b350b55748c6c3b1415"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0Mjg2Nzk1", "url": "https://github.com/apache/helix/pull/1447#pullrequestreview-504286795", "createdAt": "2020-10-07T21:39:00Z", "commit": {"oid": "304df54719ca1f3456e7571a4490b2f4c3dac7ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozOTowMFrOHeGd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozOTowMFrOHeGd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNTMwNA==", "bodyText": "The stack trace will be printed in one line with this code. I suggest we use new throwable().printstacktrace()", "url": "https://github.com/apache/helix/pull/1447#discussion_r501325304", "createdAt": "2020-10-07T21:39:00Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304df54719ca1f3456e7571a4490b2f4c3dac7ae"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8fef8e2dd16b0c9b50c8d9484e52c0531f2ddcb", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/e8fef8e2dd16b0c9b50c8d9484e52c0531f2ddcb", "committedDate": "2020-10-08T00:07:49Z", "message": "fix #1446\nQuite some unit test still use Thread.sleep(xxx) to wait for a\ncondition to happen. This is a source of falkiness of test. This\nmay also make the test running unnecessarily long. We address\nthis issue with TestHelper.verify() method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717c42cbe915fad9a05328741070eaa41f782c05", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/717c42cbe915fad9a05328741070eaa41f782c05", "committedDate": "2020-10-08T00:07:52Z", "message": "some enhancement based on jj's feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe58b6c80e8c9c4c0263029ba1176fd05cb2312", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/dfe58b6c80e8c9c4c0263029ba1176fd05cb2312", "committedDate": "2020-10-08T00:07:52Z", "message": "fix one issue of asserting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32af649fd750cdadf289fffed683443f015cccfd", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/32af649fd750cdadf289fffed683443f015cccfd", "committedDate": "2020-10-08T00:07:52Z", "message": "address another two place lacking assert."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a05e5125b060b6aad8f43ab2d8a8f39d772539", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/a1a05e5125b060b6aad8f43ab2d8a8f39d772539", "committedDate": "2020-10-08T00:07:52Z", "message": "still one more lacking assert"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "304df54719ca1f3456e7571a4490b2f4c3dac7ae", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/304df54719ca1f3456e7571a4490b2f4c3dac7ae", "committedDate": "2020-10-07T20:56:34Z", "message": "still one more lacking assert"}, "afterCommit": {"oid": "a1a05e5125b060b6aad8f43ab2d8a8f39d772539", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/a1a05e5125b060b6aad8f43ab2d8a8f39d772539", "committedDate": "2020-10-08T00:07:52Z", "message": "still one more lacking assert"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4329, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}