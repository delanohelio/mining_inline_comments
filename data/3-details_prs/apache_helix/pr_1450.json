{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTkwNDY3", "number": 1450, "title": "HelixClusterVerifier verify() with default waitTillVerify time -- part two", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nfix #1448 part 2\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\npart 2\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state.\n\nWe fix this issue by adding waitTillVerify() timeout in\nconstruction time of verifier.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n020-10-08T01:49:17.2639750Z\n2020-10-08T01:49:17.6689317Z [ERROR] Failures:\n2020-10-08T01:49:17.6693643Z [ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:214 expected:<5> but was:<4>\n2020-10-08T01:49:17.6697668Z [ERROR] Tests run: 1213, Failures: 1, Errors: 0, Skipped: 1\n2020-10-08T01:49:17.6772773Z [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project helix-core: There are test failures.\n2020-10-08T01:49:17.6774043Z [ERROR]\nre-run would work.\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-07T05:33:03Z", "url": "https://github.com/apache/helix/pull/1450", "merged": true, "mergeCommit": {"oid": "12bfbae5024d2b24e453921002e11cf71f98d047"}, "closed": true, "closedAt": "2020-10-08T23:37:08Z", "author": {"login": "kaisun2000"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQSE6kgFqTUwNDE5MDg1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQbI1zgH2gAyNDk4OTkwNDY3OjljYjIxOGI1MmE2ZmYwZTBmYTA0ZjMxMDFkM2Y0MGNiOGM1YWNiNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTkwODU5", "url": "https://github.com/apache/helix/pull/1450#pullrequestreview-504190859", "createdAt": "2020-10-07T19:15:05Z", "commit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToxNTowNlrOHeB6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyMjozNVrOHeCKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MDcwMA==", "bodyText": "This stack trace would be printed in one line, right? It'd be difficult to read. How about using\nnew Throwable().printStackTrace();", "url": "https://github.com/apache/helix/pull/1450#discussion_r501250700", "createdAt": "2020-10-07T19:15:06Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestHelper.java", "diffHunk": "@@ -799,7 +799,12 @@ public static boolean verify(Verifier verifier, long timeout) throws Exception {\n     long start = System.currentTimeMillis();\n     do {\n       boolean result = verifier.verify();\n-      if (result || (System.currentTimeMillis() - start) > timeout) {\n+      boolean isTimedout = (System.currentTimeMillis() - start) > timeout;\n+      if (result || isTimedout) {\n+        if (isTimedout && !result) {\n+          LOG.error(\"verifier time out, consider try longer timeout, stack trace{}\",\n+              Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MjgwMQ==", "bodyText": "Assert result", "url": "https://github.com/apache/helix/pull/1450#discussion_r501252801", "createdAt": "2020-10-07T19:19:09Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/TestListenerCallback.java", "diffHunk": "@@ -195,19 +205,27 @@ public void testScopedConfigChangeListener() throws Exception {\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n-    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n+    boolean result = TestHelper.verify(()-> {\n+      return listener._configChanged;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n     Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n \n     listener.reset();\n     _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n+    result = TestHelper.verify(()-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MzgxNg==", "bodyText": "Assert it", "url": "https://github.com/apache/helix/pull/1450#discussion_r501253816", "createdAt": "2020-10-07T19:20:56Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java", "diffHunk": "@@ -114,10 +115,10 @@ public void testDisableCluster() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(1000L);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    boolean result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDQ1NA==", "bodyText": "Assert it", "url": "https://github.com/apache/helix/pull/1450#discussion_r501254454", "createdAt": "2020-10-07T19:22:06Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -130,18 +130,24 @@ public void testWithDisabledInstancesLimit() throws Exception {\n       admin.enableInstance(CLUSTER_NAME, instance, false);\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     String instance = _participants.get(i).getInstanceName();\n     admin.enableInstance(CLUSTER_NAME, instance, false);\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    ZkHelixClusterVerifier clusterVerifier =\n+        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n+            .build();\n+    Assert.assertTrue(clusterVerifier.verifyByPolling());\n+\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NDcxMw==", "bodyText": "Assert", "url": "https://github.com/apache/helix/pull/1450#discussion_r501254713", "createdAt": "2020-10-07T19:22:35Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java", "diffHunk": "@@ -165,17 +171,18 @@ public void testWithOfflineInstancesLimit() throws Exception {\n       _participants.get(i).syncStop();\n     }\n \n-    Thread.sleep(500);\n-\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNull(maintenanceSignal);\n+    boolean result = TestHelper.verify(() -> {\n+      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n+      return ms == null;\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(result);\n \n     _participants.get(i).syncStop();\n \n-    Thread.sleep(500);\n-    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n-    Assert.assertNotNull(maintenanceSignal);\n-    Assert.assertNotNull(maintenanceSignal.getReason());\n+    result = TestHelper.verify(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67f00ffb08bc4dc1c5f947a2e767f2fec820fa90", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/67f00ffb08bc4dc1c5f947a2e767f2fec820fa90", "committedDate": "2020-10-07T05:30:36Z", "message": "fix #1448 part 2\n\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state.\n\nWe fix this issue by adding waitTillVerify() timeout in\nconstruction time of verifier."}, "afterCommit": {"oid": "76beaa9d359fad97197df68703842d290f50f09e", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/76beaa9d359fad97197df68703842d290f50f09e", "committedDate": "2020-10-07T20:41:19Z", "message": "    fix #1448 part 2\n\n    HelixClusterVerifier verify() and related method may return\n    pre-maturely. The reason is that the verify the converging stable\n    condition too early before controller has a chance to make\n    change. Basically the previous stable state is mistaken as the\n    expected next stable state.\n\n    We fix this issue by adding waitTillVerify() timeout in\n    construction time of verifier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/182565fc5e717cd1c71f3231b07f8aef6caba468", "committedDate": "2020-10-08T00:24:23Z", "message": "    fix #1448 part 2\n\n    HelixClusterVerifier verify() and related method may return\n    pre-maturely. The reason is that the verify the converging stable\n    condition too early before controller has a chance to make\n    change. Basically the previous stable state is mistaken as the\n    expected next stable state.\n\n    We fix this issue by adding waitTillVerify() timeout in\n    construction time of verifier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76beaa9d359fad97197df68703842d290f50f09e", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/76beaa9d359fad97197df68703842d290f50f09e", "committedDate": "2020-10-07T20:41:19Z", "message": "    fix #1448 part 2\n\n    HelixClusterVerifier verify() and related method may return\n    pre-maturely. The reason is that the verify the converging stable\n    condition too early before controller has a chance to make\n    change. Basically the previous stable state is mistaken as the\n    expected next stable state.\n\n    We fix this issue by adding waitTillVerify() timeout in\n    construction time of verifier."}, "afterCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/182565fc5e717cd1c71f3231b07f8aef6caba468", "committedDate": "2020-10-08T00:24:23Z", "message": "    fix #1448 part 2\n\n    HelixClusterVerifier verify() and related method may return\n    pre-maturely. The reason is that the verify the converging stable\n    condition too early before controller has a chance to make\n    change. Basically the previous stable state is mistaken as the\n    expected next stable state.\n\n    We fix this issue by adding waitTillVerify() timeout in\n    construction time of verifier."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDM2OTQz", "url": "https://github.com/apache/helix/pull/1450#pullrequestreview-504436943", "createdAt": "2020-10-08T05:24:29Z", "commit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyNDoyOVrOHeOZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyNDo0OFrOHeOaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTM1NQ==", "bodyText": "This won't be necessary anymore.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501455355", "createdAt": "2020-10-08T05:24:29Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalanceFaultZone.java", "diffHunk": "@@ -349,7 +352,9 @@ public void afterMethod() throws Exception {\n     // waiting for all DB be dropped.\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NTQ0Mw==", "bodyText": "This is not necessary anymore.", "url": "https://github.com/apache/helix/pull/1450#discussion_r501455443", "createdAt": "2020-10-08T05:24:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -748,7 +753,9 @@ public void afterMethod() throws Exception {\n     Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182565fc5e717cd1c71f3231b07f8aef6caba468"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cb218b52a6ff0e0fa04f3101d3f40cb8c5acb65", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/9cb218b52a6ff0e0fa04f3101d3f40cb8c5acb65", "committedDate": "2020-10-08T05:57:07Z", "message": "fix 2 places based on JJ's feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4335, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}