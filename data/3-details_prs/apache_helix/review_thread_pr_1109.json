{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzQ5MjI0", "number": 1109, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0MTozOVrOEHoK4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyNzoxOFrOERObNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDMzNjM1OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0MTozOVrOGnGZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyNToyN1rOGnKOZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjU1Ng==", "bodyText": "Please add a TODO item here to state this is just a workaround fix because zookeeper does not return the failure reason if it fails to read a large children list.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443652556", "createdAt": "2020-06-22T15:41:39Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +108,17 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNTE3Mg==", "bodyText": "I added a TODO at getChildren() so when we remove that code part at getChildren(), we will also remove this private LIMIT. To make it clear, I also add a TODO for NUM_CHILDREN_LIMIT.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443715172", "createdAt": "2020-06-22T17:25:27Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +108,17 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjU1Ng=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM0NzY5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDowOFrOGnGgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0NjozMVrOGnQZ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDMwNQ==", "bodyText": "If we say there is no existing exception that can reflect the real failure here, why not extend a new ZookeeperException here?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443654305", "createdAt": "2020-06-22T15:44:08Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount[0];\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount[0] >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null && stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                        + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                    NUM_CHILDREN_LIMIT);\n+                // There is not an accurate KeeperException for the purpose.\n+                // MarshallingErrorException could represent transport error,\n+                // so use it to exit retry loop and tell that zk is not able to\n+                // transport the data because packet length is too large.\n+                throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNjQxNA==", "bodyText": "@lei-xia KeeperException is an abstract class and it is not flexible for us to extend to have a new exception code. Say if we create a new exception type\nPacketOutOfLenException extends KeeperException {\n   PacketOutOfLenException(code) {\n      super(code);\n   }\n}\n\nIf we use a different code other than existing defined code, KeeperException won't be able to recognize it and will throw IllegalArgumentException(Invalid exception code). I don't think this is what we need.\nComparing all the exception types in KeeperException, I think MarshallingErrorException is the closest one that represents the failure reason: failed at transport layer.\nWhen ZkClient throws MarshallingErrorException, we'll have error log \"Failed to get children for path {} because number of children {} exceeds limit {}, aborting retry.\" and know the error is because of large children listing.\nWhat do you think?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443816414", "createdAt": "2020-06-22T20:46:31Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount[0];\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount[0] >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null && stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                        + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                    NUM_CHILDREN_LIMIT);\n+                // There is not an accurate KeeperException for the purpose.\n+                // MarshallingErrorException could represent transport error,\n+                // so use it to exit retry loop and tell that zk is not able to\n+                // transport the data because packet length is too large.\n+                throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDMwNQ=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM0OTUwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NDozN1rOGnGhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDozMzozNVrOGnP_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw==", "bodyText": "? this pattern looks very confusing, why not use a regular integer, what do you try to achieve here?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443654607", "createdAt": "2020-06-22T15:44:37Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNjQ0Mw==", "bodyText": "This variable needs to be accessed in inner class Callable so it needs to be final.\nAnd since it is final, we could not increment the value if we make a an integer. So we need this one element array to change value of this final variable. I understand it looks a bit ugly, but since we are removing the code part in a few months once we have a better way in zk server, I wanted to make it simple without creating a wrapper class.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443716443", "createdAt": "2020-06-22T17:27:44Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2Mjk1OA==", "bodyText": "Can we use these wrapped integer types?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443762958", "createdAt": "2020-06-22T18:57:14Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NTc3Mw==", "bodyText": "Also, connectionLossRetryCount seems only used within callable, why not define within the callable function?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443765773", "createdAt": "2020-06-22T19:02:52Z", "author": {"login": "lei-xia"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwMzIyOA==", "bodyText": "Considering clean code, I think we could implement a GetChildrenCallable class that has the counter internally, so we could get rid of the one element array. It will look better", "url": "https://github.com/apache/helix/pull/1109#discussion_r443803228", "createdAt": "2020-06-22T20:21:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwOTcxMQ==", "bodyText": "Resolved. I was thinking in the lambda way that we could not define the private member in callable class but actually we could when we new a callable class.. Kind of missing the old stuff.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443809711", "createdAt": "2020-06-22T20:33:35Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +1000,43 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+    // Need one element array to change value of this final variable.\n+    final int[] connectionLossRetryCount = {0};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYwNw=="}, "originalCommit": {"oid": "088d8cffca6f373ed4f7a7070454288523fd8471"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTg3MzA4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo0NDoyNVrOGnVejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyODo1N1rOGqmAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ==", "bodyText": "What's the reason we choose to use static block for initing NUM_CHILDREN_LIMIT but leaving MAX_RECONNECT_INTERVAL_MS as a static final var?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443899535", "createdAt": "2020-06-23T00:44:25Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNjE0Nw==", "bodyText": "I don't want to change the original init way for MAX_RECONNECT_INTERVAL_MS.\nLike I comment, in terms of NUM_CHILDREN_LIMIT, the purpose is for unit test. I explain it in comment: Set it here for unit test to use reflection to change value because compilers optimize constants by replacing them inline. If we don't do it like this, we would not be able to unit test getChildren() unless we create > 100K children.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443906147", "createdAt": "2020-06-23T01:10:20Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2MDI0Mg==", "bodyText": "That is a new way of testing for me. But I saw you modified packetLen in the ClientCnxn, which is initialized like this,\npublic static final int packetLen = Integer.getInteger(\"jute.maxbuffer\", 4096 * 1024);\nDoes it mean even we do\nprivate static final int NUM_CHILDREN_LIMIT = 100 * 1000;\nthe test will still work?", "url": "https://github.com/apache/helix/pull/1109#discussion_r443960242", "createdAt": "2020-06-23T04:53:32Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNzMxNg==", "bodyText": "@jiajunwang No, the test will not work, because compilers optimize it inline:\ngetChildren() {\n  if (stat.getNumChildren() > 100 * 1000) { }\n}\n\nWe would like to avoid that and keep the variable. So the static block is used.\nIn the version 3.4.13 of zk we use, the packetLen also declares in this way.\npublic static final int packetLen;\n\n  static {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"zookeeper.disableAutoWatchReset is \" + disableAutoWatchReset);\n    }\n\n    packetLen = Integer.getInteger(\"jute.maxbuffer\", 4194304);\n  }\n\nFYI, packetLen is removed in newer version of ZK.", "url": "https://github.com/apache/helix/pull/1109#discussion_r445317316", "createdAt": "2020-06-25T05:37:28Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNjExNQ==", "bodyText": "Thanks for the explanation.", "url": "https://github.com/apache/helix/pull/1109#discussion_r447316115", "createdAt": "2020-06-29T23:28:57Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -103,6 +109,13 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTUzNQ=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTkwMzc3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMTowMjo1MVrOGnVxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo0Mzo0MVrOGosHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA==", "bodyText": "BadArgumentsException looks better than this one.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443904314", "createdAt": "2020-06-23T01:02:51Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODIzNg==", "bodyText": "I considered both. BadArgumentsException was the one I tried to use, but realized that MarshallingErrorException could represent a transport error and mostly mean data exceeds jute.maxbuffer. Here is an example: https://tgockel.github.io/zookeeper-cpp/classzk_1_1marshalling__error.html#details\nAn error occurred while marshalling data. The most common cause of this is exceeding the Jute buffer size \u2013 meaning the transaction was too large\nSo I decided to choose MarshallingError.  BadArgumentsException for me sounds more like the API is misused, eg, invalid path that has extra slash \"/path/\".", "url": "https://github.com/apache/helix/pull/1109#discussion_r443908236", "createdAt": "2020-06-23T01:19:02Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1ODQ1Mg==", "bodyText": "Sounds good. So just mention this point instead of saying there is no accurate exception? It seems to be accurate.\nAnother option is to throw an HelixException, or some new zkclient exception that we invent. Either way works, I think.", "url": "https://github.com/apache/helix/pull/1109#discussion_r443958452", "createdAt": "2020-06-23T04:46:14Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3NDE5Mg==", "bodyText": "OK. Let me just remove that line of comment to avoid confusion :)\nConsidering backward compatibility, if a KeeperException is thrown for the operation, it will be converted to ZkException. If user catches ZkException and handles it, there is no impact, their app still runs.\nIf we throw a ZkException (we don't throw HelixException since we've separate zk module from helix), it will be converted to a RuntimeException, which may cause ZkClient users terminated if they don't catch RuntimeException.\nOr an option is: we change retryUntilConnected to also catch ZkException. With this change, we could throw ZkException with a message indicating \"Large children error\" and so don't have to log and throw exception. I am not sure if we would like to change retryUntilConnected considering this is a workaround and later we remove the logic. What do you think about this option? @jiajunwang", "url": "https://github.com/apache/helix/pull/1109#discussion_r443974192", "createdAt": "2020-06-23T05:41:50Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTA3Mg==", "bodyText": "If user catches ZkException and handles it, there is extra impact, their app still runs.\nDo you mean there is no extra impact?\nOverall, I am a little bit confused. I think ZkException is what we (IOItech) convert from KeeperException to. Upper layer sees ZkException, they don't deal with KeeperException (which is from Zookeeper client).\nIn this case, as long as ZkClient event thread can catch this ZkException and don't terminate, that is what we want, right?\nAm I missing something?", "url": "https://github.com/apache/helix/pull/1109#discussion_r445205072", "createdAt": "2020-06-24T22:24:22Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxNTM3OA==", "bodyText": "@kaisun2000 Yeah you caught it. I meant there is no extra impact. Sorry for the confusion.\nYes, as I mentioned, there are two options:\n\nthrow KeeperException.MarshallingErrorException. This will be converted by retryUntilConnected to ZkException. Benefit is we don't change retryUntilConnected.\nthrow ZkException. Benefit is we could add message in the exception. But we have to change retryUntilConnected to catch ZkException and rethrow it. Considering this is a workaround and later we remove the logic, I use KeeperException.MarshallingErrorException here. What do you think? @kaisun2000", "url": "https://github.com/apache/helix/pull/1109#discussion_r445215378", "createdAt": "2020-06-24T22:55:00Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNjEwMw==", "bodyText": "As discussed offline. Here is the basic principle inherited from IOITech\nthis layer, we see KeeperException,\nuser see ZkException,\nretryUntilConnected, throw convert KeeperException to ZkException and throw ZkException.\nAnd user of ZkClient sees and handles various subtype of ZkException\nHere is an idea:\nSo maybe we can just add another type of ZkException say TooManyChildrenZkException and convert this from retryUntilConnect to this new ZkException. User of ZkClient can handle this TooManyChidrenZkException with whatever logic they want.", "url": "https://github.com/apache/helix/pull/1109#discussion_r445226103", "createdAt": "2020-06-24T23:28:36Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxOTAxMA==", "bodyText": "Adding @jiajunwang for extra opinions.\nI understand that and I also thought about it. My take is since this is only a workaround not for long term, I would like to just make it simple.\nIf later we would like to make it nicer because ZK gives a different error code, we could have a sub ZkException like ZkMarshallingError (we already have this exception defined).", "url": "https://github.com/apache/helix/pull/1109#discussion_r445319010", "createdAt": "2020-06-25T05:43:41Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,51 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // There is not an accurate KeeperException for the purpose.\n+                  // MarshallingErrorException could represent transport error,\n+                  // so use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDMxNA=="}, "originalCommit": {"oid": "a4c674d96f3989f84af620d208de905a15e80901"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTc0MjA3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozNjowMlrOGn7gKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjo0NDo0NFrOGn9GNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMjUzOA==", "bodyText": "Do we need this? If it is connection loss, @jiajunwang 's improvement for retry at zk event thread layer can handle that, right?", "url": "https://github.com/apache/helix/pull/1109#discussion_r444522538", "createdAt": "2020-06-23T21:36:02Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODY2MA==", "bodyText": "@dasahcc My purpose is to avoid stat check for each connection loss, because large children is just a very tiny possibility. And high possibility for network issue/session expiry. Then we could avoid the extra stat call in most of time.\n// Allow retrying 3 times before checking stat checking number of\n//  because there is a higher possibility that connection loss is caused by other\n// factors such as network connectivity, connected ZK node could not serve\n// the request, session expired, etc.", "url": "https://github.com/apache/helix/pull/1109#discussion_r444548660", "createdAt": "2020-06-23T22:44:44Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMjUzOA=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDAxMDc5OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyODo1NFrOGolRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo0OToxMlrOGosOJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNjc5Nw==", "bodyText": "This test relies on implementation detail of ZKClient. Can we just simulate the real scenario by creating say 10K children with name 100 bytes? Something would stand for longer time.", "url": "https://github.com/apache/helix/pull/1109#discussion_r445206797", "createdAt": "2020-06-24T22:28:54Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -799,4 +802,66 @@ public void testAsyncWriteOperations() {\n       zkClient.delete(\"/tmp/asyncOversize\");\n     }\n   }\n+\n+  /*\n+   * Tests getChildren() when there are an excessive number of children and connection loss happens,\n+   * the operation should terminate and exit retry loop.\n+   */\n+  @Test\n+  public void testGetChildrenOnLargeNumChildren() throws Exception {\n+    // Default packetLen is 4M. It is static final and initialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMDc0Mg==", "bodyText": "I don't think it is necessary, because anyway it checks jute.maxbuffer. What you mean 10K children nodes are for 4 MB, it is still defined by jute.maxbuffer. We adjust this value to smaller one for testing so only 5 children are needed. Either 100K or 5, it is behaving the same, why would we bother to create 10K children, right? :)", "url": "https://github.com/apache/helix/pull/1109#discussion_r445320742", "createdAt": "2020-06-25T05:49:12Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -799,4 +802,66 @@ public void testAsyncWriteOperations() {\n       zkClient.delete(\"/tmp/asyncOversize\");\n     }\n   }\n+\n+  /*\n+   * Tests getChildren() when there are an excessive number of children and connection loss happens,\n+   * the operation should terminate and exit retry loop.\n+   */\n+  @Test\n+  public void testGetChildrenOnLargeNumChildren() throws Exception {\n+    // Default packetLen is 4M. It is static final and initialized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNjc5Nw=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzg1NDEzOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozMzoyOVrOGqmGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNToxODowNFrOGxEfgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzY5NA==", "bodyText": "I think we removed this because many clients complaining that this retry log floods their log file. Please make it debug or don't add it.", "url": "https://github.com/apache/helix/pull/1109#discussion_r447317694", "createdAt": "2020-06-29T23:33:29Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1503,12 +1555,14 @@ private void acquireEventLock() {\n         } catch (Exception e) {\n           throw ExceptionUtil.convertToRuntimeException(e);\n         }\n+\n         // before attempting a retry, check whether retry timeout has elapsed\n         if (System.currentTimeMillis() - operationStartTime > _operationRetryTimeoutInMillis) {\n           throw new ZkTimeoutException(\"Operation cannot be retried because of retry timeout (\"\n               + _operationRetryTimeoutInMillis + \" milli seconds). Retry was caused by \"\n               + retryCauseCode);\n         }\n+        LOG.warn(\"Retrying operation, caused by {}\", retryCauseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NjM3OA==", "bodyText": "From the debugging experience, it seems this is helpful log indicating retryable error like connection loss or session expired. Otherwise, it keeps retrying silently. Considering flooded logs, maybe we could have a backoff strategy or very N retry times to log it? Just a thought.\nI will not add it for now.", "url": "https://github.com/apache/helix/pull/1109#discussion_r449386378", "createdAt": "2020-07-03T05:44:25Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1503,12 +1555,14 @@ private void acquireEventLock() {\n         } catch (Exception e) {\n           throw ExceptionUtil.convertToRuntimeException(e);\n         }\n+\n         // before attempting a retry, check whether retry timeout has elapsed\n         if (System.currentTimeMillis() - operationStartTime > _operationRetryTimeoutInMillis) {\n           throw new ZkTimeoutException(\"Operation cannot be retried because of retry timeout (\"\n               + _operationRetryTimeoutInMillis + \" milli seconds). Retry was caused by \"\n               + retryCauseCode);\n         }\n+        LOG.warn(\"Retrying operation, caused by {}\", retryCauseCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzY5NA=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzAxMA==", "bodyText": "If you change it to debug, we shall be able to see it during the debug practice (by changing the log4j attribute). So Let's do debug for now.", "url": "https://github.com/apache/helix/pull/1109#discussion_r454107010", "createdAt": "2020-07-14T05:18:04Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1503,12 +1555,14 @@ private void acquireEventLock() {\n         } catch (Exception e) {\n           throw ExceptionUtil.convertToRuntimeException(e);\n         }\n+\n         // before attempting a retry, check whether retry timeout has elapsed\n         if (System.currentTimeMillis() - operationStartTime > _operationRetryTimeoutInMillis) {\n           throw new ZkTimeoutException(\"Operation cannot be retried because of retry timeout (\"\n               + _operationRetryTimeoutInMillis + \" milli seconds). Retry was caused by \"\n               + retryCauseCode);\n         }\n+        LOG.warn(\"Retrying operation, caused by {}\", retryCauseCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNzY5NA=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzg1OTMwOnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozNToyN1rOGqmJgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjowMzoxOFrOGskqzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODQwMw==", "bodyText": "Let's make the comment clear.\n\"Failed to get children for path {} because of connection loss. Stop retrying because the number of children exceeds......\"", "url": "https://github.com/apache/helix/pull/1109#discussion_r447318403", "createdAt": "2020-06-29T23:35:27Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MTMwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1109#discussion_r449391309", "createdAt": "2020-07-03T06:03:18Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODQwMw=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzg2NzA3OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzozOTowM1rOGqmN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoyMjo1M1rOGxzj8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTU1MQ==", "bodyText": "I think you might want to keep checking the children's number on any retries after the first 3. Or, what if the children are increased during the retry, right?\nSo just make the logic like,\nif (count < 3 || getChildrenCount() < limit) {\ncount++;\nretry;\n} else {\nexist;\n}", "url": "https://github.com/apache/helix/pull/1109#discussion_r447319551", "createdAt": "2020-06-29T23:39:03Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // MarshallingErrorException could represent transport error: exceeding the\n+                  // Jute buffer size. So use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();\n+                } else {\n+                  // No need to do stat again for next connection loss.\n+                  connectionLossRetryCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4OTk0OQ==", "bodyText": "@jiajunwang I would like to check numChildren every 3 connection loss, because:\nallow trying 3 times before checking numChildren, because there is higher possibility connection loss is caused by session expired, etc. I don't want it to check numChildren for each connection loss which will downgrade the performance.\nYour logic here is only allow retrying 3 times, after 3 retries, exit retry loop. This is not what I want. I would still keep the original logic to retry on retry-able connection loss.", "url": "https://github.com/apache/helix/pull/1109#discussion_r449389949", "createdAt": "2020-07-03T05:58:09Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // MarshallingErrorException could represent transport error: exceeding the\n+                  // Jute buffer size. So use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();\n+                } else {\n+                  // No need to do stat again for next connection loss.\n+                  connectionLossRetryCount = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTU1MQ=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwODE5Ng==", "bodyText": "Your logic here is only allow retrying 3 times, after 3 retries, exit retry loop.\n\nCould you please check my logic carefully. It will keep retrying if the ChildrenCount is good. It is \"||\", not \"&&\". It is doing almost the same as your logic. getChildrenCount() won't be called if the count is smaller than 3.\nThis is helping you to simplify the code.", "url": "https://github.com/apache/helix/pull/1109#discussion_r454108196", "createdAt": "2020-07-14T05:21:49Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // MarshallingErrorException could represent transport error: exceeding the\n+                  // Jute buffer size. So use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();\n+                } else {\n+                  // No need to do stat again for next connection loss.\n+                  connectionLossRetryCount = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTU1MQ=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3ODE5Mw==", "bodyText": "I think you might want to keep checking the children's number on any retries after the first 3. Or, what if the children are increased during the retry, right?\n\nYes, it will still check numChildren after the first 3 retries. The strategy is check numChildren every other 3 retries.\nYour code checks numChildren every time after the first 3 retries, right? But actually I don't think it is necessary to check every time after 3 retries. I would like to just check numChildren every other 3 retries. So maybe your code could not really simplify the logic. I'll sync up with you.", "url": "https://github.com/apache/helix/pull/1109#discussion_r454878193", "createdAt": "2020-07-15T08:22:53Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);\n+              if (stat != null) {\n+                if (stat.getNumChildren() > NUM_CHILDREN_LIMIT) {\n+                  LOG.error(\"Failed to get children for path {} because number of children {} \"\n+                          + \"exceeds limit {}, aborting retry.\", path, stat.getNumChildren(),\n+                      NUM_CHILDREN_LIMIT);\n+                  // MarshallingErrorException could represent transport error: exceeding the\n+                  // Jute buffer size. So use it to exit retry loop and tell that zk is not able to\n+                  // transport the data because packet length is too large.\n+                  throw new KeeperException.MarshallingErrorException();\n+                } else {\n+                  // No need to do stat again for next connection loss.\n+                  connectionLossRetryCount = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTU1MQ=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Nzg5MzM4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzo1MDozMFrOGqmctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjoxNDoxNFrOGsk2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzMxNw==", "bodyText": "This is a recursive retryUntilConnect call inside. I think it shall work. But it would be better if we can avoid this recursive call. Basically what you need to do is,\n\nwait until connected.\ncall the native exits() call for the state.\n\nThe benefit is mainly avoiding potential issues if we have retryuntilconnect inside another retry.", "url": "https://github.com/apache/helix/pull/1109#discussion_r447323317", "createdAt": "2020-06-29T23:50:30Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5NDM0NA==", "bodyText": "I also thought about it. It would have nested retryUntilConnected. The benefit is it would retry to get the stat if there is connection loss for getStat(). If we use native exists() and there is connection loss, it would not retry and instead go back to getChildren() again.\nThe potential issue could be the retry timeout, because new retryUntilConnected() has a new start time. So getState() would potentially retry longer than the configured retry timeout for getChildren().\nI don't have a strong preference. Seems you prefer native exits(), I'll change it.", "url": "https://github.com/apache/helix/pull/1109#discussion_r449394344", "createdAt": "2020-07-03T06:14:14Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -984,11 +997,50 @@ private void fireAllEvents() {\n \n   protected List<String> getChildren(final String path, final boolean watch) {\n     long startT = System.currentTimeMillis();\n+\n     try {\n       List<String> children = retryUntilConnected(new Callable<List<String>>() {\n+        private int connectionLossRetryCount = 0;\n+\n         @Override\n         public List<String> call() throws Exception {\n-          return getConnection().getChildren(path, watch);\n+          try {\n+            return getConnection().getChildren(path, watch);\n+          } catch (ConnectionLossException e) {\n+            ++connectionLossRetryCount;\n+            // Allow retrying 3 times before checking stat checking number of children,\n+            // because there is a higher possibility that connection loss is caused by other\n+            // factors such as network connectivity, connected ZK node could not serve\n+            // the request, session expired, etc.\n+            if (connectionLossRetryCount >= 3) {\n+              // Issue: https://github.com/apache/helix/issues/962\n+              // Connection loss might be caused by an excessive number of children.\n+              // Infinitely retrying connecting may cause high GC in ZK server and kill ZK server.\n+              // This is a workaround to check numChildren to have a chance to exit retry loop.\n+              // TODO: remove this check once we have a better way to exit infinite retry\n+              Stat stat = getStat(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzMxNw=="}, "originalCommit": {"oid": "54b2e0af1f526415f81ed68933ba409348eb1a86"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk3NTg4OnYy", "diffSide": "RIGHT", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyNzoxOVrOG102uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1MDo1MlrOG11hOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5MzY4OA==", "bodyText": "I just noticed this issue. So you only check on connection loss exception. What if when you call this exists, the connection has not been recovered yet? This is very possible since there is no other operation or waits between the error and this exists() call.\nIn this case, the check will throw an exception, and the retry until connect call will also return unexpectedly.\nI think we need to wait until connected here.", "url": "https://github.com/apache/helix/pull/1109#discussion_r459093688", "createdAt": "2020-07-22T21:27:19Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2253,25 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void checkNumChildren(String path) throws KeeperException, InterruptedException {\n+    Stat stat = ((ZkConnection) getConnection()).getZookeeper().exists(path, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e5aee6c0192dfd370bb87921da64e793aeffa4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNDU2OA==", "bodyText": "@jiajunwang Good catch! I used to call getStat() considering reconnect. By somehow I changed it to exists() which is not supposed to. I believe getStat() is what we need: wait until connected and monitoring. Regarding nested retry until connected, it is fine because if getStat keeps getting connection loss and retrying, even we don't use getStat(), it'll be retrying as well in getChildren.\nReverted to getStat()", "url": "https://github.com/apache/helix/pull/1109#discussion_r459104568", "createdAt": "2020-07-22T21:50:52Z", "author": {"login": "huizhilu"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2253,25 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void checkNumChildren(String path) throws KeeperException, InterruptedException {\n+    Stat stat = ((ZkConnection) getConnection()).getZookeeper().exists(path, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5MzY4OA=="}, "originalCommit": {"oid": "90e5aee6c0192dfd370bb87921da64e793aeffa4"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1185, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}