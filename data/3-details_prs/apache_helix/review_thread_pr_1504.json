{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzI3MzIx", "number": 1504, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0MTowNFrOE0lCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1NjozMFrOE10lPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTY4MTQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0MTowNFrOHsYdrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0MTowNFrOHsYdrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMDIwNQ==", "bodyText": "Let's follow the convention of format. this._isxxx = xxx;", "url": "https://github.com/apache/helix/pull/1504#discussion_r516300205", "createdAt": "2020-11-02T22:41:04Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "diffHunk": "@@ -227,4 +228,12 @@ public void setPathChanged(String pathChanged) {\n   public void setChangeType(HelixConstants.ChangeType changeType) {\n     this._changeType = changeType;\n   }\n+\n+  public boolean getIsChildChange() {\n+    return _isChildChange;\n+  }\n+\n+  public void setIsChildChange(boolean cc) {\n+    _isChildChange = cc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e4507b5568bc7cfa0e2014ae518b6ee21e12fc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTgyMjU1OnYy", "diffSide": "LEFT", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoxODowOFrOHsZ5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoyMjozMlrOHsaFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyMzY0Nw==", "bodyText": "Did we try to get rid of async subscribe in this PR and do all subscription synchronously? I thought we only remove the extra one.", "url": "https://github.com/apache/helix/pull/1504#discussion_r516323647", "createdAt": "2020-11-02T23:18:08Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -402,13 +357,9 @@ public void invoke(NotificationContext changeContext) throws Exception {\n       }\n       _expectTypes = nextNotificationType.get(type);\n \n-      if (type == Type.INIT || type == Type.FINALIZE) {\n+      if (type == Type.INIT || type == Type.FINALIZE || changeContext.getIsChildChange()) {\n         subscribeForChanges(changeContext.getType(), _path, _watchChild);\n-      } else {\n-        // put SubscribeForChange run in async thread to reduce the latency of zk callback handling.\n-        subscribeForChangesAsyn(changeContext.getType(), _path, _watchChild);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e4507b5568bc7cfa0e2014ae518b6ee21e12fc"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyNjY1Nw==", "bodyText": "TFTR. The duplicated subscribeForChanges in HandleChildChange and do resubscribe for child change in line 361. For data changes, this async subscribe is also duplicated since the path is already resubscribed in zkClient.", "url": "https://github.com/apache/helix/pull/1504#discussion_r516326657", "createdAt": "2020-11-02T23:22:32Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -402,13 +357,9 @@ public void invoke(NotificationContext changeContext) throws Exception {\n       }\n       _expectTypes = nextNotificationType.get(type);\n \n-      if (type == Type.INIT || type == Type.FINALIZE) {\n+      if (type == Type.INIT || type == Type.FINALIZE || changeContext.getIsChildChange()) {\n         subscribeForChanges(changeContext.getType(), _path, _watchChild);\n-      } else {\n-        // put SubscribeForChange run in async thread to reduce the latency of zk callback handling.\n-        subscribeForChangesAsyn(changeContext.getType(), _path, _watchChild);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyMzY0Nw=="}, "originalCommit": {"oid": "47e4507b5568bc7cfa0e2014ae518b6ee21e12fc"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODY5ODk1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1MTo0NlrOHuUDEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1MzowNVrOHuYI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTAxMA==", "bodyText": "You may want to change cc to a more meaningful meaning, like childChange.", "url": "https://github.com/apache/helix/pull/1504#discussion_r518325010", "createdAt": "2020-11-05T19:51:46Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "diffHunk": "@@ -227,4 +228,12 @@ public void setPathChanged(String pathChanged) {\n   public void setChangeType(HelixConstants.ChangeType changeType) {\n     this._changeType = changeType;\n   }\n+\n+  public boolean getIsChildChange() {\n+    return _isChildChange;\n+  }\n+\n+  public void setIsChildChange(boolean cc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MjAzOA==", "bodyText": "TFTR. Updated.", "url": "https://github.com/apache/helix/pull/1504#discussion_r518392038", "createdAt": "2020-11-05T21:53:05Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "diffHunk": "@@ -227,4 +228,12 @@ public void setPathChanged(String pathChanged) {\n   public void setChangeType(HelixConstants.ChangeType changeType) {\n     this._changeType = changeType;\n   }\n+\n+  public boolean getIsChildChange() {\n+    return _isChildChange;\n+  }\n+\n+  public void setIsChildChange(boolean cc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTAxMA=="}, "originalCommit": {"oid": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODcxNDg2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1NjozMFrOHuUMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDozODo1MFrOHvBeiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ==", "bodyText": "I think we try to get rid of this kind of thread sleep, and use verifier. But as this is legacy test, I think it's fine. You can let @kaisun2000 know.", "url": "https://github.com/apache/helix/pull/1504#discussion_r518327495", "createdAt": "2020-11-05T19:56:30Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -467,23 +464,31 @@ public void testCurrentStatePathLeakingByAsycRemoval() throws Exception {\n     cs.setSessionId(jobSessionId);\n     cs.setStateModelDefRef(db0.getStateModelDefRef());\n \n+    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n+    Assert.assertFalse(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n+\n     LOG.info(\"add job\");\n-    boolean rtJob = false;\n     for (int i = 0; i < mJobUpdateCnt; i++) {\n-      rtJob = jobAccesor.setProperty(jobKey, cs);\n+      jobAccesor.setProperty(jobKey, cs);\n     }\n \n+    // verify new watcher is installed on the new node\n+    Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NTgxMA==", "bodyText": "I am not sure if we have watcher or listener installation verifier. If not, may be larger change is needed.", "url": "https://github.com/apache/helix/pull/1504#discussion_r518395810", "createdAt": "2020-11-05T22:00:43Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -467,23 +464,31 @@ public void testCurrentStatePathLeakingByAsycRemoval() throws Exception {\n     cs.setSessionId(jobSessionId);\n     cs.setStateModelDefRef(db0.getStateModelDefRef());\n \n+    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n+    Assert.assertFalse(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n+\n     LOG.info(\"add job\");\n-    boolean rtJob = false;\n     for (int i = 0; i < mJobUpdateCnt; i++) {\n-      rtJob = jobAccesor.setProperty(jobKey, cs);\n+      jobAccesor.setProperty(jobKey, cs);\n     }\n \n+    // verify new watcher is installed on the new node\n+    Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ=="}, "originalCommit": {"oid": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTMyMQ==", "bodyText": "Thanks for offline discuss. Updated.", "url": "https://github.com/apache/helix/pull/1504#discussion_r519069321", "createdAt": "2020-11-07T00:38:50Z", "author": {"login": "xyuanlu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -467,23 +464,31 @@ public void testCurrentStatePathLeakingByAsycRemoval() throws Exception {\n     cs.setSessionId(jobSessionId);\n     cs.setStateModelDefRef(db0.getStateModelDefRef());\n \n+    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n+    Assert.assertFalse(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n+\n     LOG.info(\"add job\");\n-    boolean rtJob = false;\n     for (int i = 0; i < mJobUpdateCnt; i++) {\n-      rtJob = jobAccesor.setProperty(jobKey, cs);\n+      jobAccesor.setProperty(jobKey, cs);\n     }\n \n+    // verify new watcher is installed on the new node\n+    Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ=="}, "originalCommit": {"oid": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}