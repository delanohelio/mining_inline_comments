{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzM0NjU5", "number": 1002, "title": "Use updaters to update read messages to ZK", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1001\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR uses an updater to replace set, so it checks whether there is a message in the path beforehand, and only write the \"READ\" state message to ZK if there is a message, to avoid write back a message which is already removed.\nTests\n\n The following tests are written for this issue:\n\nTestHelixTaskExecutor -> testNoWriteReadStateForRemovedMessage\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestWorkflowTermination.testWorkflowRunningTimeout:131->verifyWorkflowCleanup:257 expected: but was:\n[INFO]\n[ERROR] Tests run: 1147, Failures: 1, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:15 h\n[INFO] Finished at: 2020-05-12T18:59:45-07:00\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-05-11T20:38:12Z", "url": "https://github.com/apache/helix/pull/1002", "merged": true, "mergeCommit": {"oid": "560bfd5b3f15154f926b462c123c35ad505f694d"}, "closed": true, "closedAt": "2020-05-13T22:44:08Z", "author": {"login": "mgao0"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgWUCBgFqTQwOTUzNDA4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcijjgZAFqTQxMzgwODkyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTM0MDgy", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-409534082", "createdAt": "2020-05-11T21:11:26Z", "commit": {"oid": "897a3e6cef8b73881ef750c5e18e6a12f2d3719c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxMToyN1rOGTtipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMToxMToyN1rOGTtipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjI3Ng==", "bodyText": "We should throw exception here? Or it throws exception we need to handle?", "url": "https://github.com/apache/helix/pull/1002#discussion_r423322276", "createdAt": "2020-05-11T21:11:27Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +537,26 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897a3e6cef8b73881ef750c5e18e6a12f2d3719c"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "897a3e6cef8b73881ef750c5e18e6a12f2d3719c", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/897a3e6cef8b73881ef750c5e18e6a12f2d3719c", "committedDate": "2020-05-10T23:55:32Z", "message": "Use updater to update read message state"}, "afterCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/9b5839f98371cb23f052e0093c7cbe381872571f", "committedDate": "2020-05-12T22:41:19Z", "message": "Use updater to update read message state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTgwMzI0", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-410580324", "createdAt": "2020-05-13T04:33:32Z", "commit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozMzozM1rOGUhGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo0Mzo1OVrOGUhO4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Njk0NQ==", "bodyText": "Did you miss some files here? MessageQueueMonitor does not have such a constructor and it is not changed in this PR.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424166945", "createdAt": "2020-05-13T04:33:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java", "diffHunk": "@@ -70,7 +70,7 @@ public DefaultMessagingService(HelixManager manager) {\n \n     _taskExecutor = new HelixTaskExecutor(\n         new ParticipantStatusMonitor(isParticipant, manager.getInstanceName()),\n-        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()));\n+        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()), manager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzE0NA==", "bodyText": "In general, passing the manager to the monitor object would be an overkill. If it is really necessary, then we shall change the constructor to accept the manager only, since it includes all the information.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167144", "createdAt": "2020-05-13T04:34:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java", "diffHunk": "@@ -70,7 +70,7 @@ public DefaultMessagingService(HelixManager manager) {\n \n     _taskExecutor = new HelixTaskExecutor(\n         new ParticipantStatusMonitor(isParticipant, manager.getInstanceName()),\n-        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()));\n+        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()), manager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Njk0NQ=="}, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzQ1Mg==", "bodyText": "Deprecate it?", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167452", "createdAt": "2020-05-13T04:35:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -152,6 +158,11 @@ public HelixTaskExecutor(ParticipantStatusMonitor participantStatusMonitor) {\n \n   public HelixTaskExecutor(ParticipantStatusMonitor participantStatusMonitor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzgxMg==", "bodyText": "This is the assumption, if the current data does not exist, return null. I think it is fine.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167812", "createdAt": "2020-05-13T04:37:39Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +537,26 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjI3Ng=="}, "originalCommit": {"oid": "897a3e6cef8b73881ef750c5e18e6a12f2d3719c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Nzk2NA==", "bodyText": "If you always return msg.getRecord() why not just set? You are not updating the currentData anyway.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167964", "createdAt": "2020-05-13T04:38:17Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +537,26 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            return null;\n+          }\n+          return msg.getRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODMwMA==", "bodyText": "Why? The periodic refresh does not need to be done synchronized, I think.\nIf your timer action just adds the refresh event to the queue, there is no need to modify this.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424168300", "createdAt": "2020-05-13T04:39:54Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -714,7 +741,7 @@ private void syncSessionToController(HelixManager manager) {\n \n   @Override\n   @PreFetch(enabled = false)\n-  public void onMessage(String instanceName, List<Message> messages,\n+  public synchronized void onMessage(String instanceName, List<Message> messages,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTE4NA==", "bodyText": "Why do you need to call it here synchronously? I think it's simpler if we just put this event into the event queue.\nGiven this saying, this logic will be fitting better if it is in the HelixManager level. What I'm trying to propose if the HelixManger is initialized as a Participant, then we start this timer thread there. It just injects message event with a certain interval. Of course, if a real message event comes earlier, then we reset the timer.\nPut this logic in the executor does not make sense to me.", "url": "https://github.com/apache/helix/pull/1002#discussion_r424169184", "createdAt": "2020-05-13T04:43:59Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -1135,6 +1162,34 @@ private void removeMessageFromZK(HelixDataAccessor accessor, Message message,\n     }\n   }\n \n+  private void startMessageRefreshThread() {\n+    int periodicMessageRefreshInterval =\n+        HelixUtil.getSystemPropertyAsInt(SystemPropertyKeys.PERIODIC_MESSAGE_REFRESH_INTERVAL, -1);\n+    if (periodicMessageRefreshInterval > 0) {\n+      _messageRefreshTimer = new Timer();\n+      try {\n+        {\n+          if (_manager == null) {\n+            throw new HelixException(\"Periodic message refresh skipped. No helix manager is set.\");\n+          }\n+        }\n+        TimerTask messageRefreshTask = new TimerTask() {\n+          @Override\n+          public void run() {\n+            // Trigger read messages from zk\n+            NotificationContext changeContext = new NotificationContext(_manager);\n+            changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+            onMessage(_manager.getInstanceName(), null, changeContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/a7424f1b62e4465ead399aec50d479f6df28b1be", "committedDate": "2020-05-13T18:29:37Z", "message": "Use updater to updated read message state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/9b5839f98371cb23f052e0093c7cbe381872571f", "committedDate": "2020-05-12T22:41:19Z", "message": "Use updater to update read message state"}, "afterCommit": {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/a7424f1b62e4465ead399aec50d479f6df28b1be", "committedDate": "2020-05-13T18:29:37Z", "message": "Use updater to updated read message state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA3OTQ0", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-411207944", "createdAt": "2020-05-13T18:52:05Z", "commit": {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjE4NDU3", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-411218457", "createdAt": "2020-05-13T19:06:32Z", "commit": {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f", "author": {"user": {"login": "mgao0", "name": "Molly Gao"}}, "url": "https://github.com/apache/helix/commit/6c42b351a811efaba043bc5ce97d94a296ff9b4f", "committedDate": "2020-05-13T20:45:56Z", "message": "Add log when race condition happens"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjg3MjMy", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-411287232", "createdAt": "2020-05-13T20:47:37Z", "commit": {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0NzozN1rOGVC8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0NzozN1rOGVC8dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMTUyNQ==", "bodyText": "@jiajunwang I have added the logging. Can you please check if the message is good?", "url": "https://github.com/apache/helix/pull/1002#discussion_r424721525", "createdAt": "2020-05-13T20:47:37Z", "author": {"login": "mgao0"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +527,27 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            LOG.warn(\"Message {} targets at {} has already been removed before it is set as READ on instance {}\", msg.getId(), msg.getTgtName(), instanceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODA4OTIw", "url": "https://github.com/apache/helix/pull/1002#pullrequestreview-413808920", "createdAt": "2020-05-18T17:44:57Z", "commit": {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0NDo1N1rOGXBbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0NDo1N1rOGXBbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MzgwMw==", "bodyText": "One optimization here maybe to create just one updater instead of one per each message. You can define the update logic in the updater, i.e, read the message and mark the read field as \"read\".", "url": "https://github.com/apache/helix/pull/1002#discussion_r426793803", "createdAt": "2020-05-18T17:44:57Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +527,27 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4815, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}