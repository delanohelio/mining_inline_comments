{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzQ4MzI5", "number": 973, "title": "TaskStateModelFactory configurable thread pool size", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #972\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nWe are improving the task framework by allowing task thread pools to have configurable sizes. As a part of the participant side change, TaskStateModelFactory is changed to allocate thread pool sizes based on values provided in InstanceConfig or ClusterConfig.\nBoth InstanceConfig and ClusterConfig are now expected to contain a field keyed as \"TARGET_TASK_THREAD_POOL_SIZE\", where the value for InstanceConfig only determines the thread pool size for the specified instance, and the value for ClusterConfig determines the thread pool sizes for all instances of that cluster. If InstanceConfig isn't able to provide the pool size, then ClusterConfig will be used to determine the pool size; if neither of them are able to provide the pool size, TaskStateModelFactory will use a default value.\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO] \n[ERROR] Failures: \n[ERROR]   TestEnableCompression.testEnableCompressionResource:117 expected:<true> but was:<false>\n[ERROR]   TestZkConnectionLost.testLostZkConnection:140 \u00bb Helix Workflow \"testLostZkConn...\n[ERROR]   TestStateTransitionTimeout.testStateTransitionTimeOut:166 expected:<true> but was:<false>\n[ERROR]   TestStateTransitionTimeoutWithResource.testStateTransitionTimeOut:171 expected:<true> but was:<false>\n[INFO] \n[ERROR] Tests run: 1144, Failures: 4, Errors: 0, Skipped: 1\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:15 h\n[INFO] Finished at: 2020-05-12T12:22:14-07:00\n[INFO] ------------------------------------------------------------------------\n\nRerun failed classes\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 71.032 s - in TestSuite\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:16 min\n[INFO] Finished at: 2020-05-12T14:13:00-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-04-27T21:08:56Z", "url": "https://github.com/apache/helix/pull/973", "merged": true, "mergeCommit": {"oid": "ba9488b81f6a05d16ee7dd0c4cac1fdb1709a209"}, "closed": true, "closedAt": "2020-05-13T03:13:02Z", "author": {"login": "NealSun96"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbzqtpgH2gAyNDA5NzQ4MzI5OjdiMWY0NDYwN2ZhNjY3YTBhZWQ0MjQ2OWMzOWZjZDM4M2ZjNjhmYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgs9AZgH2gAyNDA5NzQ4MzI5Ojg3OWEyMjFhY2M2OGIxM2RjMmViOTg4ZTEwMWRkYjE0ZWU2ZGE5Mjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/7b1f44607fa667a0aed42469c39fcd383fc68fae", "committedDate": "2020-04-27T18:33:51Z", "message": "Modify TaskStateModelFactory to get pool size from InstanceConfig/ClusterConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjMyNTUx", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-402232551", "createdAt": "2020-04-28T21:40:14Z", "commit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo0MDoxNVrOGNoCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo0MDoxNVrOGNoCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MDYxMw==", "bodyText": "Why does this need to be a public field?\nAlso, it seems that this constant and some of the other enums are duplicated in different places. Is it possible to put this in one place? (Hint. TaskConstants.java)", "url": "https://github.com/apache/helix/pull/973#discussion_r416940613", "createdAt": "2020-04-28T21:40:15Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -137,6 +140,7 @@\n   private final static int MAX_REBALANCE_PREFERENCE = 10;\n   private final static int MIN_REBALANCE_PREFERENCE = 0;\n   public final static boolean DEFAULT_GLOBAL_REBALANCE_ASYNC_MODE_ENABLED = true;\n+  public static final int TARGET_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjQ3NjYz", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-402247663", "createdAt": "2020-04-28T22:08:39Z", "commit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjowODozOVrOGNo1jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoxODoxMVrOGNpFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1Mzc0Mw==", "bodyText": "Could we add setters as well with some sort of validation logic?", "url": "https://github.com/apache/helix/pull/973#discussion_r416953743", "createdAt": "2020-04-28T22:08:39Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java", "diffHunk": "@@ -506,6 +508,16 @@ public void setMaxConcurrentTask(int maxConcurrentTask) {\n     _record.setIntField(InstanceConfigProperty.MAX_CONCURRENT_TASK.name(), maxConcurrentTask);\n   }\n \n+  /**\n+   * Get the target size of task thread pool\n+   * @return the target size of task thread pool\n+   */\n+  public int getTargetTaskThreadPoolSize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NDE0Nw==", "bodyText": "Could we potentially move this constant to TaskConstants? Do you think that would be a good idea?", "url": "https://github.com/apache/helix/pull/973#discussion_r416954147", "createdAt": "2020-04-28T22:09:28Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -44,11 +49,11 @@\n   private final ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n+  public final static int DEFAULT_TASK_THREAD_POOL_SIZE = 40;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NDQwMQ==", "bodyText": "Why are we including an underscore for a method name?", "url": "https://github.com/apache/helix/pull/973#discussion_r416954401", "createdAt": "2020-04-28T22:10:07Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +107,40 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private static int _getTaskThreadPoolSize(HelixManager manager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NjAyNg==", "bodyText": "Try-catch is not necessary here. There are other ways to check if InstanceConfig exists or not.\nE.g.) Perform one read, if it's null, then it will return null. If exists, then you'll have read the config.", "url": "https://github.com/apache/helix/pull/973#discussion_r416956026", "createdAt": "2020-04-28T22:13:50Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +107,40 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private static int _getTaskThreadPoolSize(HelixManager manager) {\n+    ConfigAccessor configAccessor = manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig =\n+          configAccessor.getInstanceConfig(manager.getClusterName(), manager.getInstanceName());\n+      int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+      if (_verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    } catch (HelixException e) {\n+      // Pass if InstanceConfig doesn't exist.\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NzcxNw==", "bodyText": "Again, this might be an incorrect use of a try-catch clause", "url": "https://github.com/apache/helix/pull/973#discussion_r416957717", "createdAt": "2020-04-28T22:17:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +107,40 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private static int _getTaskThreadPoolSize(HelixManager manager) {\n+    ConfigAccessor configAccessor = manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig =\n+          configAccessor.getInstanceConfig(manager.getClusterName(), manager.getInstanceName());\n+      int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+      if (_verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    } catch (HelixException e) {\n+      // Pass if InstanceConfig doesn't exist.\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(manager.getClusterName());\n+      int targetTaskThreadPoolSize = clusterConfig.getTargetTaskThreadPoolSize();\n+      if (_verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    } catch (HelixException e) {\n+      // Pass if ClusterConfig doesn't exist.\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1Nzg2Ng==", "bodyText": "You could do this in the setter?", "url": "https://github.com/apache/helix/pull/973#discussion_r416957866", "createdAt": "2020-04-28T22:18:11Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +107,40 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private static int _getTaskThreadPoolSize(HelixManager manager) {\n+    ConfigAccessor configAccessor = manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig =\n+          configAccessor.getInstanceConfig(manager.getClusterName(), manager.getInstanceName());\n+      int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+      if (_verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    } catch (HelixException e) {\n+      // Pass if InstanceConfig doesn't exist.\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(manager.getClusterName());\n+      int targetTaskThreadPoolSize = clusterConfig.getTargetTaskThreadPoolSize();\n+      if (_verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    } catch (HelixException e) {\n+      // Pass if ClusterConfig doesn't exist.\n+    }\n+\n+    return DEFAULT_TASK_THREAD_POOL_SIZE;\n+  }\n+\n+  private static boolean _verifyTargetThreadPoolSize(int targetTaskThreadPoolSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab0a534cef49b6f9512ce338ef3c5276041df7f", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/dab0a534cef49b6f9512ce338ef3c5276041df7f", "committedDate": "2020-04-28T22:53:47Z", "message": "Address some comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjcwMzg2", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-402270386", "createdAt": "2020-04-28T23:00:03Z", "commit": {"oid": "dab0a534cef49b6f9512ce338ef3c5276041df7f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzowMDowM1rOGNqEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzowMzowN1rOGNqJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Mzk4MQ==", "bodyText": "IMO, the cluster level default value is different from the node level pool size.\nBetter to use a different name for the cluster level default number.\nDEFAULT_TARGET_TASK_THREAD_POOL_SIZE\nDEFAULT_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET", "url": "https://github.com/apache/helix/pull/973#discussion_r416973981", "createdAt": "2020-04-28T23:00:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -137,6 +140,7 @@\n   private final static int MAX_REBALANCE_PREFERENCE = 10;\n   private final static int MIN_REBALANCE_PREFERENCE = 0;\n   public final static boolean DEFAULT_GLOBAL_REBALANCE_ASYNC_MODE_ENABLED = true;\n+  public static final int TARGET_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MDYxMw=="}, "originalCommit": {"oid": "7b1f44607fa667a0aed42469c39fcd383fc68fae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTEzNQ==", "bodyText": "nit, shall we throw exception if the instance config or cluster config is not found?\nThis mostly because the read is not done successfully. In which case, we don't know the real configured numbers. So better stop initialization instead of guess it shall be 40.", "url": "https://github.com/apache/helix/pull/973#discussion_r416975135", "createdAt": "2020-04-28T23:03:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +107,36 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private static int getTaskThreadPoolSize(HelixManager manager) {\n+    ConfigAccessor configAccessor = manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    InstanceConfig instanceConfig =\n+        configAccessor.getInstanceConfig(manager.getClusterName(), manager.getInstanceName());\n+    if (instanceConfig != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab0a534cef49b6f9512ce338ef3c5276041df7f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4e7876574a8f13a44f9b37228d0e345dc07e2e", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/2c4e7876574a8f13a44f9b37228d0e345dc07e2e", "committedDate": "2020-05-02T00:24:32Z", "message": "Unit tests and lazy initialization of thread pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7800465c5ba4597ba95ceda7a4e1847f37d428b8", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/7800465c5ba4597ba95ceda7a4e1847f37d428b8", "committedDate": "2020-05-04T21:23:29Z", "message": "Add unit tests for ClusterConfig/InstanceConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a", "committedDate": "2020-05-05T16:31:37Z", "message": "Add LiveInstance update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTYzMjMw", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-405963230", "createdAt": "2020-05-05T16:37:13Z", "commit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozNzoxM1rOGQx7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozNzoxM1rOGQx7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0ODM5OA==", "bodyText": "We talked about this in an early meeting, how we want to not let users to use this constructor, therefore I added this comment.\nHowever, I realized that with this constructor, we actually cannot set CURRENT_TASK_THREAD_POOL_SIZE, because we can't get the pool size. I'm now more inclined to disable this constructor altogether. @jiajunwang @narendly", "url": "https://github.com/apache/helix/pull/973#discussion_r420248398", "createdAt": "2020-05-05T16:37:13Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -41,23 +47,15 @@\n \n   private final HelixManager _manager;\n   private final Map<String, TaskFactory> _taskFactoryRegistry;\n-  private final ScheduledExecutorService _taskExecutor;\n+  private ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {\n-    this(manager, taskFactoryRegistry,\n-        Executors.newScheduledThreadPool(TASK_THREADPOOL_SIZE, new ThreadFactory() {\n-          private AtomicInteger threadId = new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n-          }\n-        }));\n+    this(manager, taskFactoryRegistry, null);\n   }\n \n+  // This constructor is only for internal usage. Do not use!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTk4ODA1", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-405998805", "createdAt": "2020-05-05T17:21:42Z", "commit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzoyMTo0MlrOGQzwPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzoyMzo0N1rOGQz1fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODMzMg==", "bodyText": "Apache license?", "url": "https://github.com/apache/helix/pull/973#discussion_r420278332", "createdAt": "2020-05-05T17:21:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.apache.helix.task;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3OTY3OQ==", "bodyText": "I see 2 not set constants. Did you consider using one common constant and putting it in the constants class?", "url": "https://github.com/apache/helix/pull/973#discussion_r420279679", "createdAt": "2020-05-05T17:23:47Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/model/LiveInstance.java", "diffHunk": "@@ -48,6 +49,7 @@\n     TASK_EXEC_THREAD\n   }\n \n+  public static final int CURRENT_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/0bfb594f3647ee06be90b0fe86ed56a1c349c0d6", "committedDate": "2020-05-05T17:39:06Z", "message": "Apache license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDEwNjY5", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-406010669", "createdAt": "2020-05-05T17:37:05Z", "commit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozNzowNlrOGQ0Wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1Mzo1MVrOGQ0-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODExNA==", "bodyText": "in addition to what Huizhi said, shall we make it 40 for backward compatibility?", "url": "https://github.com/apache/helix/pull/973#discussion_r420288114", "createdAt": "2020-05-05T17:37:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/LiveInstance.java", "diffHunk": "@@ -48,6 +49,7 @@\n     TASK_EXEC_THREAD\n   }\n \n+  public static final int CURRENT_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3OTY3OQ=="}, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NDkxOA==", "bodyText": "To be safe, add a sync control on this block. There is no guarantee we won't call createNewStateModel in parallel in the future.\nAnd better to put all the logics inside the initializeTaskExecutor().", "url": "https://github.com/apache/helix/pull/973#discussion_r420294918", "createdAt": "2020-05-05T17:48:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -81,6 +79,12 @@ public Thread newThread(Runnable r) {\n \n   @Override\n   public TaskStateModel createNewStateModel(String resourceName, String partitionKey) {\n+    if (_taskExecutor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NjI1OQ==", "bodyText": "Curious about this design.\nThe createNewStateModel() is called when we have partition assigned, right? But I think the controller needs to know the pool size before assign the tasks. How it works?", "url": "https://github.com/apache/helix/pull/973#discussion_r420296259", "createdAt": "2020-05-05T17:50:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -81,6 +79,12 @@ public Thread newThread(Runnable r) {\n \n   @Override\n   public TaskStateModel createNewStateModel(String resourceName, String partitionKey) {\n+    if (_taskExecutor == null) {\n+      int taskThreadPoolSize = getTaskThreadPoolSize();\n+      updateLiveInstanceWithThreadPoolSize(taskThreadPoolSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NjY1Mw==", "bodyText": "As mentioned below, I don't think we like lazy initialize the executor. Any reason for this change?", "url": "https://github.com/apache/helix/pull/973#discussion_r420296653", "createdAt": "2020-05-05T17:51:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -41,23 +47,15 @@\n \n   private final HelixManager _manager;\n   private final Map<String, TaskFactory> _taskFactoryRegistry;\n-  private final ScheduledExecutorService _taskExecutor;\n+  private ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {\n-    this(manager, taskFactoryRegistry,\n-        Executors.newScheduledThreadPool(TASK_THREADPOOL_SIZE, new ThreadFactory() {\n-          private AtomicInteger threadId = new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n-          }\n-        }));\n+    this(manager, taskFactoryRegistry, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5NzUxNQ==", "bodyText": "You are also excluding 0. Let's make the comment clear and fitting the code.", "url": "https://github.com/apache/helix/pull/973#discussion_r420297515", "createdAt": "2020-05-05T17:52:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +106,73 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private int getTaskThreadPoolSize() {\n+    ConfigAccessor configAccessor = _manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    InstanceConfig instanceConfig =\n+        configAccessor.getInstanceConfig(_manager.getClusterName(), _manager.getInstanceName());\n+    if (instanceConfig != null) {\n+      int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+      if (verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_manager.getClusterName());\n+    if (clusterConfig != null) {\n+      int targetTaskThreadPoolSize = clusterConfig.getDefaultTargetTaskThreadPoolSize();\n+      if (verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    }\n+\n+    return TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE;\n+  }\n+\n+  /*\n+   * Checks against the default values of -1 when pool sizes are not defined; we don't want -1's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5ODQwNA==", "bodyText": "Instead of updating after the live node created, we shall ensure it is included when the node is created the first time. Or we may have some serious issue that the controller violates the capacity limitation.", "url": "https://github.com/apache/helix/pull/973#discussion_r420298404", "createdAt": "2020-05-05T17:53:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +106,73 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  /*\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   */\n+  private int getTaskThreadPoolSize() {\n+    ConfigAccessor configAccessor = _manager.getConfigAccessor();\n+    // Check instance config first for thread pool size\n+    InstanceConfig instanceConfig =\n+        configAccessor.getInstanceConfig(_manager.getClusterName(), _manager.getInstanceName());\n+    if (instanceConfig != null) {\n+      int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+      if (verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_manager.getClusterName());\n+    if (clusterConfig != null) {\n+      int targetTaskThreadPoolSize = clusterConfig.getDefaultTargetTaskThreadPoolSize();\n+      if (verifyTargetThreadPoolSize(targetTaskThreadPoolSize)) {\n+        return targetTaskThreadPoolSize;\n+      }\n+    }\n+\n+    return TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE;\n+  }\n+\n+  /*\n+   * Checks against the default values of -1 when pool sizes are not defined; we don't want -1's\n+   */\n+  private static boolean verifyTargetThreadPoolSize(int targetTaskThreadPoolSize) {\n+    return targetTaskThreadPoolSize > 0;\n+  }\n+\n+  /*\n+   * Update LiveInstance with the current used thread pool size\n+   */\n+  private void updateLiveInstanceWithThreadPoolSize(int taskThreadPoolSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80989ebe45b60f1a0ef4233ae385ce1d10b5f977", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/80989ebe45b60f1a0ef4233ae385ce1d10b5f977", "committedDate": "2020-05-05T22:11:04Z", "message": "Comment changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTgxODU0", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-406181854", "createdAt": "2020-05-05T21:52:24Z", "commit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1MjoyNFrOGQ870w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjowNDozN1rOGQ9RKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyODc1NQ==", "bodyText": "I find myself repeating this again, why does this field need to be public?", "url": "https://github.com/apache/helix/pull/973#discussion_r420428755", "createdAt": "2020-05-05T21:52:24Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -137,6 +141,7 @@\n   private final static int MAX_REBALANCE_PREFERENCE = 10;\n   private final static int MIN_REBALANCE_PREFERENCE = 0;\n   public final static boolean DEFAULT_GLOBAL_REBALANCE_ASYNC_MODE_ENABLED = true;\n+  public static final int DEFAULT_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyOTQ3MQ==", "bodyText": "We're confusing terminology here. Let's please try to be exact:\nWhat you want here is the global target task thread pool size, not default.\nThe \"default\" value refers to 40. It's okay to use the NOT_SET bit and resort to 40 at initialization time.", "url": "https://github.com/apache/helix/pull/973#discussion_r420429471", "createdAt": "2020-05-05T21:54:01Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,32 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the default target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs\n+   * @return the target size of task thread pool\n+   */\n+  public int getDefaultTargetTaskThreadPoolSize() {\n+    return _record.getIntField(\n+        ClusterConfig.ClusterConfigProperty.DEFAULT_TARGET_TASK_THREAD_POOL_SIZE.name(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMDE5OA==", "bodyText": "Fix the name.", "url": "https://github.com/apache/helix/pull/973#discussion_r420430198", "createdAt": "2020-05-05T21:55:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,32 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the default target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs\n+   * @return the target size of task thread pool\n+   */\n+  public int getDefaultTargetTaskThreadPoolSize() {\n+    return _record.getIntField(\n+        ClusterConfig.ClusterConfigProperty.DEFAULT_TARGET_TASK_THREAD_POOL_SIZE.name(),\n+        DEFAULT_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET);\n+  }\n+\n+  /**\n+   * Set the default target size of task thread pools for this cluster.\n+   * @param defaultTargetTaskThreadPoolSize - the new target task thread pool size\n+   * @throws IllegalArgumentException - when the provided new thread pool size is not greater than 0\n+   */\n+  public void setDefaultTargetTaskThreadPoolSize(int defaultTargetTaskThreadPoolSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMDQ0NA==", "bodyText": "Not default, but global value. The default value for the global config should be 40.", "url": "https://github.com/apache/helix/pull/973#discussion_r420430444", "createdAt": "2020-05-05T21:55:59Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,32 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the default target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs\n+   * @return the target size of task thread pool\n+   */\n+  public int getDefaultTargetTaskThreadPoolSize() {\n+    return _record.getIntField(\n+        ClusterConfig.ClusterConfigProperty.DEFAULT_TARGET_TASK_THREAD_POOL_SIZE.name(),\n+        DEFAULT_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET);\n+  }\n+\n+  /**\n+   * Set the default target size of task thread pools for this cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMTAxMQ==", "bodyText": "Fix the message.", "url": "https://github.com/apache/helix/pull/973#discussion_r420431011", "createdAt": "2020-05-05T21:57:09Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,32 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the default target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs\n+   * @return the target size of task thread pool\n+   */\n+  public int getDefaultTargetTaskThreadPoolSize() {\n+    return _record.getIntField(\n+        ClusterConfig.ClusterConfigProperty.DEFAULT_TARGET_TASK_THREAD_POOL_SIZE.name(),\n+        DEFAULT_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET);\n+  }\n+\n+  /**\n+   * Set the default target size of task thread pools for this cluster.\n+   * @param defaultTargetTaskThreadPoolSize - the new target task thread pool size\n+   * @throws IllegalArgumentException - when the provided new thread pool size is not greater than 0\n+   */\n+  public void setDefaultTargetTaskThreadPoolSize(int defaultTargetTaskThreadPoolSize)\n+      throws IllegalArgumentException {\n+    if (defaultTargetTaskThreadPoolSize <= 0) {\n+      throw new IllegalArgumentException(\"targetTaskThreadPoolSize must be greater than 0!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMTU2Ng==", "bodyText": "Nit: fix the comment (space)", "url": "https://github.com/apache/helix/pull/973#discussion_r420431566", "createdAt": "2020-05-05T21:58:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -109,7 +109,11 @@\n     // https://github.com/apache/helix/wiki/Weight-aware-Globally-Evenly-distributed-Rebalancer#rebalance-coordinator\n     //\n     // Default to be true.\n-    GLOBAL_REBALANCE_ASYNC_MODE\n+    GLOBAL_REBALANCE_ASYNC_MODE,\n+\n+    // The target size of task thread pools for each participant. This is the \"default\" value\n+    //that's used when participants don't specify their individual pool sizes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMTcwMA==", "bodyText": "\"global\" value to the cluster", "url": "https://github.com/apache/helix/pull/973#discussion_r420431700", "createdAt": "2020-05-05T21:58:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -109,7 +109,11 @@\n     // https://github.com/apache/helix/wiki/Weight-aware-Globally-Evenly-distributed-Rebalancer#rebalance-coordinator\n     //\n     // Default to be true.\n-    GLOBAL_REBALANCE_ASYNC_MODE\n+    GLOBAL_REBALANCE_ASYNC_MODE,\n+\n+    // The target size of task thread pools for each participant. This is the \"default\" value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMjkyNA==", "bodyText": "private?", "url": "https://github.com/apache/helix/pull/973#discussion_r420432924", "createdAt": "2020-05-05T22:01:27Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/InstanceConfig.java", "diffHunk": "@@ -56,11 +56,13 @@\n     DOMAIN,\n     DELAY_REBALANCE_ENABLED,\n     MAX_CONCURRENT_TASK,\n-    INSTANCE_CAPACITY_MAP\n+    INSTANCE_CAPACITY_MAP,\n+    TARGET_TASK_THREAD_POOL_SIZE\n   }\n \n   public static final int WEIGHT_NOT_SET = -1;\n   public static final int MAX_CONCURRENT_TASK_NOT_SET = -1;\n+  public static final int TARGET_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMzIzMg==", "bodyText": "This field is not necessary.", "url": "https://github.com/apache/helix/pull/973#discussion_r420433232", "createdAt": "2020-05-05T22:02:14Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/LiveInstance.java", "diffHunk": "@@ -48,6 +49,7 @@\n     TASK_EXEC_THREAD\n   }\n \n+  public static final int CURRENT_TASK_THREAD_POOL_SIZE_NOT_SET = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3OTY3OQ=="}, "originalCommit": {"oid": "8bbba63ffa2b44c5b5b7a4e9b6c9a8c8ccad606a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzNDIxOQ==", "bodyText": "Please try to understand the proposed design thoroughly.\nFor example, what does it mean for an instance to have a task thread pool of size -1? (it is meaningless, we shouldn't create a task pool with size -1).", "url": "https://github.com/apache/helix/pull/973#discussion_r420434219", "createdAt": "2020-05-05T22:04:37Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/LiveInstance.java", "diffHunk": "@@ -190,6 +192,24 @@ public void setWebserviceUrl(String url) {\n     _record.setSimpleField(LiveInstanceProperty.ZKPROPERTYTRANSFERURL.toString(), url);\n   }\n \n+  /**\n+   * Get the current task thread pool size of the instance\n+   * @return the current task thread pool size\n+   */\n+  public int getCurrentTaskThreadPoolSize() {\n+    return _record.getIntField(LiveInstanceProperty.CURRENT_TASK_THREAD_POOL_SIZE.name(),\n+        CURRENT_TASK_THREAD_POOL_SIZE_NOT_SET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb594f3647ee06be90b0fe86ed56a1c349c0d6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjIyMTQ3", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-406222147", "createdAt": "2020-05-05T23:25:40Z", "commit": {"oid": "80989ebe45b60f1a0ef4233ae385ce1d10b5f977"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNTo0MVrOGQ_NYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNTo0MVrOGQ_NYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjAxOA==", "bodyText": "Update:\nNeal and I had an offline discussion. To simplify the design, we will create a temporary ZK connection to read the task pool size configs and close right away. This would greatly simplify the code and this won't be that much of a burden since the connection is closed right away.\nThis is to populate the current task size pool at the time of LiveInstance (ephemeral node) initialization.\n@NealSun96 Please remember to put a TODO here to potentially revisit the logic - ideally, we shouldn't have to create multiple ZK client connections when there already is a manager there.", "url": "https://github.com/apache/helix/pull/973#discussion_r420466018", "createdAt": "2020-05-05T23:25:41Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -41,23 +47,15 @@\n \n   private final HelixManager _manager;\n   private final Map<String, TaskFactory> _taskFactoryRegistry;\n-  private final ScheduledExecutorService _taskExecutor;\n+  private ScheduledExecutorService _taskExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80989ebe45b60f1a0ef4233ae385ce1d10b5f977"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4bc7d86c4b7b3838557a086664e8459395aa7fd", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/a4bc7d86c4b7b3838557a086664e8459395aa7fd", "committedDate": "2020-05-06T18:00:20Z", "message": "LiveInstance related changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315af87330177b112dea8fb24c5254c540b137c2", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/315af87330177b112dea8fb24c5254c540b137c2", "committedDate": "2020-05-06T18:09:53Z", "message": "Quick small fixups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b723e0c00de5f7f2f6a33cbc3468970fb64a453", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/1b723e0c00de5f7f2f6a33cbc3468970fb64a453", "committedDate": "2020-05-06T21:56:10Z", "message": "Fix broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/8ae50c1841cde6b68854fdff41d6092d9081a7f9", "committedDate": "2020-05-08T22:25:24Z", "message": "Fix routing data conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjEwODg5", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-408610889", "createdAt": "2020-05-09T04:20:52Z", "commit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "state": "COMMENTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDoyMDo1MlrOGS4X3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTowNDoxMlrOGS4htA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTE2NA==", "bodyText": "Let's clarify which config takes precedence and also what would it mean to not have this field defined.\nFor example, consider the following:\n\nwhat if an instance has a target value set in InstanceConfig and there is a global thread pool size config set as well?\nwhat if there's nothing set at all? which value will this use?\netc..", "url": "https://github.com/apache/helix/pull/973#discussion_r422451164", "createdAt": "2020-05-09T04:20:52Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -109,7 +109,11 @@\n     // https://github.com/apache/helix/wiki/Weight-aware-Globally-Evenly-distributed-Rebalancer#rebalance-coordinator\n     //\n     // Default to be true.\n-    GLOBAL_REBALANCE_ASYNC_MODE\n+    GLOBAL_REBALANCE_ASYNC_MODE,\n+\n+    // The target size of task thread pools for each participant. This is the global value\n+    // that's used when participants don't specify their individual pool sizes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTE5NQ==", "bodyText": "What if this value is not set?", "url": "https://github.com/apache/helix/pull/973#discussion_r422451195", "createdAt": "2020-05-09T04:21:17Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,33 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the global target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTMxNw==", "bodyText": "Technically, I think the value 0 is also valid. It just wouldn't process any tasks. What do you think?\nI think that we might be able to use this config as a workaround to \"disable\" task framework globally, or only have certain participants process tasks - say, global is 0, but certain participants will have their individual configs set.", "url": "https://github.com/apache/helix/pull/973#discussion_r422451317", "createdAt": "2020-05-09T04:23:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -709,6 +714,33 @@ public void setInstanceCapacityKeys(List<String> capacityKeys) {\n     _record.setListField(ClusterConfigProperty.INSTANCE_CAPACITY_KEYS.name(), capacityKeys);\n   }\n \n+  /**\n+   * Get the global target size of task thread pools. This values applies to participants and is\n+   * overwritten by participants' own values if they specified individual pool sizes in\n+   * InstanceConfigs\n+   * @return the global target size of task thread pool\n+   */\n+  public int getGlobalTargetTaskThreadPoolSize() {\n+    return _record\n+        .getIntField(ClusterConfig.ClusterConfigProperty.GLOBAL_TARGET_TASK_THREAD_POOL_SIZE.name(),\n+            GLOBAL_TARGET_TASK_THREAD_POOL_SIZE_NOT_SET);\n+  }\n+\n+  /**\n+   * Set the global target size of task thread pools for this cluster.\n+   * @param globalTargetTaskThreadPoolSize - the new global target task thread pool size\n+   * @throws IllegalArgumentException - when the provided new thread pool size is not greater than 0\n+   */\n+  public void setGlobalTargetTaskThreadPoolSize(int globalTargetTaskThreadPoolSize)\n+      throws IllegalArgumentException {\n+    if (globalTargetTaskThreadPoolSize <= 0) {\n+      throw new IllegalArgumentException(\"globalTargetTaskThreadPoolSize must be greater than 0!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTQ3OA==", "bodyText": "Good description! :)", "url": "https://github.com/apache/helix/pull/973#discussion_r422451478", "createdAt": "2020-05-09T04:26:00Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,11 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+\n+  /**\n+   * The default task thread pool size that will be used to create thread pools if target thread\n+   * pool sizes are not defined in InstanceConfig or ClusterConfig; also used as the current thread\n+   * pool size default value if the current thread pool size is not defined in LiveInstance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTU1MQ==", "bodyText": "Let's also add that we want to avoid using this because Task Framework needs to have full control of the thread pool unlike the state transition thread pool.", "url": "https://github.com/apache/helix/pull/973#discussion_r422451551", "createdAt": "2020-05-09T04:27:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -44,39 +48,29 @@\n   private final ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {\n-    this(manager, taskFactoryRegistry,\n-        Executors.newScheduledThreadPool(TASK_THREADPOOL_SIZE, new ThreadFactory() {\n-          private AtomicInteger threadId = new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n-          }\n-        }));\n+    _manager = manager;\n+    _taskFactoryRegistry = taskFactoryRegistry;\n+    // TODO: revisit the logic here; we are creating a connection although we already have a manager\n+    ConfigAccessor configAccessor = createConfigAccessor();\n+    int threadPoolSize = TaskUtil.getTargetThreadPoolSize(configAccessor, _manager.getClusterName(),\n+        _manager.getInstanceName());\n+    configAccessor.close();\n+    _taskExecutor = createTaskExecutor(threadPoolSize);\n+    _timerTaskExecutor = createTimerTaskExecutor();\n+    initializeTaskMonitor();\n   }\n \n+  // FIXME: DO NOT USE! This size of provided thread pool will not be reflected to controller\n+  // properly, the controller may over schedule tasks to this participant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTY5Mg==", "bodyText": "It would be a good idea to give more context:\nThis is only so because we don't enforce the order in which the manager should be connected. Some users register a taskFactoryRegistry before connecting the manager, others do so after. Either works. This is only a problem for the former case.\nSo the real TODO is to think about what the right order should be and to determine whether we should enforce this order (which would make it backward incompatible), but arguably cleaner because we then won't have to create an extra ZK connection.", "url": "https://github.com/apache/helix/pull/973#discussion_r422451692", "createdAt": "2020-05-09T04:29:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -44,39 +48,29 @@\n   private final ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {\n-    this(manager, taskFactoryRegistry,\n-        Executors.newScheduledThreadPool(TASK_THREADPOOL_SIZE, new ThreadFactory() {\n-          private AtomicInteger threadId = new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n-          }\n-        }));\n+    _manager = manager;\n+    _taskFactoryRegistry = taskFactoryRegistry;\n+    // TODO: revisit the logic here; we are creating a connection although we already have a manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTgyNg==", "bodyText": "Cluster name doesn't have a \"/\". So this ternary check is not necessary?", "url": "https://github.com/apache/helix/pull/973#discussion_r422451826", "createdAt": "2020-05-09T04:32:25Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +96,53 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  private ScheduledExecutorService createTaskExecutor(int taskThreadPoolSize) {\n+    return Executors.newScheduledThreadPool(taskThreadPoolSize, new ThreadFactory() {\n+      private AtomicInteger threadId = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n+      }\n+    });\n+  }\n+\n+  private ScheduledExecutorService createTimerTaskExecutor() {\n+    return Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-timeTask_thread\");\n+      }\n+    });\n+  }\n+\n+  private void initializeTaskMonitor() {\n+    if (_taskExecutor instanceof ThreadPoolExecutor) {\n+      try {\n+        _monitor = new ThreadPoolExecutorMonitor(TaskConstants.STATE_MODEL_NAME,\n+            (ThreadPoolExecutor) _taskExecutor);\n+      } catch (JMException e) {\n+        LOG.warn(\"Error in creating ThreadPoolExecutorMonitor for TaskStateModelFactory.\");\n+      }\n+    }\n+  }\n+\n+  /*\n+   * Create a config accessor to get the thread pool size\n+   */\n+  protected ConfigAccessor createConfigAccessor() {\n+    if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)) {\n+      String clusterName = _manager.getClusterName();\n+      String shardingKey = clusterName.charAt(0) == '/' ? clusterName : \"/\" + clusterName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTk3NA==", "bodyText": "Should we allow 0?", "url": "https://github.com/apache/helix/pull/973#discussion_r422451974", "createdAt": "2020-05-09T04:35:10Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjA0Ng==", "bodyText": "Nit: your last \"Exception: \" is not necessary since you're just providing it as the last parameter. Log4j I think formats it already.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452046", "createdAt": "2020-05-09T04:36:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjA1Ng==", "bodyText": "0?", "url": "https://github.com/apache/helix/pull/973#discussion_r422452056", "createdAt": "2020-05-09T04:36:33Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. Exception: \",\n+          instanceName, clusterName, e);\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+      if (clusterConfig != null) {\n+        int globalTargetTaskThreadPoolSize = clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+        if (globalTargetTaskThreadPoolSize > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjA4Mg==", "bodyText": "It would be nice to include the default size constant here.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452082", "createdAt": "2020-05-09T04:37:17Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. Exception: \",\n+          instanceName, clusterName, e);\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+      if (clusterConfig != null) {\n+        int globalTargetTaskThreadPoolSize = clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+        if (globalTargetTaskThreadPoolSize > 0) {\n+          return globalTargetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\"Got null as ClusterConfig for cluster {}. Returning default value. \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjEwOQ==", "bodyText": "Say what the default value is, and no need for \"Exception: \".", "url": "https://github.com/apache/helix/pull/973#discussion_r422452109", "createdAt": "2020-05-09T04:37:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. Exception: \",\n+          instanceName, clusterName, e);\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+      if (clusterConfig != null) {\n+        int globalTargetTaskThreadPoolSize = clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+        if (globalTargetTaskThreadPoolSize > 0) {\n+          return globalTargetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\"Got null as ClusterConfig for cluster {}. Returning default value. \",\n+            clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching ClusterConfig in cluster {}. Returning default value. Exception: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjExNw==", "bodyText": "TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE", "url": "https://github.com/apache/helix/pull/973#discussion_r422452117", "createdAt": "2020-05-09T04:37:53Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. Exception: \",\n+          instanceName, clusterName, e);\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+      if (clusterConfig != null) {\n+        int globalTargetTaskThreadPoolSize = clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+        if (globalTargetTaskThreadPoolSize > 0) {\n+          return globalTargetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\"Got null as ClusterConfig for cluster {}. Returning default value. \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjA4Mg=="}, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjI1NQ==", "bodyText": "Consider adding a TODO here - I'm not sure why this needs to be a single thread executor. We could certainly use more threads for timer tasks, but let's tackle this at a later point of this project.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452255", "createdAt": "2020-05-09T04:40:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +96,53 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  private ScheduledExecutorService createTaskExecutor(int taskThreadPoolSize) {\n+    return Executors.newScheduledThreadPool(taskThreadPoolSize, new ThreadFactory() {\n+      private AtomicInteger threadId = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n+      }\n+    });\n+  }\n+\n+  private ScheduledExecutorService createTimerTaskExecutor() {\n+    return Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-timeTask_thread\");\n+      }\n+    });\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjMzNg==", "bodyText": "Nit, let's add e as the second parameter for log.warn.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452336", "createdAt": "2020-05-09T04:41:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +96,53 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  private ScheduledExecutorService createTaskExecutor(int taskThreadPoolSize) {\n+    return Executors.newScheduledThreadPool(taskThreadPoolSize, new ThreadFactory() {\n+      private AtomicInteger threadId = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n+      }\n+    });\n+  }\n+\n+  private ScheduledExecutorService createTimerTaskExecutor() {\n+    return Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-timeTask_thread\");\n+      }\n+    });\n+  }\n+\n+  private void initializeTaskMonitor() {\n+    if (_taskExecutor instanceof ThreadPoolExecutor) {\n+      try {\n+        _monitor = new ThreadPoolExecutorMonitor(TaskConstants.STATE_MODEL_NAME,\n+            (ThreadPoolExecutor) _taskExecutor);\n+      } catch (JMException e) {\n+        LOG.warn(\"Error in creating ThreadPoolExecutorMonitor for TaskStateModelFactory.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjM4NQ==", "bodyText": "How is this test relevant to this PR?", "url": "https://github.com/apache/helix/pull/973#discussion_r422452385", "createdAt": "2020-05-09T04:42:56Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkHelixJavaApis.java", "diffHunk": "@@ -149,6 +150,7 @@ public void beforeClass() throws Exception {\n     System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n         \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n \n+    HttpRoutingDataReader.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjUxMQ==", "bodyText": "Nit: might be a display of better craftsmanship/readability if you could explain why you're adding 1 here. I believe you're just trying to use a value that's not 40?", "url": "https://github.com/apache/helix/pull/973#discussion_r422452511", "createdAt": "2020-05-09T04:44:31Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestParticipantManager.java", "diffHunk": "@@ -145,6 +147,43 @@ public void testSessionExpiryCreateLiveInstance() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test(dependsOnMethods = \"testSessionExpiryCreateLiveInstance\")\n+  public void testCurrentTaskThreadPoolSizeCreation() throws Exception {\n+    final int testThreadPoolSize = TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjU2MA==", "bodyText": "If possible, could we start phasing out deprecated constructors (I believe this is deprecated)?", "url": "https://github.com/apache/helix/pull/973#discussion_r422452560", "createdAt": "2020-05-09T04:45:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestParticipantManager.java", "diffHunk": "@@ -145,6 +147,43 @@ public void testSessionExpiryCreateLiveInstance() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test(dependsOnMethods = \"testSessionExpiryCreateLiveInstance\")\n+  public void testCurrentTaskThreadPoolSizeCreation() throws Exception {\n+    final int testThreadPoolSize = TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE + 1;\n+    final String className = TestHelper.getTestClassName();\n+    final String methodName = TestHelper.getTestMethodName();\n+    final String clusterName = className + \"_\" + methodName;\n+\n+    final ZKHelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(ZK_ADDR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjY4Mg==", "bodyText": "Are you stopping this manager and cleaning up this cluster after the test?", "url": "https://github.com/apache/helix/pull/973#discussion_r422452682", "createdAt": "2020-05-09T04:46:53Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestParticipantManager.java", "diffHunk": "@@ -145,6 +147,43 @@ public void testSessionExpiryCreateLiveInstance() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test(dependsOnMethods = \"testSessionExpiryCreateLiveInstance\")\n+  public void testCurrentTaskThreadPoolSizeCreation() throws Exception {\n+    final int testThreadPoolSize = TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE + 1;\n+    final String className = TestHelper.getTestClassName();\n+    final String methodName = TestHelper.getTestMethodName();\n+    final String clusterName = className + \"_\" + methodName;\n+\n+    final ZKHelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(ZK_ADDR));\n+    final PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR,\n+        12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        10, // partitions per resource\n+        5, // number of nodes\n+        3, // replicas\n+        \"MasterSlave\",\n+        true); // do rebalance\n+\n+    final String instanceName = \"localhost_12918\";\n+    final MockParticipantManager manager =\n+        new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n+\n+    InstanceConfig instanceConfig = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n+    instanceConfig.setTargetTaskThreadPoolSize(testThreadPoolSize);\n+    accessor.setProperty(keyBuilder.instanceConfig(instanceName), instanceConfig);\n+\n+    manager.syncStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1Mjc0NQ==", "bodyText": "We should maybe consider allowing the value 0. Negative values don't make any sense so those should still not be allowed.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452745", "createdAt": "2020-05-09T04:48:15Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/model/TestClusterConfig.java", "diffHunk": "@@ -69,6 +69,30 @@ public void testSetCapacityKeysEmptyList() {\n     testConfig.setInstanceCapacityKeys(Collections.emptyList());\n   }\n \n+  @Test\n+  public void testGetGlobalTargetTaskThreadPoolSize() {\n+    ClusterConfig testConfig = new ClusterConfig(\"testId\");\n+    testConfig.getRecord().setIntField(\n+        ClusterConfig.ClusterConfigProperty.GLOBAL_TARGET_TASK_THREAD_POOL_SIZE.name(), 100);\n+\n+    Assert.assertEquals(testConfig.getGlobalTargetTaskThreadPoolSize(), 100);\n+  }\n+\n+  @Test\n+  public void testSetGlobalTargetTaskThreadPoolSize() {\n+    ClusterConfig testConfig = new ClusterConfig(\"testId\");\n+    testConfig.setGlobalTargetTaskThreadPoolSize(100);\n+\n+    Assert.assertEquals(testConfig.getRecord().getIntField(\n+        ClusterConfig.ClusterConfigProperty.GLOBAL_TARGET_TASK_THREAD_POOL_SIZE.name(), -1), 100);\n+  }\n+\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testSetGlobalTargetTaskThreadPoolSizeIllegalArgument() {\n+    ClusterConfig testConfig = new ClusterConfig(\"testId\");\n+    testConfig.setGlobalTargetTaskThreadPoolSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1Mjc1OA==", "bodyText": "We should consider allowing the value 0. Negative values don't make any sense so those should still not be allowed.", "url": "https://github.com/apache/helix/pull/973#discussion_r422452758", "createdAt": "2020-05-09T04:48:39Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/model/TestInstanceConfig.java", "diffHunk": "@@ -123,4 +123,28 @@ public void testSetInstanceCapacityMapInvalid() {\n     InstanceConfig testConfig = new InstanceConfig(\"testConfig\");\n     testConfig.setInstanceCapacityMap(capacityDataMap);\n   }\n+\n+  @Test\n+  public void testGetTargetTaskThreadPoolSize() {\n+    InstanceConfig testConfig = new InstanceConfig(\"testConfig\");\n+    testConfig.getRecord().setIntField(\n+        InstanceConfig.InstanceConfigProperty.TARGET_TASK_THREAD_POOL_SIZE.name(), 100);\n+\n+    Assert.assertEquals(testConfig.getTargetTaskThreadPoolSize(), 100);\n+  }\n+\n+  @Test\n+  public void testSetTargetTaskThreadPoolSize() {\n+    InstanceConfig testConfig = new InstanceConfig(\"testConfig\");\n+    testConfig.setTargetTaskThreadPoolSize(100);\n+\n+    Assert.assertEquals(testConfig.getRecord().getIntField(\n+        InstanceConfig.InstanceConfigProperty.TARGET_TASK_THREAD_POOL_SIZE.name(), -1), 100);\n+  }\n+\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testSetTargetTaskThreadPoolSizeIllegalArgument() {\n+    InstanceConfig testConfig = new InstanceConfig(\"testConfig\");\n+    testConfig.setTargetTaskThreadPoolSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjgyMQ==", "bodyText": "Great!", "url": "https://github.com/apache/helix/pull/973#discussion_r422452821", "createdAt": "2020-05-09T04:49:41Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.TaskTestBase;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.util.HttpRoutingDataReader;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestTaskStateModelFactory extends TaskTestBase {\n+  // This value has to be different from the default value to verify correctness", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MzU0Mw==", "bodyText": "Did you mean to say turn \"off\"? :)", "url": "https://github.com/apache/helix/pull/973#discussion_r422453543", "createdAt": "2020-05-09T05:01:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.TaskTestBase;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.util.HttpRoutingDataReader;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestTaskStateModelFactory extends TaskTestBase {\n+  // This value has to be different from the default value to verify correctness\n+  private static final int TEST_TARGET_TASK_THREAD_POOL_SIZE =\n+      TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE + 1;\n+\n+  @Test\n+  public void testConfigAccessorCreationMultiZk() throws Exception {\n+    MockParticipantManager anyParticipantManager = _participants[0];\n+\n+    InstanceConfig instanceConfig =\n+        InstanceConfig.toInstanceConfig(anyParticipantManager.getInstanceName());\n+    instanceConfig.setTargetTaskThreadPoolSize(TEST_TARGET_TASK_THREAD_POOL_SIZE);\n+    anyParticipantManager.getConfigAccessor()\n+        .setInstanceConfig(anyParticipantManager.getClusterName(),\n+            anyParticipantManager.getInstanceName(), instanceConfig);\n+\n+    // Start a msds server\n+    // TODO: TestMultiZkHelixJavaApis already defined MSDS_SERVER_ENDPOINT, which goes into\n+    // HttpRoutingDataReader and is recorded as final. As a result this test case has to use the\n+    // same endpoint. There's no workaround at this moment.\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";\n+    Map<String, Collection<String>> routingData = new HashMap<>();\n+    routingData\n+        .put(ZK_ADDR, Collections.singletonList(\"/\" + anyParticipantManager.getClusterName()));\n+    MockMetadataStoreDirectoryServer msds =\n+        new MockMetadataStoreDirectoryServer(msdsHostName, msdsPort, msdsNamespace, routingData);\n+    msds.startServer();\n+\n+    // Save previously-set system configs\n+    String prevMultiZkEnabled = System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);\n+    String prevMsdsServerEndpoint =\n+        System.getProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY);\n+    // Turn on multiZk mode in System config\n+    System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, \"true\");\n+    // MSDS endpoint: http://localhost:11117/admin/v2/namespaces/testTaskStateModelFactory\n+    System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n+        \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n+\n+    HttpRoutingDataReader.reset();\n+    TaskStateModelFactory taskStateModelFactory =\n+        new TaskStateModelFactory(anyParticipantManager, Collections.emptyMap());\n+    ConfigAccessor configAccessor = taskStateModelFactory.createConfigAccessor();\n+    Assert.assertEquals(TaskUtil\n+        .getTargetThreadPoolSize(configAccessor, anyParticipantManager.getClusterName(),\n+            anyParticipantManager.getInstanceName()), TEST_TARGET_TASK_THREAD_POOL_SIZE);\n+\n+    // Restore system properties\n+    if (prevMultiZkEnabled == null) {\n+      System.clearProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);\n+    } else {\n+      System.setProperty(SystemPropertyKeys.MULTI_ZK_ENABLED, prevMultiZkEnabled);\n+    }\n+    if (prevMsdsServerEndpoint == null) {\n+      System.clearProperty(SystemPropertyKeys.MSDS_SERVER_ENDPOINT_KEY);\n+    } else {\n+      System.setProperty(SystemPropertyKeys.MSDS_SERVER_ENDPOINT_KEY, prevMsdsServerEndpoint);\n+    }\n+    msds.stopServer();\n+  }\n+\n+  @Test(dependsOnMethods = \"testConfigAccessorCreationMultiZk\")\n+  public void testConfigAccessorCreationSingleZk() {\n+    MockParticipantManager anyParticipantManager = _participants[0];\n+\n+    // Save previously-set system configs\n+    String prevMultiZkEnabled = System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED);\n+    // Turn on multiZk mode in System config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MzY4NA==", "bodyText": "This is okay. I'm not sure if we want to make it a TODO, but \"multiZkTest\" is a generic enough a name, so I'm not too bothered by this at the moment. The reason this is tricky is that in production, in order to set up a different MSDS, you would have to change the JVM config and restart the JVM, thereby updating the final field.\nI think the right TODO here is that now that we have a few tests that need to use the MSDS, so it would be a good idea to move this MSDS creation to the abstract test base so that we make it transparent to all tests, not a single test that tests multi-zk functionalities. What do you think? That way, we could make these values like msdsHostName, port, namespace all accessible to child classes, so you don't have to redefine them (just like how we do with ZK_ADDR and such).", "url": "https://github.com/apache/helix/pull/973#discussion_r422453684", "createdAt": "2020-05-09T05:04:12Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/task/TestTaskStateModelFactory.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.helix.ConfigAccessor;\n+import org.apache.helix.SystemPropertyKeys;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.integration.task.TaskTestBase;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.msdcommon.constant.MetadataStoreRoutingConstants;\n+import org.apache.helix.msdcommon.mock.MockMetadataStoreDirectoryServer;\n+import org.apache.helix.zookeeper.util.HttpRoutingDataReader;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestTaskStateModelFactory extends TaskTestBase {\n+  // This value has to be different from the default value to verify correctness\n+  private static final int TEST_TARGET_TASK_THREAD_POOL_SIZE =\n+      TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE + 1;\n+\n+  @Test\n+  public void testConfigAccessorCreationMultiZk() throws Exception {\n+    MockParticipantManager anyParticipantManager = _participants[0];\n+\n+    InstanceConfig instanceConfig =\n+        InstanceConfig.toInstanceConfig(anyParticipantManager.getInstanceName());\n+    instanceConfig.setTargetTaskThreadPoolSize(TEST_TARGET_TASK_THREAD_POOL_SIZE);\n+    anyParticipantManager.getConfigAccessor()\n+        .setInstanceConfig(anyParticipantManager.getClusterName(),\n+            anyParticipantManager.getInstanceName(), instanceConfig);\n+\n+    // Start a msds server\n+    // TODO: TestMultiZkHelixJavaApis already defined MSDS_SERVER_ENDPOINT, which goes into\n+    // HttpRoutingDataReader and is recorded as final. As a result this test case has to use the\n+    // same endpoint. There's no workaround at this moment.\n+    final String msdsHostName = \"localhost\";\n+    final int msdsPort = 11117;\n+    final String msdsNamespace = \"multiZkTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282255567d6df3085f2583bea1c4dd2de514ae86", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/282255567d6df3085f2583bea1c4dd2de514ae86", "committedDate": "2020-05-11T17:28:08Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzY4NzI1", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-409368725", "createdAt": "2020-05-11T17:14:08Z", "commit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxNDowOFrOGTloyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0MjoxOVrOGTmqpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5Mjc3Nw==", "bodyText": "Can you share the reason why we change to GLOBAL_XXXX instead of DEFAULT_XXXX? I think default value is closer to how it is used. If participant specifies their values individually, it is not globally applied, right?", "url": "https://github.com/apache/helix/pull/973#discussion_r423192777", "createdAt": "2020-05-11T17:14:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -109,7 +109,11 @@\n     // https://github.com/apache/helix/wiki/Weight-aware-Globally-Evenly-distributed-Rebalancer#rebalance-coordinator\n     //\n     // Default to be true.\n-    GLOBAL_REBALANCE_ASYNC_MODE\n+    GLOBAL_REBALANCE_ASYNC_MODE,\n+\n+    // The target size of task thread pools for each participant. This is the global value\n+    // that's used when participants don't specify their individual pool sizes.\n+    GLOBAL_TARGET_TASK_THREAD_POOL_SIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NjcxMw==", "bodyText": "Deprecate?\nAnd if anyone is using this method, what is the current thread pool size in the live instance node?", "url": "https://github.com/apache/helix/pull/973#discussion_r423196713", "createdAt": "2020-05-11T17:20:28Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -44,39 +48,29 @@\n   private final ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {\n-    this(manager, taskFactoryRegistry,\n-        Executors.newScheduledThreadPool(TASK_THREADPOOL_SIZE, new ThreadFactory() {\n-          private AtomicInteger threadId = new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n-          }\n-        }));\n+    _manager = manager;\n+    _taskFactoryRegistry = taskFactoryRegistry;\n+    // TODO: revisit the logic here; we are creating a connection although we already have a manager\n+    ConfigAccessor configAccessor = createConfigAccessor();\n+    int threadPoolSize = TaskUtil.getTargetThreadPoolSize(configAccessor, _manager.getClusterName(),\n+        _manager.getInstanceName());\n+    configAccessor.close();\n+    _taskExecutor = createTaskExecutor(threadPoolSize);\n+    _timerTaskExecutor = createTimerTaskExecutor();\n+    initializeTaskMonitor();\n   }\n \n+  // FIXME: DO NOT USE! This size of provided thread pool will not be reflected to controller\n+  // properly, the controller may over schedule tasks to this participant.\n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMDE4NQ==", "bodyText": "You have some duplicate code in your 2 constructors. Why not keep the original style?\nAnd, I still think merging the init logic in a single method or fewer methods make the code cleaner.", "url": "https://github.com/apache/helix/pull/973#discussion_r423200185", "createdAt": "2020-05-11T17:26:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -44,39 +48,29 @@\n   private final ScheduledExecutorService _taskExecutor;\n   private final ScheduledExecutorService _timerTaskExecutor;\n   private ThreadPoolExecutorMonitor _monitor;\n-  public final static int TASK_THREADPOOL_SIZE = 40;\n \n   public TaskStateModelFactory(HelixManager manager, Map<String, TaskFactory> taskFactoryRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMjkzMQ==", "bodyText": "Why not make buildShardingKey() a util method? Will we have more and more this kind of code elsewhere?", "url": "https://github.com/apache/helix/pull/973#discussion_r423202931", "createdAt": "2020-05-11T17:30:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java", "diffHunk": "@@ -102,4 +96,53 @@ public boolean isShutdown() {\n   public boolean isTerminated() {\n     return _taskExecutor.isTerminated();\n   }\n+\n+  private ScheduledExecutorService createTaskExecutor(int taskThreadPoolSize) {\n+    return Executors.newScheduledThreadPool(taskThreadPoolSize, new ThreadFactory() {\n+      private AtomicInteger threadId = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-task_thread-\" + threadId.getAndIncrement());\n+      }\n+    });\n+  }\n+\n+  private ScheduledExecutorService createTimerTaskExecutor() {\n+    return Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        return new Thread(r, \"TaskStateModelFactory-timeTask_thread\");\n+      }\n+    });\n+  }\n+\n+  private void initializeTaskMonitor() {\n+    if (_taskExecutor instanceof ThreadPoolExecutor) {\n+      try {\n+        _monitor = new ThreadPoolExecutorMonitor(TaskConstants.STATE_MODEL_NAME,\n+            (ThreadPoolExecutor) _taskExecutor);\n+      } catch (JMException e) {\n+        LOG.warn(\"Error in creating ThreadPoolExecutorMonitor for TaskStateModelFactory.\");\n+      }\n+    }\n+  }\n+\n+  /*\n+   * Create a config accessor to get the thread pool size\n+   */\n+  protected ConfigAccessor createConfigAccessor() {\n+    if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)) {\n+      String clusterName = _manager.getClusterName();\n+      String shardingKey = clusterName.charAt(0) == '/' ? clusterName : \"/\" + clusterName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTgyNg=="}, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDY1OQ==", "bodyText": "nit, It would be helpful to note what happens if it is \"else\" condition.", "url": "https://github.com/apache/helix/pull/973#discussion_r423204659", "createdAt": "2020-05-11T17:33:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTA4Ng==", "bodyText": "If it is HelixException, is it safe to just return the default value?", "url": "https://github.com/apache/helix/pull/973#discussion_r423205086", "createdAt": "2020-05-11T17:34:30Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,\n+      String instanceName) {\n+    // Check instance config first for thread pool size\n+    try {\n+      InstanceConfig instanceConfig = configAccessor.getInstanceConfig(clusterName, instanceName);\n+      if (instanceConfig != null) {\n+        int targetTaskThreadPoolSize = instanceConfig.getTargetTaskThreadPoolSize();\n+        if (targetTaskThreadPoolSize > 0) {\n+          return targetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\n+            \"Got null as InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. \",\n+            instanceName, clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching InstanceConfig for instance {} in cluster {}. Continuing with ClusterConfig. Exception: \",\n+          instanceName, clusterName, e);\n+    }\n+\n+    // Fallback to cluster config since instance config doesn't provide the value\n+    try {\n+      ClusterConfig clusterConfig = configAccessor.getClusterConfig(clusterName);\n+      if (clusterConfig != null) {\n+        int globalTargetTaskThreadPoolSize = clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+        if (globalTargetTaskThreadPoolSize > 0) {\n+          return globalTargetTaskThreadPoolSize;\n+        }\n+      } else {\n+        LOG.warn(\"Got null as ClusterConfig for cluster {}. Returning default value. \",\n+            clusterName);\n+      }\n+    } catch (HelixException e) {\n+      LOG.warn(\n+          \"Encountered an exception while fetching ClusterConfig in cluster {}. Returning default value. Exception: \",\n+          clusterName, e);\n+    }\n+\n+    return TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNjgyOA==", "bodyText": "You have 2 very similar code blocks, especially the warning messages. Is it possible to make it concise? I understand the warning messages might look the same in that case, but it won't hurt IMO. Since we just need to know that the configuration is missing.\nDuplicate code is a bigger problem.", "url": "https://github.com/apache/helix/pull/973#discussion_r423206828", "createdAt": "2020-05-11T17:37:33Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskUtil.java", "diffHunk": "@@ -1045,4 +1048,54 @@ private static void setNextJobPurgeTime(String workflow, long currentTime, long\n       rebalanceScheduler.scheduleRebalance(manager, workflow, nextPurgeTime);\n     }\n   }\n+\n+  /**\n+   * Get target thread pool size from InstanceConfig first; if that fails, get it from\n+   * ClusterConfig; if that fails, fall back to the default value.\n+   * @param configAccessor - accessor used for the configs\n+   * @param clusterName - the cluster name for InstanceConfig and ClusterConfig\n+   * @param instanceName - the instance name for InstanceConfig\n+   * @return target thread pool size\n+   */\n+  public static int getTargetThreadPoolSize(ConfigAccessor configAccessor, String clusterName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwODkyMw==", "bodyText": "Shall we put this reset into the root test class? Or to the basic ZK API test class? So that we don't need to bother changing it if more tests modify the routing data.", "url": "https://github.com/apache/helix/pull/973#discussion_r423208923", "createdAt": "2020-05-11T17:41:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/multizk/TestMultiZkHelixJavaApis.java", "diffHunk": "@@ -149,6 +150,7 @@ public void beforeClass() throws Exception {\n     System.setProperty(MetadataStoreRoutingConstants.MSDS_SERVER_ENDPOINT_KEY,\n         \"http://\" + msdsHostName + \":\" + msdsPort + \"/admin/v2/namespaces/\" + msdsNamespace);\n \n+    HttpRoutingDataReader.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MjM4NQ=="}, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwOTYzNg==", "bodyText": "Can you checkout TestZKLiveInstanceData and see if you can merge them?", "url": "https://github.com/apache/helix/pull/973#discussion_r423209636", "createdAt": "2020-05-11T17:42:19Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/model/TestLiveInstance.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.apache.helix.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.helix.task.TaskConstants;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestLiveInstance {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae50c1841cde6b68854fdff41d6092d9081a7f9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a50ed69ee00053cfd1c2168322d31cd1960679b5", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/a50ed69ee00053cfd1c2168322d31cd1960679b5", "committedDate": "2020-05-11T20:32:52Z", "message": "Extra changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b892090cc4ed50fe5d025bedaed20559f142fdae", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/b892090cc4ed50fe5d025bedaed20559f142fdae", "committedDate": "2020-05-12T04:53:32Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDg0OTkx", "url": "https://github.com/apache/helix/pull/973#pullrequestreview-410484991", "createdAt": "2020-05-12T23:10:20Z", "commit": {"oid": "b892090cc4ed50fe5d025bedaed20559f142fdae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879a221acc68b13dc2eb988e101ddb14ee6da927", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/879a221acc68b13dc2eb988e101ddb14ee6da927", "committedDate": "2020-05-12T23:34:07Z", "message": "Deprecate and add comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}