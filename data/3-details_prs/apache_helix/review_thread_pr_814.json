{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDQzNzQ4", "number": 814, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowMzo0N1rODjM2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxMjoxNFrODjNBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjM3Mzg0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowMzo0N1rOFu4Owg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTowNjo0NVrOFu8Nsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDA5OA==", "bodyText": "The parameter \"type\" is too generic. Let's make it more specific, \"stateType\" or even \"customizedStateType\". Because the type is \"String\" instead of a specific type, like \"CustomizedStateType\".  We may have different kinds of types, and by looking at \"type\", users do not know what it is referring to. Some existing example is \"propertyType\", and users know exactly what the type refers to.", "url": "https://github.com/apache/helix/pull/814#discussion_r384700098", "createdAt": "2020-02-26T19:03:47Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java", "diffHunk": "@@ -627,6 +630,33 @@ public PropertyKey externalView(String resourceName) {\n       return new PropertyKey(EXTERNALVIEW, ExternalView.class, _clusterName, resourceName);\n     }\n \n+    /**\n+     * Get a property key associated with all {@link CustomizedView}\n+     * @return {@link PropertyKey}\n+     */\n+    public PropertyKey customizedView() {\n+      return new PropertyKey(CUSTOMIZEDVIEW, CustomizedView.class, _clusterName);\n+    }\n+\n+    /**\n+     * Get a property key associated with an {@link CustomizedView} of a type\n+     * @param type\n+     * @return {@link PropertyKey}\n+     */\n+    public PropertyKey customizedView(String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NTM2Mw==", "bodyText": "Ok. I changed it to aggregationType.", "url": "https://github.com/apache/helix/pull/814#discussion_r384765363", "createdAt": "2020-02-26T21:06:45Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java", "diffHunk": "@@ -627,6 +630,33 @@ public PropertyKey externalView(String resourceName) {\n       return new PropertyKey(EXTERNALVIEW, ExternalView.class, _clusterName, resourceName);\n     }\n \n+    /**\n+     * Get a property key associated with all {@link CustomizedView}\n+     * @return {@link PropertyKey}\n+     */\n+    public PropertyKey customizedView() {\n+      return new PropertyKey(CUSTOMIZEDVIEW, CustomizedView.class, _clusterName);\n+    }\n+\n+    /**\n+     * Get a property key associated with an {@link CustomizedView} of a type\n+     * @param type\n+     * @return {@link PropertyKey}\n+     */\n+    public PropertyKey customizedView(String type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDA5OA=="}, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjM3NjAwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/api/listeners/CustomizedViewChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowNDozMlrOFu4QQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTowOTo0MVrOFu8Tig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDQ4Mw==", "bodyText": "Not a sentence.", "url": "https://github.com/apache/helix/pull/814#discussion_r384700483", "createdAt": "2020-02-26T19:04:32Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/api/listeners/CustomizedViewChangeListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.api.listeners;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.NotificationContext;\n+import org.apache.helix.model.CustomizedView;\n+\n+/**\n+ * Interface to implement to be notified of changes to the customized view", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2Njg1OA==", "bodyText": "Fixed.", "url": "https://github.com/apache/helix/pull/814#discussion_r384766858", "createdAt": "2020-02-26T21:09:41Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/api/listeners/CustomizedViewChangeListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.helix.api.listeners;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.NotificationContext;\n+import org.apache.helix.model.CustomizedView;\n+\n+/**\n+ * Interface to implement to be notified of changes to the customized view", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDQ4Mw=="}, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjM4MDg5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowNjoxM1rOFu4Tmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxMToyNVrOFu8W4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMTMzOA==", "bodyText": "Please see above comment. \"type\" is very unclear.", "url": "https://github.com/apache/helix/pull/814#discussion_r384701338", "createdAt": "2020-02-26T19:06:13Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.common.caches;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.PropertyType;\n+import org.apache.helix.model.CustomizedView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Cache to hold all CustomizedView of a specific type.\n+ */\n+public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n+\n+  protected Map<String, CustomizedView> _customizedViewMap;\n+  protected Map<String, CustomizedView> _customizedViewCache;\n+  protected String _clusterName;\n+  private PropertyType _propertyType;\n+  private String _type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzcxNQ==", "bodyText": "fixed.", "url": "https://github.com/apache/helix/pull/814#discussion_r384767715", "createdAt": "2020-02-26T21:11:25Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.common.caches;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.PropertyType;\n+import org.apache.helix.model.CustomizedView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Cache to hold all CustomizedView of a specific type.\n+ */\n+public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n+\n+  protected Map<String, CustomizedView> _customizedViewMap;\n+  protected Map<String, CustomizedView> _customizedViewCache;\n+  protected String _clusterName;\n+  private PropertyType _propertyType;\n+  private String _type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMTMzOA=="}, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQwMDE2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxMjoxNFrOFu4f8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMToyMVrOFu8sgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNDQ5Nw==", "bodyText": "What is the difference between cache and map, seems they are always updated at the same time. Then what's the purpose of having both?", "url": "https://github.com/apache/helix/pull/814#discussion_r384704497", "createdAt": "2020-02-26T19:12:14Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.common.caches;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.PropertyType;\n+import org.apache.helix.model.CustomizedView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Cache to hold all CustomizedView of a specific type.\n+ */\n+public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n+\n+  protected Map<String, CustomizedView> _customizedViewMap;\n+  protected Map<String, CustomizedView> _customizedViewCache;\n+  protected String _clusterName;\n+  private PropertyType _propertyType;\n+  private String _type;\n+\n+  public CustomizedViewCache(String clusterName, String type) {\n+    this(clusterName, PropertyType.CUSTOMIZEDVIEW, type);\n+  }\n+\n+  protected CustomizedViewCache(String clusterName, PropertyType propertyType, String type) {\n+    super(createDefaultControlContextProvider(clusterName));\n+    _clusterName = clusterName;\n+    _customizedViewMap = Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MzI0OA==", "bodyText": "If you look at the ExternalView cache, we are considering the same aspect here as well. I think, It it implemented for concurrency issues. Basically map is used to provide outputs and while refreshing map does not changes. However, we are looping through the Cache while we do refreshing.", "url": "https://github.com/apache/helix/pull/814#discussion_r384773248", "createdAt": "2020-02-26T21:21:21Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.apache.helix.common.caches;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.PropertyType;\n+import org.apache.helix.model.CustomizedView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Maps;\n+\n+/**\n+ * Cache to hold all CustomizedView of a specific type.\n+ */\n+public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n+\n+  protected Map<String, CustomizedView> _customizedViewMap;\n+  protected Map<String, CustomizedView> _customizedViewCache;\n+  protected String _clusterName;\n+  private PropertyType _propertyType;\n+  private String _type;\n+\n+  public CustomizedViewCache(String clusterName, String type) {\n+    this(clusterName, PropertyType.CUSTOMIZEDVIEW, type);\n+  }\n+\n+  protected CustomizedViewCache(String clusterName, PropertyType propertyType, String type) {\n+    super(createDefaultControlContextProvider(clusterName));\n+    _clusterName = clusterName;\n+    _customizedViewMap = Collections.emptyMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNDQ5Nw=="}, "originalCommit": {"oid": "3ab7848aba3eb323b22cf9fe4c2d769fc86ca8a1"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1685, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}