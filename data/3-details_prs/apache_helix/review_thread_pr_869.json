{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTAwNjMy", "number": 869, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1NjoxNVrODq95qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowODo1OFrODs0G6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzgwOTY4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1NjoxNVrOF7Cv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxODo0NTo0NFrOF9UHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NTMyMw==", "bodyText": "Please also add message in the assertion for easy understanding.", "url": "https://github.com/apache/helix/pull/869#discussion_r397455323", "createdAt": "2020-03-24T20:56:15Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(isRoutingTableUpdatedProperly);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzNjkzOQ==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/869#discussion_r399836939", "createdAt": "2020-03-29T18:45:44Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(isRoutingTableUpdatedProperly);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NTMyMw=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzkwMjU0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNDoxMlrOF7DpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxODo0ODowM1rOF9UIBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA4OQ==", "bodyText": "Do we still need this CustomizedViewCache file? I thought this would be the same as ExternalViewCache, which is deprecated. And we use PropertyCache instead in the place we need it. Please confirm with @jiajunwang .", "url": "https://github.com/apache/helix/pull/869#discussion_r397470089", "createdAt": "2020-03-24T21:24:12Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -19,32 +19,24 @@\n  * under the License.\n  */\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.helix.HelixDataAccessor;\n-import org.apache.helix.HelixException;\n import org.apache.helix.PropertyKey;\n import org.apache.helix.PropertyType;\n import org.apache.helix.model.CustomizedView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Maps;\n \n /**\n  * Cache to hold all CustomizedView of a specific type.\n  */\n public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n \n-  protected Map<String, CustomizedView> _customizedViewMap;\n-  protected Map<String, CustomizedView> _customizedViewCache;\n+  private final PropertyCache<CustomizedView> _customizedViewCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzAwMA==", "bodyText": "I agree. There should be no extra logic you need to add in addition, once you are using PropertyCache.", "url": "https://github.com/apache/helix/pull/869#discussion_r398797000", "createdAt": "2020-03-26T18:25:18Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -19,32 +19,24 @@\n  * under the License.\n  */\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.helix.HelixDataAccessor;\n-import org.apache.helix.HelixException;\n import org.apache.helix.PropertyKey;\n import org.apache.helix.PropertyType;\n import org.apache.helix.model.CustomizedView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Maps;\n \n /**\n  * Cache to hold all CustomizedView of a specific type.\n  */\n public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n \n-  protected Map<String, CustomizedView> _customizedViewMap;\n-  protected Map<String, CustomizedView> _customizedViewCache;\n+  private final PropertyCache<CustomizedView> _customizedViewCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA4OQ=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzNzE4OQ==", "bodyText": "I chatted with Meng about this. Since both of our PRs has been implemented based on this file, I think it makes more sense to have separate file for customizedViewCache and have it implemented based on PropertyCache as discussed.", "url": "https://github.com/apache/helix/pull/869#discussion_r399837189", "createdAt": "2020-03-29T18:48:03Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -19,32 +19,24 @@\n  * under the License.\n  */\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.helix.HelixDataAccessor;\n-import org.apache.helix.HelixException;\n import org.apache.helix.PropertyKey;\n import org.apache.helix.PropertyType;\n import org.apache.helix.model.CustomizedView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Maps;\n \n /**\n  * Cache to hold all CustomizedView of a specific type.\n  */\n public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n \n-  protected Map<String, CustomizedView> _customizedViewMap;\n-  protected Map<String, CustomizedView> _customizedViewCache;\n+  private final PropertyCache<CustomizedView> _customizedViewCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA4OQ=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjMwODY2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNTo1OFrOF8Uqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxODo1ODozNlrOF9UM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzQyMg==", "bodyText": "nit, return false directly here.", "url": "https://github.com/apache/helix/pull/869#discussion_r398797422", "createdAt": "2020-03-26T18:25:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzODQzNg==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/869#discussion_r399838436", "createdAt": "2020-03-29T18:58:36Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzQyMg=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjMxMTQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNjozOFrOF8UsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxODo1ODo0MVrOF9UM-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg2NA==", "bodyText": "Will 20 seconds be too long for this check?", "url": "https://github.com/apache/helix/pull/869#discussion_r398797864", "createdAt": "2020-03-26T18:26:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzODQ1OA==", "bodyText": "Added WAIT_DURATION of 5 second to this test and use it here.", "url": "https://github.com/apache/helix/pull/869#discussion_r399838458", "createdAt": "2020-03-29T18:58:41Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg2NA=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzE3Njc0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowODo1OFrOF94Mxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozMzo1M1rOF-ABnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyODIzMQ==", "bodyText": "This is the propertyCache log:\nLogUtil.logInfo(LOG, genEventInfo(),\nString.format(\"Refreshed %s property %s took %s ms. Selective: %s\", _objMap.size(),\n_propertyDescription, System.currentTimeMillis() - start, _useSelectiveUpdate));\nI think it is overlapping. So there is no lead to log here.", "url": "https://github.com/apache/helix/pull/869#discussion_r400428231", "createdAt": "2020-03-30T19:08:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -71,87 +77,18 @@ protected CustomizedViewCache(String clusterName, PropertyType propertyType, Str\n    */\n   public void refresh(HelixDataAccessor accessor) {\n     long startTime = System.currentTimeMillis();\n-    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n-\n-    List<String> resources = accessor.getChildNames(customizedViewsKey(keyBuilder));\n-\n-    for (String resource : resources) {\n-      currentPropertyKeys.add(customizedViewKey(keyBuilder, resource));\n-    }\n-\n-    Set<PropertyKey> cachedKeys = new HashSet<>();\n-    Map<PropertyKey, CustomizedView> cachedCustomizedViewMap = Maps.newHashMap();\n-    for (String resource : _customizedViewCache.keySet()) {\n-      PropertyKey key = customizedViewKey(keyBuilder, resource);\n-      cachedKeys.add(key);\n-      cachedCustomizedViewMap.put(key, _customizedViewCache.get(resource));\n-    }\n-    cachedKeys.retainAll(currentPropertyKeys);\n-\n-    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n-    reloadKeys.removeAll(cachedKeys);\n-\n-    Map<PropertyKey, CustomizedView> updatedMap =\n-        refreshProperties(accessor, reloadKeys, new ArrayList<>(cachedKeys),\n-            cachedCustomizedViewMap, new HashSet<>());\n-\n-    Map<String, CustomizedView> newCustomizedViewMap = Maps.newHashMap();\n-    for (CustomizedView customizedView : updatedMap.values()) {\n-      newCustomizedViewMap.put(customizedView.getResourceName(), customizedView);\n-    }\n-\n-    _customizedViewCache = new HashMap<>(newCustomizedViewMap);\n-    _customizedViewMap = new HashMap<>(newCustomizedViewMap);\n-\n+    _customizedViewCache.refresh(accessor);\n     long endTime = System.currentTimeMillis();\n-    LOG.info(\"Refresh \" + _customizedViewMap.size() + \" CustomizedViews of type \" + _customizedStateType\n-        + \" for cluster \" + _clusterName + \", took \" + (endTime - startTime) + \" ms\");\n-  }\n-\n-  private PropertyKey customizedViewsKey(PropertyKey.Builder keyBuilder) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)){\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n-  }\n \n-  private PropertyKey customizedViewKey(PropertyKey.Builder keyBuilder, String resource) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)) {\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType, resource);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n+    LOG.info(\"Refresh \" + _customizedViewCache.getPropertyMap().size() + \" CustomizedViews of type \" + _customizedStateType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9baedd8c438fd05c77f9c240d510b6dae0873b4e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NjQ0NA==", "bodyText": "Done. Thanks.", "url": "https://github.com/apache/helix/pull/869#discussion_r400556444", "createdAt": "2020-03-30T23:33:53Z", "author": {"login": "alirezazamani"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -71,87 +77,18 @@ protected CustomizedViewCache(String clusterName, PropertyType propertyType, Str\n    */\n   public void refresh(HelixDataAccessor accessor) {\n     long startTime = System.currentTimeMillis();\n-    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n-\n-    List<String> resources = accessor.getChildNames(customizedViewsKey(keyBuilder));\n-\n-    for (String resource : resources) {\n-      currentPropertyKeys.add(customizedViewKey(keyBuilder, resource));\n-    }\n-\n-    Set<PropertyKey> cachedKeys = new HashSet<>();\n-    Map<PropertyKey, CustomizedView> cachedCustomizedViewMap = Maps.newHashMap();\n-    for (String resource : _customizedViewCache.keySet()) {\n-      PropertyKey key = customizedViewKey(keyBuilder, resource);\n-      cachedKeys.add(key);\n-      cachedCustomizedViewMap.put(key, _customizedViewCache.get(resource));\n-    }\n-    cachedKeys.retainAll(currentPropertyKeys);\n-\n-    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n-    reloadKeys.removeAll(cachedKeys);\n-\n-    Map<PropertyKey, CustomizedView> updatedMap =\n-        refreshProperties(accessor, reloadKeys, new ArrayList<>(cachedKeys),\n-            cachedCustomizedViewMap, new HashSet<>());\n-\n-    Map<String, CustomizedView> newCustomizedViewMap = Maps.newHashMap();\n-    for (CustomizedView customizedView : updatedMap.values()) {\n-      newCustomizedViewMap.put(customizedView.getResourceName(), customizedView);\n-    }\n-\n-    _customizedViewCache = new HashMap<>(newCustomizedViewMap);\n-    _customizedViewMap = new HashMap<>(newCustomizedViewMap);\n-\n+    _customizedViewCache.refresh(accessor);\n     long endTime = System.currentTimeMillis();\n-    LOG.info(\"Refresh \" + _customizedViewMap.size() + \" CustomizedViews of type \" + _customizedStateType\n-        + \" for cluster \" + _clusterName + \", took \" + (endTime - startTime) + \" ms\");\n-  }\n-\n-  private PropertyKey customizedViewsKey(PropertyKey.Builder keyBuilder) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)){\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n-  }\n \n-  private PropertyKey customizedViewKey(PropertyKey.Builder keyBuilder, String resource) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)) {\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType, resource);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n+    LOG.info(\"Refresh \" + _customizedViewCache.getPropertyMap().size() + \" CustomizedViews of type \" + _customizedStateType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyODIzMQ=="}, "originalCommit": {"oid": "9baedd8c438fd05c77f9c240d510b6dae0873b4e"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1355, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}