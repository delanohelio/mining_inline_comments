{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzM5NDE4", "number": 878, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NzozOFrODmcG-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NzoxM1rODm3hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjMzMDE4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTo0NzozOFrOFz28Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTozNzowOVrOFz6PPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTg2Ng==", "bodyText": "I see a lot of duplicate code here -\ncould we just create an array of all ResourceConfig.ResourceConfigPropertys and just copy the fields?", "url": "https://github.com/apache/helix/pull/878#discussion_r389921866", "createdAt": "2020-03-09T19:47:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,89 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    // Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+    // 1. The fields shall have exactly the same meaning.\n+    // 2. The value shall be fully compatible, no additional calculation involved.\n+    // 3. Resource Config items have a high priority.\n+\n+    // Return a newly constructed resource config to avoid the original value be modified.\n+    ResourceConfig mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n+          idealState.getInstanceGroupTag());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n+              idealState.getMaxPartitionsPerInstance());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.NUM_PARTITIONS.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfigProperty.NUM_PARTITIONS.name(), idealState.getNumPartitions());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n+              idealState.getStateModelDefRef());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n+              idealState.getStateModelFactoryName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n+          idealState.getReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name())) {\n+      mergedZNRecord.setIntField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n+          idealState.getMinActiveReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name())) {\n+      mergedZNRecord.setBooleanField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n+          idealState.isEnabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n+              idealState.getResourceGroupName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n+          idealState.getResourceType());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n+              idealState.isExternalViewDisabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n+              idealState.isDelayRebalanceEnabled());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NTg2OA==", "bodyText": "I tried.\n\nAlthough the field keys are the same, the get logic is different. If I copypaste directly based on the field names, I might change the IS logic. For example, getReplicas(). It would be safer that I call the explicit IdealState get methods.\nUnfortunately, this will lead to a similar code. But if we take this as a temporary backward compatible workaround, I think it is acceptable. For the correctness.\nThe 2 lists are not exactly the same. DELAY_REBALANCE_DISABLED in IS and DELAY_REBALANCE_ENABLED in the ResourceConfig.\n\nTo reduce this complex, I propose to add some setXXXIfAbsent in the ZNRecord class. Will update soon.", "url": "https://github.com/apache/helix/pull/878#discussion_r389975868", "createdAt": "2020-03-09T21:37:09Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,89 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    // Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+    // 1. The fields shall have exactly the same meaning.\n+    // 2. The value shall be fully compatible, no additional calculation involved.\n+    // 3. Resource Config items have a high priority.\n+\n+    // Return a newly constructed resource config to avoid the original value be modified.\n+    ResourceConfig mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n+          idealState.getInstanceGroupTag());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n+              idealState.getMaxPartitionsPerInstance());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.NUM_PARTITIONS.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfigProperty.NUM_PARTITIONS.name(), idealState.getNumPartitions());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n+              idealState.getStateModelDefRef());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n+              idealState.getStateModelFactoryName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n+          idealState.getReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name())) {\n+      mergedZNRecord.setIntField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n+          idealState.getMinActiveReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name())) {\n+      mergedZNRecord.setBooleanField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n+          idealState.isEnabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n+              idealState.getResourceGroupName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n+          idealState.getResourceType());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n+              idealState.isExternalViewDisabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n+              idealState.isDelayRebalanceEnabled());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTg2Ng=="}, "originalCommit": {"oid": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDgyMjQzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NzoxM1rOF0iNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0ODo0MVrOF0iPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDY1OQ==", "bodyText": "Can we make a list of constants for these necessary field and use a loop to do the merge instead of have these code?", "url": "https://github.com/apache/helix/pull/878#discussion_r390630659", "createdAt": "2020-03-10T21:47:13Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,72 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   *\n+   * Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+   *  1. The fields shall have exactly the same meaning.\n+   *  2. The value shall be fully compatible, no additional calculation involved.\n+   *  3. Resource Config items have a high priority.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    if (idealState == null) {\n+      return resourceConfig;\n+    }\n+    ResourceConfig mergedResourceConfig;\n+    if (resourceConfig != null) {\n+      if (!resourceConfig.getResourceName().equals(idealState.getResourceName())) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Cannot merge the IdealState of resource %s with the ResourceConfig of resource %s\",\n+            resourceConfig.getResourceName(), idealState.getResourceName()));\n+      }\n+      // Copy the resource config to avoid the original value being modified unexpectedly.\n+      mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    } else {\n+      // If no resource config specified, construct one based on the Idealstate.\n+      mergedResourceConfig = new ResourceConfig(idealState.getResourceName());\n+    }\n+    // Fill the compatible Idealstate fields to the ResourceConfig if possible.\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMTM0NQ==", "bodyText": "Please check my reply to Hunter's question. The get methods are different.", "url": "https://github.com/apache/helix/pull/878#discussion_r390631345", "createdAt": "2020-03-10T21:48:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,72 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   *\n+   * Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+   *  1. The fields shall have exactly the same meaning.\n+   *  2. The value shall be fully compatible, no additional calculation involved.\n+   *  3. Resource Config items have a high priority.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    if (idealState == null) {\n+      return resourceConfig;\n+    }\n+    ResourceConfig mergedResourceConfig;\n+    if (resourceConfig != null) {\n+      if (!resourceConfig.getResourceName().equals(idealState.getResourceName())) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Cannot merge the IdealState of resource %s with the ResourceConfig of resource %s\",\n+            resourceConfig.getResourceName(), idealState.getResourceName()));\n+      }\n+      // Copy the resource config to avoid the original value being modified unexpectedly.\n+      mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    } else {\n+      // If no resource config specified, construct one based on the Idealstate.\n+      mergedResourceConfig = new ResourceConfig(idealState.getResourceName());\n+    }\n+    // Fill the compatible Idealstate fields to the ResourceConfig if possible.\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDY1OQ=="}, "originalCommit": {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1362, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}