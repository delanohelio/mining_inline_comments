{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjExNzg2", "number": 1154, "title": "Add initial callback when adding routing table listener", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1090\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThis PR adds an initial callback when user adds a listener to Helix routing table. This initial callback will ensure uses are able to perform operations, e.g. read routing table data or some other actions, immediately after they add the listener instead of waiting for the first data change to trigger the callback.\nTests\n\n The following tests are modified for this issue:\n\nTestRoutingTableProvider.java\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nhelix-core:\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestResourceChangeDetector.testResetSnapshots:431 \u00bb ThreadTimeout Method org.t...\n[INFO]\n[ERROR] Tests run: 1209, Failures: 1, Errors: 0, Skipped: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:12 h\n[INFO] Finished at: 2020-09-24T14:47:28-07:00\n[INFO] ------------------------------------------------------------------------\nLocal test passed.\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-15T16:59:23Z", "url": "https://github.com/apache/helix/pull/1154", "merged": true, "mergeCommit": {"oid": "ea6bca2f26093af0a8ec4d94f25692040537d7d7"}, "closed": true, "closedAt": "2020-09-25T18:20:32Z", "author": {"login": "zhangmeng916"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1N1SHABqjM1NDk1MDQzMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMKYGXAH2gAyNDQ5NjExNzg2OmU5MTc4YWIwYzUyYjFmMDliYzgzYWU3NTgwMTk3MWUzYWVkNDM5MGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c417b5dd9bd612785fe6a7ad8d599bf3e7583e45", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/c417b5dd9bd612785fe6a7ad8d599bf3e7583e45", "committedDate": "2020-07-15T16:38:20Z", "message": "add init to routing table provider"}, "afterCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f7ade9c1aec3076fd835743ff3caed7bb488a436", "committedDate": "2020-07-15T16:50:24Z", "message": "add init to routing table listener"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDc2NzA1", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-450076705", "createdAt": "2020-07-16T17:46:45Z", "commit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Njo0NVrOGy1yCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Njo0NVrOGy1yCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw==", "bodyText": "This is an initial call when adding listener. The only concern is returning empty data should be a good signal for user? This changes behavior. Some users are relying on the snapshot content. Shall we have a different API that give the option to let user choose it?", "url": "https://github.com/apache/helix/pull/1154#discussion_r455963147", "createdAt": "2020-07-16T17:46:45Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -413,6 +413,31 @@ public void addRoutingTableChangeListener(\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (_sourceDataTypeMap.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTEyODkx", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-450112891", "createdAt": "2020-07-16T18:37:00Z", "commit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODozNzowMFrOGy3nNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0MTowM1rOGy3wKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MzE0MA==", "bodyText": "FYI, in Helix Manager, adding the listener will cause the listener to get a \"free\" callback when the callback handler is init. So the requirement here is doing the same for router.\nGiven that saying, if the routing table has not been updated (maybe during the reading) then we return an empty snapshot. In this case, if the router still notifies the listener once the update is done, then we are still good. However, based on the code here, I think we might have a race condition that this notification could be sent later than the proper one. Then user would get the wrong information.\nSo we need a concurrency control here.", "url": "https://github.com/apache/helix/pull/1154#discussion_r455993140", "createdAt": "2020-07-16T18:37:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -413,6 +413,31 @@ public void addRoutingTableChangeListener(\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (_sourceDataTypeMap.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}, "originalCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA==", "bodyText": "As Junkai mentioned, I think we need a new interface for the listeners anyway.\nThe current one won't tell the provider which type the listener wants to listen to. So I think we just add a new API so as to add the listeners with the right type.\nIn this case, the old API needs to be deprecated and if user add their listen using this API, we shall just assign it to all the valid types.", "url": "https://github.com/apache/helix/pull/1154#discussion_r455995434", "createdAt": "2020-07-16T18:41:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -413,6 +413,31 @@ public void addRoutingTableChangeListener(\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (_sourceDataTypeMap.isEmpty()) {\n+      routingTableChangeListener.onRoutingTableChange(getRoutingTableSnapshot(), context);\n+    } else {\n+      for (PropertyType propertyType : _sourceDataTypeMap.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f7ade9c1aec3076fd835743ff3caed7bb488a436", "committedDate": "2020-07-15T16:50:24Z", "message": "add init to routing table listener"}, "afterCommit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/aec0bc96ae40996a71b313968666b07d677ac8ad", "committedDate": "2020-07-19T18:49:59Z", "message": "keep backward compatibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzYwMTA1", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-451360105", "createdAt": "2020-07-20T07:31:43Z", "commit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozMTo0NFrOGz9Hqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozMTo0NFrOGz9Hqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng==", "bodyText": "If _sourceDataTypeMap  is not properly initialized in the constructor (if this method gets called before the object is fully initialized), this might throw an NPE. I think we should add a null check here on the map. This will guard against potential concurrency issues (that would be pretty hard to debug but might happen regardless).", "url": "https://github.com/apache/helix/pull/1154#discussion_r457131946", "createdAt": "2020-07-20T07:31:44Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (doInit) {\n+      if (_sourceDataTypeMap.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzYyMzY2", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-451362366", "createdAt": "2020-07-20T07:35:20Z", "commit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNToyMVrOGz9Q1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNToyMVrOGz9Q1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDI5NQ==", "bodyText": "This is a high-level question. Have we considered doing init as the default behavior? Here are the reasons I can think off the top of my head:\n\n\nIt doesn't hurt to init (what are the bad side effects of reading in the beginning? If the user wishes to add a listener, that means the user is ready to read and be notified). In other words, I can't think of any negative consequences of this behavior change or any potential backward-compatibility issues that might break things.\n\n\nThis greatly reduces verbosity in the code. Simple is better.", "url": "https://github.com/apache/helix/pull/1154#discussion_r457134295", "createdAt": "2020-07-20T07:35:21Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTIxOTc4", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-450121978", "createdAt": "2020-07-16T18:50:06Z", "commit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo1MDowN1rOGy4DOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTo0ODowMVrOG2DieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDMxMg==", "bodyText": "Nit, no need to have ()", "url": "https://github.com/apache/helix/pull/1154#discussion_r456000312", "createdAt": "2020-07-16T18:50:07Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,18 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMTI3Mw==", "bodyText": "Assert.assertTrue? So no need to import AssertJUnit.", "url": "https://github.com/apache/helix/pull/1154#discussion_r456001273", "createdAt": "2020-07-16T18:51:48Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,18 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()\n+  public void testInvocation() throws Exception {\n+    MockRoutingTableChangeListener routingTableChangeListener =\n+        new TestRoutingTableProvider().new MockRoutingTableChangeListener();\n+    _routingTableProvider_default.addRoutingTableChangeListener(routingTableChangeListener, null);\n+\n+    // Initial add listener should trigger the first execution of the\n+    // listener callbacks\n+    AssertJUnit.assertTrue(routingTableChangeListener.routingTableChangeReceived);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyMjA0MQ==", "bodyText": "new TestRoutingTableProvider() is unnecessary?", "url": "https://github.com/apache/helix/pull/1154#discussion_r459322041", "createdAt": "2020-07-23T09:24:51Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,19 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()\n+  public void testInvocation() throws Exception {\n+    MockRoutingTableChangeListener routingTableChangeListener =\n+        new TestRoutingTableProvider().new MockRoutingTableChangeListener();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e127d30cb83ec095fffd7b8cf43945d5ea710b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzMTc1Mw==", "bodyText": "Just two cents: maybe I am wrong but I don't think it could happen: if this method gets called before the object is fully initialized. The object should already be fully initialized when we are able to call this method: table.addRoutingTableChangeListener().\nIt is a still good point to check null. By checking the code, I think the only situation when _sourceDataTypeMap is null is, constructor public RoutingTableProvider(HelixManager helixManager, Map<PropertyType, List<String>> sourceDataTypeMap, boolean isPeriodicRefreshEnabled, long periodRefreshInterval) is directly called and sourceDataTypeMap is passed as null.\nIn this case, we should validate the arguments in the constructor instead of in this method: there are many other places that call _sourceDataMap. It is not a good idea to do every null check for class variables in each method. Since we already have validateSourceDataTypeMap() but it doesn't check null for validateSourceDataTypeMap, I think we should add the check to validateSourceDataTypeMap() instead of here.\nif (sourceDataTypeMap == null) {\n    throw new IllegalArgumentException();\n}", "url": "https://github.com/apache/helix/pull/1154#discussion_r459331753", "createdAt": "2020-07-23T09:43:23Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (doInit) {\n+      if (_sourceDataTypeMap.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, "originalCommit": {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzNDI2NA==", "bodyText": "Maybe also add doInit value in the log?", "url": "https://github.com/apache/helix/pull/1154#discussion_r459334264", "createdAt": "2020-07-23T09:48:01Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (doInit && _sourceDataTypeMap != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e127d30cb83ec095fffd7b8cf43945d5ea710b"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08e127d30cb83ec095fffd7b8cf43945d5ea710b", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/08e127d30cb83ec095fffd7b8cf43945d5ea710b", "committedDate": "2020-07-20T16:01:31Z", "message": "null checking"}, "afterCommit": {"oid": "b0f99b3b0f435b18398e4fd229284146255808cc", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/b0f99b3b0f435b18398e4fd229284146255808cc", "committedDate": "2020-07-27T05:05:08Z", "message": "fix comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a60e6ece7053fdb75cd8fc28e5310767a957bb03", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/a60e6ece7053fdb75cd8fc28e5310767a957bb03", "committedDate": "2020-08-03T16:29:17Z", "message": "move null checking"}, "afterCommit": {"oid": "b02ee6345f8b0fa197085315fc9673edfe351931", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/b02ee6345f8b0fa197085315fc9673edfe351931", "committedDate": "2020-09-24T00:19:42Z", "message": "add refresh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTA2NTg4", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-495906588", "createdAt": "2020-09-24T19:57:34Z", "commit": {"oid": "b02ee6345f8b0fa197085315fc9673edfe351931"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1NzozNFrOHXqgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDowNTo0MlrOHXqwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY0Mg==", "bodyText": "nit, will \"doTriggerCallback\" easier to read from the users' perspective?", "url": "https://github.com/apache/helix/pull/1154#discussion_r494575642", "createdAt": "2020-09-24T19:57:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b02ee6345f8b0fa197085315fc9673edfe351931"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3OTgyOA==", "bodyText": "nit, we can split \"The doInit value of this listener is {}\" part. And move it into the \"if\" code block below. Might be cleaner.", "url": "https://github.com/apache/helix/pull/1154#discussion_r494579828", "createdAt": "2020-09-24T20:05:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\n+        \"Attach RoutingTableProviderChangeListener {}. The doInit value of this listener is {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b02ee6345f8b0fa197085315fc9673edfe351931"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6b36ad264a82409ddda814d4d6aa9041577950", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/be6b36ad264a82409ddda814d4d6aa9041577950", "committedDate": "2020-09-24T20:31:50Z", "message": "add init to routing table listener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c65731a9dbfc8e4586c6373c281c50f3d0befeb", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/7c65731a9dbfc8e4586c6373c281c50f3d0befeb", "committedDate": "2020-09-24T20:31:50Z", "message": "keep backward compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74baf8d224fe2f9e7defd11681cff8b0878386ae", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/74baf8d224fe2f9e7defd11681cff8b0878386ae", "committedDate": "2020-09-24T20:31:50Z", "message": "null checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f18aa14a44e0ab700278d9c7716137c2dd3cc923", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/f18aa14a44e0ab700278d9c7716137c2dd3cc923", "committedDate": "2020-09-24T20:31:50Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9f279f2ca590f08ea67f86776b80cdc72941dd", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/4f9f279f2ca590f08ea67f86776b80cdc72941dd", "committedDate": "2020-09-24T20:31:50Z", "message": "move null checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295f712bb1465cd716f151709103cab559f95da4", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/295f712bb1465cd716f151709103cab559f95da4", "committedDate": "2020-09-24T20:31:50Z", "message": "add refresh"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03f96696b85b5f27749b88b699266863a76ef269", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/03f96696b85b5f27749b88b699266863a76ef269", "committedDate": "2020-09-24T20:30:27Z", "message": "fix name"}, "afterCommit": {"oid": "1262d044678f4713f1fca987f313a28ce8a2403c", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/1262d044678f4713f1fca987f313a28ce8a2403c", "committedDate": "2020-09-24T20:31:50Z", "message": "fix name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c62e640a88552926006b4db742409fb7ff4aea", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/53c62e640a88552926006b4db742409fb7ff4aea", "committedDate": "2020-09-24T20:36:52Z", "message": "fix name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1262d044678f4713f1fca987f313a28ce8a2403c", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/1262d044678f4713f1fca987f313a28ce8a2403c", "committedDate": "2020-09-24T20:31:50Z", "message": "fix name"}, "afterCommit": {"oid": "53c62e640a88552926006b4db742409fb7ff4aea", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/53c62e640a88552926006b4db742409fb7ff4aea", "committedDate": "2020-09-24T20:36:52Z", "message": "fix name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDI2NDgw", "url": "https://github.com/apache/helix/pull/1154#pullrequestreview-496026480", "createdAt": "2020-09-25T00:02:42Z", "commit": {"oid": "53c62e640a88552926006b4db742409fb7ff4aea"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowMjo0M1rOHXwiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowMjo0N1rOHXwibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDUyMw==", "bodyText": "What I meant is that we can log something like \"Force triggering a callback for the new listener\" here. So the log does not care about the name of the parameter \"isTriggerCallback\".", "url": "https://github.com/apache/helix/pull/1154#discussion_r494674523", "createdAt": "2020-09-25T00:02:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param isTriggerCallback whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context,\n+      boolean isTriggerCallback) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\"Attach RoutingTableProviderChangeListener {}.\",\n+        routingTableChangeListener.getClass().getName(), isTriggerCallback);\n+    if (isTriggerCallback) {\n+      logger.info(\"The isTriggerCallback value for the listener is true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c62e640a88552926006b4db742409fb7ff4aea"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDU0MA==", "bodyText": "nit, remove the isTriggerCallback that is not used in the log.", "url": "https://github.com/apache/helix/pull/1154#discussion_r494674540", "createdAt": "2020-09-25T00:02:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param isTriggerCallback whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context,\n+      boolean isTriggerCallback) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\"Attach RoutingTableProviderChangeListener {}.\",\n+        routingTableChangeListener.getClass().getName(), isTriggerCallback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53c62e640a88552926006b4db742409fb7ff4aea"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9178ab0c52b1f09bc83ae75801971e3aed4390b", "author": {"user": {"login": "zhangmeng916", "name": "Meng Zhang"}}, "url": "https://github.com/apache/helix/commit/e9178ab0c52b1f09bc83ae75801971e3aed4390b", "committedDate": "2020-09-25T00:09:42Z", "message": "fix log"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}