{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzE5MzQ2", "number": 1589, "title": "Reduce lock contention in CallbackHandler.enqueueTask", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n#1590 - Lock contention in CallbackHandler.enqueueTask\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nDuring investigation and debugging, we found that a lot time is spent on waiting for the synchronized in CallbackHandler.enqueueTask.\npublic void enqueueTask(NotificationContext changeContext) throws Exception {\n    // async mode only applicable to CALLBACK from ZK, During INIT and FINALIZE invoke the\n    // callback's immediately.\n    if (_batchModeEnabled && changeContext.getType() == NotificationContext.Type.CALLBACK) {\n       .....\n        synchronized (this) {                            <<<<<---------\n          if (_batchCallbackProcessor != null) {\n            _batchCallbackProcessor.queueEvent(changeContext.getType(), changeContext);\n          } else {\n      }\n\nThis PR removes this lock and uses AtomicReference instead.\nTests\n\n The following tests are written for this issue:\n\nNA\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,189.07 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:26 h\n[INFO] Finished at: 2020-12-09T19:10:21-08:00\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-12-10T22:55:12Z", "url": "https://github.com/apache/helix/pull/1589", "merged": true, "mergeCommit": {"oid": "32388408faeee80b5eacaaf6da1306abb86ed0c7"}, "closed": true, "closedAt": "2020-12-19T00:40:30Z", "author": {"login": "xyuanlu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlSAY8gFqTU1MDY2NjM0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm5aQ5ABqjQxMjI4NTc4MjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjY2MzQw", "url": "https://github.com/apache/helix/pull/1589#pullrequestreview-550666340", "createdAt": "2020-12-12T00:43:37Z", "commit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0MzozOFrOIEX-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMToxMDoyNFrOIEYXbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODEwNQ==", "bodyText": "Should be the reverse way? I guess.\nCallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();", "url": "https://github.com/apache/helix/pull/1589#discussion_r541458105", "createdAt": "2020-12-12T00:43:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -319,13 +320,12 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        synchronized (this) {\n-          if (_batchCallbackProcessor != null) {\n-            _batchCallbackProcessor.queueEvent(changeContext.getType(), changeContext);\n-          } else {\n-            throw new HelixException(\n-                \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n-          }\n+        CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTAzNg==", "bodyText": "Just do getAndSet(null). Then shutdown the returned value.", "url": "https://github.com/apache/helix/pull/1589#discussion_r541459036", "createdAt": "2020-12-12T00:47:18Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -766,16 +769,16 @@ void reset(boolean isShutdown) {\n         isShutdown);\n     try {\n       _ready = false;\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MTgyOA==", "bodyText": "This is not necessary if the start() is done after insertion, right?\nIf we change the design due to the previous comment, then it is a different story.", "url": "https://github.com/apache/helix/pull/1589#discussion_r541461828", "createdAt": "2020-12-12T00:59:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -643,14 +643,17 @@ public void init() {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n-          _batchCallbackProcessor.resetEventQueue();\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.resetEventQueue();\n         } else {\n-          _batchCallbackProcessor = new CallbackProcessor(this);\n-          _batchCallbackProcessor.start();\n+          callbackProcessorRef = new CallbackProcessor(this);\n+          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n+            callbackProcessorRef.start();\n+          } else {\n+            callbackProcessorRef.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDE0OQ==", "bodyText": "Consider the following operation order:\n\ninit() and reset() is called at the same time.\nIn init(), the code reaches line 652, but not start yet.\nAt the same time, in reset(), code reaches line 776, and tries to shutdown the thread. But it cannot, since the thread has not been started yet. Note, in java doc, \"Interrupting a thread that is not alive need not have any effect.\"\nThen the code in init() try to start, the thread is started.\n\nWe have a leaked thread, eventually.", "url": "https://github.com/apache/helix/pull/1589#discussion_r541464149", "createdAt": "2020-12-12T01:09:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -643,14 +643,17 @@ public void init() {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n-          _batchCallbackProcessor.resetEventQueue();\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.resetEventQueue();\n         } else {\n-          _batchCallbackProcessor = new CallbackProcessor(this);\n-          _batchCallbackProcessor.start();\n+          callbackProcessorRef = new CallbackProcessor(this);\n+          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n+            callbackProcessorRef.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDQzMQ==", "bodyText": "I think you will need to start and then insert it into the atomic object.\nBut please revisit and see if there are any other ways.", "url": "https://github.com/apache/helix/pull/1589#discussion_r541464431", "createdAt": "2020-12-12T01:10:24Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -643,14 +643,17 @@ public void init() {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n-          _batchCallbackProcessor.resetEventQueue();\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.resetEventQueue();\n         } else {\n-          _batchCallbackProcessor = new CallbackProcessor(this);\n-          _batchCallbackProcessor.start();\n+          callbackProcessorRef = new CallbackProcessor(this);\n+          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n+            callbackProcessorRef.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDE0OQ=="}, "originalCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87162ebb70fb30e9d5d24659aa00167b62556ab6", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/87162ebb70fb30e9d5d24659aa00167b62556ab6", "committedDate": "2020-12-10T22:51:30Z", "message": "add shut down for duplicated CallbackProcessor thread"}, "afterCommit": {"oid": "2a918b63a6522acd85905662882f812195ce574c", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/2a918b63a6522acd85905662882f812195ce574c", "committedDate": "2020-12-14T22:11:40Z", "message": "addredd comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a918b63a6522acd85905662882f812195ce574c", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/2a918b63a6522acd85905662882f812195ce574c", "committedDate": "2020-12-14T22:11:40Z", "message": "addredd comment"}, "afterCommit": {"oid": "b0187965ac3aec5541ee847906ee53a8169e02a1", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/b0187965ac3aec5541ee847906ee53a8169e02a1", "committedDate": "2020-12-15T19:53:07Z", "message": "addredd comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMjcxOTI2", "url": "https://github.com/apache/helix/pull/1589#pullrequestreview-553271926", "createdAt": "2020-12-16T01:41:54Z", "commit": {"oid": "b0187965ac3aec5541ee847906ee53a8169e02a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo0MTo1NVrOIGnzag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo0NDoyNFrOIGn3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDUwNg==", "bodyText": "nit, extra ;", "url": "https://github.com/apache/helix/pull/1589#discussion_r543814506", "createdAt": "2020-12-16T01:41:55Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -133,7 +134,7 @@\n   private HelixCallbackMonitor _monitor;\n \n   // TODO: make this be per _manager or per _listener instaed of per callbackHandler -- Lei\n-  private CallbackProcessor _batchCallbackProcessor;\n+  private AtomicReference<CallbackProcessor> _batchCallbackProcessorRef = new AtomicReference<>();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0187965ac3aec5541ee847906ee53a8169e02a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNTQ3MA==", "bodyText": "Not necessarily wrong behavior. But this may change the behavior.\nThe older logic will throw an exception if the event won't be processed. But with the new code, it is possible that we add the event to a closed processor without throwing exception?", "url": "https://github.com/apache/helix/pull/1589#discussion_r543815470", "createdAt": "2020-12-16T01:44:24Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -319,13 +320,12 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        synchronized (this) {\n-          if (_batchCallbackProcessor != null) {\n-            _batchCallbackProcessor.queueEvent(changeContext.getType(), changeContext);\n-          } else {\n-            throw new HelixException(\n-                \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n-          }\n+        CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0187965ac3aec5541ee847906ee53a8169e02a1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjE2MTk4", "url": "https://github.com/apache/helix/pull/1589#pullrequestreview-554216198", "createdAt": "2020-12-17T01:33:44Z", "commit": {"oid": "af0759e28974019cc82acf287b6bf3d4aefe3d91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "947f13a5301f927d12a2ba8de916571761ea239b", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/947f13a5301f927d12a2ba8de916571761ea239b", "committedDate": "2020-12-17T01:38:53Z", "message": "reduce lock scope of _batchCallbackProcessor in CallbackHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98947a3c75f50d7d6ba5e85482df1bd0a6a7bcbd", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/98947a3c75f50d7d6ba5e85482df1bd0a6a7bcbd", "committedDate": "2020-12-17T01:38:53Z", "message": "use atomic ref"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf7e60119e384397457005a6bc9962493bac5d6", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/cbf7e60119e384397457005a6bc9962493bac5d6", "committedDate": "2020-12-17T01:38:53Z", "message": "use compare and set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "658a7a2cd579882ee2f90b45526fcf62ab2326d9", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/658a7a2cd579882ee2f90b45526fcf62ab2326d9", "committedDate": "2020-12-17T01:38:53Z", "message": "add shut down for duplicated CallbackProcessor thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6372ab968a6db581141e13df2373102089d2d409", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/6372ab968a6db581141e13df2373102089d2d409", "committedDate": "2020-12-17T01:38:53Z", "message": "addredd comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "committedDate": "2020-12-17T01:38:53Z", "message": "fix typo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af0759e28974019cc82acf287b6bf3d4aefe3d91", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/af0759e28974019cc82acf287b6bf3d4aefe3d91", "committedDate": "2020-12-16T02:36:53Z", "message": "fix typo"}, "afterCommit": {"oid": "a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "author": {"user": {"login": "xyuanlu", "name": null}}, "url": "https://github.com/apache/helix/commit/a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "committedDate": "2020-12-17T01:38:53Z", "message": "fix typo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4172, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}