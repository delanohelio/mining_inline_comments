{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzcxODM5", "number": 690, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NTo0NFrODZ8Jeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTozNTo0OFrODa_4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI2NDU4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NTo0NFrOFgnQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTozODoyNlrOFiPALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ==", "bodyText": "Please comment if anyone of you has a better name. This one is not good.", "url": "https://github.com/apache/helix/pull/690#discussion_r369741919", "createdAt": "2020-01-22T18:55:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODAyOQ==", "bodyText": "I think now, with the introduction of a StatefulRebalancer interface, having this name makes sense and pretty clear. What do you think?\nAlso, could we follow the enum convention? Use StatefulRebalancer instead?", "url": "https://github.com/apache/helix/pull/690#discussion_r370758029", "createdAt": "2020-01-24T17:42:03Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDYzMw==", "bodyText": "Thanks for the feedback.\nAs for the convention, it is not really clear to me. So I did some research. There are different opinions. The one that seems to be more reasonable to me is that enum items should be treated as constants, so they should follow constants name convention. Given this, uppercase letters make more sense here. I intend to enforce this as our enum convention unless a different rule has been documented somewhere else that I don't know : )", "url": "https://github.com/apache/helix/pull/690#discussion_r370784633", "createdAt": "2020-01-24T18:45:14Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MTcwOA==", "bodyText": "Either way is fine - I realized there is no convention for this enum.", "url": "https://github.com/apache/helix/pull/690#discussion_r371441708", "createdAt": "2020-01-27T19:38:26Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/AttributeName.java", "diffHunk": "@@ -38,5 +38,6 @@\n   AsyncFIFOWorkerPool,\n   PipelineType,\n   LastRebalanceFinishTimeStamp,\n-  ControllerDataProvider\n+  ControllerDataProvider,\n+  STATEFUL_REBALANCER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTkxOQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTk3OTU1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoxMTo1N1rOFguPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo1Nzo1M1rOFgvF7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjQzOQ==", "bodyText": "Do you mean that the old controller will continue to process events even after having lost the leadership using the in-memory rebalancer/cache state?", "url": "https://github.com/apache/helix/pull/690#discussion_r369856439", "createdAt": "2020-01-22T23:11:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MDMxOQ==", "bodyText": "The one that is being processed will continue.", "url": "https://github.com/apache/helix/pull/690#discussion_r369870319", "createdAt": "2020-01-22T23:57:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjQzOQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTk4MzQxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoxMzo0OVrOFguR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo1OTo1MFrOFgvILA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NzAyMQ==", "bodyText": "Shouldn't we just discard all events from stale sessions?\nResetting the cache will trigger a fresh, up-to-date global baseline calculation anyways?", "url": "https://github.com/apache/helix/pull/690#discussion_r369857021", "createdAt": "2020-01-22T23:13:49Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MDg5Mg==", "bodyText": "We should, but there is no good way to do it for now. And even we discard the queued events, the concerning one is actually the one that is being processed. Force canceling that could be risky. So I don't think to do it without deeply improve the pipeline logic is a good idea.", "url": "https://github.com/apache/helix/pull/690#discussion_r369870892", "createdAt": "2020-01-22T23:59:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NzAyMQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAxNjMzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyODo0N1rOFgul1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMTozNVrOFgvKEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjEwMA==", "bodyText": "Could you please explain why another pipeline is being triggered when the controller is no longer a leader?", "url": "https://github.com/apache/helix/pull/690#discussion_r369862100", "createdAt": "2020-01-22T23:28:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller\n+    // regains the leadership. The rebalancer will be reset before being used. That is the\n+    // expected behavior so as to avoid inconsistent rebalance result.\n+    // 4. Event handled shortly after leadership relinquished. And the rebalancer has been marked\n+    // as invalid. So we reset the rebalancer. But the later isLeader() check will return false and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTM3Ng==", "bodyText": "in event thread, check if is leader, return true, so event thread continues\nin the ZK thread, session expired, so handling triggered, and leadership switch is done.\nin the event thread, keep triggering the pipeline.", "url": "https://github.com/apache/helix/pull/690#discussion_r369871376", "createdAt": "2020-01-23T00:01:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -626,6 +631,22 @@ private void handleEvent(ClusterEvent event, BaseControllerDataProvider dataProv\n       return;\n     }\n \n+    // Event handling happens in a different thread from the onControllerChange processing thread.\n+    // Thus, there are several possible conditions.\n+    // 1. Event handled after leadership acquired. So we will have a valid rebalancer for the\n+    // event processing.\n+    // 2. Event handled shortly after leadership relinquished. And the rebalancer has not been\n+    // marked as invalid yet. So the event will be processed the same as case one.\n+    // 3. Event is leftover from the previous session, and it is handled when the controller\n+    // regains the leadership. The rebalancer will be reset before being used. That is the\n+    // expected behavior so as to avoid inconsistent rebalance result.\n+    // 4. Event handled shortly after leadership relinquished. And the rebalancer has been marked\n+    // as invalid. So we reset the rebalancer. But the later isLeader() check will return false and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjEwMA=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAyNjIxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzozMzo1NFrOFguruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNzo0MFrOFgwLtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MzYxMQ==", "bodyText": "\"invalidate\"Rebalancer?", "url": "https://github.com/apache/helix/pull/690#discussion_r369863611", "createdAt": "2020-01-22T23:33:54Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {\n+    // Create WagedRebalancer instance if it hasn't been already initialized\n+    if (_rebalancer == null) {\n+      _rebalancer = new WagedRebalancer(helixManager);\n+      _isRebalancerValid = true;\n+    }\n+  }\n+\n+  /**\n+   * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+   * the next usage.\n+   */\n+  synchronized void invalidRebalancer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODE4MQ==", "bodyText": "Sure, I will update after #696.", "url": "https://github.com/apache/helix/pull/690#discussion_r369888181", "createdAt": "2020-01-23T01:07:40Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {\n+    // Create WagedRebalancer instance if it hasn't been already initialized\n+    if (_rebalancer == null) {\n+      _rebalancer = new WagedRebalancer(helixManager);\n+      _isRebalancerValid = true;\n+    }\n+  }\n+\n+  /**\n+   * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+   * the next usage.\n+   */\n+  synchronized void invalidRebalancer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MzYxMQ=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAyOTY5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzozNTo1MlrOFgut6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowOToxNVrOFgwNMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDE2OA==", "bodyText": "Do you think it would be better to generalize this into all rebalancers?\nFor example, RebalancerRef could be an interface here that provides things like getRebalancer() or createRebalancer(), invalidate(), etc. so that the GenericHelixController class does not depend on a specific stateful rebalancer here.", "url": "https://github.com/apache/helix/pull/690#discussion_r369864168", "createdAt": "2020-01-22T23:35:52Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODU2Mg==", "bodyText": "I think it's a good idea. Let me try to implement a simple version as a starting point. Will update later.", "url": "https://github.com/apache/helix/pull/690#discussion_r369888562", "createdAt": "2020-01-23T01:09:15Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDE2OA=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAzMjM0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzozNzoyNFrOFguvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoyNDozNFrOFhLiVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDU3OA==", "bodyText": "Design suggestion:\nCould we make this generic by using RebalancerRef or StatefulRebalancerRef (since this is only a problem for stateful rebalancers)? Also, instead of directly instantiating, we could make this a cluster config and have it be dynamically created? (Waged, CrushED, etc.). That way, we decouple GenericHelixController from WAGED (or a particular rebalancer) as much as possible.\nIt would be okay to set the default type to be WAGED since this is the only stateful rebalancer we have available so far?", "url": "https://github.com/apache/helix/pull/690#discussion_r369864578", "createdAt": "2020-01-22T23:37:24Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +187,11 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the WAGED rebalancer needs to be lazily constructed, the GenericHelixController will not\n+  // be constructed with a WAGED rebalancer. This wrapper is to avoid the complexity of handling a\n+  // nullable value in the GenericHelixController logic.\n+  private final WagedRebalancerRef _wagedRebalancerRef = new WagedRebalancerRef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjM0MQ==", "bodyText": "I've tried to make the class more generic. Now it is an abstract class. But the configuration part seems to be overdesign for now. Let's consider that part once we have multiple ones.", "url": "https://github.com/apache/helix/pull/690#discussion_r370336341", "createdAt": "2020-01-23T20:24:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +187,11 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the WAGED rebalancer needs to be lazily constructed, the GenericHelixController will not\n+  // be constructed with a WAGED rebalancer. This wrapper is to avoid the complexity of handling a\n+  // nullable value in the GenericHelixController logic.\n+  private final WagedRebalancerRef _wagedRebalancerRef = new WagedRebalancerRef();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NDU3OA=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAzOTA2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzo0MTowNlrOFguzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozNzo0NFrOFhL31g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYyMg==", "bodyText": "If we want to follow the double-checked locking pattern for lazy initialization, we could follow the following structure using volatile:\npublic class Singleton {\n    private volatile static Singleton instance;\n    private Singleton() {}\n    public static Singleton getInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}", "url": "https://github.com/apache/helix/pull/690#discussion_r369865622", "createdAt": "2020-01-22T23:41:06Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0MTg0Ng==", "bodyText": "That's the first thing I tried, if we don't need the _isRebalancerValid flag, it works fine and we won't need to create StatefulRebalancerRef at all. Basically, in this case, we make the WAGED rebalancer singleton.\nHowever, since we have a flag that is not quite suitable for the WAGED class, it would be easier for me to put both the flag and the rebalancer in a StatefulRebalancerRef object. And the Ref class is for the GenericHelixController only. Given that done, the singleton pattern becomes optional.\nMoreover, it is concerning to make the WAGED rebalancer singleton. If we want to use it for both task framework and the resource rebalancer, or we want to manage different resources with different rebalancer configuration, singleton won't work. That's why I didn't pick up that design.", "url": "https://github.com/apache/helix/pull/690#discussion_r370341846", "createdAt": "2020-01-23T20:37:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1259,3 +1287,54 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.start();\n   }\n }\n+\n+/**\n+ * A wrapper class for the WAGED rebalancer instance.\n+ */\n+class WagedRebalancerRef {\n+  private WagedRebalancer _rebalancer = null;\n+  private boolean _isRebalancerValid = true;\n+\n+  private void createWagedRebalancer(HelixManager helixManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2NTYyMg=="}, "originalCommit": {"oid": "28b7a88b1d210570dd9e4f2a78a6a3813ff5a7af"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc1NDAwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNDoyNVrOFhlESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoyNToyMFrOFhmYBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NDYzNQ==", "bodyText": "Could we add a TODO here for making it configurable (based on ClusterConfig for example) in the future as we have different versions of stateful rebalancers?\nIdeally we won't have to import WagedRebalancer explicitly (which seems like we're creating a dependency between GenericHelixController and a specific rebalancer class). I'm fine with creating an issue and getting to it later.", "url": "https://github.com/apache/helix/pull/690#discussion_r370754635", "createdAt": "2020-01-24T17:34:25Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +188,16 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the stateful rebalancer needs to be lazily constructed when the HelixManager instance is\n+  // ready, the GenericHelixController is not constructed with a stateful rebalancer. This wrapper\n+  // is to avoid the complexity of handling a nullable value in the event handling process.\n+  private final StatefulRebalancerRef _rebalancerRef = new StatefulRebalancerRef() {\n+    @Override\n+    protected StatefulRebalancer createRebalancer(HelixManager helixManager) {\n+      return new WagedRebalancer(helixManager);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MzMzMA==", "bodyText": "The vision is not clear to me. I don't think we have a solid idea for the TODO. For example, relying on the cluster config to set up the rebalancer type may be invalid. If we have multiple optional stateful rebalancers, they will be configured in the ideal state for each resource, instead of cluster config.\nMore likely, we will need to init all the stateful rebalancers here. It is just too far even for planning. For now, please assume we will only have one stateful rebalancer.\nHowever, making the code generic enough for the future extension is always a good idea. That why I added the interface according to your suggestion : )", "url": "https://github.com/apache/helix/pull/690#discussion_r370773330", "createdAt": "2020-01-24T18:19:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +188,16 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the stateful rebalancer needs to be lazily constructed when the HelixManager instance is\n+  // ready, the GenericHelixController is not constructed with a stateful rebalancer. This wrapper\n+  // is to avoid the complexity of handling a nullable value in the event handling process.\n+  private final StatefulRebalancerRef _rebalancerRef = new StatefulRebalancerRef() {\n+    @Override\n+    protected StatefulRebalancer createRebalancer(HelixManager helixManager) {\n+      return new WagedRebalancer(helixManager);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NDYzNQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NjA2OA==", "bodyText": "In addition, about your 2nd paragraph comment, I guess what you concerned about is that the rebalancer class should be only configurable in the IS. So the GenericHelixController should not be aware of the resource level thing. However, please note that even there is no resource using the WAGED rebalancer, the controller will still need to init the stateful rebalancer instance.\nI agree this design can be improved. But I would prefer to keep it simple before the rebalancer logic and the algorithm are stable enough.\nFor now, let me add a TODO.", "url": "https://github.com/apache/helix/pull/690#discussion_r370776068", "createdAt": "2020-01-24T18:25:20Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -187,6 +188,16 @@\n \n   private HelixManager _helixManager;\n \n+  // Since the stateful rebalancer needs to be lazily constructed when the HelixManager instance is\n+  // ready, the GenericHelixController is not constructed with a stateful rebalancer. This wrapper\n+  // is to avoid the complexity of handling a nullable value in the event handling process.\n+  private final StatefulRebalancerRef _rebalancerRef = new StatefulRebalancerRef() {\n+    @Override\n+    protected StatefulRebalancer createRebalancer(HelixManager helixManager) {\n+      return new WagedRebalancer(helixManager);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NDYzNQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc2MTQwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNzoxNFrOFhlIxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowODowOVrOFhl7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NTc4MA==", "bodyText": "How do we prevent this from being called multiple times?", "url": "https://github.com/apache/helix/pull/690#discussion_r370755780", "createdAt": "2020-01-24T17:37:14Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODc5OQ==", "bodyText": "It is prevented in the get method. This method itself is a protected method, with no external callers.", "url": "https://github.com/apache/helix/pull/690#discussion_r370768799", "createdAt": "2020-01-24T18:08:09Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NTc4MA=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc3MDAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0MDoxM1rOFhlN1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxMTozOFrOFiP_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NzA3OQ==", "bodyText": "Should we think about which methods in this class should be idempotent?\n\n\nWhy an abstract class vs an interface?", "url": "https://github.com/apache/helix/pull/690#discussion_r370757079", "createdAt": "2020-01-24T17:40:13Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDYzMA==", "bodyText": "Since it is a private class, I don't think we need to overdesign it. As for idempotent, could you be more specific, please? What's the concern that you have?", "url": "https://github.com/apache/helix/pull/690#discussion_r370770630", "createdAt": "2020-01-24T18:12:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NzA3OQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzOTA4Nw==", "bodyText": "My concern is that we should probably make the behavior more explicit around create() or close() being multiple times. It wasn't very clear from the code?", "url": "https://github.com/apache/helix/pull/690#discussion_r371439087", "createdAt": "2020-01-27T19:33:08Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NzA3OQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NzkzNQ==", "bodyText": "My point is that we don't restrict the behavior in the Ref class. The source of truth is in the rebalancer object itself. So it won't be explicitly mentioned here.\nMoreover, as I commented in the other thread, it is not a real concern for now. But I have added a TODO in the rebalancer class for rejecting requests after close() called.", "url": "https://github.com/apache/helix/pull/690#discussion_r371457935", "createdAt": "2020-01-27T20:11:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1292,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NzA3OQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc4Mjc5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0Mzo1NlrOFhlU9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozNToyOFrOFiSRVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg==", "bodyText": "Should we check things on the WagedRebalancer too? is closed?", "url": "https://github.com/apache/helix/pull/690#discussion_r370758902", "createdAt": "2020-01-24T17:43:56Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3ODE3Nw==", "bodyText": "That's a good point. For now, an explicit check would be optional. If the rebalancer has been closed, the computing will fail. One concern might be metric. It will be unregistered after the close.\nLet me add a TODO to the close() method. I would prefer to keep this PR simple for now.", "url": "https://github.com/apache/helix/pull/690#discussion_r370778177", "createdAt": "2020-01-24T18:30:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NjM3NQ==", "bodyText": "One more comment, for now, the close is only called in 2 conditions:\n\nthe instance is GCed. So there should be no one calling any methods.\nThe controller is shutdown. There won't be a pipeline running after. So there should be no one calling any methods.\n\nThat's why I don't think we need to do this check immediately.", "url": "https://github.com/apache/helix/pull/690#discussion_r370786375", "createdAt": "2020-01-24T18:48:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NDgwNA==", "bodyText": "True, but adding a check is safer and we could add a TODO to remove with better design?", "url": "https://github.com/apache/helix/pull/690#discussion_r371444804", "createdAt": "2020-01-27T19:44:14Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2MDMzMQ==", "bodyText": "I'd prefer adding a TODO to add this check properly. Since that is not one or two lines of change, let's not squeeze it into this PR.", "url": "https://github.com/apache/helix/pull/690#discussion_r371460331", "createdAt": "2020-01-27T20:17:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NTI1Mg==", "bodyText": "Will we be tracking this work with an issue?", "url": "https://github.com/apache/helix/pull/690#discussion_r371495252", "createdAt": "2020-01-27T21:35:28Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -249,23 +220,33 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n     return true;\n   }\n \n+  private void updateWagedRebalancer(WagedRebalancer wagedRebalancer, ClusterConfig clusterConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODkwMg=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc4NDY3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0NDo0N1rOFhlWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTozNTowNVrOFiSQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ==", "bodyText": "Perhaps we should check whether the rebalancer has been closed here?", "url": "https://github.com/apache/helix/pull/690#discussion_r370759211", "createdAt": "2020-01-24T17:44:47Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3OTQyMw==", "bodyText": "As mentioned above, I would prefer to reject call (by throwing exceptions or so) inside the rebalancer. For the calc stage, there is nothing it can do.\nMoreover, checking inside the rebalancer can help to keep the close status private.\nTODO added.", "url": "https://github.com/apache/helix/pull/690#discussion_r370779423", "createdAt": "2020-01-24T18:33:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NTMzMQ==", "bodyText": "Where is the reject call? Are you referring to Line 271?", "url": "https://github.com/apache/helix/pull/690#discussion_r371445331", "createdAt": "2020-01-27T19:45:15Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTQ3Mw==", "bodyText": "No reject call yet. TODO is for this task. It is not a must for now since all the callers are private.", "url": "https://github.com/apache/helix/pull/690#discussion_r371459473", "createdAt": "2020-01-27T20:15:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NTA1OA==", "bodyText": "I still don't see a TODO stating that we need to check on the rebalancer status (whether it's closed, null, etc.)", "url": "https://github.com/apache/helix/pull/690#discussion_r371495058", "createdAt": "2020-01-27T21:35:05Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java", "diffHunk": "@@ -282,22 +263,22 @@ private boolean validateOfflineInstancesLimit(final ResourceControllerDataProvid\n \n     Map<String, IdealState> newIdealStates = new HashMap<>();\n \n-    ClusterConfig clusterConfig = cache.getClusterConfig();\n-    WagedRebalancer wagedRebalancer =\n-        getWagedRebalancer(helixManager, clusterConfig.getGlobalRebalancePreference(),\n-            clusterConfig.isGlobalRebalanceAsyncModeEnabled());\n-    try {\n-      newIdealStates.putAll(wagedRebalancer.computeNewIdealStates(cache, wagedRebalancedResourceMap,\n-          currentStateOutput));\n-    } catch (HelixRebalanceException ex) {\n-      // Note that unlike the legacy rebalancer, the WAGED rebalance won't return partial result.\n-      // Since it calculates for all the eligible resources globally, a partial result is invalid.\n-      // TODO propagate the rebalancer failure information to updateRebalanceStatus for monitoring.\n+    if (wagedRebalancer != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTIxMQ=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc4NTg5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0NToyMlrOFhlW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODozNTowOFrOFhmoiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTQxOA==", "bodyText": "We should add a TODO here for all the sleep() calls?", "url": "https://github.com/apache/helix/pull/690#discussion_r370759418", "createdAt": "2020-01-24T17:45:22Z", "author": {"login": "narendly"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -473,6 +473,58 @@ public void testNewInstances()\n     }\n   }\n \n+  /**\n+   * The stateful WAGED rebalancer will be reset while the controller regains the leadership.\n+   * This test is to verify if the reset has been done and the rebalancer has forgotten any previous\n+   * status after leadership switched.\n+   */\n+  @Test(dependsOnMethods = \"test\")\n+  public void testRebalancerReset() throws Exception {\n+    // Configure the rebalance preference so as to trigger more partition movements for evenness.\n+    // This is to ensure the controller will try to move something if the rebalancer has been reset.\n+    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.setGlobalRebalancePreference(ImmutableMap\n+        .of(ClusterConfig.GlobalRebalancePreferenceKey.EVENNESS, 10,\n+            ClusterConfig.GlobalRebalancePreferenceKey.LESS_MOVEMENT, 0));\n+    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    int i = 0;\n+    for (String stateModel : _testModels) {\n+      String db = \"Test-DB-\" + TestHelper.getTestMethodName() + i++;\n+      createResourceWithWagedRebalance(CLUSTER_NAME, db, stateModel, PARTITIONS, _replica,\n+          _replica);\n+      _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, db, _replica);\n+      _allDBs.add(db);\n+    }\n+    Thread.sleep(300);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDI5Ng==", "bodyText": "You are right, but there are too many...\nLet me add to the newly created method. After we fixed the issue  #526 we will be able to remove all sleep anyway.", "url": "https://github.com/apache/helix/pull/690#discussion_r370780296", "createdAt": "2020-01-24T18:35:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/rebalancer/WagedRebalancer/TestWagedRebalance.java", "diffHunk": "@@ -473,6 +473,58 @@ public void testNewInstances()\n     }\n   }\n \n+  /**\n+   * The stateful WAGED rebalancer will be reset while the controller regains the leadership.\n+   * This test is to verify if the reset has been done and the rebalancer has forgotten any previous\n+   * status after leadership switched.\n+   */\n+  @Test(dependsOnMethods = \"test\")\n+  public void testRebalancerReset() throws Exception {\n+    // Configure the rebalance preference so as to trigger more partition movements for evenness.\n+    // This is to ensure the controller will try to move something if the rebalancer has been reset.\n+    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n+    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n+    clusterConfig.setGlobalRebalancePreference(ImmutableMap\n+        .of(ClusterConfig.GlobalRebalancePreferenceKey.EVENNESS, 10,\n+            ClusterConfig.GlobalRebalancePreferenceKey.LESS_MOVEMENT, 0));\n+    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n+\n+    int i = 0;\n+    for (String stateModel : _testModels) {\n+      String db = \"Test-DB-\" + TestHelper.getTestMethodName() + i++;\n+      createResourceWithWagedRebalance(CLUSTER_NAME, db, stateModel, PARTITIONS, _replica,\n+          _replica);\n+      _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, db, _replica);\n+      _allDBs.add(db);\n+    }\n+    Thread.sleep(300);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTQxOA=="}, "originalCommit": {"oid": "e3e985d5d79328d12bab8402a0b057a18a1dbacc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjM2MjYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTozNTo0OFrOFiO7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo1OTo0OVrOFiS9Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDQwMA==", "bodyText": "Should we follow the lazy-initialization idiom (using volatile keyword on the singleton objects)?", "url": "https://github.com/apache/helix/pull/690#discussion_r371440400", "createdAt": "2020-01-27T19:35:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1293,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);\n+\n+    /**\n+     * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+     * the next usage.\n+     */\n+    synchronized void invalidateRebalancer() {\n+      _isRebalancerValid = false;\n+    }\n+\n+    /**\n+     * @return A valid rebalancer object.\n+     *         If the rebalancer is no longer valid, it will be reset before returning.\n+     */\n+    synchronized T getRebalancer(HelixManager helixManager) {\n+      // Lazily initialize the stateful rebalancer instance since the GenericHelixController\n+      // instance is instantiated without the HelixManager information that is required.\n+      if (_rebalancer == null) {\n+        _rebalancer = createRebalancer(helixManager);\n+        _isRebalancerValid = true;\n+      }\n+      // If the rebalance exists but has been marked as invalid (due to leadership switch), it needs\n+      // to be reset before return.\n+      if (!_isRebalancerValid) {\n+        _rebalancer.reset();\n+        _isRebalancerValid = true;\n+      }\n+      return _rebalancer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2OTQ5NA==", "bodyText": "I still think it is not necessary since we want to maximize the event handling performance here.\n\ngetRebalancer is called in a single thread, there is no concern that multiple getRebalancer will cause the rebalancer to be created multiple times.\nthe possible concern is between getRebalancer() and closeRebalancer().\n2.1. it is not possible that getRebalancer is called after closeRebalancer. Since the event thread has been stopped by the controller before closeRebalancer is triggered.\n2.2. if the closeRebalancer is called after getRebalancer, and the reference has not been safed in the main memory, closeRebalancer does nothing. The clean up will be done a little bit late while the rebalancer object is GCed. This is fine. Since the controller has been close, the rebalancer will not be used for sure.\nOn the other hand, when adding volatile to the _rebalancer object, each getRebalancer will access the main memory. It's a minor delay increament, but if it happens on every event, these latencies together might count something. So I prefer not adding volatile unless it help to resolve a real concern.\n\nMoreover, as I mentioned, the rebalancer should not be a singleton by design.", "url": "https://github.com/apache/helix/pull/690#discussion_r371469494", "createdAt": "2020-01-27T20:38:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1293,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);\n+\n+    /**\n+     * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+     * the next usage.\n+     */\n+    synchronized void invalidateRebalancer() {\n+      _isRebalancerValid = false;\n+    }\n+\n+    /**\n+     * @return A valid rebalancer object.\n+     *         If the rebalancer is no longer valid, it will be reset before returning.\n+     */\n+    synchronized T getRebalancer(HelixManager helixManager) {\n+      // Lazily initialize the stateful rebalancer instance since the GenericHelixController\n+      // instance is instantiated without the HelixManager information that is required.\n+      if (_rebalancer == null) {\n+        _rebalancer = createRebalancer(helixManager);\n+        _isRebalancerValid = true;\n+      }\n+      // If the rebalance exists but has been marked as invalid (due to leadership switch), it needs\n+      // to be reset before return.\n+      if (!_isRebalancerValid) {\n+        _rebalancer.reset();\n+        _isRebalancerValid = true;\n+      }\n+      return _rebalancer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDQwMA=="}, "originalCommit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5OTQ3OQ==", "bodyText": "Adding volatile is for correctness and I don't think we should sacrifice correctness in favor of a minor performance improvement. And I am not positive if the performance is a valid concern at this juncture with so many synchronization primitives that are already in use.\nNow is Helix Controller single-thread? Yes. Will it remain that way? Not necessarily. If we do make this change (which should happen soon, especially due to the memory pressure Controller is facing), we should revisit this code. Could we add a TODO here as well, marking it not thread-safe?", "url": "https://github.com/apache/helix/pull/690#discussion_r371499479", "createdAt": "2020-01-27T21:44:39Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1293,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);\n+\n+    /**\n+     * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+     * the next usage.\n+     */\n+    synchronized void invalidateRebalancer() {\n+      _isRebalancerValid = false;\n+    }\n+\n+    /**\n+     * @return A valid rebalancer object.\n+     *         If the rebalancer is no longer valid, it will be reset before returning.\n+     */\n+    synchronized T getRebalancer(HelixManager helixManager) {\n+      // Lazily initialize the stateful rebalancer instance since the GenericHelixController\n+      // instance is instantiated without the HelixManager information that is required.\n+      if (_rebalancer == null) {\n+        _rebalancer = createRebalancer(helixManager);\n+        _isRebalancerValid = true;\n+      }\n+      // If the rebalance exists but has been marked as invalid (due to leadership switch), it needs\n+      // to be reset before return.\n+      if (!_isRebalancerValid) {\n+        _rebalancer.reset();\n+        _isRebalancerValid = true;\n+      }\n+      return _rebalancer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDQwMA=="}, "originalCommit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNjQ3OA==", "bodyText": "I understand the concern. And I also thought about that. Actually, even the controller has been changed and split, there probably still be one single thread calculating for resource rebalance. Given that, in the foreseeable future, my assumption will still be valid.\nI agree with you that the performance impact is minor. But since it won't impact our correctness, I'd prefer to keep the design simple and not design for the unknown future.", "url": "https://github.com/apache/helix/pull/690#discussion_r371506478", "createdAt": "2020-01-27T21:59:49Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,4 +1293,57 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  /**\n+   * A wrapper class for the stateful rebalancer instance that will be tracked in the\n+   * GenericHelixController.\n+   */\n+  private abstract class StatefulRebalancerRef<T extends StatefulRebalancer> {\n+    private T _rebalancer = null;\n+    private boolean _isRebalancerValid = true;\n+\n+    /**\n+     * @param helixManager\n+     * @return A new stateful rebalancer instance with initial state.\n+     */\n+    protected abstract T createRebalancer(HelixManager helixManager);\n+\n+    /**\n+     * Mark the current rebalancer object to be invalid, which indicates it needs to be reset before\n+     * the next usage.\n+     */\n+    synchronized void invalidateRebalancer() {\n+      _isRebalancerValid = false;\n+    }\n+\n+    /**\n+     * @return A valid rebalancer object.\n+     *         If the rebalancer is no longer valid, it will be reset before returning.\n+     */\n+    synchronized T getRebalancer(HelixManager helixManager) {\n+      // Lazily initialize the stateful rebalancer instance since the GenericHelixController\n+      // instance is instantiated without the HelixManager information that is required.\n+      if (_rebalancer == null) {\n+        _rebalancer = createRebalancer(helixManager);\n+        _isRebalancerValid = true;\n+      }\n+      // If the rebalance exists but has been marked as invalid (due to leadership switch), it needs\n+      // to be reset before return.\n+      if (!_isRebalancerValid) {\n+        _rebalancer.reset();\n+        _isRebalancerValid = true;\n+      }\n+      return _rebalancer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDQwMA=="}, "originalCommit": {"oid": "40c7f029ba959c45e7697052cef717529afda49d"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1541, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}