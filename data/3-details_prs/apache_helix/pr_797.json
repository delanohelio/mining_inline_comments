{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTIzOTg3", "number": 797, "title": "Add REST API to add, remove and update CustomizedStateAggregationConfig", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR title:\nFixes #791\n\nDescription\n\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this commit the below REST APIs have been added.\n1- addCustomizedStateAggregationConfig\n2- removeCustomizedStateAggregationConfig\n3- getCustomizedStateAggregationConfig\n4- updateCustomizedStateAggregationConfig\nTests have been added to check the functionality of these REST APIs.\nAlso some of the deprecated calls have been updated.\n\n\n The following tests are written for this issue:\nTestClusterAccessor.testAddCustomizedConfigNonExistedCluster\nTestClusterAccessor.testAddCustomizedConfig\nTestClusterAccessor.testDeleteCustomizedConfig\nTestClusterAccessor.testUpdateCustomizedConfig\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nHelix-core:\n[INFO] Tests run: 908, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,535.183 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 908, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  59:00 min\n[INFO] Finished at: 2020-02-21T16:16:31-08:00\n[INFO] ------------------------------------------------------------------------\nHelix-rest:\n[INFO] Tests run: 97, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 25.632 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 97, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  30.507 s\n[INFO] Finished at: 2020-02-21T15:17:01-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-22T00:16:54Z", "url": "https://github.com/apache/helix/pull/797", "merged": true, "mergeCommit": {"oid": "bdd66cc0b82f5e917602c94a487c65a4a7db7eab"}, "closed": true, "closedAt": "2020-02-25T22:05:11Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGoKJlgH2gAyMzc4NTIzOTg3Ojg2MjU0YmE1ZWYwM2NkMWUxYzA4MDg0YmI0OTY2ZDk3ZmFiMzMxNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH3wNHgFqTM2NDQwOTExMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/86254ba5ef03cd1e1c08084bb4966d97fab33150", "committedDate": "2020-02-21T23:16:55Z", "message": "Add REST API to add, remove and update CustomizedStateAggregationConfig\n\nIn this commit the below REST APIs have been added.\n1- addCustomizedStateAggregationConfig\n2- removeCustomizedStateAggregationConfig\n3- getCustomizedStateAggregationConfig\n4- updateCustomizedStateAggregationConfig\nTests have been added to check the functionality of these REST APIs.\nAlso some of the depricated calls have been updated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTk2NTE0", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-362996514", "createdAt": "2020-02-22T01:15:45Z", "commit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxNTo0NlrOFtInLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyOTozMVrOFtItGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTM0Mw==", "bodyText": "This endpoint name is so difficult to read/write. Can you change it to snake-case: customized-state-xxx?", "url": "https://github.com/apache/helix/pull/797#discussion_r382871343", "createdAt": "2020-02-22T01:15:46Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjQ4Ng==", "bodyText": "For this exception, is it caused by a server error or a client error? It is good to make sure the response status code is appropriate.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872486", "createdAt": "2020-02-22T01:26:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjY1OQ==", "bodyText": "I would remove {} for case blocks.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872659", "createdAt": "2020-02-22T01:27:52Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjcyMQ==", "bodyText": "No need for else.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872721", "createdAt": "2020-02-22T01:28:20Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjg1Nw==", "bodyText": "I would suggest adding an error message to the response.", "url": "https://github.com/apache/helix/pull/797#discussion_r382872857", "createdAt": "2020-02-22T01:29:31Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDE0NTM5", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-363014539", "createdAt": "2020-02-22T06:58:17Z", "commit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNjo1ODoxN1rOFtJ5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzowMzozMlrOFtJ6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjQ2MA==", "bodyText": "I would suggest a PUT for this update request and delete type may not be supported in this request but in a delete request", "url": "https://github.com/apache/helix/pull/797#discussion_r382892460", "createdAt": "2020-02-22T06:58:17Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjY4Ng==", "bodyText": "These lines could be in a private check method to reduce duplicate code.", "url": "https://github.com/apache/helix/pull/797#discussion_r382892686", "createdAt": "2020-02-22T07:03:32Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/e48f251229e94f77ef0297df1d14db002c3410bc", "committedDate": "2020-02-23T01:39:49Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTQzNzUx", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-363543751", "createdAt": "2020-02-24T16:53:44Z", "commit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Mzo0NFrOFtoGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Njo0OVrOFtoM_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzE0MQ==", "bodyText": "NIP: to -> from", "url": "https://github.com/apache/helix/pull/797#discussion_r383387141", "createdAt": "2020-02-24T16:53:44Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkyNg==", "bodyText": "The update here is confusing, especially this command is also called \"update\". Actually this is \"add\", right?", "url": "https://github.com/apache/helix/pull/797#discussion_r383388926", "createdAt": "2020-02-24T16:56:49Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case update:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/c52c53906f4797514259a4a1e8114bacac78cd03", "committedDate": "2020-02-24T17:25:44Z", "message": "Add new command"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODgzODE4", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-363883818", "createdAt": "2020-02-25T05:47:53Z", "commit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo0Nzo1M1rOFt5XZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyM1rOFt5nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDExOQ==", "bodyText": "This style may need to change: it does not follow either the current naming convention (add) to be consistent or Java enum naming convention (constant like ADD)", "url": "https://github.com/apache/helix/pull/797#discussion_r383670119", "createdAt": "2020-02-25T05:47:53Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/AbstractResource.java", "diffHunk": "@@ -62,6 +62,7 @@\n     enablePartitions,\n     disablePartitions,\n     update,\n+    Add,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MjcwNA==", "bodyText": "{} is better than string concatenation.", "url": "https://github.com/apache/helix/pull/797#discussion_r383672704", "createdAt": "2020-02-25T05:58:27Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig from cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.Add; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case Add:\n+        admin.addTypeToCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      default:\n+        return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to \" + command + \" CustomizedStateAggregationConfig for cluster \" + clusterId + \" new type: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MzM5OA==", "bodyText": "Unused.", "url": "https://github.com/apache/helix/pull/797#discussion_r383673398", "createdAt": "2020-02-25T06:01:12Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Mzk3OA==", "bodyText": "Can we not catch a more specific exception? It seems there could be runtime HelixException?", "url": "https://github.com/apache/helix/pull/797#discussion_r383673978", "createdAt": "2020-02-25T06:03:10Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMxOA==", "bodyText": "This is a user input/client error, not a server error.  We don't have to log this especially on error level in server.", "url": "https://github.com/apache/helix/pull/797#discussion_r383674318", "createdAt": "2020-02-25T06:04:23Z", "author": {"login": "huizhilu"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzg5OTUz", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-363789953", "createdAt": "2020-02-25T00:09:51Z", "commit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowOTo1MlrOFt0Yww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowOTo1MlrOFt0Yww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4ODU0Nw==", "bodyText": "Please use lower case to be consistent with \"delete\"", "url": "https://github.com/apache/helix/pull/797#discussion_r383588547", "createdAt": "2020-02-25T00:09:52Z", "author": {"login": "zhangmeng916"}, "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -362,7 +362,7 @@ public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") S\n       case delete:\n         admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n         break;\n-      case update:\n+      case Add:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eac688f0d580c9ccef9bc8253a777b1a6c41f35", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/8eac688f0d580c9ccef9bc8253a777b1a6c41f35", "committedDate": "2020-02-25T18:25:56Z", "message": "fix comments2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDA5MTEy", "url": "https://github.com/apache/helix/pull/797#pullrequestreview-364409112", "createdAt": "2020-02-25T20:00:59Z", "commit": {"oid": "8eac688f0d580c9ccef9bc8253a777b1a6c41f35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}