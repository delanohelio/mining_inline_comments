{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTM5OTEz", "number": 688, "title": "Fix the watcher leakage issue", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n(FIX #687)\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\n(Write a concise description including what, why, how)\nZkClient will re-install the watcher even when the node path is deleted and it leaks to zookeeper server-side watcher leakages.\nThis PR tries to address the leakage issue.\nDetailed Explanation\n\nCurrent implementation re-installs the watcher explicitly when handling either child or data event\nThe updates will re-install the watcher explicitly immediately after receiving the WatchedEvent, if it's NodeDeleted event, no watcher will be set; Then in the actual data handling part, no more explicit watcher will be set.\n\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\nTestZKWatch\n\n\ntestSubscribeDataChange\n\n\ntestSubscribeChildChange\n\n\ntestSubscribeNonExistPath\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n(Copy & paste the result of \"mvn test\")\n[ERROR] Failures:\n[ERROR]   TestDelayedAutoRebalanceWithRackaware.testMinimalActiveReplicaMaintain:89->TestDelayedAutoRebalance.testMinimalActiveReplicaMaintain:131->ZkTestBase.validateMinActiveAndTopStateReplica:446 Test-DB-2_1 missing LEADER replica expected: but was:\n[ERROR]   TestHelixZkClient.testSharingZkClient:168 expected: but was:\n[INFO]\n[ERROR] Tests run: 901, Failures: 2, Errors: 0, Skipped: 4\nTestDelayedAutoRebalanceWithRackaware.testMinimalActiveReplicaMaintain is a flaky test and failing.\nTestHelixZkClient.testSharingZkClient fails because the previously installed watch is deleted and we need to re-install the watch on purpose to make the test happy\n-- after the fix\n[ERROR] Tests run: 901, Failures: 1, Errors: 0, Skipped: 2, Time elapsed: 3,846.059 s <<< FAILURE! - in TestSuite\n[ERROR] testSubscribeDataChange(org.apache.helix.manager.zk.TestZKWatch)  Time elapsed: 0.031 s  <<< FAILURE!\njava.lang.AssertionError: expected:<0> but was:<1>\nat org.apache.helix.manager.zk.TestZKWatch.testSubscribeDataChange(TestZKWatch.java:81)\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestZKWatch.testSubscribeDataChange:81 expected:<0> but was:<1>\n[INFO]\n[ERROR] Tests run: 901, Failures: 1, Errors: 0, Skipped: 2\nThe single failed test passed running in IDE\n-- After merge with latest master branch\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestNoThrottleDisabledPartitions.testNoThrottleOnDisabledPartition:293 expected: but was:\n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected: but was:\n[ERROR]   TestZKWatch.testSubscribeDataChange:81 expected:<0> but was:<1>\n[INFO]\n[ERROR] Tests run: 1082, Failures: 3, Errors: 0, Skipped: 2\nThe failed tests passed when running individually\nFinal\n[ERROR] Tests run: 1083, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4,588.244 s <<< FAILURE! - in TestSuite\n[ERROR] testMissingTopStateDurationMonitoring(org.apache.helix.integration.controller.TestControllerLeadershipChange)  Time elapsed: 4.705 s  <<< FAILURE!\njava.lang.AssertionError: expected: but was:\nat org.apache.helix.integration.controller.TestControllerLeadershipChange.testMissingTopStateDurationMonitoring(TestControllerLeadershipChange.java:262)\n[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected: but was:\n[INFO]\n[ERROR] Tests run: 1083, Failures: 1, Errors: 0, Skipped: 0\nThe single failed test passed in IDE\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-01-17T02:58:09Z", "url": "https://github.com/apache/helix/pull/688", "merged": true, "mergeCommit": {"oid": "85f246a65348914eee4cd1097e492cf6e50d12af"}, "closed": true, "closedAt": "2020-02-07T23:56:35Z", "author": {"login": "i3wangyi"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7SVPQgFqTM0NDczNTU3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCGumwAFqTM1NTQ2NDQ4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzM1NTcz", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-344735573", "createdAt": "2020-01-17T17:37:56Z", "commit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzozNzo1N1rOFfATAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzozNzo1N1rOFfATAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NTA0MA==", "bodyText": "nit: doesPathExist or pathExists", "url": "https://github.com/apache/helix/pull/688#discussion_r368055040", "createdAt": "2020-01-17T17:37:57Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ3NzE0", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-344747714", "createdAt": "2020-01-17T18:01:47Z", "commit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMTo0OFrOFfA24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNjo1MFrOFfA-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDIyNQ==", "bodyText": "Could you add some javadoc on how this is different from the other method?", "url": "https://github.com/apache/helix/pull/688#discussion_r368064225", "createdAt": "2020-01-17T18:01:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjE3MQ==", "bodyText": "Question: main Helix paths (like /IDEALSTATES, /CONFIG, etc) do not get deleted, so I am wondering if this is really meaningful?\nI think handling deleted/non-existent ZNodes might be more effective for children ZNodes? Like not the main IDEALSTATES path, but the IdealState ZNodes inside it.", "url": "https://github.com/apache/helix/pull/688#discussion_r368066171", "createdAt": "2020-01-17T18:06:50Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    for (final IZkDataListenerEntry listener : listeners) {\n+      ZkEvent zkEvent = new ZkEvent(\n+          \"Data of \" + path + \" changed sent to \" + listener.getDataListener() + \" prefetch data: \"\n+              + listener.isPrefetchData()) {\n+        @Override\n+        public void run()\n+            throws Exception {\n+          Object data;\n+          // TODO: are we fetching the data multiple times?\n+          if (listener.isPrefetchData()) {\n+            LOG.debug(\"Prefetch data for path: {}\", path);\n+            try {\n+              data = readData(path, null, true);\n+            } catch (ZkNoNodeException e) {\n+              LOG.warn(\"Prefetch data for path: {} failed.\", path, e);\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n+            listener.getDataListener().handleDataChange(path, data);\n+          }\n+        }\n+      };\n+\n+      _eventThread.send(zkEvent);\n+    }\n+  }\n+\n   private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners,\n-      final OptionalLong notificationTime) {\n+      final long notificationTime, final boolean isPathExist) {\n+    final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDA4NTIx", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-345008521", "createdAt": "2020-01-19T15:19:02Z", "commit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToxOTowMlrOFfPWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNToyNDo0NFrOFfPXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTYyMQ==", "bodyText": "I did not see the value of changing this. If you feel this is necessary, please make it for separate PR as it does impact logic and purely code refactoring.", "url": "https://github.com/apache/helix/pull/688#discussion_r368301621", "createdAt": "2020-01-19T15:19:02Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);\n \n-    public ZkPathStatRecord(String path) {\n+    ZkPathStatRecord(String path) {\n       _path = path;\n     }\n \n-    public boolean pathExists() {\n-      return _stat != null;\n-    }\n-\n-    public boolean pathChecked() {\n-      return _checked;\n+    boolean isPathChecked() {\n+      return _isChecked.get();\n     }\n \n     /*\n      * Note this method is not thread safe.\n      */\n-    public void recordPathStat(Stat stat, OptionalLong notificationTime) {\n-      _checked = true;\n-      _stat = stat;\n-\n-      if (_monitor != null && stat != null && notificationTime.isPresent()) {\n+    void recordPathStat(Stat stat, long notificationTime) {\n+      if (isPathChecked()) {\n+        return;\n+      }\n+      _isChecked.set(true);\n+      if (_monitor != null && stat != null) {\n         long updateTime = Math.max(stat.getCtime(), stat.getMtime());\n-        if (notificationTime.getAsLong() > updateTime) {\n-          _monitor.recordDataPropagationLatency(_path, notificationTime.getAsLong() - updateTime);\n+        if (notificationTime > updateTime) {\n+          _monitor.recordDataPropagationLatency(_path, notificationTime - updateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTk2OA==", "bodyText": "I do see some duplicated code between these three methods. Can you combine the logic to optimize the code structure.", "url": "https://github.com/apache/helix/pull/688#discussion_r368301968", "createdAt": "2020-01-19T15:24:44Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, pathExists);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * The method is called when state change occurs and we need to handle existing path data handlers\n+   */\n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDE3OTIy", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-345017922", "createdAt": "2020-01-19T18:26:35Z", "commit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODoyNjozNVrOFfQAUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxODo0Njo1M1rOFfQEhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA==", "bodyText": "Can you please explain why we need to change this value to Atomic?", "url": "https://github.com/apache/helix/pull/688#discussion_r368312400", "createdAt": "2020-01-19T18:26:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA==", "bodyText": "This might be a potential bug. For example,\nT1: node deleted, and NodeDeleted is sent.\nT2: node is re-created\nT3: The NodeDeleted event is processed, pathExists is set to false. And it is NOT the truth!\nThis might be OK, since we will have another event coming later. But it may introduce a substantial change of the ZkClient behavior. So I would prefer if we don't do it. The minimum fix itself does not require this enhancement. Please correct me if I am wrong.", "url": "https://github.com/apache/helix/pull/688#discussion_r368312648", "createdAt": "2020-01-19T18:31:13Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMzQ3OA==", "bodyText": "The answer is yes. There is a solution, can we do the same as the other methods so as to avoid multiple reads?", "url": "https://github.com/apache/helix/pull/688#discussion_r368313478", "createdAt": "2020-01-19T18:46:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, pathExists);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * The method is called when state change occurs and we need to handle existing path data handlers\n+   */\n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {\n+    try {\n+      for (final IZkDataListenerEntry listener : listeners) {\n+        ZkEvent zkEvent = new ZkEvent(\n+            \"Data of \" + path + \" changed sent to \" + listener.getDataListener()\n+                + \" prefetch data: \" + listener.isPrefetchData()) {\n+          @Override\n+          public void run()\n+              throws Exception {\n+            Object data;\n+            // TODO: are we fetching the data multiple times?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzUxNDIy", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-344751422", "createdAt": "2020-01-17T18:09:07Z", "commit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowOTowN1rOFfBB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozNjo1MFrOFhL2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NzA0OQ==", "bodyText": "Another option is, you can pass the EventType to fireDataChangedEvents. I think this option is better than passing a boolean as parameter to determine the behavior. So you don't have to check the condition here.", "url": "https://github.com/apache/helix/pull/688#discussion_r368067049", "createdAt": "2020-01-17T18:09:07Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NTA0MA=="}, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODQ4NA==", "bodyText": "I think you can refactor fireDataChangedEvents(path, listeners, notificationTime, isPathExist) a bit, which fireDataChangedEvents(path, listeners) can call. So we would avoid duplicate code and 2 branches of logic.", "url": "https://github.com/apache/helix/pull/688#discussion_r368068484", "createdAt": "2020-01-17T18:12:42Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1258,62 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean isPathExist = event.getType() != EventType.NodeDeleted;\n       Set<IZkDataListenerEntry> listeners = _dataListener.get(path);\n       if (listeners != null && !listeners.isEmpty()) {\n-        fireDataChangedEvents(event.getPath(), listeners, OptionalLong.of(notificationTime));\n+        fireDataChangedEvents(event.getPath(), listeners, notificationTime, isPathExist);\n       }\n     }\n   }\n \n+  private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry> listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0405a53b2ff01eb60b877cbec6b27f90333861a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNzQ3Mg==", "bodyText": "But is it really necessary to use atomic? Is there a clue that there would be concurrency issue?", "url": "https://github.com/apache/helix/pull/688#discussion_r370337472", "createdAt": "2020-01-23T20:27:12Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -145,32 +145,28 @@ public int hashCode() {\n \n   private class ZkPathStatRecord {\n     private final String _path;\n-    private Stat _stat = null;\n-    private boolean _checked = false;\n+    private AtomicBoolean _isChecked = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjQwMA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0MTQ5MQ==", "bodyText": "I think you don't have to check pathExits here and pass it to fireDataChangedEvents(). Instead, you can check the condition within fireDataChangedEvents. The pro is the api can avoid the boolean param and 2 logic branches in fireDataChangedEvents. If it is a DELETED event, you will call handleDataDeleted.", "url": "https://github.com/apache/helix/pull/688#discussion_r370341491", "createdAt": "2020-01-23T20:36:50Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1261,31 +1257,75 @@ private void processDataOrChildChange(WatchedEvent event, long notificationTime)\n \n     if (event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted\n         || event.getType() == EventType.NodeCreated) {\n+      boolean pathExists = event.getType() != EventType.NodeDeleted;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMjY0OA=="}, "originalCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4956c04d9c8ab4b50d497ea64455ca1ee5c81758", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/4956c04d9c8ab4b50d497ea64455ca1ee5c81758", "committedDate": "2020-01-18T01:20:27Z", "message": "update"}, "afterCommit": {"oid": "29019600639d59d911ab34850c6202cbf0bcdb9d", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/29019600639d59d911ab34850c6202cbf0bcdb9d", "committedDate": "2020-01-27T23:36:48Z", "message": "Fix the zk watcher leakage issue\n- reinstall the watchers before handling the event\n- then event handling logic doesn't need to re-install the watcher anymore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Nzk5Mjk5", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-349799299", "createdAt": "2020-01-29T00:35:57Z", "commit": {"oid": "6571dd9411cc482583606a58f2c39f91e9db91a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDozNTo1OFrOFi5VUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDozNTo1OFrOFi5VUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNTI1MA==", "bodyText": "Do you change this list initialization from null to an instance for the later for loop? But do you expect the listener will be removed in any case in handleChildChange? From the code in handleChildChange, if children is not null, the listener will not be removed.", "url": "https://github.com/apache/helix/pull/688#discussion_r372135250", "createdAt": "2020-01-29T00:35:58Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1310,26 +1318,30 @@ public void run() throws Exception {\n   }\n \n   private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+    //TODO: Use event type to check if path exists and save network request\n+    boolean pathExists = exists(path);\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n-            List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            List<String> children = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6571dd9411cc482583606a58f2c39f91e9db91a0"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c4b84a1c4c71d833371b630d57f06a4b25baaee", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/8c4b84a1c4c71d833371b630d57f06a4b25baaee", "committedDate": "2020-01-29T01:05:57Z", "message": "Update & leave the children list to be NULL"}, "afterCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/619eb4810770a5c1c03c1790afb198b6842c8cc8", "committedDate": "2020-01-30T02:15:27Z", "message": "Realize the zookeeper process thread and zkClient thread run differently, update the PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTgyODk5", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-351182899", "createdAt": "2020-01-30T22:20:23Z", "commit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyMDoyM1rOFj72hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozODozMlrOFj8SBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTA5NQ==", "bodyText": "Do we have a new place to debug log delete event? I didn't see it in this PR. Please confirm. If we don't have, let's keep it here.", "url": "https://github.com/apache/helix/pull/688#discussion_r373225095", "createdAt": "2020-01-30T22:20:23Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -904,13 +904,6 @@ public void process(WatchedEvent event) {\n         || event.getType() == Event.EventType.NodeCreated\n         || event.getType() == Event.EventType.NodeChildrenChanged;\n \n-    if (event.getType() == Event.EventType.NodeDeleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTIxNw==", "bodyText": "Feel free to enrich the log message though.", "url": "https://github.com/apache/helix/pull/688#discussion_r373225217", "createdAt": "2020-01-30T22:20:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -904,13 +904,6 @@ public void process(WatchedEvent event) {\n         || event.getType() == Event.EventType.NodeCreated\n         || event.getType() == Event.EventType.NodeChildrenChanged;\n \n-    if (event.getType() == Event.EventType.NodeDeleted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTA5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA==", "bodyText": "This will remove our previous improvement for multiple listeners. Why we remove it?", "url": "https://github.com/apache/helix/pull/688#discussion_r373227348", "createdAt": "2020-01-30T22:26:06Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzc3MA==", "bodyText": "This is not necessary, it has been done in the \"listener.handleChildChange(path, children);\" later.", "url": "https://github.com/apache/helix/pull/688#discussion_r373227770", "createdAt": "2020-01-30T22:27:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n-                  OptionalLong.empty());\n-            }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {\n               try {\n+                //TODO: duplicate reads when multiple child listener exists\n                 children = getChildren(path);\n+                if (children != null) {\n+                  for (String child : children) {\n+                    // add the exists watcher for all child path, it's to prevent watcher missing\n+                    // in case of node recreation shortly after deletion\n+                    watchForData(path + \"/\" + child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5NQ==", "bodyText": "You avoided the notificationTime report on the deleting events with this change. Please keep the original order.", "url": "https://github.com/apache/helix/pull/688#discussion_r373229895", "createdAt": "2020-01-30T22:32:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1276,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n+            if (!pathExists) {\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n             if (!pathStatRecord.pathChecked()) {\n               pathStatRecord.recordPathStat(getStat(path, true), notificationTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMDExMQ==", "bodyText": "This will invalidate our propagation latency metric, BTW.", "url": "https://github.com/apache/helix/pull/688#discussion_r373230111", "createdAt": "2020-01-30T22:33:08Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1276,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n+            if (!pathExists) {\n+              listener.getDataListener().handleDataDeleted(path);\n+              return;\n+            }\n             if (!pathStatRecord.pathChecked()) {\n               pathStatRecord.recordPathStat(getStat(path, true), notificationTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5NQ=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjEzNA==", "bodyText": "You can just change the condition from hasListeners(path) to pathExists && hasListeners(path), right?", "url": "https://github.com/apache/helix/pull/688#discussion_r373232134", "createdAt": "2020-01-30T22:38:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30df5cf4d743151377126f3a7ddd75f588228007", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/30df5cf4d743151377126f3a7ddd75f588228007", "committedDate": "2020-02-04T23:54:22Z", "message": "Finalize the integration test for zk watcher"}, "afterCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/f456c3cc3995e1cec0dc752f9be0d96d2ea7449d", "committedDate": "2020-02-04T23:55:19Z", "message": "Finalize the integration test for zk watcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDE4MDA2", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-353418006", "createdAt": "2020-02-05T01:34:33Z", "commit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTozNDozM1rOFlpQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MzowOVrOFlpZBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNzU3OQ==", "bodyText": "Seems to me all the change from line 1285 is not necessary, right? We can still use the old code.\nThe change may not be wrong, but seems to necessary.\nOr did I miss something here?", "url": "https://github.com/apache/helix/pull/688#discussion_r375017579", "createdAt": "2020-02-05T01:34:33Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,29 +1279,28 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f456c3cc3995e1cec0dc752f9be0d96d2ea7449d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTc4Mw==", "bodyText": "Seems to me that we can keep the same style as fireDataChangeEvent\n`\nif (!pathStatRecord.pathChecked()) {\npathStatRecord.recordPathStat(getStat(path, pathExists), OptionalLong.empty());\n}\n// The rest leave it the same\n`", "url": "https://github.com/apache/helix/pull/688#discussion_r375019783", "createdAt": "2020-02-05T01:43:09Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,22 +1306,24 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n-      final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n-            if (!pathStatRecord.pathChecked()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNzM0OA=="}, "originalCommit": {"oid": "619eb4810770a5c1c03c1790afb198b6842c8cc8"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDM2MTU2", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-353436156", "createdAt": "2020-02-05T02:41:28Z", "commit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MToyOFrOFlqOIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MToyOFrOFlqOIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzM3OA==", "bodyText": "Another question, this is something I am not sure. No true or false passed in here as 3rd parameter in line 962.  THe function signature has not default value. What value would be then for this invocation of fireDataChangeEvents?", "url": "https://github.com/apache/helix/pull/688#discussion_r375033378", "createdAt": "2020-02-05T02:41:28Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);\n     }\n     for (Entry<String, Set<IZkDataListenerEntry>> entry : _dataListener.entrySet()) {\n-      fireDataChangedEvents(entry.getKey(), entry.getValue(), OptionalLong.empty());\n+      fireDataChangedEvents(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDM2Mjk5", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-353436299", "createdAt": "2020-02-05T02:42:02Z", "commit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MjowM1rOFlqOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MjowM1rOFlqOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzUwOA==", "bodyText": "nit: if (pathStatRecord.pathExists()) would also work here.", "url": "https://github.com/apache/helix/pull/688#discussion_r375033508", "createdAt": "2020-02-05T02:42:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1309,21 +1309,21 @@ public void run() throws Exception {\n     }\n   }\n \n-  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners) {\n+  private void fireChildChangedEvents(final String path, Set<IZkChildListener> childListeners, boolean pathExists) {\n     try {\n       final ZkPathStatRecord pathStatRecord = new ZkPathStatRecord(path);\n       for (final IZkChildListener listener : childListeners) {\n         _eventThread.send(new ZkEvent(\"Children of \" + path + \" changed sent to \" + listener) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, hasListeners(path)),\n+              pathStatRecord.recordPathStat(getStat(path, hasListeners(path) && !pathExists),\n                   OptionalLong.empty());\n             }\n             List<String> children = null;\n-            if (pathStatRecord.pathExists()) {\n+            if (pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDM2NTY0", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-353436564", "createdAt": "2020-02-05T02:43:02Z", "commit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MzowM1rOFlqPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MzowM1rOFlqPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzczNA==", "bodyText": "nit: if (!pathStatRecord.pathExists()) also works here.", "url": "https://github.com/apache/helix/pull/688#discussion_r375033734", "createdAt": "2020-02-05T02:43:03Z", "author": {"login": "kaisun2000"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1279,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status\n             if (!pathStatRecord.pathChecked()) {\n-              pathStatRecord.recordPathStat(getStat(path, true), notificationTime);\n+              pathStatRecord.recordPathStat(getStat(path, pathExists), notificationTime);\n             }\n-            if (!pathStatRecord.pathExists()) {\n-              // no znode found at the path, trigger data deleted handler.\n+            if (!pathExists) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624b5709322454a40057680feca36149961738e"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTgwOTY0", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-353980964", "createdAt": "2020-02-05T19:27:52Z", "commit": {"oid": "c36398e83e81bc9dafb275338a9bcbd74a8464c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyNzo1MlrOFmEU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyNzo1MlrOFmEU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MTA3OQ==", "bodyText": "Can you add a comment like this? We reinstall watch based on the node has been deleted or not.", "url": "https://github.com/apache/helix/pull/688#discussion_r375461079", "createdAt": "2020-02-05T19:27:52Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -1278,12 +1275,10 @@ private void fireDataChangedEvents(final String path, Set<IZkDataListenerEntry>\n             + listener.getDataListener() + \" prefetch data: \" + listener.isPrefetchData()) {\n           @Override\n           public void run() throws Exception {\n-            // Reinstall watch before listener callbacks to check the znode status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36398e83e81bc9dafb275338a9bcbd74a8464c2"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccb9c0caa379ec5f6bcfc0b587ac41c31537be51", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/ccb9c0caa379ec5f6bcfc0b587ac41c31537be51", "committedDate": "2020-02-05T21:31:14Z", "message": "Fix the zk watcher leakage issue\n- reinstall the watchers before handling the event\n- then event handling logic doesn't need to re-install the watcher anymore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c61fa0c8ad3d8b41f1e4ee12165bfd647c407c1c", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/c61fa0c8ad3d8b41f1e4ee12165bfd647c407c1c", "committedDate": "2020-02-05T21:31:14Z", "message": "test and address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54b47f41b7d8a9bf75cbc9359dabf9b81e3f6fa", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/f54b47f41b7d8a9bf75cbc9359dabf9b81e3f6fa", "committedDate": "2020-02-05T21:31:14Z", "message": "Add more TODOs and add exists watcher for all child path when handling child events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "928b8abbd95cb31ff9c4f74c5d7b3f701ddc6956", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/928b8abbd95cb31ff9c4f74c5d7b3f701ddc6956", "committedDate": "2020-02-05T21:31:14Z", "message": "Update & leave the children list to be NULL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95fb6796b63aff211e9f5c22dadbcd965b492454", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/95fb6796b63aff211e9f5c22dadbcd965b492454", "committedDate": "2020-02-05T21:31:14Z", "message": "Realize the zookeeper process thread and zkClient thread run differently, update the PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fcf86f94de59451413d8ce000e7420296d2623f", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/4fcf86f94de59451413d8ce000e7420296d2623f", "committedDate": "2020-02-05T21:31:14Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794f0e2d6fccc5ab34a1818451b65a6d662bfc42", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/794f0e2d6fccc5ab34a1818451b65a6d662bfc42", "committedDate": "2020-02-05T21:31:14Z", "message": "Don't review yet, add the integration test case for watcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55dd3029383d0121c79cc714930449070f842094", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/55dd3029383d0121c79cc714930449070f842094", "committedDate": "2020-02-05T21:31:14Z", "message": "Verify the watches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b6113eea4732346dd6310cb3d7bcba8c7c61a5", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/82b6113eea4732346dd6310cb3d7bcba8c7c61a5", "committedDate": "2020-02-05T21:31:14Z", "message": "Finalize the integration test for zk watcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e78b4c99df98b5561c0e8cdbcf360b4887e2e7a", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/0e78b4c99df98b5561c0e8cdbcf360b4887e2e7a", "committedDate": "2020-02-05T21:31:14Z", "message": "Fix the TestHelixZkClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89fd1702fc382d3870736ffc3ae07264fbd559e8", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/89fd1702fc382d3870736ffc3ae07264fbd559e8", "committedDate": "2020-02-05T21:31:14Z", "message": "Minor code style change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "649e2596cb8bc8519417c554fd8ebad9f3c648c8", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/649e2596cb8bc8519417c554fd8ebad9f3c648c8", "committedDate": "2020-02-05T21:31:14Z", "message": "Revert the old code in fireChildChangedEvents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591e81b15c7c6d7c1ab2144d95f495312fc4f0fb", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/591e81b15c7c6d7c1ab2144d95f495312fc4f0fb", "committedDate": "2020-02-05T21:31:14Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525137eb4609d895cbf4cb5c04d50755d88e4b73", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/525137eb4609d895cbf4cb5c04d50755d88e4b73", "committedDate": "2020-02-05T21:31:14Z", "message": "Remove the overloading method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879422fa0767d45c69563a352e816cdb0648cedb", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/879422fa0767d45c69563a352e816cdb0648cedb", "committedDate": "2020-02-05T21:31:14Z", "message": "Fix a typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d4d9f828bee5ed1a4931c1c83d0034ac899605", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/64d4d9f828bee5ed1a4931c1c83d0034ac899605", "committedDate": "2020-02-05T21:31:14Z", "message": "Update the comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6ccf79c7dfe23c772144167f14a1404f38d88e4", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/c6ccf79c7dfe23c772144167f14a1404f38d88e4", "committedDate": "2020-02-05T20:07:32Z", "message": "Update the comment"}, "afterCommit": {"oid": "64d4d9f828bee5ed1a4931c1c83d0034ac899605", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/64d4d9f828bee5ed1a4931c1c83d0034ac899605", "committedDate": "2020-02-05T21:31:14Z", "message": "Update the comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/130a34ce96b341b34e9546d4db2ee98bbc9e5932", "committedDate": "2020-02-06T01:07:00Z", "message": "Add watcher test for cluster controller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTQ3Mjk0", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-354147294", "createdAt": "2020-02-06T01:11:12Z", "commit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjM0ODQ4", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-354234848", "createdAt": "2020-02-06T07:05:16Z", "commit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzowNToxNlrOFmQ-Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzoxMzozMVrOFmRGjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2ODMxMQ==", "bodyText": "So while the client is reconnected, it will just reinstall the watcher without checking, right? Will we still see watcher leakage?", "url": "https://github.com/apache/helix/pull/688#discussion_r375668311", "createdAt": "2020-02-06T07:05:16Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/zookeeper/ZkClient.java", "diffHunk": "@@ -960,10 +956,10 @@ public void process(WatchedEvent event) {\n \n   private void fireAllEvents() {\n     for (Entry<String, Set<IZkChildListener>> entry : _childListener.entrySet()) {\n-      fireChildChangedEvents(entry.getKey(), entry.getValue());\n+      fireChildChangedEvents(entry.getKey(), entry.getValue(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MDQxMw==", "bodyText": "Usually, I'm very cautious about changing the existing test case. This indicates that we changed the behavior. So after this change, the user will need to resubscribe the watch once it is deleted, right? Regardless of the Helix reserved node that has children change listeners to cover, how about the other zk path that we allow the user to subscribe listener? The listeners will be idle after the node has been removed once, right? This breaks the feature IMO.\nOverall, I think we will need to make it optional. 1. It is fine that we change the behavior for the reserved patch with additional children change listener on the parent node. But for the other random path from user's requests, we should keep the old behavior.", "url": "https://github.com/apache/helix/pull/688#discussion_r375670413", "createdAt": "2020-02-06T07:13:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/manager/zk/client/TestHelixZkClient.java", "diffHunk": "@@ -163,6 +163,8 @@ public void handleDataDeleted(String s) {\n       // expected to be here.\n     }\n \n+    // client B needs to re-install the data watch\n+    sharedZkClientB.watchForData(TEST_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130a34ce96b341b34e9546d4db2ee98bbc9e5932"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3515593299f8e3455d87fc979055dd1096e60ba4", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/3515593299f8e3455d87fc979055dd1096e60ba4", "committedDate": "2020-02-07T21:59:27Z", "message": "Add comment and TODO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDY0NDgz", "url": "https://github.com/apache/helix/pull/688#pullrequestreview-355464483", "createdAt": "2020-02-07T22:04:16Z", "commit": {"oid": "3515593299f8e3455d87fc979055dd1096e60ba4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4868, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}