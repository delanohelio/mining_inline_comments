{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA5NzEw", "number": 1328, "title": "Enhance ZkHelixVerifier and its related subclass to take a default wait period", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nResolve #1321\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nDue to #526, currently we have random sleep() in the test before verifyByPolling().\nThis cause test failure in different environment. Here we enhance ZKHelixVerifier\nfamily with an option in builder to add a waiting period. To keep it backward\ncompatible, without enable this waiting option, the code would behave exactly the\nsame as before.\n\nTests\n\n The following tests are written for this issue:\n\nNone\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nRunning\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-08-27T23:55:51Z", "url": "https://github.com/apache/helix/pull/1328", "merged": true, "mergeCommit": {"oid": "35ac0ff58b14e6ecc51280f88ed7c82c126bd248"}, "closed": true, "closedAt": "2020-09-13T02:48:59Z", "author": {"login": "kaisun2000"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDZpdPgFqTQ3Nzk1NTQ2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH75kVgFqTQ4NzEyMjE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTU1NDYz", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-477955463", "createdAt": "2020-08-28T18:51:55Z", "commit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MTo1NVrOHJRHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MTo1NVrOHJRHyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA==", "bodyText": "Do you need System.currentTimeMillis()?  Will the log4j print out the timestamp?", "url": "https://github.com/apache/helix/pull/1328#discussion_r479479754", "createdAt": "2020-08-28T18:51:55Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTU2Mzk2", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-477956396", "createdAt": "2020-08-28T18:53:38Z", "commit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MzozOFrOHJRKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo1MzozOFrOHJRKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDQwOA==", "bodyText": "\"finished retrieving live instances\"", "url": "https://github.com/apache/helix/pull/1328#discussion_r479480408", "createdAt": "2020-08-28T18:53:38Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -245,13 +248,17 @@ protected synchronized boolean verifyState() {\n           return false;\n         }\n       }\n+      \n+      LOG.debug(\"Verifier finished live instances at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMTQwMTc5", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-482140179", "createdAt": "2020-09-03T19:29:10Z", "commit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyOToxMFrOHM0mSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0Njo0NlrOHM1HgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjcyOA==", "bodyText": "Why are we adding new \"Deprecated\" methods?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483206728", "createdAt": "2020-09-03T19:29:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA==", "bodyText": "License and a comment for the class, please.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207180", "createdAt": "2020-09-03T19:30:02Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzU4NA==", "bodyText": "Moreover, my suggestion is that we put it to the test paths, not in the main.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207584", "createdAt": "2020-09-03T19:30:47Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA=="}, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw==", "bodyText": "There are more verify methods, I think we shall add COOL_DOWN to all of them. Otherwise, this verifier will behave inconsistently.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483208767", "createdAt": "2020-09-03T19:33:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjMwMw==", "bodyText": "Stack trace shall be debug log.", "url": "https://github.com/apache/helix/pull/1328#discussion_r483212303", "createdAt": "2020-09-03T19:40:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,10 +237,14 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout, with stack trace {}\",\n+                Arrays.asList(Thread.currentThread().getStackTrace()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUzNQ==", "bodyText": "I had a quick try, I think will work fine. You don't need to copy-paste all code.\npublic static class Builder extends BestPossibleExternalViewVerifier.Builder {\npublic Builder(String clusterName) {\nsuper(clusterName);\n}\n}", "url": "https://github.com/apache/helix/pull/1328#discussion_r483214535", "createdAt": "2020-09-03T19:45:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTExMw==", "bodyText": "TestBestPossibleExternalViewVerifier => BestPossibleExternalViewVerifierWithCoolDown?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215113", "createdAt": "2020-09-03T19:46:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTIzMg==", "bodyText": "Make it configurable?", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215232", "createdAt": "2020-09-03T19:46:46Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/50d0da044d22a68018a18b1777ae57b2a4a841a3", "committedDate": "2020-09-10T00:17:19Z", "message": "Implement TestBestPossibleExternalViewVerifier #1321\n\nTestBestPossibleExternalViewVerifier would have a default COOL_DOWN period\nbefore verifyByPolling. Due to #526, currently we have randow sleep in the\ntest before verifyByPolling. We intend to use TestBestPossibeVerifier\ninstead in our unit test.  While keep using BestPossibleExternalViewVerifier\nin production code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e53bb2bedd74ac0952a025d2e5cef970f60255b6", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/e53bb2bedd74ac0952a025d2e5cef970f60255b6", "committedDate": "2020-09-10T00:17:19Z", "message": "add the implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a060852d76f16595b439f119368619bd08b75565", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/a060852d76f16595b439f119368619bd08b75565", "committedDate": "2020-09-10T00:17:19Z", "message": "remove timestamp based on review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f675066fc1412a47cb556d9760040f035371237f", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/f675066fc1412a47cb556d9760040f035371237f", "committedDate": "2020-09-10T00:17:19Z", "message": "changed based on feedback, added strict version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "399d426dc4263a1e3144710f0ae832a92f9874b1", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/399d426dc4263a1e3144710f0ae832a92f9874b1", "committedDate": "2020-09-10T00:15:50Z", "message": "changed based on feedback, added strict version"}, "afterCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/f675066fc1412a47cb556d9760040f035371237f", "committedDate": "2020-09-10T00:17:19Z", "message": "changed based on feedback, added strict version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDkxMjg1", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-485491285", "createdAt": "2020-09-10T00:40:31Z", "commit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0MDozMVrOHPe37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDozNFrOHPfGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NjUyNQ==", "bodyText": "The timestamp seems not to be removed.\nAnd I really don't like these outputs even as debug. I think they are only useful when debugging. And we shall not add them to the repo.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485996525", "createdAt": "2020-09-10T00:40:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA=="}, "originalCommit": {"oid": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEwNA==", "bodyText": "This breaks the builder design pattern a little bit.\nI'm thinking if we have a better way.\nWhat if we add a configuration to the Verifier Builder called \"waitUntilVerify\"? It can be a generic configuration for all verifiers even production ones.\n\nIt is optional, so no backward compatibility issue.\nIt potentially helps our customers too, because they may face the same verify timing issue.\nIt requires the same amount of change as your current design. But no extra class introduced.\n\nPlease consider adding it to ZkHelixClusterVerifier.Builder, so all the verifier gets it.", "url": "https://github.com/apache/helix/pull/1328#discussion_r485997104", "createdAt": "2020-09-10T00:42:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -105,7 +105,7 @@ public BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clus\n     _dataProvider = new ResourceControllerDataProvider();\n   }\n \n-  private BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+  protected BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDExOQ==", "bodyText": "nit, keep the same log string style?\n\"LOG.error(\"verifier timeout out with timeout {}\", timeout);\"", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000119", "createdAt": "2020-09-10T00:54:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,6 +236,9 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI0MA==", "bodyText": "Remove?", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000240", "createdAt": "2020-09-10T00:54:34Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -19,6 +19,7 @@\n  * under the License.\n  */\n \n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f675066fc1412a47cb556d9760040f035371237f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32345cb03154a6bc01a8fe4862ee3ef7006af134", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/32345cb03154a6bc01a8fe4862ee3ef7006af134", "committedDate": "2020-09-11T02:33:31Z", "message": "refactor based on jj's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/bee382eaff10df22edefb727d97fc5afda593843", "committedDate": "2020-09-11T02:37:32Z", "message": "remove the unused array."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDMyNDk5", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-487032499", "createdAt": "2020-09-11T18:30:51Z", "commit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDo1MVrOHQpeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo0MjowNVrOHQpylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODc1NQ==", "bodyText": "Let's just call it \"waitPeriodTillVerify. Cooldown is not an obvious name.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487218755", "createdAt": "2020-09-11T18:30:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -335,6 +352,11 @@ public B setZkAddr(String zkAddress) {\n       return setZkAddress(zkAddress);\n     }\n \n+    public B setWaitTillVerify(int waitPeriod) {\n+      _coolDown = waitPeriod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDE1OQ==", "bodyText": "As we discussed, please remove the debug logs if not absolutely necessary for long term usage.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487220159", "createdAt": "2020-09-11T18:34:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMzk1OA==", "bodyText": "I believe you can and should add the same wait for verifyByZkCallback too.\nThe logic of verifyByZkCallback is that\n\nsubscribe to changes.\nno matter if change happens, verify the state for once.\nif subscription results in some notification, then verify in parallel.\nany of the paths succeed, then the verify succeeds.\n\nIn this case, we shall wait until the first subscribe to ensure the waitTillVerify config takes effect. This won't cause any problem with verifying logic. Since if the change happens before we subscribe, we are still fine because the first default verify check will be done once at least.", "url": "https://github.com/apache/helix/pull/1328#discussion_r487223958", "createdAt": "2020-09-11T18:42:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -187,6 +190,14 @@ public boolean verifyByZkCallback() {\n    * @return\n    */\n   public boolean verifyByPolling(long timeout, long period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee382eaff10df22edefb727d97fc5afda593843"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64a8b704f3d92be7af0d19d444b7edb63a95781", "author": {"user": null}, "url": "https://github.com/apache/helix/commit/c64a8b704f3d92be7af0d19d444b7edb63a95781", "committedDate": "2020-09-11T20:56:05Z", "message": "add waiting period for zk trigger."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTIyMTg2", "url": "https://github.com/apache/helix/pull/1328#pullrequestreview-487122186", "createdAt": "2020-09-11T21:01:59Z", "commit": {"oid": "c64a8b704f3d92be7af0d19d444b7edb63a95781"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4248, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}