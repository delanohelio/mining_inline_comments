{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzg1OTYz", "number": 1413, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1NzoyMVrOEnpLVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1OTo1OVrOErBd3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA0NTY3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1NzoyMVrOHYWsdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzoyODoxNlrOHZTJBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5OTcwMQ==", "bodyText": "I think it may not be the place to do that. We can do it in maintenance recovery stage. I cannot remember the details of how to move the last offline time to history and set -1. It happened at cache refresh as well. So I think it is better to make it after cache refresh fully complete.", "url": "https://github.com/apache/helix/pull/1413#discussion_r495299701", "createdAt": "2020-09-25T22:57:21Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwNTYxNA==", "bodyText": "It needs to be here. The reason is that we need the old snapshot; see line 258. Once refresh happens, the old snapshot will be lost, and we wouldn't be able to compute the 'new' live nodes delta.\nIn terms of history update, it's updateOfflineInstanceHistory() down below. You can see that I also handled that case.", "url": "https://github.com/apache/helix/pull/1413#discussion_r495305614", "createdAt": "2020-09-25T23:07:29Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5OTcwMQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNTExMw==", "bodyText": "Then that may not be the snapshot we need. Because, this change could cause race condition and let old machine starting bootstrapping, which breaks our rule.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496115113", "createdAt": "2020-09-28T17:24:43Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5OTcwMQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MDA1NQ==", "bodyText": "Could you elaborate why there would be race conditions? The cache refresh is synchronously computed in the pipeline main thread; rebalancing is calculated on the same pipeline.\nAlso with Jiajun's comment: if filtering is done at getter, I don't think there would possibly be race conditions in this scenario.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496290055", "createdAt": "2020-09-28T23:28:16Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5OTcwMQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTg5OTEzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowNTo0MVrOHZJ40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzoyOTo1OVrOHZTLIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzODQ0OQ==", "bodyText": "It's better to ensure the cache has all the facts. Removing the timedout instances from the cache might be suboptimal since after this, no one tracking the real alive nodes anymore.\nIt would be easier to keep tracking the whole list and the timedout list, then if the filter option is turned on, we filter in the get method. In this way, we still have the capability to return the full list.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496138449", "createdAt": "2020-09-28T18:05:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(\n+              accessor, instance, timeOutWindow)) {\n+            _timedOutInstanceDuringMaintenance.add(instance);\n+          }\n+        }\n+\n+        // Remove all timed-out nodes that were recorded in this maintenance duration\n+        for (String instance : _timedOutInstanceDuringMaintenance) {\n+          _liveInstanceCache.deletePropertyByName(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MDU5Mg==", "bodyText": "That's a good idea. Will try.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496290592", "createdAt": "2020-09-28T23:29:59Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(\n+              accessor, instance, timeOutWindow)) {\n+            _timedOutInstanceDuringMaintenance.add(instance);\n+          }\n+        }\n+\n+        // Remove all timed-out nodes that were recorded in this maintenance duration\n+        for (String instance : _timedOutInstanceDuringMaintenance) {\n+          _liveInstanceCache.deletePropertyByName(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzODQ0OQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTkxMjk0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowOTo1MVrOHZKBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDowNTowOFrOHbgxaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDY0MA==", "bodyText": "If there is a leadership switch, the oldLiveInstances list will be empty. So the behavior would rely on isInstanceTimedOutDuringMaintenance() only. My guess is that we don't need oldLiveInstances list, since it won't be able to cover leadership switch case anyway.\nIf isInstanceTimedOutDuringMaintenance() has anything missed, so you have to relies on the oldLiveInstances list, then we need to fix it within the scope of isInstanceTimedOutDuringMaintenance().", "url": "https://github.com/apache/helix/pull/1413#discussion_r496140640", "createdAt": "2020-09-28T18:09:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MTA4NA==", "bodyText": "oldLiveInstances is for performance only. Losing it during leadership switch is still fine.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496291084", "createdAt": "2020-09-28T23:31:29Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDY0MA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxMzY5Nw==", "bodyText": "Come to think about it, it's not fine: if oldLiveInstances is lost, every node is subject to timeout check; however, the timeout check only regards the node's last offline time. That means if a node is online for 8 weeks and last offline time is 9 weeks ago, we will still mark it as timed_out. That would be incorrect. Let me think about this case and update. @jiajunwang", "url": "https://github.com/apache/helix/pull/1413#discussion_r497213697", "createdAt": "2020-09-30T02:52:34Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDY0MA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxMDUzOQ==", "bodyText": "The new method should address the problem.", "url": "https://github.com/apache/helix/pull/1413#discussion_r498610539", "createdAt": "2020-10-02T04:05:08Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,9 +254,34 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a copy of old live instances in case of maintenance mode\n+      Map<String, LiveInstance> oldLiveInstances = getLiveInstances();\n       _liveInstanceCache.refresh(accessor);\n       _updateInstanceOfflineTime = true;\n       refreshedType.add(HelixConstants.ChangeType.LIVE_INSTANCE);\n+\n+      // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+      // for timed-out nodes\n+      long timeOutWindow = _clusterConfig.getMaintenanceOfflineNodeTimeOut();\n+      if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+        for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+          // For every 'new' live node, check if it's timed-out\n+          if (!oldLiveInstances.containsKey(instance) && isInstanceTimedOutDuringMaintenance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDY0MA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTkyMzM2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxMjo1OVrOHZKH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozMjowOVrOHZTNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MjI5NQ==", "bodyText": "nit, this calculation does not need to be bound with the maintenance mode, let's don't mention \"maintenance mode\" in the log.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496142295", "createdAt": "2020-09-28T18:12:59Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();\n+    // lastOfflineTime is only negative if there is no offline history or the time format is wrong.\n+    // Since this instance is a 'new' live instance, not having offline history = first time created\n+    // instance; during maintenance mode, no partition will be assigned to such a new instance,\n+    // therefore it's okay to no time it out. The wrong format case shouldn't happen at all and will\n+    // not be handled either.\n+    if (lastOfflineTime < 0) {\n+      return false;\n+    }\n+\n+    long currentTime = System.currentTimeMillis();\n+    if (currentTime - lastOfflineTime > timeOutWindow) {\n+      LogUtil.logWarn(logger, getClusterEventId(), String.format(\n+          \"During maintenance mode, instance %s is timed-out due to its offline time. Current time: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MTI3MQ==", "bodyText": "Why is that? This calculation is only done during the maintenance mode.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496291271", "createdAt": "2020-09-28T23:32:09Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();\n+    // lastOfflineTime is only negative if there is no offline history or the time format is wrong.\n+    // Since this instance is a 'new' live instance, not having offline history = first time created\n+    // instance; during maintenance mode, no partition will be assigned to such a new instance,\n+    // therefore it's okay to no time it out. The wrong format case shouldn't happen at all and will\n+    // not be handled either.\n+    if (lastOfflineTime < 0) {\n+      return false;\n+    }\n+\n+    long currentTime = System.currentTimeMillis();\n+    if (currentTime - lastOfflineTime > timeOutWindow) {\n+      LogUtil.logWarn(logger, getClusterEventId(), String.format(\n+          \"During maintenance mode, instance %s is timed-out due to its offline time. Current time: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MjI5NQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTkzNzk2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxNzoxN1rOHZKQ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNTozM1rOHZTRyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NDYwMg==", "bodyText": "Strictly check for ONLINE? Of course, keeping the < 0 checks for safe is still good here, but optional. I suggest adding \"lastOfflineTime == ONLINE\" to make the logic easier for the reader to understand.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496144602", "createdAt": "2020-09-28T18:17:17Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();\n+    // lastOfflineTime is only negative if there is no offline history or the time format is wrong.\n+    // Since this instance is a 'new' live instance, not having offline history = first time created\n+    // instance; during maintenance mode, no partition will be assigned to such a new instance,\n+    // therefore it's okay to no time it out. The wrong format case shouldn't happen at all and will\n+    // not be handled either.\n+    if (lastOfflineTime < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MjI5Ng==", "bodyText": "This isn't the actual LAST_OFFLINE_TIME field in History; I can understand the confusion due to variable name.\nI implemented a new function called getLastTimeInOfflineHistory() where the latest date in OFFLINE is returned. In the case when that cannot be returned, -1 will be the error indicator; you could refer the comment above for more detail.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496292296", "createdAt": "2020-09-28T23:35:33Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();\n+    // lastOfflineTime is only negative if there is no offline history or the time format is wrong.\n+    // Since this instance is a 'new' live instance, not having offline history = first time created\n+    // instance; during maintenance mode, no partition will be assigned to such a new instance,\n+    // therefore it's okay to no time it out. The wrong format case shouldn't happen at all and will\n+    // not be handled either.\n+    if (lastOfflineTime < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NDYwMg=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTk0OTc2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyMDo1MVrOHZKYMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNjowOFrOHZTScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NjQ4MA==", "bodyText": "There is a chance that we failed to record the offlinetime, or if pipeline runs slower, the offline time is not accurately recorded. I don't think there is a solution for it, but let's mention in the comment.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496146480", "createdAt": "2020-09-28T18:20:51Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NzY5Mg==", "bodyText": "Due to the same reason, we might want to limit the timeout setup to be more than 5 mins (for example). A very small number does not make sense, and it won't work as expected anyway.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496147692", "createdAt": "2020-09-28T18:23:07Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NjQ4MA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MjQ2Nw==", "bodyText": "Sounds good;\nI will add that in the javadoc, what do you think? I don't think it should be strictly enforced.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496292467", "createdAt": "2020-09-28T23:36:08Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +756,41 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    PropertyKey propertyKey = keyBuilder.participantHistory(instance);\n+    ParticipantHistory history = accessor.getProperty(propertyKey);\n+\n+    // Cannot use _instanceOfflineTimeMap. _instanceOfflineTimeMap is last updated in the previous\n+    // pipeline execution; it is possible a new offline timestamp is updated after the previous\n+    // pipeline execution, so we need the most updated timestamp.\n+    long lastOfflineTime = history.getLastTimeInOfflineHistory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NjQ4MA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTk2NDU2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyNToxMFrOHZKhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNjo1MlrOHZTTWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0ODgwMw==", "bodyText": "nit, OFFLINE_NODE_TIME_OUT_FOR_MAINTENANCE_MODE?", "url": "https://github.com/apache/helix/pull/1413#discussion_r496148803", "createdAt": "2020-09-28T18:25:10Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -122,7 +122,13 @@\n     // don't specify their individual pool sizes, this value will be used for all participants; if\n     // none of participants or the cluster define pool sizes,\n     // TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE will be used to create pool sizes.\n-    GLOBAL_TARGET_TASK_THREAD_POOL_SIZE\n+    GLOBAL_TARGET_TASK_THREAD_POOL_SIZE,\n+\n+    // The time out window for offline nodes during maintenance mode; if an offline node has been\n+    // offline for more than this specified time period, it's treated as offline for the rest of\n+    // the maintenance mode's duration even when it comes online.\n+    // The unit is milliseconds.\n+    MAINTENANCE_OFFLINE_NODE_TIME_OUT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MjY5OA==", "bodyText": "Sure, but wouldn't that be too long? I don't know the convention about variable length, so I took a shorter version.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496292698", "createdAt": "2020-09-28T23:36:52Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ClusterConfig.java", "diffHunk": "@@ -122,7 +122,13 @@\n     // don't specify their individual pool sizes, this value will be used for all participants; if\n     // none of participants or the cluster define pool sizes,\n     // TaskConstants.DEFAULT_TASK_THREAD_POOL_SIZE will be used to create pool sizes.\n-    GLOBAL_TARGET_TASK_THREAD_POOL_SIZE\n+    GLOBAL_TARGET_TASK_THREAD_POOL_SIZE,\n+\n+    // The time out window for offline nodes during maintenance mode; if an offline node has been\n+    // offline for more than this specified time period, it's treated as offline for the rest of\n+    // the maintenance mode's duration even when it comes online.\n+    // The unit is milliseconds.\n+    MAINTENANCE_OFFLINE_NODE_TIME_OUT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0ODgwMw=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjE0MzY5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/model/TestClusterConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxODo0MlrOHZMQtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNzowMVrOHZTTiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzMzNA==", "bodyText": "We need a test to cover the get default value case.\nMight be easier for you to combine the 2 new tests.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496177334", "createdAt": "2020-09-28T19:18:42Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/model/TestClusterConfig.java", "diffHunk": "@@ -298,6 +298,26 @@ public void testAsyncGlobalRebalanceOption() {\n             false), true);\n   }\n \n+  @Test\n+  public void testGetMaintenanceOfflineNodeTimeOut() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Mjc0NA==", "bodyText": "Sounds good.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496292744", "createdAt": "2020-09-28T23:37:01Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/model/TestClusterConfig.java", "diffHunk": "@@ -298,6 +298,26 @@ public void testAsyncGlobalRebalanceOption() {\n             false), true);\n   }\n \n+  @Test\n+  public void testGetMaintenanceOfflineNodeTimeOut() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzMzNA=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjE0NjcxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxOTozNVrOHZMSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNzoyNFrOHZTUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzgwNQ==", "bodyText": "private?", "url": "https://github.com/apache/helix/pull/1413#discussion_r496177805", "createdAt": "2020-09-28T19:19:35Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -40,7 +41,9 @@\n   private static Logger LOG = LoggerFactory.getLogger(ParticipantHistory.class);\n \n   private final static int HISTORY_SIZE = 20;\n-  private enum ConfigProperty {\n+  final static String HISTORY_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss:SSS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3ODYwOA==", "bodyText": "If required in the test, then either put it in HelixConstants or redefine a string in the test case (this helps to prevent if anyone changes the format that breaks the compatibility)", "url": "https://github.com/apache/helix/pull/1413#discussion_r496178608", "createdAt": "2020-09-28T19:21:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -40,7 +41,9 @@\n   private static Logger LOG = LoggerFactory.getLogger(ParticipantHistory.class);\n \n   private final static int HISTORY_SIZE = 20;\n-  private enum ConfigProperty {\n+  final static String HISTORY_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss:SSS\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzgwNQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Mjg2NA==", "bodyText": "That's a great idea; I'll just redefine it in test.", "url": "https://github.com/apache/helix/pull/1413#discussion_r496292864", "createdAt": "2020-09-28T23:37:24Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -40,7 +41,9 @@\n   private static Logger LOG = LoggerFactory.getLogger(ParticipantHistory.class);\n \n   private final static int HISTORY_SIZE = 20;\n-  private enum ConfigProperty {\n+  final static String HISTORY_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss:SSS\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzgwNQ=="}, "originalCommit": {"oid": "ca409d40d1709a0f300c1e4fb09ac4112fbafafc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE4MzM4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo1MDo0NVrOHb7Qag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxODozOFrOHcvqlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NDQ1OA==", "bodyText": "It has the edge case for first interval. It is the interval online time just before maintenance mode, but somehow we dont check whether the offline time is before maintenance.\nLet's say if the instance is offline before maintenance we need the potential timeout = online time - Math.max(offlinetimestamp, maintenance entering time);", "url": "https://github.com/apache/helix/pull/1413#discussion_r499044458", "createdAt": "2020-10-02T20:50:45Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.\n+    if (!offlineTimestamps.isEmpty()\n+        && offlineTimestamps.get(offlineTimestamps.size() - 1) > onlineTimestamps\n+        .get(onlineTimestamps.size() - 1)) {\n+      // Make sure for each offline timestamp, 2 online timestamps creates a range around it;\n+      // this is usually true unless the timestamps are malformed (missing online timestamps)\n+      onlineTimestamps.add(currentTime);\n+    }\n+\n+    // Hop between each pair of online timestamps and find the maximum offline window\n+    for (int onlineTimestampIndex = 1, offlineTimestampIndex = 0;\n+        onlineTimestampIndex < onlineTimestamps.size() && offlineTimestampIndex < offlineTimestamps\n+            .size(); onlineTimestampIndex++) {\n+      long onlineTimestamp = onlineTimestamps.get(onlineTimestampIndex);\n+      long offlineTimeStamp = offlineTimestamps.get(offlineTimestampIndex);\n+\n+      // If the offline timestamp isn't within this pair of online timestamp, continue\n+      if (offlineTimeStamp > onlineTimestamp) {\n+        continue;\n+      }\n+\n+      // Check the largest offline window against the timeout window\n+      if (onlineTimestamp - offlineTimeStamp > timeOutWindow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MDQ4NQ==", "bodyText": "The first offline time is always after the first online time based on my parsing logic, see above.\nTherefore we always start checking by the second online time, and do (second online time - first offline time), for example.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499050485", "createdAt": "2020-10-02T21:06:18Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.\n+    if (!offlineTimestamps.isEmpty()\n+        && offlineTimestamps.get(offlineTimestamps.size() - 1) > onlineTimestamps\n+        .get(onlineTimestamps.size() - 1)) {\n+      // Make sure for each offline timestamp, 2 online timestamps creates a range around it;\n+      // this is usually true unless the timestamps are malformed (missing online timestamps)\n+      onlineTimestamps.add(currentTime);\n+    }\n+\n+    // Hop between each pair of online timestamps and find the maximum offline window\n+    for (int onlineTimestampIndex = 1, offlineTimestampIndex = 0;\n+        onlineTimestampIndex < onlineTimestamps.size() && offlineTimestampIndex < offlineTimestamps\n+            .size(); onlineTimestampIndex++) {\n+      long onlineTimestamp = onlineTimestamps.get(onlineTimestampIndex);\n+      long offlineTimeStamp = offlineTimestamps.get(offlineTimestampIndex);\n+\n+      // If the offline timestamp isn't within this pair of online timestamp, continue\n+      if (offlineTimeStamp > onlineTimestamp) {\n+        continue;\n+      }\n+\n+      // Check the largest offline window against the timeout window\n+      if (onlineTimestamp - offlineTimeStamp > timeOutWindow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NDQ1OA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMjk4NQ==", "bodyText": "Do we really need to go through every pair? Can we just look at the pair with offline time before maintenance entrance and online time after it?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499822985", "createdAt": "2020-10-05T19:29:42Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.\n+    if (!offlineTimestamps.isEmpty()\n+        && offlineTimestamps.get(offlineTimestamps.size() - 1) > onlineTimestamps\n+        .get(onlineTimestamps.size() - 1)) {\n+      // Make sure for each offline timestamp, 2 online timestamps creates a range around it;\n+      // this is usually true unless the timestamps are malformed (missing online timestamps)\n+      onlineTimestamps.add(currentTime);\n+    }\n+\n+    // Hop between each pair of online timestamps and find the maximum offline window\n+    for (int onlineTimestampIndex = 1, offlineTimestampIndex = 0;\n+        onlineTimestampIndex < onlineTimestamps.size() && offlineTimestampIndex < offlineTimestamps\n+            .size(); onlineTimestampIndex++) {\n+      long onlineTimestamp = onlineTimestamps.get(onlineTimestampIndex);\n+      long offlineTimeStamp = offlineTimestamps.get(offlineTimestampIndex);\n+\n+      // If the offline timestamp isn't within this pair of online timestamp, continue\n+      if (offlineTimeStamp > onlineTimestamp) {\n+        continue;\n+      }\n+\n+      // Check the largest offline window against the timeout window\n+      if (onlineTimestamp - offlineTimeStamp > timeOutWindow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NDQ1OA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMzEyNg==", "bodyText": "@lei-xia We need to handle the case of \"offline for too long\" during maintenance mode as well, right?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499903126", "createdAt": "2020-10-05T22:18:38Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.\n+    if (!offlineTimestamps.isEmpty()\n+        && offlineTimestamps.get(offlineTimestamps.size() - 1) > onlineTimestamps\n+        .get(onlineTimestamps.size() - 1)) {\n+      // Make sure for each offline timestamp, 2 online timestamps creates a range around it;\n+      // this is usually true unless the timestamps are malformed (missing online timestamps)\n+      onlineTimestamps.add(currentTime);\n+    }\n+\n+    // Hop between each pair of online timestamps and find the maximum offline window\n+    for (int onlineTimestampIndex = 1, offlineTimestampIndex = 0;\n+        onlineTimestampIndex < onlineTimestamps.size() && offlineTimestampIndex < offlineTimestamps\n+            .size(); onlineTimestampIndex++) {\n+      long onlineTimestamp = onlineTimestamps.get(onlineTimestampIndex);\n+      long offlineTimeStamp = offlineTimestamps.get(offlineTimestampIndex);\n+\n+      // If the offline timestamp isn't within this pair of online timestamp, continue\n+      if (offlineTimeStamp > onlineTimestamp) {\n+        continue;\n+      }\n+\n+      // Check the largest offline window against the timeout window\n+      if (onlineTimestamp - offlineTimeStamp > timeOutWindow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NDQ1OA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk4Nzg2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1NTo1OFrOHclwbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMTowN1rOHcl7_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MDc4MA==", "bodyText": "What is difference this w/ getLastOfflineTime?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499740780", "createdAt": "2020-10-05T16:55:58Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -112,6 +129,22 @@ public long getLastOfflineTime() {\n     return offlineTime;\n   }\n \n+  /**\n+   * Get the time when this node last goes offline in history. If the node does not have offline\n+   * history or contains invalid date as the last element, return -1.\n+   *\n+   * @return\n+   */\n+  public long getLastTimeInOfflineHistory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mzc0MQ==", "bodyText": "getLastOfflineTime returns LAST_OFFLINE_TIME, which can be either a timestamp or a -1 for ONLINE. getLastTimeInOfflineHistory returns the last timestamp in OFFLINE (list field), which is always a timestamp.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499743741", "createdAt": "2020-10-05T17:01:07Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -112,6 +129,22 @@ public long getLastOfflineTime() {\n     return offlineTime;\n   }\n \n+  /**\n+   * Get the time when this node last goes offline in history. If the node does not have offline\n+   * history or contains invalid date as the last element, return -1.\n+   *\n+   * @return\n+   */\n+  public long getLastTimeInOfflineHistory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MDc4MA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk5MjQ1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1NzoxMFrOHclzNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1NzoxMFrOHclzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MTQ5NA==", "bodyText": "minor:  -> historyDateStringToLong?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499741494", "createdAt": "2020-10-05T16:57:10Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +183,73 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(parseHistoryDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /**\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  public static long parseHistoryDateStringToLong(String dateString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxMjU5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzowN1rOHcmABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzowN1rOHcmABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDc3Mg==", "bodyText": "filterTimedOutInstances is a bit confusing, it could mean either the result contains only Timeouted Instances or the other way. Suggest to rename it as:  excludeTimeoutInstances.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499744772", "createdAt": "2020-10-05T17:03:07Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n-    return _liveInstanceCache.getPropertyMap();\n+    return getLiveInstances(false);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   * @param filterTimedOutInstances - Only set true during maintenance mode. If true, filter out\n+   *                                instances that are timed-out during maintenance mode; instances\n+   *                                are timed-out if they have been offline for a while before going\n+   *                                live during maintenance mode.\n+   * @return\n+   */\n+  public Map<String, LiveInstance> getLiveInstances(boolean filterTimedOutInstances) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAzNTkzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMDowNFrOHcmOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo1MTo0MlrOHddyjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODUwNQ==", "bodyText": "There could be some issue with this if a long-offline instance (say InstanceA) came back just after the cluster enter maintenance mode and before the next pipeline started.  InstanceA will be in the _liveInstanceSnapshotForMaintenance set (see line 261), so it will skip the timeout check here.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499748505", "createdAt": "2020-10-05T17:10:04Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +306,33 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;\n+        // 3. For all other nodes, check if it's timed-out.\n+        // When maintenance mode is first entered, all nodes will be checked as a result.\n+        if (!_timedOutInstanceDuringMaintenance.contains(instance)\n+            && !_liveInstanceSnapshotForMaintenance.containsKey(instance)\n+            && isInstanceTimedOutDuringMaintenance(accessor, instance, timeOutWindow)) {\n+          _timedOutInstanceDuringMaintenance.add(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NDUxNw==", "bodyText": "For the first time it enters maintenance mode, there will be no snapshot stored. That's because maintenance mode signal is processed after refreshLiveInstances().\nSince the snapshot is empty, all nodes will be checked when we first enter maintenance mode.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499754517", "createdAt": "2020-10-05T17:20:45Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +306,33 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;\n+        // 3. For all other nodes, check if it's timed-out.\n+        // When maintenance mode is first entered, all nodes will be checked as a result.\n+        if (!_timedOutInstanceDuringMaintenance.contains(instance)\n+            && !_liveInstanceSnapshotForMaintenance.containsKey(instance)\n+            && isInstanceTimedOutDuringMaintenance(accessor, instance, timeOutWindow)) {\n+          _timedOutInstanceDuringMaintenance.add(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODUwNQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTE1NQ==", "bodyText": "_liveInstanceSnapshotForMaintenance will be refreshed in the beginning of every pipeline, it contains all liveInstances (including these that should be timeout-ed), right? Say, if an (long-offline) instance comes back after the first pipeline before the next pipeline, that instance will be included in the _liveInstanceSnapshotForMaintenance and won't be checked here?   I.e, is _liveInstanceSnapshotForMaintenance\nalways equal to getLiveInstances()?  If it is, what is point of keeping a separate cache?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500445155", "createdAt": "2020-10-06T16:43:55Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +306,33 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;\n+        // 3. For all other nodes, check if it's timed-out.\n+        // When maintenance mode is first entered, all nodes will be checked as a result.\n+        if (!_timedOutInstanceDuringMaintenance.contains(instance)\n+            && !_liveInstanceSnapshotForMaintenance.containsKey(instance)\n+            && isInstanceTimedOutDuringMaintenance(accessor, instance, timeOutWindow)) {\n+          _timedOutInstanceDuringMaintenance.add(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODUwNQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MTgxNA==", "bodyText": "No, _liveInstanceSnapshotForMaintenance is equal to getLiveInstances() from the last pipeline. If a long-offline instance coms back after the first pipeline and before the next pipeline, it will not be in the snapshot obtained during the next pipeline, and will therefore be checked by the timeout logic. Whether this instance fails the check, it will be stored either in the snapshot or in the \"timed-out cache\", and it will not be checked by the pipeline after.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500471814", "createdAt": "2020-10-06T17:26:40Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +306,33 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;\n+        // 3. For all other nodes, check if it's timed-out.\n+        // When maintenance mode is first entered, all nodes will be checked as a result.\n+        if (!_timedOutInstanceDuringMaintenance.contains(instance)\n+            && !_liveInstanceSnapshotForMaintenance.containsKey(instance)\n+            && isInstanceTimedOutDuringMaintenance(accessor, instance, timeOutWindow)) {\n+          _timedOutInstanceDuringMaintenance.add(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODUwNQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1ODgyOA==", "bodyText": "This has been changed. We now rely on the previous calculation result, which makes more sense when reading.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500658828", "createdAt": "2020-10-06T23:51:42Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +306,33 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;\n+        // 3. For all other nodes, check if it's timed-out.\n+        // When maintenance mode is first entered, all nodes will be checked as a result.\n+        if (!_timedOutInstanceDuringMaintenance.contains(instance)\n+            && !_liveInstanceSnapshotForMaintenance.containsKey(instance)\n+            && isInstanceTimedOutDuringMaintenance(accessor, instance, timeOutWindow)) {\n+          _timedOutInstanceDuringMaintenance.add(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODUwNQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA0MzcwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMjoyMlrOHcmTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMjowMlrOHcmpFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0OTc0OQ==", "bodyText": "Can we cache the results somewhere (we may already have it?) instead of recomputing every time this method is called?  I think getLiveInstances are called in many places during one pipeline.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499749749", "createdAt": "2020-10-05T17:12:22Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n-    return _liveInstanceCache.getPropertyMap();\n+    return getLiveInstances(false);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   * @param filterTimedOutInstances - Only set true during maintenance mode. If true, filter out\n+   *                                instances that are timed-out during maintenance mode; instances\n+   *                                are timed-out if they have been offline for a while before going\n+   *                                live during maintenance mode.\n+   * @return\n+   */\n+  public Map<String, LiveInstance> getLiveInstances(boolean filterTimedOutInstances) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTI4Ng==", "bodyText": "Makes sense.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499755286", "createdAt": "2020-10-05T17:22:02Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n-    return _liveInstanceCache.getPropertyMap();\n+    return getLiveInstances(false);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   * @param filterTimedOutInstances - Only set true during maintenance mode. If true, filter out\n+   *                                instances that are timed-out during maintenance mode; instances\n+   *                                are timed-out if they have been offline for a while before going\n+   *                                live during maintenance mode.\n+   * @return\n+   */\n+  public Map<String, LiveInstance> getLiveInstances(boolean filterTimedOutInstances) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0OTc0OQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA0ODAyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMzozNFrOHcmWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo0OToyN1rOHcu95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDQwNw==", "bodyText": "In which places we will need  LiveInstances containing timeouted instance?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499750407", "createdAt": "2020-10-05T17:13:34Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NzY3Mg==", "bodyText": "In short: everywhere else that isn't critical to \"timing out\" instances.\nThe new getLiveInstances(boolean) is minimized to only one place: MessageGenerationPhase. This approach minimizes any impact to existing code while also making the \"timed-out\" instances not reachable from the controller; effectively, those instances will have no operations done on them. This decision is made after @jiajunwang 's comment that we shouldn't directly alter the live instance cache; we should only alter the getter.\nPlease let me know if this change makes sense. I believe only changing MessageGenerationPhase is sufficient.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499757672", "createdAt": "2020-10-05T17:26:31Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDQwNw=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTYzOQ==", "bodyText": "Actually I'm rethinking this. There could be some external view issue. Will update.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499855639", "createdAt": "2020-10-05T20:33:00Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDQwNw=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5MTY4Ng==", "bodyText": "Now getLiveInstances will default to excluding timed-out ones.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499891686", "createdAt": "2020-10-05T21:49:27Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +463,32 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDQwNw=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTMwODgxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozMToxNlrOHco5oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMzoxNVrOHcsxlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MjI4OQ==", "bodyText": "Could this create inconsistency since LivInstances used by all other places in the pipeline are different from here?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499792289", "createdAt": "2020-10-05T18:31:16Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -89,7 +89,7 @@ protected void processEvent(ClusterEvent event, ResourcesStateMap resourcesState\n           + \". Requires HelixManager|DataCache|RESOURCES|CURRENT_STATE|INTERMEDIATE_STATE\");\n     }\n \n-    Map<String, LiveInstance> liveInstances = cache.getLiveInstances();\n+    Map<String, LiveInstance> liveInstances = cache.getLiveInstances(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTc2Nw==", "bodyText": "Duplicate discussion with the above comment.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499855767", "createdAt": "2020-10-05T20:33:15Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -89,7 +89,7 @@ protected void processEvent(ClusterEvent event, ResourcesStateMap resourcesState\n           + \". Requires HelixManager|DataCache|RESOURCES|CURRENT_STATE|INTERMEDIATE_STATE\");\n     }\n \n-    Map<String, LiveInstance> liveInstances = cache.getLiveInstances();\n+    Map<String, LiveInstance> liveInstances = cache.getLiveInstances(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MjI4OQ=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ4ODA1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNTo1OVrOHcqqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjowMTowNlrOHdbeyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTA4OA==", "bodyText": "Can we wrap up the logic here into a method in ParticipantHistory, such as getAllOnlineHistory()?", "url": "https://github.com/apache/helix/pull/1413#discussion_r499821088", "createdAt": "2020-10-05T19:25:59Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MzQ4MA==", "bodyText": "Please see below.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499853480", "createdAt": "2020-10-05T20:28:41Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTA4OA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTAwMA==", "bodyText": "Moved to ParticipantHistory", "url": "https://github.com/apache/helix/pull/1413#discussion_r500621000", "createdAt": "2020-10-06T22:01:06Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTA4OA=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ5MDM3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNjo0NFrOHcqrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjowMToxNFrOHdbfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTQ2Mw==", "bodyText": "Similar here, the logic should belong to ParticipantHistory, such as getAllOfflineHistory().", "url": "https://github.com/apache/helix/pull/1413#discussion_r499821463", "createdAt": "2020-10-05T19:26:44Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MzU0OA==", "bodyText": "Please see below.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499853548", "createdAt": "2020-10-05T20:28:48Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTQ2Mw=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTA2MQ==", "bodyText": "Moved to ParticipantHistory", "url": "https://github.com/apache/helix/pull/1413#discussion_r500621061", "createdAt": "2020-10-06T22:01:14Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTQ2Mw=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ5NTg4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyODoyOVrOHcqvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzozOToxNFrOHddjGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMjM3Mg==", "bodyText": "This may not be true, for example, a newly added host?  (I.e, our code should be able to handle these corner cases properly).", "url": "https://github.com/apache/helix/pull/1413#discussion_r499822372", "createdAt": "2020-10-05T19:28:29Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MzM4NA==", "bodyText": "This ties back to the previous 2 sections of algorithm: they are not just parsing the dates. The first section stops parsing as soon as the first timestamp that's before maintenance mode; if there's no such timestamp, it just returns false (for newly added host). The second section stops parsing as soon as the timestamp is just after the first online timestamp. This is also why these logic should not be a member logic to ParticipantHistory because they are not meant to be generic.", "url": "https://github.com/apache/helix/pull/1413#discussion_r499853384", "createdAt": "2020-10-05T20:28:30Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMjM3Mg=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMTkzOA==", "bodyText": "As I mentioned above, the current logic is too complicated than it needs to be. For a newly added node, the offline time is timestamp 0. So it is definitely timeout.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500511938", "createdAt": "2020-10-06T18:31:24Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMjM3Mg=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NDg3Mg==", "bodyText": "The algorithm has been reworked to look less complicated. Its essence remains - all mentioned edge cases are taken care of.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500654872", "createdAt": "2020-10-06T23:39:14Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +782,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.parseHistoryDateStringToLong(historyOfflineList.get(i));\n+        // Ignore bad format case\n+        if (tailOfflineTime != -1) {\n+          if (tailOfflineTime <= onlineTimestamps.get(0)) {\n+            break;\n+          }\n+          offlineTimestamps.add(0, tailOfflineTime);\n+        }\n+      }\n+    }\n+\n+    // At this point, onlineTimestamps contains at least 1 timestamp that's before maintenance mode;\n+    // offlineTimestamps contains 0+ timestamp that's > the first online timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMjM3Mg=="}, "originalCommit": {"oid": "ceff69d774c1c2a9149ae090e231df8c499ff125"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1MjYwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODo1MFrOHdTkPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToyNzowNlrOHdaj4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTMyNg==", "bodyText": "I suggest making it explicit.\nOne method getAllLiveInstances(), another one something like getActiveLiveInstance().\nIn the future, the later one can be extended to return different lists according to the conditions (maintenance mode is the first example).", "url": "https://github.com/apache/helix/pull/1413#discussion_r500491326", "createdAt": "2020-10-06T17:58:50Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +471,30 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n+    return getLiveInstances(true);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   * @param excludeTimeoutInstances - Only effective during maintenance mode. If true, filter out\n+   *                                instances that are timed-out during maintenance mode; instances\n+   *                                are timed-out if they have been offline for a while before going\n+   *                                live during maintenance mode.\n+   * @return\n+   */\n+  public Map<String, LiveInstance> getLiveInstances(boolean excludeTimeoutInstances) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwNTkyMw==", "bodyText": "Discussed offline: function is made private. It can be extended later on.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500605923", "createdAt": "2020-10-06T21:27:06Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +471,30 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n    * @return\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n+    return getLiveInstances(true);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   * @param excludeTimeoutInstances - Only effective during maintenance mode. If true, filter out\n+   *                                instances that are timed-out during maintenance mode; instances\n+   *                                are timed-out if they have been offline for a while before going\n+   *                                live during maintenance mode.\n+   * @return\n+   */\n+  public Map<String, LiveInstance> getLiveInstances(boolean excludeTimeoutInstances) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTMyNg=="}, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg0Nzc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjowM1rOHdUcsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjowM1rOHdUcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTc3OQ==", "bodyText": "Just put the logic into a non-static method getOnlineTimestamp()? Which directly returns List.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500505779", "createdAt": "2020-10-06T18:22:03Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +788,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg1OTQ4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyNDo0M1rOHdUjmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyNDo0M1rOHdUjmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzU0Nw==", "bodyText": "nit, I think you need all the online timestamp before the _maintenanceSignal create time. Otherwise, you don't need this list. So the comment is not accurate.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500507547", "createdAt": "2020-10-06T18:24:43Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +788,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg4MjM1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyOTo1M1rOHdUxEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyOTo1M1rOHdUxEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMDk5NQ==", "bodyText": "I agree these nodes shall be excluded. But we are actually doing this for a different reason.\nNote that the logic is a node is offline for a long time and back online during the M mode. In this case, the new node previous offline time is 0. So it is definitely timed out. So we don't need this logic here. The later logic shall be able to cover this case.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500510995", "createdAt": "2020-10-06T18:29:53Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +788,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg5NjcyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozMzoxNVrOHdU5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozMzoxNVrOHdU5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMzEwNQ==", "bodyText": "Same here, getOfflineTimestamp", "url": "https://github.com/apache/helix/pull/1413#discussion_r500513105", "createdAt": "2020-10-06T18:33:15Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +788,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {\n+        tailOnlineTime =\n+            ParticipantHistory.extractTimeFromSessionHistoryString(historyOnlineList.get(i));\n+        // Ignore bad format case\n+        if (tailOnlineTime != -1) {\n+          onlineTimestamps.add(0, tailOnlineTime);\n+          // We only need one online timestamp before maintenance mode starts\n+          if (tailOnlineTime <= _maintenanceSignal.getTimestamp()) {\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (onlineTimestamps.isEmpty() || onlineTimestamps.get(0) > _maintenanceSignal.getTimestamp()) {\n+      // Node is a new node in this maintenance mode, no need to time out since no partitions are\n+      // assigned to it\n+      return false;\n+    }\n+\n+    // Parse offline timestamps from offline list\n+    List<Long> offlineTimestamps = new ArrayList<>();\n+    List<String> historyOfflineList = history.getOffline();\n+    if (historyOfflineList != null) {\n+      long tailOfflineTime;\n+      for (int i = historyOfflineList.size() - 1; i >= 0; i--) {\n+        tailOfflineTime =\n+            ParticipantHistory.historyDateStringToLong(historyOfflineList.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDEwNjM3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozMjowMFrOHdW6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozMjowMFrOHdW6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NjA3NQ==", "bodyText": "nit, the logic might be clearer for the readers if you just subtract the list and then read the last one. Otherwise, you have multiple lists with different orders. And get(0) in the following code could be a mystery for others.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500546075", "createdAt": "2020-10-06T19:32:00Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +788,100 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,\n+      long timeOutWindow) {\n+    ParticipantHistory history =\n+        accessor.getProperty(accessor.keyBuilder().participantHistory(instance));\n+    long currentTime = System.currentTimeMillis();\n+\n+    // Parse online timestamps from online list\n+    List<Long> onlineTimestamps = new ArrayList<>();\n+    List<String> historyOnlineList = history.getHistory();\n+    if (historyOnlineList != null) {\n+      long tailOnlineTime;\n+      for (int i = historyOnlineList.size() - 1; i >= 0; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDEzOTUxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo0MjowOVrOHdXO5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToyMzo1OVrOHdad5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MTM5OQ==", "bodyText": "I guess this one is corresponding to the _liveInstanceSnapshotForMaintenance check. I prefer not to add this.\n\nIf the cache update fails due to ZK issue, then we might have the _liveInstanceSnapshotForMaintenance updated but _timedOutInstanceDuringMaintenance is not fully calculated.\nThe performance enhancement of using this map is not significant. Let's ensure it works fine first.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500551399", "createdAt": "2020-10-06T19:42:09Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +307,40 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+      _liveInstanceSnapshotForMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwNDM4OA==", "bodyText": "Discussed offline: the snapshot variable is replaced and now it's okay for ZK to be disrupted at any point. _timedOutInstanceDuringMaintenance can be partially completed - other nodes will be checked again. The new snapshot variable (which is just _liveInstanceExcludeTimedOutForMaintenance) is computed after this step and will always store the correct truth of \"what instances are checked\"; it can be partially completed - other nodes will be checked again.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500604388", "createdAt": "2020-10-06T21:23:59Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +307,40 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+      _liveInstanceSnapshotForMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {\n+      for (String instance : _liveInstanceCache.getPropertyMap().keySet()) {\n+        // 1. Check timed-out cache and don't do repeated work;\n+        // 2. Check for nodes that didn't exist in the last iteration, because it has been checked;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MTM5OQ=="}, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDE1Mjk5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo0NjoyMVrOHdXXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToyMTo1MFrOHdaZ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzU4NA==", "bodyText": "Please be careful about the cache update order. refreshLiveInstances is called before updateMaintenanceInfo. So I guess this map never works as expected. As I suggested, just remove this map to reduce the potential risk. ROI is low.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500553584", "createdAt": "2020-10-06T19:46:21Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,6 +257,10 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a snapshot of old live instances for maintenance mode\n+      if (isMaintenanceModeEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3ODMwNA==", "bodyText": "This is intentional. When maintenance mode is first started, the snapshot is left empty so that all nodes are checked.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500578304", "createdAt": "2020-10-06T20:32:41Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,6 +257,10 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a snapshot of old live instances for maintenance mode\n+      if (isMaintenanceModeEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzU4NA=="}, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwMzM4Mw==", "bodyText": "Discussed offline. This variable is removed and replaced by the cached result of live instances excluding timed-out ones. That way the intention is more clear.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500603383", "createdAt": "2020-10-06T21:21:50Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -253,6 +257,10 @@ private void refreshIdealState(final HelixDataAccessor accessor,\n   private void refreshLiveInstances(final HelixDataAccessor accessor,\n       Set<HelixConstants.ChangeType> refreshedType) {\n     if (_propertyDataChangedMap.get(HelixConstants.ChangeType.LIVE_INSTANCE).getAndSet(false)) {\n+      // Keep a snapshot of old live instances for maintenance mode\n+      if (isMaintenanceModeEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzU4NA=="}, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDE1OTU1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo0ODozMVrOHdXbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToyMjowMVrOHdaaRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDYzNA==", "bodyText": "To reduce the implicit dependencies between the refresh/update methods, please input the isMaintenanceModeEnabled as a parameter. So the caller is more likely to pass the refreshed value.\nOverall, we shall reduce referring to the private field directly to decouple methods and prevent potential bugs.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500554634", "createdAt": "2020-10-06T19:48:31Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +307,40 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+      _liveInstanceSnapshotForMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwMzQ2Mw==", "bodyText": "Done.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500603463", "createdAt": "2020-10-06T21:22:01Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -299,6 +307,40 @@ private void updateMaintenanceInfo(final HelixDataAccessor accessor) {\n     // The following flag is to guarantee that there's only one update per pineline run because we\n     // check for whether maintenance recovery could happen twice every pipeline\n     _hasMaintenanceSignalChanged = false;\n+\n+    // If maintenance mode has exited, clear cached timed-out nodes\n+    if (!_isMaintenanceModeEnabled) {\n+      _timedOutInstanceDuringMaintenance.clear();\n+      _liveInstanceSnapshotForMaintenance.clear();\n+    }\n+  }\n+\n+  private void timeoutNodesDuringMaintenance(final HelixDataAccessor accessor) {\n+    // If maintenance mode is enabled and timeout window is specified, filter 'new' live nodes\n+    // for timed-out nodes\n+    long timeOutWindow = -1;\n+    if (_clusterConfig != null) {\n+      timeOutWindow = _clusterConfig.getOfflineNodeTimeOutForMaintenanceMode();\n+    }\n+    if (timeOutWindow >= 0 && isMaintenanceModeEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDYzNA=="}, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDE3ODE4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo1NDoxN1rOHdXnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo1NDoxN1rOHdXnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NzY3Mg==", "bodyText": "As commented above, these 2 methods can be private if we directly return the lists of Long", "url": "https://github.com/apache/helix/pull/1413#discussion_r500557672", "createdAt": "2020-10-06T19:54:17Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +183,73 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /**\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  public static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * Parses a history date in millisecond to string.\n+   */\n+  public static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDE4MDkxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo1NTowNVrOHdXpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo1NTowNVrOHdXpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1ODEwMQ==", "bodyText": "nit, warning in these abnormal case for debugging.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500558101", "createdAt": "2020-10-06T19:55:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +183,73 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /**\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  public static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * Parses a history date in millisecond to string.\n+   */\n+  public static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752db754f2f37633fe54742c2c8f3ca6e3ad96b2"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg5MTc3OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyNDowNFrOHdeX3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoxMzowNFrOHfUEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODM4Mg==", "bodyText": "I think you don't need these 2 methods to be public?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500668382", "createdAt": "2020-10-07T00:24:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -64,6 +69,20 @@ public ParticipantHistory(ZNRecord znRecord) {\n     super(znRecord);\n   }\n \n+  /**\n+   * @return The list field for HISTORY\n+   */\n+  public List<String> getHistory() {\n+    return _record.getListField(ConfigProperty.HISTORY.name());\n+  }\n+\n+  /**\n+   * @return The list field for OFFLINE\n+   */\n+  public List<String> getOffline() {\n+    return _record.getListField(ConfigProperty.OFFLINE.name());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjI4MQ==", "bodyText": "They are public because\n\nwe should provide accessors since now there are actual code usage of ParticipantHistory; and,\nan integration test calls these functions.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500676281", "createdAt": "2020-10-07T00:53:55Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -64,6 +69,20 @@ public ParticipantHistory(ZNRecord znRecord) {\n     super(znRecord);\n   }\n \n+  /**\n+   * @return The list field for HISTORY\n+   */\n+  public List<String> getHistory() {\n+    return _record.getListField(ConfigProperty.HISTORY.name());\n+  }\n+\n+  /**\n+   * @return The list field for OFFLINE\n+   */\n+  public List<String> getOffline() {\n+    return _record.getListField(ConfigProperty.OFFLINE.name());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODM4Mg=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1Nzk1OQ==", "bodyText": "you have the methods which return the timestamps. The raw string is hard to use and we shall not return it.\nintegration test can rely on protected methods.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501257959", "createdAt": "2020-10-07T19:28:44Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -64,6 +69,20 @@ public ParticipantHistory(ZNRecord znRecord) {\n     super(znRecord);\n   }\n \n+  /**\n+   * @return The list field for HISTORY\n+   */\n+  public List<String> getHistory() {\n+    return _record.getListField(ConfigProperty.HISTORY.name());\n+  }\n+\n+  /**\n+   * @return The list field for OFFLINE\n+   */\n+  public List<String> getOffline() {\n+    return _record.getListField(ConfigProperty.OFFLINE.name());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODM4Mg=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEzMDQ3Mw==", "bodyText": "I disagree with this. For a HelixProperty class, if there is a need of a field, there should be an accessor. It is true that we have timestamp parsers now, but for example, HISTORY contains other informations too. Down the road, there may be other code that relies on other HISTORY information. What would happen then? An accessor will be built. Right now there is a need to these fields, and I don't see a reason to not create accessors.\nFor integration test it's not in the same package, so I don't think package private (nor protected) can help. This is a minor point; there are workarounds. My main point is the previous paragraph.", "url": "https://github.com/apache/helix/pull/1413#discussion_r502130473", "createdAt": "2020-10-09T01:59:24Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -64,6 +69,20 @@ public ParticipantHistory(ZNRecord znRecord) {\n     super(znRecord);\n   }\n \n+  /**\n+   * @return The list field for HISTORY\n+   */\n+  public List<String> getHistory() {\n+    return _record.getListField(ConfigProperty.HISTORY.name());\n+  }\n+\n+  /**\n+   * @return The list field for OFFLINE\n+   */\n+  public List<String> getOffline() {\n+    return _record.getListField(ConfigProperty.OFFLINE.name());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODM4Mg=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NjY4OA==", "bodyText": "\"What would happen then?\" Then we add other methods to access this information explicitly. The string return which requires additional parse is a bad idea in general.\n\nWhat if we change the string format? These methods return string will be non-backward-compatible. And we don't want to restrict ourselves unnecessarily, right?\nLike you add the getOnlineTimestamp now, we can add other methods that parse the HISTORY string and return the required information.\nThe necessity of testing does not require us to make it public. We can make the test in the same package. Or read the field directly from ZNRecord. There are many ways to achieve it and public is the most impactful and costly (maintenance cost) way. I think it is not good option.", "url": "https://github.com/apache/helix/pull/1413#discussion_r502596688", "createdAt": "2020-10-09T18:13:04Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -64,6 +69,20 @@ public ParticipantHistory(ZNRecord znRecord) {\n     super(znRecord);\n   }\n \n+  /**\n+   * @return The list field for HISTORY\n+   */\n+  public List<String> getHistory() {\n+    return _record.getListField(ConfigProperty.HISTORY.name());\n+  }\n+\n+  /**\n+   * @return The list field for OFFLINE\n+   */\n+  public List<String> getOffline() {\n+    return _record.getListField(ConfigProperty.OFFLINE.name());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODM4Mg=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg5NTAxOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyNTozMlrOHdeZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyNTozMlrOHdeZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2ODg0OA==", "bodyText": "Log the error here.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500668848", "createdAt": "2020-10-07T00:25:32Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg5NzYzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyNzowMVrOHdebMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODowODo0OFrOHfT8Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTIzNQ==", "bodyText": "Shall we just call it getOnlineTimestampsAsMilliseconds?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500669235", "createdAt": "2020-10-07T00:27:01Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * For each entry in History, return its millisecond timestamp; for timestamps that cannot be\n+   * parsed, skip them.\n+   */\n+  public List<Long> getHistoryTimestampsAsMilliseconds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3ODM5OQ==", "bodyText": "I had this debate too, but I think in the context of ParticipantHistory, the field names should be respected. The field is HISTORY.", "url": "https://github.com/apache/helix/pull/1413#discussion_r500678399", "createdAt": "2020-10-07T01:02:32Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * For each entry in History, return its millisecond timestamp; for timestamps that cannot be\n+   * parsed, skip them.\n+   */\n+  public List<Long> getHistoryTimestampsAsMilliseconds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTIzNQ=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NzQyMg==", "bodyText": "But it is not clear to the caller what do you get.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501257422", "createdAt": "2020-10-07T19:27:41Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * For each entry in History, return its millisecond timestamp; for timestamps that cannot be\n+   * parsed, skip them.\n+   */\n+  public List<Long> getHistoryTimestampsAsMilliseconds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTIzNQ=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEyOTExMg==", "bodyText": "I understand what you mean, and since I also want to call it getOnlineTimestamps, I made the change.\nThough I don't think the old naming is bad: callers get the History timestamps, as advertised. If they don't know what these are they should read the class. \ud83d\ude03", "url": "https://github.com/apache/helix/pull/1413#discussion_r502129112", "createdAt": "2020-10-09T01:53:46Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * For each entry in History, return its millisecond timestamp; for timestamps that cannot be\n+   * parsed, skip them.\n+   */\n+  public List<Long> getHistoryTimestampsAsMilliseconds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTIzNQ=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDU5OQ==", "bodyText": "A meaningful method name is always better than comments.\nThe best code does not need comments. Although it is almost impossible to achieve.", "url": "https://github.com/apache/helix/pull/1413#discussion_r502594599", "createdAt": "2020-10-09T18:08:48Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,99 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {\n+    Map<String, String> sessionHistoryMap = parseSessionHistoryStringToMap(sessionHistoryString);\n+    if (!sessionHistoryMap.containsKey(ConfigProperty.TIME.name())) {\n+      return -1;\n+    }\n+    try {\n+      return Long.parseLong(sessionHistoryMap.get(ConfigProperty.TIME.name()));\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * For each entry in History, return its millisecond timestamp; for timestamps that cannot be\n+   * parsed, skip them.\n+   */\n+  public List<Long> getHistoryTimestampsAsMilliseconds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTIzNQ=="}, "originalCommit": {"oid": "f2badf5808d5a0a86af52b38058fdc7bed7c02c4"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ1OTg1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1MDowM1rOHdjeow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1MzowNlrOHd8sAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1MjAzNQ==", "bodyText": "Any specific reason we do not put this into refreshLiveInstances()?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500752035", "createdAt": "2020-10-07T05:50:03Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -333,6 +370,7 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _stateModelDefinitionCache.refresh(accessor);\n     _clusterConstraintsCache.refresh(accessor);\n     updateMaintenanceInfo(accessor);\n+    timeoutNodesDuringMaintenance(accessor, _clusterConfig, _isMaintenanceModeEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NTA1OA==", "bodyText": "Yes, because we want this step to be after updateMaintenanceInfo(), which makes the most logical sense.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501165058", "createdAt": "2020-10-07T16:53:06Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -333,6 +370,7 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _stateModelDefinitionCache.refresh(accessor);\n     _clusterConstraintsCache.refresh(accessor);\n     updateMaintenanceInfo(accessor);\n+    timeoutNodesDuringMaintenance(accessor, _clusterConfig, _isMaintenanceModeEnabled);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1MjAzNQ=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ3MTQzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1NDo1N1rOHdjlaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NDozM1rOHd8vxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1Mzc3MQ==", "bodyText": "These two methods (getLiveInstances() and getAllLiveInstances() are very confusing to each other.  We would need a better naming here.  We have four type of instances:  All Instances, Live Instances, enabled/disabled Instances, timeout-ed instances.  We have a method called getEnabledLiveInstances(), maybe we can name this new method getNonTimeoutLiveInstances()?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500753771", "createdAt": "2020-10-07T05:54:57Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +466,37 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n-   * @return\n+   * Returns the LiveInstances for each of the instances that are currently up and running,\n+   * excluding the instances that are considered offline during maintenance mode. Instances\n+   * are timed-out if they have been offline for a while before going live during maintenance mode.\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n+    return getLiveInstances(true);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   */\n+  public Map<String, LiveInstance> getAllLiveInstances() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NjAyMA==", "bodyText": "I'm just going to remove this function and the boolean flag, since during maintenance mode, we always want to return the non-timed-out instances.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501166020", "createdAt": "2020-10-07T16:54:33Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -428,13 +466,37 @@ public synchronized void setIdealStates(List<IdealState> idealStates) {\n   }\n \n   /**\n-   * Returns the LiveInstances for each of the instances that are curretnly up and running\n-   * @return\n+   * Returns the LiveInstances for each of the instances that are currently up and running,\n+   * excluding the instances that are considered offline during maintenance mode. Instances\n+   * are timed-out if they have been offline for a while before going live during maintenance mode.\n    */\n   public Map<String, LiveInstance> getLiveInstances() {\n+    return getLiveInstances(true);\n+  }\n+\n+  /**\n+   * Returns the LiveInstances for each of the instances that are currently up and running\n+   */\n+  public Map<String, LiveInstance> getAllLiveInstances() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1Mzc3MQ=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ3NDA5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1NjowMVrOHdjm8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NToxMVrOHd8xYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDE2MQ==", "bodyText": "minor:  isInstanceTimeout... -> shouldInstanceTimeout...", "url": "https://github.com/apache/helix/pull/1413#discussion_r500754161", "createdAt": "2020-10-07T05:56:01Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +790,58 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NjQzMw==", "bodyText": "It's isInstanceTimedOut, which is grammatically correct. I'd prefer is over should.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501166433", "createdAt": "2020-10-07T16:55:11Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -728,6 +790,58 @@ private void updateDisabledInstances() {\n     }\n   }\n \n+  /*\n+   * Check if the instance is timed-out during maintenance mode. An instance is timed-out if it has\n+   * been offline for longer than the user defined timeout window.\n+   * @param timeOutWindow - the timeout window; guaranteed to be non-negative\n+   */\n+  private boolean isInstanceTimedOutDuringMaintenance(HelixDataAccessor accessor, String instance,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDE2MQ=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ3NzIwOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1NzoyNlrOHdjo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NToxOFrOHd8xqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDY0Mg==", "bodyText": "Let us follow the name convention of another method, such as sessionHistoryStringToMap()?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500754642", "createdAt": "2020-10-07T05:57:26Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,101 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NjUwNA==", "bodyText": "Ok.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501166504", "createdAt": "2020-10-07T16:55:18Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,101 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDY0Mg=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ3ODAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1Nzo1M1rOHdjpXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NzozMVrOHd83Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDc4Mg==", "bodyText": "getTimeFromSessionHistory", "url": "https://github.com/apache/helix/pull/1413#discussion_r500754782", "createdAt": "2020-10-07T05:57:53Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,101 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2Nzk0Ng==", "bodyText": "Ok.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501167946", "createdAt": "2020-10-07T16:57:31Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java", "diffHunk": "@@ -153,16 +185,101 @@ private void updateOfflineHistory(long time) {\n     if (list.size() == HISTORY_SIZE) {\n       list.remove(0);\n     }\n-\n-    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:SSS\");\n-    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-    String dateTime = df.format(new Date(time));\n-\n-    list.add(dateTime);\n+    list.add(historyDateLongToString(time));\n   }\n \n   @Override\n   public boolean isValid() {\n     return true;\n   }\n+\n+  /*\n+   * Parses a history date in string format to its millisecond representation.\n+   * Returns -1 if parsing fails.\n+   */\n+  private static long historyDateStringToLong(String dateString) {\n+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    try {\n+      Date date = simpleDateFormat.parse(dateString);\n+      return date.getTime();\n+    } catch (ParseException e) {\n+      LOG.warn(\"Failed to parse participant history date string: \" + dateString);\n+      return -1;\n+    }\n+  }\n+\n+  /*\n+   * Parses a history date in millisecond to string.\n+   */\n+  private static String historyDateLongToString(long dateLong) {\n+    DateFormat df = new SimpleDateFormat(HISTORY_DATE_FORMAT);\n+    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    return df.format(new Date(dateLong));\n+  }\n+\n+  /**\n+   * Parses the session entry map that has been converted to string back to a map.\n+   * NOTE TO CALLER: This assumes the divider between entries is \", \" and the divider between\n+   * key/value is \"=\"; if the string is malformed, parsing correctness is not guaranteed. Always\n+   * check if a key is contained before using the key.\n+   */\n+  public static Map<String, String> parseSessionHistoryStringToMap(String sessionHistoryString) {\n+    sessionHistoryString = sessionHistoryString.substring(1, sessionHistoryString.length() - 1);\n+    Map<String, String> sessionHistoryMap = new HashMap<>();\n+\n+    for (String sessionHistoryKeyValuePair : sessionHistoryString.split(\", \")) {\n+      String[] keyValuePair = sessionHistoryKeyValuePair.split(\"=\");\n+      if (keyValuePair.length < 2) {\n+        LOG.warn(\"Ignore key value pair while parsing session history due to missing '=': \" +\n+            sessionHistoryKeyValuePair);\n+        continue;\n+      }\n+      sessionHistoryMap.put(keyValuePair[0], keyValuePair[1]);\n+    }\n+\n+    return sessionHistoryMap;\n+  }\n+\n+  /*\n+   * Take a string session history entry and extract the TIME field out of it. Return -1 if the TIME\n+   * field doesn't exist or if the TIME field cannot be parsed to a long.\n+   */\n+  private static long extractTimeFromSessionHistoryString(String sessionHistoryString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NDc4Mg=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ4MjU1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/test/java/org/apache/helix/integration/controller/TestOfflineNodeTimeoutDuringMaintenanceMode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNTo1OTo1OVrOHdjsDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjoyOToxMVrOHfaAsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NTQ2OA==", "bodyText": "Do we have an end-to-end integration test here, such as verify that a timeout-ed instance during maintenance mode will not get assigned any partitions (received any state transition messages)?", "url": "https://github.com/apache/helix/pull/1413#discussion_r500755468", "createdAt": "2020-10-07T05:59:59Z", "author": {"login": "lei-xia"}, "path": "helix-core/src/test/java/org/apache/helix/integration/controller/TestOfflineNodeTimeoutDuringMaintenanceMode.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.apache.helix.integration.controller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2ODMzOA==", "bodyText": "I will cover that in a CHO test.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501168338", "createdAt": "2020-10-07T16:58:04Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/controller/TestOfflineNodeTimeoutDuringMaintenanceMode.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.apache.helix.integration.controller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NTQ2OA=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3ODUwNw==", "bodyText": "It's better to include an integration test to cover the real case in mvn test. CHO is not available to everyone.", "url": "https://github.com/apache/helix/pull/1413#discussion_r501378507", "createdAt": "2020-10-08T00:09:05Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/controller/TestOfflineNodeTimeoutDuringMaintenanceMode.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.apache.helix.integration.controller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NTQ2OA=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5NDA2NQ==", "bodyText": "Updated.", "url": "https://github.com/apache/helix/pull/1413#discussion_r502694065", "createdAt": "2020-10-09T22:29:11Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/test/java/org/apache/helix/integration/controller/TestOfflineNodeTimeoutDuringMaintenanceMode.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.apache.helix.integration.controller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NTQ2OA=="}, "originalCommit": {"oid": "acf4d8ce322c9cb1861539692a046d74464fea49"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 973, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}