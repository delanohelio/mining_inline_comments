{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDQxMzAz", "number": 1464, "title": "Fix MaxCapacityUsageGauge value not updated", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1463\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nMaxCapacityUsageGauge value not updated because the resourcesToMonitor map is empty.\nThis PR fixes the bug and also add an integration test to protect the metrics reporting logic.\n\nTests\n\n The following tests are written for this issue:\n\ntestInstanceCapacityMetrics()\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestRoutingTableProviderPeriodicRefresh.testPeriodicRefresh:214 expected:<4> but was:<3>\n[INFO]\n[ERROR] Tests run: 1214, Failures: 1, Errors: 0, Skipped: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:23 h\n[INFO] Finished at: 2020-10-13T01:54:46-07:00\n[INFO] ------------------------------------------------------------------------\n\nThe failed test is a known one: #1250\n@kaisun2000 is working on it.\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-10-13T06:58:28Z", "url": "https://github.com/apache/helix/pull/1464", "merged": true, "mergeCommit": {"oid": "5d7a610cdd9b733af8b38158cdfe04d562081713"}, "closed": true, "closedAt": "2020-10-13T18:21:54Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSC6hMAH2gAyNTAyMDQxMzAzOjY5NmI3NWYwNjg2ODlmYThiMmY2ODI5NWI4MDFkMmVmN2I1ZjU3MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSMtq4gFqTUwNzcxMTM0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "696b75f068689fa8b2f68295b801d2ef7b5f5720", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/696b75f068689fa8b2f68295b801d2ef7b5f5720", "committedDate": "2020-10-13T06:51:36Z", "message": "Fix MaxCapacityUsageGauge value not updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NjM5NzY5", "url": "https://github.com/apache/helix/pull/1464#pullrequestreview-507639769", "createdAt": "2020-10-13T16:45:35Z", "commit": {"oid": "696b75f068689fa8b2f68295b801d2ef7b5f5720"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NTozNlrOHgwRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NjoyMFrOHgwTcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzQzMw==", "bodyText": "This could be used in BestPossibleStateCalcStage.computeResourceBestPossibleStateWithWagedRebalancer as well. Could you check for other similar usages? Replacing those logic with this function is a step up for cleanness.", "url": "https://github.com/apache/helix/pull/1464#discussion_r504107433", "createdAt": "2020-10-13T16:45:36Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/util/WagedValidationUtil.java", "diffHunk": "@@ -88,4 +90,16 @@\n     }\n     return partitionCapacity;\n   }\n+\n+  /**\n+   * Checks whether or not a resource has enabled WAGED rebalancer.\n+   *\n+   * @param idealState {@code IdealState} of the resource being checked.\n+   * @return {@code true} if WAGED is enabled; otherwise, {@code false}.\n+   */\n+  public static boolean isWagedEnabled(IdealState idealState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "696b75f068689fa8b2f68295b801d2ef7b5f5720"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzg4OQ==", "bodyText": "Is this a behavior change (all resources -> waged only)?", "url": "https://github.com/apache/helix/pull/1464#discussion_r504107889", "createdAt": "2020-10-13T16:46:20Z", "author": {"login": "NealSun96"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -283,10 +284,10 @@ private void reportInstanceCapacityMetrics(ClusterStatusMonitor clusterStatusMon\n     asyncExecute(dataProvider.getAsyncTasksThreadPool(), () -> {\n       try {\n         // ResourceToRebalance map also has resources from current states.\n-        // Only use the resources in ideal states to parse all replicas.\n+        // Only use the resources in ideal states that enable WAGED to parse all replicas.\n         Map<String, IdealState> idealStateMap = dataProvider.getIdealStates();\n         Map<String, Resource> resourceToMonitorMap = resourceMap.entrySet().stream()\n-            .filter(idealStateMap::containsKey)\n+            .filter(entry -> WagedValidationUtil.isWagedEnabled(idealStateMap.get(entry.getKey())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "696b75f068689fa8b2f68295b801d2ef7b5f5720"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e92d5ed551e72fe6916de02ecfaeee6d47cf341", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2e92d5ed551e72fe6916de02ecfaeee6d47cf341", "committedDate": "2020-10-13T17:43:02Z", "message": "Use isWagedEnabled"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef2612540bb31349aac7899530cf45ea0ff4b0e8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ef2612540bb31349aac7899530cf45ea0ff4b0e8", "committedDate": "2020-10-13T17:36:52Z", "message": "Use isWagedEnabled"}, "afterCommit": {"oid": "2e92d5ed551e72fe6916de02ecfaeee6d47cf341", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/2e92d5ed551e72fe6916de02ecfaeee6d47cf341", "committedDate": "2020-10-13T17:43:02Z", "message": "Use isWagedEnabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzA4NDAx", "url": "https://github.com/apache/helix/pull/1464#pullrequestreview-507708401", "createdAt": "2020-10-13T18:12:29Z", "commit": {"oid": "2e92d5ed551e72fe6916de02ecfaeee6d47cf341"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzExMzQ5", "url": "https://github.com/apache/helix/pull/1464#pullrequestreview-507711349", "createdAt": "2020-10-13T18:16:37Z", "commit": {"oid": "2e92d5ed551e72fe6916de02ecfaeee6d47cf341"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4352, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}