{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzk0MjIy", "number": 855, "title": "Make ZkBaseDataAccessor realm-aware", "bodyText": "Draft: to add a test for multi-realm mode and depends on #819\nIssues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nImplements #854\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nTo make Helix Java APIs realm-aware, we need to make ZkBaseDataAccessor realm-aware to use FederatedZkClient for multi-realm mode.\nTests\n\n\n The following tests are written for this issue:\nTestZkBaseDataAccessor covers the cases.\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR]   TestPauseSignal.testPauseSignal:106 expected:<true> but was:<false>\n[WARNING] Flakes:\n[WARNING] org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack.testLackEnoughInstances(org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack)\n[INFO]   Run 1: PASS\n[ERROR]   Run 2: TestCrushAutoRebalanceNonRack.testLackEnoughInstances:250 \u00bb ZkClient Failed to...\n[INFO]\n[INFO]\n[ERROR] Tests run: 1082, Failures: 1, Errors: 0, Skipped: 1, Flakes: 1\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:09 h\n[INFO] Finished at: 2020-03-11T22:06:21-07:00\n[INFO] ------------------------------------------------------------------------\n\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.273 s - in org.apache.helix.integration.rebalancer.CrushRebalancers.TestCrushAutoRebalanceNonRack\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.489 s - in org.apache.helix.integration.TestPauseSignal\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-03-04T07:56:41Z", "url": "https://github.com/apache/helix/pull/855", "merged": true, "mergeCommit": {"oid": "3ea4ef715bc8620f48de990056d15d6df5048024"}, "closed": true, "closedAt": "2020-03-12T06:38:53Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKbsi4gBqjMwOTgwMjQzODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM0KV6AFqTM3MzI3NDI3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67e8bcadf22ccf075b9d78aa093dc3e9db3dc99e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/67e8bcadf22ccf075b9d78aa093dc3e9db3dc99e", "committedDate": "2020-03-04T07:34:12Z", "message": "Make ZkBaseDataAccessor realm-aware"}, "afterCommit": {"oid": "8daad1d5579ca47cb2be4bc4a8122e5414d6e777", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8daad1d5579ca47cb2be4bc4a8122e5414d6e777", "committedDate": "2020-03-04T19:01:06Z", "message": "Make ZkBaseDataAccessor realm-aware"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8daad1d5579ca47cb2be4bc4a8122e5414d6e777", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8daad1d5579ca47cb2be4bc4a8122e5414d6e777", "committedDate": "2020-03-04T19:01:06Z", "message": "Make ZkBaseDataAccessor realm-aware"}, "afterCommit": {"oid": "c3fb8b7ba06c86aa5b6da31eba0dc3343ac55a77", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c3fb8b7ba06c86aa5b6da31eba0dc3343ac55a77", "committedDate": "2020-03-04T19:22:50Z", "message": "Make ZkBaseDataAccessor realm-aware"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3fb8b7ba06c86aa5b6da31eba0dc3343ac55a77", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c3fb8b7ba06c86aa5b6da31eba0dc3343ac55a77", "committedDate": "2020-03-04T19:22:50Z", "message": "Make ZkBaseDataAccessor realm-aware"}, "afterCommit": {"oid": "383fbd3bdfc6a7eda0791600e097fa1ed245e2b9", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/383fbd3bdfc6a7eda0791600e097fa1ed245e2b9", "committedDate": "2020-03-04T19:40:59Z", "message": "Make ZkBaseDataAccessor realm-aware"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTY1NDI4", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-369165428", "createdAt": "2020-03-04T22:17:31Z", "commit": {"oid": "383fbd3bdfc6a7eda0791600e097fa1ed245e2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxNzozMVrOFx_tOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxNzozMVrOFx_tOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2ODMxMg==", "bodyText": "ZkBaseDataAccessor needs to be able to take in Connection and Client configs. Instead of a constructor that takes in 0 parameters, could we use the builder pattern to achieve this? See the example for ConfigAccessor.", "url": "https://github.com/apache/helix/pull/855#discussion_r387968312", "createdAt": "2020-03-04T22:17:31Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,14 +107,31 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private static final String EMPTY_ZK_ADDRESS = \"\";\n+\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n+  /**\n+   * This default constructor attempts to connect to ZK on multi-realm mode.\n+   *\n+   * @exception IllegalStateException if connecting to ZK on multi-realm mode fails\n+   */\n+  public ZkBaseDataAccessor() {\n+    this(EMPTY_ZK_ADDRESS);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383fbd3bdfc6a7eda0791600e097fa1ed245e2b9"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTY1OTc5", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-369165979", "createdAt": "2020-03-04T22:18:31Z", "commit": {"oid": "383fbd3bdfc6a7eda0791600e097fa1ed245e2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxODozMVrOFx_u3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxODozMVrOFx_u3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2ODczNQ==", "bodyText": "Under what circumstances will IllegalArgumentException be thrown?", "url": "https://github.com/apache/helix/pull/855#discussion_r387968735", "createdAt": "2020-03-04T22:18:31Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1251,41 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient(\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig, String zkAddress,\n+      ZkClientType zkClientType) {\n+    RealmAwareZkClient zkClient;\n+\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IllegalArgumentException | IOException | InvalidRoutingDataException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383fbd3bdfc6a7eda0791600e097fa1ed245e2b9"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ff86ee52043baf358a0191124a36a3275b369e0", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7ff86ee52043baf358a0191124a36a3275b369e0", "committedDate": "2020-03-05T04:32:55Z", "message": "Add builder pattern to construct multi-realm"}, "afterCommit": {"oid": "8b5713630c0253132d7158aea920c9df544c5607", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/8b5713630c0253132d7158aea920c9df544c5607", "committedDate": "2020-03-05T04:45:16Z", "message": "Make ZkBaseDataAccessor realm-aware"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjk3MDQw", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-369297040", "createdAt": "2020-03-05T05:03:36Z", "commit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowMzozNlrOFyGgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowMzozNlrOFyGgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3OTY3Nw==", "bodyText": "Could we move up this constructor so it's with other public constructors?", "url": "https://github.com/apache/helix/pull/855#discussion_r388079677", "createdAt": "2020-03-05T05:03:36Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1240,123 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"ConfigAccessor: RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+      }\n+      if (realmMode == null) {\n+        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+      }\n+\n+      // Resolve RealmAwareZkClientConfig\n+      boolean isZkClientConfigSet = realmAwareZkClientConfig != null;\n+      // Resolve which clientConfig to use\n+      realmAwareZkClientConfig =\n+          isZkClientConfigSet ? realmAwareZkClientConfig.createHelixZkClientConfig()\n+              : new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer());\n+\n+      // Resolve RealmAwareZkConnectionConfig\n+      if (realmAwareZkConnectionConfig == null) {\n+        // If not set, create a default one\n+        realmAwareZkConnectionConfig =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+      }\n+    }\n+  }\n+\n+  private ZkBaseDataAccessor(Builder builder) throws IOException, InvalidRoutingDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjk3MjIz", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-369297223", "createdAt": "2020-03-05T05:04:22Z", "commit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowNDoyM1rOFyGgvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowNDoyM1rOFyGgvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3OTgwNQ==", "bodyText": "We'd need ZkBaseDataAccessor-specific parameters here as well such as ZkClientType (See #863 for reference)", "url": "https://github.com/apache/helix/pull/855#discussion_r388079805", "createdAt": "2020-03-05T05:04:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1240,123 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjk3NDk2", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-369297496", "createdAt": "2020-03-05T05:05:35Z", "commit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowNTozNVrOFyGhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowNTozNVrOFyGhpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA4MDAzNg==", "bodyText": "Ideally, validation logic should also resolve things like ZkClientType (if it's not set), so that the constructor should only worry about \"constructing\", not figuring out what's set or not. Let's try to separate logic as much as we can - this will help future development much easier in my opinion.", "url": "https://github.com/apache/helix/pull/855#discussion_r388080036", "createdAt": "2020-03-05T05:05:35Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1240,123 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c250acf155da2f6d20df98f82a108f16031d71df"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAxMjEw", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-370701210", "createdAt": "2020-03-07T00:35:07Z", "commit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNTowN1rOFzLOqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNTowN1rOFzLOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTY3NA==", "bodyText": "Do we have a PR for HelixDataAccessor as well?", "url": "https://github.com/apache/helix/pull/855#discussion_r389205674", "createdAt": "2020-03-07T00:35:07Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,21 +108,75 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n+  /**\n+   * @deprecated it is recommended to use the other constructors instead to avoid having to manually\n+   * create and maintain a RealmAwareZkClient outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZkBaseDataAccessor(HelixZkClient zkClient) {\n+  public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAxMzk3", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-370701397", "createdAt": "2020-03-07T00:36:04Z", "commit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNjowNFrOFzLPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNjowNFrOFzLPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTg1NA==", "bodyText": "As discussed offline, please make sure you're throwing a HelixException and propagating the Exception.\nNote that we shouldn't fall back to single-realm mode. We should fail here.", "url": "https://github.com/apache/helix/pull/855#discussion_r389205854", "createdAt": "2020-03-07T00:36:04Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,21 +108,75 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n+  /**\n+   * @deprecated it is recommended to use the other constructors instead to avoid having to manually\n+   * create and maintain a RealmAwareZkClient outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZkBaseDataAccessor(HelixZkClient zkClient) {\n+  public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n     if (zkClient == null) {\n       throw new NullPointerException(\"zkclient is null\");\n     }\n     _zkClient = zkClient;\n     _usesExternalZkClient = true;\n   }\n \n+  private ZkBaseDataAccessor(Builder builder) {\n+    RealmAwareZkClient zkClient;\n+    switch (builder.realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          zkClient = new FederatedZkClient(builder.realmAwareZkConnectionConfig,\n+              builder.realmAwareZkClientConfig);\n+          // Break here to exit.\n+          break;\n+        } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n+          if (builder.zkAddress == null || builder.zkAddress.isEmpty()) {\n+            throw new IllegalStateException(\"Not able to connect on multi-realm mode.\", e);\n+          }\n+          LOG.info(\"Not able to connect on multi-realm mode. \"\n+              + \"Connecting on single-realm mode to ZK: {}\", builder.zkAddress);\n+          builder.setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM);\n+        }\n+        // No break here. If connecting on multi-realm fails and ZK address is valid, connecting\n+        // on single-realm is allowed.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAxNDk2", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-370701496", "createdAt": "2020-03-07T00:36:37Z", "commit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNjozN1rOFzLPxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozNjozN1rOFzLPxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTk1OA==", "bodyText": "Is this break necessary?", "url": "https://github.com/apache/helix/pull/855#discussion_r389205958", "createdAt": "2020-03-07T00:36:37Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1289,122 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private ZkBaseDataAccessor.ZkClientType zkClientType;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkClientType(\n+        ZkBaseDataAccessor.ZkClientType zkClientType) {\n+      this.zkClientType = zkClientType;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      boolean isZkClientTypeSet = zkClientType != null;\n+\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+      }\n+      if (realmMode == null) {\n+        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+      }\n+\n+      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n+      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n+        throw new HelixException(\n+            \"ZkClientType cannot be set on multi-realm mode!\");\n+      }\n+      // If ZkClientType is not set, default to SHARED\n+      if (!isZkClientTypeSet) {\n+        zkClientType = ZkBaseDataAccessor.ZkClientType.SHARED;\n+      }\n+\n+      // Resolve RealmAwareZkClientConfig\n+      boolean isZkClientConfigSet = realmAwareZkClientConfig != null;\n+      // Resolve which clientConfig to use\n+      realmAwareZkClientConfig =\n+          isZkClientConfigSet ? realmAwareZkClientConfig.createHelixZkClientConfig()\n+              : new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer());\n+\n+      // Resolve RealmAwareZkConnectionConfig\n+      if (realmAwareZkConnectionConfig == null) {\n+        // If not set, create a default one\n+        realmAwareZkConnectionConfig =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+      }\n+    }\n+  }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient(\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig, String zkAddress,\n+      ZkClientType zkClientType) {\n+    try {\n+      return new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IOException | InvalidRoutingDataException e) {\n+      // Fall back to connect on single-realm mode if failed to connect on multi-realm mode and\n+      // ZK address is not empty.\n+      LOG.info(\"Not able to connect on multi-realm mode, caused by: {}. \"\n+          + \"Connecting on single-realm mode to ZK: {}.\", e.getMessage(), zkAddress);\n+    }\n+\n+    RealmAwareZkClient zkClient;\n+\n+    switch (zkClientType) {\n+      case DEDICATED:\n+        zkClient = DedicatedZkClientFactory.getInstance()\n+            .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+                clientConfig.createHelixZkClientConfig());\n+        break;\n+      case SHARED:\n+      default:\n+        zkClient = SharedZkClientFactory.getInstance()\n+            .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n+                clientConfig.createHelixZkClientConfig());\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "originalPosition": 280}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAxODYz", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-370701863", "createdAt": "2020-03-07T00:38:38Z", "commit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozODozOFrOFzLRGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozODozOFrOFzLRGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjI5OQ==", "bodyText": "Let's clearly note that this private method is only to be used for constructors that do not take a Builder in as a parameter because of the fallback behavior.", "url": "https://github.com/apache/helix/pull/855#discussion_r389206299", "createdAt": "2020-03-07T00:38:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1289,122 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private ZkBaseDataAccessor.ZkClientType zkClientType;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkClientType(\n+        ZkBaseDataAccessor.ZkClientType zkClientType) {\n+      this.zkClientType = zkClientType;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      boolean isZkClientTypeSet = zkClientType != null;\n+\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+      }\n+      if (realmMode == null) {\n+        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+      }\n+\n+      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n+      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n+        throw new HelixException(\n+            \"ZkClientType cannot be set on multi-realm mode!\");\n+      }\n+      // If ZkClientType is not set, default to SHARED\n+      if (!isZkClientTypeSet) {\n+        zkClientType = ZkBaseDataAccessor.ZkClientType.SHARED;\n+      }\n+\n+      // Resolve RealmAwareZkClientConfig\n+      boolean isZkClientConfigSet = realmAwareZkClientConfig != null;\n+      // Resolve which clientConfig to use\n+      realmAwareZkClientConfig =\n+          isZkClientConfigSet ? realmAwareZkClientConfig.createHelixZkClientConfig()\n+              : new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer());\n+\n+      // Resolve RealmAwareZkConnectionConfig\n+      if (realmAwareZkConnectionConfig == null) {\n+        // If not set, create a default one\n+        realmAwareZkConnectionConfig =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+      }\n+    }\n+  }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "originalPosition": 254}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAxOTk3", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-370701997", "createdAt": "2020-03-07T00:39:23Z", "commit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozOToyM1rOFzLRoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozOToyM1rOFzLRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjQzMw==", "bodyText": "Great use of logging, but let's also note here that this is for backward-compatibility for constructors that take in zkaddress or zkclient.", "url": "https://github.com/apache/helix/pull/855#discussion_r389206433", "createdAt": "2020-03-07T00:39:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1289,122 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private ZkBaseDataAccessor.ZkClientType zkClientType;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkClientType(\n+        ZkBaseDataAccessor.ZkClientType zkClientType) {\n+      this.zkClientType = zkClientType;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.\n+     */\n+    private void validate() {\n+      // Resolve RealmMode based on other parameters\n+      boolean isZkAddressSet = zkAddress != null && !zkAddress.isEmpty();\n+      boolean isZkClientTypeSet = zkClientType != null;\n+\n+      if (realmMode == RealmAwareZkClient.RealmMode.SINGLE_REALM && !isZkAddressSet) {\n+        throw new HelixException(\n+            \"RealmMode cannot be single-realm without a valid ZkAddress set!\");\n+      }\n+      if (realmMode == null) {\n+        realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n+            : RealmAwareZkClient.RealmMode.MULTI_REALM;\n+      }\n+\n+      // If ZkClientType is set, RealmMode must either be single-realm or not set.\n+      if (isZkClientTypeSet && realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM) {\n+        throw new HelixException(\n+            \"ZkClientType cannot be set on multi-realm mode!\");\n+      }\n+      // If ZkClientType is not set, default to SHARED\n+      if (!isZkClientTypeSet) {\n+        zkClientType = ZkBaseDataAccessor.ZkClientType.SHARED;\n+      }\n+\n+      // Resolve RealmAwareZkClientConfig\n+      boolean isZkClientConfigSet = realmAwareZkClientConfig != null;\n+      // Resolve which clientConfig to use\n+      realmAwareZkClientConfig =\n+          isZkClientConfigSet ? realmAwareZkClientConfig.createHelixZkClientConfig()\n+              : new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer());\n+\n+      // Resolve RealmAwareZkConnectionConfig\n+      if (realmAwareZkConnectionConfig == null) {\n+        // If not set, create a default one\n+        realmAwareZkConnectionConfig =\n+            new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build();\n+      }\n+    }\n+  }\n+\n+  private RealmAwareZkClient buildRealmAwareZkClient(\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig, String zkAddress,\n+      ZkClientType zkClientType) {\n+    try {\n+      return new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(), clientConfig);\n+    } catch (IllegalStateException | IOException | InvalidRoutingDataException e) {\n+      // Fall back to connect on single-realm mode if failed to connect on multi-realm mode and\n+      // ZK address is not empty.\n+      LOG.info(\"Not able to connect on multi-realm mode, caused by: {}. \"\n+          + \"Connecting on single-realm mode to ZK: {}.\", e.getMessage(), zkAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3d59e6586a0d48edf93dd054bdbd65d6fc2ecf"}, "originalPosition": 264}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzYwMjkw", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-371360290", "createdAt": "2020-03-09T16:58:50Z", "commit": {"oid": "f756761cf722e33fb0ca8862ed71ee394a9ee65d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo1MVrOFzxIKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo1MVrOFzxIKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjYwMQ==", "bodyText": "Change comment.", "url": "https://github.com/apache/helix/pull/855#discussion_r389826601", "createdAt": "2020-03-09T16:58:51Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -1248,4 +1280,127 @@ public void close() {\n       _zkClient.close();\n     }\n   }\n+\n+  public static class Builder {\n+    private String zkAddress;\n+    private RealmAwareZkClient.RealmMode realmMode;\n+    private ZkBaseDataAccessor.ZkClientType zkClientType;\n+    private RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig;\n+    private RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig;\n+\n+    public Builder() {\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkAddress(String zkAddress) {\n+      this.zkAddress = zkAddress;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmMode(RealmAwareZkClient.RealmMode realmMode) {\n+      this.realmMode = realmMode;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setZkClientType(\n+        ZkBaseDataAccessor.ZkClientType zkClientType) {\n+      this.zkClientType = zkClientType;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkConnectionConfig(\n+        RealmAwareZkClient.RealmAwareZkConnectionConfig realmAwareZkConnectionConfig) {\n+      this.realmAwareZkConnectionConfig = realmAwareZkConnectionConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor.Builder setRealmAwareZkClientConfig(\n+        RealmAwareZkClient.RealmAwareZkClientConfig realmAwareZkClientConfig) {\n+      this.realmAwareZkClientConfig = realmAwareZkClientConfig;\n+      return this;\n+    }\n+\n+    public ZkBaseDataAccessor<?> build() throws Exception {\n+      validate();\n+      return new ZkBaseDataAccessor<>(this);\n+    }\n+\n+    /**\n+     * Validate the given parameters before creating an instance of ConfigAccessor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f756761cf722e33fb0ca8862ed71ee394a9ee65d"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzYyMDMy", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-371362032", "createdAt": "2020-03-09T17:00:58Z", "commit": {"oid": "f756761cf722e33fb0ca8862ed71ee394a9ee65d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowMDo1OFrOFzxNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowMDo1OFrOFzxNMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNzg4OA==", "bodyText": "I think we should make the behavior description in the Java doc.", "url": "https://github.com/apache/helix/pull/855#discussion_r389827888", "createdAt": "2020-03-09T17:00:58Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -199,20 +238,13 @@ public ZkBaseDataAccessor(String zkAddress, ZkSerializer zkSerializer,\n    * @param pathBasedZkSerializer\n    * @param zkClientType\n    */\n-  public ZkBaseDataAccessor(String zkAddress, PathBasedZkSerializer pathBasedZkSerializer,\n+  public ZkBaseDataAccessor(String zkAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f756761cf722e33fb0ca8862ed71ee394a9ee65d"}, "originalPosition": 132}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03f73fa56715381b6469ceb443fbf8f2e79e3819", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/03f73fa56715381b6469ceb443fbf8f2e79e3819", "committedDate": "2020-03-11T03:43:36Z", "message": "Remove fallback behavior"}, "afterCommit": {"oid": "e427ad2b2d1f2c05d30779e9e286ed70876327fe", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/e427ad2b2d1f2c05d30779e9e286ed70876327fe", "committedDate": "2020-03-11T03:50:41Z", "message": "Remove fallback behavior"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTM1NjI4", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-372535628", "createdAt": "2020-03-11T07:56:16Z", "commit": {"oid": "faf74392d9f83a619d1aeeb85abf6709cfab6fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NjoxNlrOF0sO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NjoxNlrOF0sO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NDk4MQ==", "bodyText": "Nit: This is already inside ZkBaseDataAccessor, so no need to qualify ZkClientTypes using ZkBaseDataAccessor. Did you copy the code from the other PRs? IDE automatically puts these things.", "url": "https://github.com/apache/helix/pull/855#discussion_r390794981", "createdAt": "2020-03-11T07:56:16Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,28 +118,85 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n+  /**\n+   * @deprecated it is recommended to use the builder constructor {@link Builder}\n+   * instead to avoid having to manually create and maintain a RealmAwareZkClient\n+   * outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZkBaseDataAccessor(HelixZkClient zkClient) {\n+  public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n     if (zkClient == null) {\n       throw new NullPointerException(\"zkclient is null\");\n     }\n     _zkClient = zkClient;\n     _usesExternalZkClient = true;\n   }\n \n+  private ZkBaseDataAccessor(Builder builder) {\n+    switch (builder.realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          if (builder.zkClientType == ZkBaseDataAccessor.ZkClientType.DEDICATED) {\n+            // Use a realm-aware dedicated zk client\n+            _zkClient = DedicatedZkClientFactory.getInstance()\n+                .buildZkClient(builder.realmAwareZkConnectionConfig,\n+                    builder.realmAwareZkClientConfig);\n+          } else if (builder.zkClientType == ZkBaseDataAccessor.ZkClientType.SHARED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf74392d9f83a619d1aeeb85abf6709cfab6fbf"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTM2MTgx", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-372536181", "createdAt": "2020-03-11T07:57:23Z", "commit": {"oid": "faf74392d9f83a619d1aeeb85abf6709cfab6fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NzoyM1rOF0sQuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NzoyM1rOF0sQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NTQ0OA==", "bodyText": "why do we need the long package name for this serializer?", "url": "https://github.com/apache/helix/pull/855#discussion_r390795448", "createdAt": "2020-03-11T07:57:23Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -198,21 +271,17 @@ public ZkBaseDataAccessor(String zkAddress, ZkSerializer zkSerializer,\n    * @param zkAddress\n    * @param pathBasedZkSerializer\n    * @param zkClientType\n+   *\n+   * @deprecated it is recommended to use the builder constructor {@link Builder}\n    */\n-  public ZkBaseDataAccessor(String zkAddress, PathBasedZkSerializer pathBasedZkSerializer,\n+  @Deprecated\n+  public ZkBaseDataAccessor(String zkAddress,\n+      org.apache.helix.zookeeper.zkclient.serialize.PathBasedZkSerializer pathBasedZkSerializer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf74392d9f83a619d1aeeb85abf6709cfab6fbf"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTgwNDA0", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-373180404", "createdAt": "2020-03-11T22:54:23Z", "commit": {"oid": "5b83c779d6638e56676d253c502a494044ee951c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1NDoyNFrOF1MBBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1NDoyNFrOF1MBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTcxNg==", "bodyText": "So we do agree to support shared zkclient while in multi realm mode?", "url": "https://github.com/apache/helix/pull/855#discussion_r391315716", "createdAt": "2020-03-11T22:54:24Z", "author": {"login": "junkaixue"}, "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java", "diffHunk": "@@ -102,28 +118,85 @@ public AccessResult() {\n \n   private static Logger LOG = LoggerFactory.getLogger(ZkBaseDataAccessor.class);\n \n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n \n+  /**\n+   * @deprecated it is recommended to use the builder constructor {@link Builder}\n+   * instead to avoid having to manually create and maintain a RealmAwareZkClient\n+   * outside of ZkBaseDataAccessor.\n+   *\n+   * @param zkClient A created RealmAwareZkClient\n+   */\n   @Deprecated\n-  public ZkBaseDataAccessor(HelixZkClient zkClient) {\n+  public ZkBaseDataAccessor(RealmAwareZkClient zkClient) {\n     if (zkClient == null) {\n       throw new NullPointerException(\"zkclient is null\");\n     }\n     _zkClient = zkClient;\n     _usesExternalZkClient = true;\n   }\n \n+  private ZkBaseDataAccessor(Builder builder) {\n+    switch (builder.realmMode) {\n+      case MULTI_REALM:\n+        try {\n+          if (builder.zkClientType == ZkClientType.DEDICATED) {\n+            // Use a realm-aware dedicated zk client\n+            _zkClient = DedicatedZkClientFactory.getInstance()\n+                .buildZkClient(builder.realmAwareZkConnectionConfig,\n+                    builder.realmAwareZkClientConfig);\n+          } else if (builder.zkClientType == ZkClientType.SHARED) {\n+            // Use a realm-aware shared zk client\n+            _zkClient = SharedZkClientFactory.getInstance()\n+                .buildZkClient(builder.realmAwareZkConnectionConfig,\n+                    builder.realmAwareZkClientConfig);\n+          } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b83c779d6638e56676d253c502a494044ee951c"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a24555f823ffad482f4ef1d391493d5fdaad26", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f7a24555f823ffad482f4ef1d391493d5fdaad26", "committedDate": "2020-03-12T03:34:06Z", "message": "Make ZkBaseDataAccessor realm-aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac9bf5b5116f82c566245fbbaaa3d9ff26036290", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/ac9bf5b5116f82c566245fbbaaa3d9ff26036290", "committedDate": "2020-03-12T03:34:06Z", "message": "Adjust structure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be8a96db684892571686142089ba448519a02b7", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/5be8a96db684892571686142089ba448519a02b7", "committedDate": "2020-03-12T03:34:06Z", "message": "Add zkClientType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c140bcab58f18ca277c70a3240ac0cb169254b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/42c140bcab58f18ca277c70a3240ac0cb169254b", "committedDate": "2020-03-12T03:34:06Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b87147277ca78b8c2cace6dd6491c8ffe0b5271", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/6b87147277ca78b8c2cace6dd6491c8ffe0b5271", "committedDate": "2020-03-12T03:35:16Z", "message": "Remove fallback behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f264649233783eca3f2f822f29b82d0a7377d935", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f264649233783eca3f2f822f29b82d0a7377d935", "committedDate": "2020-03-12T03:35:16Z", "message": "Create according zkclient type on multi-realm mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd09e05235d805d1d4b8ef64a7a8bb9b39c7dfdc", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/bd09e05235d805d1d4b8ef64a7a8bb9b39c7dfdc", "committedDate": "2020-03-12T03:35:16Z", "message": "waitUntilConnected for shared zkclient."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d5fa6ee98ad2dd4ffda04f01624076c0afdb7a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/19d5fa6ee98ad2dd4ffda04f01624076c0afdb7a", "committedDate": "2020-03-12T03:35:16Z", "message": "Remove redundants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b321f844e91c66e2a51043894449769e62ac6a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/66b321f844e91c66e2a51043894449769e62ac6a", "committedDate": "2020-03-12T03:35:16Z", "message": "Add TODO to refactor builder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7816ad37e21f826c7007b556be59dc2d8b21c2e0", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/7816ad37e21f826c7007b556be59dc2d8b21c2e0", "committedDate": "2020-03-12T00:41:53Z", "message": "Add TODO to refactor builder"}, "afterCommit": {"oid": "4f3db40d0a6523eecfe2a832459683be15487d79", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4f3db40d0a6523eecfe2a832459683be15487d79", "committedDate": "2020-03-12T03:51:48Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c063c491cfa6e466af7fdd5fc4d96f5f64c35c30", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c063c491cfa6e466af7fdd5fc4d96f5f64c35c30", "committedDate": "2020-03-12T03:53:59Z", "message": "Add javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f3db40d0a6523eecfe2a832459683be15487d79", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/4f3db40d0a6523eecfe2a832459683be15487d79", "committedDate": "2020-03-12T03:51:48Z", "message": "Add javadoc"}, "afterCommit": {"oid": "c063c491cfa6e466af7fdd5fc4d96f5f64c35c30", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c063c491cfa6e466af7fdd5fc4d96f5f64c35c30", "committedDate": "2020-03-12T03:53:59Z", "message": "Add javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjc0Mjcy", "url": "https://github.com/apache/helix/pull/855#pullrequestreview-373274272", "createdAt": "2020-03-12T04:39:32Z", "commit": {"oid": "c063c491cfa6e466af7fdd5fc4d96f5f64c35c30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4652, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}