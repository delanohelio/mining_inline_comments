{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTAwNjMy", "number": 869, "title": "Replace customized view cache with property cache", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\nFixes #868\n\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\nIn this PR, the custom implementation of customized view cache has been replaced with property cache implementation.\n\nTests\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n[INFO] Tests run: 915, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3,610.258 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 915, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:00 h\n[INFO] Finished at: 2020-03-05T11:59:41-08:00\n[INFO] ------------------------------------------------------------------------\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-03-05T21:06:53Z", "url": "https://github.com/apache/helix/pull/869", "merged": true, "mergeCommit": {"oid": "e367004175ab04887657eff0864b7f188aeda5ff"}, "closed": true, "closedAt": "2020-03-30T23:47:14Z", "author": {"login": "alirezazamani"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQhw7lgBqjMxNTYyOTAwMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS3JwKgH2gAyMzg0NTAwNjMyOjUwMGNkZmE2OTk5MjAxMDkwZmNhNzY0MzUxZWM1ZjYyY2UyMzRjNWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "995a2b6ff6d48ca15fc06439d3347eacd4f28e6e", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/995a2b6ff6d48ca15fc06439d3347eacd4f28e6e", "committedDate": "2020-03-05T20:56:56Z", "message": "Replace the CustomizedView cache with Property cache\n\nIn this commit, the custom implementation of customized view cache\nhas been replaced with property cache implementation."}, "afterCommit": {"oid": "adc6240f8879b3fb93865aee2e95ef5d03444b71", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/adc6240f8879b3fb93865aee2e95ef5d03444b71", "committedDate": "2020-03-23T17:28:18Z", "message": "Replace the CustomizedView cache with Property cache\n\nIn this commit, the custom implementation of customized view cache\nhas been replaced with property cache implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/91888ce81d15bcbd7508442fe39ca263671e80d5", "committedDate": "2020-03-23T23:04:11Z", "message": "Replace the CustomizedView cache with Property cache\n\nIn this commit, the custom implementation of customized view cache\nhas been replaced with property cache implementation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adc6240f8879b3fb93865aee2e95ef5d03444b71", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/adc6240f8879b3fb93865aee2e95ef5d03444b71", "committedDate": "2020-03-23T17:28:18Z", "message": "Replace the CustomizedView cache with Property cache\n\nIn this commit, the custom implementation of customized view cache\nhas been replaced with property cache implementation."}, "afterCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/91888ce81d15bcbd7508442fe39ca263671e80d5", "committedDate": "2020-03-23T23:04:11Z", "message": "Replace the CustomizedView cache with Property cache\n\nIn this commit, the custom implementation of customized view cache\nhas been replaced with property cache implementation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjg5NzYy", "url": "https://github.com/apache/helix/pull/869#pullrequestreview-380689762", "createdAt": "2020-03-24T20:56:15Z", "commit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1NjoxNVrOF7Cv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNDoxMlrOF7DpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NTMyMw==", "bodyText": "Please also add message in the assertion for easy understanding.", "url": "https://github.com/apache/helix/pull/869#discussion_r397455323", "createdAt": "2020-03-24T20:56:15Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);\n+    Assert.assertTrue(isRoutingTableUpdatedProperly);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA4OQ==", "bodyText": "Do we still need this CustomizedViewCache file? I thought this would be the same as ExternalViewCache, which is deprecated. And we use PropertyCache instead in the place we need it. Please confirm with @jiajunwang .", "url": "https://github.com/apache/helix/pull/869#discussion_r397470089", "createdAt": "2020-03-24T21:24:12Z", "author": {"login": "zhangmeng916"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -19,32 +19,24 @@\n  * under the License.\n  */\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.helix.HelixDataAccessor;\n-import org.apache.helix.HelixException;\n import org.apache.helix.PropertyKey;\n import org.apache.helix.PropertyType;\n import org.apache.helix.model.CustomizedView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Maps;\n \n /**\n  * Cache to hold all CustomizedView of a specific type.\n  */\n public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n \n-  protected Map<String, CustomizedView> _customizedViewMap;\n-  protected Map<String, CustomizedView> _customizedViewCache;\n+  private final PropertyCache<CustomizedView> _customizedViewCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjkzNjY5", "url": "https://github.com/apache/helix/pull/869#pullrequestreview-382293669", "createdAt": "2020-03-26T18:25:18Z", "commit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNToxOFrOF8UoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyNjozOFrOF8UsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzAwMA==", "bodyText": "I agree. There should be no extra logic you need to add in addition, once you are using PropertyCache.", "url": "https://github.com/apache/helix/pull/869#discussion_r398797000", "createdAt": "2020-03-26T18:25:18Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -19,32 +19,24 @@\n  * under the License.\n  */\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.helix.HelixDataAccessor;\n-import org.apache.helix.HelixException;\n import org.apache.helix.PropertyKey;\n import org.apache.helix.PropertyType;\n import org.apache.helix.model.CustomizedView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Maps;\n \n /**\n  * Cache to hold all CustomizedView of a specific type.\n  */\n public class CustomizedViewCache extends AbstractDataCache<CustomizedView> {\n   private static final Logger LOG = LoggerFactory.getLogger(CustomizedViewCache.class.getName());\n \n-  protected Map<String, CustomizedView> _customizedViewMap;\n-  protected Map<String, CustomizedView> _customizedViewCache;\n+  private final PropertyCache<CustomizedView> _customizedViewCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA4OQ=="}, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzQyMg==", "bodyText": "nit, return false directly here.", "url": "https://github.com/apache/helix/pull/869#discussion_r398797422", "createdAt": "2020-03-26T18:25:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg2NA==", "bodyText": "Will 20 seconds be too long for this check?", "url": "https://github.com/apache/helix/pull/869#discussion_r398797864", "createdAt": "2020-03-26T18:26:38Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -308,19 +327,53 @@ public void testGetRoutingTableSnapshot() {\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeA\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeA\");\n+\n     routingTableSnapshot =\n         routingTableProvider.getRoutingTableSnapshot(PropertyType.CUSTOMIZEDVIEW, \"typeB\");\n     Assert.assertEquals(routingTableSnapshot.getPropertyType(), PropertyType.CUSTOMIZEDVIEW);\n     Assert.assertEquals(routingTableSnapshot.getCustomizedStateType(), \"typeB\");\n \n-    Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n-        routingTableProvider.getRoutingTableSnapshots();\n-    Assert.assertEquals(routingTableSnapshots.size(), 2);\n-    Assert.assertEquals(routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size(), 2);\n+    // Make sure snapshot information is correct\n+    // Check resources are in a correct state\n+    boolean isRoutingTableUpdatedProperly = TestHelper.verify(() -> {\n+      Map<String, Map<String, RoutingTableSnapshot>> routingTableSnapshots =\n+          routingTableProvider.getRoutingTableSnapshots();\n+      RoutingTableSnapshot routingTableSnapshotTypeA =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeA\");\n+      RoutingTableSnapshot routingTableSnapshotTypeB =\n+          routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).get(\"typeB\");\n+      String typeAp1h1 = \"noState\";\n+      String typeAp1h2 = \"noState\";\n+      String typeAp2h1 = \"noState\";\n+      String typeAp3h2 = \"noState\";\n+      String typeBp1h2 = \"noState\";\n+      String typeBp1h4 = \"noState\";\n+      try {\n+        typeAp1h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h1\");\n+        typeAp1h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h2\");\n+        typeAp2h1 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p2\").get(\"h1\");\n+        typeAp3h2 = routingTableSnapshotTypeA.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p3\").get(\"h2\");\n+        typeBp1h2 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h3\");\n+        typeBp1h4 = routingTableSnapshotTypeB.getCustomizeViews().iterator().next()\n+            .getStateMap(\"p1\").get(\"h4\");\n+      } catch (Exception e) {\n+        // ok because RoutingTable has not been updated yet\n+      }\n+      return (routingTableSnapshots.size() == 2\n+          && routingTableSnapshots.get(PropertyType.CUSTOMIZEDVIEW.name()).size() == 2\n+          && typeAp1h1.equals(\"testState1\") && typeAp1h2.equals(\"testState1\")\n+          && typeAp2h1.equals(\"testState2\") && typeAp3h2.equals(\"testState3\")\n+          && typeBp1h2.equals(\"testState3\") && typeBp1h4.equals(\"testState2\"));\n+    }, TestHelper.WAIT_DURATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91888ce81d15bcbd7508442fe39ca263671e80d5"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9baedd8c438fd05c77f9c240d510b6dae0873b4e", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/9baedd8c438fd05c77f9c240d510b6dae0873b4e", "committedDate": "2020-03-29T18:59:56Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTQ5ODYz", "url": "https://github.com/apache/helix/pull/869#pullrequestreview-384149863", "createdAt": "2020-03-30T19:08:58Z", "commit": {"oid": "9baedd8c438fd05c77f9c240d510b6dae0873b4e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowODo1OFrOF94Mxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowODo1OFrOF94Mxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyODIzMQ==", "bodyText": "This is the propertyCache log:\nLogUtil.logInfo(LOG, genEventInfo(),\nString.format(\"Refreshed %s property %s took %s ms. Selective: %s\", _objMap.size(),\n_propertyDescription, System.currentTimeMillis() - start, _useSelectiveUpdate));\nI think it is overlapping. So there is no lead to log here.", "url": "https://github.com/apache/helix/pull/869#discussion_r400428231", "createdAt": "2020-03-30T19:08:58Z", "author": {"login": "jiajunwang"}, "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -71,87 +77,18 @@ protected CustomizedViewCache(String clusterName, PropertyType propertyType, Str\n    */\n   public void refresh(HelixDataAccessor accessor) {\n     long startTime = System.currentTimeMillis();\n-    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n-\n-    List<String> resources = accessor.getChildNames(customizedViewsKey(keyBuilder));\n-\n-    for (String resource : resources) {\n-      currentPropertyKeys.add(customizedViewKey(keyBuilder, resource));\n-    }\n-\n-    Set<PropertyKey> cachedKeys = new HashSet<>();\n-    Map<PropertyKey, CustomizedView> cachedCustomizedViewMap = Maps.newHashMap();\n-    for (String resource : _customizedViewCache.keySet()) {\n-      PropertyKey key = customizedViewKey(keyBuilder, resource);\n-      cachedKeys.add(key);\n-      cachedCustomizedViewMap.put(key, _customizedViewCache.get(resource));\n-    }\n-    cachedKeys.retainAll(currentPropertyKeys);\n-\n-    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n-    reloadKeys.removeAll(cachedKeys);\n-\n-    Map<PropertyKey, CustomizedView> updatedMap =\n-        refreshProperties(accessor, reloadKeys, new ArrayList<>(cachedKeys),\n-            cachedCustomizedViewMap, new HashSet<>());\n-\n-    Map<String, CustomizedView> newCustomizedViewMap = Maps.newHashMap();\n-    for (CustomizedView customizedView : updatedMap.values()) {\n-      newCustomizedViewMap.put(customizedView.getResourceName(), customizedView);\n-    }\n-\n-    _customizedViewCache = new HashMap<>(newCustomizedViewMap);\n-    _customizedViewMap = new HashMap<>(newCustomizedViewMap);\n-\n+    _customizedViewCache.refresh(accessor);\n     long endTime = System.currentTimeMillis();\n-    LOG.info(\"Refresh \" + _customizedViewMap.size() + \" CustomizedViews of type \" + _customizedStateType\n-        + \" for cluster \" + _clusterName + \", took \" + (endTime - startTime) + \" ms\");\n-  }\n-\n-  private PropertyKey customizedViewsKey(PropertyKey.Builder keyBuilder) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)){\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n-  }\n \n-  private PropertyKey customizedViewKey(PropertyKey.Builder keyBuilder, String resource) {\n-    PropertyKey customizedViewPropertyKey;\n-    if (_propertyType.equals(PropertyType.CUSTOMIZEDVIEW)) {\n-      customizedViewPropertyKey = keyBuilder.customizedView(_customizedStateType, resource);\n-    } else {\n-      throw new HelixException(\n-          \"Failed to refresh CustomizedViewCache, Wrong property type \" + _propertyType + \"!\");\n-    }\n-    return customizedViewPropertyKey;\n+    LOG.info(\"Refresh \" + _customizedViewCache.getPropertyMap().size() + \" CustomizedViews of type \" + _customizedStateType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9baedd8c438fd05c77f9c240d510b6dae0873b4e"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500cdfa6999201090fca764351ec5f62ce234c5a", "author": {"user": {"login": "alirezazamani", "name": "Ali Reza Zamani Zadeh Najari"}}, "url": "https://github.com/apache/helix/commit/500cdfa6999201090fca764351ec5f62ce234c5a", "committedDate": "2020-03-30T23:32:09Z", "message": "log removed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4676, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}