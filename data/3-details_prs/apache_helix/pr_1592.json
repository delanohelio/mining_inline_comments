{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzM5MDkw", "number": 1592, "title": "Cancel async callback when exception is thrown", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1591\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nZkClient asyncCreate() has a mechanism to retry the operation if the KeeperException code is retryable. The method doRetry() will push next retry to the retry queue if the error code is retryable such as connection loss or session expired.\nBut in the retry run, if ZkSessionMismatchedException is thrown from getExpectedZookeeper(), the actual async callback is neither being retried nor cancelled - the retry request is neither pushed to the retry queue nor canceled, then there is no chance the operation is finished. It is like a lock, the lock is not released, then the caller calls wait() will keep waiting forever.\nImpact:\nThis issue blocks following pipeline running.\nExpected behavior:\nOnce an exception is thrown during the retry run, the callback context should be cancelled correctly.\nTests\n\n\n The following tests are written for this issue:\n\n\ntestAsyncWriteRetryThrowException\n\n\ntestAsyncWriteByExpectedSession\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\nIn zookeeper-api\n[INFO] Tests run: 51, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 64.415 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 51, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:08 min\n[INFO] Finished at: 2020-12-10T15:34:19-08:00\n[INFO] ------------------------------------------------------------------------\n\nHelix-core\n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5,328.498 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1253, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:28 h\n[INFO] Finished at: 2020-12-11T17:53:11-08:00\n[INFO] ------------------------------------------------------------------------\n\nDocumentation (Optional)\n\nIn case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCommits\n\nMy commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nCode Quality\n\nMy diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-12-10T23:34:28Z", "url": "https://github.com/apache/helix/pull/1592", "merged": true, "mergeCommit": {"oid": "e1b1690c9c181380d3a824bbc7bcad6b29a43120"}, "closed": true, "closedAt": "2020-12-14T20:37:57Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk7_3cAH2gAyNTM2MzM5MDkwOjMzZTJiZDQxYjg1ZTM2ZGNmZWJhNzc2ZWQzOWRmZjY0NGVjYjgzNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlRQJDgFqTU1MDY1OTI3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/33e2bd41b85e36dcfeba776ed39dff644ecb8378", "committedDate": "2020-12-10T23:32:40Z", "message": "Cancel async callback when exception is thrown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Njk4ODI0", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-549698824", "createdAt": "2020-12-10T23:41:15Z", "commit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MToxNVrOIDig2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MToxNVrOIDig2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjEwNA==", "bodyText": "Let's cancel in final statement?", "url": "https://github.com/apache/helix/pull/1592#discussion_r540582104", "createdAt": "2020-12-10T23:41:15Z", "author": {"login": "junkaixue"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncRetryThread.java", "diffHunk": "@@ -49,7 +49,9 @@ public void run() {\n           context.cancel();\n           interrupt();\n         } catch (Throwable e) {\n-          LOG.error(\"Error retrying callback \" + context, e);\n+          LOG.error(\"Error retrying callback {}, cancelling it\", context, e);\n+          // Cancel the context so the upstream caller can stop waiting\n+          context.cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzAyNjk3", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-549702697", "createdAt": "2020-12-10T23:50:45Z", "commit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1MDo0NlrOIDiv9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1MTowOVrOIDiwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTk3NQ==", "bodyText": "No, if retry was done successfully, then cancel it prematurely will block the normal logic.", "url": "https://github.com/apache/helix/pull/1592#discussion_r540585975", "createdAt": "2020-12-10T23:50:46Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncRetryThread.java", "diffHunk": "@@ -49,7 +49,9 @@ public void run() {\n           context.cancel();\n           interrupt();\n         } catch (Throwable e) {\n-          LOG.error(\"Error retrying callback \" + context, e);\n+          LOG.error(\"Error retrying callback {}, cancelling it\", context, e);\n+          // Cancel the context so the upstream caller can stop waiting\n+          context.cancel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjEwNA=="}, "originalCommit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NjE2NA==", "bodyText": "Why we need these given we have already cancel it in the doRetry()?", "url": "https://github.com/apache/helix/pull/1592#discussion_r540586164", "createdAt": "2020-12-10T23:51:09Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1927,15 +1927,23 @@ private void doAsyncCreate(final String path, final byte[] data, final CreateMod\n       final long startT, final ZkAsyncCallbacks.CreateCallbackHandler cb,\n       final String expectedSessionId) {\n     retryUntilConnected(() -> {\n-      getExpectedZookeeper(expectedSessionId)\n-          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode, cb,\n-              new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n-                @Override\n-                protected void doRetry() {\n-                  doAsyncCreate(path, data, mode, System.currentTimeMillis(), cb,\n-                      expectedSessionId);\n-                }\n-              });\n+      final ZooKeeper zk;\n+      try {\n+        zk = getExpectedZookeeper(expectedSessionId);\n+      } catch (ZkSessionMismatchedException e) {\n+        // Use BADARGUMENTS rc to represent session mismatch error (invalid expectedSession)\n+        // and not retry.\n+        cb.processResult(KeeperException.Code.BADARGUMENTS.intValue(), path,\n+            new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n+        throw e;\n+      }\n+      zk.create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode, cb,\n+          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+            @Override\n+            protected void doRetry() {\n+              doAsyncCreate(path, data, mode, System.currentTimeMillis(), cb, expectedSessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33e2bd41b85e36dcfeba776ed39dff644ecb8378"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/667964e4cea5e67bee70d68e43161cbd7af3be84", "committedDate": "2020-12-11T21:02:12Z", "message": "cancel callback with unknown ret code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjAyOTY1", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-550602965", "createdAt": "2020-12-11T21:54:25Z", "commit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjUzNDEw", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-550653410", "createdAt": "2020-12-12T00:03:41Z", "commit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDowMzo0MVrOIEWr1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDowMzo0MVrOIEWr1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQzNjg4NA==", "bodyText": "nit, RuntimeException  -> Throwable?", "url": "https://github.com/apache/helix/pull/1592#discussion_r541436884", "createdAt": "2020-12-12T00:03:41Z", "author": {"login": "jiajunwang"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1926,18 +1926,25 @@ public void asyncCreate(final String path, Object datat, final CreateMode mode,\n   private void doAsyncCreate(final String path, final byte[] data, final CreateMode mode,\n       final long startT, final ZkAsyncCallbacks.CreateCallbackHandler cb,\n       final String expectedSessionId) {\n-    retryUntilConnected(() -> {\n-      getExpectedZookeeper(expectedSessionId)\n-          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode, cb,\n-              new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n-                @Override\n-                protected void doRetry() {\n-                  doAsyncCreate(path, data, mode, System.currentTimeMillis(), cb,\n-                      expectedSessionId);\n-                }\n-              });\n-      return null;\n-    });\n+    try {\n+      retryUntilConnected(() -> {\n+        getExpectedZookeeper(expectedSessionId)\n+            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode, cb,\n+                new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, false) {\n+                  @Override\n+                  protected void doRetry() {\n+                    doAsyncCreate(path, data, mode, System.currentTimeMillis(), cb,\n+                        expectedSessionId);\n+                  }\n+                });\n+        return null;\n+      });\n+    } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjUzOTYw", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-550653960", "createdAt": "2020-12-12T00:04:44Z", "commit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjU5Mjc3", "url": "https://github.com/apache/helix/pull/1592#pullrequestreview-550659277", "createdAt": "2020-12-12T00:18:27Z", "commit": {"oid": "667964e4cea5e67bee70d68e43161cbd7af3be84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4175, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}