{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjUwNzQ3", "number": 1229, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo0NVrOEWSiIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzozOFrOEW84AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA3Nzc5OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo0NVrOG9hXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo0NVrOG9hXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjkyMg==", "bodyText": "Why is this part of this PR? I thought you had created a PR for this already?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467162922", "createdAt": "2020-08-07T17:05:45Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA3ODQ0OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1OVrOG9hXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODozNlrOG9hcYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzAyNA==", "bodyText": "Why is this change part of this PR? Did you rebase from https://github.com/apache/helix/tree/dynamically-loaded-task?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467163024", "createdAt": "2020-08-07T17:05:59Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDI1Nw==", "bodyText": "Sorry I created the local JarLoader branch from my local DynamicTaskConfig branch. I thought the two (rebasing and creating from latest local branch) would be the same but apparently they're not. Let me rebase and push again.", "url": "https://github.com/apache/helix/pull/1229#discussion_r467164257", "createdAt": "2020-08-07T17:08:36Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzAyNA=="}, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA4NjgyOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODo0OFrOG9hcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyMzoxMFrOG9lTZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA==", "bodyText": "Question: What would the returned URL look like for a local JAR? Could you give some examples here?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467164328", "createdAt": "2020-08-07T17:08:48Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NjQ2Nw==", "bodyText": "Do you mean to add the example URL to the comment in code? An example is: file:/home/rabashiz/apache-helix/helix/helix-core/src/test/resources/Reindex.jar", "url": "https://github.com/apache/helix/pull/1229#discussion_r467166467", "createdAt": "2020-08-07T17:13:01Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA=="}, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNzQ5NQ==", "bodyText": "Thank you. That makes sense.", "url": "https://github.com/apache/helix/pull/1229#discussion_r467227495", "createdAt": "2020-08-07T19:23:10Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA=="}, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA5MjA4OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMDoxNlrOG9hfxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMDoxNlrOG9hfxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTEyNA==", "bodyText": "Let's refactor this. The way it's written is slightly awkward:\nLet's use the following format:\nif (error condition is met) {\n  throw Exception;\n}\nreturn result;", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165124", "createdAt": "2020-08-07T17:10:16Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA5NzAzOnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMTo0M1rOG9hiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNDo1MFrOG9hoeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTgzNQ==", "bodyText": "It seems that new File() only throws\nNullPointerException - If uri is null\nIllegalArgumentException - If the preconditions on the parameter do not hold\nper https://docs.oracle.com/javase/7/docs/api/java/io/File.html.\nWhy are we catching MalformedURLException that's not thrown by anyone?", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165835", "createdAt": "2020-08-07T17:11:43Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    } catch (MalformedURLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NzM1NA==", "bodyText": "taskJarFile.toURI().toURL() throws it. I'll re-organize the code to make that clearer.", "url": "https://github.com/apache/helix/pull/1229#discussion_r467167354", "createdAt": "2020-08-07T17:14:50Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    } catch (MalformedURLException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTgzNQ=="}, "originalCommit": {"oid": "4fc4012e983800eb8eb75753b63e24254cecdf3d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTAxMzU2OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzowNlrOG-efpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyMDo0N1rOG_jjiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg==", "bodyText": "Wouldn't IllegalArgument be more appropriate?", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164516", "createdAt": "2020-08-10T20:23:06Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwODIzNA==", "bodyText": "Does it make sense to check for any other permission like whether jar file is readable etc here to make sure jar is readable for JVM to execute?", "url": "https://github.com/apache/helix/pull/1229#discussion_r468308234", "createdAt": "2020-08-11T03:41:15Z", "author": {"login": "manick02"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg=="}, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5NjAxMQ==", "bodyText": "That's a good point, but I think later checks, when we actually try to read from this JAR, will throw appropriate exceptions if there are issues with permissions.", "url": "https://github.com/apache/helix/pull/1229#discussion_r469296011", "createdAt": "2020-08-12T14:20:47Z", "author": {"login": "rabashizade"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg=="}, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTAxNTA1OnYy", "diffSide": "RIGHT", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzozOFrOG-egnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzozOFrOG-egnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDc2NQ==", "bodyText": "IllegalArgument since the input is malformed?", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164765", "createdAt": "2020-08-10T20:23:38Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    }\n+\n+    try {\n+      return taskJarFile.toURI().toURL();\n+    } catch (MalformedURLException e) {\n+      LOG.error(\"Failed to open JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"Malformed JAR URL for task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 869, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}