{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDQ0NjA5", "number": 785, "title": "Fix the ConcurrentModificationException in ClusterEvent.java", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\n(Fixes #784 )\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe clone method is not quite clean in its implementation, readers can hardly tell which _eventAttributeMap is the old event versus the new one.\nAlso, the stack trace in #784 proves the possibility of ConcurrentModificationException. A right and straightforward way is to make the current attribute map concurrent and thread-safe\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n\nTestClusterEvent#testClone\n\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\n\n(Copy & paste the result of \"mvn test\")\nEND testSessionExpiredWhenResetHandlers at Wed Feb 19 19:03:44 PST 2020, took: 7722ms.\nShut down zookeeper at port 2183 in thread main\nTests run: 1083, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4,470.368 sec <<< FAILURE! - in TestSuite\ntestMissingTopStateDurationMonitoring(org.apache.helix.integration.controller.TestControllerLeadershipChange)  Time elapsed: 4.353 sec  <<< FAILURE!\njava.lang.AssertionError: expected: but was:\nat org.testng.Assert.fail(Assert.java:89)\nat org.testng.Assert.failNotEquals(Assert.java:480)\nat org.testng.Assert.assertTrue(Assert.java:37)\nat org.testng.Assert.assertTrue(Assert.java:47)\nat org.apache.helix.integration.controller.TestControllerLeadershipChange.testMissingTopStateDurationMonitoring(TestControllerLeadershipChange.java:262)\nResults :\nFailed tests:\nTestControllerLeadershipChange.testMissingTopStateDurationMonitoring:262 expected: but was:\nTests run: 1083, Failures: 1, Errors: 0, Skipped: 0\nThe failed test passed in IDE\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines, and I have squashed multiple commits if they address the same issue. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml", "createdAt": "2020-02-19T23:13:08Z", "url": "https://github.com/apache/helix/pull/785", "merged": true, "mergeCommit": {"oid": "98a4be30562eb87e5d533e43d3ce36093d067686"}, "closed": true, "closedAt": "2020-02-25T21:49:58Z", "author": {"login": "i3wangyi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF-0LygH2gAyMzc3NDQ0NjA5OmVlMWNiZDAyZGJlZDI4MDRhZmFmYjgwZWM2ZDAxOTRjNjFiZmZmNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGnRMFAFqTM2Mjk0OTgyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "committedDate": "2020-02-19T23:06:49Z", "message": "Fix the ConcurrentModificationException in ClusterEvent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjc4NDQ3", "url": "https://github.com/apache/helix/pull/785#pullrequestreview-361678447", "createdAt": "2020-02-20T07:24:54Z", "commit": {"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoyNDo1NVrOFsIk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoyNDo1NVrOFsIk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyMjE4MA==", "bodyText": "Thanks for the PR!\n\n\nCan we just replace clone() logic with what you have in the copy constructor? If the constructor is private, then I think it'd just be simpler to put this \"copy\" logic in clone() (it seems pretty simple anyways).\n\n\nWith that said, do we still need addAttribute() anymore?", "url": "https://github.com/apache/helix/pull/785#discussion_r381822180", "createdAt": "2020-02-20T07:24:55Z", "author": {"login": "narendly"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ClusterEvent.java", "diffHunk": "@@ -55,6 +55,19 @@ public ClusterEvent(String clusterName, ClusterEventType eventType, String event\n     _eventId = eventId;\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzA3NTE4", "url": "https://github.com/apache/helix/pull/785#pullrequestreview-361707518", "createdAt": "2020-02-20T08:26:52Z", "commit": {"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODoyNjo1M1rOFsKB3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODoyNjo1M1rOFsKB3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA==", "bodyText": "@i3wangyi I am a bit confused and not convinced by the root cause: \"In ClusterEvent.java, the hashmap update itself while in its for loop\". If so, each time this method is called, the ConcurrentModificationException would be thrown and it does not work at all.\nThe maps _eventAttributeMap are different objects. So addAttribute() does not add the attributes to the original event's map, but the new event's different map.\nSo I think the root cause could be another place (eg. another thread) updating the original event's map while in for loop.", "url": "https://github.com/apache/helix/pull/785#discussion_r381845980", "createdAt": "2020-02-20T08:26:53Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ClusterEvent.java", "diffHunk": "@@ -114,11 +127,6 @@ public String toString() {\n   }\n \n   public ClusterEvent clone(String eventId) {\n-    ClusterEvent newEvent = new ClusterEvent(_clusterName, _eventType, eventId);\n-    newEvent.setCreationTime(_creationTime);\n-    for (String attributeName : _eventAttributeMap.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "committedDate": "2020-02-21T01:51:11Z", "message": "Add the clone method unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ddf072fb22fb286e3f6dd457ced8271d5ce6395", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/1ddf072fb22fb286e3f6dd457ced8271d5ce6395", "committedDate": "2020-02-21T01:43:23Z", "message": "Add the clone method unit test"}, "afterCommit": {"oid": "4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "committedDate": "2020-02-21T01:51:11Z", "message": "Add the clone method unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87185bfb5355d9548005fef3e85222253421fbe1", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/87185bfb5355d9548005fef3e85222253421fbe1", "committedDate": "2020-02-21T19:28:48Z", "message": "Add the thread-safe clone method and change the map to ConcurrentHashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e2af2e06dd2c712b03e06ae7623971c487e4437", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/8e2af2e06dd2c712b03e06ae7623971c487e4437", "committedDate": "2020-02-21T21:08:38Z", "message": "add the CountDownLatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTEzOTYx", "url": "https://github.com/apache/helix/pull/785#pullrequestreview-362913961", "createdAt": "2020-02-21T21:01:03Z", "commit": {"oid": "87185bfb5355d9548005fef3e85222253421fbe1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTowMTowM1rOFtEecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTowMTowM1rOFtEecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMzU3MA==", "bodyText": "This is a reasonable test. Maybe to make it more accurate in this test, we can use a CountDownLatch as a signal right before clone().\nlatch.countDown(); // Tell 10 threads to modify this the attributeMap.\nclone();\n\nAnd also add more attributes (say, 20) in each thread just to make the time a bit longer.\nThis CountDownLatch and more attributes make sure that the attribute adding is not completed yet before clone().", "url": "https://github.com/apache/helix/pull/785#discussion_r382803570", "createdAt": "2020-02-21T21:01:03Z", "author": {"login": "huizhilu"}, "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestClusterEvent.java", "diffHunk": "@@ -19,16 +19,51 @@\n  * under the License.\n  */\n \n+import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.List;\n+\n+import org.testng.Assert;\n import org.testng.AssertJUnit;\n import org.testng.annotations.Test;\n \n-@Test\n+\n public class TestClusterEvent {\n+\n   @Test\n-  public void testSimplePutandGet() {\n+  public void testSimplePutAndGet() {\n     ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n     AssertJUnit.assertEquals(event.getEventType(), ClusterEventType.Unknown);\n     event.addAttribute(\"attr1\", \"value\");\n     AssertJUnit.assertEquals(event.getAttribute(\"attr1\"), \"value\");\n   }\n+\n+  @Test\n+  public void testThreadSafeClone() throws InterruptedException {\n+    String clusterName = \"TestCluster\";\n+    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown, \"testId\");\n+    for (int i = 0; i < 100; i++) {\n+      event.addAttribute(String.valueOf(i), i);\n+    }\n+    List<Thread> threads = new ArrayList<>();\n+    for (int i = 0; i < 10; i++) {\n+      threads.add(new Thread(() -> {\n+        String threadName = Thread.currentThread().getName();\n+        event.addAttribute(threadName, threadName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87185bfb5355d9548005fef3e85222253421fbe1"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda", "author": {"user": {"login": "i3wangyi", "name": "Yi Wang"}}, "url": "https://github.com/apache/helix/commit/8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda", "committedDate": "2020-02-21T21:16:01Z", "message": "Use only one thread to update the original clone event"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTI2ODk1", "url": "https://github.com/apache/helix/pull/785#pullrequestreview-362926895", "createdAt": "2020-02-21T21:26:40Z", "commit": {"oid": "8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTQ5ODIx", "url": "https://github.com/apache/helix/pull/785#pullrequestreview-362949821", "createdAt": "2020-02-21T22:14:42Z", "commit": {"oid": "8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}