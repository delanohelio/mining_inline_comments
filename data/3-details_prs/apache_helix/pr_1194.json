{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjgwMDU3", "number": 1194, "title": "Fix flaky test testGetChildrenOnLargeNumChildren", "bodyText": "Issues\n\n My PR addresses the following Helix issues and references them in the PR description:\n\nFixes #1193\nDescription\n\n Here are some details about my PR, including screenshots of any UI changes:\n\nThe test testGetChildrenOnLargeNumChildren becomes flaky after more commits are checked in.\nTests\n\n The following tests are written for this issue:\n\n(List the names of added unit/integration tests)\n\n The following is the result of the \"mvn test\" command on the appropriate module:\n\nzookeeper-api\n\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 62.807 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:07 min\n[INFO] Finished at: 2020-07-30T17:10:34-07:00\n[INFO] ------------------------------------------------------------------------\n\nCommits\n\n My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation (Optional)\n\n In case of new functionality, my PR adds documentation in the following wiki page:\n\n(Link the GitHub wiki you added)\nCode Quality\n\n My diff has been formatted using helix-style.xml\n(helix-style-intellij.xml if IntelliJ IDE is used)", "createdAt": "2020-07-31T00:00:41Z", "url": "https://github.com/apache/helix/pull/1194", "merged": true, "mergeCommit": {"oid": "ab4d4e330336c1be9debdcc3994b4db6447838da"}, "closed": true, "closedAt": "2020-08-05T17:56:56Z", "author": {"login": "huizhilu"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6JDejAFqTQ1ODg0Njk2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7dp1GgFqTQ2MDQ2Mzc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ2OTY5", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-458846969", "createdAt": "2020-07-31T00:26:16Z", "commit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNjoxNlrOG54KXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNjoxNlrOG54KXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjE3NQ==", "bodyText": "can we delete parent path here without child node deleted?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342175", "createdAt": "2020-07-31T00:26:16Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < toCreateChildrenCount; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n+        _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ3MjQ1", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-458847245", "createdAt": "2020-07-31T00:27:21Z", "commit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNzoyMVrOG54LYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNzoyMVrOG54LYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQzNQ==", "bodyText": "why do we need this? is it 30sec?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342435", "createdAt": "2020-07-31T00:27:21Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ3NjQy", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-458847642", "createdAt": "2020-07-31T00:28:46Z", "commit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyODo0NlrOG54MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyODo0NlrOG54MtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0Mjc3Mg==", "bodyText": "what is the difference of using this static block vs initalization at declaration?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463342772", "createdAt": "2020-07-31T00:28:46Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -119,19 +115,6 @@\n   // ZkEventThread. Otherwise the retry request might block the normal event processing.\n   protected final ZkAsyncRetryThread _asyncCallRetryThread;\n \n-  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8", "committedDate": "2020-07-31T00:36:18Z", "message": "Fix flaky test testGetChildrenOnLargeNumChildren"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c98fb3659f7d58d3f136e70766279d864b3c8828", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/c98fb3659f7d58d3f136e70766279d864b3c8828", "committedDate": "2020-07-30T23:31:53Z", "message": "Fix flaky test testGetChildrenOnLargeNumChildren"}, "afterCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8", "committedDate": "2020-07-31T00:36:18Z", "message": "Fix flaky test testGetChildrenOnLargeNumChildren"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODU0MzA2", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-458854306", "createdAt": "2020-07-31T00:51:59Z", "commit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjowMFrOG54liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjowMFrOG54liw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTEzMQ==", "bodyText": "How about let us construct a new zkclient here. Is it possible _zkClient would be session timeout by another test or thread?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463349131", "createdAt": "2020-07-31T00:52:00Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+    int toCreateChildrenCount = 110;\n+\n+    _zkClient.createPersistent(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODU0NDMw", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-458854430", "createdAt": "2020-07-31T00:52:20Z", "commit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoyMFrOG54l_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MjoyMFrOG54l_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0OTI0NQ==", "bodyText": "60 secs?", "url": "https://github.com/apache/helix/pull/1194#discussion_r463349245", "createdAt": "2020-07-31T00:52:20Z", "author": {"login": "kaisun2000"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,59 +864,38 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c7667c5ad7b900ac1d7e42dd5d1a007fdc7a8"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/86c62b489ff7e8304f8591a1d3147351389e0721", "committedDate": "2020-07-31T03:47:53Z", "message": "Cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a0c23efaa25258f9ed3d70a740afd8ecc858d4e", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/9a0c23efaa25258f9ed3d70a740afd8ecc858d4e", "committedDate": "2020-07-31T01:07:09Z", "message": "Cleanup"}, "afterCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/86c62b489ff7e8304f8591a1d3147351389e0721", "committedDate": "2020-07-31T03:47:53Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzcxOTU0", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-459771954", "createdAt": "2020-08-03T06:19:49Z", "commit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoxOTo0OVrOG6tY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoxOTo0OVrOG6tY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNDI1Mg==", "bodyText": "Nit: childPath", "url": "https://github.com/apache/helix/pull/1194#discussion_r464214252", "createdAt": "2020-08-03T06:19:49Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzcyOTQ2", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-459772946", "createdAt": "2020-08-03T06:22:10Z", "commit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMjoxMFrOG6tcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyMjoxMFrOG6tcHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNTA2OQ==", "bodyText": "Nit: let's say this a little more clearly:\nSomething on the lines of \"Should fail because listing 110K znodes with UUID names should cause packet length exceeded error, causing a connection loss.\"", "url": "https://github.com/apache/helix/pull/1194#discussion_r464215069", "createdAt": "2020-08-03T06:22:10Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Nzc0MzAz", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-459774303", "createdAt": "2020-08-03T06:25:18Z", "commit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyNToxOFrOG6tf8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoyNToxOFrOG6tf8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNjA1MA==", "bodyText": "Shouldn't you delete recursively? Wouldn't this fail because of children nodes?", "url": "https://github.com/apache/helix/pull/1194#discussion_r464216050", "createdAt": "2020-08-03T06:25:18Z", "author": {"login": "narendly"}, "path": "zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestRawZkClient.java", "diffHunk": "@@ -868,60 +864,41 @@ public void testAsyncWriteOperations() {\n    * Tests getChildren() when there are an excessive number of children and connection loss happens,\n    * the operation should terminate and exit retry loop.\n    */\n-  @Test\n+  @Test(timeOut = 30 * 1000L)\n   public void testGetChildrenOnLargeNumChildren() throws Exception {\n-    // Default packetLen is 4M. It is static final and initialized\n-    // when first zkClient is created.\n-    // So we could not just set \"jute.maxbuffer\" to change the value.\n-    // Reflection is needed to change the value.\n-    // Remove \"final\" modifier\n-    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-    boolean isModifierAccessible = modifiersField.isAccessible();\n-    modifiersField.setAccessible(true);\n-\n-    Field packetLenField = ClientCnxn.class.getDeclaredField(\"packetLen\");\n-    Field childrenLimitField =\n-        org.apache.helix.zookeeper.zkclient.ZkClient.class.getDeclaredField(\"NUM_CHILDREN_LIMIT\");\n-    modifiersField.setInt(packetLenField, packetLenField.getModifiers() & ~Modifier.FINAL);\n-    modifiersField.setInt(childrenLimitField, childrenLimitField.getModifiers() & ~Modifier.FINAL);\n-\n-    boolean isPacketLenAccessible = packetLenField.isAccessible();\n-    packetLenField.setAccessible(true);\n-    int originPacketLen = packetLenField.getInt(null);\n-    // Keep 150 bytes for successfully creating each child node.\n-    packetLenField.set(null, 150);\n-\n-    boolean isChildrenLimitAccessible = childrenLimitField.isAccessible();\n-    childrenLimitField.setAccessible(true);\n-    int originChildrenLimit = childrenLimitField.getInt(null);\n-    childrenLimitField.set(null, 2);\n-\n-    String path = \"/\" + TestHelper.getTestMethodName();\n-    // Create 5 children to make packet length of children exceed 150 bytes\n+    // Create 110K children to make packet length of children exceed 4 MB\n     // and cause connection loss for getChildren() operation\n-    for (int i = 0; i < 5; i++) {\n-      _zkClient.createPersistent(path + \"/\" + UUID.randomUUID().toString(), true);\n+    String path = \"/\" + TestHelper.getTestMethodName();\n+\n+    _zkClient.createPersistent(path);\n+\n+    for (int i = 0; i < 110; i++) {\n+      List<Op> ops = new ArrayList<>(1000);\n+      for (int j = 0; j < 1000; j++) {\n+        String child = path + \"/\" + UUID.randomUUID().toString();\n+        ops.add(Op.create(child, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL));\n+      }\n+      // Reduce total creation time by batch creating znodes\n+      _zkClient.multi(ops);\n     }\n \n     try {\n       _zkClient.getChildren(path);\n-      Assert.fail(\"Should not successfully get children.\");\n+      Assert.fail(\"Should not successfully get children because of connection loss.\");\n     } catch (ZkException expected) {\n       Assert.assertEquals(expected.getMessage(),\n           \"org.apache.zookeeper.KeeperException$MarshallingErrorException: \"\n               + \"KeeperErrorCode = MarshallingError\");\n     } finally {\n-      packetLenField.set(null, originPacketLen);\n-      packetLenField.setAccessible(isPacketLenAccessible);\n-\n-      childrenLimitField.set(null, originChildrenLimit);\n-      childrenLimitField.setAccessible(isChildrenLimitAccessible);\n-\n-      modifiersField.setAccessible(isModifierAccessible);\n+      _zkClient.close();\n+      _zkClient = new ZkClient(ZkTestBase.ZK_ADDR);\n \n       Assert.assertTrue(TestHelper.verify(() -> {\n-        _zkClient.deleteRecursively(path);\n-        return !_zkClient.exists(path);\n+        try {\n+          return _zkClient.delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjgwMjQ2", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-460280246", "createdAt": "2020-08-03T19:19:45Z", "commit": {"oid": "86c62b489ff7e8304f8591a1d3147351389e0721"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bb7d9f0f5ceb4a150ccb50ac03da50ac76d89b", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/12bb7d9f0f5ceb4a150ccb50ac03da50ac76d89b", "committedDate": "2020-08-03T19:24:49Z", "message": "Naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ba6bd43eb0950b291d56cfb15521d06d682a7a", "author": {"user": {"login": "huizhilu", "name": "Huizhi Lu"}}, "url": "https://github.com/apache/helix/commit/f3ba6bd43eb0950b291d56cfb15521d06d682a7a", "committedDate": "2020-08-03T20:40:26Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDYzNzgy", "url": "https://github.com/apache/helix/pull/1194#pullrequestreview-460463782", "createdAt": "2020-08-04T03:00:33Z", "commit": {"oid": "f3ba6bd43eb0950b291d56cfb15521d06d682a7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4608, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}